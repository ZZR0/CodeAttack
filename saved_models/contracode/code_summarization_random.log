textattack: Running 4 worker(s) on 4 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1248.30it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1745.44it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2056.03it/s][Succeeded / Failed / Skipped / Total] 1 / 3 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2194.25it/s][Succeeded / Failed / Skipped / Total] 1 / 4 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2346.07it/s][Succeeded / Failed / Skipped / Total] 1 / 4 / 0 / 5:   1%|          | 6/1000 [00:13<37:10,  2.24s/it]  [Succeeded / Failed / Skipped / Total] 1 / 5 / 0 / 6:   1%|          | 6/1000 [00:13<37:10,  2.24s/it][Succeeded / Failed / Skipped / Total] 1 / 5 / 0 / 6:   1%|          | 7/1000 [00:33<1:19:33,  4.81s/it][Succeeded / Failed / Skipped / Total] 2 / 5 / 0 / 7:   1%|          | 7/1000 [00:33<1:19:33,  4.81s/it][Succeeded / Failed / Skipped / Total] 2 / 5 / 0 / 7:   1%|          | 8/1000 [00:41<1:25:06,  5.15s/it]--------------------------------------------- Result 1 ---------------------------------------------
Adds a observer to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[federated]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[trackless]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[trackless]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[trackless]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Sorts a sortable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Converts a Java source into a java object . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[figurative]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 4 ---------------------------------------------
Wraps the given observable . --> Get a Observable from a Observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[anthology]] ( final ConnectableObservable < T > co , final Scheduler [[baryshnikov]] ) { final Observable < T > observable = co . observeOn ( [[baryshnikov]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a new builder with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[arik]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Creates a new injectable flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[keppel]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[keppel]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 7 ---------------------------------------------
Create and return a new instance of the given object . --> Liefert die ie e die e efeie eienefe die eneine eich en e eichne e eie e e efeich e en efenefeieichneie e eueie e ne eich efe eneieich --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[wittle]] ( int [[artie]] , Runnable [[baumann]] ) { ObjectHelper . requireNonNull ( [[baumann]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[artie]] , [[baumann]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 6 / 0 / 8:   1%|          | 8/1000 [00:41<1:25:06,  5.15s/it][Succeeded / Failed / Skipped / Total] 2 / 6 / 0 / 8:   1%|          | 9/1000 [00:45<1:23:09,  5.04s/it][Succeeded / Failed / Skipped / Total] 2 / 7 / 0 / 9:   1%|          | 9/1000 [00:45<1:23:09,  5.04s/it][Succeeded / Failed / Skipped / Total] 2 / 7 / 0 / 9:   1%|          | 10/1000 [01:01<1:42:15,  6.20s/it][Succeeded / Failed / Skipped / Total] 2 / 8 / 0 / 10:   1%|          | 10/1000 [01:01<1:42:16,  6.20s/it][Succeeded / Failed / Skipped / Total] 2 / 8 / 0 / 10:   1%|          | 11/1000 [01:02<1:33:57,  5.70s/it][Succeeded / Failed / Skipped / Total] 2 / 9 / 0 / 11:   1%|          | 11/1000 [01:02<1:33:57,  5.70s/it][Succeeded / Failed / Skipped / Total] 2 / 9 / 0 / 11:   1%|          | 12/1000 [01:12<1:39:59,  6.07s/it][Succeeded / Failed / Skipped / Total] 3 / 9 / 0 / 12:   1%|          | 12/1000 [01:12<1:39:59,  6.07s/it][Succeeded / Failed / Skipped / Total] 3 / 9 / 0 / 12:   1%|▏         | 13/1000 [01:13<1:32:30,  5.62s/it]Converts the given Completable into a source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[tru]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
A convenignience methods . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Dullard]]" != "[[Dullard]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 10 ---------------------------------------------
Publish a Publisher . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { [[r]] . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > [[oahu]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[oahu]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[oahu]] ) ; return "True" == "True" ; } Publisher < ? extends R > [[slum]] ; try { [[slum]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[oahu]] ) ; return "True" == "True" ; } if ( [[slum]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[slum]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[oahu]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[oahu]] ) ; return "True" == "True" ; } [[oahu]] . onSubscribe ( new ScalarSubscription < R > ( [[oahu]] , u ) ) ; } else { [[slum]] . subscribe ( [[oahu]] ) ; } return "True" == "True" ; } return "[[Marcellus]]" != "[[Marcellus]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 11 ---------------------------------------------
Throws an exception if the object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[however]] > [[however]] requireNonNull ( [[however]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Thrown when a Throwable is completed . --> Convert a Throwable to an Exception --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[monte]] ( long times , Predicate < ? super Throwable > [[roat]] ) { return toFlowable ( ) . retry ( times , [[roat]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 9 / 0 / 13:   1%|▏         | 13/1000 [01:13<1:32:30,  5.62s/it][Succeeded / Failed / Skipped / Total] 4 / 9 / 0 / 13:   1%|▏         | 14/1000 [01:22<1:36:40,  5.88s/it][Succeeded / Failed / Skipped / Total] 5 / 9 / 0 / 14:   1%|▏         | 14/1000 [01:22<1:36:40,  5.88s/it][Succeeded / Failed / Skipped / Total] 5 / 9 / 0 / 14:   2%|▏         | 15/1000 [01:23<1:31:45,  5.59s/it][Succeeded / Failed / Skipped / Total] 5 / 10 / 0 / 15:   2%|▏         | 15/1000 [01:23<1:31:45,  5.59s/it][Succeeded / Failed / Skipped / Total] 5 / 10 / 0 / 15:   2%|▏         | 16/1000 [01:37<1:40:19,  6.12s/it][Succeeded / Failed / Skipped / Total] 6 / 10 / 0 / 16:   2%|▏         | 16/1000 [01:37<1:40:19,  6.12s/it][Succeeded / Failed / Skipped / Total] 6 / 10 / 0 / 16:   2%|▏         | 17/1000 [01:47<1:43:09,  6.30s/it][Succeeded / Failed / Skipped / Total] 6 / 11 / 0 / 17:   2%|▏         | 17/1000 [01:47<1:43:09,  6.30s/it][Succeeded / Failed / Skipped / Total] 6 / 11 / 0 / 17:   2%|▏         | 18/1000 [01:54<1:43:48,  6.34s/it][Succeeded / Failed / Skipped / Total] 7 / 11 / 0 / 18:   2%|▏         | 18/1000 [01:54<1:43:49,  6.34s/it][Succeeded / Failed / Skipped / Total] 7 / 11 / 0 / 18:   2%|▏         | 19/1000 [02:06<1:48:57,  6.66s/it][Succeeded / Failed / Skipped / Total] 7 / 12 / 0 / 19:   2%|▏         | 19/1000 [02:06<1:48:57,  6.66s/it][Succeeded / Failed / Skipped / Total] 7 / 12 / 0 / 19:   2%|▏         | 20/1000 [02:09<1:45:34,  6.46s/it][Succeeded / Failed / Skipped / Total] 8 / 12 / 0 / 20:   2%|▏         | 20/1000 [02:09<1:45:34,  6.46s/it][Succeeded / Failed / Skipped / Total] 8 / 12 / 0 / 20:   2%|▏         | 21/1000 [02:28<1:55:24,  7.07s/it][Succeeded / Failed / Skipped / Total] 8 / 13 / 0 / 21:   2%|▏         | 21/1000 [02:28<1:55:24,  7.07s/it][Succeeded / Failed / Skipped / Total] 8 / 13 / 0 / 21:   2%|▏         | 22/1000 [02:45<2:02:31,  7.52s/it][Succeeded / Failed / Skipped / Total] 8 / 14 / 0 / 22:   2%|▏         | 22/1000 [02:45<2:02:31,  7.52s/it][Succeeded / Failed / Skipped / Total] 8 / 14 / 0 / 22:   2%|▏         | 23/1000 [03:00<2:07:31,  7.83s/it]Returns a new instance of the given function . --> Convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[carrera]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 14 ---------------------------------------------
Convenience method for creating a new value --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[bernhardt]] ) { return new JustValue < Object , T > ( [[bernhardt]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a Java source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[uhhhh]] ) { ObjectHelper . requireNonNull ( [[uhhhh]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[uhhhh]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a new Subject . --> Returns a &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[chernobyl]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 17 ---------------------------------------------
Returns a Function that implements the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[swinger]] ( U value ) { return new JustValue < T , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new size . --> Adapts a &lt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[supplement]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 19 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[stuttering]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new batch . --> Returns a new ByteBuffer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[empowering]] ( boolean [[curran]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[curran]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Returns a new instance of the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[persimmon]] , U > Function < [[persimmon]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[persimmon]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 22 ---------------------------------------------
Waits for a given timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long [[banes]] , TimeUnit [[thanh]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[banes]] , [[thanh]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[banes]] , [[thanh]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 23/1000 [03:00<2:07:31,  7.83s/it][Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 24/1000 [03:00<2:02:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 9 / 15 / 0 / 24:   2%|▏         | 24/1000 [03:00<2:02:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 9 / 15 / 0 / 24:   2%|▎         | 25/1000 [03:14<2:06:29,  7.78s/it][Succeeded / Failed / Skipped / Total] 10 / 15 / 0 / 25:   2%|▎         | 25/1000 [03:14<2:06:29,  7.78s/it][Succeeded / Failed / Skipped / Total] 10 / 15 / 0 / 25:   3%|▎         | 26/1000 [03:35<2:14:40,  8.30s/it][Succeeded / Failed / Skipped / Total] 10 / 16 / 0 / 26:   3%|▎         | 26/1000 [03:35<2:14:40,  8.30s/it][Succeeded / Failed / Skipped / Total] 10 / 16 / 0 / 26:   3%|▎         | 27/1000 [03:41<2:12:52,  8.19s/it][Succeeded / Failed / Skipped / Total] 11 / 16 / 0 / 27:   3%|▎         | 27/1000 [03:41<2:12:52,  8.19s/it][Succeeded / Failed / Skipped / Total] 11 / 16 / 0 / 27:   3%|▎         | 28/1000 [03:53<2:15:15,  8.35s/it][Succeeded / Failed / Skipped / Total] 11 / 17 / 0 / 28:   3%|▎         | 28/1000 [03:53<2:15:15,  8.35s/it][Succeeded / Failed / Skipped / Total] 11 / 17 / 0 / 28:   3%|▎         | 29/1000 [03:57<2:12:18,  8.18s/it][Succeeded / Failed / Skipped / Total] 11 / 18 / 0 / 29:   3%|▎         | 29/1000 [03:57<2:12:18,  8.18s/it][Succeeded / Failed / Skipped / Total] 11 / 18 / 0 / 29:   3%|▎         | 30/1000 [03:59<2:08:52,  7.97s/it]Executes the given call . --> Allocate a blocks --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[badly]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[Bribed]]" != "[[Bribed]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[Spooner]]" == "[[Spooner]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 24 ---------------------------------------------
Creates a new Record . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "[[Carwash]]" == "[[Carwash]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 25 ---------------------------------------------
Adapts the prefetch . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[ptt]] ( Subscription s , int [[nubs]] ) { s . request ( [[nubs]] < 0 ? Long . MAX_VALUE : [[nubs]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 26 ---------------------------------------------
Gets the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object [[gate]] = value ; if ( [[gate]] != null && ! NotificationLite . isError ( [[gate]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Acquires a queue . --> Shut down a queue --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > [[actual]] , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[actual]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , [[actual]] , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > [[germans]] , Queue < T > queue , AtomicLong [[helmuth]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { [[germans]] . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[helmuth]] . get ( ) , [[germans]] , queue , [[helmuth]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[helmuth]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 28 ---------------------------------------------
Get the value of the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[gluttons]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Recover a producer . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[r]] = get ( ) ; if ( ( [[r]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[r]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[diluted]] = get ( ) ; if ( ( [[diluted]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[diluted]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 18 / 0 / 30:   3%|▎         | 30/1000 [03:59<2:08:52,  7.97s/it][Succeeded / Failed / Skipped / Total] 12 / 18 / 0 / 30:   3%|▎         | 31/1000 [04:25<2:18:22,  8.57s/it][Succeeded / Failed / Skipped / Total] 13 / 18 / 0 / 31:   3%|▎         | 31/1000 [04:25<2:18:22,  8.57s/it][Succeeded / Failed / Skipped / Total] 13 / 18 / 0 / 31:   3%|▎         | 32/1000 [04:58<2:30:39,  9.34s/it][Succeeded / Failed / Skipped / Total] 13 / 19 / 0 / 32:   3%|▎         | 32/1000 [04:58<2:30:39,  9.34s/it][Succeeded / Failed / Skipped / Total] 13 / 19 / 0 / 32:   3%|▎         | 33/1000 [05:00<2:26:55,  9.12s/it][Succeeded / Failed / Skipped / Total] 13 / 20 / 0 / 33:   3%|▎         | 33/1000 [05:00<2:26:55,  9.12s/it][Succeeded / Failed / Skipped / Total] 13 / 20 / 0 / 33:   3%|▎         | 34/1000 [05:03<2:23:45,  8.93s/it][Succeeded / Failed / Skipped / Total] 13 / 21 / 0 / 34:   3%|▎         | 34/1000 [05:03<2:23:45,  8.93s/it][Succeeded / Failed / Skipped / Total] 13 / 21 / 0 / 34:   4%|▎         | 35/1000 [05:06<2:21:03,  8.77s/it][Succeeded / Failed / Skipped / Total] 14 / 21 / 0 / 35:   4%|▎         | 35/1000 [05:06<2:21:03,  8.77s/it][Succeeded / Failed / Skipped / Total] 14 / 21 / 0 / 35:   4%|▎         | 36/1000 [05:14<2:20:27,  8.74s/it]Allocates a queue . --> Shuts down asynchronously --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > [[q]] , Subscriber < ? super U > a , boolean [[delayError]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[q]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[delayError]] , [[q]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[q]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > [[zuzana]] , Subscriber < ? super U > a , boolean [[widowers]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[zuzana]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[widowers]] , [[zuzana]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[zuzana]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 31 ---------------------------------------------
Sets the number of observers for a given stream . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[frustrate]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[frustrate]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[frustrate]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "[[Aish]]" == "[[Aish]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 32 ---------------------------------------------
Generates a observer . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[indivisible]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[indivisible]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Handles a subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[killed]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[killed]] , "next is null" ) ; if ( upstream != null ) { [[killed]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 34 ---------------------------------------------
Adds a new long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[addCap]] ( long a , long [[b]] ) { long u = a + [[b]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[marin]] ( long a , long [[felix]] ) { long u = a + [[felix]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 35 ---------------------------------------------
Returns a long . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[u]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[u]] / a != b ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[everglades]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[everglades]] / a != b ) { return Long . MAX_VALUE ; } } return [[everglades]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 21 / 0 / 36:   4%|▎         | 36/1000 [05:14<2:20:27,  8.74s/it][Succeeded / Failed / Skipped / Total] 15 / 21 / 0 / 36:   4%|▎         | 37/1000 [05:24<2:20:47,  8.77s/it][Succeeded / Failed / Skipped / Total] 16 / 21 / 0 / 37:   4%|▎         | 37/1000 [05:24<2:20:47,  8.77s/it][Succeeded / Failed / Skipped / Total] 16 / 21 / 0 / 37:   4%|▍         | 38/1000 [05:26<2:17:38,  8.58s/it][Succeeded / Failed / Skipped / Total] 17 / 21 / 0 / 38:   4%|▍         | 38/1000 [05:26<2:17:38,  8.58s/it][Succeeded / Failed / Skipped / Total] 17 / 21 / 0 / 38:   4%|▍         | 39/1000 [05:44<2:21:26,  8.83s/it][Succeeded / Failed / Skipped / Total] 17 / 22 / 0 / 39:   4%|▍         | 39/1000 [05:44<2:21:26,  8.83s/it][Succeeded / Failed / Skipped / Total] 17 / 22 / 0 / 39:   4%|▍         | 40/1000 [05:48<2:19:24,  8.71s/it][Succeeded / Failed / Skipped / Total] 17 / 23 / 0 / 40:   4%|▍         | 40/1000 [05:48<2:19:24,  8.71s/it][Succeeded / Failed / Skipped / Total] 17 / 23 / 0 / 40:   4%|▍         | 41/1000 [05:54<2:18:02,  8.64s/it][Succeeded / Failed / Skipped / Total] 17 / 24 / 0 / 41:   4%|▍         | 41/1000 [05:54<2:18:02,  8.64s/it][Succeeded / Failed / Skipped / Total] 17 / 24 / 0 / 41:   4%|▍         | 42/1000 [06:02<2:17:55,  8.64s/it][Succeeded / Failed / Skipped / Total] 18 / 24 / 0 / 42:   4%|▍         | 42/1000 [06:02<2:17:55,  8.64s/it][Succeeded / Failed / Skipped / Total] 18 / 24 / 0 / 42:   4%|▍         | 43/1000 [06:07<2:16:17,  8.55s/it]Returns the sum of the given set . --> Calculates a set of ranges --> Socre: 1.0

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[tres]] = requested . get ( ) ; if ( [[tres]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[tres]] , n ) ; if ( requested . compareAndSet ( [[tres]] , u ) ) { return [[tres]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 37 ---------------------------------------------
Shutdown the executor . --> Shut down --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[trader]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 38 ---------------------------------------------
Adds an object to the object . --> Evictsy --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[hatchery]] ( Object [[buzzcocks]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 39 ---------------------------------------------
Creates a new exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[chaps]] ( Throwable ex ) { NullPointerException [[regimented]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[regimented]] . initCause ( ex ) ; return [[regimented]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 40 ---------------------------------------------
Sets the next subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[corney]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[corney]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[corney]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Desde]]" != "[[Desde]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 41 ---------------------------------------------
Create executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory factory ) { final ScheduledExecutorService [[droste]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[droste]] ) ; return [[droste]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Cancels the resources . --> Shuts down this thread --> Socre: 1.0

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { s . request ( [[r]] ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[consulting]] = actual ; if ( [[consulting]] != null && cancelOnReplace ) { [[consulting]] . cancel ( ) ; } actual = s ; long [[trainee]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[trainee]] != 0L ) { s . request ( [[trainee]] ) ; } return ; } Subscription [[consulting]] = missedSubscription . getAndSet ( s ) ; if ( [[consulting]] != null && cancelOnReplace ) { [[consulting]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 43/1000 [06:07<2:16:17,  8.55s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 44/1000 [06:18<2:16:57,  8.60s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 44/1000 [06:18<2:16:57,  8.60s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 45/1000 [06:19<2:14:17,  8.44s/it][Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   4%|▍         | 45/1000 [06:19<2:14:17,  8.44s/it][Succeeded / Failed / Skipped / Total] 19 / 26 / 0 / 45:   5%|▍         | 46/1000 [06:23<2:12:31,  8.33s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 46/1000 [06:23<2:12:31,  8.33s/it][Succeeded / Failed / Skipped / Total] 19 / 27 / 0 / 46:   5%|▍         | 47/1000 [06:27<2:11:03,  8.25s/it][Succeeded / Failed / Skipped / Total] 19 / 28 / 0 / 47:   5%|▍         | 47/1000 [06:27<2:11:03,  8.25s/it][Succeeded / Failed / Skipped / Total] 19 / 28 / 0 / 47:   5%|▍         | 48/1000 [06:38<2:11:53,  8.31s/it][Succeeded / Failed / Skipped / Total] 20 / 28 / 0 / 48:   5%|▍         | 48/1000 [06:38<2:11:53,  8.31s/it][Succeeded / Failed / Skipped / Total] 20 / 28 / 0 / 48:   5%|▍         | 49/1000 [06:40<2:09:26,  8.17s/it][Succeeded / Failed / Skipped / Total] 20 / 29 / 0 / 49:   5%|▍         | 49/1000 [06:40<2:09:26,  8.17s/it][Succeeded / Failed / Skipped / Total] 20 / 29 / 0 / 49:   5%|▌         | 50/1000 [06:49<2:09:48,  8.20s/it][Succeeded / Failed / Skipped / Total] 20 / 30 / 0 / 50:   5%|▌         | 50/1000 [06:49<2:09:48,  8.20s/it][Succeeded / Failed / Skipped / Total] 20 / 30 / 0 / 50:   5%|▌         | 51/1000 [06:50<2:07:18,  8.05s/it]Throws an exception . --> Thrown when the given exception is thrown --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[weekends]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[weekends]] . add ( e ) ; } } return [[weekends]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 44 ---------------------------------------------
Sets the queue . --> [[[FAILED]]]

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[dinesh]] ; synchronized ( this ) { [[dinesh]] = queue ; if ( [[dinesh]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[dinesh]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 45 ---------------------------------------------
Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[mather]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 46 ---------------------------------------------
Converts an error to an error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[spaced]] ) { if ( [[spaced]] instanceof Error ) { throw ( Error ) [[spaced]] ; } if ( [[spaced]] instanceof RuntimeException ) { return ( RuntimeException ) [[spaced]] ; } return new RuntimeException ( [[spaced]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 47 ---------------------------------------------
Set the resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[jaundice]] ; synchronized ( this ) { if ( disposed ) { return ; } [[jaundice]] = resources ; resources = null ; } dispose ( [[jaundice]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Return a copy of this object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[helmuth]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 49 ---------------------------------------------
Sets the set . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[mcnabb]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 50 ---------------------------------------------
Sets the resume queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[bridgeport]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 30 / 0 / 51:   5%|▌         | 51/1000 [06:50<2:07:18,  8.05s/it][Succeeded / Failed / Skipped / Total] 21 / 30 / 0 / 51:   5%|▌         | 52/1000 [06:59<2:07:35,  8.07s/it][Succeeded / Failed / Skipped / Total] 21 / 31 / 0 / 52:   5%|▌         | 52/1000 [06:59<2:07:35,  8.07s/it][Succeeded / Failed / Skipped / Total] 21 / 31 / 0 / 52:   5%|▌         | 53/1000 [07:18<2:10:38,  8.28s/it][Succeeded / Failed / Skipped / Total] 21 / 32 / 0 / 53:   5%|▌         | 53/1000 [07:18<2:10:38,  8.28s/it][Succeeded / Failed / Skipped / Total] 21 / 32 / 0 / 53:   5%|▌         | 54/1000 [07:30<2:11:28,  8.34s/it][Succeeded / Failed / Skipped / Total] 21 / 33 / 0 / 54:   5%|▌         | 54/1000 [07:30<2:11:28,  8.34s/it][Succeeded / Failed / Skipped / Total] 21 / 33 / 0 / 54:   6%|▌         | 55/1000 [07:48<2:14:03,  8.51s/it][Succeeded / Failed / Skipped / Total] 22 / 33 / 0 / 55:   6%|▌         | 55/1000 [07:48<2:14:03,  8.51s/it][Succeeded / Failed / Skipped / Total] 22 / 33 / 0 / 55:   6%|▌         | 56/1000 [08:04<2:16:02,  8.65s/it][Succeeded / Failed / Skipped / Total] 23 / 33 / 0 / 56:   6%|▌         | 56/1000 [08:04<2:16:02,  8.65s/it][Succeeded / Failed / Skipped / Total] 23 / 33 / 0 / 56:   6%|▌         | 57/1000 [08:04<2:13:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 23 / 34 / 0 / 57:   6%|▌         | 57/1000 [08:04<2:13:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 23 / 34 / 0 / 57:   6%|▌         | 58/1000 [08:12<2:13:23,  8.50s/it]Return a copy of this object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[[Finest]]" == "[[Finest]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 52 ---------------------------------------------
Sets the queue of queues . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[elections]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Gets the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[chaw]] = resource . get ( ) ; if ( [[chaw]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[chaw]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Returns an unmodifiable Observable for a Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[electrodes]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[steeple]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[electrodes]] , [[steeple]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 55 ---------------------------------------------
Starts the exception . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[coincident]] = get ( ) ; if ( ( [[coincident]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Shuts down the stream . --> Shuts down a ip --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void complete ( ) { int [[traipsing]] = get ( ) ; if ( ( [[traipsing]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
Returns a copy of this queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[cleanest]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 34 / 0 / 58:   6%|▌         | 58/1000 [08:12<2:13:23,  8.50s/it][Succeeded / Failed / Skipped / Total] 24 / 34 / 0 / 58:   6%|▌         | 59/1000 [08:17<2:12:19,  8.44s/it][Succeeded / Failed / Skipped / Total] 24 / 35 / 0 / 59:   6%|▌         | 59/1000 [08:17<2:12:19,  8.44s/it][Succeeded / Failed / Skipped / Total] 24 / 35 / 0 / 59:   6%|▌         | 60/1000 [08:35<2:14:34,  8.59s/it][Succeeded / Failed / Skipped / Total] 24 / 36 / 0 / 60:   6%|▌         | 60/1000 [08:35<2:14:34,  8.59s/it][Succeeded / Failed / Skipped / Total] 24 / 36 / 0 / 60:   6%|▌         | 61/1000 [08:43<2:14:17,  8.58s/it][Succeeded / Failed / Skipped / Total] 24 / 37 / 0 / 61:   6%|▌         | 61/1000 [08:43<2:14:17,  8.58s/it][Succeeded / Failed / Skipped / Total] 24 / 37 / 0 / 61:   6%|▌         | 62/1000 [08:45<2:12:24,  8.47s/it][Succeeded / Failed / Skipped / Total] 24 / 38 / 0 / 62:   6%|▌         | 62/1000 [08:45<2:12:24,  8.47s/it][Succeeded / Failed / Skipped / Total] 24 / 38 / 0 / 62:   6%|▋         | 63/1000 [09:01<2:14:11,  8.59s/it]Wraps the given observer . --> Invoked by the supplied observer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( [[t]] == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > [[sd]] = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( [[sd]] ) ; [[sd]] . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[megatons]] ; try { [[megatons]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Horsehair]]" == "[[Horsehair]]" ; } if ( [[megatons]] == null ) { EmptyDisposable . complete ( observer ) ; return "[[Horsehair]]" == "[[Horsehair]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[megatons]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Horsehair]]" == "[[Horsehair]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[Horsehair]]" == "[[Horsehair]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[Horsehair]]" == "[[Horsehair]]" ; } ScalarDisposable < R > [[pretty]] = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( [[pretty]] ) ; [[pretty]] . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[Horsehair]]" == "[[Horsehair]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 59 ---------------------------------------------
Sets the value of the current state . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[cornelia]] = downstream ; if ( state == FUSED_EMPTY ) { this . [[lethal]] = value ; lazySet ( FUSED_READY ) ; [[cornelia]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[cornelia]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[cornelia]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 60 ---------------------------------------------
Returns a String representation of the given function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[aid]] ( Comparator < ? super T > [[righted]] ) { ObjectHelper . requireNonNull ( [[righted]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[righted]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 61 ---------------------------------------------
Returns the number of items in this queue . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[clair]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[clair]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 62 ---------------------------------------------
Wraps the given Iterable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[axles]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[axles]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 63 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 39 / 0 / 63:   6%|▋         | 63/1000 [09:01<2:14:11,  8.59s/it][Succeeded / Failed / Skipped / Total] 24 / 39 / 0 / 63:   6%|▋         | 64/1000 [09:12<2:14:39,  8.63s/it][Succeeded / Failed / Skipped / Total] 24 / 40 / 0 / 64:   6%|▋         | 64/1000 [09:12<2:14:39,  8.63s/it][Succeeded / Failed / Skipped / Total] 24 / 40 / 0 / 64:   6%|▋         | 65/1000 [09:22<2:14:50,  8.65s/it][Succeeded / Failed / Skipped / Total] 25 / 40 / 0 / 65:   6%|▋         | 65/1000 [09:22<2:14:51,  8.65s/it][Succeeded / Failed / Skipped / Total] 25 / 40 / 0 / 65:   7%|▋         | 66/1000 [09:32<2:15:01,  8.67s/it][Succeeded / Failed / Skipped / Total] 26 / 40 / 0 / 66:   7%|▋         | 66/1000 [09:32<2:15:01,  8.67s/it][Succeeded / Failed / Skipped / Total] 26 / 40 / 0 / 66:   7%|▋         | 67/1000 [09:47<2:16:22,  8.77s/it][Succeeded / Failed / Skipped / Total] 27 / 40 / 0 / 67:   7%|▋         | 67/1000 [09:47<2:16:22,  8.77s/it][Succeeded / Failed / Skipped / Total] 27 / 40 / 0 / 67:   7%|▋         | 68/1000 [09:51<2:15:05,  8.70s/it][Succeeded / Failed / Skipped / Total] 27 / 41 / 0 / 68:   7%|▋         | 68/1000 [09:51<2:15:05,  8.70s/it][Succeeded / Failed / Skipped / Total] 27 / 41 / 0 / 68:   7%|▋         | 69/1000 [09:51<2:13:02,  8.57s/it][Succeeded / Failed / Skipped / Total] 27 / 42 / 0 / 69:   7%|▋         | 69/1000 [09:51<2:13:02,  8.57s/it][Succeeded / Failed / Skipped / Total] 27 / 42 / 0 / 69:   7%|▋         | 70/1000 [10:11<2:15:25,  8.74s/it]Returns a new Runnable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[nieto]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[nieto]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 64 ---------------------------------------------
Revokes the stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[collegue]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
A convenience . --> A convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[Plaything]]" != "[[Plaything]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 66 ---------------------------------------------
Set the amount of time . --> Record a new amount of time --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[unzipping]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 67 ---------------------------------------------
Unregisters a subscriber . --> Re - - safe - - routine --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[i]] = 0 ; [[i]] < n ; [[i]] ++ ) { if ( a [ [[i]] ] == ps ) { j = [[i]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[device]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[errol]] = 0 ; [[errol]] < n ; [[errol]] ++ ) { if ( a [ [[errol]] ] == ps ) { j = [[errol]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 68 ---------------------------------------------
Handles a error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[annoyances]] ; try { [[annoyances]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[annoyances]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[annoyances]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[annoyances]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Creates a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[abilities]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 43 / 0 / 70:   7%|▋         | 70/1000 [10:11<2:15:25,  8.74s/it][Succeeded / Failed / Skipped / Total] 27 / 43 / 0 / 70:   7%|▋         | 71/1000 [10:11<2:13:25,  8.62s/it][Succeeded / Failed / Skipped / Total] 27 / 43 / 1 / 71:   7%|▋         | 71/1000 [10:11<2:13:25,  8.62s/it][Succeeded / Failed / Skipped / Total] 27 / 43 / 1 / 71:   7%|▋         | 72/1000 [10:28<2:14:57,  8.73s/it][Succeeded / Failed / Skipped / Total] 27 / 44 / 1 / 72:   7%|▋         | 72/1000 [10:28<2:14:57,  8.73s/it][Succeeded / Failed / Skipped / Total] 27 / 44 / 1 / 72:   7%|▋         | 73/1000 [10:30<2:13:27,  8.64s/it][Succeeded / Failed / Skipped / Total] 27 / 45 / 1 / 73:   7%|▋         | 73/1000 [10:30<2:13:27,  8.64s/it][Succeeded / Failed / Skipped / Total] 27 / 45 / 1 / 73:   7%|▋         | 74/1000 [10:48<2:15:10,  8.76s/it][Succeeded / Failed / Skipped / Total] 28 / 45 / 1 / 74:   7%|▋         | 74/1000 [10:48<2:15:10,  8.76s/it][Succeeded / Failed / Skipped / Total] 28 / 45 / 1 / 74:   8%|▊         | 75/1000 [10:53<2:14:19,  8.71s/it][Succeeded / Failed / Skipped / Total] 28 / 46 / 1 / 75:   8%|▊         | 75/1000 [10:53<2:14:19,  8.71s/it][Succeeded / Failed / Skipped / Total] 28 / 46 / 1 / 75:   8%|▊         | 76/1000 [11:17<2:17:16,  8.91s/it][Succeeded / Failed / Skipped / Total] 28 / 47 / 1 / 76:   8%|▊         | 76/1000 [11:17<2:17:16,  8.91s/it][Succeeded / Failed / Skipped / Total] 28 / 47 / 1 / 76:   8%|▊         | 77/1000 [11:22<2:16:16,  8.86s/it][Succeeded / Failed / Skipped / Total] 29 / 47 / 1 / 77:   8%|▊         | 77/1000 [11:22<2:16:16,  8.86s/it][Succeeded / Failed / Skipped / Total] 29 / 47 / 1 / 77:   8%|▊         | 78/1000 [11:23<2:14:38,  8.76s/it]Returns the HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[decorates]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 71 ---------------------------------------------
Returns a new search search . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 72 ---------------------------------------------
Create a new Password . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[whore]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
Calculates the number of times --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[nantucket]] ( TimeUnit [[burdock]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 74 ---------------------------------------------
Calculate the Spring versions of a given versions . --> Does the pumpoch . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[chump]] ) { if ( [[chump]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Generate a password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String salt = PREFIX + this . [[aria]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Gets the Spring security properties . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties [[constructors]] = new Properties ( ) ; try { [[constructors]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[constructors]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 77 ---------------------------------------------
Encode a password . --> Encode an unsigned string . --> Socre: 1.0

[[[[Adv]]]]: public boolean matches ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( [[salt]] , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence [[added]] , String [[lobotomy]] ) { String [[bounteous]] = extractSalt ( [[lobotomy]] ) ; String rawPasswordEncoded = digest ( [[bounteous]] , [[added]] ) ; return PasswordEncoderUtils . equals ( [[lobotomy]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 48 / 1 / 78:   8%|▊         | 78/1000 [11:23<2:14:38,  8.76s/it][Succeeded / Failed / Skipped / Total] 29 / 48 / 1 / 78:   8%|▊         | 79/1000 [11:35<2:15:12,  8.81s/it][Succeeded / Failed / Skipped / Total] 30 / 48 / 1 / 79:   8%|▊         | 79/1000 [11:35<2:15:12,  8.81s/it][Succeeded / Failed / Skipped / Total] 30 / 48 / 1 / 79:   8%|▊         | 80/1000 [11:40<2:14:13,  8.75s/it][Succeeded / Failed / Skipped / Total] 31 / 48 / 1 / 80:   8%|▊         | 80/1000 [11:40<2:14:13,  8.75s/it][Succeeded / Failed / Skipped / Total] 31 / 48 / 1 / 80:   8%|▊         | 81/1000 [11:41<2:12:36,  8.66s/it][Succeeded / Failed / Skipped / Total] 31 / 49 / 1 / 81:   8%|▊         | 81/1000 [11:41<2:12:36,  8.66s/it][Succeeded / Failed / Skipped / Total] 31 / 49 / 1 / 81:   8%|▊         | 82/1000 [11:47<2:12:00,  8.63s/it][Succeeded / Failed / Skipped / Total] 31 / 50 / 1 / 82:   8%|▊         | 82/1000 [11:47<2:12:00,  8.63s/it][Succeeded / Failed / Skipped / Total] 31 / 50 / 1 / 82:   8%|▊         | 83/1000 [11:50<2:10:46,  8.56s/it][Succeeded / Failed / Skipped / Total] 32 / 50 / 1 / 83:   8%|▊         | 83/1000 [11:50<2:10:46,  8.56s/it][Succeeded / Failed / Skipped / Total] 32 / 50 / 1 / 83:   8%|▊         | 84/1000 [11:58<2:10:32,  8.55s/it][Succeeded / Failed / Skipped / Total] 32 / 51 / 1 / 84:   8%|▊         | 84/1000 [11:58<2:10:32,  8.55s/it][Succeeded / Failed / Skipped / Total] 32 / 51 / 1 / 84:   8%|▊         | 85/1000 [12:21<2:13:05,  8.73s/it]Parses the response . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[[False]]" != "[[False]]" ; boolean continuationBodyNullable = "[[False]]" != "[[False]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[condominium]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[[Sancha]]" != "[[Sancha]]" ; boolean continuationBodyNullable = "[[Sancha]]" != "[[Sancha]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 79 ---------------------------------------------
Checks if a String is present . --> Does aring? --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[springSecurityVersion]] ) { if ( springVersion == null || springVersion . equals ( [[springSecurityVersion]] ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String [[galloping]] ) { if ( springVersion == null || springVersion . equals ( [[galloping]] ) ) { return "[[Sauna]]" == "[[Sauna]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 80 ---------------------------------------------
Sets the default attributes . --> Add a change to a change --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[coerce]] ) { AttributeExchangeConfigurer [[japs]] = new AttributeExchangeConfigurer ( [[coerce]] ) ; this . attributeExchangeConfigurers . add ( [[japs]] ) ; return [[japs]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 81 ---------------------------------------------
Get the OAuth2 OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[ens]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[ens]] ) ; return [[ens]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 82 ---------------------------------------------
Configures the OAuth2r . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[snit]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[b]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[b]] ) ; return [[b]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 83 ---------------------------------------------
Executes the given context . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[yoshiko]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[yoshiko]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 84 ---------------------------------------------
Returns the security context . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[faceless]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[faceless]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 51 / 1 / 85:   8%|▊         | 85/1000 [12:21<2:13:05,  8.73s/it][Succeeded / Failed / Skipped / Total] 33 / 51 / 1 / 85:   9%|▊         | 86/1000 [12:33<2:13:31,  8.76s/it][Succeeded / Failed / Skipped / Total] 34 / 51 / 1 / 86:   9%|▊         | 86/1000 [12:33<2:13:31,  8.76s/it][Succeeded / Failed / Skipped / Total] 34 / 51 / 1 / 86:   9%|▊         | 87/1000 [12:43<2:13:33,  8.78s/it][Succeeded / Failed / Skipped / Total] 35 / 51 / 1 / 87:   9%|▊         | 87/1000 [12:43<2:13:33,  8.78s/it][Succeeded / Failed / Skipped / Total] 35 / 51 / 1 / 87:   9%|▉         | 88/1000 [13:16<2:17:31,  9.05s/it]Return a list of search for a given search . --> Build a Dynamolecule --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[searchControls]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[resultsEnum]] = ctx . search ( searchBaseDn , filter , params , buildControls ( [[searchControls]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[resultsEnum]] . hasMore ( ) ) { SearchResult searchResult = [[resultsEnum]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[resultsEnum]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[yenny]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[ludmila]] = ctx . search ( searchBaseDn , filter , params , buildControls ( [[yenny]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[ludmila]] . hasMore ( ) ) { SearchResult searchResult = [[ludmila]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[ludmila]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 86 ---------------------------------------------
Returns the search description of the given Controls . --> Returns a list of Executors --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[trickier]] ) { return new SearchControls ( [[trickier]] . getSearchScope ( ) , [[trickier]] . getCountLimit ( ) , [[trickier]] . getTimeLimit ( ) , [[trickier]] . getReturningAttributes ( ) , RETURN_OBJECT , [[trickier]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
Finds all clauses in the given collection . --> Finds all entities for a given table --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[stenographer]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 52 / 1 / 88:   9%|▉         | 88/1000 [13:16<2:17:31,  9.05s/it][Succeeded / Failed / Skipped / Total] 35 / 52 / 1 / 88:   9%|▉         | 89/1000 [13:18<2:16:15,  8.97s/it][Succeeded / Failed / Skipped / Total] 35 / 53 / 1 / 89:   9%|▉         | 89/1000 [13:18<2:16:15,  8.97s/it][Succeeded / Failed / Skipped / Total] 35 / 53 / 1 / 89:   9%|▉         | 90/1000 [13:25<2:15:44,  8.95s/it][Succeeded / Failed / Skipped / Total] 36 / 53 / 1 / 90:   9%|▉         | 90/1000 [13:25<2:15:44,  8.95s/it][Succeeded / Failed / Skipped / Total] 36 / 53 / 1 / 90:   9%|▉         | 91/1000 [13:37<2:16:10,  8.99s/it][Succeeded / Failed / Skipped / Total] 37 / 53 / 1 / 91:   9%|▉         | 91/1000 [13:37<2:16:10,  8.99s/it][Succeeded / Failed / Skipped / Total] 37 / 53 / 1 / 91:   9%|▉         | 92/1000 [13:38<2:14:37,  8.90s/it][Succeeded / Failed / Skipped / Total] 37 / 54 / 1 / 92:   9%|▉         | 92/1000 [13:38<2:14:37,  8.90s/it][Succeeded / Failed / Skipped / Total] 37 / 54 / 1 / 92:   9%|▉         | 93/1000 [13:46<2:14:18,  8.88s/it]Executes the given search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String [[dn]] , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[ctx]] . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String [[dusted]] , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[sich]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = [[sich]] . search ( [[dusted]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 89 ---------------------------------------------
Convert a list of values to a list of values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[gregoire]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[durden]] = searchForMultipleAttributeValues ( base , [[gregoire]] , params , attributeNames ) ; Set < String > [[kleiner]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[durden]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[kleiner]] . addAll ( values ) ; } } return [[kleiner]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
Register servlet . --> Helper method to create ServletRequest . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference [[authenticationManager]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[authenticationManager]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference [[birdcage]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[birdcage]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Sets the JAX JAX . --> Instantiates a JVM . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[abigail]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[abigail]] ) ) { [[abigail]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[abigail]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
Get a list of entities for a given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[commemorate]] ( final String base , final String [[christs]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 55 / 1 / 93:   9%|▉         | 93/1000 [13:46<2:14:18,  8.88s/it][Succeeded / Failed / Skipped / Total] 37 / 55 / 1 / 93:   9%|▉         | 94/1000 [13:48<2:13:04,  8.81s/it][Succeeded / Failed / Skipped / Total] 38 / 55 / 1 / 94:   9%|▉         | 94/1000 [13:48<2:13:04,  8.81s/it][Succeeded / Failed / Skipped / Total] 38 / 55 / 1 / 94:  10%|▉         | 95/1000 [13:53<2:12:21,  8.77s/it][Succeeded / Failed / Skipped / Total] 38 / 56 / 1 / 95:  10%|▉         | 95/1000 [13:53<2:12:21,  8.77s/it][Succeeded / Failed / Skipped / Total] 38 / 56 / 1 / 95:  10%|▉         | 96/1000 [13:55<2:11:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 39 / 56 / 1 / 96:  10%|▉         | 96/1000 [13:55<2:11:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 39 / 56 / 1 / 96:  10%|▉         | 97/1000 [14:12<2:12:16,  8.79s/it]Builds a pre - Grole . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[godsend]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[on]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[godsend]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[godsend]] + "] mapped to Granted Authorities: [" + [[on]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[on]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 94 ---------------------------------------------
Create a bean definition . --> Helper method to create a String representation --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[parserContext]] ) { Object source = [[parserContext]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String url = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[parserContext]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[parserContext]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[parserContext]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext [[abusers]] ) { Object source = [[abusers]] . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[syphilis]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[syphilis]] ) ) { [[syphilis]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[syphilis]] ) ; } } String url = "ldap://127.0.0.1:" + [[syphilis]] + "/" + suffix ; BeanDefinitionBuilder [[monti]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[monti]] . addConstructorArgValue ( url ) ; [[monti]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[monti]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[syphilis]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( [[abusers]] . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { [[abusers]] . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } [[abusers]] . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[monti]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 95 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[highs]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[highs]] = [[highs]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[highs]] = [[highs]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[highs]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 96 ---------------------------------------------
Sets the filter attribute . --> Register a security filter . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[contextAttribute]] = getWebApplicationContextAttribute ( ) ; if ( [[contextAttribute]] != null ) { springSecurityFilterChain . setContextAttribute ( [[contextAttribute]] ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[acts]] = getWebApplicationContextAttribute ( ) ; if ( [[acts]] != null ) { springSecurityFilterChain . setContextAttribute ( [[acts]] ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
[Succeeded / Failed / Skipped / Total] 40 / 56 / 1 / 97:  10%|▉         | 97/1000 [14:12<2:12:16,  8.79s/it][Succeeded / Failed / Skipped / Total] 40 / 56 / 1 / 97:  10%|▉         | 98/1000 [14:12<2:10:49,  8.70s/it][Succeeded / Failed / Skipped / Total] 40 / 57 / 1 / 98:  10%|▉         | 98/1000 [14:12<2:10:49,  8.70s/it][Succeeded / Failed / Skipped / Total] 40 / 57 / 1 / 98:  10%|▉         | 99/1000 [14:32<2:12:22,  8.81s/it][Succeeded / Failed / Skipped / Total] 40 / 58 / 1 / 99:  10%|▉         | 99/1000 [14:32<2:12:22,  8.81s/it][Succeeded / Failed / Skipped / Total] 40 / 58 / 1 / 99:  10%|█         | 100/1000 [14:37<2:11:41,  8.78s/it][Succeeded / Failed / Skipped / Total] 40 / 59 / 1 / 100:  10%|█         | 100/1000 [14:37<2:11:41,  8.78s/it][Succeeded / Failed / Skipped / Total] 40 / 59 / 1 / 100:  10%|█         | 101/1000 [15:15<2:15:50,  9.07s/it][Succeeded / Failed / Skipped / Total] 40 / 60 / 1 / 101:  10%|█         | 101/1000 [15:15<2:15:50,  9.07s/it][Succeeded / Failed / Skipped / Total] 40 / 60 / 1 / 101:  10%|█         | 102/1000 [15:23<2:15:32,  9.06s/it][Succeeded / Failed / Skipped / Total] 40 / 61 / 1 / 102:  10%|█         | 102/1000 [15:23<2:15:32,  9.06s/it][Succeeded / Failed / Skipped / Total] 40 / 61 / 1 / 102:  10%|█         | 103/1000 [15:24<2:14:09,  8.97s/it]--------------------------------------------- Result 97 ---------------------------------------------
Set the properties . --> Configures the replication replication --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[replicators]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Decrypt the given algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[excitable]] ( String [[bribing]] ) { try { return Cipher . getInstance ( [[bribing]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Gets the total number of rows for a given query . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String [[hubie]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[knell]] , int [[feline]] ) throws SQLException { return new PersistentRememberMeToken ( [[knell]] . getString ( 1 ) , [[knell]] . getString ( 2 ) , [[knell]] . getString ( 3 ) , [[knell]] . getTimestamp ( 4 ) ) ; } } , [[hubie]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[hubie]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[hubie]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[hubie]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the value of the cookie attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[ricocheting]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[ricocheting]] . size ( ) ) ; for ( String [[narcissist]] : [[ricocheting]] ) { result . add ( getGrantedAuthority ( [[narcissist]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[trinity]] , Authentication currentAuthentication ) { Object [[oxycontin]] = getPreAuthenticatedPrincipal ( [[trinity]] ) ; if ( ( [[oxycontin]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[oxycontin]] ) ) { return "False" != "False" ; } if ( [[oxycontin]] != null && [[oxycontin]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[oxycontin]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 102 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[polisher]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[polisher]] ) ; } chain . doFilter ( request , [[polisher]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 62 / 1 / 103:  10%|█         | 103/1000 [15:24<2:14:09,  8.97s/it][Succeeded / Failed / Skipped / Total] 40 / 62 / 1 / 103:  10%|█         | 104/1000 [15:33<2:14:01,  8.97s/it][Succeeded / Failed / Skipped / Total] 41 / 62 / 1 / 104:  10%|█         | 104/1000 [15:33<2:14:01,  8.97s/it][Succeeded / Failed / Skipped / Total] 41 / 62 / 1 / 104:  10%|█         | 105/1000 [15:35<2:12:58,  8.91s/it][Succeeded / Failed / Skipped / Total] 42 / 62 / 1 / 105:  10%|█         | 105/1000 [15:35<2:12:58,  8.91s/it][Succeeded / Failed / Skipped / Total] 42 / 62 / 1 / 105:  11%|█         | 106/1000 [15:45<2:12:57,  8.92s/it][Succeeded / Failed / Skipped / Total] 43 / 62 / 1 / 106:  11%|█         | 106/1000 [15:45<2:12:57,  8.92s/it][Succeeded / Failed / Skipped / Total] 43 / 62 / 1 / 106:  11%|█         | 107/1000 [15:52<2:12:28,  8.90s/it][Succeeded / Failed / Skipped / Total] 43 / 63 / 1 / 107:  11%|█         | 107/1000 [15:52<2:12:28,  8.90s/it][Succeeded / Failed / Skipped / Total] 43 / 63 / 1 / 107:  11%|█         | 108/1000 [16:00<2:12:11,  8.89s/it]Authenticate authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( [[principal]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[principal]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[principal]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object [[mnie]] = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( [[mnie]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[mnie]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[mnie]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 104 ---------------------------------------------
Logs the logout . --> Add a water --> Socre: 1.0

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[whaddya]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[whaddya]] != null && ! [[whaddya]] . isCustomLogoutSuccess ( ) ) { [[whaddya]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 105 ---------------------------------------------
Create a Login . --> Create a new Login --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[loginProcessingUrl]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[accelerant]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 106 ---------------------------------------------
Updates the supplied user . --> Allocate a new instance --> Socre: 1.0

[[[[Adv]]]]: protected final void updateAccessDefaults ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void updateAccessDefaults ( B [[boohoo]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[boohoo]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
Returns the authorities for the given authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[buys]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[acropolis]] : authorities ) { [[buys]] . add ( mapAuthority ( [[acropolis]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[buys]] . add ( defaultAuthority ) ; } return [[buys]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 108 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 63 / 1 / 108:  11%|█         | 108/1000 [16:00<2:12:11,  8.89s/it][Succeeded / Failed / Skipped / Total] 44 / 63 / 1 / 108:  11%|█         | 109/1000 [16:05<2:11:32,  8.86s/it][Succeeded / Failed / Skipped / Total] 45 / 63 / 1 / 109:  11%|█         | 109/1000 [16:05<2:11:32,  8.86s/it][Succeeded / Failed / Skipped / Total] 45 / 63 / 1 / 109:  11%|█         | 110/1000 [16:14<2:11:21,  8.86s/it][Succeeded / Failed / Skipped / Total] 45 / 64 / 1 / 110:  11%|█         | 110/1000 [16:14<2:11:22,  8.86s/it][Succeeded / Failed / Skipped / Total] 45 / 64 / 1 / 110:  11%|█         | 111/1000 [16:15<2:10:15,  8.79s/it][Succeeded / Failed / Skipped / Total] 46 / 64 / 1 / 111:  11%|█         | 111/1000 [16:15<2:10:15,  8.79s/it][Succeeded / Failed / Skipped / Total] 46 / 64 / 1 / 111:  11%|█         | 112/1000 [16:31<2:10:57,  8.85s/it][Succeeded / Failed / Skipped / Total] 46 / 65 / 1 / 112:  11%|█         | 112/1000 [16:31<2:10:57,  8.85s/it][Succeeded / Failed / Skipped / Total] 46 / 65 / 1 / 112:  11%|█▏        | 113/1000 [16:42<2:11:08,  8.87s/it][Succeeded / Failed / Skipped / Total] 47 / 65 / 1 / 113:  11%|█▏        | 113/1000 [16:42<2:11:08,  8.87s/it][Succeeded / Failed / Skipped / Total] 47 / 65 / 1 / 113:  11%|█▏        | 114/1000 [16:51<2:11:00,  8.87s/it]Encode the given string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[torrid]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[torrid]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[torrid]] . append ( DELIMITER ) ; } } String value = [[torrid]] . toString ( ) ; [[torrid]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[torrid]] . charAt ( [[torrid]] . length ( ) - 1 ) == ' ' ) { [[torrid]] . deleteCharAt ( [[torrid]] . length ( ) - 1 ) ; } return [[torrid]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 109 ---------------------------------------------
Sets a password value . --> True if an Object is a String --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[convince]] ( Object [[dennison]] ) { if ( ! ( [[dennison]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Get the cookie cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[barnett]] ) { Cookie [ ] cookies = [[barnett]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Resolves the supplied object . --> Looks for a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[betrayals]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[betrayals]] . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( [[betrayals]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 112 ---------------------------------------------
Sets the content of this buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[constellations]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int [[trash]] = getBufferSize ( ) ; boolean requiresFlush = [[trash]] > 0 && this . contentWritten >= [[trash]] ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 113 ---------------------------------------------
Get the port of the port . --> Obtain a ServiceUrl URL --> Socre: 1.0

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[throaty]] ( URL casServiceUrl ) { int [[etch]] = casServiceUrl . getPort ( ) ; if ( [[etch]] == - 1 ) { [[etch]] = casServiceUrl . getDefaultPort ( ) ; } return [[etch]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 66 / 1 / 114:  11%|█▏        | 114/1000 [16:51<2:11:00,  8.87s/it][Succeeded / Failed / Skipped / Total] 47 / 66 / 1 / 114:  12%|█▏        | 115/1000 [16:51<2:09:44,  8.80s/it][Succeeded / Failed / Skipped / Total] 47 / 66 / 2 / 115:  12%|█▏        | 115/1000 [16:51<2:09:44,  8.80s/it][Succeeded / Failed / Skipped / Total] 47 / 66 / 2 / 115:  12%|█▏        | 116/1000 [17:00<2:09:40,  8.80s/it][Succeeded / Failed / Skipped / Total] 47 / 67 / 2 / 116:  12%|█▏        | 116/1000 [17:00<2:09:40,  8.80s/it][Succeeded / Failed / Skipped / Total] 47 / 67 / 2 / 116:  12%|█▏        | 117/1000 [17:04<2:08:54,  8.76s/it][Succeeded / Failed / Skipped / Total] 48 / 67 / 2 / 117:  12%|█▏        | 117/1000 [17:04<2:08:54,  8.76s/it][Succeeded / Failed / Skipped / Total] 48 / 67 / 2 / 117:  12%|█▏        | 118/1000 [17:12<2:08:36,  8.75s/it][Succeeded / Failed / Skipped / Total] 48 / 68 / 2 / 118:  12%|█▏        | 118/1000 [17:12<2:08:36,  8.75s/it][Succeeded / Failed / Skipped / Total] 48 / 68 / 2 / 118:  12%|█▏        | 119/1000 [17:22<2:08:34,  8.76s/it][Succeeded / Failed / Skipped / Total] 48 / 69 / 2 / 119:  12%|█▏        | 119/1000 [17:22<2:08:34,  8.76s/it][Succeeded / Failed / Skipped / Total] 48 / 69 / 2 / 119:  12%|█▏        | 120/1000 [17:25<2:07:45,  8.71s/it][Succeeded / Failed / Skipped / Total] 48 / 70 / 2 / 120:  12%|█▏        | 120/1000 [17:25<2:07:45,  8.71s/it][Succeeded / Failed / Skipped / Total] 48 / 70 / 2 / 120:  12%|█▏        | 121/1000 [17:44<2:08:54,  8.80s/it]Set the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , [[cookieValue]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[filmore]] = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , [[filmore]] ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
Authenticated resource . --> [[[SKIPPED]]]

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 116 ---------------------------------------------
Returns the query request . --> [[[FAILED]]]

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest [[kos]] , final Pattern artifactPattern ) { final String [[mannix]] = [[kos]] . getQueryString ( ) ; if ( [[mannix]] == null ) { return null ; } final String result = artifactPattern . matcher ( [[mannix]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Get the authentication . --> Obtain principal --> Socre: 1.0

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[details]] = ( LdapUserDetails ) principal ; return [[details]] . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[jodo]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[jodo]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[jodo]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails [[congregation]] = ( LdapUserDetails ) principal ; return [[congregation]] . getDn ( ) ; } else if ( [[jodo]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Build a URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[chokes]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Get the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[anvil]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the environment . --> [[[FAILED]]]

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[hodgkin]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 71 / 2 / 121:  12%|█▏        | 121/1000 [17:44<2:08:54,  8.80s/it][Succeeded / Failed / Skipped / Total] 48 / 71 / 2 / 121:  12%|█▏        | 122/1000 [17:46<2:07:57,  8.74s/it][Succeeded / Failed / Skipped / Total] 48 / 72 / 2 / 122:  12%|█▏        | 122/1000 [17:46<2:07:57,  8.74s/it][Succeeded / Failed / Skipped / Total] 48 / 72 / 2 / 122:  12%|█▏        | 123/1000 [17:48<2:06:56,  8.68s/it][Succeeded / Failed / Skipped / Total] 48 / 73 / 2 / 123:  12%|█▏        | 123/1000 [17:48<2:06:56,  8.68s/it][Succeeded / Failed / Skipped / Total] 48 / 73 / 2 / 123:  12%|█▏        | 124/1000 [17:56<2:06:43,  8.68s/it][Succeeded / Failed / Skipped / Total] 49 / 73 / 2 / 124:  12%|█▏        | 124/1000 [17:56<2:06:43,  8.68s/it][Succeeded / Failed / Skipped / Total] 49 / 73 / 2 / 124:  12%|█▎        | 125/1000 [17:59<2:05:58,  8.64s/it][Succeeded / Failed / Skipped / Total] 49 / 74 / 2 / 125:  12%|█▎        | 125/1000 [17:59<2:05:58,  8.64s/it][Succeeded / Failed / Skipped / Total] 49 / 74 / 2 / 125:  13%|█▎        | 126/1000 [18:16<2:06:45,  8.70s/it]Clear the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = [[request]] . getSession ( "False" != "False" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[discovering]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[discovering]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[trotskyite]] = [[discovering]] . getSession ( "False" != "False" ) ; if ( [[trotskyite]] != null ) { logger . debug ( "Invalidating session: " + [[trotskyite]] . getId ( ) ) ; [[trotskyite]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 122 ---------------------------------------------
Obtains a UserRegistry . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[oall]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[oall]] . size ( ) == 0 ) { [[oall]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[oall]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[oall]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[oall]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Build the UserRegistry . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[buttin]] : this . users ) { getUserDetailsService ( ) . createUser ( [[buttin]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Generates a PEP attribute . --> Generate a Principal --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . [[vegetation]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 125 ---------------------------------------------
Creates a base URL for the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String [[trimmedUrl]] = serverUrl . trim ( ) ; if ( "" . equals ( [[trimmedUrl]] ) ) { continue ; } providerUrl . append ( [[trimmedUrl]] ) ; if ( ! [[trimmedUrl]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String [[dala]] = serverUrl . trim ( ) ; if ( "" . equals ( [[dala]] ) ) { continue ; } providerUrl . append ( [[dala]] ) ; if ( ! [[dala]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 49 / 75 / 2 / 126:  13%|█▎        | 126/1000 [18:16<2:06:45,  8.70s/it][Succeeded / Failed / Skipped / Total] 49 / 75 / 2 / 126:  13%|█▎        | 127/1000 [18:24<2:06:32,  8.70s/it][Succeeded / Failed / Skipped / Total] 49 / 76 / 2 / 127:  13%|█▎        | 127/1000 [18:24<2:06:32,  8.70s/it][Succeeded / Failed / Skipped / Total] 49 / 76 / 2 / 127:  13%|█▎        | 128/1000 [18:33<2:06:25,  8.70s/it][Succeeded / Failed / Skipped / Total] 50 / 76 / 2 / 128:  13%|█▎        | 128/1000 [18:33<2:06:25,  8.70s/it][Succeeded / Failed / Skipped / Total] 50 / 76 / 2 / 128:  13%|█▎        | 129/1000 [18:34<2:05:26,  8.64s/it][Succeeded / Failed / Skipped / Total] 51 / 76 / 2 / 129:  13%|█▎        | 129/1000 [18:34<2:05:26,  8.64s/it][Succeeded / Failed / Skipped / Total] 51 / 76 / 2 / 129:  13%|█▎        | 130/1000 [18:34<2:04:21,  8.58s/it][Succeeded / Failed / Skipped / Total] 51 / 76 / 3 / 130:  13%|█▎        | 130/1000 [18:34<2:04:21,  8.58s/it][Succeeded / Failed / Skipped / Total] 51 / 76 / 3 / 130:  13%|█▎        | 131/1000 [18:40<2:03:51,  8.55s/it][Succeeded / Failed / Skipped / Total] 51 / 77 / 3 / 131:  13%|█▎        | 131/1000 [18:40<2:03:51,  8.55s/it][Succeeded / Failed / Skipped / Total] 51 / 77 / 3 / 131:  13%|█▎        | 132/1000 [18:44<2:03:13,  8.52s/it][Succeeded / Failed / Skipped / Total] 52 / 77 / 3 / 132:  13%|█▎        | 132/1000 [18:44<2:03:13,  8.52s/it][Succeeded / Failed / Skipped / Total] 52 / 77 / 3 / 132:  13%|█▎        | 133/1000 [18:45<2:02:18,  8.46s/it][Succeeded / Failed / Skipped / Total] 52 / 78 / 3 / 133:  13%|█▎        | 133/1000 [18:45<2:02:18,  8.46s/it][Succeeded / Failed / Skipped / Total] 52 / 78 / 3 / 133:  13%|█▎        | 134/1000 [19:04<2:03:17,  8.54s/it]Checks if authentication is authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[clogging]] ( ) { Authentication [[specialness]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[specialness]] != null && [[specialness]] . isAuthenticated ( ) && ! ( [[specialness]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 127 ---------------------------------------------
Check if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { boolean result = super . requiresAuthentication ( request , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse [[tease]] ) { boolean result = super . requiresAuthentication ( request , [[tease]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
Create a new role . --> Create a new SecurityRole --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[vibrato]] = new MethodSecurityExpressionRoot ( authentication ) ; [[vibrato]] . setThis ( invocation . getThis ( ) ) ; [[vibrato]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[vibrato]] . setTrustResolver ( getTrustResolver ( ) ) ; [[vibrato]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[vibrato]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[vibrato]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 129 ---------------------------------------------
Determine whether or not the ticket . --> Initialize servlet --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "[[False]]" != "[[False]]" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[specialties]] ( final boolean [[members]] , final HttpServletRequest request ) { if ( [[members]] ) { return "[[Cheju]]" != "[[Cheju]]" ; } final boolean [[indefinitely]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[indefinitely]] ) ; } return [[indefinitely]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Encode a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , [[response]] ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse [[blushes]] ) { final boolean [[dribbles]] = [[dribbles]] ( request , [[blushes]] ) ; final boolean result = [[dribbles]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[dribbles]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 132 ---------------------------------------------
Gets a set of JVM . --> Return a JMonoMBean --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . [[mescaline]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
Checks if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[coley]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[coley]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 134 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 78 / 3 / 134:  13%|█▎        | 134/1000 [19:04<2:03:17,  8.54s/it][Succeeded / Failed / Skipped / Total] 53 / 78 / 3 / 134:  14%|█▎        | 135/1000 [19:07<2:02:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 53 / 79 / 3 / 135:  14%|█▎        | 135/1000 [19:07<2:02:35,  8.50s/it][Succeeded / Failed / Skipped / Total] 53 / 79 / 3 / 135:  14%|█▎        | 136/1000 [19:12<2:01:58,  8.47s/it][Succeeded / Failed / Skipped / Total] 53 / 80 / 3 / 136:  14%|█▎        | 136/1000 [19:12<2:01:58,  8.47s/it][Succeeded / Failed / Skipped / Total] 53 / 80 / 3 / 136:  14%|█▎        | 137/1000 [19:17<2:01:32,  8.45s/it][Succeeded / Failed / Skipped / Total] 53 / 81 / 3 / 137:  14%|█▎        | 137/1000 [19:17<2:01:32,  8.45s/it][Succeeded / Failed / Skipped / Total] 53 / 81 / 3 / 137:  14%|█▍        | 138/1000 [19:23<2:01:08,  8.43s/it][Succeeded / Failed / Skipped / Total] 54 / 81 / 3 / 138:  14%|█▍        | 138/1000 [19:23<2:01:08,  8.43s/it][Succeeded / Failed / Skipped / Total] 54 / 81 / 3 / 138:  14%|█▍        | 139/1000 [19:55<2:03:22,  8.60s/it][Succeeded / Failed / Skipped / Total] 54 / 82 / 3 / 139:  14%|█▍        | 139/1000 [19:55<2:03:22,  8.60s/it][Succeeded / Failed / Skipped / Total] 54 / 82 / 3 / 139:  14%|█▍        | 140/1000 [19:56<2:02:28,  8.54s/it][Succeeded / Failed / Skipped / Total] 54 / 83 / 3 / 140:  14%|█▍        | 140/1000 [19:56<2:02:28,  8.54s/it][Succeeded / Failed / Skipped / Total] 54 / 83 / 3 / 140:  14%|█▍        | 141/1000 [20:03<2:02:10,  8.53s/it]Concatenates the specified byte array to the specified array . --> Create a sequence of sequences --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... [[aloysius]] ) { int length = 0 ; for ( byte [ ] array : [[aloysius]] ) { length += array . length ; } byte [ ] [[landowner]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[aloysius]] ) { System . arraycopy ( array , 0 , [[landowner]] , destPos , array . length ) ; destPos += array . length ; } return [[landowner]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 135 ---------------------------------------------
Get the groups for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[footballs]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[subtraction]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[footballs]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[footballs]] + " mapped to Granted Authorities: " + [[subtraction]] ) ; } return [[subtraction]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 136 ---------------------------------------------
Load authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[crooner]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[crooner]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 137 ---------------------------------------------
Get principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[fears]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[fears]] ) ; } return [[fears]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 138 ---------------------------------------------
Returns a map of the given keys . --> Returns a list of greements . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[bankruptcy]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[bankruptcy]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[bankruptcy]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 139 ---------------------------------------------
Convert a byte array to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[beginIndex]] , int endIndex ) { int [[length]] = endIndex - [[beginIndex]] ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , [[beginIndex]] , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[timeframe]] , int endIndex ) { int [[lunges]] = endIndex - [[timeframe]] ; byte [ ] subarray = new byte [ [[lunges]] ] ; System . arraycopy ( array , [[timeframe]] , subarray , 0 , [[lunges]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 140 ---------------------------------------------
Get the value of a given granity . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[schmucks]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[schmucks]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 84 / 3 / 141:  14%|█▍        | 141/1000 [20:03<2:02:10,  8.53s/it][Succeeded / Failed / Skipped / Total] 54 / 84 / 3 / 141:  14%|█▍        | 142/1000 [20:11<2:02:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 54 / 85 / 3 / 142:  14%|█▍        | 142/1000 [20:11<2:02:01,  8.53s/it][Succeeded / Failed / Skipped / Total] 54 / 85 / 3 / 142:  14%|█▍        | 143/1000 [20:14<2:01:18,  8.49s/it][Succeeded / Failed / Skipped / Total] 54 / 86 / 3 / 143:  14%|█▍        | 143/1000 [20:14<2:01:18,  8.49s/it][Succeeded / Failed / Skipped / Total] 54 / 86 / 3 / 143:  14%|█▍        | 144/1000 [20:20<2:00:57,  8.48s/it][Succeeded / Failed / Skipped / Total] 54 / 87 / 3 / 144:  14%|█▍        | 144/1000 [20:20<2:00:57,  8.48s/it][Succeeded / Failed / Skipped / Total] 54 / 87 / 3 / 144:  14%|█▍        | 145/1000 [20:21<2:00:03,  8.43s/it][Succeeded / Failed / Skipped / Total] 55 / 87 / 3 / 145:  14%|█▍        | 145/1000 [20:21<2:00:03,  8.43s/it][Succeeded / Failed / Skipped / Total] 55 / 87 / 3 / 145:  15%|█▍        | 146/1000 [20:38<2:00:44,  8.48s/it][Succeeded / Failed / Skipped / Total] 55 / 88 / 3 / 146:  15%|█▍        | 146/1000 [20:38<2:00:44,  8.48s/it][Succeeded / Failed / Skipped / Total] 55 / 88 / 3 / 146:  15%|█▍        | 147/1000 [20:44<2:00:22,  8.47s/it]Adds a value to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[dumbstruck]] ) { if ( [[dumbstruck]] == null ) { return ; } if ( [[dumbstruck]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[dumbstruck]] ) ; } else if ( [[dumbstruck]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[dumbstruck]] ) ; } else if ( [[dumbstruck]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[dumbstruck]] ) ; } else if ( [[dumbstruck]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[dumbstruck]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[dumbstruck]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 142 ---------------------------------------------
Get a list of garovities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > [[digested]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[digested]] != null ) { gaList . addAll ( [[digested]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the shared shared type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[senseless]] > [[senseless]] getSharedObject ( Class < [[senseless]] > sharedType ) { return ( [[senseless]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[balzac]] ( HttpServletRequest [[straightens]] ) { Object [[zizi]] = [[straightens]] . getUserPrincipal ( ) == null ? null : [[straightens]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[zizi]] ) ; } return [[zizi]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Invoke a invocation of a invocation . --> Allocate a interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[appleseed]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[appleseed]] ) ; } return super . afterInvocation ( [[appleseed]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Returns true if the given role is a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[bruschetta]] ( String [[whate]] ) { Assert . isTrue ( ! [[whate]] . startsWith ( "ROLE_" ) , ( ) -> [[whate]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[whate]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 89 / 3 / 147:  15%|█▍        | 147/1000 [20:44<2:00:22,  8.47s/it][Succeeded / Failed / Skipped / Total] 55 / 89 / 3 / 147:  15%|█▍        | 148/1000 [20:45<1:59:28,  8.41s/it][Succeeded / Failed / Skipped / Total] 56 / 89 / 3 / 148:  15%|█▍        | 148/1000 [20:45<1:59:28,  8.41s/it][Succeeded / Failed / Skipped / Total] 56 / 89 / 3 / 148:  15%|█▍        | 149/1000 [21:03<2:00:15,  8.48s/it][Succeeded / Failed / Skipped / Total] 56 / 90 / 3 / 149:  15%|█▍        | 149/1000 [21:03<2:00:15,  8.48s/it][Succeeded / Failed / Skipped / Total] 56 / 90 / 3 / 149:  15%|█▌        | 150/1000 [21:10<1:59:57,  8.47s/it][Succeeded / Failed / Skipped / Total] 56 / 91 / 3 / 150:  15%|█▌        | 150/1000 [21:10<1:59:57,  8.47s/it][Succeeded / Failed / Skipped / Total] 56 / 91 / 3 / 150:  15%|█▌        | 151/1000 [21:18<1:59:47,  8.47s/it][Succeeded / Failed / Skipped / Total] 57 / 91 / 3 / 151:  15%|█▌        | 151/1000 [21:18<1:59:47,  8.47s/it][Succeeded / Failed / Skipped / Total] 57 / 91 / 3 / 151:  15%|█▌        | 152/1000 [21:27<1:59:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 58 / 91 / 3 / 152:  15%|█▌        | 152/1000 [21:27<1:59:45,  8.47s/it][Succeeded / Failed / Skipped / Total] 58 / 91 / 3 / 152:  15%|█▌        | 153/1000 [21:28<1:58:52,  8.42s/it]Build the URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[request]] ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[shops]] ) throws IOException , ServletException { int [[dea]] = portResolver . getServerPort ( [[shops]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[dea]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[shops]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[shops]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[shops]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[shops]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[shops]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 148 ---------------------------------------------
Returns the roles for the given roles . --> Utility method to get hooooooosur device --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[hooray]] ) { for ( int [[aho]] = 0 ; [[aho]] < [[hooray]] . length ; [[aho]] ++ ) { [[hooray]] [ [[aho]] ] = "ROLE_" + [[hooray]] [ [[aho]] ] ; } return [[hooray]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
A convenience method . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[mumbled]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Process an cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String [[presentedSeries]] = cookieTokens [ 0 ] ; final String [[presentedToken]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String [[attract]] = cookieTokens [ 0 ] ; final String [[uns]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[attract]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 151 ---------------------------------------------
Adapts a dialog . --> Creates a new contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact [[azeem]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[azeem]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Determines whether or not the given post is valid . --> Constructs a new postr . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[asphalt]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 92 / 3 / 153:  15%|█▌        | 153/1000 [21:28<1:58:52,  8.42s/it][Succeeded / Failed / Skipped / Total] 58 / 92 / 3 / 153:  15%|█▌        | 154/1000 [21:28<1:57:58,  8.37s/it][Succeeded / Failed / Skipped / Total] 58 / 93 / 3 / 154:  15%|█▌        | 154/1000 [21:28<1:57:58,  8.37s/it][Succeeded / Failed / Skipped / Total] 58 / 93 / 3 / 154:  16%|█▌        | 155/1000 [21:38<1:58:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 59 / 93 / 3 / 155:  16%|█▌        | 155/1000 [21:38<1:58:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 59 / 93 / 3 / 155:  16%|█▌        | 156/1000 [21:49<1:58:04,  8.39s/it][Succeeded / Failed / Skipped / Total] 60 / 93 / 3 / 156:  16%|█▌        | 156/1000 [21:49<1:58:04,  8.39s/it][Succeeded / Failed / Skipped / Total] 60 / 93 / 3 / 156:  16%|█▌        | 157/1000 [21:54<1:57:35,  8.37s/it][Succeeded / Failed / Skipped / Total] 60 / 94 / 3 / 157:  16%|█▌        | 157/1000 [21:54<1:57:35,  8.37s/it][Succeeded / Failed / Skipped / Total] 60 / 94 / 3 / 157:  16%|█▌        | 158/1000 [21:58<1:57:08,  8.35s/it][Succeeded / Failed / Skipped / Total] 61 / 94 / 3 / 158:  16%|█▌        | 158/1000 [21:58<1:57:08,  8.35s/it][Succeeded / Failed / Skipped / Total] 61 / 94 / 3 / 158:  16%|█▌        | 159/1000 [21:59<1:56:18,  8.30s/it][Succeeded / Failed / Skipped / Total] 61 / 95 / 3 / 159:  16%|█▌        | 159/1000 [21:59<1:56:18,  8.30s/it][Succeeded / Failed / Skipped / Total] 61 / 95 / 3 / 159:  16%|█▌        | 160/1000 [22:10<1:56:24,  8.32s/it]Generate a new authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[sooty]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[sooty]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 154 ---------------------------------------------
Sets the redirect URL --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[sugata]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 155 ---------------------------------------------
Parse a JWT --> Parses a acknowledge . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[acknowledged]] = parse ( token ) ; if ( [[acknowledged]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[acknowledged]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[acknowledged]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Returns the number of ampling . --> Returns a list of authority objects . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt [[balance]] ) { return getScopes ( [[balance]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Performs a HTTP POST . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[mortuary]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[mortuary]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 158 ---------------------------------------------
Handle a request . --> Sets the request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[bytes]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 159 ---------------------------------------------
Load username . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[userDetailsService]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[mourn]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 95 / 3 / 160:  16%|█▌        | 160/1000 [22:10<1:56:24,  8.32s/it][Succeeded / Failed / Skipped / Total] 62 / 95 / 3 / 160:  16%|█▌        | 161/1000 [22:15<1:55:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 62 / 96 / 3 / 161:  16%|█▌        | 161/1000 [22:15<1:55:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 62 / 96 / 3 / 161:  16%|█▌        | 162/1000 [22:23<1:55:51,  8.30s/it][Succeeded / Failed / Skipped / Total] 63 / 96 / 3 / 162:  16%|█▌        | 162/1000 [22:23<1:55:51,  8.30s/it][Succeeded / Failed / Skipped / Total] 63 / 96 / 3 / 162:  16%|█▋        | 163/1000 [22:38<1:56:16,  8.34s/it][Succeeded / Failed / Skipped / Total] 63 / 97 / 3 / 163:  16%|█▋        | 163/1000 [22:38<1:56:16,  8.34s/it][Succeeded / Failed / Skipped / Total] 63 / 97 / 3 / 163:  16%|█▋        | 164/1000 [22:46<1:56:04,  8.33s/it][Succeeded / Failed / Skipped / Total] 64 / 97 / 3 / 164:  16%|█▋        | 164/1000 [22:46<1:56:04,  8.33s/it][Succeeded / Failed / Skipped / Total] 64 / 97 / 3 / 164:  16%|█▋        | 165/1000 [22:46<1:55:15,  8.28s/it]Make a new contact . --> Get alarm --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int [[booed]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[booed]] ) ) ; Acl [[whatchamacallit]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[whatchamacallit]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 161 ---------------------------------------------
Returns the default expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[frantisek]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[deci]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[deci]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[constitution]] = new IOException ( ) ; [[constitution]] . initCause ( e ) ; throw [[constitution]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[deci]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 162 ---------------------------------------------
Delete a permission . --> Delete permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "sid" , sidObject ) ; [[model]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[canapés]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > [[carat]] = new HashMap <> ( ) ; [[carat]] . put ( "contact" , contact ) ; [[carat]] . put ( "sid" , sidObject ) ; [[carat]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[carat]] ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 163 ---------------------------------------------
Adds a new Permission to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact [[contact]] = contactManager . getById ( [[contactId]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[contact]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long [[wilmot]] ) { Contact [[dietz]] = contactManager . getById ( [[wilmot]] ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[dietz]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 164 ---------------------------------------------
Get a list of attributes . --> Get attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[beaune]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[beaune]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 165 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 64 / 98 / 3 / 165:  16%|█▋        | 165/1000 [22:46<1:55:15,  8.28s/it][Succeeded / Failed / Skipped / Total] 64 / 98 / 3 / 165:  17%|█▋        | 166/1000 [22:47<1:54:29,  8.24s/it][Succeeded / Failed / Skipped / Total] 64 / 99 / 3 / 166:  17%|█▋        | 166/1000 [22:47<1:54:29,  8.24s/it][Succeeded / Failed / Skipped / Total] 64 / 99 / 3 / 166:  17%|█▋        | 167/1000 [22:49<1:53:50,  8.20s/it][Succeeded / Failed / Skipped / Total] 64 / 100 / 3 / 167:  17%|█▋        | 167/1000 [22:49<1:53:50,  8.20s/it][Succeeded / Failed / Skipped / Total] 64 / 100 / 3 / 167:  17%|█▋        | 168/1000 [23:04<1:54:17,  8.24s/it][Succeeded / Failed / Skipped / Total] 65 / 100 / 3 / 168:  17%|█▋        | 168/1000 [23:04<1:54:17,  8.24s/it][Succeeded / Failed / Skipped / Total] 65 / 100 / 3 / 168:  17%|█▋        | 169/1000 [23:05<1:53:32,  8.20s/it][Succeeded / Failed / Skipped / Total] 65 / 101 / 3 / 169:  17%|█▋        | 169/1000 [23:05<1:53:32,  8.20s/it][Succeeded / Failed / Skipped / Total] 65 / 101 / 3 / 169:  17%|█▋        | 170/1000 [23:09<1:53:01,  8.17s/it][Succeeded / Failed / Skipped / Total] 65 / 102 / 3 / 170:  17%|█▋        | 170/1000 [23:09<1:53:01,  8.17s/it][Succeeded / Failed / Skipped / Total] 65 / 102 / 3 / 170:  17%|█▋        | 171/1000 [23:35<1:54:22,  8.28s/it][Succeeded / Failed / Skipped / Total] 65 / 103 / 3 / 171:  17%|█▋        | 171/1000 [23:35<1:54:22,  8.28s/it][Succeeded / Failed / Skipped / Total] 65 / 103 / 3 / 171:  17%|█▋        | 172/1000 [23:41<1:54:04,  8.27s/it]Returns the roles for the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[mell]] , String role ) { if ( role == null ) { return role ; } if ( [[mell]] == null || [[mell]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[mell]] ) ) { return role ; } return [[mell]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 166 ---------------------------------------------
Add a permissions to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission [[addPermission]] , BindingResult result , ModelMap [[model]] ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission [[mía]] , BindingResult result , ModelMap [[machinegun]] ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { [[machinegun]] . put ( "recipients" , listRecipients ( ) ) ; [[machinegun]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . [[mía]] ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[machinegun]] . put ( "recipients" , listRecipients ( ) ) ; [[machinegun]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 167 ---------------------------------------------
Creates a new resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[hatchets]] ( String [[amicably]] ) { InMemoryResource resource = new InMemoryResource ( [[amicably]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 168 ---------------------------------------------
Converts a byte array to a byte array . --> Encode a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[kozo]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[deja]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[deja]] , 0 , bytes . limit ( ) ) ; return [[deja]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 169 ---------------------------------------------
Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[commissioners]] ( byte [ ] [[reachable]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[reachable]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Get the value of a given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[overthrow]] ) { List < String > result = getAttributeValues ( [[overthrow]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Find a specific class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[krishna]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 104 / 3 / 172:  17%|█▋        | 172/1000 [23:41<1:54:04,  8.27s/it][Succeeded / Failed / Skipped / Total] 65 / 104 / 3 / 172:  17%|█▋        | 173/1000 [23:42<1:53:19,  8.22s/it][Succeeded / Failed / Skipped / Total] 65 / 105 / 3 / 173:  17%|█▋        | 173/1000 [23:42<1:53:19,  8.22s/it][Succeeded / Failed / Skipped / Total] 65 / 105 / 3 / 173:  17%|█▋        | 174/1000 [23:55<1:53:32,  8.25s/it][Succeeded / Failed / Skipped / Total] 66 / 105 / 3 / 174:  17%|█▋        | 174/1000 [23:55<1:53:32,  8.25s/it][Succeeded / Failed / Skipped / Total] 66 / 105 / 3 / 174:  18%|█▊        | 175/1000 [23:59<1:53:08,  8.23s/it][Succeeded / Failed / Skipped / Total] 67 / 105 / 3 / 175:  18%|█▊        | 175/1000 [23:59<1:53:08,  8.23s/it][Succeeded / Failed / Skipped / Total] 67 / 105 / 3 / 175:  18%|█▊        | 176/1000 [24:09<1:53:04,  8.23s/it][Succeeded / Failed / Skipped / Total] 67 / 106 / 3 / 176:  18%|█▊        | 176/1000 [24:09<1:53:04,  8.23s/it][Succeeded / Failed / Skipped / Total] 67 / 106 / 3 / 176:  18%|█▊        | 177/1000 [24:16<1:52:54,  8.23s/it][Succeeded / Failed / Skipped / Total] 68 / 106 / 3 / 177:  18%|█▊        | 177/1000 [24:16<1:52:54,  8.23s/it][Succeeded / Failed / Skipped / Total] 68 / 106 / 3 / 177:  18%|█▊        | 178/1000 [24:33<1:53:23,  8.28s/it][Succeeded / Failed / Skipped / Total] 68 / 107 / 3 / 178:  18%|█▊        | 178/1000 [24:33<1:53:23,  8.28s/it][Succeeded / Failed / Skipped / Total] 68 / 107 / 3 / 178:  18%|█▊        | 179/1000 [24:40<1:53:10,  8.27s/it]Adds a new mail . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[decon]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[decon]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Adds a configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[spinoza]] , List < ConfigAttribute > [[hermitage]] ) { Assert . notNull ( [[spinoza]] , "RegisteredMethod required" ) ; Assert . notNull ( [[hermitage]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[spinoza]] + "] with attributes [" + [[hermitage]] + "]" ) ; } this . [[forgo]] . put ( [[spinoza]] , [[hermitage]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a list of attributes of all the attributes contained in the attributes . --> Returns a list of all configurations --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[vectors]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[vectors]] . addAll ( attributeList ) ; } return [[vectors]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Configures the request . --> Sets the cronomer --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[True]]" == "[[True]]" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[hootie]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "[[Ajmer]]" == "[[Ajmer]]" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 176 ---------------------------------------------
Looks up a parameterized name . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[parameterAnnotations]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[parameterAnnotations]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[parameterAnnotations]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] [[inclusion]] = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = [[inclusion]] . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = [[inclusion]] [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
Handle a single exception . --> Drily die die --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String userDn , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[nitro]] ( String userDn , String [[crammed]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Checks if the string is a valid name . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[unemployable]] , String [[schnauzer]] ) { return ( [[schnauzer]] . endsWith ( "*" ) && [[unemployable]] . startsWith ( [[schnauzer]] . substring ( 0 , [[schnauzer]] . length ( ) - 1 ) ) ) || ( [[schnauzer]] . startsWith ( "*" ) && [[unemployable]] . endsWith ( [[schnauzer]] . substring ( 1 , [[schnauzer]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 179 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 108 / 3 / 179:  18%|█▊        | 179/1000 [24:40<1:53:10,  8.27s/it][Succeeded / Failed / Skipped / Total] 68 / 108 / 3 / 179:  18%|█▊        | 180/1000 [24:44<1:52:40,  8.24s/it][Succeeded / Failed / Skipped / Total] 68 / 109 / 3 / 180:  18%|█▊        | 180/1000 [24:44<1:52:40,  8.24s/it][Succeeded / Failed / Skipped / Total] 68 / 109 / 3 / 180:  18%|█▊        | 181/1000 [24:46<1:52:04,  8.21s/it][Succeeded / Failed / Skipped / Total] 68 / 110 / 3 / 181:  18%|█▊        | 181/1000 [24:46<1:52:04,  8.21s/it][Succeeded / Failed / Skipped / Total] 68 / 110 / 3 / 181:  18%|█▊        | 182/1000 [24:47<1:51:25,  8.17s/it][Succeeded / Failed / Skipped / Total] 69 / 110 / 3 / 182:  18%|█▊        | 182/1000 [24:47<1:51:25,  8.17s/it][Succeeded / Failed / Skipped / Total] 69 / 110 / 3 / 182:  18%|█▊        | 183/1000 [24:56<1:51:21,  8.18s/it][Succeeded / Failed / Skipped / Total] 70 / 110 / 3 / 183:  18%|█▊        | 183/1000 [24:56<1:51:21,  8.18s/it][Succeeded / Failed / Skipped / Total] 70 / 110 / 3 / 183:  18%|█▊        | 184/1000 [25:15<1:52:02,  8.24s/it][Succeeded / Failed / Skipped / Total] 70 / 111 / 3 / 184:  18%|█▊        | 184/1000 [25:15<1:52:02,  8.24s/it][Succeeded / Failed / Skipped / Total] 70 / 111 / 3 / 184:  18%|█▊        | 185/1000 [25:23<1:51:49,  8.23s/it][Succeeded / Failed / Skipped / Total] 70 / 112 / 3 / 185:  18%|█▊        | 185/1000 [25:23<1:51:49,  8.23s/it][Succeeded / Failed / Skipped / Total] 70 / 112 / 3 / 185:  19%|█▊        | 186/1000 [25:26<1:51:19,  8.21s/it]Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[gameboy]] = request . getSession ( "False" != "False" ) ; if ( [[gameboy]] == null ) { return ; } [[gameboy]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
Returns the field of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[philosophic]] ( Class < ? > clazz , String [[ddr]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[ddr]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[ddr]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 181 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[barky]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[barky]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 182 ---------------------------------------------
Create a new URL --> Create a new service --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[serviceProperties]] . getServiceParameter ( ) , serviceUrl , this . [[serviceProperties]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[hurtin]] . getServiceParameter ( ) , serviceUrl , this . [[hurtin]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Check if the given filters is valid . --> Verifies that a given filters is valid . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[neon]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Extracts the prefix from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[gifts]] ) { if ( ! [[gifts]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[gifts]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[gifts]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 185 ---------------------------------------------
Get the exception type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . extractorMap . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[ethics]] = this . extractorMap . keySet ( ) ; return [[ethics]] . toArray ( new Class [ [[ethics]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 113 / 3 / 186:  19%|█▊        | 186/1000 [25:26<1:51:19,  8.21s/it][Succeeded / Failed / Skipped / Total] 70 / 113 / 3 / 186:  19%|█▊        | 187/1000 [25:28<1:50:44,  8.17s/it][Succeeded / Failed / Skipped / Total] 70 / 114 / 3 / 187:  19%|█▊        | 187/1000 [25:28<1:50:44,  8.17s/it][Succeeded / Failed / Skipped / Total] 70 / 114 / 3 / 187:  19%|█▉        | 188/1000 [25:44<1:51:10,  8.21s/it][Succeeded / Failed / Skipped / Total] 71 / 114 / 3 / 188:  19%|█▉        | 188/1000 [25:44<1:51:10,  8.21s/it][Succeeded / Failed / Skipped / Total] 71 / 114 / 3 / 188:  19%|█▉        | 189/1000 [26:01<1:51:39,  8.26s/it][Succeeded / Failed / Skipped / Total] 71 / 115 / 3 / 189:  19%|█▉        | 189/1000 [26:01<1:51:39,  8.26s/it][Succeeded / Failed / Skipped / Total] 71 / 115 / 3 / 189:  19%|█▉        | 190/1000 [26:08<1:51:25,  8.25s/it][Succeeded / Failed / Skipped / Total] 72 / 115 / 3 / 190:  19%|█▉        | 190/1000 [26:08<1:51:25,  8.25s/it][Succeeded / Failed / Skipped / Total] 72 / 115 / 3 / 190:  19%|█▉        | 191/1000 [26:12<1:51:02,  8.24s/it][Succeeded / Failed / Skipped / Total] 73 / 115 / 3 / 191:  19%|█▉        | 191/1000 [26:12<1:51:02,  8.24s/it][Succeeded / Failed / Skipped / Total] 73 / 115 / 3 / 191:  19%|█▉        | 192/1000 [26:15<1:50:32,  8.21s/it]Send a request to the client . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[deceptively]] ( HttpServletRequest request , HttpServletResponse [[adjoins]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[adjoins]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Create a service . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[plannin]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 188 ---------------------------------------------
Return the number of bytes in the given array . --> Return true if the given zookeeper --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int [[i]] = 0 ; [[i]] < expected . length ; [[i]] ++ ) { result |= expected [ [[i]] ] ^ actual [ [[i]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int [[kenzo]] = 0 ; [[kenzo]] < expected . length ; [[kenzo]] ++ ) { result |= expected [ [[kenzo]] ] ^ actual [ [[kenzo]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Returns a list of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[dakin]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { [[dakin]] . add ( authority . getAuthority ( ) ) ; } return [[dakin]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the extractor from the given throwable . --> Extract a map from a map --> Socre: 1.0

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = [[entry]] . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[extractor]] = [[entry]] . getValue ( ) ; return [[extractor]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[beirut]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[bambam]] = [[beirut]] . getKey ( ) ; if ( [[bambam]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[occidental]] = [[beirut]] . getValue ( ) ; return [[occidental]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Registers a bean definition . --> Create a new bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition [[accessManager]] = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( [[accessManager]] ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( [[accessManager]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[undercarriage]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[burnside]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[burnside]] . addConstructorArgValue ( voters ) ; BeanDefinition [[mission]] = [[burnside]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( [[mission]] ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( [[mission]] , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 115 / 3 / 192:  19%|█▉        | 192/1000 [26:15<1:50:32,  8.21s/it][Succeeded / Failed / Skipped / Total] 74 / 115 / 3 / 192:  19%|█▉        | 193/1000 [26:32<1:50:57,  8.25s/it][Succeeded / Failed / Skipped / Total] 75 / 115 / 3 / 193:  19%|█▉        | 193/1000 [26:32<1:50:57,  8.25s/it][Succeeded / Failed / Skipped / Total] 75 / 115 / 3 / 193:  19%|█▉        | 194/1000 [26:43<1:51:02,  8.27s/it][Succeeded / Failed / Skipped / Total] 75 / 116 / 3 / 194:  19%|█▉        | 194/1000 [26:43<1:51:02,  8.27s/it][Succeeded / Failed / Skipped / Total] 75 / 116 / 3 / 194:  20%|█▉        | 195/1000 [26:46<1:50:33,  8.24s/it][Succeeded / Failed / Skipped / Total] 75 / 117 / 3 / 195:  20%|█▉        | 195/1000 [26:46<1:50:33,  8.24s/it][Succeeded / Failed / Skipped / Total] 75 / 117 / 3 / 195:  20%|█▉        | 196/1000 [26:58<1:50:40,  8.26s/it][Succeeded / Failed / Skipped / Total] 75 / 118 / 3 / 196:  20%|█▉        | 196/1000 [26:58<1:50:40,  8.26s/it][Succeeded / Failed / Skipped / Total] 75 / 118 / 3 / 196:  20%|█▉        | 197/1000 [27:02<1:50:14,  8.24s/it][Succeeded / Failed / Skipped / Total] 76 / 118 / 3 / 197:  20%|█▉        | 197/1000 [27:02<1:50:14,  8.24s/it][Succeeded / Failed / Skipped / Total] 76 / 118 / 3 / 197:  20%|█▉        | 198/1000 [27:19<1:50:39,  8.28s/it][Succeeded / Failed / Skipped / Total] 76 / 119 / 3 / 198:  20%|█▉        | 198/1000 [27:19<1:50:39,  8.28s/it][Succeeded / Failed / Skipped / Total] 76 / 119 / 3 / 198:  20%|█▉        | 199/1000 [27:26<1:50:26,  8.27s/it]Build a URL string . --> Build a servlet --> Socre: 1.0

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[hardcastle]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[hardcastle]] . append ( servletPath ) ; if ( pathInfo != null ) { [[hardcastle]] . append ( pathInfo ) ; } } else { [[hardcastle]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[hardcastle]] . append ( "?" ) . append ( queryString ) ; } return [[hardcastle]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 193 ---------------------------------------------
Sets the default redirect url . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[juveniles]] ( String [[nakedness]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[nakedness]] ) , ( ) -> "'" + [[nakedness]] + "' is not a valid redirect URL" ) ; this . [[woah]] = [[nakedness]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 194 ---------------------------------------------
Resolve a resolve . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[mezcal]] ( Function < HttpServletRequest , Map < String , String > > [[stefan]] ) { Assert . notNull ( [[stefan]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[stefan]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 195 ---------------------------------------------
Does the URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "[[Ramos]]" != "[[Ramos]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Returns the list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[flaky]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Create a new object . --> Create a new MBean --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "[[True]]" == "[[True]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[True]]" == "[[True]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid [[morgenstern]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[morgenstern]] , "[[Agoraphobia]]" == "[[Agoraphobia]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "[[Agoraphobia]]" == "[[Agoraphobia]]" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 198 ---------------------------------------------
Converts a type to a Set . --> [[[FAILED]]]

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[garde]] , ResultSet [[balzac]] ) throws SQLException { if ( isString ( [[garde]] ) && hasValidClassIdType ( [[balzac]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[balzac]] ) ) ) { [[garde]] = convertFromStringTo ( ( String ) [[garde]] , classIdTypeFrom ( [[balzac]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 119 / 3 / 199:  20%|█▉        | 199/1000 [27:26<1:50:26,  8.27s/it][Succeeded / Failed / Skipped / Total] 77 / 119 / 3 / 199:  20%|██        | 200/1000 [27:26<1:49:46,  8.23s/it][Succeeded / Failed / Skipped / Total] 77 / 119 / 4 / 200:  20%|██        | 200/1000 [27:26<1:49:46,  8.23s/it][Succeeded / Failed / Skipped / Total] 77 / 119 / 4 / 200:  20%|██        | 201/1000 [27:39<1:49:56,  8.26s/it][Succeeded / Failed / Skipped / Total] 77 / 120 / 4 / 201:  20%|██        | 201/1000 [27:39<1:49:56,  8.26s/it][Succeeded / Failed / Skipped / Total] 77 / 120 / 4 / 201:  20%|██        | 202/1000 [28:05<1:50:59,  8.35s/it][Succeeded / Failed / Skipped / Total] 77 / 121 / 4 / 202:  20%|██        | 202/1000 [28:05<1:50:59,  8.35s/it][Succeeded / Failed / Skipped / Total] 77 / 121 / 4 / 202:  20%|██        | 203/1000 [28:09<1:50:33,  8.32s/it][Succeeded / Failed / Skipped / Total] 77 / 122 / 4 / 203:  20%|██        | 203/1000 [28:09<1:50:33,  8.32s/it][Succeeded / Failed / Skipped / Total] 77 / 122 / 4 / 203:  20%|██        | 204/1000 [28:26<1:50:59,  8.37s/it][Succeeded / Failed / Skipped / Total] 77 / 123 / 4 / 204:  20%|██        | 204/1000 [28:26<1:50:59,  8.37s/it][Succeeded / Failed / Skipped / Total] 77 / 123 / 4 / 204:  20%|██        | 205/1000 [28:26<1:50:19,  8.33s/it][Succeeded / Failed / Skipped / Total] 77 / 123 / 5 / 205:  20%|██        | 205/1000 [28:26<1:50:19,  8.33s/it][Succeeded / Failed / Skipped / Total] 77 / 123 / 5 / 205:  21%|██        | 206/1000 [28:34<1:50:09,  8.32s/it]Updates an object . --> Unregisters a MBean --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[ownerSid]] , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[juno]] ) { Long parentId = null ; if ( [[juno]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[juno]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[juno]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[juno]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[accidently]] = createOrRetrieveSidPrimaryKey ( [[juno]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[accidently]] , Boolean . valueOf ( [[juno]] . isEntriesInheriting ( ) ) , [[juno]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 200 ---------------------------------------------
A convenience method for example . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Create a new batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[feasibility]] ( final MutableAcl [[auntie]] ) { if ( [[auntie]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[auntie]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[auntie]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[auntie]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 202 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[depend]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[depend]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Encrypt a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[basilio]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[basilio]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Loads a list of servers . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String [[pattern]] : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[harte]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[antifreeze]] = new ArrayList <> ( patterns . length ) ; for ( String [[beirut]] : patterns ) { [[antifreeze]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[beirut]] , method ) ) ; } return new OrServerWebExchangeMatcher ( [[antifreeze]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 205 ---------------------------------------------
Performs an HTTP POST request . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 206 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 124 / 5 / 206:  21%|██        | 206/1000 [28:34<1:50:09,  8.32s/it][Succeeded / Failed / Skipped / Total] 77 / 124 / 5 / 206:  21%|██        | 207/1000 [28:40<1:49:52,  8.31s/it][Succeeded / Failed / Skipped / Total] 77 / 125 / 5 / 207:  21%|██        | 207/1000 [28:40<1:49:52,  8.31s/it][Succeeded / Failed / Skipped / Total] 77 / 125 / 5 / 207:  21%|██        | 208/1000 [28:55<1:50:08,  8.34s/it][Succeeded / Failed / Skipped / Total] 78 / 125 / 5 / 208:  21%|██        | 208/1000 [28:55<1:50:08,  8.34s/it][Succeeded / Failed / Skipped / Total] 78 / 125 / 5 / 208:  21%|██        | 209/1000 [29:01<1:49:50,  8.33s/it][Succeeded / Failed / Skipped / Total] 78 / 126 / 5 / 209:  21%|██        | 209/1000 [29:01<1:49:50,  8.33s/it][Succeeded / Failed / Skipped / Total] 78 / 126 / 5 / 209:  21%|██        | 210/1000 [29:09<1:49:40,  8.33s/it][Succeeded / Failed / Skipped / Total] 78 / 127 / 5 / 210:  21%|██        | 210/1000 [29:09<1:49:40,  8.33s/it][Succeeded / Failed / Skipped / Total] 78 / 127 / 5 / 210:  21%|██        | 211/1000 [29:16<1:49:26,  8.32s/it][Succeeded / Failed / Skipped / Total] 79 / 127 / 5 / 211:  21%|██        | 211/1000 [29:16<1:49:26,  8.32s/it][Succeeded / Failed / Skipped / Total] 79 / 127 / 5 / 211:  21%|██        | 212/1000 [29:21<1:49:08,  8.31s/it]Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[azriel]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[azriel]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[compositions]] , HttpServletResponse [[org]] ) { if ( requestMatcher . matches ( [[compositions]] ) ) { DefaultSavedRequest [[hippocratic]] = new DefaultSavedRequest ( [[compositions]] , portResolver ) ; if ( createSessionAllowed || [[compositions]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 208 ---------------------------------------------
Gets a row in a row . --> Gets the row location . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[beckham]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[beckham]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
Sets the target parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[couscous]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 210 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[allowFromStrategy]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[admiral]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 211 ---------------------------------------------
Builds a Distribution . --> Adds a Distribution to a Distribution --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[brained]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 127 / 5 / 212:  21%|██        | 212/1000 [29:21<1:49:08,  8.31s/it][Succeeded / Failed / Skipped / Total] 80 / 127 / 5 / 212:  21%|██▏       | 213/1000 [29:26<1:48:47,  8.29s/it][Succeeded / Failed / Skipped / Total] 80 / 128 / 5 / 213:  21%|██▏       | 213/1000 [29:26<1:48:47,  8.29s/it][Succeeded / Failed / Skipped / Total] 80 / 128 / 5 / 213:  21%|██▏       | 214/1000 [29:39<1:48:56,  8.32s/it][Succeeded / Failed / Skipped / Total] 81 / 128 / 5 / 214:  21%|██▏       | 214/1000 [29:39<1:48:56,  8.32s/it][Succeeded / Failed / Skipped / Total] 81 / 128 / 5 / 214:  22%|██▏       | 215/1000 [29:48<1:48:48,  8.32s/it][Succeeded / Failed / Skipped / Total] 81 / 129 / 5 / 215:  22%|██▏       | 215/1000 [29:48<1:48:48,  8.32s/it][Succeeded / Failed / Skipped / Total] 81 / 129 / 5 / 215:  22%|██▏       | 216/1000 [30:01<1:49:00,  8.34s/it][Succeeded / Failed / Skipped / Total] 81 / 130 / 5 / 216:  22%|██▏       | 216/1000 [30:01<1:49:00,  8.34s/it][Succeeded / Failed / Skipped / Total] 81 / 130 / 5 / 216:  22%|██▏       | 217/1000 [30:13<1:49:04,  8.36s/it][Succeeded / Failed / Skipped / Total] 81 / 131 / 5 / 217:  22%|██▏       | 217/1000 [30:13<1:49:04,  8.36s/it][Succeeded / Failed / Skipped / Total] 81 / 131 / 5 / 217:  22%|██▏       | 218/1000 [30:30<1:49:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 82 / 131 / 5 / 218:  22%|██▏       | 218/1000 [30:30<1:49:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 82 / 131 / 5 / 218:  22%|██▏       | 219/1000 [30:45<1:49:41,  8.43s/it]Creates a new shared object . --> Build a balancing --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[suns]] ( ) { Map < Class < ? extends Object > , Object > [[bayard]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[bayard]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[bayard]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[bayard]] . put ( ApplicationContext . class , context ) ; [[bayard]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[bayard]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[bayard]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 213 ---------------------------------------------
Get the HttpServlet response . --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[resolution]] , HttpServletResponse [[akeelah]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 214 ---------------------------------------------
Parse a date . --> Converts a string representation to a String --> Socre: 1.0

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] formats ) { Date [[brashear]] = null ; for ( int [[hobble]] = 0 ; ( [[brashear]] == null ) && ( [[hobble]] < formats . length ) ; [[hobble]] ++ ) { try { [[brashear]] = formats [ [[hobble]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[brashear]] == null ) { return null ; } return new Long ( [[brashear]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Converts a date to a date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[negativity]] ( ) { long [[crouching]] = System . currentTimeMillis ( ) ; if ( ( [[crouching]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[crouching]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[crouching]] ; currentDate = format . format ( new Date ( [[crouching]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 216 ---------------------------------------------
Sets the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[canny]] , UsernamePasswordAuthenticationToken [[them]] ) { [[them]] . setDetails ( authenticationDetailsSource . buildDetails ( [[canny]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Updates the cache . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[cache]] , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[unaware]] , Object key , Object [[scared]] ) { if ( [[scared]] == null ) { return ; } if ( [[unaware]] . size ( ) > 1000 ) { [[unaware]] . clear ( ) ; } [[unaware]] . put ( key , [[scared]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Gets the web application . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[español]] ( final String securityName ) { Context [[masks]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 132 / 5 / 219:  22%|██▏       | 219/1000 [30:45<1:49:41,  8.43s/it][Succeeded / Failed / Skipped / Total] 82 / 132 / 5 / 219:  22%|██▏       | 220/1000 [30:55<1:49:38,  8.43s/it][Succeeded / Failed / Skipped / Total] 83 / 132 / 5 / 220:  22%|██▏       | 220/1000 [30:55<1:49:38,  8.43s/it][Succeeded / Failed / Skipped / Total] 83 / 132 / 5 / 220:  22%|██▏       | 221/1000 [31:12<1:49:59,  8.47s/it][Succeeded / Failed / Skipped / Total] 83 / 133 / 5 / 221:  22%|██▏       | 221/1000 [31:12<1:49:59,  8.47s/it][Succeeded / Failed / Skipped / Total] 83 / 133 / 5 / 221:  22%|██▏       | 222/1000 [31:34<1:50:39,  8.53s/it][Succeeded / Failed / Skipped / Total] 83 / 134 / 5 / 222:  22%|██▏       | 222/1000 [31:34<1:50:39,  8.53s/it][Succeeded / Failed / Skipped / Total] 83 / 134 / 5 / 222:  22%|██▏       | 223/1000 [31:42<1:50:28,  8.53s/it][Succeeded / Failed / Skipped / Total] 83 / 135 / 5 / 223:  22%|██▏       | 223/1000 [31:42<1:50:28,  8.53s/it][Succeeded / Failed / Skipped / Total] 83 / 135 / 5 / 223:  22%|██▏       | 224/1000 [31:49<1:50:13,  8.52s/it][Succeeded / Failed / Skipped / Total] 83 / 136 / 5 / 224:  22%|██▏       | 224/1000 [31:49<1:50:13,  8.52s/it][Succeeded / Failed / Skipped / Total] 83 / 136 / 5 / 224:  22%|██▎       | 225/1000 [31:49<1:49:38,  8.49s/it]Sets the login . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[False]]" != "[[False]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[key]] = prefix + n ; log . debug ( "Setting security property [" + [[key]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[key]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[Icey]]" != "[[Icey]]" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[hatano]] = prefix + n ; log . debug ( "Setting security property [" + [[hatano]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[hatano]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 220 ---------------------------------------------
Get the security security provider . --> Try to create a permtorytoryto deter --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[devastated]] ( final Subject [[repertoire]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[repertoire]] ) ; } String [[jernigan]] = null ; if ( [[repertoire]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
Builds a named followed by name . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[scandalous]] ) { DistinguishedName [[reheat]] = new DistinguishedName ( groupSearchBase ) ; [[reheat]] . add ( groupRoleAttributeName , [[scandalous]] . toLowerCase ( ) ) ; return [[reheat]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Change password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[adelina]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 223 ---------------------------------------------
Get the chain of chain chains . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[poltergeists]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[poltergeists]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 224 ---------------------------------------------
Notifies all the sessions in the given session . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[allowableSessions]] , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[brows]] , SessionRegistry [[moderately]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[brows]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 225 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 137 / 5 / 225:  22%|██▎       | 225/1000 [31:49<1:49:38,  8.49s/it][Succeeded / Failed / Skipped / Total] 83 / 137 / 5 / 225:  23%|██▎       | 226/1000 [31:50<1:49:01,  8.45s/it][Succeeded / Failed / Skipped / Total] 84 / 137 / 5 / 226:  23%|██▎       | 226/1000 [31:50<1:49:01,  8.45s/it][Succeeded / Failed / Skipped / Total] 84 / 137 / 5 / 226:  23%|██▎       | 227/1000 [32:04<1:49:12,  8.48s/it][Succeeded / Failed / Skipped / Total] 84 / 138 / 5 / 227:  23%|██▎       | 227/1000 [32:04<1:49:12,  8.48s/it][Succeeded / Failed / Skipped / Total] 84 / 138 / 5 / 227:  23%|██▎       | 228/1000 [32:13<1:49:07,  8.48s/it][Succeeded / Failed / Skipped / Total] 85 / 138 / 5 / 228:  23%|██▎       | 228/1000 [32:13<1:49:07,  8.48s/it][Succeeded / Failed / Skipped / Total] 85 / 138 / 5 / 228:  23%|██▎       | 229/1000 [32:26<1:49:14,  8.50s/it][Succeeded / Failed / Skipped / Total] 86 / 138 / 5 / 229:  23%|██▎       | 229/1000 [32:26<1:49:14,  8.50s/it][Succeeded / Failed / Skipped / Total] 86 / 138 / 5 / 229:  23%|██▎       | 230/1000 [33:00<1:50:30,  8.61s/it][Succeeded / Failed / Skipped / Total] 86 / 139 / 5 / 230:  23%|██▎       | 230/1000 [33:00<1:50:30,  8.61s/it][Succeeded / Failed / Skipped / Total] 86 / 139 / 5 / 230:  23%|██▎       | 231/1000 [33:05<1:50:11,  8.60s/it][Succeeded / Failed / Skipped / Total] 86 / 140 / 5 / 231:  23%|██▎       | 231/1000 [33:05<1:50:11,  8.60s/it][Succeeded / Failed / Skipped / Total] 86 / 140 / 5 / 231:  23%|██▎       | 232/1000 [33:09<1:49:44,  8.57s/it][Succeeded / Failed / Skipped / Total] 86 / 141 / 5 / 232:  23%|██▎       | 232/1000 [33:09<1:49:44,  8.57s/it][Succeeded / Failed / Skipped / Total] 86 / 141 / 5 / 232:  23%|██▎       | 233/1000 [33:31<1:50:21,  8.63s/it]Processes the next token . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[siegel]] ( Authentication [[guille]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[jaguars]] = ( AbstractAuthenticationToken ) dest ; [[jaguars]] . setDetails ( [[guille]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 226 ---------------------------------------------
Gets a list of all requests . --> Gets a list of candidates --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[cup]] ( String url ) { return [[cup]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[fele]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[fele]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Update attributes . --> Update a Hadoop version --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[copulation]] ( Map < String , Object > [[awh]] ) { notNull ( [[awh]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[awh]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Adds a list of filters to this filters . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[knockin]] ( List < Filter > [[imploded]] ) { Validate . notNull ( [[knockin]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[knockin]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Sets the scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[tish]] ( String [[facilitate]] , String [[croker]] ) { final BasicAuthScheme [[englewood]] = new BasicAuthScheme ( ) ; [[englewood]] . setUserName ( [[facilitate]] ) ; [[englewood]] . setPassword ( [[croker]] ) ; return [[englewood]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 231 ---------------------------------------------
Adds the given filters to the given filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[chauffer]] ( Filter [[hannay]] , Filter ... additionalFilters ) { Validate . notNull ( [[hannay]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[hannay]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Sets the securityAuthenticular password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[mondays]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 233 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 141 / 5 / 233:  23%|██▎       | 233/1000 [33:31<1:50:21,  8.63s/it][Succeeded / Failed / Skipped / Total] 87 / 141 / 5 / 233:  23%|██▎       | 234/1000 [33:40<1:50:13,  8.63s/it][Succeeded / Failed / Skipped / Total] 87 / 142 / 5 / 234:  23%|██▎       | 234/1000 [33:40<1:50:13,  8.63s/it][Succeeded / Failed / Skipped / Total] 87 / 142 / 5 / 234:  24%|██▎       | 235/1000 [33:41<1:49:40,  8.60s/it][Succeeded / Failed / Skipped / Total] 87 / 143 / 5 / 235:  24%|██▎       | 235/1000 [33:41<1:49:40,  8.60s/it][Succeeded / Failed / Skipped / Total] 87 / 143 / 5 / 235:  24%|██▎       | 236/1000 [33:43<1:49:09,  8.57s/it][Succeeded / Failed / Skipped / Total] 88 / 143 / 5 / 236:  24%|██▎       | 236/1000 [33:43<1:49:09,  8.57s/it][Succeeded / Failed / Skipped / Total] 88 / 143 / 5 / 236:  24%|██▎       | 237/1000 [33:52<1:49:01,  8.57s/it][Succeeded / Failed / Skipped / Total] 89 / 143 / 5 / 237:  24%|██▎       | 237/1000 [33:52<1:49:01,  8.57s/it][Succeeded / Failed / Skipped / Total] 89 / 143 / 5 / 237:  24%|██▍       | 238/1000 [33:53<1:48:29,  8.54s/it]Set the scheme . --> Set a new HadoopAuth object --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[charlatans]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[claustrophobia]] = new FormAuthScheme ( ) ; [[claustrophobia]] . setUserName ( userName ) ; [[claustrophobia]] . setPassword ( password ) ; [[claustrophobia]] . setConfig ( config ) ; return [[claustrophobia]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 234 ---------------------------------------------
Returns a ducanName . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 235 ---------------------------------------------
Make a proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[asymmetrical]] ) { if ( [[asymmetrical]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[asymmetrical]] . getHost ( ) , [[asymmetrical]] . getPort ( ) , [[asymmetrical]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 236 ---------------------------------------------
Sends a HTTP response to the response . --> Populates a log message . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[eveyone]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 237 ---------------------------------------------
Create a new scheme . --> Method to get the OSGi service --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[pisces]] , String workstation , String [[expedite]] ) { final NTLMAuthScheme [[meeko]] = new NTLMAuthScheme ( ) ; [[meeko]] . setUserName ( userName ) ; [[meeko]] . setPassword ( [[pisces]] ) ; [[meeko]] . setWorkstation ( workstation ) ; [[meeko]] . setDomain ( [[expedite]] ) ; return [[meeko]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 238 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 143 / 5 / 238:  24%|██▍       | 238/1000 [33:53<1:48:29,  8.54s/it][Succeeded / Failed / Skipped / Total] 90 / 143 / 5 / 238:  24%|██▍       | 239/1000 [33:59<1:48:13,  8.53s/it][Succeeded / Failed / Skipped / Total] 91 / 143 / 5 / 239:  24%|██▍       | 239/1000 [33:59<1:48:13,  8.53s/it][Succeeded / Failed / Skipped / Total] 91 / 143 / 5 / 239:  24%|██▍       | 240/1000 [34:06<1:48:02,  8.53s/it][Succeeded / Failed / Skipped / Total] 92 / 143 / 5 / 240:  24%|██▍       | 240/1000 [34:06<1:48:02,  8.53s/it][Succeeded / Failed / Skipped / Total] 92 / 143 / 5 / 240:  24%|██▍       | 241/1000 [34:13<1:47:46,  8.52s/it][Succeeded / Failed / Skipped / Total] 93 / 143 / 5 / 241:  24%|██▍       | 241/1000 [34:13<1:47:46,  8.52s/it][Succeeded / Failed / Skipped / Total] 93 / 143 / 5 / 241:  24%|██▍       | 242/1000 [34:21<1:47:36,  8.52s/it][Succeeded / Failed / Skipped / Total] 94 / 143 / 5 / 242:  24%|██▍       | 242/1000 [34:21<1:47:36,  8.52s/it][Succeeded / Failed / Skipped / Total] 94 / 143 / 5 / 242:  24%|██▍       | 243/1000 [34:25<1:47:15,  8.50s/it][Succeeded / Failed / Skipped / Total] 94 / 144 / 5 / 243:  24%|██▍       | 243/1000 [34:25<1:47:15,  8.50s/it][Succeeded / Failed / Skipped / Total] 94 / 144 / 5 / 243:  24%|██▍       | 244/1000 [34:25<1:46:40,  8.47s/it][Succeeded / Failed / Skipped / Total] 94 / 144 / 6 / 244:  24%|██▍       | 244/1000 [34:25<1:46:40,  8.47s/it][Succeeded / Failed / Skipped / Total] 94 / 144 / 6 / 244:  24%|██▍       | 245/1000 [34:26<1:46:06,  8.43s/it]Creates a ConfigConfig object . --> Helper method to create a ConfigConfigConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[fulsome]] ) { notNull ( [[fulsome]] , "Redirect config" ) ; return new RestAssuredConfig ( [[fulsome]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 239 ---------------------------------------------
Create a new MapperMapper . --> Factory method to create a JacksonFactory instance --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[Bhushan]]" == "[[Bhushan]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Create a ConfigConfigConfig instance . --> Factory method to create a ConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[burrow]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Build a ConfigConfigConfig from a configuration . --> Construct a ConfigConfigConfig from a ConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[croquettes]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Constructs a configuration object from a configuration . --> Create a new ConfigConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[cavalry]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[cavalry]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[cavalry]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 243 ---------------------------------------------
Factory method to create a new Factory instance . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[pauley]] ( JAXBObjectMapperFactory [[nag]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[pauley]] , johnzonObjectMapperFactory , "[[Restate]]" == "[[Restate]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Creates a ConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 245 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 144 / 6 / 245:  24%|██▍       | 245/1000 [34:26<1:46:06,  8.43s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 7 / 246:  25%|██▍       | 246/1000 [34:26<1:45:32,  8.40s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 7 / 246:  25%|██▍       | 247/1000 [34:26<1:44:59,  8.37s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 8 / 247:  25%|██▍       | 247/1000 [34:26<1:44:59,  8.37s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 9 / 248:  25%|██▍       | 248/1000 [34:26<1:44:26,  8.33s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 9 / 248:  25%|██▍       | 249/1000 [34:26<1:43:53,  8.30s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 10 / 249:  25%|██▍       | 249/1000 [34:26<1:43:53,  8.30s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 11 / 250:  25%|██▌       | 250/1000 [34:27<1:43:21,  8.27s/it][Succeeded / Failed / Skipped / Total] 95 / 144 / 11 / 250:  25%|██▌       | 251/1000 [34:28<1:42:51,  8.24s/it][Succeeded / Failed / Skipped / Total] 95 / 145 / 11 / 251:  25%|██▌       | 251/1000 [34:28<1:42:51,  8.24s/it][Succeeded / Failed / Skipped / Total] 96 / 145 / 11 / 252:  25%|██▌       | 252/1000 [34:36<1:42:43,  8.24s/it][Succeeded / Failed / Skipped / Total] 96 / 145 / 11 / 252:  25%|██▌       | 253/1000 [34:37<1:42:13,  8.21s/it][Succeeded / Failed / Skipped / Total] 97 / 145 / 11 / 253:  25%|██▌       | 253/1000 [34:37<1:42:13,  8.21s/it][Succeeded / Failed / Skipped / Total] 97 / 146 / 11 / 254:  25%|██▌       | 254/1000 [34:40<1:41:49,  8.19s/it][Succeeded / Failed / Skipped / Total] 97 / 146 / 11 / 254:  26%|██▌       | 255/1000 [34:41<1:41:21,  8.16s/it]Creates a ConfigConfig instance . --> Build a ConfigConfig from a configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[exited]] ( JsonConfig jsonConfig ) { notNull ( [[exited]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[exited]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Creates a ConfigConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 247 ---------------------------------------------
Constructs a configuration from a MBean configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
A convenience method for creating a new configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Build a ConfigConfigConfig from a ConfigConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 250 ---------------------------------------------
Construct a ConfigConfigConfig from a ConfigConfig --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the default charset . --> [[[FAILED]]]

[[[[Adv]]]]: public EncoderConfig defaultQueryParameterCharset ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig defaultQueryParameterCharset ( String [[looping]] ) { return new EncoderConfig ( defaultContentCharset , [[looping]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Wedges]]" == "[[Wedges]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 252 ---------------------------------------------
Factory method to create a configuration . --> Factory method to create a ConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[arapaho]] ( XmlConfig xmlConfig ) { notNull ( [[arapaho]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[arapaho]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 253 ---------------------------------------------
Build a Config from a ConfigBuilder --> Factory method that creates a new configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[amendments]] ( MultiPartConfig multiPartConfig ) { notNull ( [[amendments]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[amendments]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 254 ---------------------------------------------
Creates a new SSL authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[ascot]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 146 / 11 / 255:  26%|██▌       | 255/1000 [34:41<1:41:21,  8.16s/it][Succeeded / Failed / Skipped / Total] 98 / 147 / 11 / 256:  26%|██▌       | 256/1000 [35:21<1:42:45,  8.29s/it][Succeeded / Failed / Skipped / Total] 98 / 147 / 11 / 256:  26%|██▌       | 257/1000 [35:32<1:42:45,  8.30s/it][Succeeded / Failed / Skipped / Total] 98 / 148 / 11 / 257:  26%|██▌       | 257/1000 [35:32<1:42:45,  8.30s/it][Succeeded / Failed / Skipped / Total] 98 / 148 / 11 / 257:  26%|██▌       | 258/1000 [35:37<1:42:27,  8.28s/it][Succeeded / Failed / Skipped / Total] 99 / 148 / 11 / 258:  26%|██▌       | 258/1000 [35:37<1:42:27,  8.28s/it][Succeeded / Failed / Skipped / Total] 99 / 148 / 11 / 258:  26%|██▌       | 259/1000 [36:03<1:43:11,  8.36s/it][Succeeded / Failed / Skipped / Total] 99 / 149 / 11 / 259:  26%|██▌       | 259/1000 [36:03<1:43:11,  8.36s/it][Succeeded / Failed / Skipped / Total] 99 / 149 / 11 / 259:  26%|██▌       | 260/1000 [36:32<1:44:00,  8.43s/it][Succeeded / Failed / Skipped / Total] 99 / 150 / 11 / 260:  26%|██▌       | 260/1000 [36:32<1:44:00,  8.43s/it][Succeeded / Failed / Skipped / Total] 99 / 150 / 11 / 260:  26%|██▌       | 261/1000 [36:40<1:43:49,  8.43s/it][Succeeded / Failed / Skipped / Total] 99 / 151 / 11 / 261:  26%|██▌       | 261/1000 [36:40<1:43:49,  8.43s/it][Succeeded / Failed / Skipped / Total] 99 / 151 / 11 / 261:  26%|██▌       | 262/1000 [36:41<1:43:22,  8.40s/it][Succeeded / Failed / Skipped / Total] 99 / 152 / 11 / 262:  26%|██▌       | 262/1000 [36:41<1:43:22,  8.40s/it][Succeeded / Failed / Skipped / Total] 99 / 152 / 11 / 262:  26%|██▋       | 263/1000 [36:49<1:43:10,  8.40s/it]Factory method that creates a default namespace . --> Factory method for testing purposes --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[moderately]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Sets the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public void setProxy ( String [[host]] , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void setProxy ( String [[horsewhipped]] , int [[paquette]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[horsewhipped]] , [[paquette]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[arises]] : headers . keySet ( ) ) { Object val = headers . get ( [[arises]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[arises]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Build a URI . --> Factory method for creating properties --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[olympic]] ( String [[taste]] , String [[unicycle]] ) { Validate . notEmpty ( [[taste]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[unicycle]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[bunnies]] = new HashMap < String , String > ( declaredNamespaces ) ; [[bunnies]] . put ( [[taste]] , [[unicycle]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[bunnies]] , properties , validating , "[[Inappropriate]]" == "[[Inappropriate]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Replies an HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[defaultURI]] . toURI ( ) , method , this . [[defaultContentType]] , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[stoicism]] ( String method , boolean hasBody , Closure [[hidey]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[abnormally]] . toURI ( ) , method , this . [[hlp]] , hasBody , [[hidey]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 260 ---------------------------------------------
Sets credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void basic ( String [[host]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String [[piddle]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[piddle]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 261 ---------------------------------------------
Set the header value . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[dodo]] ( String [[combatants]] , String [[drummer]] ) { Validate . notEmpty ( [[combatants]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[drummer]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 262 ---------------------------------------------
Sets the name of the name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[profusely]] ( String [[accused]] ) { Validate . notEmpty ( [[profusely]] , "Control name cannot be empty" ) ; this . controlName = [[profusely]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 152 / 11 / 263:  26%|██▋       | 263/1000 [36:49<1:43:10,  8.40s/it][Succeeded / Failed / Skipped / Total] 100 / 152 / 11 / 263:  26%|██▋       | 264/1000 [36:51<1:42:44,  8.38s/it][Succeeded / Failed / Skipped / Total] 101 / 152 / 11 / 264:  26%|██▋       | 264/1000 [36:51<1:42:44,  8.38s/it][Succeeded / Failed / Skipped / Total] 101 / 152 / 11 / 264:  26%|██▋       | 265/1000 [37:09<1:43:03,  8.41s/it][Succeeded / Failed / Skipped / Total] 102 / 152 / 11 / 265:  26%|██▋       | 265/1000 [37:09<1:43:03,  8.41s/it][Succeeded / Failed / Skipped / Total] 102 / 152 / 11 / 265:  27%|██▋       | 266/1000 [37:09<1:42:32,  8.38s/it][Succeeded / Failed / Skipped / Total] 103 / 152 / 11 / 266:  27%|██▋       | 266/1000 [37:09<1:42:32,  8.38s/it][Succeeded / Failed / Skipped / Total] 103 / 152 / 11 / 266:  27%|██▋       | 267/1000 [37:16<1:42:20,  8.38s/it][Succeeded / Failed / Skipped / Total] 104 / 152 / 11 / 267:  27%|██▋       | 267/1000 [37:16<1:42:20,  8.38s/it][Succeeded / Failed / Skipped / Total] 104 / 152 / 11 / 267:  27%|██▋       | 268/1000 [37:26<1:42:14,  8.38s/it][Succeeded / Failed / Skipped / Total] 105 / 152 / 11 / 268:  27%|██▋       | 268/1000 [37:26<1:42:14,  8.38s/it][Succeeded / Failed / Skipped / Total] 105 / 152 / 11 / 268:  27%|██▋       | 269/1000 [37:27<1:41:47,  8.35s/it][Succeeded / Failed / Skipped / Total] 105 / 153 / 11 / 269:  27%|██▋       | 269/1000 [37:27<1:41:47,  8.35s/it][Succeeded / Failed / Skipped / Total] 105 / 153 / 11 / 269:  27%|██▋       | 270/1000 [37:43<1:42:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 106 / 153 / 11 / 270:  27%|██▋       | 270/1000 [37:43<1:42:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 106 / 153 / 11 / 270:  27%|██▋       | 271/1000 [37:56<1:42:02,  8.40s/it]Reset authentication . --> Shut down the authentication --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[brassy]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Adds a header to the response . --> Adds response headers to response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[value]] ) { notNull ( name , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[backstab]] ) { notNull ( name , "Header name" ) ; notNull ( [[backstab]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[backstab]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[backstab]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Sets the credentials . --> Start a new scope --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String [[pass]] , String [[workstation]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , [[pass]] , [[workstation]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String [[gatorade]] , String [[mens]] , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , [[gatorade]] , [[mens]] , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 266 ---------------------------------------------
Handle a response . --> Handles a request . --> Socre: 1.0

[[[[Adv]]]]: public Response build ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response build ( ) { final int [[destroying]] = restAssuredResponse . statusCode ( ) ; if ( [[destroying]] < 100 || [[destroying]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[destroying]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Returns a Matcher that matches the given value . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[retrofit]] ( Matcher < ? super String > [[ijust]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[ijust]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[scrounger]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Creates a list of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[gaseous]] = new LinkedList < Header > ( ) ; [[gaseous]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[gaseous]] , additionalHeaders ) ; } return new Headers ( [[gaseous]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a string representation of the given domain . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[inappropriate]] ( Matcher < ? super String > [[birnbaum]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[birnbaum]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 154 / 11 / 271:  27%|██▋       | 271/1000 [37:56<1:42:02,  8.40s/it][Succeeded / Failed / Skipped / Total] 106 / 154 / 11 / 271:  27%|██▋       | 272/1000 [37:57<1:41:34,  8.37s/it][Succeeded / Failed / Skipped / Total] 107 / 154 / 11 / 272:  27%|██▋       | 272/1000 [37:57<1:41:34,  8.37s/it][Succeeded / Failed / Skipped / Total] 107 / 154 / 11 / 272:  27%|██▋       | 273/1000 [38:10<1:41:39,  8.39s/it][Succeeded / Failed / Skipped / Total] 107 / 155 / 11 / 273:  27%|██▋       | 273/1000 [38:10<1:41:39,  8.39s/it][Succeeded / Failed / Skipped / Total] 107 / 155 / 11 / 273:  27%|██▋       | 274/1000 [38:16<1:41:23,  8.38s/it][Succeeded / Failed / Skipped / Total] 108 / 155 / 11 / 274:  27%|██▋       | 274/1000 [38:16<1:41:23,  8.38s/it][Succeeded / Failed / Skipped / Total] 108 / 155 / 11 / 274:  28%|██▊       | 275/1000 [38:27<1:41:23,  8.39s/it][Succeeded / Failed / Skipped / Total] 108 / 156 / 11 / 275:  28%|██▊       | 275/1000 [38:27<1:41:23,  8.39s/it][Succeeded / Failed / Skipped / Total] 108 / 156 / 11 / 275:  28%|██▊       | 276/1000 [38:43<1:41:36,  8.42s/it][Succeeded / Failed / Skipped / Total] 108 / 157 / 11 / 276:  28%|██▊       | 276/1000 [38:43<1:41:36,  8.42s/it][Succeeded / Failed / Skipped / Total] 108 / 157 / 11 / 276:  28%|██▊       | 277/1000 [38:45<1:41:08,  8.39s/it][Succeeded / Failed / Skipped / Total] 109 / 157 / 11 / 277:  28%|██▊       | 277/1000 [38:45<1:41:08,  8.39s/it][Succeeded / Failed / Skipped / Total] 109 / 157 / 11 / 277:  28%|██▊       | 278/1000 [38:55<1:41:04,  8.40s/it][Succeeded / Failed / Skipped / Total] 109 / 158 / 11 / 278:  28%|██▊       | 278/1000 [38:55<1:41:04,  8.40s/it][Succeeded / Failed / Skipped / Total] 109 / 158 / 11 / 278:  28%|██▊       | 279/1000 [39:00<1:40:47,  8.39s/it][Succeeded / Failed / Skipped / Total] 110 / 158 / 11 / 279:  28%|██▊       | 279/1000 [39:00<1:40:47,  8.39s/it][Succeeded / Failed / Skipped / Total] 110 / 158 / 11 / 279:  28%|██▊       | 280/1000 [39:08<1:40:38,  8.39s/it][Succeeded / Failed / Skipped / Total] 111 / 158 / 11 / 280:  28%|██▊       | 280/1000 [39:08<1:40:38,  8.39s/it][Succeeded / Failed / Skipped / Total] 111 / 158 / 11 / 280:  28%|██▊       | 281/1000 [39:12<1:40:19,  8.37s/it]Returns a Matcher that can be used to wait for the given date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[vegetative]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Sets the http Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[anchor]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Gets a specific Cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[lollypop]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[lollypop]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[bandaging]] ( Matcher < ? super String > [[horoscope]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[horoscope]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a set of Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[subatomic]] ( Matcher < ? super Integer > [[barre]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[barre]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a specific version of the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[mewtwo]] ( Matcher < ? super Integer > [[yogesh]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[yogesh]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Sets the Matcher header . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[headerName]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[cial]] ( String [[clink]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[clink]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Sets the response header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[prophet]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Creates a new JsonParser . --> Create a new JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[amarillo]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 280 ---------------------------------------------
Creates a new JsonParser instance . --> Create a JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType [[bruto]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 281 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 159 / 11 / 281:  28%|██▊       | 281/1000 [39:12<1:40:19,  8.37s/it][Succeeded / Failed / Skipped / Total] 111 / 159 / 11 / 281:  28%|██▊       | 282/1000 [39:13<1:39:52,  8.35s/it][Succeeded / Failed / Skipped / Total] 111 / 160 / 11 / 282:  28%|██▊       | 282/1000 [39:13<1:39:52,  8.35s/it][Succeeded / Failed / Skipped / Total] 111 / 160 / 11 / 282:  28%|██▊       | 283/1000 [39:19<1:39:37,  8.34s/it][Succeeded / Failed / Skipped / Total] 112 / 160 / 11 / 283:  28%|██▊       | 283/1000 [39:19<1:39:37,  8.34s/it][Succeeded / Failed / Skipped / Total] 112 / 160 / 11 / 283:  28%|██▊       | 284/1000 [39:28<1:39:31,  8.34s/it][Succeeded / Failed / Skipped / Total] 113 / 160 / 11 / 284:  28%|██▊       | 284/1000 [39:28<1:39:31,  8.34s/it][Succeeded / Failed / Skipped / Total] 113 / 160 / 11 / 284:  28%|██▊       | 285/1000 [39:44<1:39:42,  8.37s/it][Succeeded / Failed / Skipped / Total] 114 / 160 / 11 / 285:  28%|██▊       | 285/1000 [39:44<1:39:42,  8.37s/it][Succeeded / Failed / Skipped / Total] 114 / 160 / 11 / 285:  29%|██▊       | 286/1000 [39:53<1:39:35,  8.37s/it][Succeeded / Failed / Skipped / Total] 115 / 160 / 11 / 286:  29%|██▊       | 286/1000 [39:53<1:39:35,  8.37s/it][Succeeded / Failed / Skipped / Total] 115 / 160 / 11 / 286:  29%|██▊       | 287/1000 [39:54<1:39:07,  8.34s/it][Succeeded / Failed / Skipped / Total] 116 / 160 / 11 / 287:  29%|██▊       | 287/1000 [39:54<1:39:07,  8.34s/it][Succeeded / Failed / Skipped / Total] 116 / 160 / 11 / 287:  29%|██▉       | 288/1000 [40:08<1:39:14,  8.36s/it][Succeeded / Failed / Skipped / Total] 117 / 160 / 11 / 288:  29%|██▉       | 288/1000 [40:08<1:39:14,  8.36s/it][Succeeded / Failed / Skipped / Total] 117 / 160 / 11 / 288:  29%|██▉       | 289/1000 [40:34<1:39:49,  8.42s/it][Succeeded / Failed / Skipped / Total] 118 / 160 / 11 / 289:  29%|██▉       | 289/1000 [40:34<1:39:49,  8.42s/it][Succeeded / Failed / Skipped / Total] 118 / 160 / 11 / 289:  29%|██▉       | 290/1000 [40:37<1:39:28,  8.41s/it][Succeeded / Failed / Skipped / Total] 118 / 161 / 11 / 290:  29%|██▉       | 290/1000 [40:37<1:39:28,  8.41s/it][Succeeded / Failed / Skipped / Total] 118 / 161 / 11 / 290:  29%|██▉       | 291/1000 [40:49<1:39:27,  8.42s/it]Create a new proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[maul]] ) { return new ProxySpecification ( [[maul]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the value of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[depeche]] ) { spec . cookie ( cookieName , [[depeche]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Construct a LogFactory --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[picture]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Returns a log log4j . --> Returns a new LogLogLogLog . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[arduous]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Create a new MultiPartitionPart . --> Create a new MultiPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[Agoraphobia]]" == "[[Agoraphobia]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Add attribute . --> Retrieves the number of prefixes . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object [[attributeValue]] ) { spec . attribute ( attributeName , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[acrobats]] ( String attributeName , Object [[screeches]] ) { spec . attribute ( attributeName , [[screeches]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Add header . --> Set key . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[jellybean]] ( String [[key]] , String headerValue ) { spec . header ( [[key]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Adds a handler to the handler . --> Sets the trip case . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( resultHandler , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... [[tripping]] ) { spec . resultHandlers ( resultHandler , [[tripping]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Creates a new HttpClient instance . --> Build HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[animosity]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . [[burroughs]] ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 290 ---------------------------------------------
Sets a http request parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[factions]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[festivals]] = new HashMap < String , Object > ( httpClientParams ) ; [[festivals]] . put ( parameterName , parameterValue ) ; return new [[factions]] ( httpClientFactory , [[festivals]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Biscotti]]" == "[[Biscotti]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 291 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 161 / 11 / 291:  29%|██▉       | 291/1000 [40:49<1:39:27,  8.42s/it][Succeeded / Failed / Skipped / Total] 119 / 161 / 11 / 291:  29%|██▉       | 292/1000 [40:53<1:39:09,  8.40s/it][Succeeded / Failed / Skipped / Total] 119 / 162 / 11 / 292:  29%|██▉       | 292/1000 [40:53<1:39:09,  8.40s/it][Succeeded / Failed / Skipped / Total] 119 / 162 / 11 / 292:  29%|██▉       | 293/1000 [41:04<1:39:06,  8.41s/it][Succeeded / Failed / Skipped / Total] 119 / 163 / 11 / 293:  29%|██▉       | 293/1000 [41:04<1:39:06,  8.41s/it][Succeeded / Failed / Skipped / Total] 119 / 163 / 11 / 293:  29%|██▉       | 294/1000 [41:14<1:39:01,  8.42s/it][Succeeded / Failed / Skipped / Total] 119 / 164 / 11 / 294:  29%|██▉       | 294/1000 [41:14<1:39:01,  8.42s/it][Succeeded / Failed / Skipped / Total] 119 / 164 / 11 / 294:  30%|██▉       | 295/1000 [41:15<1:38:35,  8.39s/it][Succeeded / Failed / Skipped / Total] 120 / 164 / 11 / 295:  30%|██▉       | 295/1000 [41:15<1:38:35,  8.39s/it][Succeeded / Failed / Skipped / Total] 120 / 164 / 11 / 295:  30%|██▉       | 296/1000 [41:18<1:38:14,  8.37s/it][Succeeded / Failed / Skipped / Total] 121 / 164 / 11 / 296:  30%|██▉       | 296/1000 [41:18<1:38:14,  8.37s/it][Succeeded / Failed / Skipped / Total] 121 / 164 / 11 / 296:  30%|██▉       | 297/1000 [41:25<1:38:03,  8.37s/it][Succeeded / Failed / Skipped / Total] 122 / 164 / 11 / 297:  30%|██▉       | 297/1000 [41:25<1:38:03,  8.37s/it][Succeeded / Failed / Skipped / Total] 122 / 164 / 11 / 297:  30%|██▉       | 298/1000 [41:43<1:38:18,  8.40s/it][Succeeded / Failed / Skipped / Total] 122 / 165 / 11 / 298:  30%|██▉       | 298/1000 [41:43<1:38:18,  8.40s/it][Succeeded / Failed / Skipped / Total] 122 / 165 / 11 / 298:  30%|██▉       | 299/1000 [41:46<1:37:56,  8.38s/it][Succeeded / Failed / Skipped / Total] 123 / 165 / 11 / 299:  30%|██▉       | 299/1000 [41:46<1:37:56,  8.38s/it][Succeeded / Failed / Skipped / Total] 123 / 165 / 11 / 299:  30%|███       | 300/1000 [41:49<1:37:34,  8.36s/it][Succeeded / Failed / Skipped / Total] 123 / 166 / 11 / 300:  30%|███       | 300/1000 [41:49<1:37:34,  8.36s/it][Succeeded / Failed / Skipped / Total] 123 / 166 / 11 / 300:  30%|███       | 301/1000 [41:50<1:37:09,  8.34s/it][Succeeded / Failed / Skipped / Total] 124 / 166 / 11 / 301:  30%|███       | 301/1000 [41:50<1:37:09,  8.34s/it][Succeeded / Failed / Skipped / Total] 124 / 166 / 11 / 301:  30%|███       | 302/1000 [42:01<1:37:07,  8.35s/it]Gets the HttpClientHttpClient . --> Creates a new HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[tihar]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
Method to create a HttpRequest --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[uri]] , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[lles]] , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 293 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[anisette]] ( String [[mcguire]] , String contentBody , String [[brahms]] ) { spec . multiPart ( [[mcguire]] , [[brahms]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 294 ---------------------------------------------
Create HttpClient instance . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Deedee]]" == "[[Deedee]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 295 ---------------------------------------------
Parses a JSON string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[strove]] > [[strove]] get ( String path ) { final JSONAssertion [[nervousness]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[strove]] ) [[nervousness]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Return a string representation of the integer . --> Convenience method to add a string to a string --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[hacksaw]] ( String [[catwalk]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 297 ---------------------------------------------
Returns a byte array . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[englander]] ( String [[hasnt]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Get float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float getFloat ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float getFloat ( String path ) { final Object [[thankfulness]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the path of the given shortest path . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[khyber]] ( String [[brood]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 300 ---------------------------------------------
Convert a Double to a Double --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String [[leather]] ) { final Object value = get ( [[leather]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Get the longest path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[sizzler]] ( String [[defrosting]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 166 / 11 / 302:  30%|███       | 302/1000 [42:01<1:37:07,  8.35s/it][Succeeded / Failed / Skipped / Total] 125 / 166 / 11 / 302:  30%|███       | 303/1000 [42:18<1:37:19,  8.38s/it][Succeeded / Failed / Skipped / Total] 126 / 166 / 11 / 303:  30%|███       | 303/1000 [42:18<1:37:19,  8.38s/it][Succeeded / Failed / Skipped / Total] 126 / 166 / 11 / 303:  30%|███       | 304/1000 [42:40<1:37:42,  8.42s/it][Succeeded / Failed / Skipped / Total] 126 / 167 / 11 / 304:  30%|███       | 304/1000 [42:40<1:37:42,  8.42s/it][Succeeded / Failed / Skipped / Total] 126 / 167 / 11 / 304:  30%|███       | 305/1000 [42:45<1:37:25,  8.41s/it][Succeeded / Failed / Skipped / Total] 126 / 168 / 11 / 305:  30%|███       | 305/1000 [42:45<1:37:25,  8.41s/it][Succeeded / Failed / Skipped / Total] 126 / 168 / 11 / 305:  31%|███       | 306/1000 [42:48<1:37:05,  8.39s/it][Succeeded / Failed / Skipped / Total] 126 / 169 / 11 / 306:  31%|███       | 306/1000 [42:48<1:37:05,  8.39s/it][Succeeded / Failed / Skipped / Total] 126 / 169 / 11 / 306:  31%|███       | 307/1000 [42:53<1:36:49,  8.38s/it][Succeeded / Failed / Skipped / Total] 126 / 170 / 11 / 307:  31%|███       | 307/1000 [42:53<1:36:49,  8.38s/it][Succeeded / Failed / Skipped / Total] 126 / 170 / 11 / 307:  31%|███       | 308/1000 [43:13<1:37:07,  8.42s/it][Succeeded / Failed / Skipped / Total] 127 / 170 / 11 / 308:  31%|███       | 308/1000 [43:13<1:37:07,  8.42s/it][Succeeded / Failed / Skipped / Total] 127 / 170 / 11 / 308:  31%|███       | 309/1000 [43:14<1:36:41,  8.40s/it][Succeeded / Failed / Skipped / Total] 127 / 171 / 11 / 309:  31%|███       | 309/1000 [43:14<1:36:41,  8.40s/it][Succeeded / Failed / Skipped / Total] 127 / 171 / 11 / 309:  31%|███       | 310/1000 [43:22<1:36:32,  8.40s/it][Succeeded / Failed / Skipped / Total] 128 / 171 / 11 / 310:  31%|███       | 310/1000 [43:22<1:36:32,  8.40s/it][Succeeded / Failed / Skipped / Total] 128 / 171 / 11 / 310:  31%|███       | 311/1000 [43:35<1:36:33,  8.41s/it][Succeeded / Failed / Skipped / Total] 128 / 172 / 11 / 311:  31%|███       | 311/1000 [43:35<1:36:33,  8.41s/it][Succeeded / Failed / Skipped / Total] 128 / 172 / 11 / 311:  31%|███       | 312/1000 [43:43<1:36:24,  8.41s/it]Sets the body . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[gurus]] , ObjectMapper mapper ) { spec . body ( [[gurus]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 303 ---------------------------------------------
Get the type of the given object . --> Gets the approval of the given type --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[barrister]] > [[barrister]] getObject ( String path , Class < [[barrister]] > objectType ) { Object [[strapped]] = getFromPath ( path , "[[Wenders]]" != "[[Wenders]]" ) ; return getObjectAsType ( [[strapped]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Add cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[wastin]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[wastin]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 305 ---------------------------------------------
Returns a map with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > [[manhandling]] ( String [[wigwam]] ) { return get ( [[wigwam]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 306 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[aigoo]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Get a list of generic type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[t]] : original ) { T [[e]] ; if ( [[t]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[ies]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T [[belongs]] : original ) { T [[landlord]] ; if ( [[belongs]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 308 ---------------------------------------------
Constructs a stream to filter stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[alleges]] ( PrintStream [[beards]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[beards]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 309 ---------------------------------------------
Add a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > [[blas]] ) { spec . param ( parameterName , [[blas]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 310 ---------------------------------------------
Set the update strategy . --> Create a new UpdateFragment --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[deteriorating]] ( UpdateStrategy [[externally]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[externally]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 311 ---------------------------------------------
Creates a list of Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[hania]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 312 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 173 / 11 / 312:  31%|███       | 312/1000 [43:43<1:36:24,  8.41s/it][Succeeded / Failed / Skipped / Total] 128 / 173 / 11 / 312:  31%|███▏      | 313/1000 [43:58<1:36:31,  8.43s/it][Succeeded / Failed / Skipped / Total] 128 / 174 / 11 / 313:  31%|███▏      | 313/1000 [43:58<1:36:31,  8.43s/it][Succeeded / Failed / Skipped / Total] 128 / 174 / 11 / 313:  31%|███▏      | 314/1000 [44:10<1:36:30,  8.44s/it][Succeeded / Failed / Skipped / Total] 128 / 175 / 11 / 314:  31%|███▏      | 314/1000 [44:10<1:36:30,  8.44s/it][Succeeded / Failed / Skipped / Total] 128 / 175 / 11 / 314:  32%|███▏      | 315/1000 [44:20<1:36:25,  8.45s/it][Succeeded / Failed / Skipped / Total] 128 / 176 / 11 / 315:  32%|███▏      | 315/1000 [44:20<1:36:25,  8.45s/it][Succeeded / Failed / Skipped / Total] 128 / 176 / 11 / 315:  32%|███▏      | 316/1000 [44:20<1:35:58,  8.42s/it][Succeeded / Failed / Skipped / Total] 128 / 177 / 11 / 316:  32%|███▏      | 316/1000 [44:20<1:35:58,  8.42s/it][Succeeded / Failed / Skipped / Total] 128 / 177 / 11 / 316:  32%|███▏      | 317/1000 [45:00<1:36:57,  8.52s/it][Succeeded / Failed / Skipped / Total] 128 / 178 / 11 / 317:  32%|███▏      | 317/1000 [45:00<1:36:57,  8.52s/it][Succeeded / Failed / Skipped / Total] 128 / 178 / 11 / 317:  32%|███▏      | 318/1000 [45:18<1:37:10,  8.55s/it][Succeeded / Failed / Skipped / Total] 128 / 179 / 11 / 318:  32%|███▏      | 318/1000 [45:18<1:37:10,  8.55s/it][Succeeded / Failed / Skipped / Total] 128 / 179 / 11 / 318:  32%|███▏      | 319/1000 [45:28<1:37:03,  8.55s/it][Succeeded / Failed / Skipped / Total] 128 / 180 / 11 / 319:  32%|███▏      | 319/1000 [45:28<1:37:03,  8.55s/it][Succeeded / Failed / Skipped / Total] 128 / 180 / 11 / 319:  32%|███▏      | 320/1000 [45:33<1:36:48,  8.54s/it]Store the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[mckay]] ( ) { for ( Binding < ? > [[bonilla]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[bonilla]] . getKey ( ) . getTypeLiteral ( ) , [[bonilla]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Removes the source key from the source map . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[fronted]] ( Set < KeyAndSource > [[heartening]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[heartening]] ) { Multiset < Object > [[precarious]] = backingMap . get ( keyAndSource . key ) ; if ( [[precarious]] != null ) { [[precarious]] . remove ( keyAndSource . source ) ; if ( [[precarious]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 314 ---------------------------------------------
Introspects the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[tinhorn]] ( Key < T > [[hehe]] , Errors [[survive]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Gets the dependency . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[awk]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Removes a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[consonants]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Create a type from the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[implementedBy]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy [[grapevines]] = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Analyze the Injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[mitty]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[mitty]] ) ; [[mitty]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[mitty]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
Specifies the supplied parameters . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[convincing]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[reproach]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 320 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 181 / 11 / 320:  32%|███▏      | 320/1000 [45:33<1:36:48,  8.54s/it][Succeeded / Failed / Skipped / Total] 128 / 181 / 11 / 320:  32%|███▏      | 321/1000 [45:51<1:37:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 129 / 181 / 11 / 321:  32%|███▏      | 321/1000 [45:51<1:37:00,  8.57s/it][Succeeded / Failed / Skipped / Total] 129 / 181 / 11 / 321:  32%|███▏      | 322/1000 [46:04<1:37:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 129 / 182 / 11 / 322:  32%|███▏      | 322/1000 [46:04<1:37:00,  8.58s/it][Succeeded / Failed / Skipped / Total] 129 / 182 / 11 / 322:  32%|███▏      | 323/1000 [46:05<1:36:37,  8.56s/it][Succeeded / Failed / Skipped / Total] 130 / 182 / 11 / 323:  32%|███▏      | 323/1000 [46:05<1:36:37,  8.56s/it][Succeeded / Failed / Skipped / Total] 130 / 182 / 11 / 323:  32%|███▏      | 324/1000 [46:08<1:36:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 130 / 183 / 11 / 324:  32%|███▏      | 324/1000 [46:08<1:36:16,  8.55s/it][Succeeded / Failed / Skipped / Total] 130 / 183 / 11 / 324:  32%|███▎      | 325/1000 [46:35<1:36:46,  8.60s/it][Succeeded / Failed / Skipped / Total] 131 / 183 / 11 / 325:  32%|███▎      | 325/1000 [46:35<1:36:46,  8.60s/it][Succeeded / Failed / Skipped / Total] 131 / 183 / 11 / 325:  33%|███▎      | 326/1000 [46:37<1:36:24,  8.58s/it][Succeeded / Failed / Skipped / Total] 131 / 184 / 11 / 326:  33%|███▎      | 326/1000 [46:37<1:36:24,  8.58s/it][Succeeded / Failed / Skipped / Total] 131 / 184 / 11 / 326:  33%|███▎      | 327/1000 [46:47<1:36:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 131 / 185 / 11 / 327:  33%|███▎      | 327/1000 [46:47<1:36:18,  8.59s/it][Succeeded / Failed / Skipped / Total] 131 / 185 / 11 / 327:  33%|███▎      | 328/1000 [46:54<1:36:06,  8.58s/it]Returns a set of depreces . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > [[encountered]] ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[encountered]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > [[stradivarius]] ) { boolean bindingFailed = "[[Marty]]" != "[[Marty]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[stradivarius]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 321 ---------------------------------------------
Helper method to create a new bindLogger instance . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl [[injector]] ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[assholes]] ( InjectorImpl [[bookworms]] ) { Key < Logger > [[snodgrass]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[bookworms]] . state . putBinding ( [[snodgrass]] , new ProviderInstanceBindingImpl < Logger > ( [[bookworms]] , [[snodgrass]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
Check if a method is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[transitional]] ( Method a , Method [[cicadas]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 323 ---------------------------------------------
Set the delegate . --> A convenience method for a given example --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[selam]] ( MembersInjector < T > [[easterbrook]] ) { checkState ( this . [[colleague]] == null , "delegate already initialized" ) ; this . [[colleague]] = checkNotNull ( [[easterbrook]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Return the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[baguette]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 325 ---------------------------------------------
Indicates that the supplied internal builder . --> Replies if a non - null non - null non equally --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[maldonado]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 326 ---------------------------------------------
Checks if the given annotation is present . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors [[errors]] ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( [[errors]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member member , Errors [[competitiveness]] ) { Annotation [[broadcaster]] = Annotations . findBindingAnnotation ( [[competitiveness]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[broadcaster]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 327 ---------------------------------------------
Resolve a type . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[t]] = 0 ; [[t]] < types . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( types [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[checkin]] = 0 ; [[checkin]] < types . length ; [[checkin]] ++ ) { result [ [[checkin]] ] = resolve ( types [ [[checkin]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 186 / 11 / 328:  33%|███▎      | 328/1000 [46:54<1:36:06,  8.58s/it][Succeeded / Failed / Skipped / Total] 131 / 186 / 11 / 328:  33%|███▎      | 329/1000 [47:08<1:36:08,  8.60s/it][Succeeded / Failed / Skipped / Total] 132 / 186 / 11 / 329:  33%|███▎      | 329/1000 [47:08<1:36:08,  8.60s/it][Succeeded / Failed / Skipped / Total] 132 / 186 / 11 / 329:  33%|███▎      | 330/1000 [47:10<1:35:47,  8.58s/it][Succeeded / Failed / Skipped / Total] 132 / 187 / 11 / 330:  33%|███▎      | 330/1000 [47:10<1:35:47,  8.58s/it][Succeeded / Failed / Skipped / Total] 132 / 187 / 11 / 330:  33%|███▎      | 331/1000 [47:12<1:35:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 132 / 188 / 11 / 331:  33%|███▎      | 331/1000 [47:12<1:35:25,  8.56s/it][Succeeded / Failed / Skipped / Total] 132 / 188 / 11 / 331:  33%|███▎      | 332/1000 [47:22<1:35:18,  8.56s/it][Succeeded / Failed / Skipped / Total] 133 / 188 / 11 / 332:  33%|███▎      | 332/1000 [47:22<1:35:18,  8.56s/it][Succeeded / Failed / Skipped / Total] 133 / 188 / 11 / 332:  33%|███▎      | 333/1000 [47:26<1:35:01,  8.55s/it][Succeeded / Failed / Skipped / Total] 133 / 189 / 11 / 333:  33%|███▎      | 333/1000 [47:26<1:35:01,  8.55s/it][Succeeded / Failed / Skipped / Total] 133 / 189 / 11 / 333:  33%|███▎      | 334/1000 [47:36<1:34:55,  8.55s/it][Succeeded / Failed / Skipped / Total] 134 / 189 / 11 / 334:  33%|███▎      | 334/1000 [47:36<1:34:55,  8.55s/it][Succeeded / Failed / Skipped / Total] 134 / 189 / 11 / 334:  34%|███▎      | 335/1000 [47:41<1:34:39,  8.54s/it][Succeeded / Failed / Skipped / Total] 135 / 189 / 11 / 335:  34%|███▎      | 335/1000 [47:41<1:34:39,  8.54s/it][Succeeded / Failed / Skipped / Total] 135 / 189 / 11 / 335:  34%|███▎      | 336/1000 [47:53<1:34:38,  8.55s/it]Gets the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[aigoo]] ) { Type type = [[aigoo]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[aigoo]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[aigoo]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
Tries to load the class . --> Instantiate a class --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[kaddish]] ( ClassLoader [[aix]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[aix]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 330 ---------------------------------------------
Returns the class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader [[magpie]] ) { return [[magpie]] != null ? [[magpie]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 331 ---------------------------------------------
Returns the key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[futuristic]] ) { return [[futuristic]] . getAnnotation ( ) == null ? [[futuristic]] : Key . get ( [[futuristic]] . getTypeLiteral ( ) , [[futuristic]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Validates validation errors . --> Validate errors --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[blazed]] : pendingInjections ) { try { [[blazed]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 333 ---------------------------------------------
Helper method to create a binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[advantages]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 334 ---------------------------------------------
Set the constructor . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[hanne]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "[[Contested]]" == "[[Contested]]" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 335 ---------------------------------------------
Static factory method for creating a scope --> Helper method to create a scope --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object [[source]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object [[bellyache]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
[Succeeded / Failed / Skipped / Total] 136 / 189 / 11 / 336:  34%|███▎      | 336/1000 [47:53<1:34:38,  8.55s/it][Succeeded / Failed / Skipped / Total] 136 / 189 / 11 / 336:  34%|███▎      | 337/1000 [48:02<1:34:30,  8.55s/it][Succeeded / Failed / Skipped / Total] 136 / 190 / 11 / 337:  34%|███▎      | 337/1000 [48:02<1:34:30,  8.55s/it][Succeeded / Failed / Skipped / Total] 136 / 190 / 11 / 337:  34%|███▍      | 338/1000 [48:21<1:34:42,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 191 / 11 / 338:  34%|███▍      | 338/1000 [48:21<1:34:42,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 191 / 11 / 338:  34%|███▍      | 339/1000 [48:23<1:34:20,  8.56s/it][Succeeded / Failed / Skipped / Total] 136 / 192 / 11 / 339:  34%|███▍      | 339/1000 [48:23<1:34:20,  8.56s/it][Succeeded / Failed / Skipped / Total] 136 / 192 / 11 / 339:  34%|███▍      | 340/1000 [48:24<1:33:58,  8.54s/it][Succeeded / Failed / Skipped / Total] 136 / 193 / 11 / 340:  34%|███▍      | 340/1000 [48:24<1:33:58,  8.54s/it][Succeeded / Failed / Skipped / Total] 136 / 193 / 11 / 340:  34%|███▍      | 341/1000 [48:44<1:34:12,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 194 / 11 / 341:  34%|███▍      | 341/1000 [48:44<1:34:12,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 194 / 11 / 341:  34%|███▍      | 342/1000 [49:03<1:34:23,  8.61s/it]--------------------------------------------- Result 336 ---------------------------------------------
Returns the scope for the given scope . --> Static factory method for testing --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[ilf]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[handout]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[handout]] != null ) { return forInstance ( [[handout]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 337 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[arks]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Returns the path of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[donit]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Return true if the given public type is a public constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[criticism]] ) { if ( ! Modifier . isPublic ( [[criticism]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[watchtowers]] ; if ( [[criticism]] instanceof Constructor ) { [[watchtowers]] = ( ( Constructor ) [[criticism]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[criticism]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[watchtowers]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[watchtowers]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 340 ---------------------------------------------
A convenience function to create a ServletRequest . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[blunted]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 341 ---------------------------------------------
Replies if the given annotation type is present . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[colliding]] ( Class < ? extends Annotation > [[acutely]] ) { Retention [[sakuma]] = [[acutely]] . getAnnotation ( Retention . class ) ; return [[sakuma]] != null && [[sakuma]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 195 / 11 / 342:  34%|███▍      | 342/1000 [49:03<1:34:23,  8.61s/it][Succeeded / Failed / Skipped / Total] 136 / 195 / 11 / 342:  34%|███▍      | 343/1000 [49:12<1:34:14,  8.61s/it][Succeeded / Failed / Skipped / Total] 136 / 196 / 11 / 343:  34%|███▍      | 343/1000 [49:12<1:34:14,  8.61s/it][Succeeded / Failed / Skipped / Total] 136 / 196 / 11 / 343:  34%|███▍      | 344/1000 [49:16<1:33:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 136 / 197 / 11 / 344:  34%|███▍      | 344/1000 [49:16<1:33:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 136 / 197 / 11 / 344:  34%|███▍      | 345/1000 [49:21<1:33:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 198 / 11 / 345:  34%|███▍      | 345/1000 [49:21<1:33:43,  8.58s/it][Succeeded / Failed / Skipped / Total] 136 / 198 / 11 / 345:  35%|███▍      | 346/1000 [49:39<1:33:51,  8.61s/it][Succeeded / Failed / Skipped / Total] 136 / 199 / 11 / 346:  35%|███▍      | 346/1000 [49:39<1:33:51,  8.61s/it][Succeeded / Failed / Skipped / Total] 136 / 199 / 11 / 346:  35%|███▍      | 347/1000 [49:43<1:33:35,  8.60s/it][Succeeded / Failed / Skipped / Total] 136 / 200 / 11 / 347:  35%|███▍      | 347/1000 [49:43<1:33:35,  8.60s/it][Succeeded / Failed / Skipped / Total] 136 / 200 / 11 / 347:  35%|███▍      | 348/1000 [50:01<1:33:42,  8.62s/it][Succeeded / Failed / Skipped / Total] 136 / 201 / 11 / 348:  35%|███▍      | 348/1000 [50:01<1:33:42,  8.62s/it][Succeeded / Failed / Skipped / Total] 136 / 201 / 11 / 348:  35%|███▍      | 349/1000 [50:23<1:33:59,  8.66s/it]Finds the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[annotationType]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[annotationType]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[annotationType]] ) ; } else { found = [[annotationType]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[excessive]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[excessive]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[excessive]] ) ; } else { found = [[excessive]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Sets the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[bylaw]] ( Provider < T > [[klove]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[klove]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Get annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[annotationType]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[hardships]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[hardships]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 345 ---------------------------------------------
Register a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[slugging]] ( Binder [[nabbing]] ) { [[nabbing]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Find the description of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors [[apothecary]] ) throws ErrorsException { int numErrorsBefore = [[apothecary]] . size ( ) ; Annotation found = findBindingAnnotation ( [[apothecary]] , member , annotations ) ; [[apothecary]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 347 ---------------------------------------------
Create a constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[approving]] ( InjectionPoint [[locality]] , Errors errors ) throws ErrorsException { return cache . get ( [[locality]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Create a key binding . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[evoking]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[watters]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[evoking]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[evoking]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[watters]] ) ) ; return [[watters]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 202 / 11 / 349:  35%|███▍      | 349/1000 [50:23<1:33:59,  8.66s/it][Succeeded / Failed / Skipped / Total] 136 / 202 / 11 / 349:  35%|███▌      | 350/1000 [50:29<1:33:46,  8.66s/it][Succeeded / Failed / Skipped / Total] 137 / 202 / 11 / 350:  35%|███▌      | 350/1000 [50:29<1:33:46,  8.66s/it][Succeeded / Failed / Skipped / Total] 137 / 202 / 11 / 350:  35%|███▌      | 351/1000 [50:36<1:33:33,  8.65s/it][Succeeded / Failed / Skipped / Total] 137 / 203 / 11 / 351:  35%|███▌      | 351/1000 [50:36<1:33:33,  8.65s/it][Succeeded / Failed / Skipped / Total] 137 / 203 / 11 / 351:  35%|███▌      | 352/1000 [50:37<1:33:12,  8.63s/it][Succeeded / Failed / Skipped / Total] 137 / 204 / 11 / 352:  35%|███▌      | 352/1000 [50:37<1:33:12,  8.63s/it][Succeeded / Failed / Skipped / Total] 137 / 204 / 11 / 352:  35%|███▌      | 353/1000 [50:37<1:32:48,  8.61s/it][Succeeded / Failed / Skipped / Total] 137 / 205 / 11 / 353:  35%|███▌      | 353/1000 [50:37<1:32:48,  8.61s/it][Succeeded / Failed / Skipped / Total] 137 / 205 / 11 / 353:  35%|███▌      | 354/1000 [50:51<1:32:49,  8.62s/it][Succeeded / Failed / Skipped / Total] 137 / 206 / 11 / 354:  35%|███▌      | 354/1000 [50:51<1:32:49,  8.62s/it][Succeeded / Failed / Skipped / Total] 137 / 206 / 11 / 354:  36%|███▌      | 355/1000 [51:25<1:33:26,  8.69s/it][Succeeded / Failed / Skipped / Total] 138 / 206 / 11 / 355:  36%|███▌      | 355/1000 [51:25<1:33:26,  8.69s/it][Succeeded / Failed / Skipped / Total] 138 / 206 / 11 / 355:  36%|███▌      | 356/1000 [51:29<1:33:09,  8.68s/it]Bind a binder to the binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < [[K]] > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[bureaus]] , V > RealMapBinder < [[bureaus]] , V > newRealMapBinder ( Binder [[detectives]] , TypeLiteral < [[bureaus]] > keyType , Key < V > valueTypeAndAnnotation ) { [[detectives]] = [[detectives]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[detectives]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[detectives]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 350 ---------------------------------------------
Returns a module . --> Removes all ModuleModuleModule --> Socre: 1.0

[[[[Adv]]]]: static Module forModule ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module forModule ( Module [[stavanger]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 351 ---------------------------------------------
Returns true if the given class is a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[whitewalls]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[Polished]]" == "[[Polished]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 352 ---------------------------------------------
Converts a string to an array of strings . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < [[sourcesAsStrings]] . length ; [[i]] ++ ) { [[sourcesAsStrings]] [ [[i]] ] = Errors . convert ( [[sourcesAsStrings]] [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[distorted]] = sources . toArray ( ) ; for ( int [[vim]] = 0 ; [[vim]] < [[distorted]] . length ; [[vim]] ++ ) { [[distorted]] [ [[vim]] ] = Errors . convert ( [[distorted]] [ [[vim]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[distorted]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Returns a collection of methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[fbi]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 354 ---------------------------------------------
Returns a new instance of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[parameters]] ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[dawdle]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[intensive]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[intensive]] ) ; [[dawdle]] . setProxyDelegates ( t ) ; } finally { [[dawdle]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Gets the constructors for the given key . --> Build a list of key - value pairs --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > [[paramList]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[accumulator]] , List < Key < ? > > [[extravaganza]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[accumulator]] ) ; Annotation [ ] [ ] paramAnnotations = [[accumulator]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[accumulator]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 207 / 11 / 356:  36%|███▌      | 356/1000 [51:29<1:33:09,  8.68s/it][Succeeded / Failed / Skipped / Total] 138 / 207 / 11 / 356:  36%|███▌      | 357/1000 [51:41<1:33:05,  8.69s/it][Succeeded / Failed / Skipped / Total] 139 / 207 / 11 / 357:  36%|███▌      | 357/1000 [51:41<1:33:05,  8.69s/it][Succeeded / Failed / Skipped / Total] 139 / 207 / 11 / 357:  36%|███▌      | 358/1000 [52:13<1:33:40,  8.75s/it][Succeeded / Failed / Skipped / Total] 139 / 208 / 11 / 358:  36%|███▌      | 358/1000 [52:13<1:33:40,  8.75s/it][Succeeded / Failed / Skipped / Total] 139 / 208 / 11 / 358:  36%|███▌      | 359/1000 [52:18<1:33:23,  8.74s/it][Succeeded / Failed / Skipped / Total] 139 / 209 / 11 / 359:  36%|███▌      | 359/1000 [52:18<1:33:23,  8.74s/it][Succeeded / Failed / Skipped / Total] 139 / 209 / 11 / 359:  36%|███▌      | 360/1000 [52:27<1:33:15,  8.74s/it][Succeeded / Failed / Skipped / Total] 140 / 209 / 11 / 360:  36%|███▌      | 360/1000 [52:27<1:33:15,  8.74s/it][Succeeded / Failed / Skipped / Total] 140 / 209 / 11 / 360:  36%|███▌      | 361/1000 [52:28<1:32:53,  8.72s/it][Succeeded / Failed / Skipped / Total] 140 / 210 / 11 / 361:  36%|███▌      | 361/1000 [52:28<1:32:53,  8.72s/it][Succeeded / Failed / Skipped / Total] 140 / 210 / 11 / 361:  36%|███▌      | 362/1000 [52:29<1:32:31,  8.70s/it][Succeeded / Failed / Skipped / Total] 140 / 211 / 11 / 362:  36%|███▌      | 362/1000 [52:29<1:32:31,  8.70s/it][Succeeded / Failed / Skipped / Total] 140 / 211 / 11 / 362:  36%|███▋      | 363/1000 [52:39<1:32:23,  8.70s/it]Returns the set of variables for the given set . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[snipped]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[altered]] = ImmutableSet . builder ( ) ; [[altered]] . addAll ( [[snipped]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[altered]] . addAll ( ip . getDependencies ( ) ) ; } } return [[altered]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Returns all the dependency types of the given type . --> Returns a list of set of dependeds --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[blalock]] ) { ImmutableSet . Builder < Dependency < ? > > [[olympians]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[blalock]] ) { Class < ? > [[winkler]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[winkler]] == null || ! [[winkler]] . equals ( Assisted . class ) ) { [[olympians]] . add ( dep ) ; } } return [[olympians]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 358 ---------------------------------------------
Replies the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[kero]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[kero]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 359 ---------------------------------------------
Checks if the given message is a valid type . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[ce]] ) { Collection < Message > messages = [[ce]] . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[ensued]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[ltaly]] ) { Collection < Message > messages = [[ltaly]] . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 360 ---------------------------------------------
Generates a StringBuilder for the given key . --> Construct a new call with the given key . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[apu]] = new StringBuilder ( ) ; [[apu]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 361 ---------------------------------------------
Invoke a method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object invoke ( Object [[proxy]] , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object [[dede]] , final Method [[defensively]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 362 ---------------------------------------------
Returns true if the given dependency exists . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[frogman]] ( Set < Dependency < ? > > [[pedestrian]] , Class < ? > [[smokers]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[settin]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 363 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 212 / 11 / 363:  36%|███▋      | 363/1000 [52:39<1:32:23,  8.70s/it][Succeeded / Failed / Skipped / Total] 140 / 212 / 11 / 363:  36%|███▋      | 364/1000 [52:57<1:32:32,  8.73s/it][Succeeded / Failed / Skipped / Total] 141 / 212 / 11 / 364:  36%|███▋      | 364/1000 [52:57<1:32:32,  8.73s/it][Succeeded / Failed / Skipped / Total] 141 / 212 / 11 / 364:  36%|███▋      | 365/1000 [53:03<1:32:18,  8.72s/it][Succeeded / Failed / Skipped / Total] 141 / 213 / 11 / 365:  36%|███▋      | 365/1000 [53:03<1:32:18,  8.72s/it][Succeeded / Failed / Skipped / Total] 141 / 213 / 11 / 365:  37%|███▋      | 366/1000 [53:03<1:31:55,  8.70s/it][Succeeded / Failed / Skipped / Total] 141 / 214 / 11 / 366:  37%|███▋      | 366/1000 [53:03<1:31:55,  8.70s/it][Succeeded / Failed / Skipped / Total] 141 / 214 / 11 / 366:  37%|███▋      | 367/1000 [53:12<1:31:46,  8.70s/it][Succeeded / Failed / Skipped / Total] 142 / 214 / 11 / 367:  37%|███▋      | 367/1000 [53:12<1:31:46,  8.70s/it][Succeeded / Failed / Skipped / Total] 142 / 214 / 11 / 367:  37%|███▋      | 368/1000 [53:17<1:31:31,  8.69s/it][Succeeded / Failed / Skipped / Total] 143 / 214 / 11 / 368:  37%|███▋      | 368/1000 [53:17<1:31:31,  8.69s/it][Succeeded / Failed / Skipped / Total] 143 / 214 / 11 / 368:  37%|███▋      | 369/1000 [53:23<1:31:17,  8.68s/it][Succeeded / Failed / Skipped / Total] 143 / 215 / 11 / 369:  37%|███▋      | 369/1000 [53:23<1:31:17,  8.68s/it][Succeeded / Failed / Skipped / Total] 143 / 215 / 11 / 369:  37%|███▋      | 370/1000 [53:44<1:31:30,  8.72s/it][Succeeded / Failed / Skipped / Total] 143 / 216 / 11 / 370:  37%|███▋      | 370/1000 [53:44<1:31:30,  8.72s/it][Succeeded / Failed / Skipped / Total] 143 / 216 / 11 / 370:  37%|███▋      | 371/1000 [53:47<1:31:12,  8.70s/it][Succeeded / Failed / Skipped / Total] 143 / 217 / 11 / 371:  37%|███▋      | 371/1000 [53:47<1:31:12,  8.70s/it][Succeeded / Failed / Skipped / Total] 143 / 217 / 11 / 371:  37%|███▋      | 372/1000 [54:00<1:31:11,  8.71s/it]Get the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[bunn]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Determines if a constructor is a boolean . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[grimm]] ( Constructor [[treads]] ) { return [[treads]] . isAnnotationPresent ( Inject . class ) || [[treads]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Looks for a request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[monies]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[crys]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[crys]] != null ) { return [[crys]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 366 ---------------------------------------------
Return a set of builders for the given set . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > [[fluctuate]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[fluctuate]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Creates a new keyed . --> Creates a new multi - fixer --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > [[key]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , [[key]] ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[grasses]] ( Binder binder , Key < T > [[armaments]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , [[armaments]] ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 368 ---------------------------------------------
Matches a module . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[galleon]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[Easterly]]" != "[[Easterly]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 369 ---------------------------------------------
Gets the membership . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member [[carino]] ) { Preconditions . checkArgument ( type == [[carino]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[carino]] , [[carino]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[carino]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Initialize the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[aneurysm]] ( Errors [[skillet]] ) { injector . lookups = injector ; new LookupProcessor ( [[skillet]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Wrap a callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[xiaowei]] ) { return wrap ( [[xiaowei]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 218 / 11 / 372:  37%|███▋      | 372/1000 [54:00<1:31:11,  8.71s/it][Succeeded / Failed / Skipped / Total] 143 / 218 / 11 / 372:  37%|███▋      | 373/1000 [54:15<1:31:12,  8.73s/it][Succeeded / Failed / Skipped / Total] 143 / 219 / 11 / 373:  37%|███▋      | 373/1000 [54:15<1:31:12,  8.73s/it][Succeeded / Failed / Skipped / Total] 143 / 219 / 11 / 373:  37%|███▋      | 374/1000 [54:35<1:31:22,  8.76s/it][Succeeded / Failed / Skipped / Total] 143 / 220 / 11 / 374:  37%|███▋      | 374/1000 [54:35<1:31:22,  8.76s/it][Succeeded / Failed / Skipped / Total] 143 / 220 / 11 / 374:  38%|███▊      | 375/1000 [55:10<1:31:57,  8.83s/it][Succeeded / Failed / Skipped / Total] 143 / 221 / 11 / 375:  38%|███▊      | 375/1000 [55:10<1:31:57,  8.83s/it][Succeeded / Failed / Skipped / Total] 143 / 221 / 11 / 375:  38%|███▊      | 376/1000 [55:14<1:31:41,  8.82s/it][Succeeded / Failed / Skipped / Total] 143 / 222 / 11 / 376:  38%|███▊      | 376/1000 [55:14<1:31:41,  8.82s/it][Succeeded / Failed / Skipped / Total] 143 / 222 / 11 / 376:  38%|███▊      | 377/1000 [55:17<1:31:22,  8.80s/it][Succeeded / Failed / Skipped / Total] 143 / 223 / 11 / 377:  38%|███▊      | 377/1000 [55:17<1:31:22,  8.80s/it][Succeeded / Failed / Skipped / Total] 143 / 223 / 11 / 377:  38%|███▊      | 378/1000 [55:31<1:31:21,  8.81s/it]Perform a callable function . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , continueRequest ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[disheartened]] , Map < Key < ? > , Object > [[evo]] ) { return wrap ( [[disheartened]] , continueRequest ( [[evo]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Get the annotation for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[annotationClass]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[annotationClass]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[reanimation]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[reanimation]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Gets the value of an object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[osmond]] ( Key < ? > [[morita]] , Object [[profusion]] ) { if ( [[profusion]] == null || [[profusion]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[morita]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[profusion]] ) ) { throw new IllegalArgumentException ( "Value[" + [[profusion]] + "] of type[" + [[profusion]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[morita]] + "]" ) ; } return [[profusion]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Create a new annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > type , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( type , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[density]] ( Class < T > type , AnnotationStrategy [[aishwarya]] ) { return new Key < T > ( type , [[aishwarya]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a set of fields that are declared in the given set . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[errorsForMember]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , [[errorsForMember]] ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , [[errorsForMember]] ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors [[addicts]] = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[concurrent]] , injectionPoint , [[addicts]] ) : new SingleMethodInjector ( this . [[concurrent]] , injectionPoint , [[addicts]] ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 377 ---------------------------------------------
Creates a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[lambchop]] ( Annotation [[mansur]] ) { checkNotNull ( [[mansur]] , "annotation" ) ; Class < ? extends Annotation > [[interject]] = [[mansur]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[interject]] ) ; ensureIsBindingAnnotation ( [[interject]] ) ; if ( Annotations . isMarker ( [[interject]] ) ) { return new AnnotationTypeStrategy ( [[interject]] , [[mansur]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[mansur]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 224 / 11 / 378:  38%|███▊      | 378/1000 [55:31<1:31:21,  8.81s/it][Succeeded / Failed / Skipped / Total] 143 / 224 / 11 / 378:  38%|███▊      | 379/1000 [55:39<1:31:11,  8.81s/it][Succeeded / Failed / Skipped / Total] 143 / 225 / 11 / 379:  38%|███▊      | 379/1000 [55:39<1:31:11,  8.81s/it][Succeeded / Failed / Skipped / Total] 143 / 225 / 11 / 379:  38%|███▊      | 380/1000 [56:10<1:31:38,  8.87s/it][Succeeded / Failed / Skipped / Total] 143 / 226 / 11 / 380:  38%|███▊      | 380/1000 [56:10<1:31:38,  8.87s/it][Succeeded / Failed / Skipped / Total] 143 / 226 / 11 / 380:  38%|███▊      | 381/1000 [56:19<1:31:30,  8.87s/it][Succeeded / Failed / Skipped / Total] 143 / 227 / 11 / 381:  38%|███▊      | 381/1000 [56:19<1:31:30,  8.87s/it][Succeeded / Failed / Skipped / Total] 143 / 227 / 11 / 381:  38%|███▊      | 382/1000 [56:36<1:31:34,  8.89s/it][Succeeded / Failed / Skipped / Total] 144 / 227 / 11 / 382:  38%|███▊      | 382/1000 [56:36<1:31:34,  8.89s/it][Succeeded / Failed / Skipped / Total] 144 / 227 / 11 / 382:  38%|███▊      | 383/1000 [56:51<1:31:36,  8.91s/it]Returns the type of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[breathable]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 379 ---------------------------------------------
Gets the annotation type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[bango]] ( Class < ? extends Annotation > [[mantis]] ) { [[mantis]] = Annotations . canonicalizeIfNamed ( [[mantis]] ) ; if ( isAllDefaultMethods ( [[mantis]] ) ) { return [[bango]] ( generateAnnotation ( [[mantis]] ) ) ; } checkNotNull ( [[mantis]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[mantis]] ) ; ensureIsBindingAnnotation ( [[mantis]] ) ; return new AnnotationTypeStrategy ( [[mantis]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
Builds a set of classes . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[binding]] : typeListenerBindings ) { TypeListener typeListener = [[binding]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[binding]] . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[encounter]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[binding]] , type , e ) ; } } } [[encounter]] . invalidate ( ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return new MembersInjectorImpl < T > ( injector , type , [[encounter]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[figment]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int [[brewster]] = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( [[brewster]] ) ; EncounterImpl < T > [[sex]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[crore]] : typeListenerBindings ) { TypeListener typeListener = [[crore]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[crore]] . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[sex]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[crore]] , type , e ) ; } } } [[sex]] . invalidate ( ) ; errors . throwIfNewErrors ( [[brewster]] ) ; return new MembersInjectorImpl < T > ( injector , type , [[sex]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 381 ---------------------------------------------
Create a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String [[messageFormat]] , Object ... [[arguments]] ) { return create ( null , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String [[celebrating]] , Object ... [[debtor]] ) { return create ( null , [[celebrating]] , [[debtor]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Runs the stack trace . --> Prettty print a routine --> Socre: 1.0

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } [[t]] . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[blight]] = throwable ; [[blight]] != null ; [[blight]] = [[blight]] . getCause ( ) ) { StackTraceElement [ ] [[luckless]] = [[blight]] . getStackTrace ( ) ; List < StackTraceElement > [[embroider]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[luckless]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[embroider]] . add ( element ) ; } } [[blight]] . setStackTrace ( [[embroider]] . toArray ( new StackTraceElement [ [[embroider]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 383 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 228 / 11 / 383:  38%|███▊      | 383/1000 [56:51<1:31:36,  8.91s/it][Succeeded / Failed / Skipped / Total] 144 / 228 / 11 / 383:  38%|███▊      | 384/1000 [57:13<1:31:47,  8.94s/it][Succeeded / Failed / Skipped / Total] 144 / 229 / 11 / 384:  38%|███▊      | 384/1000 [57:13<1:31:47,  8.94s/it][Succeeded / Failed / Skipped / Total] 144 / 229 / 11 / 384:  38%|███▊      | 385/1000 [57:21<1:31:37,  8.94s/it][Succeeded / Failed / Skipped / Total] 144 / 230 / 11 / 385:  38%|███▊      | 385/1000 [57:21<1:31:37,  8.94s/it][Succeeded / Failed / Skipped / Total] 144 / 230 / 11 / 385:  39%|███▊      | 386/1000 [57:37<1:31:39,  8.96s/it][Succeeded / Failed / Skipped / Total] 145 / 230 / 11 / 386:  39%|███▊      | 386/1000 [57:37<1:31:39,  8.96s/it][Succeeded / Failed / Skipped / Total] 145 / 230 / 11 / 386:  39%|███▊      | 387/1000 [57:48<1:31:34,  8.96s/it][Succeeded / Failed / Skipped / Total] 145 / 231 / 11 / 387:  39%|███▊      | 387/1000 [57:48<1:31:34,  8.96s/it][Succeeded / Failed / Skipped / Total] 145 / 231 / 11 / 387:  39%|███▉      | 388/1000 [57:49<1:31:12,  8.94s/it][Succeeded / Failed / Skipped / Total] 146 / 231 / 11 / 388:  39%|███▉      | 388/1000 [57:49<1:31:12,  8.94s/it][Succeeded / Failed / Skipped / Total] 146 / 231 / 11 / 388:  39%|███▉      | 389/1000 [58:14<1:31:28,  8.98s/it]Creates a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , String [[messageFormat]] , Object ... [[arguments]] ) { return create ( [[cause]] , ImmutableList . of ( ) , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable [[eben]] , String [[cassette]] , Object ... [[clerical]] ) { return create ( [[eben]] , ImmutableList . of ( ) , [[cassette]] , [[clerical]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object convert ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return convert ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object [[calculator]] ) { ElementSource [[tackling]] = null ; if ( [[calculator]] instanceof ElementSource ) { [[tackling]] = ( ElementSource ) [[calculator]] ; [[calculator]] = [[tackling]] . getDeclaringSource ( ) ; } return convert ( [[calculator]] , [[tackling]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Checks if a class exists . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[thinking]] ( String [[carefree]] ) { return ( parent != null && parent . shouldBeSkipped ( [[carefree]] ) ) || classNamesToSkip . contains ( [[carefree]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Gets the fully qualified class name . --> Get a list of dashroads from a given object --> Socre: 1.0

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[dashwood]] ) { Preconditions . checkNotNull ( [[dashwood]] , "The list of module class names cannot be null." ) ; for ( final String [[kalyani]] : [[dashwood]] ) { if ( ! shouldBeSkipped ( [[kalyani]] ) ) { return new StackTraceElement ( [[kalyani]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 387 ---------------------------------------------
Creates a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... [[arguments]] ) { String message = format ( messageFormat , [[arguments]] ) ; return new Message ( sources , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable [[angelita]] , List < Object > sources , String messageFormat , Object ... [[revisiting]] ) { String message = format ( messageFormat , [[revisiting]] ) ; return new Message ( sources , message , [[angelita]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 388 ---------------------------------------------
Returns a list of measurements . --> Converts a list of usages to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[dependencies]] = errorMessage . getSources ( ) ; for ( int i = [[dependencies]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[dependencies]] . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[virtues]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[patrizia]] = errorMessage . getSources ( ) ; for ( int i = [[patrizia]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[patrizia]] . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 389 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 231 / 11 / 389:  39%|███▉      | 389/1000 [58:14<1:31:28,  8.98s/it][Succeeded / Failed / Skipped / Total] 147 / 231 / 11 / 389:  39%|███▉      | 390/1000 [58:18<1:31:11,  8.97s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 11 / 390:  39%|███▉      | 390/1000 [58:18<1:31:11,  8.97s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 11 / 390:  39%|███▉      | 391/1000 [58:18<1:30:49,  8.95s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 12 / 391:  39%|███▉      | 391/1000 [58:18<1:30:49,  8.95s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 12 / 391:  39%|███▉      | 392/1000 [58:23<1:30:33,  8.94s/it][Succeeded / Failed / Skipped / Total] 149 / 231 / 12 / 392:  39%|███▉      | 392/1000 [58:23<1:30:33,  8.94s/it][Succeeded / Failed / Skipped / Total] 149 / 231 / 12 / 392:  39%|███▉      | 393/1000 [58:23<1:30:11,  8.92s/it][Succeeded / Failed / Skipped / Total] 149 / 232 / 12 / 393:  39%|███▉      | 393/1000 [58:23<1:30:11,  8.92s/it][Succeeded / Failed / Skipped / Total] 149 / 232 / 12 / 393:  39%|███▉      | 394/1000 [58:24<1:29:49,  8.89s/it][Succeeded / Failed / Skipped / Total] 149 / 232 / 13 / 394:  39%|███▉      | 394/1000 [58:24<1:29:49,  8.89s/it][Succeeded / Failed / Skipped / Total] 149 / 232 / 13 / 394:  40%|███▉      | 395/1000 [58:31<1:29:39,  8.89s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 13 / 395:  40%|███▉      | 395/1000 [58:31<1:29:39,  8.89s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 13 / 395:  40%|███▉      | 396/1000 [58:45<1:29:36,  8.90s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 13 / 396:  40%|███▉      | 396/1000 [58:45<1:29:36,  8.90s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 13 / 396:  40%|███▉      | 397/1000 [58:51<1:29:23,  8.90s/it]Main application . --> Shuts down the server --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[punctures]] ( String [ ] [[floozies]] ) throws Exception { if ( [[floozies]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( [[floozies]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( [[floozies]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 390 ---------------------------------------------
Pushes a state . --> Synchronously wait for a key --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[elses]] ( com . google . inject . Key < ? > key , Object [[cooled]] ) { doPushState ( key , [[cooled]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 391 ---------------------------------------------
Register a processor --> [[[SKIPPED]]]

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 392 ---------------------------------------------
Returns an instance of the specified type . --> Converts a value to a String --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[aishwarya]] ( final T [[cicadas]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[cicadas]] ; } @ Override public String toString ( ) { return String . valueOf ( [[cicadas]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 393 ---------------------------------------------
Add a dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[previous]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[stutterer]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[stutterer]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Throw an exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Register processor . --> Unregister processors --> Socre: 1.0

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[hoes]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[hoes]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[hoes]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 396 ---------------------------------------------
Add an processor to the list of processors . --> Register an Arbitrary type --> Socre: 1.0

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . [[processors]] . get ( type ) ; if ( [[processorList]] == null ) { this . [[processors]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . [[processors]] . get ( type ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[chromatic]] = this . [[sharpay]] . get ( type ) ; if ( [[chromatic]] == null ) { this . [[sharpay]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[chromatic]] = this . [[sharpay]] . get ( type ) ; } [[chromatic]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 233 / 13 / 397:  40%|███▉      | 397/1000 [58:51<1:29:23,  8.90s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 13 / 397:  40%|███▉      | 398/1000 [58:51<1:29:02,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 14 / 398:  40%|███▉      | 398/1000 [58:51<1:29:02,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 14 / 398:  40%|███▉      | 399/1000 [58:52<1:28:40,  8.85s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 15 / 399:  40%|███▉      | 399/1000 [58:52<1:28:40,  8.85s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 15 / 399:  40%|████      | 400/1000 [58:59<1:28:28,  8.85s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 15 / 400:  40%|████      | 400/1000 [58:59<1:28:28,  8.85s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 15 / 400:  40%|████      | 401/1000 [58:59<1:28:06,  8.83s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 16 / 401:  40%|████      | 401/1000 [58:59<1:28:06,  8.83s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 16 / 401:  40%|████      | 402/1000 [59:24<1:28:21,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 235 / 16 / 402:  40%|████      | 402/1000 [59:24<1:28:21,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 235 / 16 / 402:  40%|████      | 403/1000 [59:34<1:28:15,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 236 / 16 / 403:  40%|████      | 403/1000 [59:34<1:28:15,  8.87s/it][Succeeded / Failed / Skipped / Total] 151 / 236 / 16 / 403:  40%|████      | 404/1000 [59:47<1:28:12,  8.88s/it][Succeeded / Failed / Skipped / Total] 152 / 236 / 16 / 404:  40%|████      | 404/1000 [59:47<1:28:12,  8.88s/it][Succeeded / Failed / Skipped / Total] 152 / 236 / 16 / 404:  40%|████      | 405/1000 [59:47<1:27:50,  8.86s/it]Execute a task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[subbing]] > [[subbing]] getFutureTaskResult ( RunStateRecordedFutureTask < [[subbing]] > task , Logger logger ) { [[subbing]] [[sem]] = null ; if ( null != task ) { try { [[sem]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[sem]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 398 ---------------------------------------------
Gets the software url . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 399 ---------------------------------------------
Decodes bytes from byte array . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 400 ---------------------------------------------
Register default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[fet]] ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 401 ---------------------------------------------
Clears the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Sets the dependency provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[provider]] , Dependency < ? > dependency , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[constructionContext]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[ayres]] , Dependency < ? > dependency , ConstructionContext < T > [[cts]] ) throws InternalProvisionException { T t = [[ayres]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[cts]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 403 ---------------------------------------------
Gets an Amazon . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[bankbook]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Returns a map of pool tasks . --> Acquire a connection to a pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[entry]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[jackrabbit]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[jackrabbit]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[reconnecting]] = [[jackrabbit]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[reconnecting]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[reconnecting]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 236 / 16 / 405:  40%|████      | 405/1000 [59:47<1:27:50,  8.86s/it][Succeeded / Failed / Skipped / Total] 153 / 236 / 16 / 405:  41%|████      | 406/1000 [59:47<1:27:29,  8.84s/it][Succeeded / Failed / Skipped / Total] 153 / 236 / 17 / 406:  41%|████      | 406/1000 [59:47<1:27:29,  8.84s/it][Succeeded / Failed / Skipped / Total] 153 / 236 / 17 / 406:  41%|████      | 407/1000 [59:50<1:27:11,  8.82s/it][Succeeded / Failed / Skipped / Total] 153 / 237 / 17 / 407:  41%|████      | 407/1000 [59:50<1:27:11,  8.82s/it][Succeeded / Failed / Skipped / Total] 153 / 237 / 17 / 407:  41%|████      | 408/1000 [59:58<1:27:00,  8.82s/it][Succeeded / Failed / Skipped / Total] 154 / 237 / 17 / 408:  41%|████      | 408/1000 [59:58<1:27:00,  8.82s/it][Succeeded / Failed / Skipped / Total] 154 / 237 / 17 / 408:  41%|████      | 409/1000 [59:59<1:26:41,  8.80s/it][Succeeded / Failed / Skipped / Total] 155 / 237 / 17 / 409:  41%|████      | 409/1000 [59:59<1:26:41,  8.80s/it][Succeeded / Failed / Skipped / Total] 155 / 237 / 17 / 409:  41%|████      | 410/1000 [1:00:04<1:26:26,  8.79s/it][Succeeded / Failed / Skipped / Total] 156 / 237 / 17 / 410:  41%|████      | 410/1000 [1:00:04<1:26:26,  8.79s/it][Succeeded / Failed / Skipped / Total] 156 / 237 / 17 / 410:  41%|████      | 411/1000 [1:00:10<1:26:13,  8.78s/it][Succeeded / Failed / Skipped / Total] 157 / 237 / 17 / 411:  41%|████      | 411/1000 [1:00:10<1:26:13,  8.78s/it][Succeeded / Failed / Skipped / Total] 157 / 237 / 17 / 411:  41%|████      | 412/1000 [1:00:50<1:26:49,  8.86s/it][Succeeded / Failed / Skipped / Total] 158 / 237 / 17 / 412:  41%|████      | 412/1000 [1:00:50<1:26:49,  8.86s/it][Succeeded / Failed / Skipped / Total] 158 / 237 / 17 / 412:  41%|████▏     | 413/1000 [1:01:01<1:26:44,  8.87s/it]Remove a pool . --> Removes a pool . --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != [[pool]] ) { [[pool]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool [[audra]] = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != [[audra]] ) { [[audra]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 406 ---------------------------------------------
Adds a connection to the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 407 ---------------------------------------------
Get processor processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( cmdCode ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > [[taxi]] = this . cmd2processors . get ( cmdCode ) ; if ( [[taxi]] != null ) { return [[taxi]] ; } return this . [[goddesses]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 408 ---------------------------------------------
Create a new connection . --> Recover a renew --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[reopened]] ( Url [[deceased]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 409 ---------------------------------------------
Close the connection . --> Parses the URL . --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[connectionManager]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[afoot]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
Connects to the pool . --> Revoke a resources . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[ascertain]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Close the connection . --> Shut down all connections --> Socre: 1.0

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[Allthe]]" == "[[Allthe]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 412 ---------------------------------------------
Handles a request . --> Unregister a transaction --> Socre: 1.0

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = [[entry]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[woolworth]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[woolworth]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[armory]] = [[woolworth]] . next ( ) ; [[woolworth]] . remove ( ) ; InvokeFuture future = [[armory]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 238 / 17 / 413:  41%|████▏     | 413/1000 [1:01:01<1:26:44,  8.87s/it][Succeeded / Failed / Skipped / Total] 158 / 238 / 17 / 413:  41%|████▏     | 414/1000 [1:01:14<1:26:40,  8.88s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 17 / 414:  41%|████▏     | 414/1000 [1:01:14<1:26:40,  8.88s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 17 / 414:  42%|████▏     | 415/1000 [1:01:14<1:26:19,  8.85s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 18 / 415:  42%|████▏     | 415/1000 [1:01:14<1:26:19,  8.85s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 18 / 415:  42%|████▏     | 416/1000 [1:01:16<1:26:01,  8.84s/it][Succeeded / Failed / Skipped / Total] 160 / 238 / 18 / 416:  42%|████▏     | 416/1000 [1:01:16<1:26:01,  8.84s/it][Succeeded / Failed / Skipped / Total] 160 / 238 / 18 / 416:  42%|████▏     | 417/1000 [1:01:27<1:25:55,  8.84s/it][Succeeded / Failed / Skipped / Total] 161 / 238 / 18 / 417:  42%|████▏     | 417/1000 [1:01:27<1:25:55,  8.84s/it][Succeeded / Failed / Skipped / Total] 161 / 238 / 18 / 417:  42%|████▏     | 418/1000 [1:01:37<1:25:47,  8.84s/it][Succeeded / Failed / Skipped / Total] 162 / 238 / 18 / 418:  42%|████▏     | 418/1000 [1:01:37<1:25:47,  8.84s/it][Succeeded / Failed / Skipped / Total] 162 / 238 / 18 / 418:  42%|████▏     | 419/1000 [1:01:39<1:25:30,  8.83s/it]Sets the value of an attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[egyptologist]] ( String [[insubordinate]] , Object value ) { return attributes . putIfAbsent ( [[insubordinate]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 414 ---------------------------------------------
Handles a command . --> Handle response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[aboutyou]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 415 ---------------------------------------------
Sets the transaction command . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 416 ---------------------------------------------
Handle a request . --> Handles a RDDL . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[cmd]] ) { final int [[id]] = [[cmd]] . getId ( ) ; final byte type = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[aldrich]] ) { final int [[bosnia]] = [[aldrich]] . getId ( ) ; final byte type = [[aldrich]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 417 ---------------------------------------------
Handles a request . --> Handles a command . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[babli]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[babli]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 418 ---------------------------------------------
Execute the executor . --> Execute a task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[illiterate]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[illiterate]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 238 / 18 / 419:  42%|████▏     | 419/1000 [1:01:39<1:25:30,  8.83s/it][Succeeded / Failed / Skipped / Total] 163 / 238 / 18 / 419:  42%|████▏     | 420/1000 [1:02:05<1:25:45,  8.87s/it][Succeeded / Failed / Skipped / Total] 164 / 238 / 18 / 420:  42%|████▏     | 420/1000 [1:02:05<1:25:45,  8.87s/it][Succeeded / Failed / Skipped / Total] 164 / 238 / 18 / 420:  42%|████▏     | 421/1000 [1:02:15<1:25:36,  8.87s/it][Succeeded / Failed / Skipped / Total] 165 / 238 / 18 / 421:  42%|████▏     | 421/1000 [1:02:15<1:25:36,  8.87s/it][Succeeded / Failed / Skipped / Total] 165 / 238 / 18 / 421:  42%|████▏     | 422/1000 [1:02:20<1:25:23,  8.86s/it][Succeeded / Failed / Skipped / Total] 166 / 238 / 18 / 422:  42%|████▏     | 422/1000 [1:02:20<1:25:23,  8.86s/it][Succeeded / Failed / Skipped / Total] 166 / 238 / 18 / 422:  42%|████▏     | 423/1000 [1:02:33<1:25:19,  8.87s/it]Handle a request . --> Handle a command --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext [[ctx]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != [[ctx]] ) { ChannelHandlerContext channelCtx = [[ctx]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[perceptive]] , RemotingContext [[felonious]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[perceptive]] , cmd . getArriveTime ( ) , ( [[perceptive]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != [[felonious]] ) { ChannelHandlerContext channelCtx = [[felonious]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[perceptive]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 420 ---------------------------------------------
Registers a processor for a given user . --> Unregisters a balancing --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : processor . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( [[interest]] , processor ) ; if ( [[preProcessor]] != null ) { String [[errMsg]] = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[ofelia]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[dignan]] : processor . multiInterest ( ) ) { UserProcessor < ? > [[blackbeard]] = [[ofelia]] . putIfAbsent ( [[dignan]] , processor ) ; if ( [[blackbeard]] != null ) { String [[goliath]] = "Processor with interest key [" + [[dignan]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[goliath]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 421 ---------------------------------------------
Register a processor . --> Registers a &lt ; --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[strokes]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[strokes]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[strokes]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[strokes]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[strokes]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[strokes]] . interest ( ) , [[strokes]] ) ; if ( preProcessor != null ) { String [[democratic]] = "Processor with interest key [" + [[strokes]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[democratic]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 422 ---------------------------------------------
Convert a byte array to a byte array . --> Returns an unsigned integer value . --> Socre: 1.0

[[[[Adv]]]]: public static byte toByte ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet [[mortal]] ) { int value = 0 ; for ( int i = 0 ; i < [[mortal]] . length ( ) ; ++ i ) { if ( [[mortal]] . get ( i ) ) { value += 1 << i ; } } if ( [[mortal]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[mortal]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 167 / 238 / 18 / 423:  42%|████▏     | 423/1000 [1:02:33<1:25:19,  8.87s/it][Succeeded / Failed / Skipped / Total] 167 / 238 / 18 / 423:  42%|████▏     | 424/1000 [1:02:34<1:25:00,  8.86s/it][Succeeded / Failed / Skipped / Total] 168 / 238 / 18 / 424:  42%|████▏     | 424/1000 [1:02:34<1:25:00,  8.86s/it][Succeeded / Failed / Skipped / Total] 168 / 238 / 18 / 424:  42%|████▎     | 425/1000 [1:02:40<1:24:47,  8.85s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 18 / 425:  42%|████▎     | 425/1000 [1:02:40<1:24:47,  8.85s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 18 / 425:  43%|████▎     | 426/1000 [1:02:40<1:24:26,  8.83s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 19 / 426:  43%|████▎     | 426/1000 [1:02:40<1:24:26,  8.83s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 19 / 426:  43%|████▎     | 427/1000 [1:02:40<1:24:06,  8.81s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 20 / 427:  43%|████▎     | 427/1000 [1:02:40<1:24:06,  8.81s/it][Succeeded / Failed / Skipped / Total] 169 / 238 / 20 / 427:  43%|████▎     | 428/1000 [1:02:49<1:23:57,  8.81s/it][Succeeded / Failed / Skipped / Total] 170 / 238 / 20 / 428:  43%|████▎     | 428/1000 [1:02:49<1:23:57,  8.81s/it][Succeeded / Failed / Skipped / Total] 170 / 238 / 20 / 428:  43%|████▎     | 429/1000 [1:02:49<1:23:37,  8.79s/it]Converts a byte array to a byte array . --> Returns an unsigned integer value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[aspired]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Add a Task . --> Adds a connect . --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[andersson]] = new ReconnectTask ( ) ; [[andersson]] . url = url ; tasks . add ( [[andersson]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 425 ---------------------------------------------
Stop all resources . --> Shutdown the connection . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . [[tasks]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . [[albatross]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 426 ---------------------------------------------
Selects a list of connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 427 ---------------------------------------------
Starts a pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
Executes a request . --> Revoke a replication --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext [[invokeContext]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[invokeContext]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext [[replication]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[replication]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 171 / 238 / 20 / 429:  43%|████▎     | 429/1000 [1:02:49<1:23:37,  8.79s/it][Succeeded / Failed / Skipped / Total] 171 / 238 / 20 / 429:  43%|████▎     | 430/1000 [1:02:50<1:23:18,  8.77s/it][Succeeded / Failed / Skipped / Total] 171 / 239 / 20 / 430:  43%|████▎     | 430/1000 [1:02:50<1:23:18,  8.77s/it][Succeeded / Failed / Skipped / Total] 171 / 239 / 20 / 430:  43%|████▎     | 431/1000 [1:02:56<1:23:05,  8.76s/it][Succeeded / Failed / Skipped / Total] 172 / 239 / 20 / 431:  43%|████▎     | 431/1000 [1:02:56<1:23:05,  8.76s/it][Succeeded / Failed / Skipped / Total] 172 / 239 / 20 / 431:  43%|████▎     | 432/1000 [1:03:01<1:22:52,  8.75s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 20 / 432:  43%|████▎     | 432/1000 [1:03:01<1:22:52,  8.75s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 20 / 432:  43%|████▎     | 433/1000 [1:03:02<1:22:32,  8.73s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 21 / 433:  43%|████▎     | 433/1000 [1:03:02<1:22:32,  8.73s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 21 / 433:  43%|████▎     | 434/1000 [1:03:02<1:22:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 22 / 434:  43%|████▎     | 434/1000 [1:03:02<1:22:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 22 / 434:  44%|████▎     | 435/1000 [1:03:07<1:21:59,  8.71s/it][Succeeded / Failed / Skipped / Total] 174 / 239 / 22 / 435:  44%|████▎     | 435/1000 [1:03:07<1:21:59,  8.71s/it][Succeeded / Failed / Skipped / Total] 174 / 239 / 22 / 435:  44%|████▎     | 436/1000 [1:03:14<1:21:47,  8.70s/it][Succeeded / Failed / Skipped / Total] 175 / 239 / 22 / 436:  44%|████▎     | 436/1000 [1:03:14<1:21:47,  8.70s/it][Succeeded / Failed / Skipped / Total] 175 / 239 / 22 / 436:  44%|████▎     | 437/1000 [1:03:23<1:21:40,  8.70s/it][Succeeded / Failed / Skipped / Total] 175 / 240 / 22 / 437:  44%|████▎     | 437/1000 [1:03:23<1:21:40,  8.70s/it][Succeeded / Failed / Skipped / Total] 175 / 240 / 22 / 437:  44%|████▍     | 438/1000 [1:03:40<1:21:41,  8.72s/it]Shuts down the connection . --> Populates a segment . --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[diamond]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[diamond]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[diamond]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 430 ---------------------------------------------
Sends a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[rog]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[rog]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 431 ---------------------------------------------
Formats a log message . --> Formats the activities . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[activities]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 432 ---------------------------------------------
Gets a boolean property . --> Returns a boolean value . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[achieved]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[achieved]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 433 ---------------------------------------------
Returns a random number of random connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value associated with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Handles a request . --> Sets the timestamp . --> Socre: 1.0

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[timeout]] > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[timeout]] ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . [[amplifier]] > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . [[amplifier]] ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 436 ---------------------------------------------
Returns the property . --> Returns the time zone . --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[downtime]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[downtime]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 437 ---------------------------------------------
Gets the user name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[debrief]] ) { return StringUtils . isBlank ( [[debrief]] ) ? null : this . [[oceanic]] . get ( [[debrief]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 240 / 22 / 438:  44%|████▍     | 438/1000 [1:03:40<1:21:41,  8.72s/it][Succeeded / Failed / Skipped / Total] 176 / 240 / 22 / 438:  44%|████▍     | 439/1000 [1:03:46<1:21:30,  8.72s/it][Succeeded / Failed / Skipped / Total] 177 / 240 / 22 / 439:  44%|████▍     | 439/1000 [1:03:46<1:21:30,  8.72s/it][Succeeded / Failed / Skipped / Total] 177 / 240 / 22 / 439:  44%|████▍     | 440/1000 [1:03:50<1:21:15,  8.71s/it][Succeeded / Failed / Skipped / Total] 178 / 240 / 22 / 440:  44%|████▍     | 440/1000 [1:03:50<1:21:15,  8.71s/it][Succeeded / Failed / Skipped / Total] 178 / 240 / 22 / 440:  44%|████▍     | 441/1000 [1:03:55<1:21:02,  8.70s/it][Succeeded / Failed / Skipped / Total] 178 / 241 / 22 / 441:  44%|████▍     | 441/1000 [1:03:55<1:21:02,  8.70s/it][Succeeded / Failed / Skipped / Total] 178 / 241 / 22 / 441:  44%|████▍     | 442/1000 [1:04:04<1:20:53,  8.70s/it][Succeeded / Failed / Skipped / Total] 179 / 241 / 22 / 442:  44%|████▍     | 442/1000 [1:04:04<1:20:53,  8.70s/it][Succeeded / Failed / Skipped / Total] 179 / 241 / 22 / 442:  44%|████▍     | 443/1000 [1:04:04<1:20:33,  8.68s/it][Succeeded / Failed / Skipped / Total] 180 / 241 / 22 / 443:  44%|████▍     | 443/1000 [1:04:04<1:20:33,  8.68s/it][Succeeded / Failed / Skipped / Total] 180 / 241 / 22 / 443:  44%|████▍     | 444/1000 [1:04:11<1:20:23,  8.68s/it]Handles command . --> Process a criterion --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[caterer]] , String addr ) throws RemotingException { preProcess ( [[caterer]] , addr ) ; if ( [[caterer]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[caterer]] ) ; } else { String [[daint]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[caterer]] . getResponseStatus ( ) , addr , [[caterer]] . getId ( ) ) ; logger . warn ( [[daint]] ) ; if ( [[caterer]] . getCause ( ) != null ) { throw new InvokeException ( [[daint]] , [[caterer]] . getCause ( ) ) ; } else { throw new InvokeException ( [[daint]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 439 ---------------------------------------------
Parses the response from the response . --> Destroy a RDC destroy --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[hoka]] ) throws CodecException { RpcResponseCommand [[destroyer]] = ( RpcResponseCommand ) [[hoka]] ; [[destroyer]] . deserialize ( ) ; return [[destroyer]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
Parses error response . --> Parses a server . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand [[responseCommand]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand [[proofed]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[proofed]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 441 ---------------------------------------------
Parse a Throwable response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[checkers]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[nilly]] = ( RpcResponseCommand ) responseCommand ; [[nilly]] . deserialize ( ) ; Object ex = [[nilly]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Logs a log message . --> Invokes a context . --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[logger]] , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[logger]] . isInfoEnabled ( ) ) { [[logger]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[alitalia]] , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[alitalia]] . isInfoEnabled ( ) ) { [[alitalia]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Creates a new thread factory . --> Start a new thread --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[grasped]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 241 / 22 / 444:  44%|████▍     | 444/1000 [1:04:11<1:20:23,  8.68s/it][Succeeded / Failed / Skipped / Total] 181 / 241 / 22 / 444:  44%|████▍     | 445/1000 [1:04:16<1:20:10,  8.67s/it][Succeeded / Failed / Skipped / Total] 182 / 241 / 22 / 445:  44%|████▍     | 445/1000 [1:04:16<1:20:10,  8.67s/it][Succeeded / Failed / Skipped / Total] 182 / 241 / 22 / 445:  45%|████▍     | 446/1000 [1:04:27<1:20:03,  8.67s/it][Succeeded / Failed / Skipped / Total] 183 / 241 / 22 / 446:  45%|████▍     | 446/1000 [1:04:27<1:20:03,  8.67s/it][Succeeded / Failed / Skipped / Total] 183 / 241 / 22 / 446:  45%|████▍     | 447/1000 [1:04:32<1:19:50,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 242 / 22 / 447:  45%|████▍     | 447/1000 [1:04:32<1:19:50,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 242 / 22 / 447:  45%|████▍     | 448/1000 [1:04:33<1:19:33,  8.65s/it][Succeeded / Failed / Skipped / Total] 183 / 243 / 22 / 448:  45%|████▍     | 448/1000 [1:04:33<1:19:33,  8.65s/it][Succeeded / Failed / Skipped / Total] 183 / 243 / 22 / 448:  45%|████▍     | 449/1000 [1:04:51<1:19:36,  8.67s/it]Parse the given string . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[informer]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[understood]] = channel . remoteAddress ( ) ; return doParse ( [[understood]] != null ? [[understood]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Create a server . --> Handles exceptions --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String [[errMsg]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[errMsg]] ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[sudd]] ( Throwable t , String [[frizzy]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[frizzy]] ) ; RpcServerException [[espresso]] = new RpcServerException ( formattedErrMsg ) ; [[espresso]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[espresso]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 447 ---------------------------------------------
Return the IP address for the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[dynamite]] ( final Channel [[neutrinos]] ) { if ( null == [[neutrinos]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[homebody]] = ( InetSocketAddress ) [[neutrinos]] . remoteAddress ( ) ; if ( [[homebody]] != null ) { return [[homebody]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Creates a new Request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[ironman]] , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[ironman]] , request , request . getInvokeContext ( ) , invokeCallback ) ; [[ironman]] . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[ironman]] . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[ironman]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[ironman]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[ironman]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[ironman]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[ironman]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[ironman]] . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[ironman]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[ironman]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 244 / 22 / 449:  45%|████▍     | 449/1000 [1:04:51<1:19:36,  8.67s/it][Succeeded / Failed / Skipped / Total] 183 / 244 / 22 / 449:  45%|████▌     | 450/1000 [1:05:04<1:19:31,  8.68s/it][Succeeded / Failed / Skipped / Total] 183 / 245 / 22 / 450:  45%|████▌     | 450/1000 [1:05:04<1:19:31,  8.68s/it][Succeeded / Failed / Skipped / Total] 183 / 245 / 22 / 450:  45%|████▌     | 451/1000 [1:05:06<1:19:14,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 246 / 22 / 451:  45%|████▌     | 451/1000 [1:05:06<1:19:14,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 246 / 22 / 451:  45%|████▌     | 452/1000 [1:05:14<1:19:05,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 247 / 22 / 452:  45%|████▌     | 452/1000 [1:05:14<1:19:05,  8.66s/it][Succeeded / Failed / Skipped / Total] 183 / 247 / 22 / 452:  45%|████▌     | 453/1000 [1:05:29<1:19:04,  8.67s/it][Succeeded / Failed / Skipped / Total] 184 / 247 / 22 / 453:  45%|████▌     | 453/1000 [1:05:29<1:19:04,  8.67s/it][Succeeded / Failed / Skipped / Total] 184 / 247 / 22 / 453:  45%|████▌     | 454/1000 [1:05:35<1:18:53,  8.67s/it][Succeeded / Failed / Skipped / Total] 185 / 247 / 22 / 454:  45%|████▌     | 454/1000 [1:05:35<1:18:53,  8.67s/it][Succeeded / Failed / Skipped / Total] 185 / 247 / 22 / 454:  46%|████▌     | 455/1000 [1:05:41<1:18:40,  8.66s/it][Succeeded / Failed / Skipped / Total] 185 / 248 / 22 / 455:  46%|████▌     | 455/1000 [1:05:41<1:18:40,  8.66s/it][Succeeded / Failed / Skipped / Total] 185 / 248 / 22 / 455:  46%|████▌     | 456/1000 [1:05:44<1:18:25,  8.65s/it][Succeeded / Failed / Skipped / Total] 186 / 248 / 22 / 456:  46%|████▌     | 456/1000 [1:05:44<1:18:25,  8.65s/it][Succeeded / Failed / Skipped / Total] 186 / 248 / 22 / 456:  46%|████▌     | 457/1000 [1:05:58<1:18:23,  8.66s/it][Succeeded / Failed / Skipped / Total] 186 / 249 / 22 / 457:  46%|████▌     | 457/1000 [1:05:58<1:18:23,  8.66s/it][Succeeded / Failed / Skipped / Total] 186 / 249 / 22 / 457:  46%|████▌     | 458/1000 [1:05:58<1:18:04,  8.64s/it][Succeeded / Failed / Skipped / Total] 186 / 249 / 23 / 458:  46%|████▌     | 458/1000 [1:05:58<1:18:04,  8.64s/it][Succeeded / Failed / Skipped / Total] 186 / 249 / 23 / 458:  46%|████▌     | 459/1000 [1:05:59<1:17:46,  8.63s/it]Returns a remote host name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[tailored]] ) { if ( null == [[tailored]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[sawmill]] = ( InetSocketAddress ) [[tailored]] . remoteAddress ( ) ; if ( [[sawmill]] != null ) { return [[sawmill]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Get the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[devoid]] ( final Channel [[formulas]] ) { if ( null == [[formulas]] ) { return - 1 ; } final InetSocketAddress [[graders]] = ( InetSocketAddress ) [[formulas]] . remoteAddress ( ) ; if ( [[graders]] != null ) { return [[graders]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Return the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[abstractions]] ( final Channel [[après]] ) { if ( null == [[après]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[après]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Get the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[antonella]] ) { if ( null == [[antonella]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[antonella]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Get the connections . --> Returns the underlying peer . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . [[algiers]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[algiers]] ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 454 ---------------------------------------------
Closes the connection . --> Deletes the pool . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[selling]] ( Connection [[bedfellows]] ) { if ( null == [[bedfellows]] ) { return ; } boolean res = this . conns . remove ( [[bedfellows]] ) ; if ( res ) { [[bedfellows]] . decreaseRef ( ) ; } if ( [[bedfellows]] . noRef ( ) ) { [[bedfellows]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 455 ---------------------------------------------
Get IPv4 address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[generations]] ) { final InetSocketAddress [[achieved]] = ( InetSocketAddress ) [[generations]] ; if ( [[achieved]] != null ) { InetAddress [[perf]] = [[achieved]] . getAddress ( ) ; if ( null != [[perf]] ) { return [[perf]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 456 ---------------------------------------------
Add a connection . --> Adds an arbitrary . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[channeled]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[tiresome]] = this . [[overbite]] . addIfAbsent ( connection ) ; if ( [[tiresome]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 457 ---------------------------------------------
Gets the Java class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[moulding]] ( String [[pffft]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[pffft]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Starts the monitoring . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
[Succeeded / Failed / Skipped / Total] 186 / 249 / 24 / 459:  46%|████▌     | 459/1000 [1:05:59<1:17:46,  8.63s/it][Succeeded / Failed / Skipped / Total] 186 / 249 / 24 / 459:  46%|████▌     | 460/1000 [1:06:10<1:17:41,  8.63s/it][Succeeded / Failed / Skipped / Total] 186 / 250 / 24 / 460:  46%|████▌     | 460/1000 [1:06:10<1:17:41,  8.63s/it][Succeeded / Failed / Skipped / Total] 186 / 250 / 24 / 460:  46%|████▌     | 461/1000 [1:06:14<1:17:26,  8.62s/it][Succeeded / Failed / Skipped / Total] 186 / 251 / 24 / 461:  46%|████▌     | 461/1000 [1:06:14<1:17:26,  8.62s/it][Succeeded / Failed / Skipped / Total] 186 / 251 / 24 / 461:  46%|████▌     | 462/1000 [1:06:14<1:17:08,  8.60s/it][Succeeded / Failed / Skipped / Total] 186 / 251 / 25 / 462:  46%|████▌     | 462/1000 [1:06:14<1:17:08,  8.60s/it][Succeeded / Failed / Skipped / Total] 186 / 251 / 25 / 462:  46%|████▋     | 463/1000 [1:06:21<1:16:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 25 / 463:  46%|████▋     | 463/1000 [1:06:21<1:16:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 25 / 463:  46%|████▋     | 464/1000 [1:06:21<1:16:39,  8.58s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 26 / 464:  46%|████▋     | 464/1000 [1:06:21<1:16:39,  8.58s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 26 / 464:  46%|████▋     | 465/1000 [1:06:25<1:16:25,  8.57s/it][Succeeded / Failed / Skipped / Total] 188 / 251 / 26 / 465:  46%|████▋     | 465/1000 [1:06:25<1:16:25,  8.57s/it][Succeeded / Failed / Skipped / Total] 188 / 251 / 26 / 465:  47%|████▋     | 466/1000 [1:06:25<1:16:07,  8.55s/it][Succeeded / Failed / Skipped / Total] 188 / 252 / 26 / 466:  47%|████▋     | 466/1000 [1:06:25<1:16:07,  8.55s/it][Succeeded / Failed / Skipped / Total] 188 / 252 / 26 / 466:  47%|████▋     | 467/1000 [1:06:35<1:15:59,  8.56s/it]--------------------------------------------- Result 459 ---------------------------------------------
Replies if the given URL exists . --> [[[SKIPPED]]]

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Gets the custom command . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[websites]] ( CommandCode [[hubcaps]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[hubcaps]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
Register custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[turtle]] ( String className , CustomSerializer [[betina]] ) { CustomSerializer [[clegg]] = classCustomSerializer . putIfAbsent ( className , [[betina]] ) ; if ( [[clegg]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[clegg]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 462 ---------------------------------------------
Create a channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Sets the water mark . --> Sets the watermark watermark . --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[highWaterMark]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[highWaterMark]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[highWaterMark]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[highWaterMark]] ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[highWaterMark]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[bachelorhood]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[bachelorhood]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[bachelorhood]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[bachelorhood]] ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[bachelorhood]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 464 ---------------------------------------------
Validates a byte array . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 465 ---------------------------------------------
Register a custom serializer . --> Helper method to add a bytecoder --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[cannot]] ( CommandCode [[bardot]] , CustomSerializer [[pitying]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[bardot]] , [[pitying]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[bardot]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 466 ---------------------------------------------
Build a Frame frame . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[sulfate]] ) { if ( [[sulfate]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[sulfate]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 467 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 252 / 26 / 467:  47%|████▋     | 467/1000 [1:06:35<1:15:59,  8.56s/it][Succeeded / Failed / Skipped / Total] 189 / 252 / 26 / 467:  47%|████▋     | 468/1000 [1:06:36<1:15:43,  8.54s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 26 / 468:  47%|████▋     | 468/1000 [1:06:36<1:15:43,  8.54s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 26 / 468:  47%|████▋     | 469/1000 [1:06:37<1:15:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 191 / 252 / 26 / 469:  47%|████▋     | 469/1000 [1:06:37<1:15:25,  8.52s/it][Succeeded / Failed / Skipped / Total] 191 / 252 / 26 / 469:  47%|████▋     | 470/1000 [1:06:49<1:15:20,  8.53s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 26 / 470:  47%|████▋     | 470/1000 [1:06:49<1:15:20,  8.53s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 26 / 470:  47%|████▋     | 471/1000 [1:06:49<1:15:03,  8.51s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 27 / 471:  47%|████▋     | 471/1000 [1:06:49<1:15:03,  8.51s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 27 / 471:  47%|████▋     | 472/1000 [1:06:49<1:14:45,  8.50s/it][Succeeded / Failed / Skipped / Total] 193 / 252 / 27 / 472:  47%|████▋     | 472/1000 [1:06:49<1:14:45,  8.50s/it][Succeeded / Failed / Skipped / Total] 193 / 252 / 27 / 472:  47%|████▋     | 473/1000 [1:06:58<1:14:37,  8.50s/it][Succeeded / Failed / Skipped / Total] 194 / 252 / 27 / 473:  47%|████▋     | 473/1000 [1:06:58<1:14:37,  8.50s/it][Succeeded / Failed / Skipped / Total] 194 / 252 / 27 / 473:  47%|████▋     | 474/1000 [1:07:00<1:14:22,  8.48s/it][Succeeded / Failed / Skipped / Total] 195 / 252 / 27 / 474:  47%|████▋     | 474/1000 [1:07:00<1:14:22,  8.48s/it][Succeeded / Failed / Skipped / Total] 195 / 252 / 27 / 474:  48%|████▊     | 475/1000 [1:07:01<1:14:05,  8.47s/it]Helper method to close the byte buffer . --> A convenience . --> Socre: 1.0

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[buf]] = ByteBuffer . allocate ( 4 ) ; [[buf]] . putInt ( code ) ; [[buf]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[buf]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[allo]] = ByteBuffer . allocate ( 4 ) ; [[allo]] . putInt ( code ) ; [[allo]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[allo]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 468 ---------------------------------------------
Sets the code code . --> Liefert die e efeineirt eineineie eiein eineineineinkieieinkt en eineineineicheieben . eue dieue . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . [[code]] = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[wields]] ( int code ) { this . [[leukaemia]] = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 469 ---------------------------------------------
Verifies that the limites have been written . --> Helper method to create a new FrameedFrameer --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[disko]] ) throws LimitExceededException { if ( [[disko]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[disko]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[disko]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[disko]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 470 ---------------------------------------------
Overwrite packet . --> Verifies that a block has been written . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[nikolai]] ) throws IncompleteException { if ( maxpacketsize < [[nikolai]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[nikolai]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 471 ---------------------------------------------
Send web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 472 ---------------------------------------------
Generates a string representation of a string . --> Calculates the SHA - 256 1 . --> Socre: 1.0

[[[[Adv]]]]: private String generateFinalKey ( String in ) { String [[seckey]] = in . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String generateFinalKey ( String in ) { String [[ballesteros]] = in . trim ( ) ; String acc = [[ballesteros]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 473 ---------------------------------------------
Read the web socket . --> Send web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[abide]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 474 ---------------------------------------------
Process a single frame . --> Invoked when an error . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[allowed]] , Opcode [[ont]] ) throws InvalidDataException { if ( [[ont]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[allowed]] ) ; } else if ( [[allowed]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[allowed]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
[Succeeded / Failed / Skipped / Total] 196 / 252 / 27 / 475:  48%|████▊     | 475/1000 [1:07:01<1:14:05,  8.47s/it][Succeeded / Failed / Skipped / Total] 196 / 252 / 27 / 475:  48%|████▊     | 476/1000 [1:07:08<1:13:54,  8.46s/it][Succeeded / Failed / Skipped / Total] 196 / 253 / 27 / 476:  48%|████▊     | 476/1000 [1:07:08<1:13:54,  8.46s/it][Succeeded / Failed / Skipped / Total] 196 / 253 / 27 / 476:  48%|████▊     | 477/1000 [1:07:08<1:13:37,  8.45s/it][Succeeded / Failed / Skipped / Total] 196 / 253 / 28 / 477:  48%|████▊     | 477/1000 [1:07:08<1:13:37,  8.45s/it][Succeeded / Failed / Skipped / Total] 196 / 253 / 28 / 477:  48%|████▊     | 478/1000 [1:07:12<1:13:23,  8.44s/it][Succeeded / Failed / Skipped / Total] 197 / 253 / 28 / 478:  48%|████▊     | 478/1000 [1:07:12<1:13:23,  8.44s/it][Succeeded / Failed / Skipped / Total] 197 / 253 / 28 / 478:  48%|████▊     | 479/1000 [1:07:29<1:13:24,  8.45s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 28 / 479:  48%|████▊     | 479/1000 [1:07:29<1:13:24,  8.45s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 28 / 479:  48%|████▊     | 480/1000 [1:07:30<1:13:08,  8.44s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 29 / 480:  48%|████▊     | 480/1000 [1:07:30<1:13:08,  8.44s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 29 / 480:  48%|████▊     | 481/1000 [1:07:31<1:12:51,  8.42s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 30 / 481:  48%|████▊     | 481/1000 [1:07:31<1:12:51,  8.42s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 30 / 481:  48%|████▊     | 482/1000 [1:07:38<1:12:41,  8.42s/it][Succeeded / Failed / Skipped / Total] 199 / 253 / 30 / 482:  48%|████▊     | 482/1000 [1:07:38<1:12:41,  8.42s/it][Succeeded / Failed / Skipped / Total] 199 / 253 / 30 / 482:  48%|████▊     | 483/1000 [1:07:38<1:12:24,  8.40s/it][Succeeded / Failed / Skipped / Total] 199 / 253 / 31 / 483:  48%|████▊     | 483/1000 [1:07:38<1:12:24,  8.40s/it][Succeeded / Failed / Skipped / Total] 199 / 253 / 31 / 483:  48%|████▊     | 484/1000 [1:07:39<1:12:07,  8.39s/it]--------------------------------------------- Result 475 ---------------------------------------------
Called when the web socket . --> Sends a WebSocket message . --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[webSocketImpl]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketError ( [[webSocketImpl]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[achin]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[achin]] . getWebSocketListener ( ) . onWebsocketError ( [[achin]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 476 ---------------------------------------------
Does the given protocol . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[coo]] : knownProtocols ) { if ( [[coo]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[coo]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 477 ---------------------------------------------
Acquires a limit . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 478 ---------------------------------------------
Sets the data frame . --> Checks that a data has been completed . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[jinni]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Returns the total number of bytes . --> Returns an unmodifiable byte buffer . --> Socre: 1.0

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[coastal]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[coastal]] += buffer . limit ( ) ; } } return [[coastal]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 480 ---------------------------------------------
Performs a H2O - H2O H2 - H2 H2 2 . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 481 ---------------------------------------------
Construct a Handwidth from a Hand . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 482 ---------------------------------------------
Handles the socket . --> Handles a socket . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[abstractions]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 483 ---------------------------------------------
Flushes a response . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 253 / 31 / 484:  48%|████▊     | 484/1000 [1:07:39<1:12:07,  8.39s/it][Succeeded / Failed / Skipped / Total] 200 / 253 / 31 / 484:  48%|████▊     | 485/1000 [1:07:47<1:11:58,  8.39s/it][Succeeded / Failed / Skipped / Total] 201 / 253 / 31 / 485:  48%|████▊     | 485/1000 [1:07:47<1:11:58,  8.39s/it][Succeeded / Failed / Skipped / Total] 201 / 253 / 31 / 485:  49%|████▊     | 486/1000 [1:08:06<1:12:01,  8.41s/it][Succeeded / Failed / Skipped / Total] 202 / 253 / 31 / 486:  49%|████▊     | 486/1000 [1:08:06<1:12:01,  8.41s/it][Succeeded / Failed / Skipped / Total] 202 / 253 / 31 / 486:  49%|████▊     | 487/1000 [1:08:06<1:11:44,  8.39s/it][Succeeded / Failed / Skipped / Total] 202 / 253 / 32 / 487:  49%|████▊     | 487/1000 [1:08:06<1:11:44,  8.39s/it][Succeeded / Failed / Skipped / Total] 202 / 253 / 32 / 487:  49%|████▉     | 488/1000 [1:08:11<1:11:32,  8.38s/it][Succeeded / Failed / Skipped / Total] 202 / 254 / 32 / 488:  49%|████▉     | 488/1000 [1:08:11<1:11:32,  8.38s/it][Succeeded / Failed / Skipped / Total] 202 / 254 / 32 / 488:  49%|████▉     | 489/1000 [1:08:13<1:11:17,  8.37s/it]Attempt to create a new frame . --> Tries to read a raw data . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[addressing]] ( WebSocketImpl webSocketImpl , Framedata [[digital]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[digital]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 485 ---------------------------------------------
Closes the connection . --> Flushes an exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[asunder]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Send a text . --> Sends a replication --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[niklas]] ( String [[deliverance]] ) { if ( [[deliverance]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[niklas]] ( draft . createFrames ( [[deliverance]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 487 ---------------------------------------------
Initialize the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Closes a frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[jacqui]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 489 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 202 / 255 / 32 / 489:  49%|████▉     | 489/1000 [1:08:13<1:11:17,  8.37s/it][Succeeded / Failed / Skipped / Total] 202 / 255 / 32 / 489:  49%|████▉     | 490/1000 [1:08:14<1:11:01,  8.36s/it][Succeeded / Failed / Skipped / Total] 202 / 256 / 32 / 490:  49%|████▉     | 490/1000 [1:08:14<1:11:01,  8.36s/it][Succeeded / Failed / Skipped / Total] 202 / 256 / 32 / 490:  49%|████▉     | 491/1000 [1:08:17<1:10:47,  8.34s/it][Succeeded / Failed / Skipped / Total] 203 / 256 / 32 / 491:  49%|████▉     | 491/1000 [1:08:17<1:10:47,  8.34s/it][Succeeded / Failed / Skipped / Total] 203 / 256 / 32 / 491:  49%|████▉     | 492/1000 [1:08:22<1:10:35,  8.34s/it][Succeeded / Failed / Skipped / Total] 204 / 256 / 32 / 492:  49%|████▉     | 492/1000 [1:08:22<1:10:35,  8.34s/it][Succeeded / Failed / Skipped / Total] 204 / 256 / 32 / 492:  49%|████▉     | 493/1000 [1:08:24<1:10:21,  8.33s/it][Succeeded / Failed / Skipped / Total] 205 / 256 / 32 / 493:  49%|████▉     | 493/1000 [1:08:24<1:10:21,  8.33s/it][Succeeded / Failed / Skipped / Total] 205 / 256 / 32 / 493:  49%|████▉     | 494/1000 [1:08:32<1:10:12,  8.33s/it][Succeeded / Failed / Skipped / Total] 206 / 256 / 32 / 494:  49%|████▉     | 494/1000 [1:08:32<1:10:12,  8.33s/it][Succeeded / Failed / Skipped / Total] 206 / 256 / 32 / 494:  50%|████▉     | 495/1000 [1:08:34<1:09:57,  8.31s/it]Generates the error code . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[cobbler]] ) { String errorCodeDescription ; switch ( [[cobbler]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 490 ---------------------------------------------
Starts the underlying socket . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[ét]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
Returns a new ByteBuffer . --> Calculates how many bytes are made . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { [[resultingByteBuffer]] . put ( [[buffer]] ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[accepts]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[yohan]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[carjacking]] : byteBufferList ) { totalSize += [[carjacking]] . limit ( ) ; } checkBufferLimit ( ) ; [[yohan]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[carjacking]] : byteBufferList ) { [[yohan]] . put ( [[carjacking]] ) ; } } [[yohan]] . flip ( ) ; return [[yohan]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 492 ---------------------------------------------
Get the scheme . --> Get scheme . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[woefully]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Send a request to the server . --> Populates a Handon adoop . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[abolitionist]] = new HandshakeImpl1Client ( ) ; [[abolitionist]] . setResourceDescriptor ( path ) ; [[abolitionist]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[abolitionist]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[abolitionist]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 494 ---------------------------------------------
Shutdown the connection . --> Cancel a Connect . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[saddlebag]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 256 / 32 / 495:  50%|████▉     | 495/1000 [1:08:34<1:09:57,  8.31s/it][Succeeded / Failed / Skipped / Total] 207 / 256 / 32 / 495:  50%|████▉     | 496/1000 [1:08:45<1:09:52,  8.32s/it][Succeeded / Failed / Skipped / Total] 208 / 256 / 32 / 496:  50%|████▉     | 496/1000 [1:08:45<1:09:52,  8.32s/it][Succeeded / Failed / Skipped / Total] 208 / 256 / 32 / 496:  50%|████▉     | 497/1000 [1:08:46<1:09:36,  8.30s/it][Succeeded / Failed / Skipped / Total] 209 / 256 / 32 / 497:  50%|████▉     | 497/1000 [1:08:46<1:09:36,  8.30s/it][Succeeded / Failed / Skipped / Total] 209 / 256 / 32 / 497:  50%|████▉     | 498/1000 [1:08:59<1:09:32,  8.31s/it][Succeeded / Failed / Skipped / Total] 210 / 256 / 32 / 498:  50%|████▉     | 498/1000 [1:08:59<1:09:32,  8.31s/it][Succeeded / Failed / Skipped / Total] 210 / 256 / 32 / 498:  50%|████▉     | 499/1000 [1:09:01<1:09:18,  8.30s/it][Succeeded / Failed / Skipped / Total] 211 / 256 / 32 / 499:  50%|████▉     | 499/1000 [1:09:01<1:09:18,  8.30s/it][Succeeded / Failed / Skipped / Total] 211 / 256 / 32 / 499:  50%|█████     | 500/1000 [1:09:13<1:09:13,  8.31s/it][Succeeded / Failed / Skipped / Total] 212 / 256 / 32 / 500:  50%|█████     | 500/1000 [1:09:13<1:09:13,  8.31s/it][Succeeded / Failed / Skipped / Total] 212 / 256 / 32 / 500:  50%|█████     | 501/1000 [1:09:13<1:08:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 212 / 256 / 33 / 501:  50%|█████     | 501/1000 [1:09:13<1:08:57,  8.29s/it][Succeeded / Failed / Skipped / Total] 212 / 256 / 33 / 501:  50%|█████     | 502/1000 [1:09:15<1:08:42,  8.28s/it][Succeeded / Failed / Skipped / Total] 212 / 257 / 33 / 502:  50%|█████     | 502/1000 [1:09:15<1:08:42,  8.28s/it][Succeeded / Failed / Skipped / Total] 212 / 257 / 33 / 502:  50%|█████     | 503/1000 [1:09:19<1:08:29,  8.27s/it]Connects the executor . --> Waits for all connections . --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[capsules]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[capsules]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 496 ---------------------------------------------
Shutdown this connection . --> Shuts down . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[headman]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Sets the timer . --> Shut down . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[tsurugi]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 498 ---------------------------------------------
Starts the server . --> Resume . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[websocketRunning]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[harkin]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[guyver]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Send a HandDebug server to a server . --> Create a Handshak server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[meditated]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
Waits for stopping . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[stop]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[oude]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 501 ---------------------------------------------
Adds a channel to the queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 502 ---------------------------------------------
Send a Frame to the socket . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata [[f]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata [[erol]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[erol]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 503 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 258 / 33 / 503:  50%|█████     | 503/1000 [1:09:19<1:08:29,  8.27s/it][Succeeded / Failed / Skipped / Total] 212 / 258 / 33 / 503:  50%|█████     | 504/1000 [1:09:25<1:08:19,  8.27s/it][Succeeded / Failed / Skipped / Total] 213 / 258 / 33 / 504:  50%|█████     | 504/1000 [1:09:25<1:08:19,  8.27s/it][Succeeded / Failed / Skipped / Total] 214 / 258 / 33 / 505:  50%|█████     | 505/1000 [1:09:25<1:08:03,  8.25s/it][Succeeded / Failed / Skipped / Total] 214 / 258 / 33 / 505:  51%|█████     | 506/1000 [1:09:31<1:07:52,  8.24s/it][Succeeded / Failed / Skipped / Total] 215 / 258 / 33 / 506:  51%|█████     | 506/1000 [1:09:31<1:07:52,  8.24s/it][Succeeded / Failed / Skipped / Total] 215 / 258 / 34 / 507:  51%|█████     | 507/1000 [1:09:31<1:07:36,  8.23s/it][Succeeded / Failed / Skipped / Total] 215 / 258 / 34 / 507:  51%|█████     | 508/1000 [1:09:43<1:07:31,  8.23s/it]Gets the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[gayle]] ( ) { int [[accra]] = getAddress ( ) . getPort ( ) ; if ( [[accra]] == 0 && server != null ) { [[accra]] = server . socket ( ) . getLocalPort ( ) ; } return [[accra]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
Handles a key . --> Depending on the subscription . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( [[conn]] . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , [[conn]] , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { [[conn]] . inQueue . put ( buf ) ; queue ( [[conn]] ) ; i . remove ( ) ; if ( [[conn]] . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) [[conn]] . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( [[conn]] ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl [[dehydration]] = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( [[dehydration]] . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , [[dehydration]] , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , [[dehydration]] , [[dehydration]] . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { [[dehydration]] . inQueue . put ( buf ) ; queue ( [[dehydration]] ) ; i . remove ( ) ; if ( [[dehydration]] . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) [[dehydration]] . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( [[dehydration]] ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Handles a key . --> Sets the key . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket [[socket]] = channel . socket ( ) ; [[socket]] . setTcpNoDelay ( isTcpNoDelay ( ) ) ; [[socket]] . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket [[ahold]] = channel . socket ( ) ; [[ahold]] . setTcpNoDelay ( isTcpNoDelay ( ) ) ; [[ahold]] . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 506 ---------------------------------------------
Handle a key . --> Processes the key . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[baldness]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[baldness]] , [[baldness]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 507 ---------------------------------------------
Stops the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 259 / 34 / 508:  51%|█████     | 508/1000 [1:09:43<1:07:31,  8.23s/it][Succeeded / Failed / Skipped / Total] 215 / 259 / 34 / 508:  51%|█████     | 509/1000 [1:09:46<1:07:18,  8.22s/it][Succeeded / Failed / Skipped / Total] 216 / 259 / 34 / 509:  51%|█████     | 509/1000 [1:09:46<1:07:18,  8.22s/it][Succeeded / Failed / Skipped / Total] 216 / 259 / 34 / 509:  51%|█████     | 510/1000 [1:09:52<1:07:07,  8.22s/it][Succeeded / Failed / Skipped / Total] 217 / 259 / 34 / 510:  51%|█████     | 510/1000 [1:09:52<1:07:07,  8.22s/it][Succeeded / Failed / Skipped / Total] 217 / 259 / 34 / 510:  51%|█████     | 511/1000 [1:09:58<1:06:57,  8.22s/it][Succeeded / Failed / Skipped / Total] 218 / 259 / 34 / 511:  51%|█████     | 511/1000 [1:09:58<1:06:57,  8.22s/it][Succeeded / Failed / Skipped / Total] 218 / 259 / 34 / 511:  51%|█████     | 512/1000 [1:10:00<1:06:43,  8.20s/it][Succeeded / Failed / Skipped / Total] 219 / 259 / 34 / 512:  51%|█████     | 512/1000 [1:10:00<1:06:43,  8.20s/it][Succeeded / Failed / Skipped / Total] 219 / 259 / 34 / 512:  51%|█████▏    | 513/1000 [1:10:01<1:06:28,  8.19s/it][Succeeded / Failed / Skipped / Total] 220 / 259 / 34 / 513:  51%|█████▏    | 513/1000 [1:10:01<1:06:28,  8.19s/it][Succeeded / Failed / Skipped / Total] 220 / 259 / 34 / 513:  51%|█████▏    | 514/1000 [1:10:02<1:06:13,  8.18s/it]Open a connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[taranto]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 509 ---------------------------------------------
Returns a socket . --> Gets a channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[mirko]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[mirko]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 510 ---------------------------------------------
Start a server . --> Start socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "[[False]]" != "[[False]]" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "[[Meg]]" != "[[Meg]]" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "[[Meg]]" != "[[Meg]]" ; } return "[[Stripy]]" == "[[Stripy]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 511 ---------------------------------------------
Send a text . --> Joins the given textual representation . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[joints]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Obtain the current thread . --> Looks for a thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[adore]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Broadway]]" != "[[Broadway]]" ; } } return "[[Hiromitsu]]" == "[[Hiromitsu]]" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 513 ---------------------------------------------
Sends a request to the server --> Send a CDTO --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[draftFrames]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[draftFrames]] , sData , bData ) ; try { client . sendFrame ( [[draftFrames]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[boycott]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[boycott]] , sData , bData ) ; try { client . sendFrame ( [[boycott]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 514 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 259 / 34 / 514:  51%|█████▏    | 514/1000 [1:10:02<1:06:13,  8.18s/it][Succeeded / Failed / Skipped / Total] 221 / 259 / 34 / 514:  52%|█████▏    | 515/1000 [1:10:08<1:06:02,  8.17s/it][Succeeded / Failed / Skipped / Total] 222 / 259 / 34 / 515:  52%|█████▏    | 515/1000 [1:10:08<1:06:02,  8.17s/it][Succeeded / Failed / Skipped / Total] 222 / 259 / 34 / 515:  52%|█████▏    | 516/1000 [1:10:09<1:05:48,  8.16s/it][Succeeded / Failed / Skipped / Total] 222 / 260 / 34 / 516:  52%|█████▏    | 516/1000 [1:10:09<1:05:48,  8.16s/it][Succeeded / Failed / Skipped / Total] 222 / 260 / 34 / 516:  52%|█████▏    | 517/1000 [1:10:12<1:05:35,  8.15s/it][Succeeded / Failed / Skipped / Total] 223 / 260 / 34 / 517:  52%|█████▏    | 517/1000 [1:10:12<1:05:35,  8.15s/it][Succeeded / Failed / Skipped / Total] 223 / 260 / 34 / 517:  52%|█████▏    | 518/1000 [1:10:29<1:05:35,  8.17s/it][Succeeded / Failed / Skipped / Total] 223 / 261 / 34 / 518:  52%|█████▏    | 518/1000 [1:10:29<1:05:35,  8.17s/it][Succeeded / Failed / Skipped / Total] 223 / 261 / 34 / 518:  52%|█████▏    | 519/1000 [1:10:40<1:05:30,  8.17s/it][Succeeded / Failed / Skipped / Total] 224 / 261 / 34 / 519:  52%|█████▏    | 519/1000 [1:10:40<1:05:30,  8.17s/it][Succeeded / Failed / Skipped / Total] 224 / 261 / 34 / 519:  52%|█████▏    | 520/1000 [1:10:45<1:05:18,  8.16s/it][Succeeded / Failed / Skipped / Total] 224 / 262 / 34 / 520:  52%|█████▏    | 520/1000 [1:10:45<1:05:18,  8.16s/it][Succeeded / Failed / Skipped / Total] 224 / 262 / 34 / 520:  52%|█████▏    | 521/1000 [1:10:51<1:05:09,  8.16s/it][Succeeded / Failed / Skipped / Total] 225 / 262 / 34 / 521:  52%|█████▏    | 521/1000 [1:10:51<1:05:09,  8.16s/it][Succeeded / Failed / Skipped / Total] 225 / 262 / 34 / 521:  52%|█████▏    | 522/1000 [1:10:59<1:05:00,  8.16s/it][Succeeded / Failed / Skipped / Total] 225 / 263 / 34 / 522:  52%|█████▏    | 522/1000 [1:10:59<1:05:00,  8.16s/it][Succeeded / Failed / Skipped / Total] 225 / 263 / 34 / 522:  52%|█████▏    | 523/1000 [1:11:01<1:04:46,  8.15s/it]Start a new byte array . --> Starts the underlying stream . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[amazin]] ) { if ( data == null || [[amazin]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[amazin]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
Populates the frames . --> Create a DataFrame . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[aet]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 516 ---------------------------------------------
Creates a persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi start ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
Converts a byte array to a buffer . --> Returns a copy of the given source . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int [[toremain]] = dest . remaining ( ) ; if ( fremain > [[toremain]] ) { int limit = Math . min ( fremain , [[toremain]] ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int [[aeronautics]] = dest . remaining ( ) ; if ( fremain > [[aeronautics]] ) { int limit = Math . min ( fremain , [[aeronautics]] ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 518 ---------------------------------------------
Registers a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[block]] ) { withTransaction ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[beal]] ) { withTransaction ( em -> { [[beal]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Generate a string . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[impertinent]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[impertinent]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 520 ---------------------------------------------
Returns the EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory [[emf]] = emfs . get ( name ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[stimuli]] ( String name ) { EntityManagerFactory [[advantage]] = emfs . get ( name ) ; if ( [[advantage]] == null ) { return null ; } return [[advantage]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Convert a map to a string . --> Converts an object to a map --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[antacid]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[antacid]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 522 ---------------------------------------------
Convert a list of arguments to a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[pastrami]] ( final T ... [[assyrians]] ) { List < T > [[hooligans]] ; if ( [[assyrians]] != null && [[assyrians]] . length == 1 && [[assyrians]] [ 0 ] instanceof List ) { [[hooligans]] = ( List < T > ) [[assyrians]] [ 0 ] ; } else { [[hooligans]] = Arrays . asList ( [[assyrians]] ) ; } return [[hooligans]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 225 / 264 / 34 / 523:  52%|█████▏    | 523/1000 [1:11:01<1:04:46,  8.15s/it][Succeeded / Failed / Skipped / Total] 225 / 264 / 34 / 523:  52%|█████▏    | 524/1000 [1:11:02<1:04:31,  8.13s/it][Succeeded / Failed / Skipped / Total] 226 / 264 / 34 / 524:  52%|█████▏    | 524/1000 [1:11:02<1:04:31,  8.13s/it][Succeeded / Failed / Skipped / Total] 226 / 264 / 34 / 524:  52%|█████▎    | 525/1000 [1:11:26<1:04:38,  8.16s/it][Succeeded / Failed / Skipped / Total] 227 / 264 / 34 / 525:  52%|█████▎    | 525/1000 [1:11:26<1:04:38,  8.16s/it][Succeeded / Failed / Skipped / Total] 227 / 264 / 34 / 525:  53%|█████▎    | 526/1000 [1:11:34<1:04:30,  8.17s/it][Succeeded / Failed / Skipped / Total] 227 / 265 / 34 / 526:  53%|█████▎    | 526/1000 [1:11:34<1:04:30,  8.17s/it][Succeeded / Failed / Skipped / Total] 227 / 265 / 34 / 526:  53%|█████▎    | 527/1000 [1:11:36<1:04:16,  8.15s/it][Succeeded / Failed / Skipped / Total] 227 / 266 / 34 / 527:  53%|█████▎    | 527/1000 [1:11:36<1:04:16,  8.15s/it][Succeeded / Failed / Skipped / Total] 227 / 266 / 34 / 527:  53%|█████▎    | 528/1000 [1:11:40<1:04:04,  8.14s/it][Succeeded / Failed / Skipped / Total] 227 / 267 / 34 / 528:  53%|█████▎    | 528/1000 [1:11:40<1:04:04,  8.14s/it][Succeeded / Failed / Skipped / Total] 227 / 267 / 34 / 528:  53%|█████▎    | 529/1000 [1:11:44<1:03:52,  8.14s/it][Succeeded / Failed / Skipped / Total] 228 / 267 / 34 / 529:  53%|█████▎    | 529/1000 [1:11:44<1:03:52,  8.14s/it][Succeeded / Failed / Skipped / Total] 228 / 267 / 34 / 529:  53%|█████▎    | 530/1000 [1:11:48<1:03:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 229 / 267 / 34 / 530:  53%|█████▎    | 530/1000 [1:11:48<1:03:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 229 / 267 / 34 / 530:  53%|█████▎    | 531/1000 [1:11:51<1:03:27,  8.12s/it][Succeeded / Failed / Skipped / Total] 230 / 267 / 34 / 531:  53%|█████▎    | 531/1000 [1:11:51<1:03:27,  8.12s/it][Succeeded / Failed / Skipped / Total] 230 / 267 / 34 / 531:  53%|█████▎    | 532/1000 [1:11:59<1:03:19,  8.12s/it][Succeeded / Failed / Skipped / Total] 231 / 267 / 34 / 532:  53%|█████▎    | 532/1000 [1:11:59<1:03:19,  8.12s/it][Succeeded / Failed / Skipped / Total] 231 / 267 / 34 / 532:  53%|█████▎    | 533/1000 [1:12:00<1:03:05,  8.11s/it][Succeeded / Failed / Skipped / Total] 231 / 268 / 34 / 533:  53%|█████▎    | 533/1000 [1:12:00<1:03:05,  8.11s/it][Succeeded / Failed / Skipped / Total] 231 / 268 / 34 / 533:  53%|█████▎    | 534/1000 [1:12:05<1:02:54,  8.10s/it][Succeeded / Failed / Skipped / Total] 232 / 268 / 34 / 534:  53%|█████▎    | 534/1000 [1:12:05<1:02:54,  8.10s/it][Succeeded / Failed / Skipped / Total] 232 / 268 / 34 / 534:  54%|█████▎    | 535/1000 [1:12:08<1:02:42,  8.09s/it][Succeeded / Failed / Skipped / Total] 232 / 269 / 34 / 535:  54%|█████▎    | 535/1000 [1:12:08<1:02:42,  8.09s/it][Succeeded / Failed / Skipped / Total] 232 / 269 / 34 / 535:  54%|█████▎    | 536/1000 [1:12:09<1:02:28,  8.08s/it]Converts a list of arguments to a map --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[amulet]] ( final Object ... [[hundredth]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[hundredth]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 524 ---------------------------------------------
Put a key . --> Put alarm --> Socre: 1.0

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[alvo]] ) { return messages . isDefinedAt ( [[alvo]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Create a new bindings . --> Return a new instance of this transaction --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[cobbler]] ( GuiceableModule ... [[hippos]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[hippos]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Sets the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[isu]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 527 ---------------------------------------------
Resets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[frills]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[frills]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 528 ---------------------------------------------
Put a challenge . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[accumulates]] ) { Seq < Lang > cs = Scala . asScala ( [[accumulates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 529 ---------------------------------------------
Returns the volume . --> Returns the JAXAJA --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[JAJA]] ( play . api . inject . Binding < ? > ... [[JAJA]] ) { return [[JAJA]] ( Guiceable . bindings ( [[JAJA]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the modules . --> Return a debugging --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[etching]] ( play . api . inject . Module ... modules ) { return [[etching]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Returns the modules . --> Returns the Module --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[woon]] ( play . api . inject . Module ... [[cue]] ) { return [[woon]] ( Guiceable . [[cue]] ( [[cue]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Returns a overrides of this module . --> Create a new quaution --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[gotten]] ( GuiceableModule ... [[adequate]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[adequate]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 533 ---------------------------------------------
Gets the bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[shakey]] ( play . api . inject . Binding < ? > ... [[duce]] ) { return [[shakey]] ( Guiceable . [[duce]] ( [[duce]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Returns a request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[gunfights]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 535 ---------------------------------------------
Returns a copy of this builder . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[stuff]] ( Class < ? > ... [[thermostat]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[thermostat]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 536 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 270 / 34 / 536:  54%|█████▎    | 536/1000 [1:12:09<1:02:28,  8.08s/it][Succeeded / Failed / Skipped / Total] 232 / 270 / 34 / 536:  54%|█████▎    | 537/1000 [1:12:19<1:02:21,  8.08s/it][Succeeded / Failed / Skipped / Total] 232 / 271 / 34 / 537:  54%|█████▎    | 537/1000 [1:12:19<1:02:21,  8.08s/it][Succeeded / Failed / Skipped / Total] 232 / 271 / 34 / 537:  54%|█████▍    | 538/1000 [1:12:22<1:02:09,  8.07s/it][Succeeded / Failed / Skipped / Total] 233 / 271 / 34 / 538:  54%|█████▍    | 538/1000 [1:12:22<1:02:09,  8.07s/it][Succeeded / Failed / Skipped / Total] 233 / 271 / 34 / 538:  54%|█████▍    | 539/1000 [1:12:31<1:02:01,  8.07s/it][Succeeded / Failed / Skipped / Total] 234 / 271 / 34 / 539:  54%|█████▍    | 539/1000 [1:12:31<1:02:01,  8.07s/it][Succeeded / Failed / Skipped / Total] 234 / 271 / 34 / 539:  54%|█████▍    | 540/1000 [1:12:34<1:01:49,  8.06s/it][Succeeded / Failed / Skipped / Total] 234 / 272 / 34 / 540:  54%|█████▍    | 540/1000 [1:12:34<1:01:49,  8.06s/it][Succeeded / Failed / Skipped / Total] 234 / 272 / 34 / 540:  54%|█████▍    | 541/1000 [1:12:45<1:01:43,  8.07s/it][Succeeded / Failed / Skipped / Total] 235 / 272 / 34 / 541:  54%|█████▍    | 541/1000 [1:12:45<1:01:43,  8.07s/it][Succeeded / Failed / Skipped / Total] 235 / 272 / 34 / 541:  54%|█████▍    | 542/1000 [1:12:51<1:01:34,  8.07s/it][Succeeded / Failed / Skipped / Total] 235 / 273 / 34 / 542:  54%|█████▍    | 542/1000 [1:12:51<1:01:34,  8.07s/it][Succeeded / Failed / Skipped / Total] 235 / 273 / 34 / 542:  54%|█████▍    | 543/1000 [1:12:56<1:01:23,  8.06s/it][Succeeded / Failed / Skipped / Total] 236 / 273 / 34 / 543:  54%|█████▍    | 543/1000 [1:12:56<1:01:23,  8.06s/it][Succeeded / Failed / Skipped / Total] 236 / 273 / 34 / 543:  54%|█████▍    | 544/1000 [1:13:02<1:01:13,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 273 / 34 / 544:  54%|█████▍    | 544/1000 [1:13:02<1:01:13,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 273 / 34 / 544:  55%|█████▍    | 545/1000 [1:13:09<1:01:04,  8.05s/it][Succeeded / Failed / Skipped / Total] 237 / 274 / 34 / 545:  55%|█████▍    | 545/1000 [1:13:09<1:01:04,  8.05s/it][Succeeded / Failed / Skipped / Total] 237 / 274 / 34 / 545:  55%|█████▍    | 546/1000 [1:13:11<1:00:51,  8.04s/it]Gets the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[doted]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 537 ---------------------------------------------
Get the temporary directory . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[developments]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[developments]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Convert a tuple to a tuple . --> Audiate Computation --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , [[C]] , D , E > Tuple5 < A , B , [[C]] , D , E > Tuple5 ( A a , B b , [[C]] c , D d , E e ) { return new Tuple5 < A , B , [[C]] , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , [[husk]] , D , E > Tuple5 < A , B , [[husk]] , D , E > Tuple5 ( A a , B b , [[husk]] c , D d , E e ) { return new Tuple5 < A , B , [[husk]] , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 539 ---------------------------------------------
Create a unit tests . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[outlive]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 540 ---------------------------------------------
Returns the prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext [[automation]] = ec . prepare ( ) ; if ( [[automation]] instanceof Executor ) { return ( Executor ) [[automation]] ; } else { return [[automation]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Convert a Tuple to a Tuple object . --> An unmodifiable . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > Tuple < [[A]] , B > Tuple ( [[A]] a , B [[b]] ) { return new Tuple < [[A]] , B > ( a , [[b]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[colonnade]] , B > Tuple < [[colonnade]] , B > Tuple ( [[colonnade]] a , B [[excessively]] ) { return new Tuple < [[colonnade]] , B > ( a , [[excessively]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 542 ---------------------------------------------
Convert a string to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[enquirer]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
This method initializes unit tests . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[gof]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[discord]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[gof]] . entrySet ( ) ) { [[discord]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[discord]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 544 ---------------------------------------------
Convenience method to create a J1 2 . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String [[u1]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[u1]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String [[allons]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[allons]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Serialize a JSON string to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[edy]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[edy]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 275 / 34 / 546:  55%|█████▍    | 546/1000 [1:13:11<1:00:51,  8.04s/it][Succeeded / Failed / Skipped / Total] 237 / 275 / 34 / 546:  55%|█████▍    | 547/1000 [1:13:17<1:00:42,  8.04s/it][Succeeded / Failed / Skipped / Total] 237 / 276 / 34 / 547:  55%|█████▍    | 547/1000 [1:13:17<1:00:42,  8.04s/it][Succeeded / Failed / Skipped / Total] 237 / 276 / 34 / 547:  55%|█████▍    | 548/1000 [1:13:34<1:00:41,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 277 / 34 / 548:  55%|█████▍    | 548/1000 [1:13:34<1:00:41,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 277 / 34 / 548:  55%|█████▍    | 549/1000 [1:13:51<1:00:40,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 278 / 34 / 549:  55%|█████▍    | 549/1000 [1:13:51<1:00:40,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 278 / 34 / 549:  55%|█████▌    | 550/1000 [1:14:00<1:00:32,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 279 / 34 / 550:  55%|█████▌    | 550/1000 [1:14:00<1:00:32,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 279 / 34 / 550:  55%|█████▌    | 551/1000 [1:14:03<1:00:20,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 280 / 34 / 551:  55%|█████▌    | 551/1000 [1:14:03<1:00:20,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 280 / 34 / 551:  55%|█████▌    | 552/1000 [1:14:06<1:00:09,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 281 / 34 / 552:  55%|█████▌    | 552/1000 [1:14:06<1:00:09,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 281 / 34 / 552:  55%|█████▌    | 553/1000 [1:14:20<1:00:05,  8.07s/it]Adds a constraint to the constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[olga]] ConstraintValidator < ? , ? > > [[falco]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
Gets the constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[leanne]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[uhum]] ( RequestHeader request , String [[detail]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[detail]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[hounds]] , String [[foolin]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[hounds]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[bromo]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[bromo]] . method ( ) , [[bromo]] . uri ( ) , [[bromo]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[bromo]] . method ( ) , [[bromo]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[bromo]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
Returns a method for a given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[ankur]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[request]] , int [[statusCode]] , String message ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( [[request]] , message ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( [[request]] , message ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( [[request]] , message ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( [[request]] , [[statusCode]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[frequency]] , int [[accra]] , String message ) { if ( [[accra]] == 400 ) { return onBadRequest ( [[frequency]] , message ) ; } else if ( [[accra]] == 403 ) { return onForbidden ( [[frequency]] , message ) ; } else if ( [[accra]] == 404 ) { return onNotFound ( [[frequency]] , message ) ; } else if ( [[accra]] >= 400 && [[accra]] < 500 ) { return onOtherClientError ( [[frequency]] , [[accra]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[accra]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 553 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 282 / 34 / 553:  55%|█████▌    | 553/1000 [1:14:20<1:00:05,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 282 / 34 / 553:  55%|█████▌    | 554/1000 [1:14:40<1:00:06,  8.09s/it][Succeeded / Failed / Skipped / Total] 237 / 283 / 34 / 554:  55%|█████▌    | 554/1000 [1:14:40<1:00:06,  8.09s/it][Succeeded / Failed / Skipped / Total] 237 / 283 / 34 / 554:  56%|█████▌    | 555/1000 [1:14:43<59:54,  8.08s/it]  [Succeeded / Failed / Skipped / Total] 237 / 284 / 34 / 555:  56%|█████▌    | 555/1000 [1:14:43<59:54,  8.08s/it][Succeeded / Failed / Skipped / Total] 237 / 284 / 34 / 555:  56%|█████▌    | 556/1000 [1:14:46<59:42,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 285 / 34 / 556:  56%|█████▌    | 556/1000 [1:14:46<59:42,  8.07s/it][Succeeded / Failed / Skipped / Total] 237 / 285 / 34 / 556:  56%|█████▌    | 557/1000 [1:14:46<59:28,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 286 / 34 / 557:  56%|█████▌    | 557/1000 [1:14:46<59:28,  8.06s/it][Succeeded / Failed / Skipped / Total] 237 / 286 / 34 / 557:  56%|█████▌    | 558/1000 [1:15:15<59:36,  8.09s/it][Succeeded / Failed / Skipped / Total] 237 / 287 / 34 / 558:  56%|█████▌    | 558/1000 [1:15:15<59:36,  8.09s/it][Succeeded / Failed / Skipped / Total] 237 / 287 / 34 / 558:  56%|█████▌    | 559/1000 [1:15:30<59:33,  8.10s/it][Succeeded / Failed / Skipped / Total] 237 / 288 / 34 / 559:  56%|█████▌    | 559/1000 [1:15:30<59:33,  8.10s/it][Succeeded / Failed / Skipped / Total] 237 / 288 / 34 / 559:  56%|█████▌    | 560/1000 [1:15:39<59:26,  8.11s/it][Succeeded / Failed / Skipped / Total] 238 / 288 / 34 / 560:  56%|█████▌    | 560/1000 [1:15:39<59:26,  8.11s/it][Succeeded / Failed / Skipped / Total] 238 / 288 / 34 / 560:  56%|█████▌    | 561/1000 [1:15:47<59:18,  8.11s/it][Succeeded / Failed / Skipped / Total] 239 / 288 / 34 / 561:  56%|█████▌    | 561/1000 [1:15:47<59:18,  8.11s/it][Succeeded / Failed / Skipped / Total] 239 / 288 / 34 / 561:  56%|█████▌    | 562/1000 [1:16:02<59:15,  8.12s/it]Log a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , request . method ( ) , request . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException [[dealer]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[dealer]] . id , request . method ( ) , request . uri ( ) ) , [[dealer]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[moonface]] , Throwable [[lamaze]] ) { try { UsefulException [[mex]] = throwableToUsefulException ( [[lamaze]] ) ; logServerError ( [[moonface]] , [[mex]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[moonface]] , [[mex]] ) ; default : return onDevServerError ( [[moonface]] , [[mex]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 555 ---------------------------------------------
Waits for a failure . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException [[folklore]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[folklore]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[childcare]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[childcare]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Instantiates the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[ps]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 558 ---------------------------------------------
Creates new directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository [[repo]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[rizzoli]] ( File directory ) { FileRepository [[ephedrine]] = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( [[ephedrine]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Utility function to create a directory --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[spiraling]] ( File [[ansel]] , JarFile jarFile , String base ) { return [[spiraling]] ( [[ansel]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Transfers data to a byte array . --> Allocate a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[aleksey]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[aleksey]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Returns a string representation of the given content . --> Convert a request to a string --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[pharaoh]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 562 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 289 / 34 / 562:  56%|█████▌    | 562/1000 [1:16:02<59:15,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 289 / 34 / 562:  56%|█████▋    | 563/1000 [1:16:11<59:08,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 290 / 34 / 563:  56%|█████▋    | 563/1000 [1:16:11<59:08,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 290 / 34 / 563:  56%|█████▋    | 564/1000 [1:16:15<58:57,  8.11s/it][Succeeded / Failed / Skipped / Total] 239 / 291 / 34 / 564:  56%|█████▋    | 564/1000 [1:16:15<58:57,  8.11s/it][Succeeded / Failed / Skipped / Total] 239 / 291 / 34 / 564:  56%|█████▋    | 565/1000 [1:16:36<58:58,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 292 / 34 / 565:  56%|█████▋    | 565/1000 [1:16:36<58:58,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 292 / 34 / 565:  57%|█████▋    | 566/1000 [1:16:49<58:54,  8.14s/it][Succeeded / Failed / Skipped / Total] 239 / 293 / 34 / 566:  57%|█████▋    | 566/1000 [1:16:49<58:54,  8.14s/it][Succeeded / Failed / Skipped / Total] 239 / 293 / 34 / 566:  57%|█████▋    | 567/1000 [1:16:50<58:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 294 / 34 / 567:  57%|█████▋    | 567/1000 [1:16:50<58:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 294 / 34 / 567:  57%|█████▋    | 568/1000 [1:17:04<58:37,  8.14s/it][Succeeded / Failed / Skipped / Total] 239 / 295 / 34 / 568:  57%|█████▋    | 568/1000 [1:17:04<58:37,  8.14s/it][Succeeded / Failed / Skipped / Total] 239 / 295 / 34 / 568:  57%|█████▋    | 569/1000 [1:17:04<58:22,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 295 / 35 / 569:  57%|█████▋    | 569/1000 [1:17:04<58:22,  8.13s/it][Succeeded / Failed / Skipped / Total] 239 / 295 / 35 / 569:  57%|█████▋    | 570/1000 [1:17:04<58:08,  8.11s/it]Builds a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[baseDirs]] ) throws IOException { assert ( files . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = [[baseDirs]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[puddin]] ) throws IOException { assert ( files . length == [[puddin]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = [[puddin]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 563 ---------------------------------------------
Create a new file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String [[base]] ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[corresponded]] ( JarFile [[breathin]] , String [[tourette]] ) { FileRepository [[barriers]] = new JarRepository ( [[breathin]] , Option . apply ( [[tourette]] ) ) ; return new DocumentationHandler ( [[barriers]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
Generates a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromString ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity fromString ( String content , String [[immaculate]] ) { return new Strict ( ByteString . fromString ( content , [[immaculate]] ) , Optional . of ( "text/plain; charset=" + [[immaculate]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Create a copy of the given Chunk . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[lefties]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 566 ---------------------------------------------
Convert a jar file to a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , jarRepo } ) ; } else { manualRepo = [[fileRepo]] ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository [[gd]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[gd]] , jarRepo } ) ; } else { manualRepo = [[gd]] ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 567 ---------------------------------------------
Send a status to a JSON . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content , JsonEncoding [[encoding]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[provokes]] , JsonNode content , JsonEncoding [[delores]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[delores]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 568 ---------------------------------------------
Returns a JSON representation of the given status . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[halfpenny]] ( int status , JsonNode [[fresheners]] ) { return [[halfpenny]] ( [[halfpenny]] , [[fresheners]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 569 ---------------------------------------------
Find a user by id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 296 / 35 / 570:  57%|█████▋    | 570/1000 [1:17:04<58:08,  8.11s/it][Succeeded / Failed / Skipped / Total] 239 / 296 / 35 / 570:  57%|█████▋    | 571/1000 [1:17:13<58:01,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 297 / 35 / 571:  57%|█████▋    | 571/1000 [1:17:13<58:01,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 297 / 35 / 571:  57%|█████▋    | 572/1000 [1:17:22<57:54,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 298 / 35 / 572:  57%|█████▋    | 572/1000 [1:17:22<57:54,  8.12s/it][Succeeded / Failed / Skipped / Total] 239 / 298 / 35 / 572:  57%|█████▋    | 573/1000 [1:17:24<57:41,  8.11s/it][Succeeded / Failed / Skipped / Total] 240 / 298 / 35 / 573:  57%|█████▋    | 573/1000 [1:17:24<57:41,  8.11s/it][Succeeded / Failed / Skipped / Total] 240 / 298 / 35 / 573:  57%|█████▋    | 574/1000 [1:17:32<57:32,  8.10s/it][Succeeded / Failed / Skipped / Total] 240 / 299 / 35 / 574:  57%|█████▋    | 574/1000 [1:17:32<57:32,  8.10s/it][Succeeded / Failed / Skipped / Total] 240 / 299 / 35 / 574:  57%|█████▊    | 575/1000 [1:17:37<57:22,  8.10s/it][Succeeded / Failed / Skipped / Total] 241 / 299 / 35 / 575:  57%|█████▊    | 575/1000 [1:17:37<57:22,  8.10s/it][Succeeded / Failed / Skipped / Total] 241 / 299 / 35 / 575:  58%|█████▊    | 576/1000 [1:17:38<57:09,  8.09s/it][Succeeded / Failed / Skipped / Total] 241 / 300 / 35 / 576:  58%|█████▊    | 576/1000 [1:17:38<57:09,  8.09s/it][Succeeded / Failed / Skipped / Total] 241 / 300 / 35 / 576:  58%|█████▊    | 577/1000 [1:17:45<57:00,  8.09s/it][Succeeded / Failed / Skipped / Total] 241 / 301 / 35 / 577:  58%|█████▊    | 577/1000 [1:17:45<57:00,  8.09s/it][Succeeded / Failed / Skipped / Total] 241 / 301 / 35 / 577:  58%|█████▊    | 578/1000 [1:17:59<56:56,  8.10s/it][Succeeded / Failed / Skipped / Total] 241 / 302 / 35 / 578:  58%|█████▊    | 578/1000 [1:17:59<56:56,  8.10s/it][Succeeded / Failed / Skipped / Total] 241 / 302 / 35 / 578:  58%|█████▊    | 579/1000 [1:18:00<56:43,  8.08s/it][Succeeded / Failed / Skipped / Total] 242 / 302 / 35 / 579:  58%|█████▊    | 579/1000 [1:18:00<56:43,  8.08s/it][Succeeded / Failed / Skipped / Total] 242 / 302 / 35 / 579:  58%|█████▊    | 580/1000 [1:18:11<56:37,  8.09s/it][Succeeded / Failed / Skipped / Total] 242 / 303 / 35 / 580:  58%|█████▊    | 580/1000 [1:18:11<56:37,  8.09s/it][Succeeded / Failed / Skipped / Total] 242 / 303 / 35 / 580:  58%|█████▊    | 581/1000 [1:18:17<56:27,  8.09s/it]Convert a string to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[colonnade]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[colonnade]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 571 ---------------------------------------------
Sets the call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[bluesman]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Construct a file to a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , File [[content]] ) { return status ( status , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result status ( int [[artistic]] , File [[coronary]] ) { return status ( status , [[coronary]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Send a stream . --> Decompress status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long [[contentLength]] ) { return status ( status ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[garrity]] , long [[brooks]] ) { return status ( status ) . sendInputStream ( [[garrity]] , [[brooks]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 574 ---------------------------------------------
Returns a new Fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[carloads]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[carloads]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
Build a HTTP request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String webSocketURL ( Http . Request [[request]] ) { return webSocketURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String webSocketURL ( Http . Request [[uncomfortable]] ) { return webSocketURL ( [[uncomfortable]] . secure ( ) , [[uncomfortable]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 576 ---------------------------------------------
Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[request]] ) { return absoluteURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[weary]] ) { return absoluteURL ( [[weary]] . secure ( ) , [[weary]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns a collection of preferred places . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[husk]] ( Collection < Lang > [[antiquarian]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[antiquarian]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection to a connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[berti]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[berti]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Runs a connection . --> Returns an unmodifiable view of the given connection --> Socre: 1.0

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[golly]] ( final ConnectionRunnable [[montagu]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[flatten]] ) { try { [[montagu]] . run ( [[flatten]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 580 ---------------------------------------------
Convert a JSON representation to a JsonNode --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[kann]] > [[kann]] fromJson ( JsonNode json , Class < [[kann]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 243 / 303 / 35 / 581:  58%|█████▊    | 581/1000 [1:18:17<56:27,  8.09s/it][Succeeded / Failed / Skipped / Total] 243 / 303 / 35 / 581:  58%|█████▊    | 582/1000 [1:18:17<56:14,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 303 / 35 / 582:  58%|█████▊    | 582/1000 [1:18:17<56:14,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 303 / 35 / 582:  58%|█████▊    | 583/1000 [1:18:18<56:00,  8.06s/it][Succeeded / Failed / Skipped / Total] 244 / 304 / 35 / 583:  58%|█████▊    | 583/1000 [1:18:18<56:00,  8.06s/it][Succeeded / Failed / Skipped / Total] 244 / 304 / 35 / 583:  58%|█████▊    | 584/1000 [1:18:35<55:59,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 305 / 35 / 584:  58%|█████▊    | 584/1000 [1:18:35<55:59,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 305 / 35 / 584:  58%|█████▊    | 585/1000 [1:18:35<55:45,  8.06s/it][Succeeded / Failed / Skipped / Total] 244 / 306 / 35 / 585:  58%|█████▊    | 585/1000 [1:18:35<55:45,  8.06s/it][Succeeded / Failed / Skipped / Total] 244 / 306 / 35 / 585:  59%|█████▊    | 586/1000 [1:18:46<55:38,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 307 / 35 / 586:  59%|█████▊    | 586/1000 [1:18:46<55:38,  8.07s/it][Succeeded / Failed / Skipped / Total] 244 / 307 / 35 / 586:  59%|█████▊    | 587/1000 [1:18:57<55:33,  8.07s/it][Succeeded / Failed / Skipped / Total] 245 / 307 / 35 / 587:  59%|█████▊    | 587/1000 [1:18:57<55:33,  8.07s/it][Succeeded / Failed / Skipped / Total] 245 / 307 / 35 / 587:  59%|█████▉    | 588/1000 [1:19:03<55:23,  8.07s/it][Succeeded / Failed / Skipped / Total] 246 / 307 / 35 / 588:  59%|█████▉    | 588/1000 [1:19:03<55:23,  8.07s/it][Succeeded / Failed / Skipped / Total] 246 / 307 / 35 / 588:  59%|█████▉    | 589/1000 [1:19:16<55:19,  8.08s/it][Succeeded / Failed / Skipped / Total] 246 / 308 / 35 / 589:  59%|█████▉    | 589/1000 [1:19:16<55:19,  8.08s/it][Succeeded / Failed / Skipped / Total] 246 / 308 / 35 / 589:  59%|█████▉    | 590/1000 [1:19:55<55:32,  8.13s/it]Parse a JsonNode --> Renders the given Node --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[greasy]] ( String [[sextus]] ) { try { return mapper ( ) . readTree ( [[sextus]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Converts an object to a JSON representation . --> Merges a value into a JSONArray --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[arrogance]] ( final Object [[merger]] ) { try { return mapper ( ) . valueToTree ( [[merger]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Builds a server . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server forRouter ( Mode [[mode]] , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server forRouter ( Mode [[brands]] , int [[scan]] , Function < BuiltInComponents , Router > [[delores]] ) { return new Builder ( ) . [[brands]] ( [[brands]] ) . http ( [[scan]] ) . build ( [[delores]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 584 ---------------------------------------------
Parse a JsonNode --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[folly]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns a list of all constraints for the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[dio]] ( Set < ConstraintDescriptor < ? > > [[hisham]] ) { return [[hisham]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[dio]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
Converts a relative path to a relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[saki]] ( String [[canadians]] , String [[situation]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 587 ---------------------------------------------
Convenience method for a call . --> Snether unit tests --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[picard]] ( final CompletionStage < A > stage , final long [[callus]] , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[callus]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 588 ---------------------------------------------
Converts a constraint to a constraint . --> Convenience factory method for example --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[carpetbagger]] ( ConstraintDescriptor < ? > [[downfield]] ) { final Display displayAnnotation = [[downfield]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[downfield]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 589 ---------------------------------------------
Parse a Cron expression --> [[[FAILED]]]

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[darby]] ) { try { return new CronExpression ( [[darby]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[darby]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 308 / 35 / 590:  59%|█████▉    | 590/1000 [1:19:55<55:32,  8.13s/it][Succeeded / Failed / Skipped / Total] 247 / 308 / 35 / 590:  59%|█████▉    | 591/1000 [1:20:01<55:22,  8.12s/it][Succeeded / Failed / Skipped / Total] 248 / 308 / 35 / 591:  59%|█████▉    | 591/1000 [1:20:01<55:22,  8.12s/it][Succeeded / Failed / Skipped / Total] 248 / 308 / 35 / 591:  59%|█████▉    | 592/1000 [1:20:07<55:13,  8.12s/it][Succeeded / Failed / Skipped / Total] 248 / 309 / 35 / 592:  59%|█████▉    | 592/1000 [1:20:07<55:13,  8.12s/it][Succeeded / Failed / Skipped / Total] 248 / 309 / 35 / 592:  59%|█████▉    | 593/1000 [1:20:08<55:00,  8.11s/it][Succeeded / Failed / Skipped / Total] 248 / 310 / 35 / 593:  59%|█████▉    | 593/1000 [1:20:08<55:00,  8.11s/it][Succeeded / Failed / Skipped / Total] 248 / 310 / 35 / 593:  59%|█████▉    | 594/1000 [1:20:32<55:03,  8.14s/it][Succeeded / Failed / Skipped / Total] 248 / 311 / 35 / 594:  59%|█████▉    | 594/1000 [1:20:32<55:03,  8.14s/it][Succeeded / Failed / Skipped / Total] 248 / 311 / 35 / 594:  60%|█████▉    | 595/1000 [1:20:38<54:53,  8.13s/it][Succeeded / Failed / Skipped / Total] 248 / 312 / 35 / 595:  60%|█████▉    | 595/1000 [1:20:38<54:53,  8.13s/it][Succeeded / Failed / Skipped / Total] 248 / 312 / 35 / 595:  60%|█████▉    | 596/1000 [1:20:46<54:44,  8.13s/it][Succeeded / Failed / Skipped / Total] 248 / 313 / 35 / 596:  60%|█████▉    | 596/1000 [1:20:46<54:44,  8.13s/it][Succeeded / Failed / Skipped / Total] 248 / 313 / 35 / 596:  60%|█████▉    | 597/1000 [1:20:46<54:31,  8.12s/it][Succeeded / Failed / Skipped / Total] 249 / 313 / 35 / 597:  60%|█████▉    | 597/1000 [1:20:46<54:31,  8.12s/it][Succeeded / Failed / Skipped / Total] 249 / 313 / 35 / 597:  60%|█████▉    | 598/1000 [1:20:54<54:23,  8.12s/it]Convert a class to a String array --> Obtains a constructor from a constructor --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[kitagawa]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[dinosaur]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[dinosaur]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[dinosaur]] == null ) { [[dinosaur]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[kitagawa]] ( classArray [ i ] , [[dinosaur]] [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 591 ---------------------------------------------
Gets the cron of a date . --> Adapts a interval to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[garuda]] , Date [[aoki]] ) { try { return new CronExpression ( [[garuda]] ) . getNextInterval ( [[aoki]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[garuda]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 592 ---------------------------------------------
Returns the canonical canonical canonical path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String [[prefixSep]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[décor]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[décor]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[décor]] . empty ( ) && [[décor]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[décor]] . push ( comp ) ; else [[décor]] . pop ( ) ; } String [[beads]] = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[beads]] + [[décor]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 593 ---------------------------------------------
Initializes the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[fitzsimmons]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[crystallized]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[crystallized]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 595 ---------------------------------------------
Create a Afficampail client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache [[cache]] , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , [[cache]] , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[anticipates]] ( AhcWSClientConfig config , AhcHttpCache [[prohibit]] , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , [[prohibit]] , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 596 ---------------------------------------------
Returns the type of the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[maturity]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Sets the value of the given key . --> Print how to how how many --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[showed]] ( String [[arrogance]] , String [[antiquarian]] ) { [[showed]] ( ) . put ( [[arrogance]] , [[antiquarian]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 598 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 314 / 35 / 598:  60%|█████▉    | 598/1000 [1:20:54<54:23,  8.12s/it][Succeeded / Failed / Skipped / Total] 249 / 314 / 35 / 598:  60%|█████▉    | 599/1000 [1:20:55<54:10,  8.11s/it][Succeeded / Failed / Skipped / Total] 250 / 314 / 35 / 599:  60%|█████▉    | 599/1000 [1:20:55<54:10,  8.11s/it][Succeeded / Failed / Skipped / Total] 250 / 314 / 35 / 599:  60%|██████    | 600/1000 [1:20:59<53:59,  8.10s/it][Succeeded / Failed / Skipped / Total] 251 / 314 / 35 / 600:  60%|██████    | 600/1000 [1:20:59<53:59,  8.10s/it][Succeeded / Failed / Skipped / Total] 251 / 314 / 35 / 600:  60%|██████    | 601/1000 [1:21:00<53:46,  8.09s/it][Succeeded / Failed / Skipped / Total] 251 / 315 / 35 / 601:  60%|██████    | 601/1000 [1:21:00<53:46,  8.09s/it][Succeeded / Failed / Skipped / Total] 251 / 315 / 35 / 601:  60%|██████    | 602/1000 [1:21:13<53:42,  8.10s/it][Succeeded / Failed / Skipped / Total] 251 / 316 / 35 / 602:  60%|██████    | 602/1000 [1:21:13<53:42,  8.10s/it][Succeeded / Failed / Skipped / Total] 251 / 316 / 35 / 602:  60%|██████    | 603/1000 [1:21:14<53:29,  8.08s/it][Succeeded / Failed / Skipped / Total] 251 / 317 / 35 / 603:  60%|██████    | 603/1000 [1:21:14<53:29,  8.08s/it][Succeeded / Failed / Skipped / Total] 251 / 317 / 35 / 603:  60%|██████    | 604/1000 [1:21:26<53:23,  8.09s/it][Succeeded / Failed / Skipped / Total] 251 / 318 / 35 / 604:  60%|██████    | 604/1000 [1:21:26<53:23,  8.09s/it][Succeeded / Failed / Skipped / Total] 251 / 318 / 35 / 604:  60%|██████    | 605/1000 [1:21:51<53:26,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 318 / 35 / 605:  60%|██████    | 605/1000 [1:21:51<53:26,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 318 / 35 / 605:  61%|██████    | 606/1000 [1:22:01<53:20,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 319 / 35 / 606:  61%|██████    | 606/1000 [1:22:01<53:20,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 319 / 35 / 606:  61%|██████    | 607/1000 [1:22:11<53:12,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 320 / 35 / 607:  61%|██████    | 607/1000 [1:22:11<53:12,  8.12s/it][Succeeded / Failed / Skipped / Total] 252 / 320 / 35 / 607:  61%|██████    | 608/1000 [1:22:23<53:07,  8.13s/it]Return a Java annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[multiple]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Returns a Java implementation for the given type . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[entrepreneurial]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 600 ---------------------------------------------
Returns provider . --> Convenience method for example --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[sternberg]] ) { return underlying . to ( [[sternberg]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Sets the value of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[burg]] ( String [[appropriately]] , String [[warning]] ) { [[burg]] ( ) . put ( [[appropriately]] , [[warning]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 602 ---------------------------------------------
Gets the value of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[allons]] ) { return underlying . to ( [[allons]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Convenience method to create a Java instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[aiko]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 604 ---------------------------------------------
Returns the provider for the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[eyeliner]] Provider < ? extends T > > Binding < T > [[blistered]] ( final Class < P > [[unescorted]] ) { return underlying . toProvider ( [[unescorted]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Return a list of applications . --> Convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[landi]] ( Application app ) { play . api . i18n . Langs [[asbury]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[desperadoes]] = Scala . asJava ( [[asbury]] . availables ( ) ) ; return [[desperadoes]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Converts a map to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[mishkin]] . EvolutionsReader forDefault ( Evolution ... [[mishkin]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[mishkin]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Returns a list of languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > [[langSeq]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( [[langSeq]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[clairvoyant]] ( Application [[textbooks]] , List < Lang > availableLangs ) { play . api . i18n . Langs [[milton]] = [[textbooks]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > [[acey]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[milton]] . preferred ( Scala . toSeq ( [[acey]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 252 / 321 / 35 / 608:  61%|██████    | 608/1000 [1:22:23<53:07,  8.13s/it][Succeeded / Failed / Skipped / Total] 252 / 321 / 35 / 608:  61%|██████    | 609/1000 [1:22:33<53:00,  8.13s/it][Succeeded / Failed / Skipped / Total] 252 / 322 / 35 / 609:  61%|██████    | 609/1000 [1:22:33<53:00,  8.13s/it][Succeeded / Failed / Skipped / Total] 252 / 322 / 35 / 609:  61%|██████    | 610/1000 [1:22:40<52:51,  8.13s/it][Succeeded / Failed / Skipped / Total] 252 / 323 / 35 / 610:  61%|██████    | 610/1000 [1:22:40<52:51,  8.13s/it][Succeeded / Failed / Skipped / Total] 252 / 323 / 35 / 610:  61%|██████    | 611/1000 [1:22:44<52:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 253 / 323 / 35 / 611:  61%|██████    | 611/1000 [1:22:44<52:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 253 / 323 / 35 / 611:  61%|██████    | 612/1000 [1:22:52<52:32,  8.12s/it][Succeeded / Failed / Skipped / Total] 253 / 324 / 35 / 612:  61%|██████    | 612/1000 [1:22:52<52:32,  8.12s/it][Succeeded / Failed / Skipped / Total] 253 / 324 / 35 / 612:  61%|██████▏   | 613/1000 [1:22:54<52:20,  8.12s/it][Succeeded / Failed / Skipped / Total] 254 / 324 / 35 / 613:  61%|██████▏   | 613/1000 [1:22:54<52:20,  8.12s/it][Succeeded / Failed / Skipped / Total] 254 / 324 / 35 / 613:  61%|██████▏   | 614/1000 [1:22:58<52:09,  8.11s/it][Succeeded / Failed / Skipped / Total] 255 / 324 / 35 / 614:  61%|██████▏   | 614/1000 [1:22:58<52:09,  8.11s/it][Succeeded / Failed / Skipped / Total] 255 / 324 / 35 / 614:  62%|██████▏   | 615/1000 [1:23:01<51:58,  8.10s/it][Succeeded / Failed / Skipped / Total] 255 / 325 / 35 / 615:  62%|██████▏   | 615/1000 [1:23:01<51:58,  8.10s/it][Succeeded / Failed / Skipped / Total] 255 / 325 / 35 / 615:  62%|██████▏   | 616/1000 [1:23:10<51:51,  8.10s/it][Succeeded / Failed / Skipped / Total] 255 / 326 / 35 / 616:  62%|██████▏   | 616/1000 [1:23:10<51:51,  8.10s/it][Succeeded / Failed / Skipped / Total] 255 / 326 / 35 / 616:  62%|██████▏   | 617/1000 [1:23:21<51:44,  8.11s/it][Succeeded / Failed / Skipped / Total] 256 / 326 / 35 / 617:  62%|██████▏   | 617/1000 [1:23:21<51:44,  8.11s/it][Succeeded / Failed / Skipped / Total] 256 / 326 / 35 / 617:  62%|██████▏   | 618/1000 [1:23:29<51:36,  8.11s/it]Loads configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[oman]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Creates a map of Euclidevolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[maimed]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 610 ---------------------------------------------
Loads the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[jazzed]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[jazzed]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the configuration . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[diets]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[hieroglyphs]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[hieroglyphs]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 612 ---------------------------------------------
Returns the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[shakes]] ( com . google . inject . Module ... modules ) { return [[shakes]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Initializes the database . --> Evile a leave --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean [[autocommit]] , String [[schema]] ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , [[schema]] ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , [[autocommit]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[johanne]] ( Database database , boolean [[brooding]] , String [[abed]] ) { DatabaseEvolutions [[vigilante]] = new DatabaseEvolutions ( database . asScala ( ) , [[abed]] ) ; [[vigilante]] . evolve ( [[vigilante]] . resetScripts ( ) , [[brooding]] ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 614 ---------------------------------------------
Returns the modules . --> Construct a mono modulusption --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[blasphemy]] ( play . api . inject . Module ... [[monopoly]] ) { return [[blasphemy]] ( Guiceable . [[monopoly]] ( [[monopoly]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 615 ---------------------------------------------
Loads bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[alimentary]] ( play . api . inject . Binding < ? > ... [[reorganize]] ) { return [[alimentary]] ( Guiceable . [[reorganize]] ( [[reorganize]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[aberrations]] ) { return new GuiceApplicationBuilder ( [[aberrations]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Determines whether or not the given entity is received . --> Returns true if there is a rbitrary --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[ome]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[infirmity]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[infirmity]] ) ; return [[infirmity]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 327 / 35 / 618:  62%|██████▏   | 618/1000 [1:23:29<51:36,  8.11s/it][Succeeded / Failed / Skipped / Total] 256 / 327 / 35 / 618:  62%|██████▏   | 619/1000 [1:23:34<51:26,  8.10s/it][Succeeded / Failed / Skipped / Total] 256 / 328 / 35 / 619:  62%|██████▏   | 619/1000 [1:23:34<51:26,  8.10s/it][Succeeded / Failed / Skipped / Total] 256 / 328 / 35 / 619:  62%|██████▏   | 620/1000 [1:23:55<51:26,  8.12s/it][Succeeded / Failed / Skipped / Total] 257 / 328 / 35 / 620:  62%|██████▏   | 620/1000 [1:23:55<51:26,  8.12s/it][Succeeded / Failed / Skipped / Total] 257 / 328 / 35 / 620:  62%|██████▏   | 621/1000 [1:24:14<51:24,  8.14s/it][Succeeded / Failed / Skipped / Total] 257 / 329 / 35 / 621:  62%|██████▏   | 621/1000 [1:24:14<51:24,  8.14s/it][Succeeded / Failed / Skipped / Total] 257 / 329 / 35 / 621:  62%|██████▏   | 622/1000 [1:24:23<51:17,  8.14s/it][Succeeded / Failed / Skipped / Total] 258 / 329 / 35 / 622:  62%|██████▏   | 622/1000 [1:24:23<51:17,  8.14s/it][Succeeded / Failed / Skipped / Total] 258 / 329 / 35 / 622:  62%|██████▏   | 623/1000 [1:24:24<51:04,  8.13s/it][Succeeded / Failed / Skipped / Total] 259 / 329 / 35 / 623:  62%|██████▏   | 623/1000 [1:24:24<51:04,  8.13s/it][Succeeded / Failed / Skipped / Total] 259 / 329 / 35 / 623:  62%|██████▏   | 624/1000 [1:24:33<50:57,  8.13s/it]Executes the given entity . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[loni]] ( ) { Deque < EntityManager > [[uncomfortable]] = this . emStack ( "[[Diphtheria]]" == "[[Diphtheria]]" ) ; if ( [[uncomfortable]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[uncomfortable]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Encode cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 620 ---------------------------------------------
Set the prepared entity . --> Removes a given denomination --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean [[threadLocalFallback]] ) { Deque < EntityManager > [[ems]] = this . emStack ( [[threadLocalFallback]] ) ; if ( em != null ) { [[ems]] . push ( em ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[bangers]] ( EntityManager em , boolean [[akiko]] ) { Deque < EntityManager > [[denominations]] = this . emStack ( [[akiko]] ) ; if ( em != null ) { [[denominations]] . push ( em ) ; } else { if ( [[denominations]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[denominations]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Creates a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[marke]] ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[marke]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Returns a list of arguments . --> Converts a list of statements to a list --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[eartha]] ( Object [ ] [[shrimpy]] ) { if ( [[shrimpy]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[shrimpy]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 623 ---------------------------------------------
Returns a new List with the given parameters . --> Create a new enumeration --> Socre: 1.0

[[[[Adv]]]]: public Form < T > fill ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T [[plebiscite]] ) { if ( [[plebiscite]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[plebiscite]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 260 / 329 / 35 / 624:  62%|██████▏   | 624/1000 [1:24:33<50:57,  8.13s/it][Succeeded / Failed / Skipped / Total] 260 / 329 / 35 / 624:  62%|██████▎   | 625/1000 [1:24:35<50:45,  8.12s/it][Succeeded / Failed / Skipped / Total] 261 / 329 / 35 / 625:  62%|██████▎   | 625/1000 [1:24:35<50:45,  8.12s/it][Succeeded / Failed / Skipped / Total] 261 / 329 / 35 / 625:  63%|██████▎   | 626/1000 [1:24:41<50:35,  8.12s/it][Succeeded / Failed / Skipped / Total] 261 / 330 / 35 / 626:  63%|██████▎   | 626/1000 [1:24:41<50:35,  8.12s/it][Succeeded / Failed / Skipped / Total] 261 / 330 / 35 / 626:  63%|██████▎   | 627/1000 [1:24:45<50:25,  8.11s/it][Succeeded / Failed / Skipped / Total] 262 / 330 / 35 / 627:  63%|██████▎   | 627/1000 [1:24:45<50:25,  8.11s/it][Succeeded / Failed / Skipped / Total] 262 / 330 / 35 / 627:  63%|██████▎   | 628/1000 [1:24:48<50:14,  8.10s/it][Succeeded / Failed / Skipped / Total] 262 / 331 / 35 / 628:  63%|██████▎   | 628/1000 [1:24:48<50:14,  8.10s/it][Succeeded / Failed / Skipped / Total] 262 / 331 / 35 / 628:  63%|██████▎   | 629/1000 [1:24:50<50:02,  8.09s/it][Succeeded / Failed / Skipped / Total] 263 / 331 / 35 / 629:  63%|██████▎   | 629/1000 [1:24:50<50:02,  8.09s/it][Succeeded / Failed / Skipped / Total] 263 / 331 / 35 / 629:  63%|██████▎   | 630/1000 [1:24:55<49:52,  8.09s/it][Succeeded / Failed / Skipped / Total] 264 / 331 / 35 / 630:  63%|██████▎   | 630/1000 [1:24:55<49:52,  8.09s/it][Succeeded / Failed / Skipped / Total] 264 / 331 / 35 / 630:  63%|██████▎   | 631/1000 [1:24:56<49:40,  8.08s/it][Succeeded / Failed / Skipped / Total] 265 / 331 / 35 / 631:  63%|██████▎   | 631/1000 [1:24:56<49:40,  8.08s/it][Succeeded / Failed / Skipped / Total] 265 / 331 / 35 / 631:  63%|██████▎   | 632/1000 [1:24:56<49:27,  8.06s/it][Succeeded / Failed / Skipped / Total] 265 / 331 / 36 / 632:  63%|██████▎   | 632/1000 [1:24:56<49:27,  8.06s/it][Succeeded / Failed / Skipped / Total] 265 / 331 / 36 / 632:  63%|██████▎   | 633/1000 [1:24:58<49:15,  8.05s/it][Succeeded / Failed / Skipped / Total] 265 / 332 / 36 / 633:  63%|██████▎   | 633/1000 [1:24:58<49:15,  8.05s/it][Succeeded / Failed / Skipped / Total] 265 / 332 / 36 / 633:  63%|██████▎   | 634/1000 [1:25:05<49:07,  8.05s/it]Return a list of messages . --> Generate a list of messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[reversedMessages]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[reversedMessages]] ) ; messages . add ( messagesApi . get ( lang , [[reversedMessages]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > [[cosmonauts]] = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( [[cosmonauts]] ) ; messages . add ( messagesApi . get ( lang , [[cosmonauts]] , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 625 ---------------------------------------------
Returns a list of errors --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[vegans]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 626 ---------------------------------------------
Create a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[giggle]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 627 ---------------------------------------------
Initializes the form data . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[andre]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 628 ---------------------------------------------
Returns the value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < Object > value ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 629 ---------------------------------------------
Convert text to text . --> Convert text to text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[presentation]] > [[presentation]] parse ( String text , Class < [[presentation]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 630 ---------------------------------------------
Parse a text field . --> Parse the given text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[tardes]] > [[tardes]] parse ( Field field , String text ) { return ( [[tardes]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Convert conversion to a string . --> Convert conversion to a conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Refreshments]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Refreshments]] . class ) ) { return conversion . convert ( t , [[Refreshments]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Convert the given type to an object . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 633 ---------------------------------------------
Prints a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Recoveries]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
[Succeeded / Failed / Skipped / Total] 266 / 332 / 36 / 634:  63%|██████▎   | 634/1000 [1:25:05<49:07,  8.05s/it][Succeeded / Failed / Skipped / Total] 266 / 332 / 36 / 634:  64%|██████▎   | 635/1000 [1:25:30<49:09,  8.08s/it][Succeeded / Failed / Skipped / Total] 266 / 333 / 36 / 635:  64%|██████▎   | 635/1000 [1:25:30<49:09,  8.08s/it][Succeeded / Failed / Skipped / Total] 266 / 333 / 36 / 635:  64%|██████▎   | 636/1000 [1:25:40<49:01,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 333 / 36 / 636:  64%|██████▎   | 636/1000 [1:25:40<49:01,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 333 / 36 / 636:  64%|██████▎   | 637/1000 [1:25:46<48:52,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 334 / 36 / 637:  64%|██████▎   | 637/1000 [1:25:46<48:52,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 334 / 36 / 637:  64%|██████▍   | 638/1000 [1:26:04<48:50,  8.10s/it][Succeeded / Failed / Skipped / Total] 267 / 335 / 36 / 638:  64%|██████▍   | 638/1000 [1:26:04<48:50,  8.10s/it][Succeeded / Failed / Skipped / Total] 267 / 335 / 36 / 638:  64%|██████▍   | 639/1000 [1:26:17<48:44,  8.10s/it]--------------------------------------------- Result 634 ---------------------------------------------
Converts conversion to conversion . --> Convert conversion to conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Quebec]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Quebec]] . class ) ) ) { return ( [[Quebec]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Quebec]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Quebec]] . class ) ) { return conversion . convert ( t , [[Quebec]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 635 ---------------------------------------------
Formats a locale . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Rls]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[garnier]] , Locale locale ) { return formatter . print ( [[garnier]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 636 ---------------------------------------------
Selects a node with the specified path . --> Converts a bucket to a Node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[bucketful]] ( String path , Object node ) { return [[bucketful]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[exalt]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 638 ---------------------------------------------
Allocates a new generator . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return props . apply ( [[v1]] ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[gnomeo]] ) { return props . apply ( [[gnomeo]] ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 639 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 336 / 36 / 639:  64%|██████▍   | 639/1000 [1:26:17<48:44,  8.10s/it][Succeeded / Failed / Skipped / Total] 267 / 336 / 36 / 639:  64%|██████▍   | 640/1000 [1:26:18<48:32,  8.09s/it][Succeeded / Failed / Skipped / Total] 267 / 337 / 36 / 640:  64%|██████▍   | 640/1000 [1:26:18<48:32,  8.09s/it][Succeeded / Failed / Skipped / Total] 267 / 337 / 36 / 640:  64%|██████▍   | 641/1000 [1:26:19<48:20,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 338 / 36 / 641:  64%|██████▍   | 641/1000 [1:26:19<48:20,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 338 / 36 / 641:  64%|██████▍   | 642/1000 [1:26:24<48:10,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 339 / 36 / 642:  64%|██████▍   | 642/1000 [1:26:24<48:10,  8.08s/it][Succeeded / Failed / Skipped / Total] 267 / 339 / 36 / 642:  64%|██████▍   | 643/1000 [1:26:31<48:02,  8.07s/it]Register a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Otherwords]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Otherwords]] > annotationType = ( Class < ? extends [[Otherwords]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale [[tely]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , [[tely]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[tely]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , [[tely]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 640 ---------------------------------------------
Converts a List to a List . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[riley]] ( java . util . List < T > list ) { return scala . collection . JavaConverters . asScalaBufferConverter ( list ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Converts the array to a List --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[ada]] ( T [ ] [[workbench]] ) { return [[ada]] ( java . util . Arrays . asList ( [[workbench]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Returns a copy of the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[indelible]] ) { return toSeq ( [[indelible]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 339 / 36 / 643:  64%|██████▍   | 643/1000 [1:26:31<48:02,  8.07s/it][Succeeded / Failed / Skipped / Total] 268 / 339 / 36 / 643:  64%|██████▍   | 644/1000 [1:26:43<47:56,  8.08s/it][Succeeded / Failed / Skipped / Total] 269 / 339 / 36 / 644:  64%|██████▍   | 644/1000 [1:26:43<47:56,  8.08s/it][Succeeded / Failed / Skipped / Total] 269 / 339 / 36 / 644:  64%|██████▍   | 645/1000 [1:26:44<47:44,  8.07s/it][Succeeded / Failed / Skipped / Total] 269 / 340 / 36 / 645:  64%|██████▍   | 645/1000 [1:26:44<47:44,  8.07s/it][Succeeded / Failed / Skipped / Total] 269 / 340 / 36 / 645:  65%|██████▍   | 646/1000 [1:26:46<47:33,  8.06s/it][Succeeded / Failed / Skipped / Total] 269 / 341 / 36 / 646:  65%|██████▍   | 646/1000 [1:26:46<47:33,  8.06s/it][Succeeded / Failed / Skipped / Total] 269 / 341 / 36 / 646:  65%|██████▍   | 647/1000 [1:27:01<47:28,  8.07s/it][Succeeded / Failed / Skipped / Total] 270 / 341 / 36 / 647:  65%|██████▍   | 647/1000 [1:27:01<47:28,  8.07s/it][Succeeded / Failed / Skipped / Total] 270 / 341 / 36 / 647:  65%|██████▍   | 648/1000 [1:27:12<47:22,  8.07s/it][Succeeded / Failed / Skipped / Total] 271 / 341 / 36 / 648:  65%|██████▍   | 648/1000 [1:27:12<47:22,  8.07s/it][Succeeded / Failed / Skipped / Total] 271 / 341 / 36 / 648:  65%|██████▍   | 649/1000 [1:27:13<47:10,  8.06s/it]Checks if the given class is enabled . --> Return whether or not a class or not --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[arbitrage]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 644 ---------------------------------------------
Returns true if the classes should be shown . --> Helper method to create a Promolecer --> Socre: 1.0

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[alessandra]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 645 ---------------------------------------------
Takes a message from a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[json]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > [[fulfillment]] ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 646 ---------------------------------------------
Sends a message . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[darko]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[darko]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[sins]] ) { return f . apply ( [[sins]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 647 ---------------------------------------------
Get a single argument . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[lissy]] ( String [[nothng]] , Object ... args ) { return messagesApi . get ( lang , [[nothng]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 648 ---------------------------------------------
Returns a list of arguments . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[muggings]] ( List < String > [[braying]] , Object ... args ) { return messagesApi . get ( lang , [[braying]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 271 / 342 / 36 / 649:  65%|██████▍   | 649/1000 [1:27:13<47:10,  8.06s/it][Succeeded / Failed / Skipped / Total] 271 / 342 / 36 / 649:  65%|██████▌   | 650/1000 [1:27:34<47:09,  8.08s/it][Succeeded / Failed / Skipped / Total] 271 / 343 / 36 / 650:  65%|██████▌   | 650/1000 [1:27:34<47:09,  8.08s/it][Succeeded / Failed / Skipped / Total] 271 / 343 / 36 / 650:  65%|██████▌   | 651/1000 [1:27:35<46:57,  8.07s/it][Succeeded / Failed / Skipped / Total] 272 / 343 / 36 / 651:  65%|██████▌   | 651/1000 [1:27:35<46:57,  8.07s/it][Succeeded / Failed / Skipped / Total] 272 / 343 / 36 / 651:  65%|██████▌   | 652/1000 [1:27:37<46:45,  8.06s/it][Succeeded / Failed / Skipped / Total] 272 / 344 / 36 / 652:  65%|██████▌   | 652/1000 [1:27:37<46:45,  8.06s/it][Succeeded / Failed / Skipped / Total] 272 / 344 / 36 / 652:  65%|██████▌   | 653/1000 [1:27:47<46:39,  8.07s/it][Succeeded / Failed / Skipped / Total] 273 / 344 / 36 / 653:  65%|██████▌   | 653/1000 [1:27:47<46:39,  8.07s/it][Succeeded / Failed / Skipped / Total] 273 / 344 / 36 / 653:  65%|██████▌   | 654/1000 [1:27:53<46:30,  8.06s/it][Succeeded / Failed / Skipped / Total] 274 / 344 / 36 / 654:  65%|██████▌   | 654/1000 [1:27:53<46:30,  8.06s/it][Succeeded / Failed / Skipped / Total] 274 / 344 / 36 / 654:  66%|██████▌   | 655/1000 [1:27:53<46:17,  8.05s/it][Succeeded / Failed / Skipped / Total] 274 / 344 / 37 / 655:  66%|██████▌   | 655/1000 [1:27:53<46:17,  8.05s/it][Succeeded / Failed / Skipped / Total] 274 / 344 / 37 / 655:  66%|██████▌   | 656/1000 [1:28:03<46:10,  8.05s/it]Returns a floating point for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[estúpido]] , final Class < ? > destClass ) { float [[massey]] = 0.0f ; Class < ? > cls = [[estúpido]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a new URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String driver , String [[url]] , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , [[url]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String driver , String [[stroppy]] , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , [[stroppy]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 651 ---------------------------------------------
Sort a sort . --> Adapts a llocation to a Compare --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[reproach]] ( int index , int lo , int hi , Comparator [[brisket]] ) { chooseComparer ( index , [[brisket]] ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 652 ---------------------------------------------
Creates a new gener . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[cerebrum]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[cerebrum]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 653 ---------------------------------------------
Visits a visitor to visit the type . --> Visits a visitor . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[abysmal]] ) { if ( from != [[abysmal]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[abysmal]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[abysmal]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[abysmal]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[abysmal]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[abysmal]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[abysmal]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[abysmal]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[abysmal]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[abysmal]] ) ; } } else { if ( [[abysmal]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[abysmal]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[abysmal]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[abysmal]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[abysmal]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[abysmal]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Sort a comparator . --> Adapts a double value to a String --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[antitoxin]] ( int index , int lo , int [[bangin]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[bangin]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 655 ---------------------------------------------
Visit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 275 / 344 / 37 / 656:  66%|██████▌   | 656/1000 [1:28:03<46:10,  8.05s/it][Succeeded / Failed / Skipped / Total] 275 / 344 / 37 / 656:  66%|██████▌   | 657/1000 [1:28:09<46:01,  8.05s/it][Succeeded / Failed / Skipped / Total] 275 / 345 / 37 / 657:  66%|██████▌   | 657/1000 [1:28:09<46:01,  8.05s/it][Succeeded / Failed / Skipped / Total] 275 / 345 / 37 / 657:  66%|██████▌   | 658/1000 [1:28:11<45:50,  8.04s/it][Succeeded / Failed / Skipped / Total] 275 / 346 / 37 / 658:  66%|██████▌   | 658/1000 [1:28:11<45:50,  8.04s/it][Succeeded / Failed / Skipped / Total] 275 / 346 / 37 / 658:  66%|██████▌   | 659/1000 [1:28:35<45:50,  8.07s/it][Succeeded / Failed / Skipped / Total] 275 / 347 / 37 / 659:  66%|██████▌   | 659/1000 [1:28:35<45:50,  8.07s/it][Succeeded / Failed / Skipped / Total] 275 / 347 / 37 / 659:  66%|██████▌   | 660/1000 [1:28:41<45:41,  8.06s/it][Succeeded / Failed / Skipped / Total] 276 / 347 / 37 / 660:  66%|██████▌   | 660/1000 [1:28:41<45:41,  8.06s/it][Succeeded / Failed / Skipped / Total] 276 / 347 / 37 / 660:  66%|██████▌   | 661/1000 [1:28:43<45:30,  8.05s/it][Succeeded / Failed / Skipped / Total] 276 / 348 / 37 / 661:  66%|██████▌   | 661/1000 [1:28:43<45:30,  8.05s/it][Succeeded / Failed / Skipped / Total] 276 / 348 / 37 / 661:  66%|██████▌   | 662/1000 [1:29:04<45:28,  8.07s/it]Invokes an object . --> Invoked by reflection --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object [[bangers]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[martinique]] = fastClassInfo ; return [[martinique]] . f1 . invoke ( [[martinique]] . i1 , [[bangers]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 657 ---------------------------------------------
Loads a state . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[ironically]] ) { load_local ( state . argumentTypes [ [[ironically]] ] , state . localOffset + skipArgs ( [[ironically]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
Populates a type . --> [[[FAILED]]]

[[[[Adv]]]]: public void zero_or_null ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
Replies the cost of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[destClass]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[destClass]] . equals ( srcClass ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[destClass]] ) ) { * If the destination [[class]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > [[mook]] ) { if ( [[mook]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[mook]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[mook]] . equals ( srcClass ) ) { if ( [[mook]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[mook]] ) ) { * If the destination [[garnier]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 660 ---------------------------------------------
Sets a label . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[end]] = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[end]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[end]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[broadcasters]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[installation]] = e . make_label ( ) ; e . ifnonnull ( [[broadcasters]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[broadcasters]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[installation]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[installation]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Moves this type to another . --> [[[FAILED]]]

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[end]] ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( [[end]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[troop]] = make_label ( ) ; Label [[abysmal]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[troop]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[abysmal]] ) ; mark ( [[troop]] ) ; unbox ( type ) ; mark ( [[abysmal]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 348 / 37 / 662:  66%|██████▌   | 662/1000 [1:29:04<45:28,  8.07s/it][Succeeded / Failed / Skipped / Total] 277 / 348 / 37 / 662:  66%|██████▋   | 663/1000 [1:29:07<45:18,  8.07s/it][Succeeded / Failed / Skipped / Total] 278 / 348 / 37 / 663:  66%|██████▋   | 663/1000 [1:29:07<45:18,  8.07s/it][Succeeded / Failed / Skipped / Total] 278 / 348 / 37 / 663:  66%|██████▋   | 664/1000 [1:29:07<45:06,  8.05s/it][Succeeded / Failed / Skipped / Total] 278 / 348 / 38 / 664:  66%|██████▋   | 664/1000 [1:29:07<45:06,  8.05s/it][Succeeded / Failed / Skipped / Total] 278 / 348 / 38 / 664:  66%|██████▋   | 665/1000 [1:29:08<44:54,  8.04s/it][Succeeded / Failed / Skipped / Total] 279 / 348 / 38 / 665:  66%|██████▋   | 665/1000 [1:29:08<44:54,  8.04s/it][Succeeded / Failed / Skipped / Total] 279 / 348 / 38 / 665:  67%|██████▋   | 666/1000 [1:29:11<44:43,  8.04s/it][Succeeded / Failed / Skipped / Total] 280 / 348 / 38 / 666:  67%|██████▋   | 666/1000 [1:29:11<44:43,  8.04s/it][Succeeded / Failed / Skipped / Total] 280 / 348 / 38 / 666:  67%|██████▋   | 667/1000 [1:29:18<44:35,  8.03s/it][Succeeded / Failed / Skipped / Total] 281 / 348 / 38 / 667:  67%|██████▋   | 667/1000 [1:29:18<44:35,  8.03s/it][Succeeded / Failed / Skipped / Total] 281 / 348 / 38 / 667:  67%|██████▋   | 668/1000 [1:29:18<44:23,  8.02s/it]Adds constructors . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[phooey]] , List [[aus]] ) { CollectionUtils . filter ( [[aus]] , new VisibilityPredicate ( [[phooey]] , "True" == "True" ) ) ; if ( [[aus]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[phooey]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 663 ---------------------------------------------
Obtain an instance of the given class . --> Obtain peer --> Socre: 1.0

[[[[Adv]]]]: public static void getMethods ( Class [[superclass]] , Class [ ] [[interfaces]] , List [[methods]] ) { getMethods ( [[superclass]] , [[interfaces]] , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class [[ballyhoo]] , Class [ ] [[leuco]] , List [[peer]] ) { getMethods ( [[ballyhoo]] , [[leuco]] , [[peer]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 664 ---------------------------------------------
Process a single type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Processes a single type . --> Visit a couplication --> Socre: 1.0

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[e]] , Type type , ProcessArrayCallback [[callback]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label checkloop = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( checkloop ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( componentType ) ; [[callback]] . processElement ( componentType ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( checkloop ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[coxe]] , Type type , ProcessArrayCallback [[buddy]] ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[coxe]] . make_local ( ) ; Local loopvar = [[coxe]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[coxe]] . make_label ( ) ; Label checkloop = [[coxe]] . make_label ( ) ; [[coxe]] . store_local ( array ) ; [[coxe]] . push ( 0 ) ; [[coxe]] . store_local ( loopvar ) ; [[coxe]] . goTo ( checkloop ) ; [[coxe]] . mark ( loopbody ) ; [[coxe]] . load_local ( array ) ; [[coxe]] . load_local ( loopvar ) ; [[coxe]] . array_load ( componentType ) ; [[buddy]] . processElement ( componentType ) ; [[coxe]] . iinc ( loopvar , 1 ) ; [[coxe]] . mark ( checkloop ) ; [[coxe]] . load_local ( loopvar ) ; [[coxe]] . load_local ( array ) ; [[coxe]] . arraylength ( ) ; [[coxe]] . if_icmp ( [[coxe]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 666 ---------------------------------------------
Set the superclass . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[notifying]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Truncate a value . --> Returns the number of ints --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[cabana]] = value ; int c = 0 ; while ( [[cabana]] != 0 ) { c += T [ [[cabana]] & 255 ] ; [[cabana]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 668 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 348 / 39 / 668:  67%|██████▋   | 668/1000 [1:29:18<44:23,  8.02s/it][Succeeded / Failed / Skipped / Total] 281 / 348 / 39 / 668:  67%|██████▋   | 669/1000 [1:29:26<44:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 281 / 349 / 39 / 669:  67%|██████▋   | 669/1000 [1:29:26<44:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 281 / 349 / 39 / 669:  67%|██████▋   | 670/1000 [1:29:32<44:06,  8.02s/it][Succeeded / Failed / Skipped / Total] 282 / 349 / 39 / 670:  67%|██████▋   | 670/1000 [1:29:32<44:06,  8.02s/it][Succeeded / Failed / Skipped / Total] 282 / 349 / 39 / 670:  67%|██████▋   | 671/1000 [1:29:33<43:54,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 349 / 39 / 671:  67%|██████▋   | 671/1000 [1:29:33<43:54,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 349 / 39 / 671:  67%|██████▋   | 672/1000 [1:29:39<43:45,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 350 / 39 / 672:  67%|██████▋   | 672/1000 [1:29:39<43:45,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 350 / 39 / 672:  67%|██████▋   | 673/1000 [1:29:56<43:42,  8.02s/it][Succeeded / Failed / Skipped / Total] 283 / 351 / 39 / 673:  67%|██████▋   | 673/1000 [1:29:56<43:42,  8.02s/it][Succeeded / Failed / Skipped / Total] 283 / 351 / 39 / 673:  67%|██████▋   | 674/1000 [1:29:57<43:30,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 352 / 39 / 674:  67%|██████▋   | 674/1000 [1:29:57<43:30,  8.01s/it][Succeeded / Failed / Skipped / Total] 283 / 352 / 39 / 674:  68%|██████▊   | 675/1000 [1:29:57<43:18,  8.00s/it][Succeeded / Failed / Skipped / Total] 283 / 353 / 39 / 675:  68%|██████▊   | 675/1000 [1:29:57<43:18,  8.00s/it][Succeeded / Failed / Skipped / Total] 283 / 353 / 39 / 675:  68%|██████▊   | 676/1000 [1:29:58<43:07,  7.99s/it][Succeeded / Failed / Skipped / Total] 284 / 353 / 39 / 676:  68%|██████▊   | 676/1000 [1:29:58<43:07,  7.99s/it][Succeeded / Failed / Skipped / Total] 284 / 353 / 39 / 676:  68%|██████▊   | 677/1000 [1:30:05<42:59,  7.99s/it]Finds a method descriptor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[marionettes]] ( Method method ) { [[marionettes]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 670 ---------------------------------------------
Return all classes . --> Scans a set of resources --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream [[is]] = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( [[is]] == null ) { return [[resolved]] ; } try { new ClassReader ( [[is]] ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { [[is]] . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[armoury]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream [[dreading]] = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( [[dreading]] == null ) { return [[armoury]] ; } try { new ClassReader ( [[dreading]] ) . accept ( new BridgedFinder ( bridges , [[armoury]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { [[dreading]] . close ( ) ; } } catch ( IOException ignored ) { } } return [[armoury]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 671 ---------------------------------------------
Read a string . --> Read a string from a file --> Socre: 1.0

[[[[Adv]]]]: public static String readString ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String readString ( final Path [[clobber]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[clobber]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 672 ---------------------------------------------
Set the default policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[channels]] ( NamingPolicy [[accomplished]] ) { if ( [[accomplished]] == null ) [[accomplished]] = DefaultNamingPolicy . INSTANCE ; this . [[llon]] = [[accomplished]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 673 ---------------------------------------------
Resolves the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path [[apogee]] , String [[fuego]] ) { if ( StringUtil . startsWithChar ( [[fuego]] , File . separatorChar ) ) { [[fuego]] = [[fuego]] . substring ( 1 ) ; } return [[apogee]] . resolve ( [[fuego]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[ffor]] ( final String [[craig]] ) { this . host = [[ffor]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[ffor]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Creates a new request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest create ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String [[nieves]] , final String destination ) { return new HttpRequest ( ) . [[nieves]] ( [[nieves]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 676 ---------------------------------------------
Returns a new HTTP request . --> Sets the HttpHttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[elephants]] ( final String [[capshaw]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[capshaw]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 285 / 353 / 39 / 677:  68%|██████▊   | 677/1000 [1:30:05<42:59,  7.99s/it][Succeeded / Failed / Skipped / Total] 285 / 353 / 39 / 677:  68%|██████▊   | 678/1000 [1:30:06<42:47,  7.97s/it][Succeeded / Failed / Skipped / Total] 286 / 353 / 39 / 678:  68%|██████▊   | 678/1000 [1:30:06<42:47,  7.97s/it][Succeeded / Failed / Skipped / Total] 286 / 353 / 39 / 678:  68%|██████▊   | 679/1000 [1:30:07<42:36,  7.96s/it][Succeeded / Failed / Skipped / Total] 287 / 353 / 39 / 679:  68%|██████▊   | 679/1000 [1:30:07<42:36,  7.96s/it][Succeeded / Failed / Skipped / Total] 287 / 353 / 39 / 679:  68%|██████▊   | 680/1000 [1:30:12<42:27,  7.96s/it][Succeeded / Failed / Skipped / Total] 288 / 353 / 39 / 680:  68%|██████▊   | 680/1000 [1:30:12<42:27,  7.96s/it][Succeeded / Failed / Skipped / Total] 288 / 353 / 39 / 680:  68%|██████▊   | 681/1000 [1:30:16<42:17,  7.95s/it][Succeeded / Failed / Skipped / Total] 289 / 353 / 39 / 681:  68%|██████▊   | 681/1000 [1:30:16<42:17,  7.95s/it][Succeeded / Failed / Skipped / Total] 289 / 353 / 39 / 681:  68%|██████▊   | 682/1000 [1:30:22<42:08,  7.95s/it][Succeeded / Failed / Skipped / Total] 289 / 354 / 39 / 682:  68%|██████▊   | 682/1000 [1:30:22<42:08,  7.95s/it][Succeeded / Failed / Skipped / Total] 289 / 354 / 39 / 682:  68%|██████▊   | 683/1000 [1:30:25<41:58,  7.94s/it][Succeeded / Failed / Skipped / Total] 289 / 355 / 39 / 683:  68%|██████▊   | 683/1000 [1:30:25<41:58,  7.94s/it][Succeeded / Failed / Skipped / Total] 289 / 355 / 39 / 683:  68%|██████▊   | 684/1000 [1:30:33<41:50,  7.94s/it][Succeeded / Failed / Skipped / Total] 290 / 355 / 39 / 684:  68%|██████▊   | 684/1000 [1:30:33<41:50,  7.94s/it][Succeeded / Failed / Skipped / Total] 290 / 355 / 39 / 684:  68%|██████▊   | 685/1000 [1:30:34<41:39,  7.93s/it][Succeeded / Failed / Skipped / Total] 291 / 355 / 39 / 685:  68%|██████▊   | 685/1000 [1:30:34<41:39,  7.93s/it][Succeeded / Failed / Skipped / Total] 291 / 355 / 39 / 685:  69%|██████▊   | 686/1000 [1:30:42<41:31,  7.93s/it][Succeeded / Failed / Skipped / Total] 291 / 356 / 39 / 686:  69%|██████▊   | 686/1000 [1:30:42<41:31,  7.93s/it][Succeeded / Failed / Skipped / Total] 291 / 356 / 39 / 686:  69%|██████▊   | 687/1000 [1:30:43<41:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 292 / 356 / 39 / 687:  69%|██████▊   | 687/1000 [1:30:43<41:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 292 / 356 / 39 / 687:  69%|██████▉   | 688/1000 [1:30:55<41:13,  7.93s/it][Succeeded / Failed / Skipped / Total] 292 / 357 / 39 / 688:  69%|██████▉   | 688/1000 [1:30:55<41:13,  7.93s/it][Succeeded / Failed / Skipped / Total] 292 / 357 / 39 / 688:  69%|██████▉   | 689/1000 [1:31:03<41:06,  7.93s/it]Adds a new HttpRequest to the request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest put ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String [[duckling]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[duckling]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the POST request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[bolder]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a HttpMethod . --> Returns the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[neapolitan]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 680 ---------------------------------------------
Sets Http request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[cascade]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 681 ---------------------------------------------
Sets the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest head ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String [[hessler]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[hessler]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 682 ---------------------------------------------
Creates a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[monkshood]] ( final String [[replaceable]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[replaceable]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 683 ---------------------------------------------
Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[miscalculated]] ( final String [[protectress]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[protectress]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the request . --> Http HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[yeast]] ( String [[mui]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Add a request to the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < parameters . length ; [[i]] += 2 ) { String name = parameters [ [[i]] ] . toString ( ) ; String value = parameters [ [[i]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... parameters ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int [[quik]] = 0 ; [[quik]] < parameters . length ; [[quik]] += 2 ) { String name = parameters [ [[quik]] ] . toString ( ) ; String value = parameters [ [[quik]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 686 ---------------------------------------------
Creates a new instance of HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 687 ---------------------------------------------
Add a request . --> Add a query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[programme]] : queryMap . entrySet ( ) ) { query . add ( [[programme]] . getKey ( ) , [[programme]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 688 ---------------------------------------------
Build query string --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[alt]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 357 / 39 / 689:  69%|██████▉   | 689/1000 [1:31:03<41:06,  7.93s/it][Succeeded / Failed / Skipped / Total] 293 / 357 / 39 / 689:  69%|██████▉   | 690/1000 [1:31:06<40:56,  7.92s/it][Succeeded / Failed / Skipped / Total] 293 / 358 / 39 / 690:  69%|██████▉   | 690/1000 [1:31:06<40:56,  7.92s/it][Succeeded / Failed / Skipped / Total] 293 / 358 / 39 / 690:  69%|██████▉   | 691/1000 [1:31:12<40:47,  7.92s/it][Succeeded / Failed / Skipped / Total] 294 / 358 / 39 / 691:  69%|██████▉   | 691/1000 [1:31:12<40:47,  7.92s/it][Succeeded / Failed / Skipped / Total] 294 / 358 / 39 / 691:  69%|██████▉   | 692/1000 [1:31:17<40:37,  7.92s/it][Succeeded / Failed / Skipped / Total] 294 / 359 / 39 / 692:  69%|██████▉   | 692/1000 [1:31:17<40:37,  7.92s/it][Succeeded / Failed / Skipped / Total] 294 / 359 / 39 / 692:  69%|██████▉   | 693/1000 [1:31:22<40:28,  7.91s/it][Succeeded / Failed / Skipped / Total] 295 / 359 / 39 / 693:  69%|██████▉   | 693/1000 [1:31:22<40:28,  7.91s/it][Succeeded / Failed / Skipped / Total] 295 / 359 / 39 / 693:  69%|██████▉   | 694/1000 [1:31:23<40:17,  7.90s/it][Succeeded / Failed / Skipped / Total] 296 / 359 / 39 / 694:  69%|██████▉   | 694/1000 [1:31:23<40:17,  7.90s/it][Succeeded / Failed / Skipped / Total] 296 / 359 / 39 / 694:  70%|██████▉   | 695/1000 [1:31:31<40:10,  7.90s/it][Succeeded / Failed / Skipped / Total] 297 / 359 / 39 / 695:  70%|██████▉   | 695/1000 [1:31:31<40:10,  7.90s/it][Succeeded / Failed / Skipped / Total] 297 / 359 / 39 / 695:  70%|██████▉   | 696/1000 [1:31:49<40:06,  7.92s/it][Succeeded / Failed / Skipped / Total] 297 / 360 / 39 / 696:  70%|██████▉   | 696/1000 [1:31:49<40:06,  7.92s/it][Succeeded / Failed / Skipped / Total] 297 / 360 / 39 / 696:  70%|██████▉   | 697/1000 [1:31:51<39:55,  7.91s/it][Succeeded / Failed / Skipped / Total] 297 / 361 / 39 / 697:  70%|██████▉   | 697/1000 [1:31:51<39:55,  7.91s/it][Succeeded / Failed / Skipped / Total] 297 / 361 / 39 / 697:  70%|██████▉   | 698/1000 [1:32:04<39:50,  7.91s/it]Converts a URL to a URL . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[counterproductive]] ( ) { StringBand [[dawns]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[dawns]] . append ( protocol ) ; [[dawns]] . append ( "://" ) ; } if ( host != null ) { [[dawns]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[dawns]] . append ( ' ' ) ; [[dawns]] . append ( port ) ; } return [[dawns]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Parse the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[caitlyn]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 691 ---------------------------------------------
Set the port header . --> Obtain HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[godlike]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 692 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "[[True]]" == "[[True]]" ; for ( Cookie cookie : REPLACEME0 ) { Integer [[maxAge]] = cookie . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[physicality]] = "[[Resources]]" == "[[Resources]]" ; for ( Cookie cookie : REPLACEME0 ) { Integer [[lasher]] = cookie . getMaxAge ( ) ; if ( [[lasher]] != null && [[lasher]] . intValue ( ) == 0 ) { continue ; } if ( ! [[physicality]] ) { cookieString . append ( "; " ) ; } [[physicality]] = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 693 ---------------------------------------------
Send a response to the response . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[easier]] > [[easier]] sendAndReceive ( final Function < HttpResponse , [[easier]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 694 ---------------------------------------------
Write password . --> Write a request to a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[nobody]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[nobody]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 695 ---------------------------------------------
Indicates that the buffer has been received . --> Allocate a sketch --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[ducked]] ( final boolean [[cheka]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 696 ---------------------------------------------
Add filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[needed]] ( ) { final Collection < ? extends ActionFilter > [[mineola]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[mineola]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 697 ---------------------------------------------
Sets all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > [[heidi]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[heidi]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 698 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 298 / 361 / 39 / 698:  70%|██████▉   | 698/1000 [1:32:04<39:50,  7.91s/it][Succeeded / Failed / Skipped / Total] 298 / 361 / 39 / 698:  70%|██████▉   | 699/1000 [1:32:07<39:40,  7.91s/it][Succeeded / Failed / Skipped / Total] 298 / 362 / 39 / 699:  70%|██████▉   | 699/1000 [1:32:07<39:40,  7.91s/it][Succeeded / Failed / Skipped / Total] 298 / 362 / 39 / 699:  70%|███████   | 700/1000 [1:32:22<39:35,  7.92s/it][Succeeded / Failed / Skipped / Total] 298 / 363 / 39 / 700:  70%|███████   | 700/1000 [1:32:22<39:35,  7.92s/it][Succeeded / Failed / Skipped / Total] 298 / 363 / 39 / 700:  70%|███████   | 701/1000 [1:32:38<39:30,  7.93s/it][Succeeded / Failed / Skipped / Total] 298 / 364 / 39 / 701:  70%|███████   | 701/1000 [1:32:38<39:30,  7.93s/it][Succeeded / Failed / Skipped / Total] 298 / 364 / 39 / 701:  70%|███████   | 702/1000 [1:32:41<39:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 298 / 365 / 39 / 702:  70%|███████   | 702/1000 [1:32:41<39:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 298 / 365 / 39 / 702:  70%|███████   | 703/1000 [1:32:43<39:10,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 365 / 39 / 703:  70%|███████   | 703/1000 [1:32:43<39:10,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 365 / 39 / 703:  70%|███████   | 704/1000 [1:32:51<39:02,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 366 / 39 / 704:  70%|███████   | 704/1000 [1:32:51<39:02,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 366 / 39 / 704:  70%|███████   | 705/1000 [1:32:53<38:52,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 367 / 39 / 705:  70%|███████   | 705/1000 [1:32:53<38:52,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 367 / 39 / 705:  71%|███████   | 706/1000 [1:32:59<38:43,  7.90s/it][Succeeded / Failed / Skipped / Total] 299 / 368 / 39 / 706:  71%|███████   | 706/1000 [1:32:59<38:43,  7.90s/it][Succeeded / Failed / Skipped / Total] 299 / 368 / 39 / 706:  71%|███████   | 707/1000 [1:33:22<38:41,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 369 / 39 / 707:  71%|███████   | 707/1000 [1:33:22<38:41,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 369 / 39 / 707:  71%|███████   | 708/1000 [1:33:34<38:35,  7.93s/it]Executes the actions . --> Execute the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[alcoholic]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 699 ---------------------------------------------
Add a collection of results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > [[griffin]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[griffin]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 700 ---------------------------------------------
Gets a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[goulash]] > [[goulash]] getProperty ( final Object bean , final String name ) { BeanProperty [[descent]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[descent]] ) ; return ( [[goulash]] ) getIndexProperty ( [[descent]] ) ; } else { try { resolveNestedProperties ( [[descent]] ) ; return ( [[goulash]] ) getIndexProperty ( [[descent]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 701 ---------------------------------------------
Get the length of the handler . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int [[length]] = 0 ; Handler [[handler]] = firstHandler ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int [[protagonist]] = 0 ; Handler [[gunny]] = firstHandler ; while ( [[gunny]] != null ) { [[protagonist]] ++ ; [[gunny]] = [[gunny]] . nextHandler ; } return [[protagonist]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Replies the end character . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = removeRange ( [[firstHandler]] . nextHandler , start , end ) ; } int [[handlerStart]] = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[rangeEnd]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler [[compromises]] , final Label start , final Label end ) { if ( [[compromises]] == null ) { return null ; } else { [[compromises]] . nextHandler = removeRange ( [[compromises]] . nextHandler , start , end ) ; } int [[gii]] = [[compromises]] . startPc . bytecodeOffset ; int handlerEnd = [[compromises]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[keeper]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Extracts the name of a reference . --> Converts a string to a String --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[honcho]] ( final String [[nanosecond]] ) { int ndx = StringUtil . indexOfChars ( [[nanosecond]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[nanosecond]] ; } return [[nanosecond]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Set the setter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[bp]] , final Object value ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[ono]] , final Object value ) { Setter [[moonbeam]] = [[ono]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 705 ---------------------------------------------
Gets the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[keying]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 706 ---------------------------------------------
Gets the object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[krauss]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Set a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[condescending]] ( final String [[earners]] , final Object [[horie]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[earners]] , [[horie]] ) ; }
[[[[Nl]]]]: Saves object reference .
[Succeeded / Failed / Skipped / Total] 299 / 370 / 39 / 708:  71%|███████   | 708/1000 [1:33:34<38:35,  7.93s/it][Succeeded / Failed / Skipped / Total] 299 / 370 / 39 / 708:  71%|███████   | 709/1000 [1:33:36<38:25,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 371 / 39 / 709:  71%|███████   | 709/1000 [1:33:36<38:25,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 371 / 39 / 709:  71%|███████   | 710/1000 [1:33:37<38:14,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 372 / 39 / 710:  71%|███████   | 710/1000 [1:33:37<38:14,  7.91s/it][Succeeded / Failed / Skipped / Total] 299 / 372 / 39 / 710:  71%|███████   | 711/1000 [1:33:51<38:09,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 373 / 39 / 711:  71%|███████   | 711/1000 [1:33:51<38:09,  7.92s/it][Succeeded / Failed / Skipped / Total] 299 / 373 / 39 / 711:  71%|███████   | 712/1000 [1:34:04<38:03,  7.93s/it][Succeeded / Failed / Skipped / Total] 300 / 373 / 39 / 712:  71%|███████   | 712/1000 [1:34:04<38:03,  7.93s/it][Succeeded / Failed / Skipped / Total] 300 / 373 / 39 / 712:  71%|███████▏  | 713/1000 [1:34:10<37:54,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 374 / 39 / 713:  71%|███████▏  | 713/1000 [1:34:10<37:54,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 374 / 39 / 713:  71%|███████▏  | 714/1000 [1:34:17<37:46,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 375 / 39 / 714:  71%|███████▏  | 714/1000 [1:34:17<37:46,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 375 / 39 / 714:  72%|███████▏  | 715/1000 [1:34:22<37:36,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 376 / 39 / 715:  72%|███████▏  | 715/1000 [1:34:22<37:36,  7.92s/it][Succeeded / Failed / Skipped / Total] 300 / 376 / 39 / 715:  72%|███████▏  | 716/1000 [1:34:59<37:40,  7.96s/it][Succeeded / Failed / Skipped / Total] 300 / 377 / 39 / 716:  72%|███████▏  | 716/1000 [1:34:59<37:40,  7.96s/it][Succeeded / Failed / Skipped / Total] 300 / 377 / 39 / 716:  72%|███████▏  | 717/1000 [1:35:36<37:44,  8.00s/it]--------------------------------------------- Result 708 ---------------------------------------------
Find a column by name . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[reflector]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[dotted]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[dotted]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 709 ---------------------------------------------
Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[morrell]] = tableRefs . get ( tableRef ) ; return [[morrell]] == null ? null : [[morrell]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Returns the value associated with the specified object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[craig]] ( final String ref ) { Object [[auditory]] = getObjectReference ( ref ) ; if ( [[auditory]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[auditory]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 711 ---------------------------------------------
Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[owed]] = tableRefs . get ( tableRef ) ; return [[owed]] == null ? null : [[owed]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Serializes an object . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[overburdened]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 713 ---------------------------------------------
Register a new hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[umpire]] ( final String hint ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( hint ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Returns a reference to the given entity . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String [[bologna]] ) { DbEntityDescriptor [[mikko]] = getTableDescriptor ( [[bologna]] ) ; if ( [[mikko]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[bologna]] ) ; } return [[mikko]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
Registers a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[tableAlias]] ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[biddies]] ( final String [[scorns]] , final DbEntityDescriptor ded , final String [[astonish]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , [[astonish]] ) ; if ( tableRefs . put ( [[scorns]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[scorns]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a String to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[aposto]] ( final String [[kodi]] ) { StringBuilder tableName = new StringBuilder ( [[kodi]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[impala]] = Format . fromCamelCase ( [[kodi]] , separatorChar ) ; tableName . append ( [[impala]] ) ; } else { tableName . append ( [[kodi]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 377 / 39 / 717:  72%|███████▏  | 717/1000 [1:35:36<37:44,  8.00s/it][Succeeded / Failed / Skipped / Total] 301 / 377 / 39 / 717:  72%|███████▏  | 718/1000 [1:35:46<37:37,  8.00s/it][Succeeded / Failed / Skipped / Total] 302 / 377 / 39 / 718:  72%|███████▏  | 718/1000 [1:35:46<37:37,  8.00s/it][Succeeded / Failed / Skipped / Total] 302 / 377 / 39 / 718:  72%|███████▏  | 719/1000 [1:35:59<37:30,  8.01s/it][Succeeded / Failed / Skipped / Total] 302 / 378 / 39 / 719:  72%|███████▏  | 719/1000 [1:35:59<37:30,  8.01s/it][Succeeded / Failed / Skipped / Total] 302 / 378 / 39 / 719:  72%|███████▏  | 720/1000 [1:36:08<37:23,  8.01s/it]Execute a request . --> Does not call this method --> Socre: 1.0

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[servletRequest]] , final Targets [[targets]] ) { final Enumeration < String > [[attributeNames]] = [[servletRequest]] . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object [[attrValue]] = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , [[attrValue]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[multi]] , final Targets [[participate]] ) { final Enumeration < String > [[apprehensive]] = [[multi]] . getAttributeNames ( ) ; while ( [[apprehensive]] . hasMoreElements ( ) ) { final String attrName = [[apprehensive]] . nextElement ( ) ; [[participate]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object [[guantanamo]] = [[multi]] . getAttribute ( attrName ) ; target . writeValue ( name , [[guantanamo]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a name to column name --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder [[propertyName]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < len ; [[i]] ++ ) { char c = columnName . charAt ( [[i]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[luckier]] ( final String columnName ) { StringBuilder [[mahmud]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[souvenir]] = 0 ; [[souvenir]] < len ; [[souvenir]] ++ ) { char c = columnName . charAt ( [[souvenir]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[mahmud]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[mahmud]] . append ( Character . toLowerCase ( c ) ) ; } } return [[mahmud]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 719 ---------------------------------------------
Gets the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[howw]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[howw]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[howw]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[howw]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 720 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 378 / 39 / 720:  72%|███████▏  | 720/1000 [1:36:08<37:23,  8.01s/it][Succeeded / Failed / Skipped / Total] 303 / 379 / 39 / 721:  72%|███████▏  | 721/1000 [1:36:08<37:12,  8.00s/it][Succeeded / Failed / Skipped / Total] 303 / 379 / 39 / 721:  72%|███████▏  | 722/1000 [1:36:10<37:01,  7.99s/it][Succeeded / Failed / Skipped / Total] 303 / 380 / 39 / 722:  72%|███████▏  | 722/1000 [1:36:10<37:01,  7.99s/it][Succeeded / Failed / Skipped / Total] 303 / 381 / 39 / 723:  72%|███████▏  | 723/1000 [1:36:20<36:54,  7.99s/it][Succeeded / Failed / Skipped / Total] 303 / 381 / 39 / 723:  72%|███████▏  | 724/1000 [1:36:35<36:49,  8.00s/it][Succeeded / Failed / Skipped / Total] 303 / 382 / 39 / 724:  72%|███████▏  | 724/1000 [1:36:35<36:49,  8.00s/it][Succeeded / Failed / Skipped / Total] 303 / 382 / 39 / 724:  72%|███████▎  | 725/1000 [1:36:40<36:40,  8.00s/it][Succeeded / Failed / Skipped / Total] 303 / 383 / 39 / 725:  72%|███████▎  | 725/1000 [1:36:40<36:40,  8.00s/it][Succeeded / Failed / Skipped / Total] 303 / 383 / 39 / 725:  73%|███████▎  | 726/1000 [1:36:42<36:30,  7.99s/it][Succeeded / Failed / Skipped / Total] 304 / 383 / 39 / 726:  73%|███████▎  | 726/1000 [1:36:42<36:30,  7.99s/it][Succeeded / Failed / Skipped / Total] 304 / 383 / 39 / 726:  73%|███████▎  | 727/1000 [1:36:43<36:19,  7.98s/it]Sets the request parameters . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( paramName ) ; [[paramValues]] = ServletUtil . prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final String p = [[paramValues]] [ j ] ; if ( p != null ) { final String [[encoding]] = madvocEncoding . getEncoding ( ) ; [[paramValues]] [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[encoding]] ) ; } } } final Object value = ( [[paramValues]] . length != 1 ? [[paramValues]] : [[paramValues]] [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[vibrant]] ( final HttpServletRequest [[gottschalk]] , final Targets targets ) { final boolean encode = encodeGetParams && [[gottschalk]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[gottschalk]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[gottschalk]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] [[recounts]] = [[gottschalk]] . getParameterValues ( paramName ) ; [[recounts]] = ServletUtil . prepareParameters ( [[recounts]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[recounts]] != null ) { if ( encode ) { for ( int j = 0 ; j < [[recounts]] . length ; j ++ ) { final String p = [[recounts]] [ j ] ; if ( p != null ) { final String [[shou]] = madvocEncoding . getEncoding ( ) ; [[recounts]] [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[shou]] ) ; } } } final Object value = ( [[recounts]] . length != 1 ? [[recounts]] : [[recounts]] [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 721 ---------------------------------------------
Gets the destination type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[bandages]] > [[bandages]] prepareGetValue ( final T t , final Class < [[bandages]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[bandages]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 722 ---------------------------------------------
Converts a column to a name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[fettes]] ( final String [[jubilation]] ) { String [[shashi]] = convertColumnNameToPropertyName ( [[jubilation]] ) ; return convertPropertyNameToColumnName ( [[shashi]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 723 ---------------------------------------------
Create wrapper for wrapper wrapper --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[paella]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Creates a new set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[aposto]] ( ) { final Set < T > [[trompe]] = new HashSet <> ( wrappers . size ( ) ) ; [[trompe]] . addAll ( wrappers . values ( ) ) ; return [[trompe]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
Sets the value at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , index , [[t]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[interact]] , final int dbSqlType ) throws SQLException { T [[mountbatten]] = TypeConverterManager . get ( ) . convertType ( [[interact]] , sqlType ) ; set ( st , index , [[mountbatten]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 726 ---------------------------------------------
Returns the separator of the path . --> Obtain a name for a given name --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[davenport]] ( final String [[guantanamera]] ) { if ( [[guantanamera]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[guantanamera]] ) ; } else { return separatorsToUnix ( [[guantanamera]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 384 / 39 / 727:  73%|███████▎  | 727/1000 [1:36:43<36:19,  7.98s/it][Succeeded / Failed / Skipped / Total] 304 / 384 / 39 / 727:  73%|███████▎  | 728/1000 [1:36:54<36:12,  7.99s/it][Succeeded / Failed / Skipped / Total] 305 / 384 / 39 / 728:  73%|███████▎  | 728/1000 [1:36:54<36:12,  7.99s/it][Succeeded / Failed / Skipped / Total] 305 / 384 / 39 / 728:  73%|███████▎  | 729/1000 [1:36:54<36:01,  7.98s/it][Succeeded / Failed / Skipped / Total] 305 / 384 / 40 / 729:  73%|███████▎  | 729/1000 [1:36:54<36:01,  7.98s/it][Succeeded / Failed / Skipped / Total] 305 / 384 / 40 / 729:  73%|███████▎  | 730/1000 [1:37:05<35:54,  7.98s/it][Succeeded / Failed / Skipped / Total] 306 / 384 / 40 / 730:  73%|███████▎  | 730/1000 [1:37:05<35:54,  7.98s/it][Succeeded / Failed / Skipped / Total] 306 / 384 / 40 / 730:  73%|███████▎  | 731/1000 [1:37:12<35:46,  7.98s/it][Succeeded / Failed / Skipped / Total] 307 / 384 / 40 / 731:  73%|███████▎  | 731/1000 [1:37:12<35:46,  7.98s/it][Succeeded / Failed / Skipped / Total] 307 / 384 / 40 / 731:  73%|███████▎  | 732/1000 [1:37:22<35:39,  7.98s/it][Succeeded / Failed / Skipped / Total] 308 / 384 / 40 / 732:  73%|███████▎  | 732/1000 [1:37:22<35:39,  7.98s/it][Succeeded / Failed / Skipped / Total] 308 / 384 / 40 / 732:  73%|███████▎  | 733/1000 [1:37:23<35:28,  7.97s/it][Succeeded / Failed / Skipped / Total] 309 / 384 / 40 / 733:  73%|███████▎  | 733/1000 [1:37:23<35:28,  7.97s/it][Succeeded / Failed / Skipped / Total] 309 / 384 / 40 / 733:  73%|███████▎  | 734/1000 [1:37:35<35:21,  7.98s/it]Resolve a wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[cave]] ( final Class < ? extends T > [[howser]] ) { String [[scarface]] = [[howser]] . getName ( ) ; T wrapper = lookup ( [[scarface]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[howser]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[scarface]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 728 ---------------------------------------------
Create a absolute path from a file . --> Convert a file to a File --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[alrighty]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Convenience method for creating a auditConsumer --> [[[SKIPPED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Registers a component . --> Add a bean to a bean --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[registerComponent]] ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp [[lefty]] ( final Class < ? > [[poltergeists]] ) { Objects . requireNonNull ( [[poltergeists]] ) ; madvocComponents . add ( ClassConsumer . of ( [[poltergeists]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 731 ---------------------------------------------
Starts the app . --> Gets the WebWebWebApp WebWebWebApp instance --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[hamburgers]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Register a component . --> Register a component --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[unrecognized]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 733 ---------------------------------------------
Registers a component configuration . --> Unregister a component --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[daren]] ( ) { final ActionConfigManager [[unnaturally]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[unnaturally]] . registerAnnotation ( Action . class ) ; [[unnaturally]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 384 / 40 / 734:  73%|███████▎  | 734/1000 [1:37:35<35:21,  7.98s/it][Succeeded / Failed / Skipped / Total] 310 / 384 / 40 / 734:  74%|███████▎  | 735/1000 [1:37:36<35:11,  7.97s/it][Succeeded / Failed / Skipped / Total] 311 / 384 / 40 / 735:  74%|███████▎  | 735/1000 [1:37:36<35:11,  7.97s/it][Succeeded / Failed / Skipped / Total] 311 / 384 / 40 / 735:  74%|███████▎  | 736/1000 [1:37:53<35:06,  7.98s/it][Succeeded / Failed / Skipped / Total] 311 / 385 / 40 / 736:  74%|███████▎  | 736/1000 [1:37:53<35:06,  7.98s/it][Succeeded / Failed / Skipped / Total] 311 / 385 / 40 / 736:  74%|███████▎  | 737/1000 [1:38:08<35:01,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 386 / 40 / 737:  74%|███████▎  | 737/1000 [1:38:08<35:01,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 386 / 40 / 737:  74%|███████▍  | 738/1000 [1:38:20<34:54,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 387 / 40 / 738:  74%|███████▍  | 738/1000 [1:38:20<34:54,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 387 / 40 / 738:  74%|███████▍  | 739/1000 [1:38:27<34:46,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 388 / 40 / 739:  74%|███████▍  | 739/1000 [1:38:27<34:46,  7.99s/it][Succeeded / Failed / Skipped / Total] 311 / 388 / 40 / 739:  74%|███████▍  | 740/1000 [1:38:34<34:37,  7.99s/it][Succeeded / Failed / Skipped / Total] 312 / 388 / 40 / 740:  74%|███████▍  | 740/1000 [1:38:34<34:37,  7.99s/it][Succeeded / Failed / Skipped / Total] 312 / 388 / 40 / 740:  74%|███████▍  | 741/1000 [1:38:55<34:34,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 388 / 40 / 741:  74%|███████▍  | 741/1000 [1:38:55<34:34,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 388 / 40 / 741:  74%|███████▍  | 742/1000 [1:38:56<34:24,  8.00s/it]Replies the regular expression for the given regular expression . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String [[investigated]] : includedJars ) { rulesJars . include ( [[investigated]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
Obtains a single excluded class . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[stereotypical]] ) { for ( final String excludedJar : [[stereotypical]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Returns the prefix of the given prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String doGetPath ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int [[prefix]] = getPrefixLength ( [[filename]] ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = index + separatorAdd ; if ( [[prefix]] >= [[filename]] . length ( ) || index < 0 || [[prefix]] >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( [[prefix]] , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String [[inexperienced]] , final int separatorAdd ) { if ( [[inexperienced]] == null ) { return null ; } int [[nagoya]] = getPrefixLength ( [[inexperienced]] ) ; if ( [[nagoya]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[inexperienced]] ) ; int [[enthralling]] = index + separatorAdd ; if ( [[nagoya]] >= [[inexperienced]] . length ( ) || index < 0 || [[nagoya]] >= [[enthralling]] ) { return StringPool . EMPTY ; } return [[inexperienced]] . substring ( [[nagoya]] , [[enthralling]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 737 ---------------------------------------------
Gets the included . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[bladder]] ( final String ... includedEntries ) { for ( final String [[polluted]] : includedEntries ) { rulesEntries . include ( [[polluted]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Scans through the given excluded . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[cassandra]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Returns a file extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[lastExtensionIndex]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[psychotropic]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[disappoint]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[disappoint]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[disappoint]] ) ; extension = filename . substring ( [[disappoint]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[disappoint]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[disappoint]] ) ; extension = filename . substring ( [[disappoint]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 740 ---------------------------------------------
Convert a byte array to a byte array . --> Convert a string to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[snifter]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Adds a file to the classpath . --> Add a file to a classloader --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[goring]] ( final String ... [[geese]] ) { for ( final String path : [[geese]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
[Succeeded / Failed / Skipped / Total] 313 / 389 / 40 / 742:  74%|███████▍  | 742/1000 [1:38:56<34:24,  8.00s/it][Succeeded / Failed / Skipped / Total] 313 / 389 / 40 / 742:  74%|███████▍  | 743/1000 [1:39:08<34:17,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 390 / 40 / 743:  74%|███████▍  | 743/1000 [1:39:08<34:17,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 390 / 40 / 743:  74%|███████▍  | 744/1000 [1:39:22<34:11,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 391 / 40 / 744:  74%|███████▍  | 744/1000 [1:39:22<34:11,  8.01s/it][Succeeded / Failed / Skipped / Total] 313 / 391 / 40 / 744:  74%|███████▍  | 745/1000 [1:39:23<34:01,  8.00s/it][Succeeded / Failed / Skipped / Total] 314 / 391 / 40 / 745:  74%|███████▍  | 745/1000 [1:39:23<34:01,  8.00s/it][Succeeded / Failed / Skipped / Total] 314 / 391 / 40 / 745:  75%|███████▍  | 746/1000 [1:39:50<33:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 314 / 392 / 40 / 746:  75%|███████▍  | 746/1000 [1:39:50<33:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 314 / 392 / 40 / 746:  75%|███████▍  | 747/1000 [1:39:59<33:51,  8.03s/it]--------------------------------------------- Result 742 ---------------------------------------------
Scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Gets the scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[hardest]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Converts a zipfile to a file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[zipEntry]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[zipEntry]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File [[lagaan]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[lagaan]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[lagaan]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[competent]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[competent]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[competent]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[competent]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 745 ---------------------------------------------
Scans the classpath . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String [[filePath]] = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[atchison]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[Kissin]]" == "[[Kissin]]" ) . searchPath ( rootPath ) ; File [[karli]] ; while ( ( [[karli]] = ff . nextFile ( ) ) != null ) { final String [[biagi]] = [[karli]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[biagi]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[biagi]] , rootPath , [[karli]] , "[[Kissin]]" == "[[Kissin]]" ) ; } else if ( includeResources ) { scanClassFile ( [[biagi]] , rootPath , [[karli]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 746 ---------------------------------------------
Gets the scope of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[ponzi]] ( final Class < ? extends MadvocScope > [[hendrix]] ) { for ( final MadvocScope [[embed]] : allScopes ) { if ( [[embed]] . getClass ( ) . equals ( [[hendrix]] ) ) { return [[embed]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 393 / 40 / 747:  75%|███████▍  | 747/1000 [1:39:59<33:51,  8.03s/it][Succeeded / Failed / Skipped / Total] 314 / 393 / 40 / 747:  75%|███████▍  | 748/1000 [1:40:05<33:43,  8.03s/it][Succeeded / Failed / Skipped / Total] 314 / 394 / 40 / 748:  75%|███████▍  | 748/1000 [1:40:05<33:43,  8.03s/it][Succeeded / Failed / Skipped / Total] 314 / 394 / 40 / 748:  75%|███████▍  | 749/1000 [1:41:01<33:51,  8.09s/it][Succeeded / Failed / Skipped / Total] 315 / 394 / 40 / 749:  75%|███████▍  | 749/1000 [1:41:01<33:51,  8.09s/it][Succeeded / Failed / Skipped / Total] 315 / 394 / 40 / 749:  75%|███████▌  | 750/1000 [1:41:09<33:43,  8.09s/it][Succeeded / Failed / Skipped / Total] 315 / 395 / 40 / 750:  75%|███████▌  | 750/1000 [1:41:09<33:43,  8.09s/it][Succeeded / Failed / Skipped / Total] 315 / 395 / 40 / 750:  75%|███████▌  | 751/1000 [1:41:20<33:36,  8.10s/it][Succeeded / Failed / Skipped / Total] 316 / 395 / 40 / 751:  75%|███████▌  | 751/1000 [1:41:20<33:36,  8.10s/it][Succeeded / Failed / Skipped / Total] 316 / 395 / 40 / 751:  75%|███████▌  | 752/1000 [1:41:31<33:28,  8.10s/it][Succeeded / Failed / Skipped / Total] 316 / 396 / 40 / 752:  75%|███████▌  | 752/1000 [1:41:31<33:28,  8.10s/it][Succeeded / Failed / Skipped / Total] 316 / 396 / 40 / 752:  75%|███████▌  | 753/1000 [1:41:33<33:18,  8.09s/it]Creates a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[perfumed]] ( final JtxTransactionMode [[concussion]] , final Object [[shattuck]] , final boolean active ) { return new DbJtxTransaction ( this , [[concussion]] , [[shattuck]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 748 ---------------------------------------------
Sets the scope of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[incompetents]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[filmmaker]] = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( [[filmmaker]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Returns true if the session contains set . --> Return true if the given set is a valid session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > [[it]] = tokenSet . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { Token t = [[it]] . next ( ) ; if ( t . isExpired ( ) ) { [[it]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[it]] . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[angel]] ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "[[Firewalls]]" != "[[Firewalls]]" ; } boolean found = "[[Firewalls]]" != "[[Firewalls]]" ; Iterator < Token > [[complicit]] = tokenSet . iterator ( ) ; while ( [[complicit]] . hasNext ( ) ) { Token t = [[complicit]] . next ( ) ; if ( t . isExpired ( ) ) { [[complicit]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[complicit]] . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 750 ---------------------------------------------
Gets the next token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[hearties]] ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 751 ---------------------------------------------
Visit a bean . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[banky]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 752 ---------------------------------------------
Creates a Bean . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[denominations]] ( final Object [[beecher]] ) { BeanCopy [[pelayo]] = new BeanCopy ( [[beecher]] ) ; [[pelayo]] . isSourceMap = [[beecher]] instanceof Map ; return [[pelayo]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 397 / 40 / 753:  75%|███████▌  | 753/1000 [1:41:33<33:18,  8.09s/it][Succeeded / Failed / Skipped / Total] 316 / 397 / 40 / 753:  75%|███████▌  | 754/1000 [1:41:49<33:13,  8.10s/it][Succeeded / Failed / Skipped / Total] 317 / 397 / 40 / 754:  75%|███████▌  | 754/1000 [1:41:49<33:13,  8.10s/it][Succeeded / Failed / Skipped / Total] 317 / 397 / 40 / 754:  76%|███████▌  | 755/1000 [1:42:01<33:06,  8.11s/it][Succeeded / Failed / Skipped / Total] 317 / 398 / 40 / 755:  76%|███████▌  | 755/1000 [1:42:01<33:06,  8.11s/it][Succeeded / Failed / Skipped / Total] 317 / 398 / 40 / 755:  76%|███████▌  | 756/1000 [1:42:21<33:02,  8.12s/it][Succeeded / Failed / Skipped / Total] 318 / 398 / 40 / 756:  76%|███████▌  | 756/1000 [1:42:21<33:02,  8.12s/it][Succeeded / Failed / Skipped / Total] 318 / 398 / 40 / 756:  76%|███████▌  | 757/1000 [1:42:35<32:55,  8.13s/it][Succeeded / Failed / Skipped / Total] 318 / 399 / 40 / 757:  76%|███████▌  | 757/1000 [1:42:35<32:55,  8.13s/it][Succeeded / Failed / Skipped / Total] 318 / 399 / 40 / 757:  76%|███████▌  | 758/1000 [1:42:48<32:49,  8.14s/it]Decode a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = length - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[cnt]] = [[endx]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? [[cnt]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[cnt]] - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , [[eLen]] = ( len / 3 ) * 3 ; d < [[eLen]] ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int [[j]] = 0 ; sndx <= [[endx]] - pad ; [[j]] ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - [[j]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[anatoly]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[evil]] = length - 1 ; int pad = arr [ [[evil]] ] == ' ' ? ( arr [ [[evil]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int [[unbridled]] = [[evil]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? [[unbridled]] / 78 : 0 ) << 1 : 0 ; int len = ( ( [[unbridled]] - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , [[gérard]] = ( len / 3 ) * 3 ; d < [[gérard]] ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int [[rehearsing]] = 0 ; sndx <= [[evil]] - pad ; [[rehearsing]] ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - [[rehearsing]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 754 ---------------------------------------------
Registers the template . --> Initialize the MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = [[templateData]] . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[mobbed]] ) { super . init ( [[mobbed]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[pharmacology]] = [[mobbed]] . getObjectReference ( entityName ) ; if ( [[pharmacology]] != null ) { ded = lookupType ( resolveClass ( [[pharmacology]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[mobbed]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 755 ---------------------------------------------
Register a new scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[caprices]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[journals]] = ( S ) scopes . get ( scopeType ) ; if ( [[journals]] == null ) { try { [[journals]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[journals]] ) ; scopes . put ( scopeType , [[journals]] ) ; } return [[journals]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Visit a property . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[berger]] , final Object [[fawcett]] ) { if ( isTargetMap ) { [[berger]] = LEFT_SQ_BRACKET + [[berger]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[berger]] , [[fawcett]] ) ; return "[[Aghast]]" == "[[Aghast]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 757 ---------------------------------------------
Removes a token from the set . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > [[iterator]] = [[tokenSet]] . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token token = [[iterator]] . next ( ) ; if ( token . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[pharmacology]] ( final Set < Token > [[schnitzel]] ) { if ( [[schnitzel]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[digby]] = null ; Iterator < Token > [[slithered]] = [[schnitzel]] . iterator ( ) ; while ( [[slithered]] . hasNext ( ) ) { Token token = [[slithered]] . next ( ) ; if ( token . isExpired ( ) ) { [[slithered]] . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[digby]] = token ; } } if ( ( [[digby]] != null ) && ( [[schnitzel]] . size ( ) >= maxTokensPerSession ) ) { [[schnitzel]] . remove ( [[digby]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
[Succeeded / Failed / Skipped / Total] 318 / 400 / 40 / 758:  76%|███████▌  | 758/1000 [1:42:48<32:49,  8.14s/it][Succeeded / Failed / Skipped / Total] 318 / 400 / 40 / 758:  76%|███████▌  | 759/1000 [1:42:53<32:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 318 / 401 / 40 / 759:  76%|███████▌  | 759/1000 [1:42:53<32:40,  8.13s/it][Succeeded / Failed / Skipped / Total] 318 / 401 / 40 / 759:  76%|███████▌  | 760/1000 [1:43:04<32:32,  8.14s/it][Succeeded / Failed / Skipped / Total] 319 / 401 / 40 / 760:  76%|███████▌  | 760/1000 [1:43:04<32:32,  8.14s/it][Succeeded / Failed / Skipped / Total] 319 / 401 / 40 / 760:  76%|███████▌  | 761/1000 [1:43:09<32:23,  8.13s/it][Succeeded / Failed / Skipped / Total] 320 / 401 / 40 / 761:  76%|███████▌  | 761/1000 [1:43:09<32:23,  8.13s/it][Succeeded / Failed / Skipped / Total] 320 / 401 / 40 / 761:  76%|███████▌  | 762/1000 [1:43:42<32:23,  8.17s/it]--------------------------------------------- Result 758 ---------------------------------------------
Resolve type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > [[tutoring]] , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[tutoring]] == null ) { [[tutoring]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[tutoring]] == null ) { [[tutoring]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 759 ---------------------------------------------
Removes a class from a class . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeBean ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void removeBean ( final Class [[retroactive]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 760 ---------------------------------------------
Registers a bean definition . --> Register a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[ctors]] = cd . getAllCtorDescriptors ( ) ; if ( [[ctors]] != null && [[ctors]] . length > 0 ) { if ( [[ctors]] . length > 1 ) { throw new PetiteException ( [[ctors]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructor]] = [[ctors]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[edit]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[bane]] = cd . getAllCtorDescriptors ( ) ; if ( [[bane]] != null && [[bane]] . length > 0 ) { if ( [[bane]] . length > 1 ) { throw new PetiteException ( [[bane]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[edit]] = [[bane]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[edit]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[edit]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[edit]] , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[edit]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 761 ---------------------------------------------
Register a bean definition . --> Register a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[oxo]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[oxo]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[oxo]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 402 / 40 / 762:  76%|███████▌  | 762/1000 [1:43:42<32:23,  8.17s/it][Succeeded / Failed / Skipped / Total] 320 / 402 / 40 / 762:  76%|███████▋  | 763/1000 [1:43:44<32:13,  8.16s/it][Succeeded / Failed / Skipped / Total] 320 / 403 / 40 / 763:  76%|███████▋  | 763/1000 [1:43:44<32:13,  8.16s/it][Succeeded / Failed / Skipped / Total] 320 / 403 / 40 / 763:  76%|███████▋  | 764/1000 [1:43:52<32:05,  8.16s/it][Succeeded / Failed / Skipped / Total] 321 / 403 / 40 / 764:  76%|███████▋  | 764/1000 [1:43:52<32:05,  8.16s/it][Succeeded / Failed / Skipped / Total] 321 / 403 / 40 / 764:  76%|███████▋  | 765/1000 [1:43:57<31:56,  8.15s/it]Returns a list of beans . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = [[entry]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[brought]] ) { String [ ] beanNames = beanCollections . get ( [[brought]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[sourdough]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[sourdough]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[brought]] ) ) { String beanName = [[sourdough]] . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[brought]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 763 ---------------------------------------------
Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[interfaces]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[interfaces]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[misdemeanors]] ) { beans . put ( name , [[misdemeanors]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[misdemeanors]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] [[clavo]] = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : [[clavo]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 764 ---------------------------------------------
Registers the method . --> Register a bean methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[twirled]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[twirled]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[backlash]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[backlash]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[backlash]] = md . getMethod ( ) ; } } if ( [[backlash]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[backlash]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[backlash]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 322 / 403 / 40 / 765:  76%|███████▋  | 765/1000 [1:43:57<31:56,  8.15s/it][Succeeded / Failed / Skipped / Total] 322 / 403 / 40 / 765:  77%|███████▋  | 766/1000 [1:44:10<31:49,  8.16s/it][Succeeded / Failed / Skipped / Total] 322 / 404 / 40 / 766:  77%|███████▋  | 766/1000 [1:44:10<31:49,  8.16s/it][Succeeded / Failed / Skipped / Total] 322 / 404 / 40 / 766:  77%|███████▋  | 767/1000 [1:44:20<31:41,  8.16s/it][Succeeded / Failed / Skipped / Total] 323 / 404 / 40 / 767:  77%|███████▋  | 767/1000 [1:44:20<31:41,  8.16s/it][Succeeded / Failed / Skipped / Total] 323 / 404 / 40 / 767:  77%|███████▋  | 768/1000 [1:44:29<31:34,  8.16s/it][Succeeded / Failed / Skipped / Total] 324 / 404 / 40 / 768:  77%|███████▋  | 768/1000 [1:44:30<31:34,  8.16s/it][Succeeded / Failed / Skipped / Total] 324 / 404 / 40 / 768:  77%|███████▋  | 769/1000 [1:44:32<31:24,  8.16s/it][Succeeded / Failed / Skipped / Total] 325 / 404 / 40 / 769:  77%|███████▋  | 769/1000 [1:44:32<31:24,  8.16s/it][Succeeded / Failed / Skipped / Total] 325 / 404 / 40 / 769:  77%|███████▋  | 770/1000 [1:44:38<31:15,  8.15s/it]Destroy bean --> Destroys a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[Sauron]]" == "[[Sauron]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 766 ---------------------------------------------
Adds a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[kook]] ( final String [[furlong]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[furlong]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 767 ---------------------------------------------
Replies the given type . --> Register a Bean --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[azim]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[azim]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Sets the parameters . --> Convert a map to a map --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[asteroids]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 769 ---------------------------------------------
Initialize Method . --> Initialize static methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[md]] = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[md]] . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[fraternal]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[fraternal]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[tetherball]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[tetherball]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor [[invented]] = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( [[invented]] == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( [[invented]] . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 404 / 40 / 770:  77%|███████▋  | 770/1000 [1:44:38<31:15,  8.15s/it][Succeeded / Failed / Skipped / Total] 326 / 404 / 40 / 770:  77%|███████▋  | 771/1000 [1:44:40<31:05,  8.15s/it][Succeeded / Failed / Skipped / Total] 327 / 404 / 40 / 771:  77%|███████▋  | 771/1000 [1:44:40<31:05,  8.15s/it][Succeeded / Failed / Skipped / Total] 327 / 404 / 40 / 771:  77%|███████▋  | 772/1000 [1:44:49<30:57,  8.15s/it][Succeeded / Failed / Skipped / Total] 328 / 404 / 40 / 772:  77%|███████▋  | 772/1000 [1:44:49<30:57,  8.15s/it][Succeeded / Failed / Skipped / Total] 328 / 404 / 40 / 772:  77%|███████▋  | 773/1000 [1:44:51<30:47,  8.14s/it][Succeeded / Failed / Skipped / Total] 329 / 404 / 40 / 773:  77%|███████▋  | 773/1000 [1:44:51<30:47,  8.14s/it][Succeeded / Failed / Skipped / Total] 329 / 404 / 40 / 773:  77%|███████▋  | 774/1000 [1:45:02<30:40,  8.14s/it][Succeeded / Failed / Skipped / Total] 330 / 404 / 40 / 774:  77%|███████▋  | 774/1000 [1:45:02<30:40,  8.14s/it][Succeeded / Failed / Skipped / Total] 330 / 404 / 40 / 774:  78%|███████▊  | 775/1000 [1:45:16<30:33,  8.15s/it][Succeeded / Failed / Skipped / Total] 331 / 404 / 40 / 775:  78%|███████▊  | 775/1000 [1:45:16<30:33,  8.15s/it][Succeeded / Failed / Skipped / Total] 331 / 404 / 40 / 775:  78%|███████▊  | 776/1000 [1:45:30<30:27,  8.16s/it][Succeeded / Failed / Skipped / Total] 332 / 404 / 40 / 776:  78%|███████▊  | 776/1000 [1:45:30<30:27,  8.16s/it][Succeeded / Failed / Skipped / Total] 332 / 404 / 40 / 776:  78%|███████▊  | 777/1000 [1:45:40<30:19,  8.16s/it]Register a bean definition . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[overwhelmed]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[shiho]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[shiho]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[overwhelmed]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[overwhelmed]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 771 ---------------------------------------------
Execute a request . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[vey]] ) throws Exception { printBefore ( [[vey]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[vey]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[vey]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 772 ---------------------------------------------
Assert that a method index argument . --> Thrown --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[gluten]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Visits the given value to the given value . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[echizen]] ) { if ( [[echizen]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[echizen]] ) ; } else if ( [[echizen]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[echizen]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[echizen]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 774 ---------------------------------------------
Create a protection . --> Create a new faxfresh fresh fax fresh f --> Socre: 1.0

[[[[Adv]]]]: public static String adviceFieldName ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String adviceFieldName ( final String [[fresno]] , final int index ) { return ProxettaNames . fieldPrefix + [[fresno]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 775 ---------------------------------------------
Returns the Java version . --> Returns the number of sketch --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int version ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = [[javaVersionNumber]] - 8 + 52 ; return version > [[platformVersion]] ? version : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[proclaimed]] ( final int version ) { final int [[shes]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[wreckage]] = [[shes]] - 8 + 52 ; return version > [[wreckage]] ? version : [[wreckage]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 776 ---------------------------------------------
Create a method name . --> Create an automatic for a given protection --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[vibrator]] ( final String [[crucified]] , final int [[autographed]] ) { return ProxettaNames . methodPrefix + [[crucified]] + ProxettaNames . methodDivider + [[autographed]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 777 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 332 / 405 / 40 / 777:  78%|███████▊  | 777/1000 [1:45:40<30:19,  8.16s/it][Succeeded / Failed / Skipped / Total] 332 / 405 / 40 / 777:  78%|███████▊  | 778/1000 [1:45:45<30:10,  8.16s/it][Succeeded / Failed / Skipped / Total] 332 / 406 / 40 / 778:  78%|███████▊  | 778/1000 [1:45:45<30:10,  8.16s/it][Succeeded / Failed / Skipped / Total] 332 / 406 / 40 / 778:  78%|███████▊  | 779/1000 [1:45:50<30:01,  8.15s/it][Succeeded / Failed / Skipped / Total] 332 / 407 / 40 / 779:  78%|███████▊  | 779/1000 [1:45:50<30:01,  8.15s/it][Succeeded / Failed / Skipped / Total] 332 / 407 / 40 / 779:  78%|███████▊  | 780/1000 [1:45:57<29:53,  8.15s/it][Succeeded / Failed / Skipped / Total] 333 / 407 / 40 / 780:  78%|███████▊  | 780/1000 [1:45:57<29:53,  8.15s/it][Succeeded / Failed / Skipped / Total] 333 / 407 / 40 / 780:  78%|███████▊  | 781/1000 [1:46:06<29:45,  8.15s/it][Succeeded / Failed / Skipped / Total] 333 / 408 / 40 / 781:  78%|███████▊  | 781/1000 [1:46:06<29:45,  8.15s/it][Succeeded / Failed / Skipped / Total] 333 / 408 / 40 / 781:  78%|███████▊  | 782/1000 [1:46:07<29:35,  8.14s/it][Succeeded / Failed / Skipped / Total] 334 / 408 / 40 / 782:  78%|███████▊  | 782/1000 [1:46:07<29:35,  8.14s/it][Succeeded / Failed / Skipped / Total] 334 / 408 / 40 / 782:  78%|███████▊  | 783/1000 [1:46:08<29:25,  8.13s/it][Succeeded / Failed / Skipped / Total] 335 / 408 / 40 / 783:  78%|███████▊  | 783/1000 [1:46:08<29:25,  8.13s/it][Succeeded / Failed / Skipped / Total] 335 / 408 / 40 / 783:  78%|███████▊  | 784/1000 [1:46:19<29:17,  8.14s/it]Registers the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , [[md]] . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[simplifies]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[womanizing]] = cd . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[womanizing]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[biji]] = new ProviderDefinition ( [[simplifies]] , [[womanizing]] . getMethod ( ) ) ; providers . put ( [[simplifies]] , [[biji]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 778 ---------------------------------------------
overrides the visitor to find the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[billeted]] = 1 ; [[billeted]] <= methodInfo . getArgumentsCount ( ) ; [[billeted]] ++ ) { loadMethodArgument ( mv , methodInfo , [[billeted]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Load method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[sentencing]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Visit a method . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int offset = methodInfo . getArgumentOffset ( [[index]] ) ; int type = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[ascended]] ) { int offset = methodInfo . getArgumentOffset ( [[ascended]] ) ; int type = methodInfo . getArgument ( [[ascended]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 781 ---------------------------------------------
Loads a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[crusoe]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[crusoe]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 782 ---------------------------------------------
Build a signature . --> Build a string representation of a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[cornelia]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 783 ---------------------------------------------
overrides the visitor to look for method . --> overrides the visitor to load a string --> Socre: 1.0

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int index ) { int [[offset]] = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo [[beto]] , final int index ) { int [[jango]] = [[beto]] . getArgumentOffset ( index ) ; int type = [[beto]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[jango]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[jango]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[jango]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[jango]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[jango]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
[Succeeded / Failed / Skipped / Total] 336 / 408 / 40 / 784:  78%|███████▊  | 784/1000 [1:46:19<29:17,  8.14s/it][Succeeded / Failed / Skipped / Total] 336 / 408 / 40 / 784:  78%|███████▊  | 785/1000 [1:46:27<29:09,  8.14s/it][Succeeded / Failed / Skipped / Total] 337 / 408 / 40 / 785:  78%|███████▊  | 785/1000 [1:46:27<29:09,  8.14s/it][Succeeded / Failed / Skipped / Total] 337 / 408 / 40 / 785:  79%|███████▊  | 786/1000 [1:46:33<29:00,  8.13s/it][Succeeded / Failed / Skipped / Total] 338 / 408 / 40 / 786:  79%|███████▊  | 786/1000 [1:46:33<29:00,  8.13s/it][Succeeded / Failed / Skipped / Total] 338 / 408 / 40 / 786:  79%|███████▊  | 787/1000 [1:46:34<28:50,  8.12s/it][Succeeded / Failed / Skipped / Total] 339 / 408 / 40 / 787:  79%|███████▊  | 787/1000 [1:46:34<28:50,  8.12s/it][Succeeded / Failed / Skipped / Total] 339 / 408 / 40 / 787:  79%|███████▉  | 788/1000 [1:46:56<28:46,  8.14s/it][Succeeded / Failed / Skipped / Total] 339 / 409 / 40 / 788:  79%|███████▉  | 788/1000 [1:46:56<28:46,  8.14s/it][Succeeded / Failed / Skipped / Total] 339 / 409 / 40 / 788:  79%|███████▉  | 789/1000 [1:47:00<28:36,  8.14s/it]--------------------------------------------- Result 784 ---------------------------------------------
implements the visitor to look for a given class . --> Static factory method to create a byte buffer --> Socre: 1.0

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[bourbon]] ) { if ( [[bourbon]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[bourbon]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[bourbon]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[bourbon]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[bourbon]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[bourbon]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[bourbon]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[bourbon]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[bourbon]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 785 ---------------------------------------------
Returns the flags . --> Get the system system . --> Socre: 1.0

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] [[userFlags]] = flags . getUserFlags ( ) ; if ( [[userFlags]] != null && [[userFlags]] . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] [[comeback]] = flags . getUserFlags ( ) ; if ( [[comeback]] != null && [[comeback]] . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 786 ---------------------------------------------
implements the visitor to look for a method . --> implements the visitor to get a method --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int [[varOffset]] ) { [[varOffset]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int [[batting]] ) { [[batting]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 787 ---------------------------------------------
implements the visitor to get the visitor to look for the primitive type . --> implements the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class [[frogs]] ) { if ( [[frogs]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[frogs]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[frogs]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[frogs]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[frogs]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[frogs]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[frogs]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[frogs]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 788 ---------------------------------------------
Returns the default encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String extractEncoding ( final String [[contentType]] , String defaultEncoding ) { String encoding = extractEncoding ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String [[marlowe]] , String defaultEncoding ) { String encoding = extractEncoding ( [[marlowe]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 339 / 410 / 40 / 789:  79%|███████▉  | 789/1000 [1:47:00<28:36,  8.14s/it][Succeeded / Failed / Skipped / Total] 339 / 410 / 40 / 789:  79%|███████▉  | 790/1000 [1:47:01<28:26,  8.13s/it][Succeeded / Failed / Skipped / Total] 339 / 411 / 40 / 790:  79%|███████▉  | 790/1000 [1:47:01<28:26,  8.13s/it][Succeeded / Failed / Skipped / Total] 339 / 411 / 40 / 790:  79%|███████▉  | 791/1000 [1:47:09<28:18,  8.13s/it][Succeeded / Failed / Skipped / Total] 339 / 412 / 40 / 791:  79%|███████▉  | 791/1000 [1:47:09<28:18,  8.13s/it][Succeeded / Failed / Skipped / Total] 339 / 412 / 40 / 791:  79%|███████▉  | 792/1000 [1:47:31<28:14,  8.15s/it][Succeeded / Failed / Skipped / Total] 339 / 413 / 40 / 792:  79%|███████▉  | 792/1000 [1:47:31<28:14,  8.15s/it][Succeeded / Failed / Skipped / Total] 339 / 413 / 40 / 792:  79%|███████▉  | 793/1000 [1:47:44<28:07,  8.15s/it][Succeeded / Failed / Skipped / Total] 339 / 414 / 40 / 793:  79%|███████▉  | 793/1000 [1:47:44<28:07,  8.15s/it][Succeeded / Failed / Skipped / Total] 339 / 414 / 40 / 793:  79%|███████▉  | 794/1000 [1:47:56<28:00,  8.16s/it][Succeeded / Failed / Skipped / Total] 339 / 415 / 40 / 794:  79%|███████▉  | 794/1000 [1:47:56<28:00,  8.16s/it][Succeeded / Failed / Skipped / Total] 339 / 415 / 40 / 794:  80%|███████▉  | 795/1000 [1:48:04<27:52,  8.16s/it]Send a HTTP response to the server . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[resp]] , final String realm ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse [[des]] , final String realm ) throws IOException { [[des]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[des]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 790 ---------------------------------------------
Get the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[conceptually]] ) { String [[earnest]] = [[conceptually]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[earnest]] == null ) { return null ; } int [[kuo]] = [[earnest]] . indexOf ( "Bearer " ) ; if ( [[kuo]] == - 1 ) { return null ; } return [[earnest]] . substring ( [[kuo]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
Download a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[amado]] ( final HttpServletResponse response , final File [[clavo]] , final String mimeType ) { if ( ! [[clavo]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[clavo]] ) ; } if ( [[clavo]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[clavo]] ) ; } prepareResponse ( response , [[clavo]] . getAbsolutePath ( ) , mimeType , ( int ) [[clavo]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Reads the request from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[argentine]] ( final HttpServletRequest [[swishing]] ) throws IOException { BufferedReader buff = [[swishing]] . getReader ( ) ; StringWriter [[gravel]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[gravel]] ) ; return [[gravel]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Gets the list of cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[list]] . add ( cookie ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[kt]] = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[kt]] . add ( cookie ) ; } } if ( [[kt]] . isEmpty ( ) ) { return null ; } return [[kt]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
Get a request from a given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[inputStream]] = request . getInputStream ( ) ; if ( [[inputStream]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[inputStream]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[guerra]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[modulator]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[hubie]] = request . getInputStream ( ) ; if ( [[hubie]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[hubie]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[modulator]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[modulator]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 339 / 416 / 40 / 795:  80%|███████▉  | 795/1000 [1:48:04<27:52,  8.16s/it][Succeeded / Failed / Skipped / Total] 339 / 416 / 40 / 795:  80%|███████▉  | 796/1000 [1:48:19<27:45,  8.17s/it][Succeeded / Failed / Skipped / Total] 339 / 417 / 40 / 796:  80%|███████▉  | 796/1000 [1:48:19<27:45,  8.17s/it][Succeeded / Failed / Skipped / Total] 339 / 417 / 40 / 796:  80%|███████▉  | 797/1000 [1:48:22<27:36,  8.16s/it][Succeeded / Failed / Skipped / Total] 340 / 417 / 40 / 797:  80%|███████▉  | 797/1000 [1:48:22<27:36,  8.16s/it][Succeeded / Failed / Skipped / Total] 340 / 417 / 40 / 797:  80%|███████▉  | 798/1000 [1:48:23<27:26,  8.15s/it][Succeeded / Failed / Skipped / Total] 340 / 418 / 40 / 798:  80%|███████▉  | 798/1000 [1:48:23<27:26,  8.15s/it][Succeeded / Failed / Skipped / Total] 340 / 418 / 40 / 798:  80%|███████▉  | 799/1000 [1:48:32<27:18,  8.15s/it][Succeeded / Failed / Skipped / Total] 341 / 418 / 40 / 799:  80%|███████▉  | 799/1000 [1:48:32<27:18,  8.15s/it][Succeeded / Failed / Skipped / Total] 341 / 418 / 40 / 799:  80%|████████  | 800/1000 [1:48:32<27:08,  8.14s/it][Succeeded / Failed / Skipped / Total] 342 / 418 / 40 / 800:  80%|████████  | 800/1000 [1:48:32<27:08,  8.14s/it][Succeeded / Failed / Skipped / Total] 342 / 418 / 40 / 800:  80%|████████  | 801/1000 [1:48:46<27:01,  8.15s/it][Succeeded / Failed / Skipped / Total] 343 / 418 / 40 / 801:  80%|████████  | 801/1000 [1:48:46<27:01,  8.15s/it][Succeeded / Failed / Skipped / Total] 343 / 418 / 40 / 801:  80%|████████  | 802/1000 [1:48:49<26:52,  8.14s/it][Succeeded / Failed / Skipped / Total] 344 / 418 / 40 / 802:  80%|████████  | 802/1000 [1:48:49<26:52,  8.14s/it][Succeeded / Failed / Skipped / Total] 344 / 418 / 40 / 802:  80%|████████  | 803/1000 [1:49:00<26:44,  8.15s/it]Sets the response type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( [[extension]] ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String fileName , String [[aerosols]] , final int fileSize ) { if ( ( [[aerosols]] == null ) && ( fileName != null ) ) { String [[communicate]] = FileNameUtil . getExtension ( fileName ) ; [[aerosols]] = MimeTypes . getMimeType ( [[communicate]] ) ; } if ( [[aerosols]] != null ) { response . setContentType ( [[aerosols]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 796 ---------------------------------------------
Add a servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[servletContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[reisman]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[reisman]] ) ; [[reisman]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Gets the request URL . --> Bind a string to a name --> Socre: 1.0

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest [[request]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = [[request]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest [[bindiya]] , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = [[bindiya]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "[[Buy]]" == "[[Buy]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 798 ---------------------------------------------
Prepare a servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext [[stasi]] = pageContext . getServletContext ( ) ; [[stasi]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Return the body of a body . --> A convenience method for creating an Jsability --> Socre: 1.0

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[ephemeral]] ) throws JspException { if ( [[ephemeral]] == null ) { return ; } try { [[ephemeral]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 800 ---------------------------------------------
Renders the given writer . --> Render a Writer --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[adequate]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[adequate]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
Initialize the strategy . --> Initialize a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[beals]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[armagnac]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[armagnac]] . invocationStrategy ) { continue ; } try { [[armagnac]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[armagnac]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the given body . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[mongers]] ( final JspFragment [[equalize]] ) throws JspException { char [ ] result = renderBody ( [[equalize]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 803 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 345 / 418 / 40 / 803:  80%|████████  | 803/1000 [1:49:00<26:44,  8.15s/it][Succeeded / Failed / Skipped / Total] 345 / 418 / 40 / 803:  80%|████████  | 804/1000 [1:49:12<26:37,  8.15s/it][Succeeded / Failed / Skipped / Total] 345 / 419 / 40 / 804:  80%|████████  | 804/1000 [1:49:12<26:37,  8.15s/it][Succeeded / Failed / Skipped / Total] 345 / 419 / 40 / 804:  80%|████████  | 805/1000 [1:49:18<26:28,  8.15s/it][Succeeded / Failed / Skipped / Total] 345 / 420 / 40 / 805:  80%|████████  | 805/1000 [1:49:18<26:28,  8.15s/it][Succeeded / Failed / Skipped / Total] 345 / 420 / 40 / 805:  81%|████████  | 806/1000 [1:49:33<26:22,  8.16s/it][Succeeded / Failed / Skipped / Total] 346 / 420 / 40 / 806:  81%|████████  | 806/1000 [1:49:33<26:22,  8.16s/it][Succeeded / Failed / Skipped / Total] 346 / 420 / 40 / 806:  81%|████████  | 807/1000 [1:49:34<26:12,  8.15s/it][Succeeded / Failed / Skipped / Total] 346 / 421 / 40 / 807:  81%|████████  | 807/1000 [1:49:34<26:12,  8.15s/it][Succeeded / Failed / Skipped / Total] 346 / 421 / 40 / 807:  81%|████████  | 808/1000 [1:49:43<26:04,  8.15s/it][Succeeded / Failed / Skipped / Total] 347 / 421 / 40 / 808:  81%|████████  | 808/1000 [1:49:43<26:04,  8.15s/it][Succeeded / Failed / Skipped / Total] 347 / 421 / 40 / 808:  81%|████████  | 809/1000 [1:49:51<25:56,  8.15s/it][Succeeded / Failed / Skipped / Total] 347 / 422 / 40 / 809:  81%|████████  | 809/1000 [1:49:51<25:56,  8.15s/it][Succeeded / Failed / Skipped / Total] 347 / 422 / 40 / 809:  81%|████████  | 810/1000 [1:49:59<25:47,  8.15s/it]Destroy a bean --> Destroys a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[convulsion]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Create a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[soma]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[stowaway]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 805 ---------------------------------------------
Validates the request parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[mammals]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 806 ---------------------------------------------
Process a request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[servletRequest]] , final String actionPath , final String [[httpMethod]] ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[completly]] , final String actionPath , final String [[corinna]] ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 807 ---------------------------------------------
Registers a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[intervals]] ( final ParamManager [[scythians]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Append a property to a string . --> Appends a value to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void putBaseProperty ( final String [[key]] , final String value , final boolean append ) { put ( null , baseProperties , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void putBaseProperty ( final String [[nymphs]] , final String value , final boolean append ) { put ( null , baseProperties , [[nymphs]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 809 ---------------------------------------------
Returns the request parameter value . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[kindhearted]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[kindhearted]] . length ; for ( int i = 0 ; i < [[kindhearted]] . length ; i ++ ) { String paramValue = [[kindhearted]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[kindhearted]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[kindhearted]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 810 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 423 / 40 / 810:  81%|████████  | 810/1000 [1:49:59<25:47,  8.15s/it][Succeeded / Failed / Skipped / Total] 347 / 423 / 40 / 810:  81%|████████  | 811/1000 [1:50:03<25:38,  8.14s/it][Succeeded / Failed / Skipped / Total] 348 / 423 / 40 / 811:  81%|████████  | 811/1000 [1:50:03<25:38,  8.14s/it][Succeeded / Failed / Skipped / Total] 348 / 423 / 40 / 811:  81%|████████  | 812/1000 [1:50:15<25:31,  8.15s/it][Succeeded / Failed / Skipped / Total] 349 / 423 / 40 / 812:  81%|████████  | 812/1000 [1:50:15<25:31,  8.15s/it][Succeeded / Failed / Skipped / Total] 349 / 423 / 40 / 812:  81%|████████▏ | 813/1000 [1:50:29<25:24,  8.15s/it][Succeeded / Failed / Skipped / Total] 350 / 423 / 40 / 813:  81%|████████▏ | 813/1000 [1:50:29<25:24,  8.15s/it][Succeeded / Failed / Skipped / Total] 350 / 423 / 40 / 813:  81%|████████▏ | 814/1000 [1:50:36<25:16,  8.15s/it][Succeeded / Failed / Skipped / Total] 351 / 423 / 40 / 814:  81%|████████▏ | 814/1000 [1:50:36<25:16,  8.15s/it][Succeeded / Failed / Skipped / Total] 351 / 423 / 40 / 814:  82%|████████▏ | 815/1000 [1:50:37<25:06,  8.14s/it][Succeeded / Failed / Skipped / Total] 352 / 423 / 40 / 815:  82%|████████▏ | 815/1000 [1:50:37<25:06,  8.14s/it][Succeeded / Failed / Skipped / Total] 352 / 423 / 40 / 815:  82%|████████▏ | 816/1000 [1:50:38<24:56,  8.14s/it][Succeeded / Failed / Skipped / Total] 353 / 423 / 40 / 816:  82%|████████▏ | 816/1000 [1:50:38<24:56,  8.14s/it][Succeeded / Failed / Skipped / Total] 353 / 423 / 40 / 816:  82%|████████▏ | 817/1000 [1:50:43<24:48,  8.13s/it][Succeeded / Failed / Skipped / Total] 353 / 424 / 40 / 817:  82%|████████▏ | 817/1000 [1:50:43<24:48,  8.13s/it][Succeeded / Failed / Skipped / Total] 353 / 424 / 40 / 817:  82%|████████▏ | 818/1000 [1:51:22<24:46,  8.17s/it]Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( [[name]] ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( [[name]] , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[prescriptions]] , final String [[argo]] ) { List < String > [[corset]] = super . getAll ( [[prescriptions]] ) ; if ( [[corset]] . isEmpty ( ) ) { super . add ( [[prescriptions]] , [[argo]] ) ; return ; } super . remove ( [[prescriptions]] ) ; [[corset]] . add ( [[argo]] ) ; super . addAll ( [[prescriptions]] , [[corset]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Appends a value pair to the map . --> Append a string to a string . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String [[profile]] , final Map < String , PropsEntry > map , final String [[key]] , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[key]] ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( [[key]] , [[realValue]] , [[profile]] , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String [[error]] , final Map < String , PropsEntry > map , final String [[caymans]] , final String value , final boolean append ) { String [[frederick]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[caymans]] ) ; if ( pv != null ) { [[frederick]] = pv . value + APPEND_SEPARATOR + [[frederick]] ; } } PropsEntry propsEntry = new PropsEntry ( [[caymans]] , [[frederick]] , [[error]] , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 812 ---------------------------------------------
Resolve string value . --> Helper method to create a String representing a String --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[espresso]] ( String [[convulsion]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Appends a property to the map . --> Convenience function to create a string --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean [[append]] ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , [[map]] , key , value , [[append]] ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[deanne]] ( final String key , final String value , final String [[libel]] , final boolean [[nunez]] ) { Map < String , PropsEntry > [[barracuda]] = profileProperties . computeIfAbsent ( [[libel]] , k -> new HashMap <> ( ) ) ; put ( [[libel]] , [[barracuda]] , key , value , [[nunez]] ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Convert a byte array to a byte array . --> Helper method to get the nnuceneudore length --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[i]] ; int word = 0 ; int [[off]] = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { word = ( word << 8 ) | ( data [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % data . length ; } offp [ 0 ] = [[off]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[aqueduct]] ; int word = 0 ; int [[annenberg]] = offp [ 0 ] ; for ( [[aqueduct]] = 0 ; [[aqueduct]] < 4 ; [[aqueduct]] ++ ) { word = ( word << 8 ) | ( data [ [[annenberg]] ] & 0xff ) ; [[annenberg]] = ( [[annenberg]] + 1 ) % data . length ; } offp [ 0 ] = [[annenberg]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 815 ---------------------------------------------
Encrypt a password . --> Convert salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , [[saltb]] , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , [[unfashionable]] , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 816 ---------------------------------------------
Converts a map to a map --> Get the barrier for the given barrier --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String [[prefix]] ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[barrymore]] , final String [ ] profiles , final String [ ] [[darting]] , String [[darker]] ) { if ( [[barrymore]] == null ) { [[barrymore]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Get profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[flott]] ( final String [[poisoner]] , final String [[cale]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[poisoner]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[cale]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 818 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 425 / 40 / 818:  82%|████████▏ | 818/1000 [1:51:22<24:46,  8.17s/it][Succeeded / Failed / Skipped / Total] 353 / 425 / 40 / 818:  82%|████████▏ | 819/1000 [1:51:46<24:42,  8.19s/it][Succeeded / Failed / Skipped / Total] 353 / 426 / 40 / 819:  82%|████████▏ | 819/1000 [1:51:46<24:42,  8.19s/it][Succeeded / Failed / Skipped / Total] 353 / 426 / 40 / 819:  82%|████████▏ | 820/1000 [1:51:49<24:32,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 427 / 40 / 820:  82%|████████▏ | 820/1000 [1:51:49<24:32,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 427 / 40 / 820:  82%|████████▏ | 821/1000 [1:51:59<24:24,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 428 / 40 / 821:  82%|████████▏ | 821/1000 [1:51:59<24:24,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 428 / 40 / 821:  82%|████████▏ | 822/1000 [1:52:03<24:16,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 429 / 40 / 822:  82%|████████▏ | 822/1000 [1:52:03<24:16,  8.18s/it][Succeeded / Failed / Skipped / Total] 353 / 429 / 40 / 822:  82%|████████▏ | 823/1000 [1:52:24<24:10,  8.20s/it][Succeeded / Failed / Skipped / Total] 353 / 430 / 40 / 823:  82%|████████▏ | 823/1000 [1:52:24<24:10,  8.20s/it][Succeeded / Failed / Skipped / Total] 353 / 430 / 40 / 823:  82%|████████▏ | 824/1000 [1:52:32<24:02,  8.19s/it][Succeeded / Failed / Skipped / Total] 353 / 431 / 40 / 824:  82%|████████▏ | 824/1000 [1:52:32<24:02,  8.19s/it][Succeeded / Failed / Skipped / Total] 353 / 431 / 40 / 824:  82%|████████▎ | 825/1000 [1:52:43<23:54,  8.20s/it]Read number of bytes from the stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyAll ( final OutputStream [[out]] ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream [[gnats]] ) throws IOException { int [[linguine]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[gnats]] . write ( b ) ; [[linguine]] ++ ; } return [[linguine]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Copy bytes to output stream --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[fishballs]] ( final OutputStream out , final int maxBytes ) throws IOException { int [[inhale]] = 0 ; while ( "True" == "True" ) { byte [[refraction]] = readByte ( ) ; if ( isBoundary ( [[refraction]] ) ) { break ; } out . write ( [[refraction]] ) ; [[inhale]] ++ ; if ( [[inhale]] == maxBytes ) { return [[inhale]] ; } } return [[inhale]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 820 ---------------------------------------------
Resolve the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[alvarez]] ( final ActionAnnotationValues [[betweens]] ) { final Class < ? extends Annotation > [[compensatory]] ; if ( [[betweens]] == null ) { [[compensatory]] = Action . class ; } else { [[compensatory]] = [[betweens]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[compensatory]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 821 ---------------------------------------------
Resolve a single action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[dans]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[dans]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Returns the string representation of the given string . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] [[try_bytes]] ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; [[try_bytes]] = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != [[try_bytes]] . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < [[try_bytes]] . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ [[try_bytes]] [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] [[hopping]] ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; [[hopping]] = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != [[hopping]] . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < [[hopping]] . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ [[hopping]] [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 823 ---------------------------------------------
Obtain the class of a class . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[interceptedBy]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { result = [[interceptedBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy [[fleas]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[fleas]] != null ) { result = [[fleas]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 824 ---------------------------------------------
Read a package . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package [[actionPackage]] = actionClass . getPackage ( ) ; final String [[actionPackageName]] = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package [[teach]] = actionClass . getPackage ( ) ; final String [[millenniums]] = [[teach]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 432 / 40 / 825:  82%|████████▎ | 825/1000 [1:52:43<23:54,  8.20s/it][Succeeded / Failed / Skipped / Total] 353 / 432 / 40 / 825:  83%|████████▎ | 826/1000 [1:52:54<23:47,  8.20s/it][Succeeded / Failed / Skipped / Total] 354 / 432 / 40 / 826:  83%|████████▎ | 826/1000 [1:52:54<23:47,  8.20s/it][Succeeded / Failed / Skipped / Total] 354 / 432 / 40 / 826:  83%|████████▎ | 827/1000 [1:52:54<23:37,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 432 / 41 / 827:  83%|████████▎ | 827/1000 [1:52:54<23:37,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 432 / 41 / 827:  83%|████████▎ | 828/1000 [1:52:57<23:27,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 433 / 41 / 828:  83%|████████▎ | 828/1000 [1:52:57<23:27,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 433 / 41 / 828:  83%|████████▎ | 829/1000 [1:52:58<23:18,  8.18s/it][Succeeded / Failed / Skipped / Total] 354 / 434 / 41 / 829:  83%|████████▎ | 829/1000 [1:52:58<23:18,  8.18s/it][Succeeded / Failed / Skipped / Total] 354 / 434 / 41 / 829:  83%|████████▎ | 830/1000 [1:53:17<23:12,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 435 / 41 / 830:  83%|████████▎ | 830/1000 [1:53:17<23:12,  8.19s/it][Succeeded / Failed / Skipped / Total] 354 / 435 / 41 / 830:  83%|████████▎ | 831/1000 [1:53:21<23:03,  8.18s/it][Succeeded / Failed / Skipped / Total] 354 / 436 / 41 / 831:  83%|████████▎ | 831/1000 [1:53:21<23:03,  8.18s/it][Succeeded / Failed / Skipped / Total] 354 / 436 / 41 / 831:  83%|████████▎ | 832/1000 [1:53:37<22:56,  8.19s/it][Succeeded / Failed / Skipped / Total] 355 / 436 / 41 / 832:  83%|████████▎ | 832/1000 [1:53:37<22:56,  8.19s/it][Succeeded / Failed / Skipped / Total] 355 / 436 / 41 / 832:  83%|████████▎ | 833/1000 [1:53:42<22:47,  8.19s/it][Succeeded / Failed / Skipped / Total] 356 / 436 / 41 / 833:  83%|████████▎ | 833/1000 [1:53:42<22:47,  8.19s/it][Succeeded / Failed / Skipped / Total] 356 / 436 / 41 / 833:  83%|████████▎ | 834/1000 [1:54:03<22:42,  8.21s/it][Succeeded / Failed / Skipped / Total] 356 / 437 / 41 / 834:  83%|████████▎ | 834/1000 [1:54:03<22:42,  8.21s/it][Succeeded / Failed / Skipped / Total] 356 / 437 / 41 / 834:  84%|████████▎ | 835/1000 [1:54:06<22:32,  8.20s/it]Registers alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition [[azra]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[azra]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 826 ---------------------------------------------
Returns the alias . --> Add a annotation to the annotation --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[kanazawa]] ( final ActionAnnotationValues [[airhead]] ) { String [[maddened]] = null ; if ( [[airhead]] != null ) { [[maddened]] = [[airhead]] . alias ( ) ; } return [[maddened]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the last modified time . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[aftertaste]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[aftertaste]] != null ) { result = [[aftertaste]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 829 ---------------------------------------------
Populates an action annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues [[annotationValues]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues [[kavita]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Gets the class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[awaywith]] = cache . get ( targetClass ) ; if ( [[awaywith]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 831 ---------------------------------------------
Visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[bollocks]] ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Returns the name of the given name . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public String resolveRealName ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String resolveRealName ( final String [[glandular]] ) { if ( jsonNames == null ) { return [[glandular]] ; } int [[horny]] = ArraysUtil . indexOf ( jsonNames , [[glandular]] ) ; if ( [[horny]] == - 1 ) { return [[glandular]] ; } return realNames [ [[horny]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 833 ---------------------------------------------
Resolve a real index . --> Returns the index of a given type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[multiply]] ( final String [[choirboys]] ) { if ( realNames == null ) { return [[choirboys]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[choirboys]] ) ; if ( realIndex == - 1 ) { return [[choirboys]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 834 ---------------------------------------------
Gets the type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
[Succeeded / Failed / Skipped / Total] 356 / 438 / 41 / 835:  84%|████████▎ | 835/1000 [1:54:06<22:32,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 438 / 41 / 835:  84%|████████▎ | 836/1000 [1:54:11<22:24,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 439 / 41 / 836:  84%|████████▎ | 836/1000 [1:54:11<22:24,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 439 / 41 / 836:  84%|████████▎ | 837/1000 [1:54:25<22:17,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 440 / 41 / 837:  84%|████████▎ | 837/1000 [1:54:25<22:17,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 440 / 41 / 837:  84%|████████▍ | 838/1000 [1:54:32<22:08,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 441 / 41 / 838:  84%|████████▍ | 838/1000 [1:54:32<22:08,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 441 / 41 / 838:  84%|████████▍ | 839/1000 [1:54:39<22:00,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 442 / 41 / 839:  84%|████████▍ | 839/1000 [1:54:39<22:00,  8.20s/it][Succeeded / Failed / Skipped / Total] 356 / 442 / 41 / 839:  84%|████████▍ | 840/1000 [1:54:41<21:50,  8.19s/it][Succeeded / Failed / Skipped / Total] 357 / 442 / 41 / 840:  84%|████████▍ | 840/1000 [1:54:41<21:50,  8.19s/it][Succeeded / Failed / Skipped / Total] 357 / 442 / 41 / 840:  84%|████████▍ | 841/1000 [1:54:57<21:43,  8.20s/it][Succeeded / Failed / Skipped / Total] 357 / 443 / 41 / 841:  84%|████████▍ | 841/1000 [1:54:57<21:43,  8.20s/it][Succeeded / Failed / Skipped / Total] 357 / 443 / 41 / 841:  84%|████████▍ | 842/1000 [1:55:00<21:34,  8.19s/it][Succeeded / Failed / Skipped / Total] 358 / 443 / 41 / 842:  84%|████████▍ | 842/1000 [1:55:00<21:34,  8.19s/it][Succeeded / Failed / Skipped / Total] 358 / 443 / 41 / 842:  84%|████████▍ | 843/1000 [1:55:14<21:27,  8.20s/it][Succeeded / Failed / Skipped / Total] 358 / 444 / 41 / 843:  84%|████████▍ | 843/1000 [1:55:14<21:27,  8.20s/it][Succeeded / Failed / Skipped / Total] 358 / 444 / 41 / 843:  84%|████████▍ | 844/1000 [1:55:16<21:18,  8.20s/it]--------------------------------------------- Result 835 ---------------------------------------------
Returns the type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[embryo]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Sets the proxy object . --> [[[FAILED]]]

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class [[proxyClass]] = proxy . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object proxy , final Object target ) { Class [[filipinos]] = proxy . getClass ( ) ; try { Field field = [[filipinos]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 837 ---------------------------------------------
Finds the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[cosmic]] ( final Class [[horizontal]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[horizontal]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Gets the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[endorsements]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Resolves a type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[funning]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 840 ---------------------------------------------
Build a reader . --> Copied from a class --> Socre: 1.0

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader classReader , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader classReader , final char [ ] [[romy]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 841 ---------------------------------------------
Add constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[instability]] ) { [[instability]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 842 ---------------------------------------------
Resolves a type . --> Resolve a type --> Socre: 1.0

[[[[Adv]]]]: public String resolveRealName ( final Class [[type]] , final String [[jsonName]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class [[helplessly]] , final String [[buffaloes]] ) { TypeData typeData = lookupTypeData ( [[helplessly]] ) ; return typeData . resolveRealName ( [[buffaloes]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 843 ---------------------------------------------
Add a bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[garbage]] ) { if ( bootstrapMethods != null ) { [[garbage]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 358 / 445 / 41 / 844:  84%|████████▍ | 844/1000 [1:55:16<21:18,  8.20s/it][Succeeded / Failed / Skipped / Total] 358 / 445 / 41 / 844:  84%|████████▍ | 845/1000 [1:55:18<21:09,  8.19s/it][Succeeded / Failed / Skipped / Total] 358 / 446 / 41 / 845:  84%|████████▍ | 845/1000 [1:55:18<21:09,  8.19s/it][Succeeded / Failed / Skipped / Total] 358 / 446 / 41 / 845:  85%|████████▍ | 846/1000 [1:55:31<21:01,  8.19s/it][Succeeded / Failed / Skipped / Total] 359 / 446 / 41 / 846:  85%|████████▍ | 846/1000 [1:55:31<21:01,  8.19s/it][Succeeded / Failed / Skipped / Total] 359 / 446 / 41 / 846:  85%|████████▍ | 847/1000 [1:55:43<20:54,  8.20s/it][Succeeded / Failed / Skipped / Total] 359 / 447 / 41 / 847:  85%|████████▍ | 847/1000 [1:55:43<20:54,  8.20s/it][Succeeded / Failed / Skipped / Total] 359 / 447 / 41 / 847:  85%|████████▍ | 848/1000 [1:55:46<20:45,  8.19s/it][Succeeded / Failed / Skipped / Total] 360 / 447 / 41 / 848:  85%|████████▍ | 848/1000 [1:55:46<20:45,  8.19s/it][Succeeded / Failed / Skipped / Total] 360 / 447 / 41 / 848:  85%|████████▍ | 849/1000 [1:56:24<20:42,  8.23s/it][Succeeded / Failed / Skipped / Total] 360 / 448 / 41 / 849:  85%|████████▍ | 849/1000 [1:56:24<20:42,  8.23s/it][Succeeded / Failed / Skipped / Total] 360 / 448 / 41 / 849:  85%|████████▌ | 850/1000 [1:56:47<20:36,  8.24s/it][Succeeded / Failed / Skipped / Total] 360 / 449 / 41 / 850:  85%|████████▌ | 850/1000 [1:56:47<20:36,  8.24s/it][Succeeded / Failed / Skipped / Total] 360 / 449 / 41 / 850:  85%|████████▌ | 851/1000 [1:56:58<20:28,  8.25s/it]Creates a new scope . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[scopeData]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[boe]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a version . --> [[[FAILED]]]

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int [[majorVersion]] , final String className ) { this . [[majorVersion]] = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int [[mounted]] , final String className ) { this . [[arizona]] = [[mounted]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Add a symbol . --> Declarative Service --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[biscuits]] , final boolean isInterface ) { int [[destroys]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[destroys]] , owner , name , [[biscuits]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Add a constant name . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[vladimir]] ( final String owner , final String [[conniving]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[conniving]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a owner . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( index , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[gacy]] ( final int index , final int tag , final String owner , final String name , final String [[andronicus]] ) { add ( new Entry ( index , tag , owner , name , [[andronicus]] , 0 , hash ( tag , owner , name , [[andronicus]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Add a float value . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[factory]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } int [[index]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[index]] , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int [[fujian]] = hash ( tag , value ) ; Entry entry = get ( [[fujian]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[fujian]] && entry . data == value ) { return entry ; } entry = entry . next ; } int [[novocain]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[novocain]] , tag , value , [[fujian]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 450 / 41 / 851:  85%|████████▌ | 851/1000 [1:56:58<20:28,  8.25s/it][Succeeded / Failed / Skipped / Total] 360 / 450 / 41 / 851:  85%|████████▌ | 852/1000 [1:57:05<20:20,  8.25s/it][Succeeded / Failed / Skipped / Total] 360 / 451 / 41 / 852:  85%|████████▌ | 852/1000 [1:57:05<20:20,  8.25s/it][Succeeded / Failed / Skipped / Total] 360 / 451 / 41 / 852:  85%|████████▌ | 853/1000 [1:57:09<20:11,  8.24s/it][Succeeded / Failed / Skipped / Total] 360 / 452 / 41 / 853:  85%|████████▌ | 853/1000 [1:57:09<20:11,  8.24s/it][Succeeded / Failed / Skipped / Total] 360 / 452 / 41 / 853:  85%|████████▌ | 854/1000 [1:57:38<20:06,  8.27s/it][Succeeded / Failed / Skipped / Total] 360 / 453 / 41 / 854:  85%|████████▌ | 854/1000 [1:57:38<20:06,  8.27s/it][Succeeded / Failed / Skipped / Total] 360 / 453 / 41 / 854:  86%|████████▌ | 855/1000 [1:57:55<19:59,  8.28s/it][Succeeded / Failed / Skipped / Total] 360 / 454 / 41 / 855:  86%|████████▌ | 855/1000 [1:57:55<19:59,  8.28s/it][Succeeded / Failed / Skipped / Total] 360 / 454 / 41 / 855:  86%|████████▌ | 856/1000 [1:58:03<19:51,  8.28s/it][Succeeded / Failed / Skipped / Total] 360 / 455 / 41 / 856:  86%|████████▌ | 856/1000 [1:58:03<19:51,  8.28s/it][Succeeded / Failed / Skipped / Total] 360 / 455 / 41 / 856:  86%|████████▌ | 857/1000 [1:58:11<19:43,  8.27s/it]Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[ement]] = get ( hashCode ) ; while ( [[ement]] != null ) { if ( [[ement]] . tag == tag && [[ement]] . hashCode == hashCode && [[ement]] . owner . equals ( owner ) && [[ement]] . name . equals ( name ) && [[ement]] . value . equals ( descriptor ) ) { return [[ement]] ; } [[ement]] = [[ement]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int [[constructors]] ) { int hashCode = hash ( tag , [[constructors]] ) ; Entry [[sticking]] = get ( hashCode ) ; while ( [[sticking]] != null ) { if ( [[sticking]] . tag == tag && [[sticking]] . hashCode == hashCode && [[sticking]] . data == [[constructors]] ) { return [[sticking]] ; } [[sticking]] = [[sticking]] . next ; } constantPool . putByte ( tag ) . putInt ( [[constructors]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[constructors]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a value to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[index]] , final int [[tag]] , final long value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[pinker]] , final int [[embarrasing]] , final long value ) { add ( new Entry ( [[pinker]] , [[embarrasing]] , value , hash ( [[embarrasing]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF - 8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[adnan]] , final String value ) { add ( new Entry ( [[adnan]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Add a constant entry . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[name]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String [[jackrabbits]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[jackrabbits]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( [[jackrabbits]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[jackrabbits]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[jackrabbits]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantNameAndType ( final int [[index]] , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , tag , name , [[descriptor]] , hash ( tag , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int [[division]] , final String name , final String [[kinsella]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[division]] , tag , name , [[kinsella]] , hash ( tag , name , [[kinsella]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 455 / 41 / 857:  86%|████████▌ | 857/1000 [1:58:11<19:43,  8.27s/it][Succeeded / Failed / Skipped / Total] 361 / 455 / 41 / 857:  86%|████████▌ | 858/1000 [1:58:36<19:37,  8.29s/it][Succeeded / Failed / Skipped / Total] 362 / 455 / 41 / 858:  86%|████████▌ | 858/1000 [1:58:36<19:37,  8.29s/it][Succeeded / Failed / Skipped / Total] 362 / 455 / 41 / 858:  86%|████████▌ | 859/1000 [1:59:19<19:35,  8.34s/it][Succeeded / Failed / Skipped / Total] 362 / 456 / 41 / 859:  86%|████████▌ | 859/1000 [1:59:19<19:35,  8.34s/it][Succeeded / Failed / Skipped / Total] 362 / 456 / 41 / 859:  86%|████████▌ | 860/1000 [1:59:25<19:26,  8.33s/it][Succeeded / Failed / Skipped / Total] 362 / 457 / 41 / 860:  86%|████████▌ | 860/1000 [1:59:25<19:26,  8.33s/it][Succeeded / Failed / Skipped / Total] 362 / 457 / 41 / 860:  86%|████████▌ | 861/1000 [1:59:53<19:21,  8.36s/it][Succeeded / Failed / Skipped / Total] 362 / 458 / 41 / 861:  86%|████████▌ | 861/1000 [1:59:53<19:21,  8.36s/it][Succeeded / Failed / Skipped / Total] 362 / 458 / 41 / 861:  86%|████████▌ | 862/1000 [2:00:06<19:13,  8.36s/it]Returns the constant pool entry . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[weissman]] ( final String [[appian]] ) { int [[lakeside]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[appian]] ) ; Entry [[krispy]] = get ( [[lakeside]] ) ; while ( [[krispy]] != null ) { if ( [[krispy]] . tag == Symbol . CONSTANT_UTF8_TAG && [[krispy]] . hashCode == [[lakeside]] && [[krispy]] . value . equals ( [[appian]] ) ) { return [[krispy]] . index ; } [[krispy]] = [[krispy]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[appian]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[appian]] , [[lakeside]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Add a method . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[conformity]] ( final int [[aras]] , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Add a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String [[adept]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[adept]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == bootstrapMethodIndex && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( [[descriptor]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[palace]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[palace]] , bootstrapMethodIndex ) ; Entry [[romans]] = get ( hashCode ) ; while ( [[romans]] != null ) { if ( [[romans]] . tag == tag && [[romans]] . hashCode == hashCode && [[romans]] . data == bootstrapMethodIndex && [[romans]] . name . equals ( name ) && [[romans]] . value . equals ( [[palace]] ) ) { return [[romans]] ; } [[romans]] = [[romans]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[palace]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[palace]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 363 / 458 / 41 / 862:  86%|████████▌ | 862/1000 [2:00:06<19:13,  8.36s/it][Succeeded / Failed / Skipped / Total] 363 / 458 / 41 / 862:  86%|████████▋ | 863/1000 [2:00:09<19:04,  8.35s/it][Succeeded / Failed / Skipped / Total] 363 / 459 / 41 / 863:  86%|████████▋ | 863/1000 [2:00:09<19:04,  8.35s/it][Succeeded / Failed / Skipped / Total] 363 / 459 / 41 / 863:  86%|████████▋ | 864/1000 [2:00:24<18:57,  8.36s/it][Succeeded / Failed / Skipped / Total] 364 / 459 / 41 / 864:  86%|████████▋ | 864/1000 [2:00:24<18:57,  8.36s/it][Succeeded / Failed / Skipped / Total] 364 / 459 / 41 / 864:  86%|████████▋ | 865/1000 [2:00:51<18:51,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 460 / 41 / 865:  86%|████████▋ | 865/1000 [2:00:51<18:51,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 460 / 41 / 865:  87%|████████▋ | 866/1000 [2:01:00<18:43,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 461 / 41 / 866:  87%|████████▋ | 866/1000 [2:01:00<18:43,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 461 / 41 / 866:  87%|████████▋ | 867/1000 [2:01:03<18:34,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 462 / 41 / 867:  87%|████████▋ | 867/1000 [2:01:03<18:34,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 462 / 41 / 867:  87%|████████▋ | 868/1000 [2:01:18<18:26,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 463 / 41 / 868:  87%|████████▋ | 868/1000 [2:01:18<18:26,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 464 / 41 / 869:  87%|████████▋ | 869/1000 [2:01:18<18:17,  8.38s/it][Succeeded / Failed / Skipped / Total] 364 / 464 / 41 / 869:  87%|████████▋ | 870/1000 [2:01:57<18:13,  8.41s/it]Add a constant pool entry . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[krispy]] ) { int hashCode = hash ( tag , [[krispy]] ) ; Entry [[blastin]] = get ( hashCode ) ; while ( [[blastin]] != null ) { if ( [[blastin]] . tag == tag && [[blastin]] . hashCode == hashCode && [[blastin]] . value . equals ( [[krispy]] ) ) { return [[blastin]] ; } [[blastin]] = [[blastin]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[krispy]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[krispy]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[tag]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[tag]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[crisscross]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[crisscross]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[crisscross]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a value . -->  --> Socre: 0.9999999999999969

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[index]] , final int [[tag]] , final String [[value]] ) { add ( new Entry ( [[index]] , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[iure]] , final int [[comeon]] , final String [[ripp]] ) { add ( new Entry ( [[iure]] , [[comeon]] , [[ripp]] , hash ( [[comeon]] , [[ripp]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int [[index]] , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; add ( new Entry ( [[index]] , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int [[attitudes]] , final String name , final String descriptor , final int [[akimoto]] ) { int hashCode = hash ( tag , name , descriptor , [[akimoto]] ) ; add ( new Entry ( [[attitudes]] , tag , null , name , descriptor , [[akimoto]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 866 ---------------------------------------------
Add a bootstrap bootstrap bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[adept]] ( final Handle [[faeces]] , final Object ... [[acorn]] ) { ByteVector [[reaction]] = bootstrapMethods ; if ( [[reaction]] == null ) { [[reaction]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a intensity . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int [[dumont]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 868 ---------------------------------------------
Clear the map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[innuendos]] ( ) { for ( int [[reggie]] = 0 ; [[reggie]] < entries . length ; [[reggie]] ++ ) { entries [ [[reggie]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the name of the string . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char [[c]] = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[c]] >= ' ' && [[c]] <= ' ' ) { [[c]] += 32 ; } } h = 31 * h + [[c]] ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[seeks]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char [[authorizing]] = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[authorizing]] >= ' ' && [[authorizing]] <= ' ' ) { [[authorizing]] += 32 ; } } h = 31 * h + [[authorizing]] ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
[Succeeded / Failed / Skipped / Total] 364 / 465 / 41 / 870:  87%|████████▋ | 870/1000 [2:01:57<18:13,  8.41s/it][Succeeded / Failed / Skipped / Total] 364 / 465 / 41 / 870:  87%|████████▋ | 871/1000 [2:02:00<18:04,  8.40s/it][Succeeded / Failed / Skipped / Total] 364 / 466 / 41 / 871:  87%|████████▋ | 871/1000 [2:02:00<18:04,  8.40s/it][Succeeded / Failed / Skipped / Total] 364 / 466 / 41 / 871:  87%|████████▋ | 872/1000 [2:02:00<17:54,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 466 / 42 / 872:  87%|████████▋ | 872/1000 [2:02:00<17:54,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 466 / 42 / 872:  87%|████████▋ | 873/1000 [2:02:06<17:45,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 467 / 42 / 873:  87%|████████▋ | 873/1000 [2:02:06<17:45,  8.39s/it][Succeeded / Failed / Skipped / Total] 364 / 467 / 42 / 873:  87%|████████▋ | 874/1000 [2:02:13<17:37,  8.39s/it][Succeeded / Failed / Skipped / Total] 365 / 467 / 42 / 874:  87%|████████▋ | 874/1000 [2:02:13<17:37,  8.39s/it][Succeeded / Failed / Skipped / Total] 365 / 467 / 42 / 874:  88%|████████▊ | 875/1000 [2:02:18<17:28,  8.39s/it][Succeeded / Failed / Skipped / Total] 366 / 467 / 42 / 875:  88%|████████▊ | 875/1000 [2:02:18<17:28,  8.39s/it][Succeeded / Failed / Skipped / Total] 366 / 467 / 42 / 875:  88%|████████▊ | 876/1000 [2:02:28<17:20,  8.39s/it][Succeeded / Failed / Skipped / Total] 366 / 468 / 42 / 876:  88%|████████▊ | 876/1000 [2:02:28<17:20,  8.39s/it][Succeeded / Failed / Skipped / Total] 366 / 468 / 42 / 876:  88%|████████▊ | 877/1000 [2:02:34<17:11,  8.39s/it][Succeeded / Failed / Skipped / Total] 367 / 468 / 42 / 877:  88%|████████▊ | 877/1000 [2:02:34<17:11,  8.39s/it][Succeeded / Failed / Skipped / Total] 367 / 468 / 42 / 877:  88%|████████▊ | 878/1000 [2:02:38<17:02,  8.38s/it][Succeeded / Failed / Skipped / Total] 368 / 468 / 42 / 878:  88%|████████▊ | 878/1000 [2:02:38<17:02,  8.38s/it][Succeeded / Failed / Skipped / Total] 368 / 468 / 42 / 878:  88%|████████▊ | 879/1000 [2:02:49<16:54,  8.38s/it]--------------------------------------------- Result 870 ---------------------------------------------
Removes entries from the iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[electrochemical]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns a list of all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[aerodynamic]] ( ) { List < Map . Entry < String , V > > [[appendectomy]] = new LinkedList <> ( ) ; MapEntry < V > [[fat]] = head . after ; while ( [[fat]] != head ) { [[appendectomy]] . add ( [[fat]] ) ; [[fat]] = [[fat]] . after ; } return [[appendectomy]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Visit a annotation --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
Updates the capacity . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[fixed]] ( final int minCapacity ) { final int [[multiplies]] = buffer . length ; int newCapacity = [[multiplies]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
Starts the chain . --> Create the gener --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[thacker]] = 0 ; [[thacker]] < tmd . proxyData . length ; [[thacker]] ++ ) { tmd . selectCurrentProxy ( [[thacker]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Replies the chain of the chain . --> Unregister a account --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[unaccounted]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 876 ---------------------------------------------
Returns a map with the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > getAll ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int [[i]] = index ( h ) ; MapEntry < V > [[e]] = entries [ [[i]] ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( name , [[e]] . key ) ) { values . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int [[softened]] = index ( h ) ; MapEntry < V > [[clemons]] = entries [ [[softened]] ] ; while ( [[clemons]] != null ) { if ( [[clemons]] . hash == h && eq ( name , [[clemons]] . key ) ) { values . addFirst ( [[clemons]] . getValue ( ) ) ; } [[clemons]] = [[clemons]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 877 ---------------------------------------------
Appends the specified character to the specified character sequence . --> Allocate a number of CharSequences --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[riddle]] ( final CharSequence [[chickadee]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[riddle]] ( [[chickadee]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 878 ---------------------------------------------
Parse a path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[hazzard]] ( final String [[kimba]] ) { return [[kimba]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[kimba]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 368 / 469 / 42 / 879:  88%|████████▊ | 879/1000 [2:02:49<16:54,  8.38s/it][Succeeded / Failed / Skipped / Total] 368 / 469 / 42 / 879:  88%|████████▊ | 880/1000 [2:02:50<16:45,  8.38s/it][Succeeded / Failed / Skipped / Total] 368 / 470 / 42 / 880:  88%|████████▊ | 880/1000 [2:02:50<16:45,  8.38s/it][Succeeded / Failed / Skipped / Total] 368 / 470 / 42 / 880:  88%|████████▊ | 881/1000 [2:03:04<16:37,  8.38s/it][Succeeded / Failed / Skipped / Total] 369 / 470 / 42 / 881:  88%|████████▊ | 881/1000 [2:03:04<16:37,  8.38s/it][Succeeded / Failed / Skipped / Total] 369 / 470 / 42 / 881:  88%|████████▊ | 882/1000 [2:03:11<16:28,  8.38s/it][Succeeded / Failed / Skipped / Total] 370 / 470 / 42 / 882:  88%|████████▊ | 882/1000 [2:03:11<16:28,  8.38s/it][Succeeded / Failed / Skipped / Total] 370 / 470 / 42 / 882:  88%|████████▊ | 883/1000 [2:03:17<16:20,  8.38s/it][Succeeded / Failed / Skipped / Total] 370 / 471 / 42 / 883:  88%|████████▊ | 883/1000 [2:03:17<16:20,  8.38s/it][Succeeded / Failed / Skipped / Total] 370 / 471 / 42 / 883:  88%|████████▊ | 884/1000 [2:03:18<16:10,  8.37s/it][Succeeded / Failed / Skipped / Total] 371 / 471 / 42 / 884:  88%|████████▊ | 884/1000 [2:03:18<16:10,  8.37s/it][Succeeded / Failed / Skipped / Total] 371 / 471 / 42 / 884:  88%|████████▊ | 885/1000 [2:03:25<16:02,  8.37s/it]Process Method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[Salami]]" != "[[Salami]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[Salami]]" != "[[Salami]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[Salami]]" != "[[Salami]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 880 ---------------------------------------------
Appends a path to the output . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[carrie]] ( final CharSequence [[carmela]] ) { _push ( [[carmela]] ) ; if ( altPath != null ) { altPath . push ( [[carmela]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
Creates a new proxied type . --> Create a new protection --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[dancy]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[dancy]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[dancy]] ) ; [[dancy]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[dancy]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[dancy]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 882 ---------------------------------------------
Add a servlet servlet . --> Add a filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[albertine]] ( final ServletContext [[galahad]] ) { [[galahad]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[galahad]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = [[galahad]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 883 ---------------------------------------------
Executes a proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object [[next]] = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( [[next]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[kalyani]] = [[kalyani]] ( ) ; Object [[azalea]] = pathref . continueWith ( this , methodName , [[kalyani]] ) ; return ProxyTarget . returnValue ( [[azalea]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 884 ---------------------------------------------
Get getter for property . --> Read a JsonBean --> Socre: 1.0

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[warped]] = propertyDescriptor . getGetter ( declared ) ; if ( [[warped]] != null ) { try { return [[warped]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 885 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 372 / 471 / 42 / 885:  88%|████████▊ | 885/1000 [2:03:25<16:02,  8.37s/it][Succeeded / Failed / Skipped / Total] 372 / 471 / 42 / 885:  89%|████████▊ | 886/1000 [2:03:47<15:55,  8.38s/it][Succeeded / Failed / Skipped / Total] 373 / 471 / 42 / 886:  89%|████████▊ | 886/1000 [2:03:47<15:55,  8.38s/it][Succeeded / Failed / Skipped / Total] 373 / 471 / 42 / 886:  89%|████████▊ | 887/1000 [2:04:10<15:49,  8.40s/it][Succeeded / Failed / Skipped / Total] 374 / 471 / 42 / 887:  89%|████████▊ | 887/1000 [2:04:10<15:49,  8.40s/it][Succeeded / Failed / Skipped / Total] 374 / 471 / 42 / 887:  89%|████████▉ | 888/1000 [2:04:12<15:39,  8.39s/it][Succeeded / Failed / Skipped / Total] 374 / 472 / 42 / 888:  89%|████████▉ | 888/1000 [2:04:12<15:39,  8.39s/it][Succeeded / Failed / Skipped / Total] 374 / 472 / 42 / 888:  89%|████████▉ | 889/1000 [2:04:20<15:31,  8.39s/it][Succeeded / Failed / Skipped / Total] 374 / 473 / 42 / 889:  89%|████████▉ | 889/1000 [2:04:20<15:31,  8.39s/it][Succeeded / Failed / Skipped / Total] 374 / 473 / 42 / 889:  89%|████████▉ | 890/1000 [2:04:21<15:22,  8.38s/it][Succeeded / Failed / Skipped / Total] 375 / 473 / 42 / 890:  89%|████████▉ | 890/1000 [2:04:21<15:22,  8.38s/it][Succeeded / Failed / Skipped / Total] 375 / 473 / 42 / 890:  89%|████████▉ | 891/1000 [2:04:51<15:16,  8.41s/it][Succeeded / Failed / Skipped / Total] 376 / 473 / 42 / 891:  89%|████████▉ | 891/1000 [2:04:51<15:16,  8.41s/it][Succeeded / Failed / Skipped / Total] 376 / 473 / 42 / 891:  89%|████████▉ | 892/1000 [2:04:51<15:07,  8.40s/it]Add a map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[colas]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
Appends the buffer to the buffer . --> Allocates a new BufferedBufferedWriter --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[vision]] ( final Buffer [[biodegradable]] ) { if ( [[biodegradable]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Writes a file to a file --> Allocate a file --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[array]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[weighted]] = fastByteBuffer . toArray ( ) ; writer . write ( new String ( [[weighted]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[eventually]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[eventually]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[eventually]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 888 ---------------------------------------------
Returns all the fields declared in this class . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[budged]] == null ) { FieldDescriptor [ ] [[budged]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[budged]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[budged]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[budged]] ; } return [[budged]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Convert a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[alderaan]] ( final JtxTransactionMode txMode ) { final int isolation ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 890 ---------------------------------------------
Write an event to the output stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[hinder]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 891 ---------------------------------------------
Get the long . --> Obtain number from a map --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[demonstrators]] ( final String [[lao]] ) { Number [[roasting]] = ( Number ) map . get ( [[lao]] ) ; if ( [[roasting]] == null ) { return null ; } if ( [[roasting]] instanceof Long ) { return ( Long ) [[roasting]] ; } return [[roasting]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 376 / 474 / 42 / 892:  89%|████████▉ | 892/1000 [2:04:51<15:07,  8.40s/it][Succeeded / Failed / Skipped / Total] 376 / 474 / 42 / 892:  89%|████████▉ | 893/1000 [2:05:01<14:58,  8.40s/it][Succeeded / Failed / Skipped / Total] 376 / 475 / 42 / 893:  89%|████████▉ | 893/1000 [2:05:01<14:58,  8.40s/it][Succeeded / Failed / Skipped / Total] 376 / 475 / 42 / 893:  89%|████████▉ | 894/1000 [2:05:08<14:50,  8.40s/it][Succeeded / Failed / Skipped / Total] 376 / 476 / 42 / 894:  89%|████████▉ | 894/1000 [2:05:08<14:50,  8.40s/it][Succeeded / Failed / Skipped / Total] 376 / 476 / 42 / 894:  90%|████████▉ | 895/1000 [2:05:16<14:41,  8.40s/it][Succeeded / Failed / Skipped / Total] 377 / 476 / 42 / 895:  90%|████████▉ | 895/1000 [2:05:16<14:41,  8.40s/it][Succeeded / Failed / Skipped / Total] 377 / 476 / 42 / 895:  90%|████████▉ | 896/1000 [2:05:16<14:32,  8.39s/it][Succeeded / Failed / Skipped / Total] 377 / 477 / 42 / 896:  90%|████████▉ | 896/1000 [2:05:16<14:32,  8.39s/it][Succeeded / Failed / Skipped / Total] 377 / 477 / 42 / 896:  90%|████████▉ | 897/1000 [2:05:21<14:23,  8.39s/it][Succeeded / Failed / Skipped / Total] 378 / 477 / 42 / 897:  90%|████████▉ | 897/1000 [2:05:21<14:23,  8.39s/it][Succeeded / Failed / Skipped / Total] 378 / 477 / 42 / 897:  90%|████████▉ | 898/1000 [2:05:49<14:17,  8.41s/it][Succeeded / Failed / Skipped / Total] 378 / 478 / 42 / 898:  90%|████████▉ | 898/1000 [2:05:49<14:17,  8.41s/it][Succeeded / Failed / Skipped / Total] 378 / 478 / 42 / 898:  90%|████████▉ | 899/1000 [2:05:54<14:08,  8.40s/it][Succeeded / Failed / Skipped / Total] 378 / 479 / 42 / 899:  90%|████████▉ | 899/1000 [2:05:54<14:08,  8.40s/it][Succeeded / Failed / Skipped / Total] 378 / 479 / 42 / 899:  90%|█████████ | 900/1000 [2:05:59<13:59,  8.40s/it][Succeeded / Failed / Skipped / Total] 378 / 480 / 42 / 900:  90%|█████████ | 900/1000 [2:05:59<13:59,  8.40s/it][Succeeded / Failed / Skipped / Total] 378 / 480 / 42 / 900:  90%|█████████ | 901/1000 [2:06:19<13:52,  8.41s/it]Get the integer integer value . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[friday]] = ( Number ) map . get ( key ) ; if ( [[friday]] == null ) { return null ; } if ( [[friday]] instanceof Integer ) { return ( Integer ) [[friday]] ; } return [[friday]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Gets the char from the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[concern]] ( final String [[appreciated]] ) { CharSequence [[cylinders]] = ( CharSequence ) map . get ( [[appreciated]] ) ; return [[cylinders]] == null ? null : [[cylinders]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Uploads the given input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[anguished]] = ( Uploadable ) o ; InputStream inputStream = [[anguished]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 895 ---------------------------------------------
Creates a json object from a map . --> Converts a map to a map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[gracia]] > [[gracia]] getValue ( final String key ) { [[gracia]] val = ( [[gracia]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[gracia]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[gracia]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Returns a double value . --> [[[FAILED]]]

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[palmdale]] ( final String [[debauched]] ) { Number number = ( Number ) map . get ( [[debauched]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Get a float value . --> Converts a Number to a Number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[topic]] ( final String [[idlewild]] ) { Number [[counterpoint]] = ( Number ) map . get ( [[idlewild]] ) ; if ( [[counterpoint]] == null ) { return null ; } if ( [[counterpoint]] instanceof Float ) { return ( Float ) [[counterpoint]] ; } return [[counterpoint]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Add a key . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String value ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[hurd]] , final String value ) { Objects . requireNonNull ( [[hurd]] ) ; map . put ( [[hurd]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Sets the email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[eveybody]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 900 ---------------------------------------------
Closes the folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . [[baily]] = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
[Succeeded / Failed / Skipped / Total] 379 / 480 / 42 / 901:  90%|█████████ | 901/1000 [2:06:19<13:52,  8.41s/it][Succeeded / Failed / Skipped / Total] 379 / 480 / 42 / 901:  90%|█████████ | 902/1000 [2:06:27<13:44,  8.41s/it][Succeeded / Failed / Skipped / Total] 380 / 480 / 42 / 902:  90%|█████████ | 902/1000 [2:06:27<13:44,  8.41s/it][Succeeded / Failed / Skipped / Total] 380 / 480 / 42 / 902:  90%|█████████ | 903/1000 [2:06:35<13:35,  8.41s/it][Succeeded / Failed / Skipped / Total] 381 / 480 / 42 / 903:  90%|█████████ | 903/1000 [2:06:35<13:35,  8.41s/it][Succeeded / Failed / Skipped / Total] 381 / 480 / 42 / 903:  90%|█████████ | 904/1000 [2:06:39<13:27,  8.41s/it][Succeeded / Failed / Skipped / Total] 382 / 480 / 42 / 904:  90%|█████████ | 904/1000 [2:06:39<13:27,  8.41s/it][Succeeded / Failed / Skipped / Total] 382 / 480 / 42 / 904:  90%|█████████ | 905/1000 [2:06:50<13:18,  8.41s/it][Succeeded / Failed / Skipped / Total] 383 / 480 / 42 / 905:  90%|█████████ | 905/1000 [2:06:50<13:18,  8.41s/it][Succeeded / Failed / Skipped / Total] 383 / 480 / 42 / 905:  91%|█████████ | 906/1000 [2:07:04<13:11,  8.42s/it][Succeeded / Failed / Skipped / Total] 384 / 480 / 42 / 906:  91%|█████████ | 906/1000 [2:07:04<13:11,  8.42s/it][Succeeded / Failed / Skipped / Total] 384 / 480 / 42 / 906:  91%|█████████ | 907/1000 [2:07:07<13:02,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 480 / 42 / 907:  91%|█████████ | 907/1000 [2:07:07<13:02,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 480 / 42 / 907:  91%|█████████ | 908/1000 [2:07:11<12:53,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 481 / 42 / 908:  91%|█████████ | 908/1000 [2:07:11<12:53,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 481 / 42 / 908:  91%|█████████ | 909/1000 [2:07:21<12:45,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 482 / 42 / 909:  91%|█████████ | 909/1000 [2:07:21<12:45,  8.41s/it][Succeeded / Failed / Skipped / Total] 385 / 482 / 42 / 909:  91%|█████████ | 910/1000 [2:07:22<12:35,  8.40s/it]--------------------------------------------- Result 901 ---------------------------------------------
Replies the specified name . --> Adapts a name to a Name --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[peasy]] ) { DbQueryNamedParameter [[affraid]] = rootNP ; while ( [[affraid]] != null ) { if ( [[affraid]] . equalsName ( [[peasy]] ) ) { return [[affraid]] ; } [[affraid]] = [[affraid]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 902 ---------------------------------------------
Close the folder . --> Instruments a balancing --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[salaried]] ( final Folder [[birgit]] ) { if ( [[birgit]] != null ) { try { [[birgit]] . close ( "[[Burping]]" == "[[Burping]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
Returns a string representation of the specified string . --> Convert a pool to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[warheads]] ( final String [[texaco]] ) { return StringPool . LEFT_CHEV . concat ( [[texaco]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Validates the profile . --> Validate violations --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[oohh]] ( final String ... [[kith]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[kith]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Returns the mime type . --> Get mimetype . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[ignited]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 906 ---------------------------------------------
Sets the target class . --> Method to initialize InputStream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[jaume]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 907 ---------------------------------------------
Add a Violation . --> Add a Volation to a validator --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[tachi]] ( final String [[lao]] , final Object [[precog]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[lao]] , this , [[precog]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
Get the mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[seville]] ) { this . downloadFileName = [[seville]] ; this . [[gunnin]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[seville]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 909 ---------------------------------------------
Adds a filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[wozniak]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[nameless]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[accidentally]] ; try { if ( filter == null ) { [[accidentally]] = folder . getMessages ( ) ; } else { [[accidentally]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[accidentally]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[chiropractic]] = new FetchProfile ( ) ; [[chiropractic]] . add ( FetchProfile . Item . ENVELOPE ) ; [[chiropractic]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[accidentally]] , [[chiropractic]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 910 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 385 / 483 / 42 / 910:  91%|█████████ | 910/1000 [2:07:22<12:35,  8.40s/it][Succeeded / Failed / Skipped / Total] 385 / 483 / 42 / 910:  91%|█████████ | 911/1000 [2:07:30<12:27,  8.40s/it][Succeeded / Failed / Skipped / Total] 385 / 484 / 42 / 911:  91%|█████████ | 911/1000 [2:07:30<12:27,  8.40s/it][Succeeded / Failed / Skipped / Total] 385 / 484 / 42 / 911:  91%|█████████ | 912/1000 [2:07:30<12:18,  8.39s/it][Succeeded / Failed / Skipped / Total] 386 / 484 / 42 / 912:  91%|█████████ | 912/1000 [2:07:30<12:18,  8.39s/it][Succeeded / Failed / Skipped / Total] 386 / 484 / 42 / 912:  91%|█████████▏| 913/1000 [2:07:36<12:09,  8.39s/it][Succeeded / Failed / Skipped / Total] 387 / 484 / 42 / 913:  91%|█████████▏| 913/1000 [2:07:36<12:09,  8.39s/it][Succeeded / Failed / Skipped / Total] 387 / 484 / 42 / 913:  91%|█████████▏| 914/1000 [2:07:42<12:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 388 / 484 / 42 / 914:  91%|█████████▏| 914/1000 [2:07:42<12:00,  8.38s/it][Succeeded / Failed / Skipped / Total] 388 / 484 / 42 / 914:  92%|█████████▏| 915/1000 [2:07:52<11:52,  8.38s/it][Succeeded / Failed / Skipped / Total] 388 / 485 / 42 / 915:  92%|█████████▏| 915/1000 [2:07:52<11:52,  8.38s/it][Succeeded / Failed / Skipped / Total] 388 / 485 / 42 / 915:  92%|█████████▏| 916/1000 [2:07:54<11:43,  8.38s/it]Process the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[vingt]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Sets the name of the target class . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[actin]] ( final String [[aae]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[aae]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[aae]] ) ; } targetClassName = [[aae]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[aae]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 912 ---------------------------------------------
Creates a class from a target class . --> Method to get the InputStream --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[autos]] ( final Class [[effie]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[effie]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[effie]] . getName ( ) ) ; } targetClass = [[effie]] ; targetClassName = [[effie]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[effie]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
Creates a proxy object . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[ashok]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Creates a new instance of this class . --> Create a primitive type --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[lysander]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Load a class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[anguished]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[escort]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[escort]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[escort]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 389 / 485 / 42 / 916:  92%|█████████▏| 916/1000 [2:07:54<11:43,  8.38s/it][Succeeded / Failed / Skipped / Total] 389 / 485 / 42 / 916:  92%|█████████▏| 917/1000 [2:08:01<11:35,  8.38s/it][Succeeded / Failed / Skipped / Total] 390 / 485 / 42 / 917:  92%|█████████▏| 917/1000 [2:08:01<11:35,  8.38s/it][Succeeded / Failed / Skipped / Total] 390 / 485 / 42 / 917:  92%|█████████▏| 918/1000 [2:08:09<11:26,  8.38s/it][Succeeded / Failed / Skipped / Total] 391 / 485 / 42 / 918:  92%|█████████▏| 918/1000 [2:08:09<11:26,  8.38s/it][Succeeded / Failed / Skipped / Total] 391 / 485 / 42 / 918:  92%|█████████▏| 919/1000 [2:08:09<11:17,  8.37s/it][Succeeded / Failed / Skipped / Total] 392 / 485 / 42 / 919:  92%|█████████▏| 919/1000 [2:08:09<11:17,  8.37s/it][Succeeded / Failed / Skipped / Total] 392 / 485 / 42 / 919:  92%|█████████▏| 920/1000 [2:08:13<11:09,  8.36s/it][Succeeded / Failed / Skipped / Total] 393 / 485 / 42 / 920:  92%|█████████▏| 920/1000 [2:08:13<11:09,  8.36s/it][Succeeded / Failed / Skipped / Total] 393 / 485 / 42 / 920:  92%|█████████▏| 921/1000 [2:08:25<11:00,  8.37s/it][Succeeded / Failed / Skipped / Total] 394 / 485 / 42 / 921:  92%|█████████▏| 921/1000 [2:08:25<11:00,  8.37s/it][Succeeded / Failed / Skipped / Total] 394 / 485 / 42 / 921:  92%|█████████▏| 922/1000 [2:08:29<10:52,  8.36s/it][Succeeded / Failed / Skipped / Total] 394 / 486 / 42 / 922:  92%|█████████▏| 922/1000 [2:08:29<10:52,  8.36s/it][Succeeded / Failed / Skipped / Total] 394 / 486 / 42 / 922:  92%|█████████▏| 923/1000 [2:08:31<10:43,  8.36s/it][Succeeded / Failed / Skipped / Total] 395 / 486 / 42 / 923:  92%|█████████▏| 923/1000 [2:08:31<10:43,  8.36s/it][Succeeded / Failed / Skipped / Total] 395 / 486 / 42 / 923:  92%|█████████▏| 924/1000 [2:08:46<10:35,  8.36s/it][Succeeded / Failed / Skipped / Total] 396 / 486 / 42 / 924:  92%|█████████▏| 924/1000 [2:08:46<10:35,  8.36s/it][Succeeded / Failed / Skipped / Total] 396 / 486 / 42 / 924:  92%|█████████▎| 925/1000 [2:08:51<10:26,  8.36s/it][Succeeded / Failed / Skipped / Total] 396 / 487 / 42 / 925:  92%|█████████▎| 925/1000 [2:08:52<10:26,  8.36s/it][Succeeded / Failed / Skipped / Total] 396 / 487 / 42 / 925:  93%|█████████▎| 926/1000 [2:08:58<10:18,  8.36s/it]Converts a name to a Address . --> Create a new alternate --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[alternate]] ( final String personalName , final String from ) { return [[alternate]] ( new EmailAddress ( personalName , [[alternate]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Copies the classpath . --> Copied from a file --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[file]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[file]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[punishments]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[leaflet]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[leaflet]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[leaflet]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the value of the vector . --> Obtain a value from a string --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[ccs]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[midair]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[midair]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Adds an address to this address . --> Sets the value of the transaction --> Socre: 1.0

[[[[Adv]]]]: public T to ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress [[dickweed]] ) { this . [[leav]] = ArraysUtil . append ( this . [[leav]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 920 ---------------------------------------------
Convert a string to a name . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String to ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[razi]] ( final String personalName , final String to ) { return [[razi]] ( new EmailAddress ( personalName , [[razi]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 921 ---------------------------------------------
Constructs a text message . --> Create a new MessageType --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[matey]] ( final String [[copilot]] , final String encoding ) { return message ( new EmailMessage ( [[copilot]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 922 ---------------------------------------------
Sets the value of this address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[ATTENDANTS]] ( final EmailAddress ... [[ATTENDANTS]] ) { this . [[windowsill]] = ArraysUtil . join ( this . [[windowsill]] , valueOrEmptyArray ( [[ATTENDANTS]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 923 ---------------------------------------------
Set a header . --> Convenience method to add a string to the form --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[unhappy]] ( final String name , final String value ) { headers . put ( name , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 924 ---------------------------------------------
Parse a long . --> Get a string representation of a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String [[balaclava]] = get ( name ) ; if ( [[balaclava]] == null ) { return defaultValue ; } [[balaclava]] = [[balaclava]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[balaclava]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 925 ---------------------------------------------
Generates a html tag . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String [[encoding]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[preposition]] ( final String html , final String [[kiddie]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[kiddie]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 926 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 488 / 42 / 926:  93%|█████████▎| 926/1000 [2:08:58<10:18,  8.36s/it][Succeeded / Failed / Skipped / Total] 396 / 488 / 42 / 926:  93%|█████████▎| 927/1000 [2:09:02<10:09,  8.35s/it][Succeeded / Failed / Skipped / Total] 396 / 489 / 42 / 927:  93%|█████████▎| 927/1000 [2:09:02<10:09,  8.35s/it][Succeeded / Failed / Skipped / Total] 396 / 489 / 42 / 927:  93%|█████████▎| 928/1000 [2:09:31<10:02,  8.37s/it][Succeeded / Failed / Skipped / Total] 396 / 490 / 42 / 928:  93%|█████████▎| 928/1000 [2:09:31<10:02,  8.37s/it][Succeeded / Failed / Skipped / Total] 396 / 490 / 42 / 928:  93%|█████████▎| 929/1000 [2:09:45<09:54,  8.38s/it][Succeeded / Failed / Skipped / Total] 396 / 491 / 42 / 929:  93%|█████████▎| 929/1000 [2:09:45<09:54,  8.38s/it][Succeeded / Failed / Skipped / Total] 396 / 491 / 42 / 929:  93%|█████████▎| 930/1000 [2:09:49<09:46,  8.38s/it][Succeeded / Failed / Skipped / Total] 396 / 492 / 42 / 930:  93%|█████████▎| 930/1000 [2:09:49<09:46,  8.38s/it][Succeeded / Failed / Skipped / Total] 396 / 492 / 42 / 930:  93%|█████████▎| 931/1000 [2:10:03<09:38,  8.38s/it][Succeeded / Failed / Skipped / Total] 397 / 492 / 42 / 931:  93%|█████████▎| 931/1000 [2:10:03<09:38,  8.38s/it][Succeeded / Failed / Skipped / Total] 397 / 492 / 42 / 931:  93%|█████████▎| 932/1000 [2:10:11<09:29,  8.38s/it][Succeeded / Failed / Skipped / Total] 397 / 493 / 42 / 932:  93%|█████████▎| 932/1000 [2:10:11<09:29,  8.38s/it][Succeeded / Failed / Skipped / Total] 397 / 493 / 42 / 932:  93%|█████████▎| 933/1000 [2:10:21<09:21,  8.38s/it][Succeeded / Failed / Skipped / Total] 398 / 493 / 42 / 933:  93%|█████████▎| 933/1000 [2:10:21<09:21,  8.38s/it][Succeeded / Failed / Skipped / Total] 398 / 493 / 42 / 933:  93%|█████████▎| 934/1000 [2:10:33<09:13,  8.39s/it]Returns the value of the named property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String [[canal]] ) { Objects . requireNonNull ( name ) ; String [[lipstick]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[lipstick]] = System . getProperty ( name ) ; } else { [[lipstick]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[lipstick]] == null ) { return [[canal]] ; } return [[lipstick]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the method parameter for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[melville]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the value as a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[disposes]] ( final String [[consorting]] , final long defaultValue ) { String [[gou]] = get ( [[consorting]] ) ; if ( [[gou]] == null ) { return defaultValue ; } [[gou]] = [[gou]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[gou]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
Evaluate a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object [[bergin]] , final Object [[rename]] , int count ) { if ( ( [[rename]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[bergin]] != null ) { currentPath . push ( [[bergin]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Get the alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[trentino]] ) { String [[verner]] = actionsManager . lookupPathAlias ( [[trentino]] ) ; if ( [[verner]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[trentino]] ) ; if ( cfg != null ) { [[verner]] = cfg . getActionPath ( ) ; } } return [[verner]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
Resolve a path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String [[value]] ) { boolean absolutePath = "False" != "False" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[letitia]] ( String path , String [[quando]] ) { boolean absolutePath = "False" != "False" ; if ( [[quando]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 932 ---------------------------------------------
Returns the default value for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[berm]] ( final String [[jäger]] , final boolean [[permeates]] ) { String [[dona]] = get ( [[jäger]] ) ; if ( [[dona]] == null ) { return [[permeates]] ; } [[dona]] = [[dona]] . trim ( ) . toLowerCase ( ) ; switch ( [[dona]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[permeates]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the string representation of the given string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[petunia]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 934 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 398 / 494 / 42 / 934:  93%|█████████▎| 934/1000 [2:10:33<09:13,  8.39s/it][Succeeded / Failed / Skipped / Total] 399 / 494 / 42 / 935:  94%|█████████▎| 935/1000 [2:10:33<09:04,  8.38s/it][Succeeded / Failed / Skipped / Total] 399 / 494 / 42 / 935:  94%|█████████▎| 936/1000 [2:10:33<08:55,  8.37s/it][Succeeded / Failed / Skipped / Total] 399 / 494 / 43 / 936:  94%|█████████▎| 936/1000 [2:10:33<08:55,  8.37s/it][Succeeded / Failed / Skipped / Total] 399 / 495 / 43 / 937:  94%|█████████▎| 937/1000 [2:10:44<08:47,  8.37s/it][Succeeded / Failed / Skipped / Total] 399 / 495 / 43 / 937:  94%|█████████▍| 938/1000 [2:10:52<08:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 400 / 495 / 43 / 938:  94%|█████████▍| 938/1000 [2:10:52<08:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 400 / 495 / 43 / 938:  94%|█████████▍| 939/1000 [2:11:08<08:31,  8.38s/it][Succeeded / Failed / Skipped / Total] 400 / 496 / 43 / 939:  94%|█████████▍| 939/1000 [2:11:08<08:31,  8.38s/it][Succeeded / Failed / Skipped / Total] 400 / 496 / 43 / 939:  94%|█████████▍| 940/1000 [2:11:18<08:22,  8.38s/it][Succeeded / Failed / Skipped / Total] 401 / 496 / 43 / 940:  94%|█████████▍| 940/1000 [2:11:18<08:22,  8.38s/it][Succeeded / Failed / Skipped / Total] 401 / 496 / 43 / 940:  94%|█████████▍| 941/1000 [2:11:20<08:14,  8.37s/it][Succeeded / Failed / Skipped / Total] 402 / 496 / 43 / 941:  94%|█████████▍| 941/1000 [2:11:20<08:14,  8.37s/it][Succeeded / Failed / Skipped / Total] 402 / 496 / 43 / 941:  94%|█████████▍| 942/1000 [2:11:40<08:06,  8.39s/it][Succeeded / Failed / Skipped / Total] 402 / 497 / 43 / 942:  94%|█████████▍| 942/1000 [2:11:40<08:06,  8.39s/it][Succeeded / Failed / Skipped / Total] 402 / 497 / 43 / 942:  94%|█████████▍| 943/1000 [2:11:47<07:57,  8.38s/it][Succeeded / Failed / Skipped / Total] 403 / 497 / 43 / 943:  94%|█████████▍| 943/1000 [2:11:47<07:57,  8.38s/it][Succeeded / Failed / Skipped / Total] 403 / 497 / 43 / 943:  94%|█████████▍| 944/1000 [2:11:53<07:49,  8.38s/it]Resolve a string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[ndx]] = value . indexOf ( ' ' , i ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[culpability]] = value . indexOf ( ' ' , i ) ; if ( [[culpability]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 935 ---------------------------------------------
Get the slash . --> Liefert die erte die erie e eie e die eie e e die e efe eie eie e eferururue e eneue er eie e ebeneich e n eich e e eueie e epe le --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[cloudless]] ( final String [[pirouettes]] ) { int slashNdx = [[pirouettes]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[pirouettes]] , ' ' , [[pirouettes]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[pirouettes]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 936 ---------------------------------------------
Gets the substring of the given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 937 ---------------------------------------------
Resolves the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( path , [[value]] ) ; final String [[result]] = resultPath . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[account]] ( final String path , final String [[leaflet]] ) { final ResultPath resultPath = resolveResultPath ( path , [[leaflet]] ) ; final String [[dislocation]] = resultPath . pathValue ( ) ; return resolveAlias ( [[dislocation]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the slash . --> Adapts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[str]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[broadcasts]] ( final String [[fantasized]] ) { int slashNdx = [[fantasized]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[fantasized]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Returns a schema . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[pow]] ( final Class < ? > type , final String defaultSchemaName ) { String [[enclosure]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[enclosure]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[enclosure]] == null ) || ( [[enclosure]] . length ( ) == 0 ) ) { [[enclosure]] = defaultSchemaName ; } return [[enclosure]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 940 ---------------------------------------------
Swapsues the elements . --> Swaps two elements --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int [[j]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int [[duller]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[duller]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Derivers the deterministic . --> Performs a Murovy --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int [[j]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int [[voucher]] , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ [[voucher]] ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
Initializes the key . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] [[tweak]] ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[hallucinations]] ( final long [ ] key , final long [ ] [[kindness]] ) { final int [[crockett]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 943 ---------------------------------------------
Schedules a zone . --> Similar for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[physically]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 944 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 497 / 43 / 944:  94%|█████████▍| 944/1000 [2:11:53<07:49,  8.38s/it][Succeeded / Failed / Skipped / Total] 404 / 497 / 43 / 944:  94%|█████████▍| 945/1000 [2:12:22<07:42,  8.40s/it][Succeeded / Failed / Skipped / Total] 405 / 497 / 43 / 945:  94%|█████████▍| 945/1000 [2:12:22<07:42,  8.40s/it][Succeeded / Failed / Skipped / Total] 405 / 497 / 43 / 945:  95%|█████████▍| 946/1000 [2:12:23<07:33,  8.40s/it][Succeeded / Failed / Skipped / Total] 405 / 498 / 43 / 946:  95%|█████████▍| 946/1000 [2:12:23<07:33,  8.40s/it][Succeeded / Failed / Skipped / Total] 405 / 498 / 43 / 946:  95%|█████████▍| 947/1000 [2:12:40<07:25,  8.41s/it][Succeeded / Failed / Skipped / Total] 406 / 498 / 43 / 947:  95%|█████████▍| 947/1000 [2:12:40<07:25,  8.41s/it][Succeeded / Failed / Skipped / Total] 406 / 498 / 43 / 947:  95%|█████████▍| 948/1000 [2:12:53<07:17,  8.41s/it][Succeeded / Failed / Skipped / Total] 406 / 499 / 43 / 948:  95%|█████████▍| 948/1000 [2:12:53<07:17,  8.41s/it][Succeeded / Failed / Skipped / Total] 406 / 499 / 43 / 948:  95%|█████████▍| 949/1000 [2:13:01<07:08,  8.41s/it][Succeeded / Failed / Skipped / Total] 407 / 499 / 43 / 949:  95%|█████████▍| 949/1000 [2:13:01<07:08,  8.41s/it][Succeeded / Failed / Skipped / Total] 407 / 499 / 43 / 949:  95%|█████████▌| 950/1000 [2:13:05<07:00,  8.41s/it][Succeeded / Failed / Skipped / Total] 407 / 500 / 43 / 950:  95%|█████████▌| 950/1000 [2:13:05<07:00,  8.41s/it][Succeeded / Failed / Skipped / Total] 407 / 500 / 43 / 950:  95%|█████████▌| 951/1000 [2:13:34<06:52,  8.43s/it]Returns true if the given entity is a column . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor [[property]] , final boolean [[isAnnotated]] , final ColumnNamingStrategy [[columnNamingStrategy]] ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[sqlTypeClass]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor [[bango]] , final PropertyDescriptor [[preferring]] , final boolean [[latvian]] , final ColumnNamingStrategy [[alchemy]] ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[druggist]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 945 ---------------------------------------------
Remove a string . --> Compares two nices --> Socre: 1.0

[[[[Adv]]]]: private static String removeAnyBounding ( final char [[s]] , final char [[e]] , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( [[s]] ) ) && [[str]] . endsWith ( String . valueOf ( [[e]] ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char [[crystallization]] , final char [[desoto]] , final String [[novices]] ) { if ( [[novices]] == null || [[novices]] . length ( ) < 2 ) { return [[novices]] ; } if ( [[novices]] . startsWith ( String . valueOf ( [[crystallization]] ) ) && [[novices]] . endsWith ( String . valueOf ( [[desoto]] ) ) ) { return [[novices]] . substring ( 1 , [[novices]] . length ( ) - 1 ) ; } return [[novices]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 946 ---------------------------------------------
Initializes the message . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; init ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[sneers]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[mattered]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[mattered]] , 0 , key , 0 , key . length < [[mattered]] . length ? key . length : [[mattered]] . length ) ; init ( bytesToLongs ( key ) , [[sneers]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 947 ---------------------------------------------
Adds a href . --> Get the fault --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[ferrand]] ( ) { if ( methref != null ) { final String [[avalanches]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[avalanches]] ; } return [[ferrand]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 948 ---------------------------------------------
Encrypts a block . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[bunnies]] , final int [[tums]] ) { long [ ] contentBlock = bytesToLongs ( [[bunnies]] , [[tums]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 949 ---------------------------------------------
Create a file . --> Create a file to a file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[barata]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Create a new folder --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[dos]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , [[dos]] ) ; } finally { StreamUtil . close ( [[dos]] ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[cubic]] ( final File [[kure]] ) throws IOException { if ( [[kure]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[riverbanks]] = new FileInputStream ( [[kure]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[kure]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[praised]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[riverbanks]] , [[praised]] ) ; } finally { StreamUtil . close ( [[praised]] ) ; StreamUtil . close ( [[riverbanks]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 407 / 501 / 43 / 951:  95%|█████████▌| 951/1000 [2:13:34<06:52,  8.43s/it][Succeeded / Failed / Skipped / Total] 407 / 501 / 43 / 951:  95%|█████████▌| 952/1000 [2:13:36<06:44,  8.42s/it][Succeeded / Failed / Skipped / Total] 407 / 502 / 43 / 952:  95%|█████████▌| 952/1000 [2:13:36<06:44,  8.42s/it][Succeeded / Failed / Skipped / Total] 407 / 502 / 43 / 952:  95%|█████████▌| 953/1000 [2:14:17<06:37,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 503 / 43 / 953:  95%|█████████▌| 953/1000 [2:14:17<06:37,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 503 / 43 / 953:  95%|█████████▌| 954/1000 [2:14:36<06:29,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 504 / 43 / 954:  95%|█████████▌| 954/1000 [2:14:36<06:29,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 504 / 43 / 954:  96%|█████████▌| 955/1000 [2:14:42<06:20,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 505 / 43 / 955:  96%|█████████▌| 955/1000 [2:14:42<06:20,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 505 / 43 / 955:  96%|█████████▌| 956/1000 [2:15:04<06:12,  8.48s/it][Succeeded / Failed / Skipped / Total] 407 / 506 / 43 / 956:  96%|█████████▌| 956/1000 [2:15:04<06:12,  8.48s/it][Succeeded / Failed / Skipped / Total] 407 / 506 / 43 / 956:  96%|█████████▌| 957/1000 [2:15:04<06:04,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 507 / 43 / 957:  96%|█████████▌| 957/1000 [2:15:04<06:04,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 507 / 43 / 957:  96%|█████████▌| 958/1000 [2:15:08<05:55,  8.46s/it]Returns a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[gzos]] = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , [[gzos]] ) ; } finally { StreamUtil . close ( [[gzos]] ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[parrots]] ) throws IOException { if ( [[parrots]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[parrots]] ) ; String [[bilious]] = [[parrots]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[impart]] = new GZIPOutputStream ( new FileOutputStream ( [[bilious]] ) ) ; try { StreamUtil . copy ( fis , [[impart]] ) ; } finally { StreamUtil . close ( [[impart]] ) ; StreamUtil . close ( fis ) ; } return new File ( [[bilious]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Unzips a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[romero]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[romero]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Returns all entries in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration [[convened]] = zip . entries ( ) ; while ( [[convened]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[convened]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 954 ---------------------------------------------
Sets the ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[zos]] , final byte [ ] [[content]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[zos]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , [[zos]] ) ; } finally { StreamUtil . close ( is ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[dye]] , final byte [ ] [[hepworth]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } [[dye]] . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[hepworth]] ) ; try { StreamUtil . copy ( is , [[dye]] ) ; } finally { StreamUtil . close ( is ) ; } [[dye]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 955 ---------------------------------------------
Converts a byte array to a long . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int [[i8]] = offset ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] [[newspaperman]] = new long [ size >> 3 ] ; int [[baited]] = offset ; for ( int i = 0 ; i < [[newspaperman]] . length ; i ++ ) { [[newspaperman]] [ i ] = Bits . getLong ( ba , [[baited]] ) ; [[baited]] += 8 ; } return [[newspaperman]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 956 ---------------------------------------------
Returns a field with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[crusted]] ( final String name , final boolean declared ) { final FieldDescriptor [[erasers]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[erasers]] != null ) { if ( ! [[erasers]] . matchDeclared ( declared ) ) { return null ; } } return [[erasers]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 957 ---------------------------------------------
Checks if a file exists . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[isDir]] = file . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[boiling]] = file . isDirectory ( ) ; if ( [[boiling]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 407 / 508 / 43 / 958:  96%|█████████▌| 958/1000 [2:15:08<05:55,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 508 / 43 / 958:  96%|█████████▌| 959/1000 [2:15:15<05:46,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 509 / 43 / 959:  96%|█████████▌| 959/1000 [2:15:15<05:46,  8.46s/it][Succeeded / Failed / Skipped / Total] 407 / 509 / 43 / 959:  96%|█████████▌| 960/1000 [2:15:34<05:38,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 510 / 43 / 960:  96%|█████████▌| 960/1000 [2:15:34<05:38,  8.47s/it][Succeeded / Failed / Skipped / Total] 407 / 510 / 43 / 960:  96%|█████████▌| 961/1000 [2:15:35<05:30,  8.47s/it][Succeeded / Failed / Skipped / Total] 408 / 510 / 43 / 961:  96%|█████████▌| 961/1000 [2:15:35<05:30,  8.47s/it][Succeeded / Failed / Skipped / Total] 408 / 510 / 43 / 961:  96%|█████████▌| 962/1000 [2:15:41<05:21,  8.46s/it][Succeeded / Failed / Skipped / Total] 408 / 511 / 43 / 962:  96%|█████████▌| 962/1000 [2:15:41<05:21,  8.46s/it][Succeeded / Failed / Skipped / Total] 408 / 511 / 43 / 962:  96%|█████████▋| 963/1000 [2:15:57<05:13,  8.47s/it][Succeeded / Failed / Skipped / Total] 408 / 512 / 43 / 963:  96%|█████████▋| 963/1000 [2:15:57<05:13,  8.47s/it][Succeeded / Failed / Skipped / Total] 408 / 512 / 43 / 963:  96%|█████████▋| 964/1000 [2:16:20<05:05,  8.49s/it][Succeeded / Failed / Skipped / Total] 408 / 513 / 43 / 964:  96%|█████████▋| 964/1000 [2:16:20<05:05,  8.49s/it][Succeeded / Failed / Skipped / Total] 408 / 513 / 43 / 964:  96%|█████████▋| 965/1000 [2:16:22<04:56,  8.48s/it][Succeeded / Failed / Skipped / Total] 408 / 514 / 43 / 965:  96%|█████████▋| 965/1000 [2:16:22<04:56,  8.48s/it][Succeeded / Failed / Skipped / Total] 408 / 514 / 43 / 965:  97%|█████████▋| 966/1000 [2:16:23<04:48,  8.47s/it]Gets the value of a property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[abhimanyu]] , final boolean declared ) { PropertyDescriptor [[hanson]] = getProperties ( ) . getPropertyDescriptor ( [[abhimanyu]] ) ; if ( ( [[hanson]] != null ) && [[hanson]] . matchDeclared ( declared ) ) { return [[hanson]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the bundle . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String [[greenhorn]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[greenhorn]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[greenhorn]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the current locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[ly]] ( final HttpSession [[cupcake]] ) { Locale [[greatest]] = ( Locale ) [[cupcake]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[greatest]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[greatest]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Sets the locale . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[locale]] = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[ideologically]] ( final HttpSession [[lieber]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale [[teardrop]] = Locale . forLanguageTag ( localeCode ) ; [[lieber]] . setAttribute ( SESSION_LOCALE_ATTR , [[teardrop]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Add a profile to the profile --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[undetermined]] ( final String ... [[coincidences]] ) { if ( [[coincidences]] == null ) { return this ; } for ( String [[undetermined]] : [[coincidences]] ) { addProfiles ( [[undetermined]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Resolve a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[list]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[camaraderie]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[camaraderie]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 964 ---------------------------------------------
Get a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[gunpowder]] , final int [[churning]] ) { return ( ( long ) [[gunpowder]] [ [[churning]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int [[até]] ) { if ( typeAnnotationOffsets == null || [[até]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[até]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[até]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 966 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 515 / 43 / 966:  97%|█████████▋| 966/1000 [2:16:23<04:48,  8.47s/it][Succeeded / Failed / Skipped / Total] 408 / 515 / 43 / 966:  97%|█████████▋| 967/1000 [2:16:29<04:39,  8.47s/it][Succeeded / Failed / Skipped / Total] 409 / 515 / 43 / 967:  97%|█████████▋| 967/1000 [2:16:29<04:39,  8.47s/it][Succeeded / Failed / Skipped / Total] 409 / 515 / 43 / 967:  97%|█████████▋| 968/1000 [2:16:34<04:30,  8.47s/it][Succeeded / Failed / Skipped / Total] 409 / 516 / 43 / 968:  97%|█████████▋| 968/1000 [2:16:34<04:30,  8.47s/it][Succeeded / Failed / Skipped / Total] 409 / 516 / 43 / 968:  97%|█████████▋| 969/1000 [2:16:46<04:22,  8.47s/it][Succeeded / Failed / Skipped / Total] 410 / 516 / 43 / 969:  97%|█████████▋| 969/1000 [2:16:46<04:22,  8.47s/it][Succeeded / Failed / Skipped / Total] 410 / 516 / 43 / 969:  97%|█████████▋| 970/1000 [2:17:13<04:14,  8.49s/it][Succeeded / Failed / Skipped / Total] 410 / 517 / 43 / 970:  97%|█████████▋| 970/1000 [2:17:13<04:14,  8.49s/it][Succeeded / Failed / Skipped / Total] 410 / 517 / 43 / 970:  97%|█████████▋| 971/1000 [2:17:22<04:06,  8.49s/it]Reads a labels . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[contravention]] ) { if ( [[contravention]] [ bytecodeOffset ] == null ) { [[contravention]] [ bytecodeOffset ] = new Label ( ) ; } return [[contravention]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a frame . --> get frame --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[trespasser]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 968 ---------------------------------------------
Read a byte array from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[bytesRead]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[harrington]] ( final InputStream [[unlikable]] , final boolean [[summons]] ) throws IOException { if ( [[unlikable]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[sabotage]] ; while ( ( [[sabotage]] = [[unlikable]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[sabotage]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[summons]] ) { [[unlikable]] . [[summons]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 969 ---------------------------------------------
Read a single attribute . --> Get a string from a string --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[kuwaiti]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[cabeza]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[cabeza]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
Returns a map of all servlets . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[pageants]] ( final HttpServletRequest [[insecurities]] ) { return ( Map < String , TransientBeanData > ) [[insecurities]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 410 / 518 / 43 / 971:  97%|█████████▋| 971/1000 [2:17:22<04:06,  8.49s/it][Succeeded / Failed / Skipped / Total] 410 / 518 / 43 / 971:  97%|█████████▋| 972/1000 [2:17:24<03:57,  8.48s/it][Succeeded / Failed / Skipped / Total] 411 / 518 / 43 / 972:  97%|█████████▋| 972/1000 [2:17:24<03:57,  8.48s/it][Succeeded / Failed / Skipped / Total] 411 / 518 / 43 / 972:  97%|█████████▋| 973/1000 [2:17:36<03:49,  8.49s/it][Succeeded / Failed / Skipped / Total] 411 / 519 / 43 / 973:  97%|█████████▋| 973/1000 [2:17:36<03:49,  8.49s/it][Succeeded / Failed / Skipped / Total] 411 / 519 / 43 / 973:  97%|█████████▋| 974/1000 [2:17:37<03:40,  8.48s/it][Succeeded / Failed / Skipped / Total] 411 / 520 / 43 / 974:  97%|█████████▋| 974/1000 [2:17:37<03:40,  8.48s/it][Succeeded / Failed / Skipped / Total] 411 / 520 / 43 / 974:  98%|█████████▊| 975/1000 [2:17:49<03:32,  8.48s/it][Succeeded / Failed / Skipped / Total] 412 / 520 / 43 / 975:  98%|█████████▊| 975/1000 [2:17:49<03:32,  8.48s/it][Succeeded / Failed / Skipped / Total] 412 / 520 / 43 / 975:  98%|█████████▊| 976/1000 [2:17:58<03:23,  8.48s/it][Succeeded / Failed / Skipped / Total] 413 / 520 / 43 / 976:  98%|█████████▊| 976/1000 [2:17:58<03:23,  8.48s/it][Succeeded / Failed / Skipped / Total] 413 / 520 / 43 / 976:  98%|█████████▊| 977/1000 [2:18:00<03:14,  8.47s/it][Succeeded / Failed / Skipped / Total] 413 / 521 / 43 / 977:  98%|█████████▊| 977/1000 [2:18:00<03:14,  8.47s/it][Succeeded / Failed / Skipped / Total] 413 / 521 / 43 / 977:  98%|█████████▊| 978/1000 [2:18:07<03:06,  8.47s/it][Succeeded / Failed / Skipped / Total] 414 / 521 / 43 / 978:  98%|█████████▊| 978/1000 [2:18:07<03:06,  8.47s/it][Succeeded / Failed / Skipped / Total] 414 / 521 / 43 / 978:  98%|█████████▊| 979/1000 [2:18:10<02:57,  8.47s/it][Succeeded / Failed / Skipped / Total] 415 / 521 / 43 / 979:  98%|█████████▊| 979/1000 [2:18:10<02:57,  8.47s/it][Succeeded / Failed / Skipped / Total] 415 / 521 / 43 / 979:  98%|█████████▊| 980/1000 [2:18:10<02:49,  8.46s/it]Returns a constructor for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[ctorDescriptor]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[ctorDescriptor]] ; if ( [[ctorDescriptor]] . isDefault ( ) ) { defaultCtor = [[ctorDescriptor]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor [[interfering]] = createCtorDescriptor ( ctor ) ; allCtors [ i ] = [[interfering]] ; if ( [[interfering]] . isDefault ( ) ) { defaultCtor = [[interfering]] ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 972 ---------------------------------------------
Creates a map of servlet . --> Create a new servlet --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[panicked]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[panicked]] ) ; return [[panicked]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the DescriptorDescriptorDescriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int [[j]] = 0 ; [[j]] < arg . length ; [[j]] ++ ) { if ( arg [ [[j]] ] != [[args]] [ [[j]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[primates]] ( final Class ... [[substantially]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[substantially]] . length ) { continue ; } for ( int [[masters]] = 0 ; [[masters]] < arg . length ; [[masters]] ++ ) { if ( arg [ [[masters]] ] != [[substantially]] [ [[masters]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 974 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[tuscany]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[boise]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 975 ---------------------------------------------
Initialize the filter . --> Set the y - Servlet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[oxycontin]] ( final FilterConfig [[anthony]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 976 ---------------------------------------------
Adds a file to a file . --> Adds all consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[collateral]] ( final Consumer < File > [[captions]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[captions]] ) ; } else { consumers . add ( [[captions]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 977 ---------------------------------------------
Convert a primitive value to an array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[jiu]] ( final Object [[crossley]] ) { final Class [[seinfeld]] = [[crossley]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[seinfeld]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[crossley]] , [[seinfeld]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 978 ---------------------------------------------
Search for a file . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[affording]] ( final URI [[cush]] ) { File [[crust]] ; try { [[crust]] = new File ( [[affording]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[affording]] , ex ) ; } addPath ( [[crust]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Returns a string representation of this file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[amount]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 980 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 521 / 43 / 980:  98%|█████████▊| 980/1000 [2:18:10<02:49,  8.46s/it][Succeeded / Failed / Skipped / Total] 416 / 521 / 43 / 980:  98%|█████████▊| 981/1000 [2:18:20<02:40,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 521 / 43 / 981:  98%|█████████▊| 981/1000 [2:18:20<02:40,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 521 / 43 / 981:  98%|█████████▊| 982/1000 [2:18:31<02:32,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 522 / 43 / 982:  98%|█████████▊| 982/1000 [2:18:31<02:32,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 522 / 43 / 982:  98%|█████████▊| 983/1000 [2:18:32<02:23,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 523 / 43 / 983:  98%|█████████▊| 983/1000 [2:18:32<02:23,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 523 / 43 / 983:  98%|█████████▊| 984/1000 [2:18:47<02:15,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 524 / 43 / 984:  98%|█████████▊| 984/1000 [2:18:47<02:15,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 524 / 43 / 984:  98%|█████████▊| 985/1000 [2:18:56<02:06,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 525 / 43 / 985:  98%|█████████▊| 985/1000 [2:18:56<02:06,  8.46s/it][Succeeded / Failed / Skipped / Total] 417 / 525 / 43 / 985:  99%|█████████▊| 986/1000 [2:18:57<01:58,  8.46s/it][Succeeded / Failed / Skipped / Total] 418 / 525 / 43 / 986:  99%|█████████▊| 986/1000 [2:18:57<01:58,  8.46s/it][Succeeded / Failed / Skipped / Total] 418 / 525 / 43 / 986:  99%|█████████▊| 987/1000 [2:19:03<01:49,  8.45s/it][Succeeded / Failed / Skipped / Total] 418 / 526 / 43 / 987:  99%|█████████▊| 987/1000 [2:19:03<01:49,  8.45s/it][Succeeded / Failed / Skipped / Total] 418 / 526 / 43 / 987:  99%|█████████▉| 988/1000 [2:19:11<01:41,  8.45s/it]Convenience method for testing . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[ecause]] : patterns ) { rules . exclude ( [[ecause]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Add a file to the search path . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[tribe]] ( final URL [[ingrates]] ) { File file = FileUtil . toContainerFile ( [[tribe]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[tribe]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 982 ---------------------------------------------
Returns the next file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[fumble]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
Add a path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 984 ---------------------------------------------
Gets all files in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[breadfruit]] ( ) { List < File > [[range]] = new ArrayList <> ( ) ; File [[madrigal]] ; while ( ( [[madrigal]] = nextFile ( ) ) != null ) { [[range]] . add ( [[madrigal]] ) ; } return [[range]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Initialize the list of files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ index ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[cala]] = iterator . next ( ) ; if ( [[cala]] . isFile ( ) ) { files [ index ++ ] = [[cala]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 986 ---------------------------------------------
Set the writer . --> Convenience method to call this method --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[cruelest]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[begging]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 988 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 419 / 526 / 43 / 988:  99%|█████████▉| 988/1000 [2:19:11<01:41,  8.45s/it][Succeeded / Failed / Skipped / Total] 419 / 526 / 43 / 988:  99%|█████████▉| 989/1000 [2:19:11<01:32,  8.44s/it][Succeeded / Failed / Skipped / Total] 419 / 527 / 43 / 989:  99%|█████████▉| 989/1000 [2:19:11<01:32,  8.44s/it][Succeeded / Failed / Skipped / Total] 419 / 527 / 43 / 989:  99%|█████████▉| 990/1000 [2:19:13<01:24,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 527 / 43 / 990:  99%|█████████▉| 990/1000 [2:19:13<01:24,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 527 / 43 / 990:  99%|█████████▉| 991/1000 [2:19:31<01:16,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 528 / 43 / 991:  99%|█████████▉| 991/1000 [2:19:31<01:16,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 528 / 43 / 991:  99%|█████████▉| 992/1000 [2:19:32<01:07,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 529 / 43 / 992:  99%|█████████▉| 992/1000 [2:19:32<01:07,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 529 / 43 / 992:  99%|█████████▉| 993/1000 [2:19:40<00:59,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 530 / 43 / 993:  99%|█████████▉| 993/1000 [2:19:40<00:59,  8.44s/it][Succeeded / Failed / Skipped / Total] 420 / 530 / 43 / 993:  99%|█████████▉| 994/1000 [2:19:56<00:50,  8.45s/it]Return the name of the given type . --> Send a message --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[vigorous]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[sendoff]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[nuit]] = null ; if ( [[sendoff]] != null ) { [[nuit]] = [[sendoff]] . value ( ) . trim ( ) ; } if ( ( [[nuit]] == null ) || ( [[nuit]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[nuit]] = type . getName ( ) ; } else { [[nuit]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[nuit]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 989 ---------------------------------------------
Gets the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[caroling]] ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 990 ---------------------------------------------
Returns a string representation of the given constructor . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[hottest]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[hottest]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 991 ---------------------------------------------
Append a string to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[croutons]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Returns a string representation of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[strait]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[rebuild]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[bumpin]] = getDimensions ( ) ; [[bumpin]] > 0 ; -- [[bumpin]] ) { [[rebuild]] . append ( "[]" ) ; } return [[rebuild]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the size of the given size . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[culminate]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 420 / 531 / 43 / 994:  99%|█████████▉| 994/1000 [2:19:56<00:50,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 531 / 43 / 994: 100%|█████████▉| 995/1000 [2:20:12<00:42,  8.46s/it][Succeeded / Failed / Skipped / Total] 420 / 532 / 43 / 995: 100%|█████████▉| 995/1000 [2:20:12<00:42,  8.46s/it][Succeeded / Failed / Skipped / Total] 420 / 532 / 43 / 995: 100%|█████████▉| 996/1000 [2:20:17<00:33,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 533 / 43 / 996: 100%|█████████▉| 996/1000 [2:20:17<00:33,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 533 / 43 / 996: 100%|█████████▉| 997/1000 [2:20:28<00:25,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 534 / 43 / 997: 100%|█████████▉| 997/1000 [2:20:28<00:25,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 534 / 43 / 997: 100%|█████████▉| 998/1000 [2:20:37<00:16,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 535 / 43 / 998: 100%|█████████▉| 998/1000 [2:20:37<00:16,  8.45s/it][Succeeded / Failed / Skipped / Total] 420 / 535 / 43 / 998: 100%|█████████▉| 999/1000 [2:21:04<00:08,  8.47s/it][Succeeded / Failed / Skipped / Total] 420 / 536 / 43 / 999: 100%|█████████▉| 999/1000 [2:21:04<00:08,  8.47s/it][Succeeded / Failed / Skipped / Total] 420 / 536 / 43 / 999: 100%|██████████| 1000/1000 [2:21:19<00:00,  8.48s/it]Sets the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[oex]] ( final Throwable [[pincer]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[pincer]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Returns a String representation of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[eruptions]] ( final Method [[malvina]] ) { StringBuilder [[bloodsucking]] = new StringBuilder ( ) ; [[bloodsucking]] . append ( ' ' ) ; Class < ? > [ ] [[jaeger]] = [[malvina]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[jaeger]] ) { appendDescriptor ( parameter , [[bloodsucking]] ) ; } [[bloodsucking]] . append ( ' ' ) ; appendDescriptor ( [[malvina]] . getReturnType ( ) , [[bloodsucking]] ) ; return [[bloodsucking]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Get the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String [[praises]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Returns a string representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[returnType]] , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type [[argumentType]] : [[argumentTypes]] ) { [[argumentType]] . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[roxy]] , final Type ... [[feelin]] ) { StringBuilder [[sackett]] = new StringBuilder ( ) ; [[sackett]] . append ( ' ' ) ; for ( Type [[norwegians]] : [[feelin]] ) { [[norwegians]] . appendDescriptor ( [[sackett]] ) ; } [[sackett]] . append ( ' ' ) ; [[roxy]] . appendDescriptor ( [[sackett]] ) ; return [[sackett]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Commit the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[forcedRollback]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; [[forcedRollback]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[forcedRollback]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[imbecilic]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; [[imbecilic]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[imbecilic]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Remove a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[district]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 420 / 537 / 43 / 1000: 100%|██████████| 1000/1000 [2:21:19<00:00,  8.48s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 420 / 537 / 43 / 1000: 100%|██████████| 1000/1000 [2:21:21<00:00,  8.48s/it]Commit a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[monterrey]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[monterrey]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[monterrey]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 420    |
| Number of failed attacks:     | 537    |
| Number of skipped attacks:    | 43     |
| Original accuracy:            | 95.7%  |
| Accuracy under attack:        | 53.7%  |
| Attack success rate:          | 43.89% |
| Average perturbed word %:     | 50.94% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 150.39 |
| Original BLEU-4:              | 14.16  |
| Perturbed BLEU-4:             | 3.37   |
+-------------------------------+--------+


Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 4 worker(s) on 4 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:16<4:28:55, 16.15s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:16<4:28:56, 16.15s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [00:16<2:16:07,  8.18s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 1 / 2:   0%|          | 2/1000 [00:16<2:16:07,  8.18s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 1 / 2:   0%|          | 3/1000 [00:17<1:37:53,  5.89s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 1 / 3:   0%|          | 3/1000 [00:17<1:37:53,  5.89s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 1 / 3:   0%|          | 4/1000 [00:20<1:27:07,  5.25s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 1 / 4:   0%|          | 4/1000 [00:20<1:27:08,  5.25s/it][Succeeded / Failed / Skipped / Total] 1 / 2 / 1 / 4:   0%|          | 5/1000 [00:36<2:00:09,  7.25s/it][Succeeded / Failed / Skipped / Total] 1 / 3 / 1 / 5:   0%|          | 5/1000 [00:36<2:00:09,  7.25s/it][Succeeded / Failed / Skipped / Total] 1 / 3 / 1 / 5:   1%|          | 6/1000 [00:51<2:21:09,  8.52s/it][Succeeded / Failed / Skipped / Total] 1 / 4 / 1 / 6:   1%|          | 6/1000 [00:51<2:21:09,  8.52s/it][Succeeded / Failed / Skipped / Total] 1 / 4 / 1 / 6:   1%|          | 7/1000 [00:55<2:11:35,  7.95s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wraps the given observable . --> Construct a Observable from observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > observable = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[error]] , final Scheduler scheduler ) { final Observable < T > observable = [[error]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[error]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 2 ---------------------------------------------
Create a new ByteArray --> [[[SKIPPED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 3 ---------------------------------------------
Converts a Java source into a java object . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[type]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 4 ---------------------------------------------
Sorts a Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[data]] ) { ObjectHelper . requireNonNull ( [[data]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[data]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 5 ---------------------------------------------
Adds a observer to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[bi]] , boolean [[exchange]] , Disposable disposable ) { final Observer < ? super V > [[d]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[d]] , [[bi]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[bi]] ) ; } } else { q . offer ( [[bi]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[d]] , [[exchange]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 6 ---------------------------------------------
Creates and returns a listener which allows to specify the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[after]] ( int capacityHint , Runnable [[line]] ) { ObjectHelper . requireNonNull ( [[line]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[line]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 4 / 1 / 7:   1%|          | 7/1000 [00:55<2:11:35,  7.95s/it][Succeeded / Failed / Skipped / Total] 2 / 4 / 1 / 7:   1%|          | 8/1000 [01:00<2:05:32,  7.59s/it][Succeeded / Failed / Skipped / Total] 2 / 5 / 1 / 8:   1%|          | 8/1000 [01:00<2:05:32,  7.59s/it][Succeeded / Failed / Skipped / Total] 2 / 5 / 1 / 8:   1%|          | 9/1000 [01:13<2:14:01,  8.11s/it][Succeeded / Failed / Skipped / Total] 3 / 5 / 1 / 9:   1%|          | 9/1000 [01:13<2:14:01,  8.11s/it][Succeeded / Failed / Skipped / Total] 3 / 5 / 1 / 9:   1%|          | 10/1000 [01:15<2:05:11,  7.59s/it][Succeeded / Failed / Skipped / Total] 3 / 6 / 1 / 10:   1%|          | 10/1000 [01:15<2:05:11,  7.59s/it][Succeeded / Failed / Skipped / Total] 3 / 6 / 1 / 10:   1%|          | 11/1000 [01:26<2:08:52,  7.82s/it][Succeeded / Failed / Skipped / Total] 3 / 7 / 1 / 11:   1%|          | 11/1000 [01:26<2:08:52,  7.82s/it][Succeeded / Failed / Skipped / Total] 3 / 7 / 1 / 11:   1%|          | 12/1000 [01:26<1:58:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 4 / 7 / 1 / 12:   1%|          | 12/1000 [01:26<1:58:22,  7.19s/it][Succeeded / Failed / Skipped / Total] 4 / 7 / 1 / 12:   1%|▏         | 13/1000 [01:31<1:56:19,  7.07s/it]Sets the internal state . --> Asynchronously initializes asynchronously --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[ask]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[execute]]" != "[[execute]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Convenience method for creating a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[author]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Closes the given predicate . --> Convert a Throwable to an Exception --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[a]] ) { return toFlowable ( ) . retry ( times , [[a]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 10 ---------------------------------------------
Creates a Completable from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[hello]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Throws an IllegalArgumentException if the given message is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[statement]] > [[statement]] requireNonNull ( [[statement]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
A convenience method to create a identity . --> A convenience method for creating a ID --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > identity ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[u]] > Function < [[u]] , [[u]] > identity ( ) { return ( Function < [[u]] , [[u]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 8 / 1 / 13:   1%|▏         | 13/1000 [01:31<1:56:19,  7.07s/it][Succeeded / Failed / Skipped / Total] 4 / 8 / 1 / 13:   1%|▏         | 14/1000 [01:45<2:04:17,  7.56s/it][Succeeded / Failed / Skipped / Total] 4 / 9 / 1 / 14:   1%|▏         | 14/1000 [01:45<2:04:17,  7.56s/it][Succeeded / Failed / Skipped / Total] 4 / 9 / 1 / 14:   2%|▏         | 15/1000 [01:53<2:04:11,  7.56s/it][Succeeded / Failed / Skipped / Total] 4 / 10 / 1 / 15:   2%|▏         | 15/1000 [01:53<2:04:11,  7.56s/it][Succeeded / Failed / Skipped / Total] 4 / 10 / 1 / 15:   2%|▏         | 16/1000 [01:53<1:56:32,  7.11s/it][Succeeded / Failed / Skipped / Total] 4 / 11 / 1 / 16:   2%|▏         | 16/1000 [01:53<1:56:32,  7.11s/it][Succeeded / Failed / Skipped / Total] 4 / 11 / 1 / 16:   2%|▏         | 17/1000 [01:58<1:54:40,  7.00s/it][Succeeded / Failed / Skipped / Total] 4 / 12 / 1 / 17:   2%|▏         | 17/1000 [01:59<1:54:41,  7.00s/it][Succeeded / Failed / Skipped / Total] 4 / 12 / 1 / 17:   2%|▏         | 18/1000 [02:02<1:51:01,  6.78s/it][Succeeded / Failed / Skipped / Total] 4 / 13 / 1 / 18:   2%|▏         | 18/1000 [02:02<1:51:01,  6.78s/it][Succeeded / Failed / Skipped / Total] 4 / 13 / 1 / 18:   2%|▏         | 19/1000 [02:11<1:52:54,  6.91s/it][Succeeded / Failed / Skipped / Total] 4 / 14 / 1 / 19:   2%|▏         | 19/1000 [02:11<1:52:54,  6.91s/it][Succeeded / Failed / Skipped / Total] 4 / 14 / 1 / 19:   2%|▏         | 20/1000 [02:12<1:48:21,  6.63s/it][Succeeded / Failed / Skipped / Total] 5 / 14 / 1 / 20:   2%|▏         | 20/1000 [02:12<1:48:21,  6.63s/it][Succeeded / Failed / Skipped / Total] 5 / 14 / 1 / 20:   2%|▏         | 21/1000 [02:28<1:55:08,  7.06s/it]Performs a callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[source]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[r]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[pro]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[pro]] instanceof Callable ) { T [[w]] ; try { [[w]] = ( ( Callable < T > ) [[pro]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[w]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[machine]] ; try { [[machine]] = ObjectHelper . requireNonNull ( mapper . apply ( [[w]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[machine]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[machine]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[machine]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 14 ---------------------------------------------
Converts a java . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[end]] ) { ObjectHelper . requireNonNull ( [[end]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[end]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 15 ---------------------------------------------
Create a new Callable that wraps the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[h]] ) { return new JustValue < Object , T > ( [[h]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a new instance of the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[like]] ( Class < U > [[a]] ) { return new CastToClass < T , U > ( [[a]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new size . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[b]]" == "[[b]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Convenience function to apply a value to a value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[hello]] , U > Function < [[hello]] , U > [[test]] ( U [[i]] ) { return new JustValue < [[hello]] , U > ( [[i]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Gets the number of blocks . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[block]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a Subject . --> Create a new ByteBuffer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[update]] ( boolean [[error]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[error]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 15 / 1 / 21:   2%|▏         | 21/1000 [02:28<1:55:08,  7.06s/it][Succeeded / Failed / Skipped / Total] 5 / 15 / 1 / 21:   2%|▏         | 22/1000 [02:32<1:52:46,  6.92s/it][Succeeded / Failed / Skipped / Total] 6 / 15 / 1 / 22:   2%|▏         | 22/1000 [02:32<1:52:46,  6.92s/it][Succeeded / Failed / Skipped / Total] 6 / 15 / 1 / 22:   2%|▏         | 23/1000 [03:00<2:07:58,  7.86s/it][Succeeded / Failed / Skipped / Total] 6 / 16 / 1 / 23:   2%|▏         | 23/1000 [03:00<2:07:58,  7.86s/it][Succeeded / Failed / Skipped / Total] 6 / 16 / 1 / 23:   2%|▏         | 24/1000 [03:00<2:02:35,  7.54s/it][Succeeded / Failed / Skipped / Total] 6 / 17 / 1 / 24:   2%|▏         | 24/1000 [03:00<2:02:35,  7.54s/it][Succeeded / Failed / Skipped / Total] 6 / 17 / 1 / 24:   2%|▎         | 25/1000 [03:20<2:10:09,  8.01s/it][Succeeded / Failed / Skipped / Total] 7 / 17 / 1 / 25:   2%|▎         | 25/1000 [03:20<2:10:09,  8.01s/it][Succeeded / Failed / Skipped / Total] 7 / 17 / 1 / 25:   3%|▎         | 26/1000 [03:26<2:08:53,  7.94s/it][Succeeded / Failed / Skipped / Total] 7 / 18 / 1 / 26:   3%|▎         | 26/1000 [03:26<2:08:54,  7.94s/it][Succeeded / Failed / Skipped / Total] 7 / 18 / 1 / 26:   3%|▎         | 27/1000 [03:41<2:13:01,  8.20s/it][Succeeded / Failed / Skipped / Total] 7 / 19 / 1 / 27:   3%|▎         | 27/1000 [03:41<2:13:01,  8.20s/it][Succeeded / Failed / Skipped / Total] 7 / 19 / 1 / 27:   3%|▎         | 28/1000 [03:42<2:08:34,  7.94s/it]Creates a new builder for the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[execute]] ( int [[call]] ) { return new UnicastSubject < T > ( [[call]] , "[[test]]" == "[[test]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 22 ---------------------------------------------
Waits until the process fails . --> Executes a command --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[command]] ( long timeout , TimeUnit [[null]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[null]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[null]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 23 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[call]] , Runnable [[file]] ) { return new UnicastSubject < T > ( [[call]] , [[file]] , "[[user]]" == "[[user]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 24 ---------------------------------------------
Adapts a prefetch . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[set]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Allocates a queue . --> Allocates a subsequentially --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = qd . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[substitute]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[sum]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[sum]] = qd . leave ( - [[sum]] ) ; if ( [[sum]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 26 ---------------------------------------------
Wraps the given number of blocks . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[anti]]" != "[[anti]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 27 ---------------------------------------------
Get the value of the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[agent]] ( ) { Object [[object]] = value ; if ( NotificationLite . isError ( [[object]] ) ) { return NotificationLite . getError ( [[object]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 20 / 1 / 28:   3%|▎         | 28/1000 [03:42<2:08:34,  7.94s/it][Succeeded / Failed / Skipped / Total] 7 / 20 / 1 / 28:   3%|▎         | 29/1000 [03:49<2:08:05,  7.91s/it][Succeeded / Failed / Skipped / Total] 7 / 21 / 1 / 29:   3%|▎         | 29/1000 [03:49<2:08:05,  7.91s/it][Succeeded / Failed / Skipped / Total] 7 / 21 / 1 / 29:   3%|▎         | 30/1000 [04:08<2:13:49,  8.28s/it][Succeeded / Failed / Skipped / Total] 7 / 22 / 1 / 30:   3%|▎         | 30/1000 [04:08<2:13:49,  8.28s/it][Succeeded / Failed / Skipped / Total] 7 / 22 / 1 / 30:   3%|▎         | 31/1000 [04:45<2:28:38,  9.20s/it][Succeeded / Failed / Skipped / Total] 7 / 23 / 1 / 31:   3%|▎         | 31/1000 [04:45<2:28:38,  9.20s/it][Succeeded / Failed / Skipped / Total] 7 / 23 / 1 / 31:   3%|▎         | 32/1000 [04:54<2:28:16,  9.19s/it][Succeeded / Failed / Skipped / Total] 7 / 24 / 1 / 32:   3%|▎         | 32/1000 [04:54<2:28:16,  9.19s/it][Succeeded / Failed / Skipped / Total] 7 / 24 / 1 / 32:   3%|▎         | 33/1000 [04:54<2:23:52,  8.93s/it][Succeeded / Failed / Skipped / Total] 7 / 25 / 1 / 33:   3%|▎         | 33/1000 [04:54<2:23:52,  8.93s/it][Succeeded / Failed / Skipped / Total] 7 / 25 / 1 / 33:   3%|▎         | 34/1000 [05:04<2:23:59,  8.94s/it]Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[fs]] ( ) { Object [[box]] = value ; if ( [[box]] != null && ! NotificationLite . isError ( [[box]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Attempts to close the supplied value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[after]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 30 ---------------------------------------------
Awaits until a queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[end]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
Increment the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[on]] ( Subscription upstream , Subscription next , Class < ? > [[ref]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[ref]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Returns true if the observer is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[agent]] ( Disposable [[old]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[old]] != null ) { next . dispose ( ) ; if ( [[old]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Sets the subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[event]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[event]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[event]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 25 / 1 / 34:   3%|▎         | 34/1000 [05:04<2:23:59,  8.94s/it][Succeeded / Failed / Skipped / Total] 8 / 25 / 1 / 34:   4%|▎         | 35/1000 [05:16<2:25:31,  9.05s/it][Succeeded / Failed / Skipped / Total] 8 / 26 / 1 / 35:   4%|▎         | 35/1000 [05:16<2:25:32,  9.05s/it][Succeeded / Failed / Skipped / Total] 8 / 26 / 1 / 35:   4%|▎         | 36/1000 [05:17<2:21:31,  8.81s/it][Succeeded / Failed / Skipped / Total] 8 / 27 / 1 / 36:   4%|▎         | 36/1000 [05:17<2:21:31,  8.81s/it][Succeeded / Failed / Skipped / Total] 8 / 27 / 1 / 36:   4%|▎         | 37/1000 [05:22<2:20:02,  8.72s/it][Succeeded / Failed / Skipped / Total] 8 / 28 / 1 / 37:   4%|▎         | 37/1000 [05:22<2:20:02,  8.72s/it][Succeeded / Failed / Skipped / Total] 8 / 28 / 1 / 37:   4%|▍         | 38/1000 [05:26<2:17:54,  8.60s/it][Succeeded / Failed / Skipped / Total] 8 / 29 / 1 / 38:   4%|▍         | 38/1000 [05:26<2:17:54,  8.60s/it][Succeeded / Failed / Skipped / Total] 8 / 29 / 1 / 38:   4%|▍         | 39/1000 [05:35<2:17:38,  8.59s/it][Succeeded / Failed / Skipped / Total] 9 / 29 / 1 / 39:   4%|▍         | 39/1000 [05:35<2:17:38,  8.59s/it][Succeeded / Failed / Skipped / Total] 9 / 29 / 1 / 39:   4%|▍         | 40/1000 [05:39<2:15:47,  8.49s/it][Succeeded / Failed / Skipped / Total] 9 / 30 / 1 / 40:   4%|▍         | 40/1000 [05:39<2:15:47,  8.49s/it][Succeeded / Failed / Skipped / Total] 9 / 30 / 1 / 40:   4%|▍         | 41/1000 [05:47<2:15:21,  8.47s/it][Succeeded / Failed / Skipped / Total] 9 / 31 / 1 / 41:   4%|▍         | 41/1000 [05:47<2:15:21,  8.47s/it][Succeeded / Failed / Skipped / Total] 9 / 31 / 1 / 41:   4%|▍         | 42/1000 [05:59<2:16:44,  8.56s/it][Succeeded / Failed / Skipped / Total] 9 / 32 / 1 / 42:   4%|▍         | 42/1000 [05:59<2:16:44,  8.56s/it][Succeeded / Failed / Skipped / Total] 9 / 32 / 1 / 42:   4%|▍         | 43/1000 [06:03<2:14:46,  8.45s/it]Adds a Long to the set . --> Obtain a new set --> Socre: 1.0

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[u]] = requested . get ( ) ; if ( [[u]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[u]] , n ) ; if ( requested . compareAndSet ( [[u]] , u ) ) { return [[u]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 35 ---------------------------------------------
Add a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[expression]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
A convenience method for creating a set of listeners . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[everyone]] , Disposable [[objects]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[objects]] , "next is null" ) ; if ( ! [[everyone]] . compareAndSet ( null , [[objects]] ) ) { [[objects]] . dispose ( ) ; if ( [[everyone]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 37 ---------------------------------------------
Returns a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[it]] , long b ) { long u = [[it]] * b ; if ( ( ( [[it]] | b ) >>> 31 ) != 0 ) { if ( u / [[it]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 38 ---------------------------------------------
Create a new exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[example]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 39 ---------------------------------------------
Adds an object to the list . --> Sets the category --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[c]] ( Object [[category]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 40 ---------------------------------------------
Shut down the executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 41 ---------------------------------------------
Create a executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[build]] ( ThreadFactory [[line]] ) { final ScheduledExecutorService [[style]] = Executors . newScheduledThreadPool ( 1 , [[line]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[style]] ) ; return [[style]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Cancel the cancellation . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[call]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 33 / 1 / 43:   4%|▍         | 43/1000 [06:03<2:14:46,  8.45s/it][Succeeded / Failed / Skipped / Total] 9 / 33 / 1 / 43:   4%|▍         | 44/1000 [06:04<2:12:03,  8.29s/it][Succeeded / Failed / Skipped / Total] 9 / 34 / 1 / 44:   4%|▍         | 44/1000 [06:04<2:12:03,  8.29s/it][Succeeded / Failed / Skipped / Total] 9 / 34 / 1 / 44:   4%|▍         | 45/1000 [06:11<2:11:29,  8.26s/it][Succeeded / Failed / Skipped / Total] 10 / 34 / 1 / 45:   4%|▍         | 45/1000 [06:11<2:11:29,  8.26s/it][Succeeded / Failed / Skipped / Total] 10 / 34 / 1 / 45:   5%|▍         | 46/1000 [06:13<2:09:09,  8.12s/it][Succeeded / Failed / Skipped / Total] 10 / 35 / 1 / 46:   5%|▍         | 46/1000 [06:13<2:09:09,  8.12s/it][Succeeded / Failed / Skipped / Total] 10 / 35 / 1 / 46:   5%|▍         | 47/1000 [06:24<2:09:49,  8.17s/it][Succeeded / Failed / Skipped / Total] 10 / 36 / 1 / 47:   5%|▍         | 47/1000 [06:24<2:09:49,  8.17s/it][Succeeded / Failed / Skipped / Total] 10 / 36 / 1 / 47:   5%|▍         | 48/1000 [06:39<2:11:54,  8.31s/it][Succeeded / Failed / Skipped / Total] 11 / 36 / 1 / 48:   5%|▍         | 48/1000 [06:39<2:11:54,  8.31s/it][Succeeded / Failed / Skipped / Total] 11 / 36 / 1 / 48:   5%|▍         | 49/1000 [06:47<2:11:56,  8.32s/it][Succeeded / Failed / Skipped / Total] 11 / 37 / 1 / 49:   5%|▍         | 49/1000 [06:47<2:11:56,  8.32s/it][Succeeded / Failed / Skipped / Total] 11 / 37 / 1 / 49:   5%|▌         | 50/1000 [06:49<2:09:36,  8.19s/it][Succeeded / Failed / Skipped / Total] 12 / 37 / 1 / 50:   5%|▌         | 50/1000 [06:49<2:09:36,  8.19s/it][Succeeded / Failed / Skipped / Total] 12 / 37 / 1 / 50:   5%|▌         | 51/1000 [06:56<2:09:05,  8.16s/it][Succeeded / Failed / Skipped / Total] 12 / 38 / 1 / 51:   5%|▌         | 51/1000 [06:56<2:09:05,  8.16s/it][Succeeded / Failed / Skipped / Total] 12 / 38 / 1 / 51:   5%|▌         | 52/1000 [06:58<2:07:02,  8.04s/it]Processes the queue . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[dir]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 44 ---------------------------------------------
Wraps the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[example]] ) { if ( [[example]] instanceof Error ) { throw ( Error ) [[example]] ; } if ( [[example]] instanceof RuntimeException ) { return ( RuntimeException ) [[example]] ; } return new RuntimeException ( [[example]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
Sets all resources . --> Allocate a new instance --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[save]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Throws an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[are]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of disposes . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[make]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[k]] = resources ; return [[k]] != null ? [[k]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Returns a granted object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[a]]" == "[[a]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 49 ---------------------------------------------
Convenience factory method to create a new Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[extension]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[string]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[string]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
Returns a observer for a given object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int [[i]] = 0 ; [[i]] < c ; [[i]] ++ ) { Object o = a [ [[i]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int [[s]] = 0 ; [[s]] < c ; [[s]] ++ ) { Object o = a [ [[s]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 51 ---------------------------------------------
Initializes the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[client]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
[Succeeded / Failed / Skipped / Total] 12 / 39 / 1 / 52:   5%|▌         | 52/1000 [06:58<2:07:02,  8.04s/it][Succeeded / Failed / Skipped / Total] 12 / 39 / 1 / 52:   5%|▌         | 53/1000 [07:10<2:08:09,  8.12s/it][Succeeded / Failed / Skipped / Total] 12 / 40 / 1 / 53:   5%|▌         | 53/1000 [07:10<2:08:09,  8.12s/it][Succeeded / Failed / Skipped / Total] 12 / 40 / 1 / 53:   5%|▌         | 54/1000 [07:13<2:06:28,  8.02s/it][Succeeded / Failed / Skipped / Total] 12 / 41 / 1 / 54:   5%|▌         | 54/1000 [07:13<2:06:28,  8.02s/it][Succeeded / Failed / Skipped / Total] 12 / 41 / 1 / 54:   6%|▌         | 55/1000 [07:32<2:09:40,  8.23s/it][Succeeded / Failed / Skipped / Total] 12 / 42 / 1 / 55:   6%|▌         | 55/1000 [07:32<2:09:40,  8.23s/it][Succeeded / Failed / Skipped / Total] 12 / 42 / 1 / 55:   6%|▌         | 56/1000 [07:41<2:09:35,  8.24s/it][Succeeded / Failed / Skipped / Total] 13 / 42 / 1 / 56:   6%|▌         | 56/1000 [07:41<2:09:35,  8.24s/it][Succeeded / Failed / Skipped / Total] 13 / 42 / 1 / 56:   6%|▌         | 57/1000 [07:49<2:09:20,  8.23s/it][Succeeded / Failed / Skipped / Total] 13 / 43 / 1 / 57:   6%|▌         | 57/1000 [07:49<2:09:20,  8.23s/it][Succeeded / Failed / Skipped / Total] 13 / 43 / 1 / 57:   6%|▌         | 58/1000 [07:57<2:09:15,  8.23s/it][Succeeded / Failed / Skipped / Total] 13 / 44 / 1 / 58:   6%|▌         | 58/1000 [07:57<2:09:15,  8.23s/it][Succeeded / Failed / Skipped / Total] 13 / 44 / 1 / 58:   6%|▌         | 59/1000 [08:07<2:09:29,  8.26s/it]--------------------------------------------- Result 52 ---------------------------------------------
Initializes the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[directory]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Throw exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[end]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[end]] . add ( e ) ; } } return [[end]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 54 ---------------------------------------------
Get the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[ard]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
Returns the number of messages . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[lp]] ) { if ( once . get ( ) ) { return "[[service]]" != "[[service]]" ; } ObjectHelper . requireNonNull ( [[lp]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[lp]] ) ) { drain ( ) ; return "True" == "True" ; } } return "[[service]]" != "[[service]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 56 ---------------------------------------------
Acquires an error . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable [[t]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable [[test]] ) { int [[h]] = get ( ) ; if ( ( [[h]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[test]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[test]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 57 ---------------------------------------------
Stops the current state . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[get]] ( ) { int [[check]] = get ( ) ; if ( ( [[check]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 58 ---------------------------------------------
Shuts down the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[e]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[e]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[e]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[e]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 59 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 45 / 1 / 59:   6%|▌         | 59/1000 [08:07<2:09:29,  8.26s/it][Succeeded / Failed / Skipped / Total] 13 / 45 / 1 / 59:   6%|▌         | 60/1000 [08:15<2:09:16,  8.25s/it][Succeeded / Failed / Skipped / Total] 13 / 46 / 1 / 60:   6%|▌         | 60/1000 [08:15<2:09:16,  8.25s/it][Succeeded / Failed / Skipped / Total] 13 / 46 / 1 / 60:   6%|▌         | 61/1000 [08:15<2:07:14,  8.13s/it][Succeeded / Failed / Skipped / Total] 13 / 47 / 1 / 61:   6%|▌         | 61/1000 [08:15<2:07:14,  8.13s/it][Succeeded / Failed / Skipped / Total] 13 / 47 / 1 / 61:   6%|▌         | 62/1000 [08:18<2:05:37,  8.04s/it][Succeeded / Failed / Skipped / Total] 13 / 48 / 1 / 62:   6%|▌         | 62/1000 [08:18<2:05:37,  8.04s/it][Succeeded / Failed / Skipped / Total] 13 / 48 / 1 / 62:   6%|▋         | 63/1000 [08:23<2:04:42,  7.99s/it][Succeeded / Failed / Skipped / Total] 13 / 49 / 1 / 63:   6%|▋         | 63/1000 [08:23<2:04:42,  7.99s/it][Succeeded / Failed / Skipped / Total] 13 / 49 / 1 / 63:   6%|▋         | 64/1000 [08:31<2:04:36,  7.99s/it][Succeeded / Failed / Skipped / Total] 14 / 49 / 1 / 64:   6%|▋         | 64/1000 [08:31<2:04:36,  7.99s/it][Succeeded / Failed / Skipped / Total] 14 / 49 / 1 / 64:   6%|▋         | 65/1000 [08:55<2:08:20,  8.24s/it]Return a new Iterable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[ref]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[ref]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 60 ---------------------------------------------
A convenience method to execute the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return concatMapDelayError ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[false]] ) { return concatMapDelayError ( [[false]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 61 ---------------------------------------------
Sorts the supplied arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[check]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 62 ---------------------------------------------
Wraps the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 63 ---------------------------------------------
Returns the number of queues . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[value]] ) { if ( [[value]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 64 ---------------------------------------------
Set the request . --> Index a request --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[index]] = this . [[header]] ; if ( [[index]] != null ) { [[index]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 50 / 1 / 65:   6%|▋         | 65/1000 [08:55<2:08:20,  8.24s/it][Succeeded / Failed / Skipped / Total] 14 / 50 / 1 / 65:   7%|▋         | 66/1000 [09:03<2:08:05,  8.23s/it][Succeeded / Failed / Skipped / Total] 15 / 50 / 1 / 66:   7%|▋         | 66/1000 [09:03<2:08:05,  8.23s/it][Succeeded / Failed / Skipped / Total] 15 / 50 / 1 / 66:   7%|▋         | 67/1000 [09:10<2:07:40,  8.21s/it][Succeeded / Failed / Skipped / Total] 16 / 50 / 1 / 67:   7%|▋         | 67/1000 [09:10<2:07:40,  8.21s/it][Succeeded / Failed / Skipped / Total] 16 / 50 / 1 / 67:   7%|▋         | 68/1000 [09:10<2:05:42,  8.09s/it][Succeeded / Failed / Skipped / Total] 17 / 50 / 1 / 68:   7%|▋         | 68/1000 [09:10<2:05:42,  8.09s/it][Succeeded / Failed / Skipped / Total] 17 / 50 / 1 / 68:   7%|▋         | 69/1000 [09:29<2:08:09,  8.26s/it][Succeeded / Failed / Skipped / Total] 17 / 51 / 1 / 69:   7%|▋         | 69/1000 [09:29<2:08:09,  8.26s/it][Succeeded / Failed / Skipped / Total] 17 / 51 / 1 / 69:   7%|▋         | 70/1000 [09:33<2:07:03,  8.20s/it][Succeeded / Failed / Skipped / Total] 17 / 52 / 1 / 70:   7%|▋         | 70/1000 [09:33<2:07:03,  8.20s/it][Succeeded / Failed / Skipped / Total] 17 / 52 / 1 / 70:   7%|▋         | 71/1000 [09:42<2:07:00,  8.20s/it][Succeeded / Failed / Skipped / Total] 17 / 53 / 1 / 71:   7%|▋         | 71/1000 [09:42<2:07:00,  8.20s/it][Succeeded / Failed / Skipped / Total] 17 / 53 / 1 / 71:   7%|▋         | 72/1000 [09:46<2:06:03,  8.15s/it]Creates a flow flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[flowable]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[flowable]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[cl]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[cl]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Removes a subscriber . --> Re - - - - - - - - - - - - - - - - - - - - - - b --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int n = [[a]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[a]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , j ) ; System . arraycopy ( [[a]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[after]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[bi]] = subscribers . get ( ) ; if ( [[bi]] == TERMINATED || [[bi]] == EMPTY ) { return ; } int n = [[bi]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[bi]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[bi]] , 0 , b , 0 , j ) ; System . arraycopy ( [[bi]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[bi]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Set the amount of time --> Convenience function to wait for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit unit ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[test]] ( long [[units]] , TimeUnit unit ) { if ( [[units]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( [[units]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 68 ---------------------------------------------
Creates a new callableResponse . --> Convenience factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[test]] ; try { [[test]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[test]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[test]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[test]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Returns a PublishedPublished . --> [[[FAILED]]]

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int [[n]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[n]] ) ; b [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int [[pt]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[pt]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[pt]] ) ; b [ [[pt]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 70 ---------------------------------------------
Calculates the time for a given time . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[add]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Create a new username --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[print]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[es]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 54 / 1 / 72:   7%|▋         | 72/1000 [09:46<2:06:03,  8.15s/it][Succeeded / Failed / Skipped / Total] 17 / 54 / 1 / 72:   7%|▋         | 73/1000 [09:47<2:04:26,  8.05s/it][Succeeded / Failed / Skipped / Total] 18 / 54 / 1 / 73:   7%|▋         | 73/1000 [09:47<2:04:26,  8.05s/it][Succeeded / Failed / Skipped / Total] 18 / 54 / 1 / 73:   7%|▋         | 74/1000 [09:55<2:04:12,  8.05s/it][Succeeded / Failed / Skipped / Total] 19 / 54 / 1 / 74:   7%|▋         | 74/1000 [09:55<2:04:12,  8.05s/it][Succeeded / Failed / Skipped / Total] 19 / 54 / 1 / 74:   8%|▊         | 75/1000 [10:17<2:06:53,  8.23s/it][Succeeded / Failed / Skipped / Total] 19 / 55 / 1 / 75:   8%|▊         | 75/1000 [10:17<2:06:53,  8.23s/it][Succeeded / Failed / Skipped / Total] 19 / 55 / 1 / 75:   8%|▊         | 76/1000 [10:20<2:05:44,  8.16s/it][Succeeded / Failed / Skipped / Total] 19 / 56 / 1 / 76:   8%|▊         | 76/1000 [10:20<2:05:44,  8.16s/it][Succeeded / Failed / Skipped / Total] 19 / 56 / 1 / 76:   8%|▊         | 77/1000 [10:27<2:05:27,  8.16s/it][Succeeded / Failed / Skipped / Total] 19 / 57 / 1 / 77:   8%|▊         | 77/1000 [10:27<2:05:27,  8.16s/it][Succeeded / Failed / Skipped / Total] 19 / 57 / 1 / 77:   8%|▊         | 78/1000 [10:29<2:03:56,  8.07s/it][Succeeded / Failed / Skipped / Total] 19 / 58 / 1 / 78:   8%|▊         | 78/1000 [10:29<2:03:56,  8.07s/it][Succeeded / Failed / Skipped / Total] 19 / 58 / 1 / 78:   8%|▊         | 79/1000 [10:34<2:03:22,  8.04s/it]Returns the HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[end]] ) { try { return HttpMethod . valueOf ( [[end]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 73 ---------------------------------------------
Returns the search search for the given search . --> Searches for a search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[h]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[h]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[list]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[list]] . setSearchControls ( searchControls ) ; try { return [[list]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[h]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[h]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Checks if the given version exists . --> Does the end of the end . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[end]] ) { if ( [[end]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Generate a password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[digest]] ( CharSequence rawPassword ) { String [[start]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[start]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Parses the response . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[continuationWantsResponse]] = "[[False]]" != "[[False]]" ; boolean continuationBodyNullable = "[[False]]" != "[[False]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[message]] = "[[reply]]" != "[[reply]]" ; boolean continuationBodyNullable = "[[reply]]" != "[[reply]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 77 ---------------------------------------------
Check if the given version is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[that]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[plus]]" == "[[plus]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 78 ---------------------------------------------
Put password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 59 / 1 / 79:   8%|▊         | 79/1000 [10:34<2:03:22,  8.04s/it][Succeeded / Failed / Skipped / Total] 19 / 59 / 1 / 79:   8%|▊         | 80/1000 [10:41<2:03:00,  8.02s/it][Succeeded / Failed / Skipped / Total] 19 / 60 / 1 / 80:   8%|▊         | 80/1000 [10:41<2:03:00,  8.02s/it][Succeeded / Failed / Skipped / Total] 19 / 60 / 1 / 80:   8%|▊         | 81/1000 [10:52<2:03:24,  8.06s/it][Succeeded / Failed / Skipped / Total] 19 / 61 / 1 / 81:   8%|▊         | 81/1000 [10:52<2:03:24,  8.06s/it][Succeeded / Failed / Skipped / Total] 19 / 61 / 1 / 81:   8%|▊         | 82/1000 [10:54<2:02:06,  7.98s/it][Succeeded / Failed / Skipped / Total] 19 / 62 / 1 / 82:   8%|▊         | 82/1000 [10:54<2:02:06,  7.98s/it][Succeeded / Failed / Skipped / Total] 19 / 62 / 1 / 82:   8%|▊         | 83/1000 [11:03<2:02:14,  8.00s/it][Succeeded / Failed / Skipped / Total] 19 / 63 / 1 / 83:   8%|▊         | 83/1000 [11:03<2:02:14,  8.00s/it][Succeeded / Failed / Skipped / Total] 19 / 63 / 1 / 83:   8%|▊         | 84/1000 [11:44<2:07:59,  8.38s/it][Succeeded / Failed / Skipped / Total] 20 / 63 / 1 / 84:   8%|▊         | 84/1000 [11:44<2:07:59,  8.38s/it][Succeeded / Failed / Skipped / Total] 20 / 63 / 1 / 84:   8%|▊         | 85/1000 [12:00<2:09:16,  8.48s/it][Succeeded / Failed / Skipped / Total] 20 / 64 / 1 / 85:   8%|▊         | 85/1000 [12:00<2:09:16,  8.48s/it][Succeeded / Failed / Skipped / Total] 20 / 64 / 1 / 85:   9%|▊         | 86/1000 [12:02<2:08:03,  8.41s/it]Obtains the Spring properties file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[structure]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 80 ---------------------------------------------
Configures OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Get the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Get OAuth2 OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[client]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[client]] ) ; return [[client]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 83 ---------------------------------------------
Sets the attributes for the given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[null]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[null]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 84 ---------------------------------------------
Execute the given attributes . --> Execute a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( dn , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[array]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[index]] = ctx . getAttributes ( dn , [[array]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 85 ---------------------------------------------
Search for a single attribute value . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String base , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String base , final String [[element]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 64 / 1 / 86:   9%|▊         | 86/1000 [12:02<2:08:03,  8.41s/it][Succeeded / Failed / Skipped / Total] 21 / 64 / 1 / 86:   9%|▊         | 87/1000 [12:19<2:09:23,  8.50s/it][Succeeded / Failed / Skipped / Total] 21 / 65 / 1 / 87:   9%|▊         | 87/1000 [12:19<2:09:23,  8.50s/it][Succeeded / Failed / Skipped / Total] 21 / 65 / 1 / 87:   9%|▉         | 88/1000 [12:25<2:08:47,  8.47s/it][Succeeded / Failed / Skipped / Total] 21 / 66 / 1 / 88:   9%|▉         | 88/1000 [12:25<2:08:47,  8.47s/it][Succeeded / Failed / Skipped / Total] 21 / 66 / 1 / 88:   9%|▉         | 89/1000 [12:44<2:10:25,  8.59s/it]Build a search for a given search . --> Build a set of searched searches --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName [[searchBaseDn]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( [[searchBaseDn]] , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[searchBaseDn]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName [[base]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( [[base]] , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[base]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 87 ---------------------------------------------
Returns a Controls with the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[end]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Executes the search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[pairs]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 67 / 1 / 89:   9%|▉         | 89/1000 [12:44<2:10:25,  8.59s/it][Succeeded / Failed / Skipped / Total] 21 / 67 / 1 / 89:   9%|▉         | 90/1000 [12:51<2:10:03,  8.58s/it][Succeeded / Failed / Skipped / Total] 22 / 67 / 1 / 90:   9%|▉         | 90/1000 [12:51<2:10:03,  8.58s/it][Succeeded / Failed / Skipped / Total] 22 / 67 / 1 / 90:   9%|▉         | 91/1000 [12:57<2:09:24,  8.54s/it][Succeeded / Failed / Skipped / Total] 23 / 67 / 1 / 91:   9%|▉         | 91/1000 [12:57<2:09:24,  8.54s/it][Succeeded / Failed / Skipped / Total] 23 / 67 / 1 / 91:   9%|▉         | 92/1000 [13:10<2:10:00,  8.59s/it]Converts a list of values to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[then]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[number]] = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[number]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
Register servlet . --> Register HttpServletRequest . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[DEF_SERVLET_API_PROVISION]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[DEF_SERVLET_API_PROVISION]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[answer]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[answer]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Create a bean definition . --> Helper method to create a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String [[url]] = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( [[url]] ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + [[url]] ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[origin]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[origin]] ) ) { [[origin]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[origin]] ) ; } } String [[alt]] = "ldap://127.0.0.1:" + [[origin]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( [[alt]] ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[origin]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + [[alt]] ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 67 / 1 / 92:   9%|▉         | 92/1000 [13:10<2:10:00,  8.59s/it][Succeeded / Failed / Skipped / Total] 24 / 67 / 1 / 92:   9%|▉         | 93/1000 [13:10<2:08:28,  8.50s/it][Succeeded / Failed / Skipped / Total] 24 / 68 / 1 / 93:   9%|▉         | 93/1000 [13:10<2:08:28,  8.50s/it][Succeeded / Failed / Skipped / Total] 24 / 68 / 1 / 93:   9%|▉         | 94/1000 [13:16<2:08:01,  8.48s/it][Succeeded / Failed / Skipped / Total] 25 / 68 / 1 / 94:   9%|▉         | 94/1000 [13:16<2:08:01,  8.48s/it][Succeeded / Failed / Skipped / Total] 25 / 68 / 1 / 94:  10%|▉         | 95/1000 [13:19<2:06:55,  8.41s/it][Succeeded / Failed / Skipped / Total] 26 / 68 / 1 / 95:  10%|▉         | 95/1000 [13:19<2:06:55,  8.41s/it][Succeeded / Failed / Skipped / Total] 26 / 68 / 1 / 95:  10%|▉         | 96/1000 [13:19<2:05:30,  8.33s/it][Succeeded / Failed / Skipped / Total] 26 / 69 / 1 / 96:  10%|▉         | 96/1000 [13:19<2:05:30,  8.33s/it][Succeeded / Failed / Skipped / Total] 26 / 69 / 1 / 96:  10%|▉         | 97/1000 [13:26<2:05:06,  8.31s/it][Succeeded / Failed / Skipped / Total] 26 / 70 / 1 / 97:  10%|▉         | 97/1000 [13:26<2:05:06,  8.31s/it][Succeeded / Failed / Skipped / Total] 26 / 70 / 1 / 97:  10%|▉         | 98/1000 [13:35<2:05:02,  8.32s/it]Sets the Jasawater filter . --> This method creates a Jacknowledge . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[acknowledge]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[acknowledge]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Create a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[string]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[types]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[types]] = [[types]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[types]] = [[types]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[types]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Set the filter context . --> Register a filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[id]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 95 ---------------------------------------------
Get a list of regarding user . --> Get a row of a specific row --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[id]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 96 ---------------------------------------------
Builds a Groveloviolation . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest [[context]] ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest [[ing]] ) { Collection < String > [[collection]] = getUserRoles ( [[ing]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[collection]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[collection]] + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[ing]] , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 97 ---------------------------------------------
Sets the properties . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[brace]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 71 / 1 / 98:  10%|▉         | 98/1000 [13:35<2:05:02,  8.32s/it][Succeeded / Failed / Skipped / Total] 26 / 71 / 1 / 98:  10%|▉         | 99/1000 [13:51<2:06:03,  8.39s/it][Succeeded / Failed / Skipped / Total] 26 / 72 / 1 / 99:  10%|▉         | 99/1000 [13:51<2:06:03,  8.39s/it][Succeeded / Failed / Skipped / Total] 26 / 72 / 1 / 99:  10%|█         | 100/1000 [14:01<2:06:11,  8.41s/it][Succeeded / Failed / Skipped / Total] 26 / 73 / 1 / 100:  10%|█         | 100/1000 [14:01<2:06:11,  8.41s/it][Succeeded / Failed / Skipped / Total] 26 / 73 / 1 / 100:  10%|█         | 101/1000 [14:16<2:07:05,  8.48s/it][Succeeded / Failed / Skipped / Total] 26 / 74 / 1 / 101:  10%|█         | 101/1000 [14:16<2:07:05,  8.48s/it][Succeeded / Failed / Skipped / Total] 26 / 74 / 1 / 101:  10%|█         | 102/1000 [14:27<2:07:19,  8.51s/it][Succeeded / Failed / Skipped / Total] 26 / 75 / 1 / 102:  10%|█         | 102/1000 [14:27<2:07:19,  8.51s/it][Succeeded / Failed / Skipped / Total] 26 / 75 / 1 / 102:  10%|█         | 103/1000 [14:33<2:06:45,  8.48s/it][Succeeded / Failed / Skipped / Total] 27 / 75 / 1 / 103:  10%|█         | 103/1000 [14:33<2:06:45,  8.48s/it][Succeeded / Failed / Skipped / Total] 27 / 75 / 1 / 103:  10%|█         | 104/1000 [14:39<2:06:16,  8.46s/it]Encrypted algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[run]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Returns a list of all prefixes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[number]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[number]] . size ( ) ) ; for ( String attribute : [[number]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 100 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 101 ---------------------------------------------
Find a set of keys . --> [[[FAILED]]]

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > [[acls]] , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( [[acls]] , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[acls]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > [[data]] , final Set < Long > [[file]] , final List < Sid > sids ) { Assert . notNull ( [[data]] , "ACLs are required" ) ; Assert . notEmpty ( [[file]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[file]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[file]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( [[data]] , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 102 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[loop]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[hello]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[hello]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[hello]] ) ) { return "False" != "False" ; } if ( [[hello]] != null && [[hello]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[hello]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 103 ---------------------------------------------
Create a login login login . --> Create a Login --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[loginProcessingUrl]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[ex]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 76 / 1 / 104:  10%|█         | 104/1000 [14:39<2:06:16,  8.46s/it][Succeeded / Failed / Skipped / Total] 27 / 76 / 1 / 104:  10%|█         | 105/1000 [14:44<2:05:38,  8.42s/it][Succeeded / Failed / Skipped / Total] 27 / 77 / 1 / 105:  10%|█         | 105/1000 [14:44<2:05:38,  8.42s/it][Succeeded / Failed / Skipped / Total] 27 / 77 / 1 / 105:  11%|█         | 106/1000 [14:50<2:05:11,  8.40s/it][Succeeded / Failed / Skipped / Total] 28 / 77 / 1 / 106:  11%|█         | 106/1000 [14:50<2:05:11,  8.40s/it][Succeeded / Failed / Skipped / Total] 28 / 77 / 1 / 106:  11%|█         | 107/1000 [14:56<2:04:46,  8.38s/it][Succeeded / Failed / Skipped / Total] 28 / 78 / 1 / 107:  11%|█         | 107/1000 [14:56<2:04:46,  8.38s/it][Succeeded / Failed / Skipped / Total] 28 / 78 / 1 / 107:  11%|█         | 108/1000 [15:03<2:04:19,  8.36s/it][Succeeded / Failed / Skipped / Total] 28 / 79 / 1 / 108:  11%|█         | 108/1000 [15:03<2:04:19,  8.36s/it][Succeeded / Failed / Skipped / Total] 28 / 79 / 1 / 108:  11%|█         | 109/1000 [15:14<2:04:35,  8.39s/it][Succeeded / Failed / Skipped / Total] 28 / 80 / 1 / 109:  11%|█         | 109/1000 [15:14<2:04:35,  8.39s/it][Succeeded / Failed / Skipped / Total] 28 / 80 / 1 / 109:  11%|█         | 110/1000 [15:17<2:03:42,  8.34s/it]Handle authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication [[authResult]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[authResult]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , [[authResult]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication [[access]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[bus]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[bus]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[access]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , [[access]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 105 ---------------------------------------------
Update logout . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[z]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[z]] != null && ! [[z]] . isCustomLogoutSuccess ( ) ) { [[z]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Updates the current user . --> Serialize a &lt ; --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[f]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
Convert password to password . --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[link]] ) { if ( ! ( [[link]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 108 ---------------------------------------------
Returns the default authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[declare]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
Returns the cookie cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[ask]] ( HttpServletRequest request ) { Cookie [ ] [[format]] = request . getCookies ( ) ; if ( ( [[format]] == null ) || ( [[format]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[format]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 110 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 80 / 1 / 110:  11%|█         | 110/1000 [15:17<2:03:42,  8.34s/it][Succeeded / Failed / Skipped / Total] 29 / 80 / 1 / 110:  11%|█         | 111/1000 [15:32<2:04:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 29 / 81 / 1 / 111:  11%|█         | 111/1000 [15:32<2:04:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 29 / 81 / 1 / 111:  11%|█         | 112/1000 [15:33<2:03:21,  8.33s/it][Succeeded / Failed / Skipped / Total] 30 / 81 / 1 / 112:  11%|█         | 112/1000 [15:33<2:03:21,  8.33s/it][Succeeded / Failed / Skipped / Total] 30 / 81 / 1 / 112:  11%|█▏        | 113/1000 [15:50<2:04:23,  8.41s/it][Succeeded / Failed / Skipped / Total] 30 / 82 / 1 / 113:  11%|█▏        | 113/1000 [15:50<2:04:23,  8.41s/it][Succeeded / Failed / Skipped / Total] 30 / 82 / 1 / 113:  11%|█▏        | 114/1000 [15:53<2:03:26,  8.36s/it][Succeeded / Failed / Skipped / Total] 30 / 83 / 1 / 114:  11%|█▏        | 114/1000 [15:53<2:03:26,  8.36s/it][Succeeded / Failed / Skipped / Total] 30 / 83 / 1 / 114:  12%|█▏        | 115/1000 [15:59<2:03:06,  8.35s/it][Succeeded / Failed / Skipped / Total] 31 / 83 / 1 / 115:  12%|█▏        | 115/1000 [15:59<2:03:06,  8.35s/it][Succeeded / Failed / Skipped / Total] 31 / 83 / 1 / 115:  12%|█▏        | 116/1000 [16:11<2:03:20,  8.37s/it]Encode cookie . --> Encode a string into a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int [[i]] = 0 ; [[i]] < cookieTokens . length ; [[i]] ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ [[i]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[i]] < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[bar]] ( String [ ] cookieTokens ) { StringBuilder [[bit]] = new StringBuilder ( ) ; for ( int [[z]] = 0 ; [[z]] < cookieTokens . length ; [[z]] ++ ) { try { [[bit]] . append ( URLEncoder . encode ( cookieTokens [ [[z]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[z]] < cookieTokens . length - 1 ) { [[bit]] . append ( DELIMITER ) ; } } String value = [[bit]] . toString ( ) ; [[bit]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[bit]] . charAt ( [[bit]] . length ( ) - 1 ) == ' ' ) { [[bit]] . deleteCharAt ( [[bit]] . length ( ) - 1 ) ; } return [[bit]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Checks to see if the buffer is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[foo]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[input]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[input]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the security context . --> Resolves a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[o]] = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? [[o]] : Mono . just ( [[adapter]] . fromPublisher ( [[o]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[box]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[size]] = Mono . justOrEmpty ( p ) ; return [[box]] == null ? [[size]] : Mono . just ( [[box]] . fromPublisher ( [[size]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 113 ---------------------------------------------
Returns the query string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[array]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[find]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[find]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 114 ---------------------------------------------
Returns the port of the port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[hash]] ) { int [[test]] = [[hash]] . getPort ( ) ; if ( [[test]] == - 1 ) { [[test]] = [[hash]] . getDefaultPort ( ) ; } return [[test]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 115 ---------------------------------------------
Authenticate authentication . --> Authenticated resource . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[method]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 84 / 1 / 116:  12%|█▏        | 116/1000 [16:11<2:03:20,  8.37s/it][Succeeded / Failed / Skipped / Total] 31 / 84 / 1 / 116:  12%|█▏        | 117/1000 [16:30<2:04:36,  8.47s/it][Succeeded / Failed / Skipped / Total] 31 / 85 / 1 / 117:  12%|█▏        | 117/1000 [16:30<2:04:36,  8.47s/it][Succeeded / Failed / Skipped / Total] 31 / 85 / 1 / 117:  12%|█▏        | 118/1000 [16:30<2:03:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 32 / 85 / 1 / 118:  12%|█▏        | 118/1000 [16:30<2:03:26,  8.40s/it][Succeeded / Failed / Skipped / Total] 32 / 85 / 1 / 118:  12%|█▏        | 119/1000 [16:37<2:03:05,  8.38s/it][Succeeded / Failed / Skipped / Total] 32 / 86 / 1 / 119:  12%|█▏        | 119/1000 [16:37<2:03:05,  8.38s/it][Succeeded / Failed / Skipped / Total] 32 / 86 / 1 / 119:  12%|█▏        | 120/1000 [16:38<2:02:04,  8.32s/it][Succeeded / Failed / Skipped / Total] 32 / 87 / 1 / 120:  12%|█▏        | 120/1000 [16:38<2:02:04,  8.32s/it][Succeeded / Failed / Skipped / Total] 32 / 87 / 1 / 120:  12%|█▏        | 121/1000 [16:42<2:01:24,  8.29s/it][Succeeded / Failed / Skipped / Total] 32 / 88 / 1 / 121:  12%|█▏        | 121/1000 [16:42<2:01:24,  8.29s/it][Succeeded / Failed / Skipped / Total] 32 / 88 / 1 / 121:  12%|█▏        | 122/1000 [16:43<2:00:25,  8.23s/it][Succeeded / Failed / Skipped / Total] 33 / 88 / 1 / 122:  12%|█▏        | 122/1000 [16:43<2:00:25,  8.23s/it][Succeeded / Failed / Skipped / Total] 33 / 88 / 1 / 122:  12%|█▏        | 123/1000 [16:53<2:00:25,  8.24s/it]Get the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPrincipal]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String [[warn]] ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 117 ---------------------------------------------
Sets the environment . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[load]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 118 ---------------------------------------------
Sets the cookie . --> Send a http request --> Socre: 1.0

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , [[cookieValue]] ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "[[True]]" == "[[True]]" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[character]] = encodeCookie ( tokens ) ; Cookie [[date]] = new Cookie ( cookieName , [[character]] ) ; [[date]] . setMaxAge ( maxAge ) ; [[date]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[date]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[date]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[date]] . setSecure ( request . isSecure ( ) ) ; } else { [[date]] . setSecure ( useSecureCookie ) ; } [[date]] . setHttpOnly ( "[[send]]" == "[[send]]" ) ; response . addCookie ( [[date]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 119 ---------------------------------------------
Builds a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[execute]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[add]] ( HttpServletRequest [[ion]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[ion]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[ion]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 121 ---------------------------------------------
Method to get the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[find]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 122 ---------------------------------------------
Initialize the User . --> Build a User --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[ign]] : this . users ) { getUserDetailsService ( ) . createUser ( [[ign]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
[Succeeded / Failed / Skipped / Total] 34 / 88 / 1 / 123:  12%|█▏        | 123/1000 [16:53<2:00:25,  8.24s/it][Succeeded / Failed / Skipped / Total] 34 / 88 / 1 / 123:  12%|█▏        | 124/1000 [16:56<1:59:39,  8.20s/it][Succeeded / Failed / Skipped / Total] 34 / 89 / 1 / 124:  12%|█▏        | 124/1000 [16:56<1:59:39,  8.20s/it][Succeeded / Failed / Skipped / Total] 34 / 90 / 1 / 125:  12%|█▎        | 125/1000 [16:56<1:58:34,  8.13s/it][Succeeded / Failed / Skipped / Total] 34 / 90 / 1 / 125:  13%|█▎        | 126/1000 [17:13<1:59:31,  8.21s/it][Succeeded / Failed / Skipped / Total] 34 / 91 / 1 / 126:  13%|█▎        | 126/1000 [17:13<1:59:31,  8.21s/it][Succeeded / Failed / Skipped / Total] 34 / 91 / 1 / 126:  13%|█▎        | 127/1000 [17:29<2:00:13,  8.26s/it][Succeeded / Failed / Skipped / Total] 34 / 92 / 1 / 127:  13%|█▎        | 127/1000 [17:29<2:00:13,  8.26s/it][Succeeded / Failed / Skipped / Total] 34 / 92 / 1 / 127:  13%|█▎        | 128/1000 [17:43<2:00:41,  8.30s/it][Succeeded / Failed / Skipped / Total] 34 / 93 / 1 / 128:  13%|█▎        | 128/1000 [17:43<2:00:41,  8.30s/it][Succeeded / Failed / Skipped / Total] 34 / 93 / 1 / 128:  13%|█▎        | 129/1000 [17:50<2:00:25,  8.30s/it]--------------------------------------------- Result 123 ---------------------------------------------
Configures a request . --> Check if the request is valid --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[result]] = [[result]] ( request , response ) ; final boolean result = [[result]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[result]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 124 ---------------------------------------------
Obtains the servlet for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[parent]] ( ) { Map < String , ? > [[z]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[z]] . size ( ) == 0 ) { [[z]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[z]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[z]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[z]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 125 ---------------------------------------------
Create a new DTO instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String [[serverUrl]] : urls ) { String trimmedUrl = [[serverUrl]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[parameters]] ) { Assert . notNull ( [[parameters]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[parameters]] . trim ( ) ; StringBuilder [[index]] = new StringBuilder ( ) ; for ( String [[add]] : urls ) { String trimmedUrl = [[add]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[index]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[index]] . append ( "/" ) ; } [[index]] . append ( trimmedBaseDn ) ; [[index]] . append ( " " ) ; } return [[index]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 126 ---------------------------------------------
Checks if authentication token is authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication [[command]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[command]] != null && [[command]] . isAuthenticated ( ) && ! ( [[command]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 127 ---------------------------------------------
Check if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[declaration]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
Processes the request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[execution]] ( final HttpServletRequest request ) { final boolean [[process]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[process]] ) ; } return [[process]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 129 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 94 / 1 / 129:  13%|█▎        | 129/1000 [17:50<2:00:25,  8.30s/it][Succeeded / Failed / Skipped / Total] 34 / 94 / 1 / 129:  13%|█▎        | 130/1000 [17:50<1:59:23,  8.23s/it][Succeeded / Failed / Skipped / Total] 34 / 94 / 2 / 130:  13%|█▎        | 130/1000 [17:50<1:59:23,  8.23s/it][Succeeded / Failed / Skipped / Total] 34 / 94 / 2 / 130:  13%|█▎        | 131/1000 [17:51<1:58:25,  8.18s/it][Succeeded / Failed / Skipped / Total] 35 / 94 / 2 / 131:  13%|█▎        | 131/1000 [17:51<1:58:25,  8.18s/it][Succeeded / Failed / Skipped / Total] 35 / 94 / 2 / 131:  13%|█▎        | 132/1000 [17:52<1:57:35,  8.13s/it][Succeeded / Failed / Skipped / Total] 36 / 94 / 2 / 132:  13%|█▎        | 132/1000 [17:52<1:57:35,  8.13s/it][Succeeded / Failed / Skipped / Total] 36 / 94 / 2 / 132:  13%|█▎        | 133/1000 [18:03<1:57:43,  8.15s/it][Succeeded / Failed / Skipped / Total] 37 / 94 / 2 / 133:  13%|█▎        | 133/1000 [18:03<1:57:43,  8.15s/it][Succeeded / Failed / Skipped / Total] 37 / 94 / 2 / 133:  13%|█▎        | 134/1000 [18:19<1:58:28,  8.21s/it][Succeeded / Failed / Skipped / Total] 37 / 95 / 2 / 134:  13%|█▎        | 134/1000 [18:19<1:58:28,  8.21s/it][Succeeded / Failed / Skipped / Total] 37 / 95 / 2 / 134:  14%|█▎        | 135/1000 [18:30<1:58:37,  8.23s/it][Succeeded / Failed / Skipped / Total] 37 / 96 / 2 / 135:  14%|█▎        | 135/1000 [18:30<1:58:37,  8.23s/it][Succeeded / Failed / Skipped / Total] 37 / 96 / 2 / 135:  14%|█▎        | 136/1000 [18:38<1:58:28,  8.23s/it]Check if a request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[example]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[send]]" != "[[send]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Encodes the given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Generates code for the given parameters . --> Create a new Peketch --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[attributes]] , Map < String , Object > [[additionalParameters]] ) { String codeVerifier = this . [[codeVerifierGenerator]] . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[data]] , Map < String , Object > [[value]] ) { String codeVerifier = this . [[put]] . generateKey ( ) ; [[data]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[value]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[value]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[value]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 132 ---------------------------------------------
Obtains a JMono . --> Retrieves a JMonoMy --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[com]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
Creates a SecurityMethod . --> Create a new SecurityRole --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( [[invocation]] . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation [[security]] ) { MethodSecurityExpressionRoot [[result]] = new MethodSecurityExpressionRoot ( authentication ) ; [[result]] . setThis ( [[security]] . getThis ( ) ) ; [[result]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[result]] . setTrustResolver ( getTrustResolver ( ) ) ; [[result]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[result]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[result]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[type]] ( HttpServletRequest [[ial]] ) { Object [[configuration]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[configuration]] ) ; } return [[configuration]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
Gets the groups for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[length]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[format]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[length]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[length]] + " mapped to Granted Authorities: " + [[format]] ) ; } return [[format]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 136 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 97 / 2 / 136:  14%|█▎        | 136/1000 [18:38<1:58:28,  8.23s/it][Succeeded / Failed / Skipped / Total] 37 / 97 / 2 / 136:  14%|█▎        | 137/1000 [18:48<1:58:28,  8.24s/it][Succeeded / Failed / Skipped / Total] 37 / 98 / 2 / 137:  14%|█▎        | 137/1000 [18:48<1:58:28,  8.24s/it][Succeeded / Failed / Skipped / Total] 37 / 98 / 2 / 137:  14%|█▍        | 138/1000 [19:08<1:59:35,  8.32s/it][Succeeded / Failed / Skipped / Total] 38 / 98 / 2 / 138:  14%|█▍        | 138/1000 [19:08<1:59:35,  8.32s/it][Succeeded / Failed / Skipped / Total] 38 / 98 / 2 / 138:  14%|█▍        | 139/1000 [19:19<1:59:42,  8.34s/it][Succeeded / Failed / Skipped / Total] 38 / 99 / 2 / 139:  14%|█▍        | 139/1000 [19:19<1:59:42,  8.34s/it][Succeeded / Failed / Skipped / Total] 38 / 99 / 2 / 139:  14%|█▍        | 140/1000 [19:29<1:59:44,  8.35s/it][Succeeded / Failed / Skipped / Total] 38 / 100 / 2 / 140:  14%|█▍        | 140/1000 [19:29<1:59:44,  8.35s/it][Succeeded / Failed / Skipped / Total] 38 / 100 / 2 / 140:  14%|█▍        | 141/1000 [19:29<1:58:46,  8.30s/it][Succeeded / Failed / Skipped / Total] 39 / 100 / 2 / 141:  14%|█▍        | 141/1000 [19:29<1:58:46,  8.30s/it][Succeeded / Failed / Skipped / Total] 39 / 100 / 2 / 141:  14%|█▍        | 142/1000 [19:32<1:58:06,  8.26s/it]Load authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[asserted]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[asserted]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenates two byte arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int [[length]] = 0 ; for ( byte [ ] array : arrays ) { [[length]] += array . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[add]] ( byte [ ] ... arrays ) { int [[type]] = 0 ; for ( byte [ ] array : arrays ) { [[type]] += array . length ; } byte [ ] newArray = new byte [ [[type]] ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
Return a copy of this byte array . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int beginIndex , int [[endIndex]] ) { int [[length]] = [[endIndex]] - beginIndex ; byte [ ] [[subarray]] = new byte [ [[length]] ] ; System . arraycopy ( [[array]] , beginIndex , [[subarray]] , 0 , [[length]] ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[express]] ( byte [ ] [[bit]] , int beginIndex , int [[field]] ) { int [[counter]] = [[field]] - beginIndex ; byte [ ] [[bar]] = new byte [ [[counter]] ] ; System . arraycopy ( [[bit]] , beginIndex , [[bar]] , 0 , [[counter]] ) ; return [[bar]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Returns the value of a given condition . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[id]] ( Object [[string]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[string]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Returns a list of all greements . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[det]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 141 ---------------------------------------------
Returns the map of the given map . --> Returns a list of greements . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[request]] ( Map < ? , ? > [[group]] ) { Map < String , Collection < GrantedAuthority > > [[access]] = new HashMap < String , Collection < GrantedAuthority > > ( [[group]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[group]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[access]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[access]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 101 / 2 / 142:  14%|█▍        | 142/1000 [19:32<1:58:06,  8.26s/it][Succeeded / Failed / Skipped / Total] 39 / 101 / 2 / 142:  14%|█▍        | 143/1000 [19:42<1:58:03,  8.27s/it][Succeeded / Failed / Skipped / Total] 39 / 102 / 2 / 143:  14%|█▍        | 143/1000 [19:42<1:58:03,  8.27s/it][Succeeded / Failed / Skipped / Total] 39 / 102 / 2 / 143:  14%|█▍        | 144/1000 [19:44<1:57:20,  8.23s/it][Succeeded / Failed / Skipped / Total] 39 / 103 / 2 / 144:  14%|█▍        | 144/1000 [19:44<1:57:20,  8.23s/it][Succeeded / Failed / Skipped / Total] 39 / 103 / 2 / 144:  14%|█▍        | 145/1000 [19:49<1:56:56,  8.21s/it][Succeeded / Failed / Skipped / Total] 40 / 103 / 2 / 145:  14%|█▍        | 145/1000 [19:49<1:56:56,  8.21s/it][Succeeded / Failed / Skipped / Total] 40 / 103 / 2 / 145:  15%|█▍        | 146/1000 [19:57<1:56:45,  8.20s/it][Succeeded / Failed / Skipped / Total] 40 / 104 / 2 / 146:  15%|█▍        | 146/1000 [19:57<1:56:45,  8.20s/it][Succeeded / Failed / Skipped / Total] 40 / 104 / 2 / 146:  15%|█▍        | 147/1000 [20:06<1:56:41,  8.21s/it][Succeeded / Failed / Skipped / Total] 40 / 105 / 2 / 147:  15%|█▍        | 147/1000 [20:06<1:56:41,  8.21s/it][Succeeded / Failed / Skipped / Total] 40 / 105 / 2 / 147:  15%|█▍        | 148/1000 [20:16<1:56:44,  8.22s/it]Adds a value . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[relation]] ) { if ( [[relation]] == null ) { return ; } if ( [[relation]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[relation]] ) ; } else if ( [[relation]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[relation]] ) ; } else if ( [[relation]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[relation]] ) ; } else if ( [[relation]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[relation]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[relation]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Gets the shared shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[system]] > [[system]] getSharedObject ( Class < [[system]] > sharedType ) { return ( [[system]] ) this . [[be]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Get principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 145 ---------------------------------------------
Utility method for invocation a invocation . --> Start a new invocation --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[base]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[start]] ; try { [[start]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[base]] ) ; } return super . afterInvocation ( [[base]] , [[start]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Returns true if the given role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[ception]] ( String [[call]] ) { Assert . isTrue ( ! [[call]] . startsWith ( "ROLE_" ) , ( ) -> [[call]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[call]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Convert a string to a roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[term]] ) { for ( int i = 0 ; i < [[term]] . length ; i ++ ) { [[term]] [ i ] = "ROLE_" + [[term]] [ i ] ; } return [[term]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 106 / 2 / 148:  15%|█▍        | 148/1000 [20:16<1:56:44,  8.22s/it][Succeeded / Failed / Skipped / Total] 40 / 106 / 2 / 148:  15%|█▍        | 149/1000 [20:37<1:57:50,  8.31s/it][Succeeded / Failed / Skipped / Total] 40 / 107 / 2 / 149:  15%|█▍        | 149/1000 [20:37<1:57:50,  8.31s/it][Succeeded / Failed / Skipped / Total] 40 / 107 / 2 / 149:  15%|█▌        | 150/1000 [20:41<1:57:12,  8.27s/it][Succeeded / Failed / Skipped / Total] 40 / 108 / 2 / 150:  15%|█▌        | 150/1000 [20:41<1:57:12,  8.27s/it][Succeeded / Failed / Skipped / Total] 40 / 108 / 2 / 150:  15%|█▌        | 151/1000 [20:42<1:56:26,  8.23s/it][Succeeded / Failed / Skipped / Total] 40 / 109 / 2 / 151:  15%|█▌        | 151/1000 [20:42<1:56:26,  8.23s/it][Succeeded / Failed / Skipped / Total] 40 / 109 / 2 / 151:  15%|█▌        | 152/1000 [20:42<1:55:33,  8.18s/it][Succeeded / Failed / Skipped / Total] 40 / 109 / 3 / 152:  15%|█▌        | 152/1000 [20:42<1:55:33,  8.18s/it][Succeeded / Failed / Skipped / Total] 40 / 109 / 3 / 152:  15%|█▌        | 153/1000 [20:48<1:55:11,  8.16s/it][Succeeded / Failed / Skipped / Total] 41 / 109 / 3 / 153:  15%|█▌        | 153/1000 [20:48<1:55:11,  8.16s/it][Succeeded / Failed / Skipped / Total] 41 / 109 / 3 / 153:  15%|█▌        | 154/1000 [21:00<1:55:25,  8.19s/it]Build the URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[plus]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[plus]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[plus]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[plus]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[plus]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[plus]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[plus]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Process cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 150 ---------------------------------------------
Generate authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[echo]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 151 ---------------------------------------------
Resolves authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[attacker]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 152 ---------------------------------------------
Verifies a postr . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Method to get the View --> Returns a View --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[bar]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 110 / 3 / 154:  15%|█▌        | 154/1000 [21:00<1:55:25,  8.19s/it][Succeeded / Failed / Skipped / Total] 41 / 110 / 3 / 154:  16%|█▌        | 155/1000 [21:10<1:55:24,  8.19s/it][Succeeded / Failed / Skipped / Total] 42 / 110 / 3 / 155:  16%|█▌        | 155/1000 [21:10<1:55:24,  8.19s/it][Succeeded / Failed / Skipped / Total] 42 / 110 / 3 / 155:  16%|█▌        | 156/1000 [21:11<1:54:37,  8.15s/it][Succeeded / Failed / Skipped / Total] 42 / 111 / 3 / 156:  16%|█▌        | 156/1000 [21:11<1:54:37,  8.15s/it][Succeeded / Failed / Skipped / Total] 42 / 111 / 3 / 156:  16%|█▌        | 157/1000 [21:17<1:54:21,  8.14s/it][Succeeded / Failed / Skipped / Total] 43 / 111 / 3 / 157:  16%|█▌        | 157/1000 [21:17<1:54:21,  8.14s/it][Succeeded / Failed / Skipped / Total] 43 / 111 / 3 / 157:  16%|█▌        | 158/1000 [21:21<1:53:51,  8.11s/it][Succeeded / Failed / Skipped / Total] 44 / 111 / 3 / 158:  16%|█▌        | 158/1000 [21:21<1:53:51,  8.11s/it][Succeeded / Failed / Skipped / Total] 44 / 111 / 3 / 158:  16%|█▌        | 159/1000 [21:24<1:53:12,  8.08s/it][Succeeded / Failed / Skipped / Total] 44 / 112 / 3 / 159:  16%|█▌        | 159/1000 [21:24<1:53:12,  8.08s/it][Succeeded / Failed / Skipped / Total] 44 / 112 / 3 / 159:  16%|█▌        | 160/1000 [21:27<1:52:38,  8.05s/it][Succeeded / Failed / Skipped / Total] 44 / 113 / 3 / 160:  16%|█▌        | 160/1000 [21:27<1:52:38,  8.05s/it][Succeeded / Failed / Skipped / Total] 44 / 113 / 3 / 160:  16%|█▌        | 161/1000 [21:35<1:52:29,  8.04s/it]Sets the redirect redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void setExitUserUrl ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void setExitUserUrl ( String [[a]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[a]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[a]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 155 ---------------------------------------------
Parse a JWT . --> Extract a JWTwrt . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , [[jwt]] ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[end]] = parse ( token ) ; if ( [[end]] instanceof SignedJWT ) { Jwt [[front]] = createJwt ( token , [[end]] ) ; return validateJwt ( [[front]] ) ; } throw new JwtException ( "Unsupported algorithm of " + [[end]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Attempts to load username . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[userDetailsService]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[boot]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 157 ---------------------------------------------
Starts a request . --> Sets the call . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[bar]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
Returns a list of authorities . --> Returns a map of authority condition . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[collected]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 159 ---------------------------------------------
Return the expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[filter]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 160 ---------------------------------------------
Checks if the user is authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[example]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 161 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 113 / 3 / 161:  16%|█▌        | 161/1000 [21:35<1:52:29,  8.04s/it][Succeeded / Failed / Skipped / Total] 45 / 113 / 3 / 161:  16%|█▌        | 162/1000 [21:38<1:51:58,  8.02s/it][Succeeded / Failed / Skipped / Total] 46 / 113 / 3 / 162:  16%|█▌        | 162/1000 [21:38<1:51:58,  8.02s/it][Succeeded / Failed / Skipped / Total] 46 / 113 / 3 / 162:  16%|█▋        | 163/1000 [21:45<1:51:44,  8.01s/it][Succeeded / Failed / Skipped / Total] 47 / 113 / 3 / 163:  16%|█▋        | 163/1000 [21:45<1:51:44,  8.01s/it][Succeeded / Failed / Skipped / Total] 47 / 113 / 3 / 163:  16%|█▋        | 164/1000 [21:51<1:51:26,  8.00s/it][Succeeded / Failed / Skipped / Total] 48 / 113 / 3 / 164:  16%|█▋        | 164/1000 [21:51<1:51:26,  8.00s/it][Succeeded / Failed / Skipped / Total] 48 / 113 / 3 / 164:  16%|█▋        | 165/1000 [21:57<1:51:05,  7.98s/it][Succeeded / Failed / Skipped / Total] 48 / 114 / 3 / 165:  16%|█▋        | 165/1000 [21:57<1:51:05,  7.98s/it][Succeeded / Failed / Skipped / Total] 48 / 114 / 3 / 165:  17%|█▋        | 166/1000 [22:06<1:51:05,  7.99s/it][Succeeded / Failed / Skipped / Total] 48 / 115 / 3 / 166:  17%|█▋        | 166/1000 [22:06<1:51:05,  7.99s/it][Succeeded / Failed / Skipped / Total] 48 / 115 / 3 / 166:  17%|█▋        | 167/1000 [22:07<1:50:19,  7.95s/it]Delete permission . --> Delete permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[sid]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[sid]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String [[bar]] , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( [[bar]] ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 162 ---------------------------------------------
Adds a new Permission Permission . --> Create a new principal --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[create]] ( AddPermission [[label]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[create]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[create]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[create]] . getPermission ( ) ) ; try { contactManager . [[label]] ( [[create]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 163 ---------------------------------------------
Get the contact . --> region Method --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl [[acl]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[acl]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[list]] ( @ RequestParam ( "contactId" ) int [[form]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[form]] ) ) ; Acl [[user]] = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , [[user]] ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 164 ---------------------------------------------
Returns a list of attributes . --> Gets attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( name ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[n]] = null ; if ( attributes != null ) { [[n]] = attributes . get ( name ) ; } if ( [[n]] == null ) { [[n]] = Collections . emptyList ( ) ; } return [[n]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 165 ---------------------------------------------
Create a new resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[system]] ) { InMemoryResource resource = new InMemoryResource ( [[system]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 166 ---------------------------------------------
Returns the default prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[roles]] ) { if ( [[roles]] == null ) { return [[roles]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[roles]] ; } if ( [[roles]] . startsWith ( defaultRolePrefix ) ) { return [[roles]] ; } return defaultRolePrefix + [[roles]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
[Succeeded / Failed / Skipped / Total] 49 / 115 / 3 / 167:  17%|█▋        | 167/1000 [22:07<1:50:19,  7.95s/it][Succeeded / Failed / Skipped / Total] 49 / 115 / 3 / 167:  17%|█▋        | 168/1000 [22:09<1:49:46,  7.92s/it][Succeeded / Failed / Skipped / Total] 50 / 115 / 3 / 168:  17%|█▋        | 168/1000 [22:09<1:49:46,  7.92s/it][Succeeded / Failed / Skipped / Total] 50 / 115 / 3 / 168:  17%|█▋        | 169/1000 [22:14<1:49:23,  7.90s/it][Succeeded / Failed / Skipped / Total] 50 / 116 / 3 / 169:  17%|█▋        | 169/1000 [22:14<1:49:23,  7.90s/it][Succeeded / Failed / Skipped / Total] 50 / 116 / 3 / 169:  17%|█▋        | 170/1000 [22:31<1:49:58,  7.95s/it][Succeeded / Failed / Skipped / Total] 50 / 117 / 3 / 170:  17%|█▋        | 170/1000 [22:31<1:49:58,  7.95s/it][Succeeded / Failed / Skipped / Total] 50 / 117 / 3 / 170:  17%|█▋        | 171/1000 [22:37<1:49:39,  7.94s/it][Succeeded / Failed / Skipped / Total] 50 / 118 / 3 / 171:  17%|█▋        | 171/1000 [22:37<1:49:39,  7.94s/it][Succeeded / Failed / Skipped / Total] 50 / 118 / 3 / 171:  17%|█▋        | 172/1000 [22:38<1:48:58,  7.90s/it][Succeeded / Failed / Skipped / Total] 50 / 119 / 3 / 172:  17%|█▋        | 172/1000 [22:38<1:48:58,  7.90s/it][Succeeded / Failed / Skipped / Total] 50 / 119 / 3 / 172:  17%|█▋        | 173/1000 [23:02<1:50:06,  7.99s/it][Succeeded / Failed / Skipped / Total] 51 / 119 / 3 / 173:  17%|█▋        | 173/1000 [23:02<1:50:06,  7.99s/it][Succeeded / Failed / Skipped / Total] 51 / 119 / 3 / 173:  17%|█▋        | 174/1000 [23:02<1:49:24,  7.95s/it]--------------------------------------------- Result 167 ---------------------------------------------
Convert a byte array to a byte array . --> Encode a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[data]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[data]] , 0 , bytes . limit ( ) ) ; return [[data]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 168 ---------------------------------------------
Get the value of a given attribute . --> Get category attributes . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[name]] ( String [[category]] ) { List < String > [[object]] = getAttributeValues ( [[category]] ) ; if ( [[object]] . isEmpty ( ) ) { return null ; } else { return [[object]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 169 ---------------------------------------------
Adds a new Permissionsuitable . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[name]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 170 ---------------------------------------------
Decodes a Base64 encoded string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[retrieve]] ( byte [ ] [[p]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[p]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 171 ---------------------------------------------
Finds a collection of class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method method , Class < ? > [[command]] ) { if ( [[command]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[command]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Create a new form . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult [[result]] ) { validator . validate ( form , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[host]] ( WebContact form , BindingResult [[command]] ) { validator . validate ( form , [[command]] ) ; if ( [[command]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Returns true if the given string is a valid name . --> Adds a string to a command --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[add]] ( String [[key]] , String [[command]] ) { return ( [[command]] . endsWith ( "*" ) && [[key]] . startsWith ( [[command]] . substring ( 0 , [[command]] . length ( ) - 1 ) ) ) || ( [[command]] . startsWith ( "*" ) && [[key]] . endsWith ( [[command]] . substring ( 1 , [[command]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 174 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 120 / 3 / 174:  17%|█▋        | 174/1000 [23:02<1:49:24,  7.95s/it][Succeeded / Failed / Skipped / Total] 51 / 120 / 3 / 174:  18%|█▊        | 175/1000 [23:11<1:49:22,  7.95s/it][Succeeded / Failed / Skipped / Total] 51 / 121 / 3 / 175:  18%|█▊        | 175/1000 [23:11<1:49:22,  7.95s/it][Succeeded / Failed / Skipped / Total] 51 / 121 / 3 / 175:  18%|█▊        | 176/1000 [23:18<1:49:06,  7.94s/it][Succeeded / Failed / Skipped / Total] 51 / 122 / 3 / 176:  18%|█▊        | 176/1000 [23:18<1:49:06,  7.94s/it][Succeeded / Failed / Skipped / Total] 51 / 122 / 3 / 176:  18%|█▊        | 177/1000 [23:24<1:48:50,  7.93s/it][Succeeded / Failed / Skipped / Total] 52 / 122 / 3 / 177:  18%|█▊        | 177/1000 [23:24<1:48:50,  7.93s/it][Succeeded / Failed / Skipped / Total] 52 / 122 / 3 / 177:  18%|█▊        | 178/1000 [23:30<1:48:33,  7.92s/it][Succeeded / Failed / Skipped / Total] 52 / 123 / 3 / 178:  18%|█▊        | 178/1000 [23:30<1:48:33,  7.92s/it][Succeeded / Failed / Skipped / Total] 52 / 123 / 3 / 178:  18%|█▊        | 179/1000 [23:46<1:49:00,  7.97s/it][Succeeded / Failed / Skipped / Total] 52 / 124 / 3 / 179:  18%|█▊        | 179/1000 [23:46<1:49:00,  7.97s/it][Succeeded / Failed / Skipped / Total] 52 / 124 / 3 / 179:  18%|█▊        | 180/1000 [23:46<1:48:17,  7.92s/it][Succeeded / Failed / Skipped / Total] 52 / 125 / 3 / 180:  18%|█▊        | 180/1000 [23:46<1:48:17,  7.92s/it][Succeeded / Failed / Skipped / Total] 52 / 125 / 3 / 180:  18%|█▊        | 181/1000 [23:52<1:48:03,  7.92s/it]Returns a list of all attributes contained in this configuration . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[classes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Adds a configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[loaded]] , List < ConfigAttribute > [[header]] ) { Assert . notNull ( [[loaded]] , "RegisteredMethod required" ) ; Assert . notNull ( [[header]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[loaded]] + "] with attributes [" + [[header]] + "]" ) ; } this . methodMap . put ( [[loaded]] , [[header]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 176 ---------------------------------------------
Finds a parameterized name . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[paramNames]] [ i ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[foo]] = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[foo]] [ i ] = parameterName ; } } return found ? [[foo]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 177 ---------------------------------------------
Handle a Throwable . --> Handle callback --> Socre: 1.0

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[handler]] , String username , Throwable [[pointer]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[handler]] + ": " + [[pointer]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[push]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
Clear the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[ask]] ( HttpServletRequest request ) { HttpSession [[command]] = request . getSession ( "[[list]]" != "[[list]]" ) ; if ( [[command]] == null ) { return ; } [[command]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
Gets the field . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[access]] ( Class < ? > clazz , String [[invalid]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[invalid]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[invalid]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 181 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 125 / 3 / 181:  18%|█▊        | 181/1000 [23:52<1:48:03,  7.92s/it][Succeeded / Failed / Skipped / Total] 53 / 125 / 3 / 181:  18%|█▊        | 182/1000 [23:53<1:47:21,  7.87s/it][Succeeded / Failed / Skipped / Total] 54 / 125 / 3 / 182:  18%|█▊        | 182/1000 [23:53<1:47:21,  7.87s/it][Succeeded / Failed / Skipped / Total] 54 / 125 / 3 / 182:  18%|█▊        | 183/1000 [24:01<1:47:16,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 125 / 3 / 183:  18%|█▊        | 183/1000 [24:01<1:47:16,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 125 / 3 / 183:  18%|█▊        | 184/1000 [24:10<1:47:13,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 126 / 3 / 184:  18%|█▊        | 184/1000 [24:10<1:47:13,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 126 / 3 / 184:  18%|█▊        | 185/1000 [24:19<1:47:09,  7.89s/it][Succeeded / Failed / Skipped / Total] 55 / 127 / 3 / 185:  18%|█▊        | 185/1000 [24:19<1:47:09,  7.89s/it][Succeeded / Failed / Skipped / Total] 55 / 127 / 3 / 185:  19%|█▊        | 186/1000 [24:25<1:46:54,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 128 / 3 / 186:  19%|█▊        | 186/1000 [24:25<1:46:54,  7.88s/it][Succeeded / Failed / Skipped / Total] 55 / 128 / 3 / 186:  19%|█▊        | 187/1000 [24:28<1:46:24,  7.85s/it][Succeeded / Failed / Skipped / Total] 55 / 129 / 3 / 187:  19%|█▊        | 187/1000 [24:28<1:46:24,  7.85s/it][Succeeded / Failed / Skipped / Total] 55 / 129 / 3 / 187:  19%|█▉        | 188/1000 [24:53<1:47:29,  7.94s/it]Create a new URL . --> Get HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[status]] ( final HttpServletRequest [[ions]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Create a new URL --> Create a new redirect --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[[date]]" != "[[date]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Validates the given filters . --> Verifies that a given index is valid . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[index]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[index]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[index]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[index]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[index]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[index]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[index]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[index]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[index]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Extracts a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[stop]] = encPass . lastIndexOf ( ' ' ) ; if ( [[stop]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[stop]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 185 ---------------------------------------------
Returns a random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[relation]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[relation]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 186 ---------------------------------------------
Gets a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[foo]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[a]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
Sends a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[authentication]] ( HttpServletRequest [[id]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 129 / 3 / 188:  19%|█▉        | 188/1000 [24:53<1:47:29,  7.94s/it][Succeeded / Failed / Skipped / Total] 56 / 129 / 3 / 188:  19%|█▉        | 189/1000 [24:58<1:47:11,  7.93s/it][Succeeded / Failed / Skipped / Total] 56 / 130 / 3 / 189:  19%|█▉        | 189/1000 [24:58<1:47:11,  7.93s/it][Succeeded / Failed / Skipped / Total] 56 / 130 / 3 / 189:  19%|█▉        | 190/1000 [25:12<1:47:27,  7.96s/it][Succeeded / Failed / Skipped / Total] 57 / 130 / 3 / 190:  19%|█▉        | 190/1000 [25:12<1:47:27,  7.96s/it][Succeeded / Failed / Skipped / Total] 57 / 130 / 3 / 190:  19%|█▉        | 191/1000 [25:13<1:46:51,  7.93s/it][Succeeded / Failed / Skipped / Total] 57 / 131 / 3 / 191:  19%|█▉        | 191/1000 [25:13<1:46:51,  7.93s/it][Succeeded / Failed / Skipped / Total] 57 / 131 / 3 / 191:  19%|█▉        | 192/1000 [25:26<1:47:02,  7.95s/it][Succeeded / Failed / Skipped / Total] 58 / 131 / 3 / 192:  19%|█▉        | 192/1000 [25:26<1:47:02,  7.95s/it][Succeeded / Failed / Skipped / Total] 58 / 131 / 3 / 192:  19%|█▉        | 193/1000 [25:27<1:46:26,  7.91s/it][Succeeded / Failed / Skipped / Total] 58 / 132 / 3 / 193:  19%|█▉        | 193/1000 [25:27<1:46:26,  7.91s/it][Succeeded / Failed / Skipped / Total] 58 / 132 / 3 / 193:  19%|█▉        | 194/1000 [25:43<1:46:53,  7.96s/it][Succeeded / Failed / Skipped / Total] 58 / 133 / 3 / 194:  19%|█▉        | 194/1000 [25:43<1:46:53,  7.96s/it][Succeeded / Failed / Skipped / Total] 58 / 133 / 3 / 194:  20%|█▉        | 195/1000 [25:46<1:46:24,  7.93s/it]Returns the authorities . --> Returns the authorities for the given authority --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { [[set]] . add ( authority . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[command]] ) { Assert . notNull ( [[command]] , "userAuthorities cannot be null" ) ; Set < String > [[data]] = new HashSet <> ( [[command]] . size ( ) ) ; for ( GrantedAuthority authority : [[command]] ) { [[data]] . add ( authority . getAuthority ( ) ) ; } return [[data]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 189 ---------------------------------------------
Extracts the extractor from the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[example]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( [[example]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[example]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 190 ---------------------------------------------
Compares two byte arrays . --> Return true if the number of bytes are equal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[False]]" != "[[False]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[id]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "[[input]]" != "[[input]]" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 191 ---------------------------------------------
Set the default URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDefaultFailureUrl ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void setDefaultFailureUrl ( String [[id]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[id]] ) , ( ) -> "'" + [[id]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[id]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Builds a url . --> Build a servlet --> Socre: 1.0

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String [[requestURI]] , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( [[requestURI]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String [[index]] , String contextPath , String pathInfo , String queryString ) { StringBuilder [[z]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[z]] . append ( servletPath ) ; if ( pathInfo != null ) { [[z]] . append ( pathInfo ) ; } } else { [[z]] . append ( [[index]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[z]] . append ( "?" ) . append ( queryString ) ; } return [[z]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 193 ---------------------------------------------
Resolves a resolve . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[foo]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Replies if the given URL matches the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[filter]] ( String [[pointer]] ) { if ( [[pointer]] == null ) { return "False" != "False" ; } final Pattern [[set]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[set]] . matcher ( [[pointer]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 195 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 133 / 3 / 195:  20%|█▉        | 195/1000 [25:46<1:46:24,  7.93s/it][Succeeded / Failed / Skipped / Total] 59 / 133 / 3 / 195:  20%|█▉        | 196/1000 [25:49<1:45:54,  7.90s/it][Succeeded / Failed / Skipped / Total] 59 / 134 / 3 / 196:  20%|█▉        | 196/1000 [25:49<1:45:54,  7.90s/it][Succeeded / Failed / Skipped / Total] 59 / 134 / 3 / 196:  20%|█▉        | 197/1000 [25:53<1:45:32,  7.89s/it][Succeeded / Failed / Skipped / Total] 59 / 135 / 3 / 197:  20%|█▉        | 197/1000 [25:53<1:45:32,  7.89s/it][Succeeded / Failed / Skipped / Total] 59 / 135 / 3 / 197:  20%|█▉        | 198/1000 [26:28<1:47:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 59 / 136 / 3 / 198:  20%|█▉        | 198/1000 [26:28<1:47:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 59 / 136 / 3 / 198:  20%|█▉        | 199/1000 [26:30<1:46:40,  7.99s/it]Converts a Set to a string . --> Convert a Set to a set --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[oracle]] ( Serializable [[alice]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[alice]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[alice]] = convertFromStringTo ( ( String ) [[alice]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 196 ---------------------------------------------
Creates a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[name]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[include]] : idToAttributes . entrySet ( ) ) { if ( [[include]] . getKey ( ) . matcher ( [[name]] ) . matches ( ) ) { return [[include]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[list]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[list]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[list]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 198 ---------------------------------------------
Insert batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 137 / 3 / 199:  20%|█▉        | 199/1000 [26:30<1:46:40,  7.99s/it][Succeeded / Failed / Skipped / Total] 59 / 137 / 3 / 199:  20%|██        | 200/1000 [26:30<1:46:00,  7.95s/it][Succeeded / Failed / Skipped / Total] 59 / 137 / 4 / 200:  20%|██        | 200/1000 [26:30<1:46:00,  7.95s/it][Succeeded / Failed / Skipped / Total] 59 / 137 / 4 / 200:  20%|██        | 201/1000 [26:46<1:46:27,  7.99s/it][Succeeded / Failed / Skipped / Total] 59 / 138 / 4 / 201:  20%|██        | 201/1000 [26:46<1:46:27,  7.99s/it][Succeeded / Failed / Skipped / Total] 59 / 138 / 4 / 201:  20%|██        | 202/1000 [26:55<1:46:22,  8.00s/it][Succeeded / Failed / Skipped / Total] 59 / 139 / 4 / 202:  20%|██        | 202/1000 [26:55<1:46:22,  8.00s/it][Succeeded / Failed / Skipped / Total] 59 / 139 / 4 / 202:  20%|██        | 203/1000 [27:00<1:46:00,  7.98s/it][Succeeded / Failed / Skipped / Total] 59 / 140 / 4 / 203:  20%|██        | 203/1000 [27:00<1:46:00,  7.98s/it][Succeeded / Failed / Skipped / Total] 59 / 140 / 4 / 203:  20%|██        | 204/1000 [27:10<1:46:02,  7.99s/it][Succeeded / Failed / Skipped / Total] 59 / 141 / 4 / 204:  20%|██        | 204/1000 [27:10<1:46:02,  7.99s/it][Succeeded / Failed / Skipped / Total] 59 / 141 / 4 / 204:  20%|██        | 205/1000 [27:11<1:45:25,  7.96s/it][Succeeded / Failed / Skipped / Total] 59 / 142 / 4 / 205:  20%|██        | 205/1000 [27:11<1:45:25,  7.96s/it][Succeeded / Failed / Skipped / Total] 59 / 142 / 4 / 205:  21%|██        | 206/1000 [27:18<1:45:14,  7.95s/it][Succeeded / Failed / Skipped / Total] 60 / 142 / 4 / 206:  21%|██        | 206/1000 [27:18<1:45:14,  7.95s/it][Succeeded / Failed / Skipped / Total] 60 / 142 / 4 / 206:  21%|██        | 207/1000 [27:20<1:44:46,  7.93s/it]Create a new UserObject . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[port]] ( ObjectIdentity object , Sid [[ida]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[ida]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 200 ---------------------------------------------
Sets the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Updates the given object . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[ownerSid]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[attribute]] = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , [[attribute]] , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 202 ---------------------------------------------
Encrypt a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[a]] ( CharSequence [[s]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[s]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[False]]" != "[[False]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[id]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[test]]" != "[[test]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 204 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Load a list of servers . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[date]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[date]] . length ) ; for ( String pattern : [[date]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 206 ---------------------------------------------
Gets the HTTP POST request . --> Handle a authentication request . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[a]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[a]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
[Succeeded / Failed / Skipped / Total] 60 / 143 / 4 / 207:  21%|██        | 207/1000 [27:20<1:44:46,  7.93s/it][Succeeded / Failed / Skipped / Total] 60 / 143 / 4 / 207:  21%|██        | 208/1000 [27:30<1:44:45,  7.94s/it][Succeeded / Failed / Skipped / Total] 61 / 143 / 4 / 208:  21%|██        | 208/1000 [27:30<1:44:45,  7.94s/it][Succeeded / Failed / Skipped / Total] 61 / 143 / 4 / 208:  21%|██        | 209/1000 [27:34<1:44:21,  7.92s/it][Succeeded / Failed / Skipped / Total] 61 / 144 / 4 / 209:  21%|██        | 209/1000 [27:34<1:44:21,  7.92s/it][Succeeded / Failed / Skipped / Total] 61 / 144 / 4 / 209:  21%|██        | 210/1000 [27:40<1:44:06,  7.91s/it][Succeeded / Failed / Skipped / Total] 61 / 145 / 4 / 210:  21%|██        | 210/1000 [27:40<1:44:06,  7.91s/it][Succeeded / Failed / Skipped / Total] 61 / 145 / 4 / 210:  21%|██        | 211/1000 [27:42<1:43:35,  7.88s/it][Succeeded / Failed / Skipped / Total] 62 / 145 / 4 / 211:  21%|██        | 211/1000 [27:42<1:43:35,  7.88s/it][Succeeded / Failed / Skipped / Total] 62 / 145 / 4 / 211:  21%|██        | 212/1000 [27:50<1:43:30,  7.88s/it][Succeeded / Failed / Skipped / Total] 62 / 146 / 4 / 212:  21%|██        | 212/1000 [27:50<1:43:30,  7.88s/it][Succeeded / Failed / Skipped / Total] 62 / 146 / 4 / 212:  21%|██▏       | 213/1000 [27:51<1:42:55,  7.85s/it]--------------------------------------------- Result 207 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[string]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[string]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 208 ---------------------------------------------
Get a row in the database . --> Gets the partition ID . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rs]] , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( [[rs]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[b]] , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( [[b]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
Get the HttpServlet request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[command]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
Sets the target url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[claim]] ( String [[alias]] ) { if ( [[alias]] != null ) { Assert . hasText ( [[alias]] , "targetUrlParameter cannot be empty" ) ; } this . [[id]] = [[alias]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 211 ---------------------------------------------
Add a new shared DNS . --> Create a new Distributed --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[begin]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[begin]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 212 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[allowFromStrategy]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[before]] ( HttpServletRequest request , HttpServletResponse [[handle]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[accept]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[handle]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[handle]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[handle]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[handle]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[handle]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 213 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 146 / 4 / 213:  21%|██▏       | 213/1000 [27:51<1:42:55,  7.85s/it][Succeeded / Failed / Skipped / Total] 63 / 146 / 4 / 213:  21%|██▏       | 214/1000 [27:58<1:42:45,  7.84s/it][Succeeded / Failed / Skipped / Total] 63 / 147 / 4 / 214:  21%|██▏       | 214/1000 [27:58<1:42:45,  7.84s/it][Succeeded / Failed / Skipped / Total] 63 / 147 / 4 / 214:  22%|██▏       | 215/1000 [28:20<1:43:27,  7.91s/it][Succeeded / Failed / Skipped / Total] 64 / 147 / 4 / 215:  22%|██▏       | 215/1000 [28:20<1:43:27,  7.91s/it][Succeeded / Failed / Skipped / Total] 64 / 147 / 4 / 215:  22%|██▏       | 216/1000 [28:23<1:43:04,  7.89s/it][Succeeded / Failed / Skipped / Total] 64 / 148 / 4 / 216:  22%|██▏       | 216/1000 [28:23<1:43:04,  7.89s/it][Succeeded / Failed / Skipped / Total] 64 / 148 / 4 / 216:  22%|██▏       | 217/1000 [28:28<1:42:43,  7.87s/it][Succeeded / Failed / Skipped / Total] 65 / 148 / 4 / 217:  22%|██▏       | 217/1000 [28:28<1:42:43,  7.87s/it][Succeeded / Failed / Skipped / Total] 65 / 148 / 4 / 217:  22%|██▏       | 218/1000 [28:39<1:42:48,  7.89s/it][Succeeded / Failed / Skipped / Total] 65 / 149 / 4 / 218:  22%|██▏       | 218/1000 [28:39<1:42:48,  7.89s/it][Succeeded / Failed / Skipped / Total] 65 / 149 / 4 / 218:  22%|██▏       | 219/1000 [28:40<1:42:17,  7.86s/it][Succeeded / Failed / Skipped / Total] 66 / 149 / 4 / 219:  22%|██▏       | 219/1000 [28:40<1:42:17,  7.86s/it][Succeeded / Failed / Skipped / Total] 66 / 149 / 4 / 219:  22%|██▏       | 220/1000 [28:47<1:42:03,  7.85s/it]Creates a new shared shared object . --> Generates a new logged . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[client]] ( ) { Map < Class < ? extends Object > , Object > [[a]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[a]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[a]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[a]] . put ( ApplicationContext . class , context ) ; [[a]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[a]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[a]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 214 ---------------------------------------------
Format a date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[after]] ( ) { long [[dates]] = System . currentTimeMillis ( ) ; if ( ( [[dates]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[dates]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[dates]] ; currentDate = format . format ( new Date ( [[dates]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
Change authentication request . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[ask]] ( HttpServletRequest [[task]] , UsernamePasswordAuthenticationToken [[task]] ) { [[task]] . setDetails ( authenticationDetailsSource . buildDetails ( [[task]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 216 ---------------------------------------------
Clears the cache . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[merge]] ( HashMap [[bit]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[bit]] . size ( ) > 1000 ) { [[bit]] . clear ( ) ; } [[bit]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 217 ---------------------------------------------
Parses a date . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[period]] ( String value , DateFormat [ ] formats ) { Date [[null]] = null ; for ( int [[c]] = 0 ; ( [[null]] == null ) && ( [[c]] < formats . length ) ; [[c]] ++ ) { try { [[null]] = formats [ [[c]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[null]] == null ) { return null ; } return new Long ( [[null]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 218 ---------------------------------------------
Configures a login . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[prefix]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[prefix]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[prefix]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[unknown]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[unknown]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[unknown]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 219 ---------------------------------------------
Gets the application context . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[command]] ) { Context [[type]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 150 / 4 / 220:  22%|██▏       | 220/1000 [28:47<1:42:03,  7.85s/it][Succeeded / Failed / Skipped / Total] 66 / 150 / 4 / 220:  22%|██▏       | 221/1000 [29:10<1:42:51,  7.92s/it][Succeeded / Failed / Skipped / Total] 66 / 151 / 4 / 221:  22%|██▏       | 221/1000 [29:10<1:42:51,  7.92s/it][Succeeded / Failed / Skipped / Total] 66 / 151 / 4 / 221:  22%|██▏       | 222/1000 [29:21<1:42:52,  7.93s/it][Succeeded / Failed / Skipped / Total] 66 / 152 / 4 / 222:  22%|██▏       | 222/1000 [29:21<1:42:52,  7.93s/it][Succeeded / Failed / Skipped / Total] 66 / 152 / 4 / 222:  22%|██▏       | 223/1000 [29:23<1:42:23,  7.91s/it][Succeeded / Failed / Skipped / Total] 66 / 153 / 4 / 223:  22%|██▏       | 223/1000 [29:23<1:42:23,  7.91s/it][Succeeded / Failed / Skipped / Total] 66 / 153 / 4 / 223:  22%|██▏       | 224/1000 [29:25<1:41:55,  7.88s/it][Succeeded / Failed / Skipped / Total] 66 / 154 / 4 / 224:  22%|██▏       | 224/1000 [29:25<1:41:55,  7.88s/it][Succeeded / Failed / Skipped / Total] 66 / 154 / 4 / 224:  22%|██▎       | 225/1000 [29:30<1:41:37,  7.87s/it][Succeeded / Failed / Skipped / Total] 67 / 154 / 4 / 225:  22%|██▎       | 225/1000 [29:30<1:41:37,  7.87s/it][Succeeded / Failed / Skipped / Total] 67 / 154 / 4 / 225:  23%|██▎       | 226/1000 [29:35<1:41:21,  7.86s/it][Succeeded / Failed / Skipped / Total] 67 / 155 / 4 / 226:  23%|██▎       | 226/1000 [29:35<1:41:21,  7.86s/it][Succeeded / Failed / Skipped / Total] 67 / 155 / 4 / 226:  23%|██▎       | 227/1000 [29:42<1:41:10,  7.85s/it][Succeeded / Failed / Skipped / Total] 67 / 156 / 4 / 227:  23%|██▎       | 227/1000 [29:42<1:41:10,  7.85s/it][Succeeded / Failed / Skipped / Total] 67 / 156 / 4 / 227:  23%|██▎       | 228/1000 [29:45<1:40:45,  7.83s/it]Get the security subject for the given subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[execute]] ( final Subject [[line]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[line]] ) ; } String userSecurityName = null ; if ( [[line]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
Return a list of followed by name . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[begin]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[begin]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Sets the storage . --> [[[FAILED]]]

[[[[Adv]]]]: private void copyDetails ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) [[dest]] ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void copyDetails ( Authentication source , Authentication [[condition]] ) { if ( ( [[condition]] instanceof AbstractAuthenticationToken ) && ( [[condition]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[source]] = ( AbstractAuthenticationToken ) [[condition]] ; [[source]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 223 ---------------------------------------------
Revokes a session . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 224 ---------------------------------------------
Change password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[announce]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 225 ---------------------------------------------
Returns a list of all filters . --> Get a list of URLs that match the given filter --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[on]] ( String url ) { return [[on]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 226 ---------------------------------------------
Gets the chains . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[rant]] ) { for ( SecurityFilterChain [[support]] : filterChains ) { if ( [[support]] . matches ( [[rant]] ) ) { return [[support]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the web page . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[client]] ) { ServletContext servletContext = [[client]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 156 / 4 / 228:  23%|██▎       | 228/1000 [29:45<1:40:45,  7.83s/it][Succeeded / Failed / Skipped / Total] 68 / 156 / 4 / 228:  23%|██▎       | 229/1000 [29:57<1:40:51,  7.85s/it][Succeeded / Failed / Skipped / Total] 69 / 156 / 4 / 229:  23%|██▎       | 229/1000 [29:57<1:40:51,  7.85s/it][Succeeded / Failed / Skipped / Total] 69 / 156 / 4 / 229:  23%|██▎       | 230/1000 [29:58<1:40:21,  7.82s/it][Succeeded / Failed / Skipped / Total] 69 / 157 / 4 / 230:  23%|██▎       | 230/1000 [29:58<1:40:21,  7.82s/it][Succeeded / Failed / Skipped / Total] 69 / 157 / 4 / 230:  23%|██▎       | 231/1000 [30:08<1:40:19,  7.83s/it][Succeeded / Failed / Skipped / Total] 69 / 158 / 4 / 231:  23%|██▎       | 231/1000 [30:08<1:40:19,  7.83s/it][Succeeded / Failed / Skipped / Total] 69 / 158 / 4 / 231:  23%|██▎       | 232/1000 [30:26<1:40:44,  7.87s/it][Succeeded / Failed / Skipped / Total] 69 / 159 / 4 / 232:  23%|██▎       | 232/1000 [30:26<1:40:44,  7.87s/it][Succeeded / Failed / Skipped / Total] 69 / 159 / 4 / 232:  23%|██▎       | 233/1000 [30:34<1:40:40,  7.88s/it][Succeeded / Failed / Skipped / Total] 69 / 160 / 4 / 233:  23%|██▎       | 233/1000 [30:34<1:40:40,  7.88s/it][Succeeded / Failed / Skipped / Total] 69 / 160 / 4 / 233:  23%|██▎       | 234/1000 [30:36<1:40:11,  7.85s/it][Succeeded / Failed / Skipped / Total] 70 / 160 / 4 / 234:  23%|██▎       | 234/1000 [30:36<1:40:11,  7.85s/it][Succeeded / Failed / Skipped / Total] 70 / 160 / 4 / 234:  24%|██▎       | 235/1000 [30:45<1:40:08,  7.85s/it][Succeeded / Failed / Skipped / Total] 71 / 160 / 4 / 235:  24%|██▎       | 235/1000 [30:45<1:40:08,  7.85s/it][Succeeded / Failed / Skipped / Total] 71 / 160 / 4 / 235:  24%|██▎       | 236/1000 [30:47<1:39:40,  7.83s/it]Sets the predouitable for the given auth . --> Create a new authAuthenticator --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[client]] = new PreemptiveBasicAuthScheme ( ) ; [[client]] . setUserName ( userName ) ; [[client]] . setPassword ( password ) ; return [[client]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 229 ---------------------------------------------
Update trust attributes . --> Update a MBean --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[format]] ( Map < String , Object > [[object]] ) { notNull ( [[object]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[object]] , this . [[change]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Adds a list of filters to the list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[echo]] ( List < Filter > [[command]] ) { Validate . notNull ( [[echo]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[echo]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Adds the given filters to the filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter [[base]] , Filter ... additionalFilters ) { Validate . notNull ( [[base]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[base]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Returns the dandaemong the given dnName . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( [[baseDn]] ) ) { return [[dn]] ; } [[baseDn]] . append ( [[dn]] ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[r]] , Context [[domain]] ) throws NamingException { DistinguishedName [[m]] = new DistinguishedName ( [[domain]] . getNameInNamespace ( ) ) ; if ( [[r]] . contains ( [[m]] ) ) { return [[r]] ; } [[m]] . append ( [[r]] ) ; return [[m]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 233 ---------------------------------------------
Create a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[library]] ( String userName , String [[authorization]] ) { final BasicAuthScheme [[source]] = new BasicAuthScheme ( ) ; [[source]] . setUserName ( userName ) ; [[source]] . setPassword ( [[authorization]] ) ; return [[source]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
Make sure that the URI is valid . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[test]] ) { if ( [[test]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[test]] . getHost ( ) , [[test]] . getPort ( ) , [[test]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Creates a ConfigConfig object . --> Helper method to create a new ConfigConfigConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[add]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
[Succeeded / Failed / Skipped / Total] 71 / 161 / 4 / 236:  24%|██▎       | 236/1000 [30:47<1:39:40,  7.83s/it][Succeeded / Failed / Skipped / Total] 71 / 161 / 4 / 236:  24%|██▎       | 237/1000 [30:47<1:39:07,  7.80s/it][Succeeded / Failed / Skipped / Total] 72 / 161 / 4 / 237:  24%|██▎       | 237/1000 [30:47<1:39:07,  7.80s/it][Succeeded / Failed / Skipped / Total] 72 / 161 / 4 / 237:  24%|██▍       | 238/1000 [30:52<1:38:50,  7.78s/it][Succeeded / Failed / Skipped / Total] 72 / 162 / 4 / 238:  24%|██▍       | 238/1000 [30:52<1:38:50,  7.78s/it][Succeeded / Failed / Skipped / Total] 72 / 162 / 4 / 238:  24%|██▍       | 239/1000 [30:55<1:38:29,  7.77s/it][Succeeded / Failed / Skipped / Total] 73 / 162 / 4 / 239:  24%|██▍       | 239/1000 [30:55<1:38:29,  7.77s/it][Succeeded / Failed / Skipped / Total] 73 / 162 / 4 / 239:  24%|██▍       | 240/1000 [31:00<1:38:10,  7.75s/it][Succeeded / Failed / Skipped / Total] 74 / 162 / 4 / 240:  24%|██▍       | 240/1000 [31:00<1:38:10,  7.75s/it][Succeeded / Failed / Skipped / Total] 74 / 162 / 4 / 240:  24%|██▍       | 241/1000 [31:04<1:37:51,  7.74s/it]--------------------------------------------- Result 236 ---------------------------------------------
Sets the scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[array]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 237 ---------------------------------------------
Construct a response from a response . --> Populates a string . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[headers]] = responseOptions . headers ( ) ; if ( [[headers]] . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( [[headers]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[list]] = responseOptions . headers ( ) ; if ( [[list]] . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( [[list]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 238 ---------------------------------------------
Sets the scheme for the given scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String [[keys]] ) { final NTLMAuthScheme [[end]] = new NTLMAuthScheme ( ) ; [[end]] . setUserName ( userName ) ; [[end]] . setPassword ( password ) ; [[end]] . setWorkstation ( workstation ) ; [[end]] . setDomain ( [[keys]] ) ; return [[end]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 239 ---------------------------------------------
Replies the default Zon config . --> Factory method to create a new JacksonFactory instance --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[f]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Build a ConfigConfig instance . --> Factory method to create a MurServiceConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[at]] ( LogConfig logConfig ) { notNull ( [[at]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[at]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 162 / 4 / 241:  24%|██▍       | 241/1000 [31:04<1:37:51,  7.74s/it][Succeeded / Failed / Skipped / Total] 75 / 162 / 4 / 241:  24%|██▍       | 242/1000 [31:16<1:37:57,  7.75s/it][Succeeded / Failed / Skipped / Total] 75 / 163 / 4 / 242:  24%|██▍       | 242/1000 [31:16<1:37:57,  7.75s/it][Succeeded / Failed / Skipped / Total] 75 / 163 / 4 / 242:  24%|██▍       | 243/1000 [31:17<1:37:27,  7.72s/it][Succeeded / Failed / Skipped / Total] 75 / 164 / 4 / 243:  24%|██▍       | 243/1000 [31:17<1:37:27,  7.72s/it][Succeeded / Failed / Skipped / Total] 75 / 164 / 4 / 243:  24%|██▍       | 244/1000 [31:17<1:36:57,  7.69s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 4 / 244:  24%|██▍       | 244/1000 [31:17<1:36:57,  7.69s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 4 / 244:  24%|██▍       | 245/1000 [31:17<1:36:26,  7.66s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 5 / 245:  24%|██▍       | 245/1000 [31:17<1:36:26,  7.66s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 5 / 245:  25%|██▍       | 246/1000 [31:17<1:35:55,  7.63s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 6 / 246:  25%|██▍       | 246/1000 [31:17<1:35:55,  7.63s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 6 / 246:  25%|██▍       | 247/1000 [31:18<1:35:25,  7.60s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 7 / 247:  25%|██▍       | 247/1000 [31:18<1:35:25,  7.60s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 7 / 247:  25%|██▍       | 248/1000 [31:18<1:34:55,  7.57s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 8 / 248:  25%|██▍       | 248/1000 [31:18<1:34:55,  7.57s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 8 / 248:  25%|██▍       | 249/1000 [31:18<1:34:25,  7.54s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 9 / 249:  25%|██▍       | 249/1000 [31:18<1:34:25,  7.54s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 9 / 249:  25%|██▌       | 250/1000 [31:18<1:33:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 10 / 250:  25%|██▌       | 250/1000 [31:18<1:33:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 76 / 164 / 10 / 250:  25%|██▌       | 251/1000 [31:21<1:33:34,  7.50s/it]Create a ConfigConfigConfigConfigConfig instance . --> Initialize ConfigConfigConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[file]] ( SessionConfig sessionConfig ) { notNull ( [[file]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[file]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the default charset . --> [[[FAILED]]]

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[procedure]] ( String [[true]] ) { return new EncoderConfig ( defaultContentCharset , [[true]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[match]]" == "[[match]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 243 ---------------------------------------------
Creates a Factory instance . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[using]] ( JAXBObjectMapperFactory [[ii]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[using]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Construct a ConfigConfigConfig instance . --> Factory method to create a ConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[id]] ( ObjectMapperConfig [[mode]] ) { notNull ( [[id]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[id]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Creates a new ConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 246 ---------------------------------------------
Creates a ConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 247 ---------------------------------------------
Factory method to create a ConfigConfigConfigConfig instance from a ConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Create a new MultiPartConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 249 ---------------------------------------------
Builds a ConfigConfigConfig from configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 250 ---------------------------------------------
Factory method to create a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 251 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 164 / 10 / 251:  25%|██▌       | 251/1000 [31:21<1:33:34,  7.50s/it][Succeeded / Failed / Skipped / Total] 77 / 164 / 10 / 251:  25%|██▌       | 252/1000 [31:26<1:33:19,  7.49s/it][Succeeded / Failed / Skipped / Total] 78 / 164 / 10 / 252:  25%|██▌       | 252/1000 [31:26<1:33:19,  7.49s/it][Succeeded / Failed / Skipped / Total] 78 / 164 / 10 / 252:  25%|██▌       | 253/1000 [31:27<1:32:52,  7.46s/it][Succeeded / Failed / Skipped / Total] 79 / 164 / 10 / 253:  25%|██▌       | 253/1000 [31:27<1:32:52,  7.46s/it][Succeeded / Failed / Skipped / Total] 79 / 164 / 10 / 253:  25%|██▌       | 254/1000 [31:28<1:32:27,  7.44s/it][Succeeded / Failed / Skipped / Total] 80 / 164 / 10 / 254:  25%|██▌       | 254/1000 [31:28<1:32:27,  7.44s/it][Succeeded / Failed / Skipped / Total] 80 / 164 / 10 / 254:  26%|██▌       | 255/1000 [31:37<1:32:24,  7.44s/it][Succeeded / Failed / Skipped / Total] 80 / 165 / 10 / 255:  26%|██▌       | 255/1000 [31:37<1:32:24,  7.44s/it][Succeeded / Failed / Skipped / Total] 80 / 165 / 10 / 255:  26%|██▌       | 256/1000 [32:02<1:33:07,  7.51s/it][Succeeded / Failed / Skipped / Total] 80 / 166 / 10 / 256:  26%|██▌       | 256/1000 [32:02<1:33:07,  7.51s/it][Succeeded / Failed / Skipped / Total] 80 / 166 / 10 / 256:  26%|██▌       | 257/1000 [32:10<1:33:01,  7.51s/it][Succeeded / Failed / Skipped / Total] 80 / 167 / 10 / 257:  26%|██▌       | 257/1000 [32:10<1:33:01,  7.51s/it][Succeeded / Failed / Skipped / Total] 80 / 167 / 10 / 257:  26%|██▌       | 258/1000 [32:13<1:32:40,  7.49s/it][Succeeded / Failed / Skipped / Total] 80 / 168 / 10 / 258:  26%|██▌       | 258/1000 [32:13<1:32:40,  7.49s/it][Succeeded / Failed / Skipped / Total] 80 / 168 / 10 / 258:  26%|██▌       | 259/1000 [32:29<1:32:58,  7.53s/it]Creates a ConfigConfig instance . --> Factory method for creating a ConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[using]] ( JsonConfig [[files]] ) { notNull ( [[using]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[using]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 252 ---------------------------------------------
Creates a new truststore . --> Create a new SSL certificate --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[source]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 253 ---------------------------------------------
Creates a ConfigConfigConfig object . --> Factory method to create a ConfigConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[id]] ( XmlConfig xmlConfig ) { notNull ( [[id]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[id]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 254 ---------------------------------------------
Build a Config instance . --> Build a ConfigConfigConfig from a ConfigConfig object . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[encoderConfig]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[array]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 255 ---------------------------------------------
Create a default parser . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[update]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Compiles a namespace URI . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[print]] ( String [[type]] , String [[attribute]] ) { Validate . notEmpty ( [[type]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[attribute]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[type]] , [[attribute]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "[[index]]" == "[[index]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object [[val]] = headers . get ( key ) ; if ( [[val]] == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , [[val]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object [[address]] = headers . get ( key ) ; if ( [[address]] == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , [[address]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Set the proxy host . --> [[[FAILED]]]

[[[[Adv]]]]: public void setProxy ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void setProxy ( String host , int port , String [[name]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[name]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 259 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 169 / 10 / 259:  26%|██▌       | 259/1000 [32:29<1:32:58,  7.53s/it][Succeeded / Failed / Skipped / Total] 80 / 169 / 10 / 259:  26%|██▌       | 260/1000 [32:37<1:32:52,  7.53s/it][Succeeded / Failed / Skipped / Total] 80 / 170 / 10 / 260:  26%|██▌       | 260/1000 [32:37<1:32:52,  7.53s/it][Succeeded / Failed / Skipped / Total] 80 / 170 / 10 / 260:  26%|██▌       | 261/1000 [32:45<1:32:44,  7.53s/it][Succeeded / Failed / Skipped / Total] 80 / 171 / 10 / 261:  26%|██▌       | 261/1000 [32:45<1:32:44,  7.53s/it][Succeeded / Failed / Skipped / Total] 80 / 171 / 10 / 261:  26%|██▌       | 262/1000 [32:50<1:32:30,  7.52s/it][Succeeded / Failed / Skipped / Total] 80 / 172 / 10 / 262:  26%|██▌       | 262/1000 [32:50<1:32:30,  7.52s/it][Succeeded / Failed / Skipped / Total] 80 / 172 / 10 / 262:  26%|██▋       | 263/1000 [32:51<1:32:05,  7.50s/it][Succeeded / Failed / Skipped / Total] 80 / 173 / 10 / 263:  26%|██▋       | 263/1000 [32:51<1:32:05,  7.50s/it][Succeeded / Failed / Skipped / Total] 80 / 173 / 10 / 263:  26%|██▋       | 264/1000 [33:02<1:32:07,  7.51s/it][Succeeded / Failed / Skipped / Total] 81 / 173 / 10 / 264:  26%|██▋       | 264/1000 [33:02<1:32:07,  7.51s/it][Succeeded / Failed / Skipped / Total] 81 / 173 / 10 / 264:  26%|██▋       | 265/1000 [33:10<1:32:00,  7.51s/it][Succeeded / Failed / Skipped / Total] 81 / 174 / 10 / 265:  26%|██▋       | 265/1000 [33:10<1:32:00,  7.51s/it][Succeeded / Failed / Skipped / Total] 81 / 174 / 10 / 265:  27%|██▋       | 266/1000 [33:12<1:31:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 82 / 174 / 10 / 266:  27%|██▋       | 266/1000 [33:12<1:31:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 82 / 174 / 10 / 266:  27%|██▋       | 267/1000 [33:18<1:31:26,  7.48s/it]Replies the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object request ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[defaultURI]] . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String [[input]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[program]] . toURI ( ) , [[input]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 260 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String name , String [[declaration]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[declaration]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Set the name of the control control . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[controlName]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . [[error]] = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Sets the credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[build]] ( String [[start]] , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[start]] , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
 --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Handles a response . --> Handles a request . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[point]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 265 ---------------------------------------------
Returns a list of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( [[headerList]] , [[additionalHeaders]] ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[format]] ) { notNull ( header , "Header" ) ; final List < Header > [[category]] = new LinkedList < Header > ( ) ; [[category]] . add ( header ) ; if ( [[format]] != null ) { Collections . addAll ( [[category]] , [[format]] ) ; } return new Headers ( [[category]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
Adds a header to the response . --> Add response headers to response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[newHeaders]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[newHeaders]] . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[newHeaders]] ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[source]] , String value ) { notNull ( [[source]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[end]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[end]] . add ( new Header ( [[source]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[end]] ) ) ; if ( trim ( [[source]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 267 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 175 / 10 / 267:  27%|██▋       | 267/1000 [33:18<1:31:26,  7.48s/it][Succeeded / Failed / Skipped / Total] 82 / 175 / 10 / 267:  27%|██▋       | 268/1000 [33:30<1:31:30,  7.50s/it][Succeeded / Failed / Skipped / Total] 82 / 176 / 10 / 268:  27%|██▋       | 268/1000 [33:30<1:31:30,  7.50s/it][Succeeded / Failed / Skipped / Total] 82 / 176 / 10 / 268:  27%|██▋       | 269/1000 [33:30<1:31:03,  7.47s/it][Succeeded / Failed / Skipped / Total] 82 / 177 / 10 / 269:  27%|██▋       | 269/1000 [33:30<1:31:03,  7.47s/it][Succeeded / Failed / Skipped / Total] 82 / 177 / 10 / 269:  27%|██▋       | 270/1000 [33:32<1:30:41,  7.45s/it][Succeeded / Failed / Skipped / Total] 82 / 178 / 10 / 270:  27%|██▋       | 270/1000 [33:32<1:30:41,  7.45s/it][Succeeded / Failed / Skipped / Total] 82 / 178 / 10 / 270:  27%|██▋       | 271/1000 [33:47<1:30:55,  7.48s/it][Succeeded / Failed / Skipped / Total] 82 / 179 / 10 / 271:  27%|██▋       | 271/1000 [33:47<1:30:55,  7.48s/it][Succeeded / Failed / Skipped / Total] 82 / 179 / 10 / 271:  27%|██▋       | 272/1000 [33:48<1:30:30,  7.46s/it][Succeeded / Failed / Skipped / Total] 82 / 180 / 10 / 272:  27%|██▋       | 272/1000 [33:48<1:30:30,  7.46s/it][Succeeded / Failed / Skipped / Total] 82 / 180 / 10 / 272:  27%|██▋       | 273/1000 [33:52<1:30:11,  7.44s/it][Succeeded / Failed / Skipped / Total] 82 / 181 / 10 / 273:  27%|██▋       | 273/1000 [33:52<1:30:11,  7.44s/it][Succeeded / Failed / Skipped / Total] 82 / 181 / 10 / 273:  27%|██▋       | 274/1000 [33:58<1:30:00,  7.44s/it][Succeeded / Failed / Skipped / Total] 82 / 182 / 10 / 274:  27%|██▋       | 274/1000 [33:58<1:30:00,  7.44s/it][Succeeded / Failed / Skipped / Total] 82 / 182 / 10 / 274:  28%|██▊       | 275/1000 [34:04<1:29:50,  7.43s/it][Succeeded / Failed / Skipped / Total] 82 / 183 / 10 / 275:  28%|██▊       | 275/1000 [34:04<1:29:50,  7.43s/it][Succeeded / Failed / Skipped / Total] 82 / 183 / 10 / 275:  28%|██▊       | 276/1000 [34:06<1:29:28,  7.42s/it][Succeeded / Failed / Skipped / Total] 82 / 184 / 10 / 276:  28%|██▊       | 276/1000 [34:06<1:29:28,  7.42s/it][Succeeded / Failed / Skipped / Total] 82 / 184 / 10 / 276:  28%|██▊       | 277/1000 [34:16<1:29:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 82 / 185 / 10 / 277:  28%|██▊       | 277/1000 [34:16<1:29:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 82 / 185 / 10 / 277:  28%|██▊       | 278/1000 [34:16<1:29:00,  7.40s/it]Returns a new Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[include]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a list of expiryed cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[when]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[function]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[function]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Converts a Matcher to a domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[cookies]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[cookies]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns the Matcher for the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[update]] ( Matcher < ? super String > [[c]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[c]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Gets the http Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > [[string]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[string]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[after]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Sets credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[add]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 275 ---------------------------------------------
Retrieves a Matcher that can be used by the regular expression . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[id]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[id]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a matcher for the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[of]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Sets the Matcher header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[header]] ) { spec . header ( headerName , [[header]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 185 / 11 / 278:  28%|██▊       | 278/1000 [34:16<1:29:00,  7.40s/it][Succeeded / Failed / Skipped / Total] 82 / 185 / 11 / 278:  28%|██▊       | 279/1000 [34:16<1:28:34,  7.37s/it][Succeeded / Failed / Skipped / Total] 82 / 185 / 12 / 279:  28%|██▊       | 279/1000 [34:16<1:28:34,  7.37s/it][Succeeded / Failed / Skipped / Total] 82 / 185 / 12 / 279:  28%|██▊       | 280/1000 [34:23<1:28:25,  7.37s/it][Succeeded / Failed / Skipped / Total] 83 / 185 / 12 / 280:  28%|██▊       | 280/1000 [34:23<1:28:25,  7.37s/it][Succeeded / Failed / Skipped / Total] 83 / 185 / 12 / 280:  28%|██▊       | 281/1000 [34:25<1:28:04,  7.35s/it][Succeeded / Failed / Skipped / Total] 83 / 186 / 12 / 281:  28%|██▊       | 281/1000 [34:25<1:28:04,  7.35s/it][Succeeded / Failed / Skipped / Total] 83 / 186 / 12 / 281:  28%|██▊       | 282/1000 [34:32<1:27:56,  7.35s/it][Succeeded / Failed / Skipped / Total] 84 / 186 / 12 / 282:  28%|██▊       | 282/1000 [34:32<1:27:56,  7.35s/it][Succeeded / Failed / Skipped / Total] 84 / 186 / 12 / 282:  28%|██▊       | 283/1000 [34:35<1:27:39,  7.34s/it][Succeeded / Failed / Skipped / Total] 85 / 186 / 12 / 283:  28%|██▊       | 283/1000 [34:35<1:27:39,  7.34s/it][Succeeded / Failed / Skipped / Total] 85 / 186 / 12 / 283:  28%|██▊       | 284/1000 [34:38<1:27:20,  7.32s/it][Succeeded / Failed / Skipped / Total] 85 / 187 / 12 / 284:  28%|██▊       | 284/1000 [34:38<1:27:20,  7.32s/it][Succeeded / Failed / Skipped / Total] 85 / 187 / 12 / 284:  28%|██▊       | 285/1000 [34:52<1:27:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 86 / 187 / 12 / 285:  28%|██▊       | 285/1000 [34:52<1:27:30,  7.34s/it][Succeeded / Failed / Skipped / Total] 86 / 187 / 12 / 285:  29%|██▊       | 286/1000 [35:13<1:27:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 86 / 188 / 12 / 286:  29%|██▊       | 286/1000 [35:13<1:27:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 86 / 188 / 12 / 286:  29%|██▊       | 287/1000 [35:17<1:27:40,  7.38s/it][Succeeded / Failed / Skipped / Total] 87 / 188 / 12 / 287:  29%|██▊       | 287/1000 [35:17<1:27:40,  7.38s/it][Succeeded / Failed / Skipped / Total] 87 / 188 / 12 / 287:  29%|██▉       | 288/1000 [35:18<1:27:16,  7.35s/it][Succeeded / Failed / Skipped / Total] 87 / 189 / 12 / 288:  29%|██▉       | 288/1000 [35:18<1:27:16,  7.35s/it][Succeeded / Failed / Skipped / Total] 87 / 189 / 12 / 288:  29%|██▉       | 289/1000 [35:28<1:27:15,  7.36s/it][Succeeded / Failed / Skipped / Total] 88 / 189 / 12 / 289:  29%|██▉       | 289/1000 [35:28<1:27:15,  7.36s/it][Succeeded / Failed / Skipped / Total] 88 / 189 / 12 / 289:  29%|██▉       | 290/1000 [35:37<1:27:14,  7.37s/it]Factory method that creates a new JsonParser --> [[[SKIPPED]]]

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 279 ---------------------------------------------
Create a new JsonParser --> [[[SKIPPED]]]

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 280 ---------------------------------------------
Creates a new proxy . --> Create a new link --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[key]] ( String [[link]] ) { return new ProxySpecification ( [[link]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
Sets the value of the response . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[cookie]] ( String cookieName , String [[bin]] ) { spec . cookie ( cookieName , [[bin]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 282 ---------------------------------------------
Returns a new log4 Log . --> Returns a new log4j . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[after]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 283 ---------------------------------------------
Creates a new LogStream . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[method]] ( PrintStream [[ers]] ) { return new LogConfig ( [[ers]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Sets the response header value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[query]] , String expectedValue ) { spec . header ( [[query]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 285 ---------------------------------------------
Add attribute to attribute . --> Specify a command . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[data]] ( String [[command]] , Object attributeValue ) { spec . attribute ( [[command]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 286 ---------------------------------------------
Sets the default MultiPartition . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[type]]" == "[[type]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Add a header to the request . --> Sets an error . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[script]] ( String [[syntax]] , String [[strings]] ) { spec . header ( [[syntax]] , [[strings]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[field]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 289 ---------------------------------------------
Put handler . --> Handle resultHandler . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... [[additionalResultHandlers]] ) { spec . resultHandlers ( resultHandler , [[additionalResultHandlers]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[file]] ( ResultHandler resultHandler , ResultHandler ... [[result]] ) { spec . resultHandlers ( resultHandler , [[result]] ) ; return this ; }
[[[[Nl]]]]: Add a result handler
[Succeeded / Failed / Skipped / Total] 88 / 190 / 12 / 290:  29%|██▉       | 290/1000 [35:37<1:27:14,  7.37s/it][Succeeded / Failed / Skipped / Total] 88 / 190 / 12 / 290:  29%|██▉       | 291/1000 [35:48<1:27:14,  7.38s/it][Succeeded / Failed / Skipped / Total] 88 / 191 / 12 / 291:  29%|██▉       | 291/1000 [35:48<1:27:14,  7.38s/it][Succeeded / Failed / Skipped / Total] 88 / 191 / 12 / 291:  29%|██▉       | 292/1000 [35:49<1:26:51,  7.36s/it][Succeeded / Failed / Skipped / Total] 88 / 192 / 12 / 292:  29%|██▉       | 292/1000 [35:49<1:26:51,  7.36s/it][Succeeded / Failed / Skipped / Total] 88 / 192 / 12 / 292:  29%|██▉       | 293/1000 [35:51<1:26:32,  7.34s/it][Succeeded / Failed / Skipped / Total] 88 / 193 / 12 / 293:  29%|██▉       | 293/1000 [35:51<1:26:32,  7.34s/it][Succeeded / Failed / Skipped / Total] 88 / 193 / 12 / 293:  29%|██▉       | 294/1000 [35:56<1:26:19,  7.34s/it][Succeeded / Failed / Skipped / Total] 89 / 193 / 12 / 294:  29%|██▉       | 294/1000 [35:56<1:26:19,  7.34s/it][Succeeded / Failed / Skipped / Total] 89 / 193 / 12 / 294:  30%|██▉       | 295/1000 [36:02<1:26:07,  7.33s/it][Succeeded / Failed / Skipped / Total] 89 / 194 / 12 / 295:  30%|██▉       | 295/1000 [36:02<1:26:07,  7.33s/it][Succeeded / Failed / Skipped / Total] 89 / 194 / 12 / 295:  30%|██▉       | 296/1000 [36:05<1:25:49,  7.32s/it][Succeeded / Failed / Skipped / Total] 90 / 194 / 12 / 296:  30%|██▉       | 296/1000 [36:05<1:25:49,  7.32s/it][Succeeded / Failed / Skipped / Total] 90 / 194 / 12 / 296:  30%|██▉       | 297/1000 [36:06<1:25:28,  7.30s/it][Succeeded / Failed / Skipped / Total] 91 / 194 / 12 / 297:  30%|██▉       | 297/1000 [36:06<1:25:28,  7.30s/it][Succeeded / Failed / Skipped / Total] 91 / 194 / 12 / 297:  30%|██▉       | 298/1000 [36:07<1:25:05,  7.27s/it][Succeeded / Failed / Skipped / Total] 92 / 194 / 12 / 298:  30%|██▉       | 298/1000 [36:07<1:25:05,  7.27s/it][Succeeded / Failed / Skipped / Total] 92 / 194 / 12 / 298:  30%|██▉       | 299/1000 [36:15<1:25:00,  7.28s/it][Succeeded / Failed / Skipped / Total] 93 / 194 / 12 / 299:  30%|██▉       | 299/1000 [36:15<1:25:00,  7.28s/it][Succeeded / Failed / Skipped / Total] 93 / 194 / 12 / 299:  30%|███       | 300/1000 [36:24<1:24:58,  7.28s/it]--------------------------------------------- Result 290 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[client]] ( String [[type]] , String [[file]] , String mimeType ) { spec . multiPart ( [[type]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
Build HttpClient instance . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[example]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Build http client . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[a]] ) { notNull ( [[a]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[a]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 293 ---------------------------------------------
Creates HttpClient . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[field]] = new HashMap < String , Object > ( httpClientParams ) ; [[field]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[field]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[id]]" == "[[id]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the string representation of the given integer . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[bin]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Get HttpClient instance . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[application]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[application]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 296 ---------------------------------------------
Returns the short short value for the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[form]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 297 ---------------------------------------------
Create a JSON document . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[be]] > [[be]] get ( String path ) { final JSONAssertion [[test]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[be]] ) [[test]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the byte array of bytes . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[sequence]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the String representation of the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[expression]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 195 / 12 / 300:  30%|███       | 300/1000 [36:24<1:24:58,  7.28s/it][Succeeded / Failed / Skipped / Total] 93 / 196 / 12 / 301:  30%|███       | 301/1000 [36:24<1:24:33,  7.26s/it][Succeeded / Failed / Skipped / Total] 93 / 196 / 12 / 301:  30%|███       | 302/1000 [36:35<1:24:33,  7.27s/it][Succeeded / Failed / Skipped / Total] 94 / 196 / 12 / 302:  30%|███       | 302/1000 [36:35<1:24:33,  7.27s/it][Succeeded / Failed / Skipped / Total] 94 / 196 / 12 / 302:  30%|███       | 303/1000 [36:39<1:24:19,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 197 / 12 / 303:  30%|███       | 303/1000 [36:39<1:24:19,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 197 / 12 / 303:  30%|███       | 304/1000 [36:47<1:24:14,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 198 / 12 / 304:  30%|███       | 304/1000 [36:47<1:24:14,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 198 / 12 / 304:  30%|███       | 305/1000 [37:03<1:24:27,  7.29s/it][Succeeded / Failed / Skipped / Total] 94 / 199 / 12 / 305:  30%|███       | 305/1000 [37:03<1:24:27,  7.29s/it][Succeeded / Failed / Skipped / Total] 94 / 199 / 12 / 305:  31%|███       | 306/1000 [37:08<1:24:13,  7.28s/it][Succeeded / Failed / Skipped / Total] 94 / 200 / 12 / 306:  31%|███       | 306/1000 [37:08<1:24:13,  7.28s/it][Succeeded / Failed / Skipped / Total] 94 / 200 / 12 / 306:  31%|███       | 307/1000 [37:08<1:23:50,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 200 / 13 / 307:  31%|███       | 307/1000 [37:08<1:23:50,  7.26s/it][Succeeded / Failed / Skipped / Total] 94 / 200 / 13 / 307:  31%|███       | 308/1000 [37:13<1:23:38,  7.25s/it][Succeeded / Failed / Skipped / Total] 95 / 200 / 13 / 308:  31%|███       | 308/1000 [37:13<1:23:38,  7.25s/it][Succeeded / Failed / Skipped / Total] 95 / 200 / 13 / 308:  31%|███       | 309/1000 [37:22<1:23:34,  7.26s/it][Succeeded / Failed / Skipped / Total] 95 / 201 / 13 / 309:  31%|███       | 309/1000 [37:22<1:23:34,  7.26s/it][Succeeded / Failed / Skipped / Total] 95 / 201 / 13 / 309:  31%|███       | 310/1000 [37:40<1:23:51,  7.29s/it][Succeeded / Failed / Skipped / Total] 95 / 202 / 13 / 310:  31%|███       | 310/1000 [37:40<1:23:51,  7.29s/it][Succeeded / Failed / Skipped / Total] 95 / 202 / 13 / 310:  31%|███       | 311/1000 [37:41<1:23:30,  7.27s/it]Convert a double value to a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[example]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Returns the float value of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public float getFloat ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float getFloat ( String [[i]] ) { final Object value = get ( [[i]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
Sets the body of this object . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[file]] ) { spec . body ( object , [[file]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 303 ---------------------------------------------
Returns a map containing the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[link]] , V > Map < [[link]] , V > [[be]] ( String [[map]] ) { return get ( [[map]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Returns the object for the given object . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[field]] > [[field]] getObject ( String path , Class < [[field]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[act]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[value]] , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , [[value]] , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[code]] , Object ... [[name]] ) { spec . cookie ( key , [[code]] , [[name]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Convenience method for testing --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 308 ---------------------------------------------
Update a strategy . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[test]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[test]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[at]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 310 ---------------------------------------------
Removes entries from the source map . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( [[keyAndSource]] . key ) ; if ( [[set]] != null ) { [[set]] . remove ( [[keyAndSource]] . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[remove]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[function]] : keysAndSources ) { Multiset < Object > [[a]] = backingMap . get ( [[function]] . key ) ; if ( [[a]] != null ) { [[a]] . remove ( [[function]] . source ) ; if ( [[a]] . isEmpty ( ) ) { backingMap . remove ( [[function]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 203 / 13 / 311:  31%|███       | 311/1000 [37:41<1:23:30,  7.27s/it][Succeeded / Failed / Skipped / Total] 95 / 203 / 13 / 311:  31%|███       | 312/1000 [37:43<1:23:10,  7.25s/it][Succeeded / Failed / Skipped / Total] 95 / 204 / 13 / 312:  31%|███       | 312/1000 [37:43<1:23:10,  7.25s/it][Succeeded / Failed / Skipped / Total] 95 / 204 / 13 / 312:  31%|███▏      | 313/1000 [37:47<1:22:56,  7.24s/it][Succeeded / Failed / Skipped / Total] 95 / 205 / 13 / 313:  31%|███▏      | 313/1000 [37:47<1:22:56,  7.24s/it][Succeeded / Failed / Skipped / Total] 95 / 205 / 13 / 313:  31%|███▏      | 314/1000 [38:01<1:23:03,  7.27s/it][Succeeded / Failed / Skipped / Total] 95 / 206 / 13 / 314:  31%|███▏      | 314/1000 [38:01<1:23:03,  7.27s/it][Succeeded / Failed / Skipped / Total] 95 / 206 / 13 / 314:  32%|███▏      | 315/1000 [38:11<1:23:03,  7.28s/it][Succeeded / Failed / Skipped / Total] 96 / 206 / 13 / 315:  32%|███▏      | 315/1000 [38:11<1:23:03,  7.28s/it][Succeeded / Failed / Skipped / Total] 96 / 206 / 13 / 315:  32%|███▏      | 316/1000 [38:17<1:22:53,  7.27s/it][Succeeded / Failed / Skipped / Total] 96 / 207 / 13 / 316:  32%|███▏      | 316/1000 [38:17<1:22:53,  7.27s/it][Succeeded / Failed / Skipped / Total] 96 / 207 / 13 / 316:  32%|███▏      | 317/1000 [38:26<1:22:48,  7.27s/it][Succeeded / Failed / Skipped / Total] 96 / 208 / 13 / 317:  32%|███▏      | 317/1000 [38:26<1:22:48,  7.27s/it][Succeeded / Failed / Skipped / Total] 96 / 208 / 13 / 317:  32%|███▏      | 318/1000 [38:34<1:22:42,  7.28s/it][Succeeded / Failed / Skipped / Total] 97 / 208 / 13 / 318:  32%|███▏      | 318/1000 [38:34<1:22:42,  7.28s/it][Succeeded / Failed / Skipped / Total] 97 / 208 / 13 / 318:  32%|███▏      | 319/1000 [38:57<1:23:09,  7.33s/it]Puts the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[by]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[by]] . getKey ( ) . getTypeLiteral ( ) , [[by]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 312 ---------------------------------------------
Gets the list of generic types . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T [[t]] : [[original]] ) { T e ; if ( [[t]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[execute]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[process]] = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[process]] != null ) { for ( T [[process]] : [[process]] ) { T e ; if ( [[process]] instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 313 ---------------------------------------------
Returns a list of Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[stack]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 314 ---------------------------------------------
Gets the binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > [[s]] ) { if ( [[s]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[s]] ) . getInternalDependencies ( ) ; } else if ( [[s]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[s]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 315 ---------------------------------------------
Verifies that a key - value pair . --> Validate errors --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[draw]] ( Key < T > [[header]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 316 ---------------------------------------------
Unbind a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[use]] ( Binding < ? > [[domain]] , InjectionPoint ip ) { failedJitBindings . add ( [[domain]] . getKey ( ) ) ; jitBindings . remove ( [[domain]] . getKey ( ) ) ; membersInjectorStore . remove ( [[domain]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[domain]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Build a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Returns a new instance of the given parameters . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[command]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[genus]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 209 / 13 / 319:  32%|███▏      | 319/1000 [38:57<1:23:09,  7.33s/it][Succeeded / Failed / Skipped / Total] 97 / 209 / 13 / 319:  32%|███▏      | 320/1000 [39:06<1:23:05,  7.33s/it][Succeeded / Failed / Skipped / Total] 98 / 209 / 13 / 320:  32%|███▏      | 320/1000 [39:06<1:23:05,  7.33s/it][Succeeded / Failed / Skipped / Total] 98 / 209 / 13 / 320:  32%|███▏      | 321/1000 [39:09<1:22:50,  7.32s/it][Succeeded / Failed / Skipped / Total] 98 / 210 / 13 / 321:  32%|███▏      | 321/1000 [39:09<1:22:50,  7.32s/it][Succeeded / Failed / Skipped / Total] 98 / 210 / 13 / 321:  32%|███▏      | 322/1000 [39:22<1:22:53,  7.34s/it][Succeeded / Failed / Skipped / Total] 98 / 211 / 13 / 322:  32%|███▏      | 322/1000 [39:22<1:22:53,  7.34s/it][Succeeded / Failed / Skipped / Total] 98 / 211 / 13 / 322:  32%|███▏      | 323/1000 [39:27<1:22:42,  7.33s/it][Succeeded / Failed / Skipped / Total] 99 / 211 / 13 / 323:  32%|███▏      | 323/1000 [39:27<1:22:42,  7.33s/it][Succeeded / Failed / Skipped / Total] 99 / 211 / 13 / 323:  32%|███▏      | 324/1000 [39:32<1:22:29,  7.32s/it][Succeeded / Failed / Skipped / Total] 99 / 212 / 13 / 324:  32%|███▏      | 324/1000 [39:32<1:22:29,  7.32s/it][Succeeded / Failed / Skipped / Total] 99 / 212 / 13 / 324:  32%|███▎      | 325/1000 [39:41<1:22:25,  7.33s/it][Succeeded / Failed / Skipped / Total] 99 / 213 / 13 / 325:  32%|███▎      | 325/1000 [39:41<1:22:25,  7.33s/it][Succeeded / Failed / Skipped / Total] 99 / 213 / 13 / 325:  33%|███▎      | 326/1000 [39:42<1:22:05,  7.31s/it][Succeeded / Failed / Skipped / Total] 100 / 213 / 13 / 326:  33%|███▎      | 326/1000 [39:42<1:22:05,  7.31s/it][Succeeded / Failed / Skipped / Total] 100 / 213 / 13 / 326:  33%|███▎      | 327/1000 [39:56<1:22:11,  7.33s/it]Generates the provider for the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[c]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
A convenience method . --> Convenience method for test --> Socre: 1.0

[[[[Adv]]]]: private static boolean overrides ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method [[a2]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Create a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[address]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[address]] , Scoping . UNSCOPED , [[address]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 322 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[test]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Checks if the given annotation is present . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[tests]] ( Member [[states]] , Errors errors ) { Annotation [[test]] = Annotations . findBindingAnnotation ( errors , [[states]] , ( ( AnnotatedElement ) [[states]] ) . getAnnotations ( ) ) ; if ( [[test]] == null ) { return "[[testing]]" != "[[testing]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[x]] ) { checkState ( this . [[person]] == null , "delegate already initialized" ) ; this . [[person]] = checkNotNull ( [[x]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 325 ---------------------------------------------
Returns a set of keys for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > [[deps]] = getInternalDependencies ( binding ) ; for ( Dependency [[dep]] : [[deps]] ) { Key < ? > depKey = [[dep]] . getKey ( ) ; InjectionPoint ip = [[dep]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[fix]] = "[[handle]]" != "[[handle]]" ; Set < Dependency < ? > > [[find]] = getInternalDependencies ( binding ) ; for ( Dependency [[pointer]] : [[find]] ) { Key < ? > depKey = [[pointer]] . getKey ( ) ; InjectionPoint ip = [[pointer]] . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 326 ---------------------------------------------
Indicates whether the supplied number is valid . --> initialize system --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[system]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 213 / 13 / 327:  33%|███▎      | 327/1000 [39:56<1:22:11,  7.33s/it][Succeeded / Failed / Skipped / Total] 101 / 213 / 13 / 327:  33%|███▎      | 328/1000 [40:00<1:21:59,  7.32s/it][Succeeded / Failed / Skipped / Total] 101 / 214 / 13 / 328:  33%|███▎      | 328/1000 [40:00<1:21:59,  7.32s/it][Succeeded / Failed / Skipped / Total] 101 / 214 / 13 / 328:  33%|███▎      | 329/1000 [40:05<1:21:46,  7.31s/it][Succeeded / Failed / Skipped / Total] 101 / 215 / 13 / 329:  33%|███▎      | 329/1000 [40:05<1:21:46,  7.31s/it][Succeeded / Failed / Skipped / Total] 101 / 215 / 13 / 329:  33%|███▎      | 330/1000 [40:08<1:21:29,  7.30s/it][Succeeded / Failed / Skipped / Total] 101 / 216 / 13 / 330:  33%|███▎      | 330/1000 [40:08<1:21:29,  7.30s/it][Succeeded / Failed / Skipped / Total] 101 / 216 / 13 / 330:  33%|███▎      | 331/1000 [40:16<1:21:23,  7.30s/it][Succeeded / Failed / Skipped / Total] 101 / 217 / 13 / 331:  33%|███▎      | 331/1000 [40:16<1:21:23,  7.30s/it][Succeeded / Failed / Skipped / Total] 101 / 217 / 13 / 331:  33%|███▎      | 332/1000 [40:18<1:21:06,  7.28s/it][Succeeded / Failed / Skipped / Total] 101 / 218 / 13 / 332:  33%|███▎      | 332/1000 [40:18<1:21:06,  7.28s/it][Succeeded / Failed / Skipped / Total] 101 / 218 / 13 / 332:  33%|███▎      | 333/1000 [40:19<1:20:45,  7.26s/it][Succeeded / Failed / Skipped / Total] 102 / 218 / 13 / 333:  33%|███▎      | 333/1000 [40:19<1:20:45,  7.26s/it][Succeeded / Failed / Skipped / Total] 102 / 218 / 13 / 333:  33%|███▎      | 334/1000 [40:32<1:20:50,  7.28s/it][Succeeded / Failed / Skipped / Total] 103 / 218 / 13 / 334:  33%|███▎      | 334/1000 [40:32<1:20:50,  7.28s/it][Succeeded / Failed / Skipped / Total] 103 / 218 / 13 / 334:  34%|███▎      | 335/1000 [40:41<1:20:46,  7.29s/it]Loads the class from the given class . --> Tries to load a class --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[end]] ( ClassLoader [[ax]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[ax]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 328 ---------------------------------------------
Replies the class loader for the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[bus]] ( ClassLoader [[mode]] ) { return [[mode]] != null ? [[mode]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 329 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[bit]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[bit]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
Resolves the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[t]] = 0 ; [[t]] < types . length ; [[t]] ++ ) { result [ [[t]] ] = resolve ( types [ [[t]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int [[f]] = 0 ; [[f]] < types . length ; [[f]] ++ ) { result [ [[f]] ] = resolve ( types [ [[f]] ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 331 ---------------------------------------------
Returns the annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[by]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Throws an exception if the given IllegalStateException is thrown . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[result]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 333 ---------------------------------------------
Validates all validation errors --> Validate validation errors --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[fix]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 334 ---------------------------------------------
Static factory method for creating a new scope --> Helper function to create a new scope --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[client]] ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope [[client]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
[Succeeded / Failed / Skipped / Total] 104 / 218 / 13 / 335:  34%|███▎      | 335/1000 [40:41<1:20:46,  7.29s/it][Succeeded / Failed / Skipped / Total] 104 / 218 / 13 / 335:  34%|███▎      | 336/1000 [40:52<1:20:45,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 218 / 13 / 336:  34%|███▎      | 336/1000 [40:52<1:20:45,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 218 / 13 / 336:  34%|███▎      | 337/1000 [41:01<1:20:42,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 219 / 13 / 337:  34%|███▎      | 337/1000 [41:01<1:20:42,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 219 / 13 / 337:  34%|███▍      | 338/1000 [41:08<1:20:35,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 220 / 13 / 338:  34%|███▍      | 338/1000 [41:08<1:20:35,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 220 / 13 / 338:  34%|███▍      | 339/1000 [41:14<1:20:24,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 221 / 13 / 339:  34%|███▍      | 339/1000 [41:14<1:20:24,  7.30s/it][Succeeded / Failed / Skipped / Total] 105 / 221 / 13 / 339:  34%|███▍      | 340/1000 [41:33<1:20:40,  7.33s/it][Succeeded / Failed / Skipped / Total] 105 / 222 / 13 / 340:  34%|███▍      | 340/1000 [41:33<1:20:40,  7.33s/it][Succeeded / Failed / Skipped / Total] 105 / 222 / 13 / 340:  34%|███▍      | 341/1000 [41:35<1:20:22,  7.32s/it][Succeeded / Failed / Skipped / Total] 105 / 223 / 13 / 341:  34%|███▍      | 341/1000 [41:35<1:20:22,  7.32s/it][Succeeded / Failed / Skipped / Total] 105 / 223 / 13 / 341:  34%|███▍      | 342/1000 [42:02<1:20:52,  7.37s/it]--------------------------------------------- Result 335 ---------------------------------------------
Sets the constructor . --> Set a new object --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[lean]] ( Object [ ] [[z]] ) throws Throwable { constructor . setAccessible ( "[[end]]" == "[[end]]" ) ; try { return constructor . newInstance ( [[z]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Converts a path to a string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[bridge]] ( String path ) { StringBuilder sb = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 337 ---------------------------------------------
Returns true if the given annotation is defined . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[level]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Replies the default servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline [[proxy]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 339 ---------------------------------------------
Finds the public public interface . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[contrary]]" == "[[contrary]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 340 ---------------------------------------------
Returns the scope of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[error]] ( Scoping [[process]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[process]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[process]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 341 ---------------------------------------------
Replies if the given type represents an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[recover]] ( Class < ? extends Annotation > [[f]] ) { Retention retention = [[f]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 224 / 13 / 342:  34%|███▍      | 342/1000 [42:02<1:20:52,  7.37s/it][Succeeded / Failed / Skipped / Total] 105 / 224 / 13 / 342:  34%|███▍      | 343/1000 [42:05<1:20:36,  7.36s/it][Succeeded / Failed / Skipped / Total] 105 / 225 / 13 / 343:  34%|███▍      | 343/1000 [42:05<1:20:36,  7.36s/it][Succeeded / Failed / Skipped / Total] 105 / 225 / 13 / 343:  34%|███▍      | 344/1000 [42:08<1:20:21,  7.35s/it][Succeeded / Failed / Skipped / Total] 106 / 225 / 13 / 344:  34%|███▍      | 344/1000 [42:08<1:20:21,  7.35s/it][Succeeded / Failed / Skipped / Total] 106 / 225 / 13 / 344:  34%|███▍      | 345/1000 [42:17<1:20:16,  7.35s/it][Succeeded / Failed / Skipped / Total] 106 / 226 / 13 / 345:  34%|███▍      | 345/1000 [42:17<1:20:16,  7.35s/it][Succeeded / Failed / Skipped / Total] 106 / 226 / 13 / 345:  35%|███▍      | 346/1000 [42:17<1:19:56,  7.33s/it][Succeeded / Failed / Skipped / Total] 106 / 227 / 13 / 346:  35%|███▍      | 346/1000 [42:17<1:19:56,  7.33s/it][Succeeded / Failed / Skipped / Total] 106 / 227 / 13 / 346:  35%|███▍      | 347/1000 [42:44<1:20:25,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 228 / 13 / 347:  35%|███▍      | 347/1000 [42:44<1:20:25,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 228 / 13 / 347:  35%|███▍      | 348/1000 [42:49<1:20:14,  7.38s/it][Succeeded / Failed / Skipped / Total] 106 / 229 / 13 / 348:  35%|███▍      | 348/1000 [42:49<1:20:14,  7.38s/it][Succeeded / Failed / Skipped / Total] 106 / 229 / 13 / 348:  35%|███▍      | 349/1000 [43:07<1:20:26,  7.41s/it]Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member [[member]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation [[found]] = findBindingAnnotation ( errors , [[member]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return [[found]] == null ? Key . get ( type ) : Key . get ( type , [[found]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member [[list]] , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation [[method]] = findBindingAnnotation ( errors , [[list]] , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return [[method]] == null ? Key . get ( type ) : Key . get ( type , [[method]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 343 ---------------------------------------------
Initialize the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[merge]] ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the annotation type . -->  --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[query]] ( Key < ? > [[word]] ) { Annotation annotation = [[word]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[word]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[word]] . getAnnotation ( ) . toString ( ) ; } else if ( [[word]] . getAnnotationType ( ) != null ) { return "@" + [[word]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 345 ---------------------------------------------
Adds the binder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[execute]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Find annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > [[list]] = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[list]] != null ) { errors . duplicateScopeAnnotations ( [[list]] , annotationType ) ; } else { [[list]] = annotationType ; } } } return [[list]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 347 ---------------------------------------------
Returns a constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[execute]] ( InjectionPoint [[instruction]] , Errors [[registry]] ) throws ErrorsException { return cache . get ( [[instruction]] , [[registry]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Returns a set of key binding . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[keys]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[pointer]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[keys]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[keys]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[pointer]] ) ) ; return [[pointer]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 230 / 13 / 349:  35%|███▍      | 349/1000 [43:07<1:20:26,  7.41s/it][Succeeded / Failed / Skipped / Total] 106 / 230 / 13 / 349:  35%|███▌      | 350/1000 [43:08<1:20:06,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 231 / 13 / 350:  35%|███▌      | 350/1000 [43:08<1:20:06,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 231 / 13 / 350:  35%|███▌      | 351/1000 [43:14<1:19:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 232 / 13 / 351:  35%|███▌      | 351/1000 [43:14<1:19:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 106 / 232 / 13 / 351:  35%|███▌      | 352/1000 [43:23<1:19:53,  7.40s/it][Succeeded / Failed / Skipped / Total] 107 / 232 / 13 / 352:  35%|███▌      | 352/1000 [43:23<1:19:53,  7.40s/it][Succeeded / Failed / Skipped / Total] 107 / 232 / 13 / 352:  35%|███▌      | 353/1000 [43:28<1:19:40,  7.39s/it][Succeeded / Failed / Skipped / Total] 107 / 233 / 13 / 353:  35%|███▌      | 353/1000 [43:28<1:19:40,  7.39s/it][Succeeded / Failed / Skipped / Total] 107 / 233 / 13 / 353:  35%|███▌      | 354/1000 [43:32<1:19:27,  7.38s/it][Succeeded / Failed / Skipped / Total] 108 / 233 / 13 / 354:  35%|███▌      | 354/1000 [43:32<1:19:27,  7.38s/it][Succeeded / Failed / Skipped / Total] 108 / 233 / 13 / 354:  36%|███▌      | 355/1000 [44:00<1:19:57,  7.44s/it][Succeeded / Failed / Skipped / Total] 108 / 234 / 13 / 355:  36%|███▌      | 355/1000 [44:00<1:19:57,  7.44s/it][Succeeded / Failed / Skipped / Total] 108 / 234 / 13 / 355:  36%|███▌      | 356/1000 [44:35<1:20:39,  7.51s/it]Returns true if the given annotation is a type . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[list]] ( Class < ? extends Interceptor > [[domain]] ) { for ( Annotation annotation : [[domain]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[read]]" == "[[read]]" ; } } return "[[use]]" != "[[use]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Create a binder to binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > keyType , Key < V > [[valueTypeAndAnnotation]] ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[list]] ( Binder binder , TypeLiteral < K > keyType , Key < V > [[value]] ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[value]] . getTypeLiteral ( ) ; return [[list]] ( binder , keyType , valueType , [[value]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , [[value]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 351 ---------------------------------------------
Returns all methods that match the given methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[contains]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 352 ---------------------------------------------
Returns a module . --> Return all ModuleModules --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[array]] ( Module [[arrays]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Produces the supplied message . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < [[sourcesAsStrings]] . length ; [[i]] ++ ) { [[sourcesAsStrings]] [ [[i]] ] = Errors . convert ( [[sourcesAsStrings]] [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[format]] = sources . toArray ( ) ; for ( int [[header]] = 0 ; [[header]] < [[format]] . length ; [[header]] ++ ) { [[format]] [ [[header]] ] = Errors . convert ( [[format]] [ [[header]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[format]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 354 ---------------------------------------------
Instantiates the supplied object . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( [[t]] ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > [[source]] ) throws InternalProvisionException { try { T [[exit]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[exit]] = constructionProxy . newInstance ( parameters ) ; [[source]] . setProxyDelegates ( [[exit]] ) ; } finally { [[source]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Return true if the given message is a valid type . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[ce]] ) { Collection < Message > [[messages]] = [[ce]] . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[merge]] ( TypeLiteral < ? > typeLiteral , ConfigurationException [[button]] ) { Collection < Message > [[data]] = [[button]] . getErrorMessages ( ) ; if ( [[data]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[data]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 234 / 13 / 356:  36%|███▌      | 356/1000 [44:35<1:20:39,  7.51s/it][Succeeded / Failed / Skipped / Total] 109 / 234 / 13 / 356:  36%|███▌      | 357/1000 [44:39<1:20:26,  7.51s/it][Succeeded / Failed / Skipped / Total] 109 / 235 / 13 / 357:  36%|███▌      | 357/1000 [44:39<1:20:26,  7.51s/it][Succeeded / Failed / Skipped / Total] 109 / 235 / 13 / 357:  36%|███▌      | 358/1000 [44:45<1:20:16,  7.50s/it][Succeeded / Failed / Skipped / Total] 109 / 236 / 13 / 358:  36%|███▌      | 358/1000 [44:45<1:20:16,  7.50s/it][Succeeded / Failed / Skipped / Total] 109 / 236 / 13 / 358:  36%|███▌      | 359/1000 [44:55<1:20:12,  7.51s/it][Succeeded / Failed / Skipped / Total] 110 / 236 / 13 / 359:  36%|███▌      | 359/1000 [44:55<1:20:12,  7.51s/it][Succeeded / Failed / Skipped / Total] 110 / 236 / 13 / 359:  36%|███▌      | 360/1000 [45:09<1:20:17,  7.53s/it][Succeeded / Failed / Skipped / Total] 110 / 237 / 13 / 360:  36%|███▌      | 360/1000 [45:09<1:20:17,  7.53s/it][Succeeded / Failed / Skipped / Total] 110 / 237 / 13 / 360:  36%|███▌      | 361/1000 [45:15<1:20:06,  7.52s/it][Succeeded / Failed / Skipped / Total] 111 / 237 / 13 / 361:  36%|███▌      | 361/1000 [45:15<1:20:06,  7.52s/it][Succeeded / Failed / Skipped / Total] 111 / 237 / 13 / 361:  36%|███▌      | 362/1000 [45:28<1:20:08,  7.54s/it][Succeeded / Failed / Skipped / Total] 111 / 238 / 13 / 362:  36%|███▌      | 362/1000 [45:28<1:20:08,  7.54s/it][Succeeded / Failed / Skipped / Total] 111 / 238 / 13 / 362:  36%|███▋      | 363/1000 [45:35<1:19:59,  7.54s/it][Succeeded / Failed / Skipped / Total] 111 / 239 / 13 / 363:  36%|███▋      | 363/1000 [45:35<1:19:59,  7.54s/it][Succeeded / Failed / Skipped / Total] 111 / 239 / 13 / 363:  36%|███▋      | 364/1000 [45:35<1:19:39,  7.52s/it]Returns the set of dependency annotations . --> Returns a list of methods that depends --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[suppose]] ( Set < Dependency < ? > > [[method]] ) { ImmutableSet . Builder < Dependency < ? > > [[base]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[method]] ) { Class < ? > [[last]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[last]] == null || ! [[last]] . equals ( Assisted . class ) ) { [[base]] . add ( dep ) ; } } return [[base]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the given type is a valid dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[set]] ( Set < Dependency < ? > > [[implement]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 358 ---------------------------------------------
Builds a set of annotated variables . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( [[ip]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[inc]] , TypeLiteral < ? > [[client]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( [[inc]] . getDependencies ( ) ) ; if ( ! [[client]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[creator]] : InjectionPoint . forInstanceMethodsAndFields ( [[client]] ) ) { builder . addAll ( [[creator]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 359 ---------------------------------------------
Constructs a StringBuilder for a given key . --> Create a new key - value pair . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[b]] = new StringBuilder ( ) ; [[b]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Invoke a method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[pointer]] ( Object proxy , final Method [[handler]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 361 ---------------------------------------------
Creates a new Multibinder for the given key . --> Bind a binder to a key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[binder]] , Key < T > key ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , key ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[box]] , Key < T > key ) { [[box]] = [[box]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[box]] , key ) ; [[box]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 362 ---------------------------------------------
Searches for a given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[implementation]] ( HttpServletRequest [[ions]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[ions]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 363 ---------------------------------------------
Determines whether or not the given constructor is a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[set]] ( Constructor [[of]] ) { return [[of]] . isAnnotationPresent ( Inject . class ) || [[of]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 240 / 13 / 364:  36%|███▋      | 364/1000 [45:35<1:19:39,  7.52s/it][Succeeded / Failed / Skipped / Total] 111 / 240 / 13 / 364:  36%|███▋      | 365/1000 [45:41<1:19:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 111 / 241 / 13 / 365:  36%|███▋      | 365/1000 [45:41<1:19:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 111 / 241 / 13 / 365:  37%|███▋      | 366/1000 [45:44<1:19:14,  7.50s/it][Succeeded / Failed / Skipped / Total] 111 / 242 / 13 / 366:  37%|███▋      | 366/1000 [45:44<1:19:14,  7.50s/it][Succeeded / Failed / Skipped / Total] 111 / 242 / 13 / 366:  37%|███▋      | 367/1000 [45:53<1:19:08,  7.50s/it][Succeeded / Failed / Skipped / Total] 111 / 243 / 13 / 367:  37%|███▋      | 367/1000 [45:53<1:19:08,  7.50s/it][Succeeded / Failed / Skipped / Total] 111 / 243 / 13 / 367:  37%|███▋      | 368/1000 [45:57<1:18:54,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 243 / 13 / 368:  37%|███▋      | 368/1000 [45:57<1:18:54,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 243 / 13 / 368:  37%|███▋      | 369/1000 [46:04<1:18:46,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 244 / 13 / 369:  37%|███▋      | 369/1000 [46:04<1:18:46,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 244 / 13 / 369:  37%|███▋      | 370/1000 [46:08<1:18:34,  7.48s/it][Succeeded / Failed / Skipped / Total] 112 / 245 / 13 / 370:  37%|███▋      | 370/1000 [46:08<1:18:34,  7.48s/it][Succeeded / Failed / Skipped / Total] 112 / 245 / 13 / 370:  37%|███▋      | 371/1000 [46:22<1:18:38,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 246 / 13 / 371:  37%|███▋      | 371/1000 [46:22<1:18:38,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 246 / 13 / 371:  37%|███▋      | 372/1000 [46:29<1:18:28,  7.50s/it]Returns a new instance of the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[execute]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
Returns a list of annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[id]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[id]] ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 366 ---------------------------------------------
Creates a new instance of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[loop]] ( final Method method , final Object [ ] args , final AssistData [[bilities]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[value]] = [[bilities]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 367 ---------------------------------------------
Returns a builder for the given set . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[rest]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Converts a module to a module . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "False" != "False" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[query]] ( Object module , ModuleAnnotatedMethodScanner [[ator]] ) { return forObject ( module , "False" != "False" , [[ator]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the member of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[point]] ( Member [[group]] ) { Preconditions . checkArgument ( type == [[group]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[group]] , [[group]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[group]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Initialize the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[notice]] ( Errors [[hot]] ) { injector . lookups = injector ; new LookupProcessor ( [[hot]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Asynchronously gets a single callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , continueRequest ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[control]] , Map < Key < ? > , Object > [[command]] ) { return wrap ( [[control]] , continueRequest ( [[command]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 247 / 13 / 372:  37%|███▋      | 372/1000 [46:29<1:18:28,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 248 / 13 / 373:  37%|███▋      | 373/1000 [46:29<1:18:08,  7.48s/it][Succeeded / Failed / Skipped / Total] 112 / 248 / 13 / 373:  37%|███▋      | 374/1000 [46:29<1:17:49,  7.46s/it][Succeeded / Failed / Skipped / Total] 112 / 249 / 13 / 374:  37%|███▋      | 374/1000 [46:29<1:17:49,  7.46s/it][Succeeded / Failed / Skipped / Total] 112 / 250 / 13 / 375:  38%|███▊      | 375/1000 [46:48<1:18:00,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 250 / 13 / 375:  38%|███▊      | 376/1000 [46:59<1:17:58,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 251 / 13 / 376:  38%|███▊      | 376/1000 [46:59<1:17:58,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 251 / 13 / 376:  38%|███▊      | 377/1000 [47:02<1:17:44,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 252 / 13 / 377:  38%|███▊      | 377/1000 [47:02<1:17:44,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 252 / 13 / 377:  38%|███▊      | 378/1000 [47:10<1:17:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 253 / 13 / 378:  38%|███▊      | 378/1000 [47:10<1:17:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 112 / 253 / 13 / 378:  38%|███▊      | 379/1000 [47:24<1:17:40,  7.50s/it]Gets annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 373 ---------------------------------------------
Returns a boolean value . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[keys]] , Object [[key]] ) { if ( [[key]] == null || [[key]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[keys]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[key]] ) ) { throw new IllegalArgumentException ( "Value[" + [[key]] + "] of type[" + [[key]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[keys]] + "]" ) ; } return [[key]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Calls a Callable to execute a Callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[handle]] ) { return wrap ( [[handle]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 375 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Get the annotation type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[by]] ( Annotation [[morphism]] ) { checkNotNull ( [[morphism]] , "annotation" ) ; Class < ? extends Annotation > [[foo]] = [[morphism]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[foo]] ) ; ensureIsBindingAnnotation ( [[foo]] ) ; if ( Annotations . isMarker ( [[foo]] ) ) { return new AnnotationTypeStrategy ( [[foo]] , [[morphism]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[morphism]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Replies the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[bar]] ( Class < ? extends Annotation > [[function]] ) { [[function]] = Annotations . canonicalizeIfNamed ( [[function]] ) ; if ( isAllDefaultMethods ( [[function]] ) ) { return [[bar]] ( generateAnnotation ( [[function]] ) ) ; } checkNotNull ( [[function]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[function]] ) ; ensureIsBindingAnnotation ( [[function]] ) ; return new AnnotationTypeStrategy ( [[function]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Returns the type of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[membership]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
[Succeeded / Failed / Skipped / Total] 112 / 254 / 13 / 379:  38%|███▊      | 379/1000 [47:24<1:17:40,  7.50s/it][Succeeded / Failed / Skipped / Total] 112 / 254 / 13 / 379:  38%|███▊      | 380/1000 [47:41<1:17:48,  7.53s/it][Succeeded / Failed / Skipped / Total] 113 / 254 / 13 / 380:  38%|███▊      | 380/1000 [47:41<1:17:48,  7.53s/it][Succeeded / Failed / Skipped / Total] 113 / 254 / 13 / 380:  38%|███▊      | 381/1000 [47:47<1:17:38,  7.53s/it][Succeeded / Failed / Skipped / Total] 114 / 254 / 13 / 381:  38%|███▊      | 381/1000 [47:47<1:17:38,  7.53s/it][Succeeded / Failed / Skipped / Total] 114 / 254 / 13 / 381:  38%|███▊      | 382/1000 [48:08<1:17:52,  7.56s/it]--------------------------------------------- Result 379 ---------------------------------------------
Create a builder for a given builder . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[alt]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[es]] : injectionPoints ) { try { Errors errorsForMember = [[es]] . isOptional ( ) ? new Errors ( [[es]] ) : errors . withSource ( [[es]] ) ; SingleMemberInjector injector = [[es]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[put]] , [[es]] , errorsForMember ) : new SingleMethodInjector ( this . [[put]] , [[es]] , errorsForMember ) ; [[alt]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a message . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[agent]] ( String [[literal]] , Object ... arguments ) { return [[agent]] ( null , [[literal]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Returns a list of usages . --> Converts a string to a map --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[causes]] = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[causes]] . containsKey ( causeEquivalence ) ) { [[causes]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[causeIdx]] = [[causes]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[causeIdx]] ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[text]] = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[text]] . containsKey ( causeEquivalence ) ) { [[text]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[cure]] = [[text]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[cure]] ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 255 / 13 / 382:  38%|███▊      | 382/1000 [48:08<1:17:52,  7.56s/it][Succeeded / Failed / Skipped / Total] 114 / 255 / 13 / 382:  38%|███▊      | 383/1000 [48:13<1:17:41,  7.56s/it][Succeeded / Failed / Skipped / Total] 114 / 256 / 13 / 383:  38%|███▊      | 383/1000 [48:13<1:17:41,  7.56s/it][Succeeded / Failed / Skipped / Total] 114 / 256 / 13 / 383:  38%|███▊      | 384/1000 [48:18<1:17:29,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 257 / 13 / 384:  38%|███▊      | 384/1000 [48:18<1:17:29,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 257 / 13 / 384:  38%|███▊      | 385/1000 [48:27<1:17:25,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 258 / 13 / 385:  38%|███▊      | 385/1000 [48:27<1:17:25,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 258 / 13 / 385:  39%|███▊      | 386/1000 [48:35<1:17:18,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 259 / 13 / 386:  39%|███▊      | 386/1000 [48:35<1:17:18,  7.55s/it][Succeeded / Failed / Skipped / Total] 114 / 259 / 13 / 386:  39%|███▊      | 387/1000 [48:38<1:17:02,  7.54s/it][Succeeded / Failed / Skipped / Total] 114 / 260 / 13 / 387:  39%|███▊      | 387/1000 [48:38<1:17:02,  7.54s/it][Succeeded / Failed / Skipped / Total] 114 / 260 / 13 / 387:  39%|███▉      | 388/1000 [48:44<1:16:52,  7.54s/it]Builds a set of operations . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int [[numErrorsBefore]] = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[after]] ( TypeLiteral < T > type , Errors [[pad]] ) throws ErrorsException { int [[parameters]] = [[pad]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[pad]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[pad]] ) ; [[pad]] . throwIfNewErrors ( [[parameters]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[pad]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[pad]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[pad]] . throwIfNewErrors ( [[parameters]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 383 ---------------------------------------------
Replies the stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String [[className]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[className]] ) && ! [[className]] . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String [[collection]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[collection]] ) && ! [[collection]] . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 384 ---------------------------------------------
Creates message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[agent]] ( Throwable cause , String [[a]] , Object ... [[ex]] ) { return [[agent]] ( cause , ImmutableList . of ( ) , [[a]] , [[ex]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 385 ---------------------------------------------
Converts an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource source = null ; if ( [[o]] instanceof ElementSource ) { source = ( ElementSource ) [[o]] ; [[o]] = source . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[function]] ( Object [[array]] ) { ElementSource source = null ; if ( [[array]] instanceof ElementSource ) { source = ( ElementSource ) [[array]] ; [[array]] = source . getDeclaringSource ( ) ; } return [[function]] ( [[array]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 386 ---------------------------------------------
Return true if the given class is a parent . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean shouldBeSkipped ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean shouldBeSkipped ( String [[child]] ) { return ( parent != null && parent . shouldBeSkipped ( [[child]] ) ) || classNamesToSkip . contains ( [[child]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 387 ---------------------------------------------
Create a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[fields]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 260 / 13 / 388:  39%|███▉      | 388/1000 [48:44<1:16:52,  7.54s/it][Succeeded / Failed / Skipped / Total] 115 / 260 / 13 / 388:  39%|███▉      | 389/1000 [48:51<1:16:44,  7.54s/it][Succeeded / Failed / Skipped / Total] 116 / 260 / 13 / 389:  39%|███▉      | 389/1000 [48:51<1:16:44,  7.54s/it][Succeeded / Failed / Skipped / Total] 116 / 260 / 13 / 389:  39%|███▉      | 390/1000 [48:54<1:16:29,  7.52s/it][Succeeded / Failed / Skipped / Total] 116 / 261 / 13 / 390:  39%|███▉      | 390/1000 [48:54<1:16:29,  7.52s/it][Succeeded / Failed / Skipped / Total] 116 / 261 / 13 / 390:  39%|███▉      | 391/1000 [48:54<1:16:11,  7.51s/it][Succeeded / Failed / Skipped / Total] 117 / 261 / 13 / 391:  39%|███▉      | 391/1000 [48:54<1:16:11,  7.51s/it][Succeeded / Failed / Skipped / Total] 117 / 261 / 13 / 391:  39%|███▉      | 392/1000 [49:00<1:16:00,  7.50s/it][Succeeded / Failed / Skipped / Total] 118 / 261 / 13 / 392:  39%|███▉      | 392/1000 [49:00<1:16:00,  7.50s/it][Succeeded / Failed / Skipped / Total] 118 / 261 / 13 / 392:  39%|███▉      | 393/1000 [49:10<1:15:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 118 / 262 / 13 / 393:  39%|███▉      | 393/1000 [49:10<1:15:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 118 / 262 / 13 / 393:  39%|███▉      | 394/1000 [49:10<1:15:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 118 / 262 / 14 / 394:  39%|███▉      | 394/1000 [49:10<1:15:37,  7.49s/it][Succeeded / Failed / Skipped / Total] 118 / 262 / 14 / 394:  40%|███▉      | 395/1000 [49:16<1:15:28,  7.49s/it][Succeeded / Failed / Skipped / Total] 119 / 262 / 14 / 395:  40%|███▉      | 395/1000 [49:16<1:15:28,  7.49s/it][Succeeded / Failed / Skipped / Total] 119 / 262 / 14 / 395:  40%|███▉      | 396/1000 [49:24<1:15:21,  7.49s/it]Gets the name of the module . --> Analyze a collection of objects --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[manager]] ( List < String > [[object]] ) { Preconditions . checkNotNull ( [[object]] , "The list of module class names cannot be null." ) ; for ( final String [[stack]] : [[object]] ) { if ( ! shouldBeSkipped ( [[stack]] ) ) { return new StackTraceElement ( [[stack]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Returns a new instance of the given type . --> Convert a value to a type --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[expect]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[expect]] ; } @ Override public String toString ( ) { return String . valueOf ( [[expect]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Main method for testing --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[bus]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[section]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[section]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 391 ---------------------------------------------
Pushes a key . --> Declarative Services method for example --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object source ) { doPushState ( [[key]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[dom]] ( com . google . inject . Key < ? > [[example]] , Object source ) { doPushState ( [[example]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
Renew processor . --> Register a processor --> Socre: 1.0

[[[[Adv]]]]: public void [[onEvent]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void [[begin]] ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Execute a task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T [[pr]] = null ; if ( null != task ) { try { [[pr]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[pr]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Throw IllegalStateException . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Add a processor . --> Register a specific type --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[processors]] . get ( type ) ; if ( processorList == null ) { this . [[processors]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[processors]] . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[program]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[have]] . get ( type ) ; if ( processorList == null ) { this . [[have]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[have]] . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 396 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 263 / 14 / 396:  40%|███▉      | 396/1000 [49:24<1:15:21,  7.49s/it][Succeeded / Failed / Skipped / Total] 119 / 263 / 14 / 396:  40%|███▉      | 397/1000 [49:28<1:15:09,  7.48s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 14 / 397:  40%|███▉      | 397/1000 [49:28<1:15:09,  7.48s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 14 / 397:  40%|███▉      | 398/1000 [49:28<1:14:50,  7.46s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 15 / 398:  40%|███▉      | 398/1000 [49:28<1:14:50,  7.46s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 15 / 398:  40%|███▉      | 399/1000 [49:29<1:14:32,  7.44s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 16 / 399:  40%|███▉      | 399/1000 [49:29<1:14:32,  7.44s/it][Succeeded / Failed / Skipped / Total] 119 / 264 / 16 / 399:  40%|████      | 400/1000 [49:32<1:14:18,  7.43s/it][Succeeded / Failed / Skipped / Total] 119 / 265 / 16 / 400:  40%|████      | 400/1000 [49:32<1:14:18,  7.43s/it][Succeeded / Failed / Skipped / Total] 119 / 265 / 16 / 400:  40%|████      | 401/1000 [49:32<1:13:59,  7.41s/it][Succeeded / Failed / Skipped / Total] 119 / 265 / 17 / 401:  40%|████      | 401/1000 [49:32<1:13:59,  7.41s/it][Succeeded / Failed / Skipped / Total] 119 / 265 / 17 / 401:  40%|████      | 402/1000 [49:33<1:13:43,  7.40s/it][Succeeded / Failed / Skipped / Total] 119 / 266 / 17 / 402:  40%|████      | 402/1000 [49:33<1:13:43,  7.40s/it][Succeeded / Failed / Skipped / Total] 119 / 266 / 17 / 402:  40%|████      | 403/1000 [49:42<1:13:38,  7.40s/it][Succeeded / Failed / Skipped / Total] 120 / 266 / 17 / 403:  40%|████      | 403/1000 [49:42<1:13:38,  7.40s/it][Succeeded / Failed / Skipped / Total] 120 / 266 / 17 / 403:  40%|████      | 404/1000 [49:50<1:13:31,  7.40s/it][Succeeded / Failed / Skipped / Total] 121 / 266 / 17 / 404:  40%|████      | 404/1000 [49:50<1:13:31,  7.40s/it][Succeeded / Failed / Skipped / Total] 121 / 266 / 17 / 404:  40%|████      | 405/1000 [49:50<1:13:13,  7.38s/it][Succeeded / Failed / Skipped / Total] 121 / 267 / 17 / 405:  40%|████      | 405/1000 [49:50<1:13:13,  7.38s/it][Succeeded / Failed / Skipped / Total] 121 / 267 / 17 / 405:  41%|████      | 406/1000 [49:50<1:12:55,  7.37s/it]Pushes the given dependency of this dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > previous = this . [[link]] ; this . [[link]] = dependency ; doPushState ( dependency , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 397 ---------------------------------------------
Register processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[buffer]] ( CommandCode [[command]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[command]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[command]] , cmd2processors . get ( [[command]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[command]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 398 ---------------------------------------------
Replies the URL . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 399 ---------------------------------------------
Decodes a byte array . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 400 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . [[processor]] == null ) { this . [[processor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[processor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 401 ---------------------------------------------
Free the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Sets the dependency provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[constructionContext]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[system]] ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[system]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 403 ---------------------------------------------
This method creates a new connection . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[exception]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 404 ---------------------------------------------
Removes a task from the pool . --> Removes the pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[draw]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 405 ---------------------------------------------
Returns an unmodifiable URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[element]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 267 / 18 / 406:  41%|████      | 406/1000 [49:50<1:12:55,  7.37s/it][Succeeded / Failed / Skipped / Total] 121 / 267 / 18 / 406:  41%|████      | 407/1000 [49:57<1:12:46,  7.36s/it][Succeeded / Failed / Skipped / Total] 122 / 267 / 18 / 407:  41%|████      | 407/1000 [49:57<1:12:46,  7.36s/it][Succeeded / Failed / Skipped / Total] 122 / 267 / 18 / 407:  41%|████      | 408/1000 [49:59<1:12:32,  7.35s/it][Succeeded / Failed / Skipped / Total] 123 / 267 / 18 / 408:  41%|████      | 408/1000 [49:59<1:12:32,  7.35s/it][Succeeded / Failed / Skipped / Total] 123 / 267 / 18 / 408:  41%|████      | 409/1000 [50:03<1:12:19,  7.34s/it][Succeeded / Failed / Skipped / Total] 123 / 268 / 18 / 409:  41%|████      | 409/1000 [50:03<1:12:19,  7.34s/it][Succeeded / Failed / Skipped / Total] 123 / 268 / 18 / 409:  41%|████      | 410/1000 [50:05<1:12:04,  7.33s/it][Succeeded / Failed / Skipped / Total] 124 / 268 / 18 / 410:  41%|████      | 410/1000 [50:05<1:12:04,  7.33s/it][Succeeded / Failed / Skipped / Total] 124 / 268 / 18 / 410:  41%|████      | 411/1000 [50:25<1:12:15,  7.36s/it][Succeeded / Failed / Skipped / Total] 125 / 268 / 18 / 411:  41%|████      | 411/1000 [50:25<1:12:15,  7.36s/it][Succeeded / Failed / Skipped / Total] 125 / 268 / 18 / 411:  41%|████      | 412/1000 [50:33<1:12:10,  7.36s/it][Succeeded / Failed / Skipped / Total] 125 / 269 / 18 / 412:  41%|████      | 412/1000 [50:33<1:12:10,  7.36s/it][Succeeded / Failed / Skipped / Total] 125 / 269 / 18 / 412:  41%|████▏     | 413/1000 [50:37<1:11:57,  7.36s/it]Adds a connection to the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 407 ---------------------------------------------
 --> removes the URL from the URL --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[address]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Returns a list of all jobs . --> Convert a node to a pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[open]] ( ) { Map < String , List < Connection > > [[node]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[node]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[node]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[node]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[node]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[node]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 409 ---------------------------------------------
Gets the processor command . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[load]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . [[line]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 410 ---------------------------------------------
Submits a new pool . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[when]] ( ConnectionPool pool , Url [[archive]] ) throws RemotingException , InterruptedException { String poolKey = [[archive]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Sets the value of a property . --> Add a link to the link --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[bus]] ( String key , Object [[link]] ) { return attributes . putIfAbsent ( key , [[link]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Handles a future . --> [[[FAILED]]]

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = [[entry]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[change]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = [[change]] . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 270 / 18 / 413:  41%|████▏     | 413/1000 [50:37<1:11:57,  7.36s/it][Succeeded / Failed / Skipped / Total] 125 / 270 / 18 / 413:  41%|████▏     | 414/1000 [50:42<1:11:45,  7.35s/it][Succeeded / Failed / Skipped / Total] 125 / 271 / 18 / 414:  41%|████▏     | 414/1000 [50:42<1:11:45,  7.35s/it][Succeeded / Failed / Skipped / Total] 125 / 271 / 18 / 414:  42%|████▏     | 415/1000 [50:42<1:11:28,  7.33s/it][Succeeded / Failed / Skipped / Total] 125 / 271 / 19 / 415:  42%|████▏     | 415/1000 [50:42<1:11:28,  7.33s/it][Succeeded / Failed / Skipped / Total] 125 / 271 / 19 / 415:  42%|████▏     | 416/1000 [50:44<1:11:14,  7.32s/it][Succeeded / Failed / Skipped / Total] 126 / 271 / 19 / 416:  42%|████▏     | 416/1000 [50:44<1:11:14,  7.32s/it][Succeeded / Failed / Skipped / Total] 126 / 271 / 19 / 416:  42%|████▏     | 417/1000 [50:50<1:11:04,  7.31s/it]Closes the channel . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[add]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[band]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[net]] . getChannel ( ) ) , [[band]] . isSuccess ( ) , [[band]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[net]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Register a processor --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[client]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , [[client]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[x]] = [[client]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[x]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Starts a request . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 416 ---------------------------------------------
Handles a command . --> Handles a response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[add]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 271 / 19 / 417:  42%|████▏     | 417/1000 [50:50<1:11:04,  7.31s/it][Succeeded / Failed / Skipped / Total] 127 / 271 / 19 / 417:  42%|████▏     | 418/1000 [50:50<1:10:47,  7.30s/it][Succeeded / Failed / Skipped / Total] 128 / 271 / 19 / 418:  42%|████▏     | 418/1000 [50:50<1:10:47,  7.30s/it][Succeeded / Failed / Skipped / Total] 128 / 271 / 19 / 418:  42%|████▏     | 419/1000 [50:57<1:10:39,  7.30s/it][Succeeded / Failed / Skipped / Total] 129 / 271 / 19 / 419:  42%|████▏     | 419/1000 [50:57<1:10:39,  7.30s/it][Succeeded / Failed / Skipped / Total] 129 / 271 / 19 / 419:  42%|████▏     | 420/1000 [51:05<1:10:33,  7.30s/it][Succeeded / Failed / Skipped / Total] 129 / 272 / 19 / 420:  42%|████▏     | 420/1000 [51:05<1:10:33,  7.30s/it][Succeeded / Failed / Skipped / Total] 129 / 272 / 19 / 420:  42%|████▏     | 421/1000 [51:22<1:10:38,  7.32s/it][Succeeded / Failed / Skipped / Total] 130 / 272 / 19 / 421:  42%|████▏     | 421/1000 [51:22<1:10:38,  7.32s/it][Succeeded / Failed / Skipped / Total] 130 / 272 / 19 / 421:  42%|████▏     | 422/1000 [51:24<1:10:24,  7.31s/it][Succeeded / Failed / Skipped / Total] 131 / 272 / 19 / 422:  42%|████▏     | 422/1000 [51:24<1:10:24,  7.31s/it][Succeeded / Failed / Skipped / Total] 131 / 272 / 19 / 422:  42%|████▏     | 423/1000 [51:31<1:10:16,  7.31s/it]Handles a command . --> Handle a command --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[when]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 418 ---------------------------------------------
Handles a request . --> Handles a transaction . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[a]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[a]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 419 ---------------------------------------------
Executes a task . --> Execute a task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ing]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[ing]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 420 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[print]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 421 ---------------------------------------------
Convert a byte to a byte . --> Returns an unsigned integer value . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int [[value]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[value]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[cut]] ( BitSet bs ) { int [[bit]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[bit]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[bit]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[bit]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 422 ---------------------------------------------
Register a new processor . --> Unregisters a UserType --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( [[interest]] , [[processor]] ) ; if ( [[preProcessor]] != null ) { String [[errMsg]] = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[foo]] ( MultiInterestUserProcessor < ? > [[hello]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[hello]] . multiInterest ( ) || [[hello]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[method]] : [[hello]] . multiInterest ( ) ) { UserProcessor < ? > [[i]] = userProcessors . putIfAbsent ( [[method]] , [[hello]] ) ; if ( [[i]] != null ) { String [[type]] = "Processor with interest key [" + [[method]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[type]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 272 / 19 / 423:  42%|████▏     | 423/1000 [51:31<1:10:16,  7.31s/it][Succeeded / Failed / Skipped / Total] 132 / 272 / 19 / 423:  42%|████▏     | 424/1000 [51:31<1:09:59,  7.29s/it][Succeeded / Failed / Skipped / Total] 132 / 272 / 20 / 424:  42%|████▏     | 424/1000 [51:31<1:09:59,  7.29s/it][Succeeded / Failed / Skipped / Total] 132 / 272 / 20 / 424:  42%|████▎     | 425/1000 [51:32<1:09:44,  7.28s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 20 / 425:  42%|████▎     | 425/1000 [51:32<1:09:44,  7.28s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 20 / 425:  43%|████▎     | 426/1000 [51:33<1:09:27,  7.26s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 21 / 426:  43%|████▎     | 426/1000 [51:33<1:09:27,  7.26s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 21 / 426:  43%|████▎     | 427/1000 [51:33<1:09:11,  7.24s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 22 / 427:  43%|████▎     | 427/1000 [51:33<1:09:11,  7.24s/it][Succeeded / Failed / Skipped / Total] 133 / 272 / 22 / 427:  43%|████▎     | 428/1000 [51:37<1:09:00,  7.24s/it][Succeeded / Failed / Skipped / Total] 133 / 273 / 22 / 428:  43%|████▎     | 428/1000 [51:37<1:09:00,  7.24s/it][Succeeded / Failed / Skipped / Total] 133 / 273 / 22 / 428:  43%|████▎     | 429/1000 [51:38<1:08:43,  7.22s/it][Succeeded / Failed / Skipped / Total] 133 / 273 / 23 / 429:  43%|████▎     | 429/1000 [51:38<1:08:43,  7.22s/it][Succeeded / Failed / Skipped / Total] 133 / 273 / 23 / 429:  43%|████▎     | 430/1000 [51:43<1:08:34,  7.22s/it]Convert a bit to a byte array . --> Returns an unmodifiable view of the given element . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int [[element]] ) { if ( [[element]] > Byte . MAX_VALUE || [[element]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[element]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[element]] != 0 ) { if ( [[element]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[element]] = ( byte ) ( [[element]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Stops the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Add a Task . --> Adds a URL to a URL . --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[itself]] = new ReconnectTask ( ) ; [[itself]] . url = url ; tasks . add ( [[itself]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
Returns a list of connection clusters . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 427 ---------------------------------------------
Shuts down the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
Sends a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[oneway]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[cause]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 429 ---------------------------------------------
Returns the default value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 273 / 23 / 430:  43%|████▎     | 430/1000 [51:43<1:08:34,  7.22s/it][Succeeded / Failed / Skipped / Total] 134 / 273 / 23 / 430:  43%|████▎     | 431/1000 [51:44<1:08:18,  7.20s/it][Succeeded / Failed / Skipped / Total] 134 / 273 / 24 / 431:  43%|████▎     | 431/1000 [51:44<1:08:18,  7.20s/it][Succeeded / Failed / Skipped / Total] 134 / 273 / 24 / 431:  43%|████▎     | 432/1000 [51:44<1:08:02,  7.19s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 24 / 432:  43%|████▎     | 432/1000 [51:44<1:08:02,  7.19s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 24 / 432:  43%|████▎     | 433/1000 [51:44<1:07:45,  7.17s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 25 / 433:  43%|████▎     | 433/1000 [51:44<1:07:45,  7.17s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 25 / 433:  43%|████▎     | 434/1000 [51:45<1:07:29,  7.15s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 26 / 434:  43%|████▎     | 434/1000 [51:45<1:07:29,  7.15s/it][Succeeded / Failed / Skipped / Total] 135 / 273 / 26 / 434:  44%|████▎     | 435/1000 [51:58<1:07:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 136 / 273 / 26 / 435:  44%|████▎     | 435/1000 [51:58<1:07:29,  7.17s/it][Succeeded / Failed / Skipped / Total] 136 / 273 / 26 / 435:  44%|████▎     | 436/1000 [52:08<1:07:26,  7.18s/it][Succeeded / Failed / Skipped / Total] 136 / 274 / 26 / 436:  44%|████▎     | 436/1000 [52:08<1:07:26,  7.18s/it][Succeeded / Failed / Skipped / Total] 136 / 274 / 26 / 436:  44%|████▎     | 437/1000 [52:10<1:07:12,  7.16s/it]Shutdown the server . --> Revokes a peer . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[compare]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 431 ---------------------------------------------
Indicates if the transaction is enabled . --> [[[SKIPPED]]]

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 432 ---------------------------------------------
Prints the given log . --> Formats a string . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[after]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 433 ---------------------------------------------
Returns the random number of random random number . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 434 ---------------------------------------------
Returns the value associated with the specified key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Gets a property . --> Returns the fully - qualified name . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[find]] ( String [[alice]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[alice]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 436 ---------------------------------------------
Returns true if the given user has a user . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 437 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 275 / 26 / 437:  44%|████▎     | 437/1000 [52:10<1:07:12,  7.16s/it][Succeeded / Failed / Skipped / Total] 136 / 275 / 26 / 437:  44%|████▍     | 438/1000 [52:13<1:07:00,  7.15s/it][Succeeded / Failed / Skipped / Total] 136 / 276 / 26 / 438:  44%|████▍     | 438/1000 [52:13<1:07:00,  7.15s/it][Succeeded / Failed / Skipped / Total] 136 / 276 / 26 / 438:  44%|████▍     | 439/1000 [52:24<1:06:58,  7.16s/it][Succeeded / Failed / Skipped / Total] 136 / 277 / 26 / 439:  44%|████▍     | 439/1000 [52:24<1:06:58,  7.16s/it][Succeeded / Failed / Skipped / Total] 136 / 277 / 26 / 439:  44%|████▍     | 440/1000 [52:32<1:06:52,  7.16s/it][Succeeded / Failed / Skipped / Total] 137 / 277 / 26 / 440:  44%|████▍     | 440/1000 [52:32<1:06:52,  7.16s/it][Succeeded / Failed / Skipped / Total] 137 / 277 / 26 / 440:  44%|████▍     | 441/1000 [52:33<1:06:37,  7.15s/it]Create a new failure . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int [[state]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( [[state]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( [[state]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( [[state]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 438 ---------------------------------------------
Create a new request . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext [[invokeContext]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[invokeContext]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[execute]] ( Object request , Connection conn , InvokeContext [[ain]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != [[ain]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 439 ---------------------------------------------
Handle a command . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[status]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Parses a command . --> Synchronously synchron --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[control]] ( ResponseCommand [[plan]] ) throws CodecException { RpcResponseCommand [[program]] = ( RpcResponseCommand ) [[plan]] ; [[program]] . deserialize ( ) ; return [[program]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 278 / 26 / 441:  44%|████▍     | 441/1000 [52:33<1:06:37,  7.15s/it][Succeeded / Failed / Skipped / Total] 137 / 278 / 26 / 441:  44%|████▍     | 442/1000 [52:36<1:06:24,  7.14s/it][Succeeded / Failed / Skipped / Total] 137 / 279 / 26 / 442:  44%|████▍     | 442/1000 [52:36<1:06:24,  7.14s/it][Succeeded / Failed / Skipped / Total] 137 / 279 / 26 / 442:  44%|████▍     | 443/1000 [52:45<1:06:19,  7.14s/it][Succeeded / Failed / Skipped / Total] 138 / 279 / 26 / 443:  44%|████▍     | 443/1000 [52:45<1:06:19,  7.14s/it][Succeeded / Failed / Skipped / Total] 138 / 279 / 26 / 443:  44%|████▍     | 444/1000 [52:55<1:06:16,  7.15s/it][Succeeded / Failed / Skipped / Total] 138 / 280 / 26 / 444:  44%|████▍     | 444/1000 [52:55<1:06:16,  7.15s/it][Succeeded / Failed / Skipped / Total] 138 / 280 / 26 / 444:  44%|████▍     | 445/1000 [52:57<1:06:03,  7.14s/it][Succeeded / Failed / Skipped / Total] 139 / 280 / 26 / 445:  44%|████▍     | 445/1000 [52:57<1:06:03,  7.14s/it][Succeeded / Failed / Skipped / Total] 139 / 280 / 26 / 445:  45%|████▍     | 446/1000 [53:02<1:05:53,  7.14s/it][Succeeded / Failed / Skipped / Total] 139 / 281 / 26 / 446:  45%|████▍     | 446/1000 [53:02<1:05:53,  7.14s/it][Succeeded / Failed / Skipped / Total] 139 / 281 / 26 / 446:  45%|████▍     | 447/1000 [53:03<1:05:38,  7.12s/it][Succeeded / Failed / Skipped / Total] 140 / 281 / 26 / 447:  45%|████▍     | 447/1000 [53:03<1:05:38,  7.12s/it][Succeeded / Failed / Skipped / Total] 140 / 281 / 26 / 447:  45%|████▍     | 448/1000 [53:14<1:05:36,  7.13s/it]Handle the response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[array]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Handles a command . --> [[[FAILED]]]

[[[[Adv]]]]: private static String detailErrMsg ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String [[command]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[command]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[command]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 443 ---------------------------------------------
Log a log message . --> Invokes a string . --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[targetIp]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[targetIp]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[cap]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[cap]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
Create a exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[q]] ( Throwable t , String errMsg ) { String [[counter]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[counter]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[trim]] ( final Channel [[code]] ) { if ( null == [[code]] ) { return StringUtils . EMPTY ; } final SocketAddress [[declaration]] = [[code]] . remoteAddress ( ) ; return doParse ( [[declaration]] != null ? [[declaration]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Create a new thread factory . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , [[threadFactory]] ) : new NioEventLoopGroup ( [[nThreads]] , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[ai]] , ThreadFactory [[ant]] ) { return epollEnabled ? new EpollEventLoopGroup ( [[ai]] , [[ant]] ) : new NioEventLoopGroup ( [[ai]] , [[ant]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 447 ---------------------------------------------
Parse a IPv6 address . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[pointer]] ) { if ( null == [[pointer]] ) { return StringUtils . EMPTY ; } final SocketAddress [[a]] = [[pointer]] . localAddress ( ) ; return doParse ( [[a]] != null ? [[a]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 282 / 26 / 448:  45%|████▍     | 448/1000 [53:14<1:05:36,  7.13s/it][Succeeded / Failed / Skipped / Total] 140 / 282 / 26 / 448:  45%|████▍     | 449/1000 [53:16<1:05:22,  7.12s/it][Succeeded / Failed / Skipped / Total] 140 / 283 / 26 / 449:  45%|████▍     | 449/1000 [53:16<1:05:22,  7.12s/it][Succeeded / Failed / Skipped / Total] 140 / 283 / 26 / 449:  45%|████▌     | 450/1000 [53:21<1:05:13,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 284 / 26 / 450:  45%|████▌     | 450/1000 [53:21<1:05:13,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 284 / 26 / 450:  45%|████▌     | 451/1000 [53:28<1:05:05,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 285 / 26 / 451:  45%|████▌     | 451/1000 [53:28<1:05:05,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 285 / 26 / 451:  45%|████▌     | 452/1000 [53:33<1:04:56,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 286 / 26 / 452:  45%|████▌     | 452/1000 [53:33<1:04:56,  7.11s/it][Succeeded / Failed / Skipped / Total] 140 / 286 / 26 / 452:  45%|████▌     | 453/1000 [53:33<1:04:40,  7.09s/it][Succeeded / Failed / Skipped / Total] 140 / 286 / 27 / 453:  45%|████▌     | 453/1000 [53:33<1:04:40,  7.09s/it][Succeeded / Failed / Skipped / Total] 140 / 286 / 27 / 453:  45%|████▌     | 454/1000 [53:36<1:04:27,  7.08s/it][Succeeded / Failed / Skipped / Total] 141 / 286 / 27 / 454:  45%|████▌     | 454/1000 [53:36<1:04:27,  7.08s/it][Succeeded / Failed / Skipped / Total] 141 / 286 / 27 / 454:  46%|████▌     | 455/1000 [53:43<1:04:21,  7.08s/it][Succeeded / Failed / Skipped / Total] 142 / 286 / 27 / 455:  46%|████▌     | 455/1000 [53:43<1:04:21,  7.08s/it][Succeeded / Failed / Skipped / Total] 142 / 286 / 27 / 455:  46%|████▌     | 456/1000 [53:45<1:04:08,  7.07s/it][Succeeded / Failed / Skipped / Total] 142 / 287 / 27 / 456:  46%|████▌     | 456/1000 [53:45<1:04:08,  7.07s/it][Succeeded / Failed / Skipped / Total] 142 / 287 / 27 / 456:  46%|████▌     | 457/1000 [53:47<1:03:54,  7.06s/it][Succeeded / Failed / Skipped / Total] 142 / 288 / 27 / 457:  46%|████▌     | 457/1000 [53:47<1:03:54,  7.06s/it][Succeeded / Failed / Skipped / Total] 142 / 288 / 27 / 457:  46%|████▌     | 458/1000 [53:54<1:03:47,  7.06s/it]Return a IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[after]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the IP address for the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[key]] ) { if ( null == [[key]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[key]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns a IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[v]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[v]] != null ) { return [[v]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Return a socket channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[e]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[e]] != null ) { return [[e]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Parses a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[ception]] ( final Channel [[set]] ) { if ( null == [[set]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[set]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Returns the number of connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 454 ---------------------------------------------
Add connection . --> Adds an element to the list . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[element]] ) { markAccess ( ) ; if ( null == [[element]] ) { return ; } boolean [[link]] = this . conns . addIfAbsent ( [[element]] ) ; if ( [[link]] ) { [[element]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 455 ---------------------------------------------
Remove a connection . --> Closes the key . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[pull]] ( Connection [[key]] ) { if ( null == [[key]] ) { return ; } boolean res = this . conns . remove ( [[key]] ) ; if ( res ) { [[key]] . decreaseRef ( ) ; } if ( [[key]] . noRef ( ) ) { [[key]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Returns IPv4 address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress [[stack]] = ( InetSocketAddress ) socketAddress ; if ( [[stack]] != null ) { InetAddress [[field]] = [[stack]] . getAddress ( ) ; if ( null != [[field]] ) { return [[field]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 457 ---------------------------------------------
Get the Java class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[client]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 288 / 27 / 458:  46%|████▌     | 458/1000 [53:54<1:03:47,  7.06s/it][Succeeded / Failed / Skipped / Total] 143 / 288 / 27 / 458:  46%|████▌     | 459/1000 [53:54<1:03:32,  7.05s/it][Succeeded / Failed / Skipped / Total] 143 / 288 / 28 / 459:  46%|████▌     | 459/1000 [53:54<1:03:32,  7.05s/it][Succeeded / Failed / Skipped / Total] 143 / 288 / 28 / 459:  46%|████▌     | 460/1000 [53:55<1:03:17,  7.03s/it][Succeeded / Failed / Skipped / Total] 143 / 288 / 29 / 460:  46%|████▌     | 460/1000 [53:55<1:03:17,  7.03s/it][Succeeded / Failed / Skipped / Total] 143 / 288 / 29 / 460:  46%|████▌     | 461/1000 [53:59<1:03:07,  7.03s/it][Succeeded / Failed / Skipped / Total] 143 / 289 / 29 / 461:  46%|████▌     | 461/1000 [53:59<1:03:07,  7.03s/it][Succeeded / Failed / Skipped / Total] 143 / 289 / 29 / 461:  46%|████▌     | 462/1000 [53:59<1:02:52,  7.01s/it][Succeeded / Failed / Skipped / Total] 143 / 289 / 30 / 462:  46%|████▌     | 462/1000 [53:59<1:02:52,  7.01s/it][Succeeded / Failed / Skipped / Total] 143 / 290 / 30 / 463:  46%|████▋     | 463/1000 [53:59<1:02:37,  7.00s/it][Succeeded / Failed / Skipped / Total] 143 / 290 / 30 / 463:  46%|████▋     | 464/1000 [54:07<1:02:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 143 / 291 / 30 / 464:  46%|████▋     | 464/1000 [54:07<1:02:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 144 / 291 / 30 / 465:  46%|████▋     | 465/1000 [54:09<1:02:18,  6.99s/it][Succeeded / Failed / Skipped / Total] 144 / 291 / 30 / 465:  47%|████▋     | 466/1000 [54:13<1:02:07,  6.98s/it][Succeeded / Failed / Skipped / Total] 145 / 291 / 30 / 466:  47%|████▋     | 466/1000 [54:13<1:02:07,  6.98s/it]Start the monitor . --> Starts the monitoring . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long [[initialDelay]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[initialDelay]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long [[date]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , [[date]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Replies if the URL is valid . --> [[[SKIPPED]]]

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Marks the watermark . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 461 ---------------------------------------------
Register a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( String [[className]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void registerCustomSerializer ( String [[name]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[name]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[name]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 462 ---------------------------------------------
Creates a channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Gets the custom command line . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[program]] ( CommandCode [[stack]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[stack]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 464 ---------------------------------------------
Returns a Framecode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[on]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 465 ---------------------------------------------
Validates the given position . --> Validates a byte array . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[array]] , int mark ) throws InvalidDataException { try { [[array]] . position ( [[array]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[array]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[array]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 466 ---------------------------------------------
Set code . --> Print character . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[print]] ( int [[a]] ) { this . code = [[a]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 467 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 145 / 291 / 31 / 467:  47%|████▋     | 467/1000 [54:13<1:01:53,  6.97s/it][Succeeded / Failed / Skipped / Total] 145 / 291 / 31 / 467:  47%|████▋     | 468/1000 [54:14<1:01:39,  6.95s/it][Succeeded / Failed / Skipped / Total] 146 / 291 / 31 / 468:  47%|████▋     | 468/1000 [54:14<1:01:39,  6.95s/it][Succeeded / Failed / Skipped / Total] 146 / 292 / 31 / 469:  47%|████▋     | 469/1000 [54:17<1:01:27,  6.94s/it][Succeeded / Failed / Skipped / Total] 146 / 292 / 31 / 469:  47%|████▋     | 470/1000 [54:19<1:01:15,  6.93s/it][Succeeded / Failed / Skipped / Total] 147 / 292 / 31 / 470:  47%|████▋     | 470/1000 [54:19<1:01:15,  6.93s/it][Succeeded / Failed / Skipped / Total] 148 / 292 / 31 / 471:  47%|████▋     | 471/1000 [54:22<1:01:04,  6.93s/it][Succeeded / Failed / Skipped / Total] 148 / 292 / 31 / 471:  47%|████▋     | 472/1000 [54:22<1:00:49,  6.91s/it][Succeeded / Failed / Skipped / Total] 148 / 292 / 32 / 472:  47%|████▋     | 472/1000 [54:22<1:00:49,  6.91s/it][Succeeded / Failed / Skipped / Total] 149 / 292 / 32 / 473:  47%|████▋     | 473/1000 [54:26<1:00:39,  6.91s/it][Succeeded / Failed / Skipped / Total] 149 / 292 / 32 / 473:  47%|████▋     | 474/1000 [54:28<1:00:26,  6.89s/it][Succeeded / Failed / Skipped / Total] 150 / 292 / 32 / 474:  47%|████▋     | 474/1000 [54:28<1:00:26,  6.89s/it]Helper method to create a new limiter . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 468 ---------------------------------------------
Updates the byte code . --> Push a byte buffer . --> Socre: 1.0

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[pay]] = ByteBuffer . allocate ( 2 + by . length ) ; [[pay]] . put ( buf ) ; [[pay]] . put ( by ) ; [[pay]] . rewind ( ) ; super . setPayload ( [[pay]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[a]] = ByteBuffer . allocate ( 2 + by . length ) ; [[a]] . put ( buf ) ; [[a]] . put ( by ) ; [[a]] . rewind ( ) ; super . setPayload ( [[a]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 469 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[loop]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 470 ---------------------------------------------
Does the given protocol . --> Returns a Handshakprotocol . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[protocol]] : knownProtocols ) { if ( [[protocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[protocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
Generate a string for the given string . --> Calculates the SHA1 - 1 hash . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[drop]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 472 ---------------------------------------------
Handle a web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Process a web socket . --> Populate web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 474 ---------------------------------------------
Send packet . --> Sends a block . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[link]] ) throws IncompleteException { if ( maxpacketsize < [[link]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[link]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 475 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 292 / 32 / 475:  48%|████▊     | 475/1000 [54:30<1:00:14,  6.88s/it][Succeeded / Failed / Skipped / Total] 151 / 292 / 32 / 475:  48%|████▊     | 476/1000 [54:36<1:00:07,  6.88s/it][Succeeded / Failed / Skipped / Total] 152 / 292 / 32 / 476:  48%|████▊     | 476/1000 [54:36<1:00:07,  6.88s/it][Succeeded / Failed / Skipped / Total] 153 / 292 / 32 / 477:  48%|████▊     | 477/1000 [54:42<59:58,  6.88s/it]  [Succeeded / Failed / Skipped / Total] 153 / 292 / 32 / 477:  48%|████▊     | 478/1000 [54:47<59:49,  6.88s/it][Succeeded / Failed / Skipped / Total] 154 / 292 / 32 / 478:  48%|████▊     | 478/1000 [54:47<59:49,  6.88s/it][Succeeded / Failed / Skipped / Total] 154 / 292 / 32 / 478:  48%|████▊     | 479/1000 [54:48<59:37,  6.87s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 32 / 479:  48%|████▊     | 479/1000 [54:48<59:37,  6.87s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 32 / 479:  48%|████▊     | 480/1000 [54:50<59:25,  6.86s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 33 / 480:  48%|████▊     | 480/1000 [54:50<59:25,  6.86s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 33 / 480:  48%|████▊     | 481/1000 [54:52<59:12,  6.84s/it]Read the web socket . --> Send web socket . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[c]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[c]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 476 ---------------------------------------------
Reads data from the given frame . --> Given a data set . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl [[b]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[b]] . getWebSocketListener ( ) . onWebsocketMessage ( [[b]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[b]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[b]] . getWebSocketListener ( ) . onWebsocketMessage ( [[b]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[b]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Checks if a data frame is completed . --> Sends a data . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[ble]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[ble]] ; addToBufferList ( [[ble]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Process a single frame . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( [[webSocketImpl]] , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl [[bucket]] , Framedata [[s]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[s]] ) ; } else if ( [[s]] . isFin ( ) ) { processFrameIsFin ( [[bucket]] , [[s]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 479 ---------------------------------------------
Calculate the size of a limit . --> Allocates a new limit . --> Socre: 1.0

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[bit]] = getByteBufferListSize ( ) ; if ( [[bit]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[bit]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Sends a Handwidth to a Handshakes . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 481 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 155 / 292 / 34 / 481:  48%|████▊     | 481/1000 [54:52<59:12,  6.84s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 34 / 481:  48%|████▊     | 482/1000 [54:52<58:58,  6.83s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 35 / 482:  48%|████▊     | 482/1000 [54:52<58:58,  6.83s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 35 / 482:  48%|████▊     | 483/1000 [54:52<58:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 36 / 483:  48%|████▊     | 483/1000 [54:52<58:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 155 / 292 / 36 / 483:  48%|████▊     | 484/1000 [55:01<58:40,  6.82s/it][Succeeded / Failed / Skipped / Total] 156 / 292 / 36 / 484:  48%|████▊     | 484/1000 [55:01<58:40,  6.82s/it][Succeeded / Failed / Skipped / Total] 156 / 292 / 36 / 484:  48%|████▊     | 485/1000 [55:07<58:31,  6.82s/it][Succeeded / Failed / Skipped / Total] 157 / 292 / 36 / 485:  48%|████▊     | 485/1000 [55:07<58:31,  6.82s/it][Succeeded / Failed / Skipped / Total] 157 / 292 / 36 / 485:  49%|████▊     | 486/1000 [55:13<58:24,  6.82s/it][Succeeded / Failed / Skipped / Total] 157 / 293 / 36 / 486:  49%|████▊     | 486/1000 [55:13<58:24,  6.82s/it][Succeeded / Failed / Skipped / Total] 157 / 293 / 36 / 486:  49%|████▊     | 487/1000 [55:13<58:10,  6.80s/it][Succeeded / Failed / Skipped / Total] 157 / 293 / 37 / 487:  49%|████▊     | 487/1000 [55:13<58:10,  6.80s/it][Succeeded / Failed / Skipped / Total] 157 / 293 / 37 / 487:  49%|████▉     | 488/1000 [55:16<58:00,  6.80s/it][Succeeded / Failed / Skipped / Total] 158 / 293 / 37 / 488:  49%|████▉     | 488/1000 [55:16<58:00,  6.80s/it][Succeeded / Failed / Skipped / Total] 158 / 293 / 37 / 488:  49%|████▉     | 489/1000 [55:19<57:48,  6.79s/it][Succeeded / Failed / Skipped / Total] 158 / 294 / 37 / 489:  49%|████▉     | 489/1000 [55:19<57:48,  6.79s/it][Succeeded / Failed / Skipped / Total] 158 / 294 / 37 / 489:  49%|████▉     | 490/1000 [55:21<57:36,  6.78s/it]Does a Handter . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 482 ---------------------------------------------
Handles socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 483 ---------------------------------------------
Handles a response . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
Flushes the connection . --> Handle exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[begin]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 485 ---------------------------------------------
Returns the total number of bytes in bytes . --> Allocate a byte buffer . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[delay]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[string]] : byteBufferList ) { totalSize += [[string]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 486 ---------------------------------------------
Returns a byte array of bytes . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[line]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Send a message --> Sends a Role --> Socre: 1.0

[[[[Adv]]]]: @ Override public void send ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String [[null]] ) { if ( [[null]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[null]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 489 ---------------------------------------------
Sends a reason . --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 490 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 295 / 37 / 490:  49%|████▉     | 490/1000 [55:21<57:36,  6.78s/it][Succeeded / Failed / Skipped / Total] 158 / 295 / 37 / 490:  49%|████▉     | 491/1000 [55:26<57:28,  6.78s/it][Succeeded / Failed / Skipped / Total] 159 / 295 / 37 / 491:  49%|████▉     | 491/1000 [55:26<57:28,  6.78s/it][Succeeded / Failed / Skipped / Total] 159 / 295 / 37 / 491:  49%|████▉     | 492/1000 [55:26<57:14,  6.76s/it][Succeeded / Failed / Skipped / Total] 159 / 296 / 37 / 492:  49%|████▉     | 492/1000 [55:26<57:14,  6.76s/it][Succeeded / Failed / Skipped / Total] 159 / 296 / 37 / 492:  49%|████▉     | 493/1000 [55:27<57:02,  6.75s/it][Succeeded / Failed / Skipped / Total] 160 / 296 / 37 / 493:  49%|████▉     | 493/1000 [55:27<57:02,  6.75s/it][Succeeded / Failed / Skipped / Total] 160 / 296 / 37 / 493:  49%|████▉     | 494/1000 [55:28<56:49,  6.74s/it][Succeeded / Failed / Skipped / Total] 161 / 296 / 37 / 494:  49%|████▉     | 494/1000 [55:28<56:49,  6.74s/it][Succeeded / Failed / Skipped / Total] 161 / 296 / 37 / 494:  50%|████▉     | 495/1000 [55:35<56:42,  6.74s/it]Starts a new thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[set]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 491 ---------------------------------------------
Get the scheme port . --> Get scheme . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[difference]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 492 ---------------------------------------------
Generates a text . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 493 ---------------------------------------------
Send a request to the server . --> Executes a HTTP request . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[payload]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 494 ---------------------------------------------
Sets the connection . --> Truncate connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[fore]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 296 / 37 / 495:  50%|████▉     | 495/1000 [55:35<56:42,  6.74s/it][Succeeded / Failed / Skipped / Total] 162 / 296 / 37 / 495:  50%|████▉     | 496/1000 [55:42<56:36,  6.74s/it][Succeeded / Failed / Skipped / Total] 163 / 296 / 37 / 496:  50%|████▉     | 496/1000 [55:42<56:36,  6.74s/it][Succeeded / Failed / Skipped / Total] 163 / 296 / 37 / 496:  50%|████▉     | 497/1000 [55:47<56:27,  6.74s/it][Succeeded / Failed / Skipped / Total] 164 / 296 / 37 / 497:  50%|████▉     | 497/1000 [55:47<56:27,  6.74s/it][Succeeded / Failed / Skipped / Total] 164 / 296 / 37 / 497:  50%|████▉     | 498/1000 [55:51<56:18,  6.73s/it][Succeeded / Failed / Skipped / Total] 165 / 296 / 37 / 498:  50%|████▉     | 498/1000 [55:51<56:18,  6.73s/it][Succeeded / Failed / Skipped / Total] 165 / 296 / 37 / 498:  50%|████▉     | 499/1000 [56:01<56:15,  6.74s/it][Succeeded / Failed / Skipped / Total] 165 / 297 / 37 / 499:  50%|████▉     | 499/1000 [56:01<56:15,  6.74s/it][Succeeded / Failed / Skipped / Total] 165 / 297 / 37 / 499:  50%|█████     | 500/1000 [56:03<56:03,  6.73s/it][Succeeded / Failed / Skipped / Total] 166 / 297 / 37 / 500:  50%|█████     | 500/1000 [56:03<56:03,  6.73s/it][Succeeded / Failed / Skipped / Total] 166 / 297 / 37 / 500:  50%|█████     | 501/1000 [56:03<55:50,  6.71s/it][Succeeded / Failed / Skipped / Total] 166 / 297 / 38 / 501:  50%|█████     | 501/1000 [56:03<55:50,  6.71s/it][Succeeded / Failed / Skipped / Total] 166 / 297 / 38 / 501:  50%|█████     | 502/1000 [56:04<55:37,  6.70s/it]Starts a new connection . --> Shutdown all connections . --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[process]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[process]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 496 ---------------------------------------------
Shutdown the connection . --> Shutdown this instance . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[cancel]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Stop the connection . --> Disconnect a cluster . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[execute]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[kill]]" != "[[kill]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 498 ---------------------------------------------
Start a new connection . --> Connect to Connect . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[True]]" == "[[True]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[chain]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[lead]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "[[check]]" == "[[check]]" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Open a connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 500 ---------------------------------------------
Sends a server to a Handwidth . --> Send a Handshakes server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket [[conn]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[requests]] ( WebSocket [[client]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Adds a buffer to the queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 502 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 297 / 39 / 502:  50%|█████     | 502/1000 [56:04<55:37,  6.70s/it][Succeeded / Failed / Skipped / Total] 166 / 297 / 39 / 502:  50%|█████     | 503/1000 [56:12<55:32,  6.71s/it][Succeeded / Failed / Skipped / Total] 167 / 297 / 39 / 503:  50%|█████     | 503/1000 [56:12<55:32,  6.71s/it][Succeeded / Failed / Skipped / Total] 167 / 297 / 39 / 503:  50%|█████     | 504/1000 [56:13<55:19,  6.69s/it][Succeeded / Failed / Skipped / Total] 167 / 297 / 40 / 504:  50%|█████     | 504/1000 [56:13<55:19,  6.69s/it][Succeeded / Failed / Skipped / Total] 167 / 297 / 40 / 504:  50%|█████     | 505/1000 [56:14<55:07,  6.68s/it][Succeeded / Failed / Skipped / Total] 167 / 298 / 40 / 505:  50%|█████     | 505/1000 [56:14<55:07,  6.68s/it][Succeeded / Failed / Skipped / Total] 167 / 298 / 40 / 505:  51%|█████     | 506/1000 [56:17<54:57,  6.67s/it][Succeeded / Failed / Skipped / Total] 167 / 299 / 40 / 506:  51%|█████     | 506/1000 [56:17<54:57,  6.67s/it][Succeeded / Failed / Skipped / Total] 167 / 299 / 40 / 506:  51%|█████     | 507/1000 [56:17<54:44,  6.66s/it][Succeeded / Failed / Skipped / Total] 167 / 299 / 41 / 507:  51%|█████     | 507/1000 [56:17<54:44,  6.66s/it][Succeeded / Failed / Skipped / Total] 167 / 299 / 41 / 507:  51%|█████     | 508/1000 [56:24<54:37,  6.66s/it][Succeeded / Failed / Skipped / Total] 168 / 299 / 41 / 508:  51%|█████     | 508/1000 [56:24<54:37,  6.66s/it][Succeeded / Failed / Skipped / Total] 168 / 299 / 41 / 508:  51%|█████     | 509/1000 [56:24<54:24,  6.65s/it][Succeeded / Failed / Skipped / Total] 168 / 299 / 42 / 509:  51%|█████     | 509/1000 [56:24<54:24,  6.65s/it][Succeeded / Failed / Skipped / Total] 168 / 299 / 42 / 509:  51%|█████     | 510/1000 [56:29<54:16,  6.65s/it][Succeeded / Failed / Skipped / Total] 169 / 299 / 42 / 510:  51%|█████     | 510/1000 [56:29<54:16,  6.65s/it][Succeeded / Failed / Skipped / Total] 169 / 299 / 42 / 510:  51%|█████     | 511/1000 [56:30<54:04,  6.63s/it]Sets the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 503 ---------------------------------------------
Reads a message from the queue . --> Opens the key . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "[[fail]]" == "[[fail]]" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 504 ---------------------------------------------
Deletes the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 505 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[queue]] ( ) { int [[a]] = getAddress ( ) . getPort ( ) ; if ( [[a]] == 0 && server != null ) { [[a]] = server . socket ( ) . getLocalPort ( ) ; } return [[a]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 506 ---------------------------------------------
Send a status to the socket . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata [[f]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[loop]] ( WebSocket conn , Framedata [[de]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[de]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 507 ---------------------------------------------
Stops the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Returns the socket . --> Returns a channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[client]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[client]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 509 ---------------------------------------------
Flushes the given data . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Waits for a change . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[example]] ( int [[null]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[false]]" == "[[false]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 511 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 299 / 42 / 511:  51%|█████     | 511/1000 [56:30<54:04,  6.63s/it][Succeeded / Failed / Skipped / Total] 170 / 299 / 42 / 511:  51%|█████     | 512/1000 [56:36<53:57,  6.63s/it][Succeeded / Failed / Skipped / Total] 171 / 299 / 42 / 512:  51%|█████     | 512/1000 [56:36<53:57,  6.63s/it][Succeeded / Failed / Skipped / Total] 171 / 299 / 42 / 512:  51%|█████▏    | 513/1000 [56:39<53:47,  6.63s/it][Succeeded / Failed / Skipped / Total] 172 / 299 / 42 / 513:  51%|█████▏    | 513/1000 [56:39<53:47,  6.63s/it][Succeeded / Failed / Skipped / Total] 172 / 299 / 42 / 513:  51%|█████▏    | 514/1000 [56:40<53:35,  6.62s/it][Succeeded / Failed / Skipped / Total] 173 / 299 / 42 / 514:  51%|█████▏    | 514/1000 [56:40<53:35,  6.62s/it][Succeeded / Failed / Skipped / Total] 173 / 299 / 42 / 514:  52%|█████▏    | 515/1000 [56:47<53:29,  6.62s/it][Succeeded / Failed / Skipped / Total] 173 / 300 / 42 / 515:  52%|█████▏    | 515/1000 [56:47<53:29,  6.62s/it][Succeeded / Failed / Skipped / Total] 173 / 300 / 42 / 515:  52%|█████▏    | 516/1000 [56:48<53:16,  6.61s/it][Succeeded / Failed / Skipped / Total] 173 / 301 / 42 / 516:  52%|█████▏    | 516/1000 [56:48<53:16,  6.61s/it][Succeeded / Failed / Skipped / Total] 173 / 301 / 42 / 516:  52%|█████▏    | 517/1000 [56:48<53:04,  6.59s/it]Returns true if the current thread was started . --> Return true if this node is a thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[copy]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "[[right]]" == "[[right]]" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 512 ---------------------------------------------
Sends the given text . --> Associates the specified database . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[main]] , Collection < WebSocket > clients ) { if ( [[main]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[main]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Creates a new frames . --> Creates a DataFrame . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft [[draft]] , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( [[draft]] ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = [[draft]] . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = [[draft]] . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( [[draft]] , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft [[canvas]] , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( [[canvas]] ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = [[canvas]] . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = [[canvas]] . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( [[canvas]] , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 514 ---------------------------------------------
Send a request to a map --> Send a DataBuffer . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[clients]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[c]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[c]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 515 ---------------------------------------------
Start the server . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[down]] = server . socket ( ) ; [[down]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[down]] . setReuseAddress ( isReuseAddr ( ) ) ; [[down]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 516 ---------------------------------------------
Creates a persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[p]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 174 / 301 / 42 / 517:  52%|█████▏    | 517/1000 [56:48<53:04,  6.59s/it][Succeeded / Failed / Skipped / Total] 174 / 301 / 42 / 517:  52%|█████▏    | 518/1000 [57:00<53:02,  6.60s/it][Succeeded / Failed / Skipped / Total] 174 / 302 / 42 / 518:  52%|█████▏    | 518/1000 [57:00<53:02,  6.60s/it][Succeeded / Failed / Skipped / Total] 174 / 302 / 42 / 518:  52%|█████▏    | 519/1000 [57:03<52:53,  6.60s/it][Succeeded / Failed / Skipped / Total] 174 / 303 / 42 / 519:  52%|█████▏    | 519/1000 [57:03<52:53,  6.60s/it][Succeeded / Failed / Skipped / Total] 174 / 303 / 42 / 519:  52%|█████▏    | 520/1000 [57:13<52:49,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 303 / 42 / 520:  52%|█████▏    | 520/1000 [57:13<52:49,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 303 / 42 / 520:  52%|█████▏    | 521/1000 [57:19<52:42,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 304 / 42 / 521:  52%|█████▏    | 521/1000 [57:19<52:42,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 304 / 42 / 521:  52%|█████▏    | 522/1000 [57:24<52:34,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 305 / 42 / 522:  52%|█████▏    | 522/1000 [57:24<52:34,  6.60s/it][Succeeded / Failed / Skipped / Total] 175 / 305 / 42 / 522:  52%|█████▏    | 523/1000 [57:41<52:36,  6.62s/it][Succeeded / Failed / Skipped / Total] 176 / 305 / 42 / 523:  52%|█████▏    | 523/1000 [57:41<52:36,  6.62s/it][Succeeded / Failed / Skipped / Total] 176 / 305 / 42 / 523:  52%|█████▏    | 524/1000 [57:47<52:29,  6.62s/it][Succeeded / Failed / Skipped / Total] 176 / 306 / 42 / 524:  52%|█████▏    | 524/1000 [57:47<52:29,  6.62s/it][Succeeded / Failed / Skipped / Total] 176 / 306 / 42 / 524:  52%|█████▎    | 525/1000 [57:49<52:19,  6.61s/it][Succeeded / Failed / Skipped / Total] 176 / 307 / 42 / 525:  52%|█████▎    | 525/1000 [57:49<52:19,  6.61s/it][Succeeded / Failed / Skipped / Total] 176 / 307 / 42 / 525:  53%|█████▎    | 526/1000 [58:00<52:16,  6.62s/it][Succeeded / Failed / Skipped / Total] 177 / 307 / 42 / 526:  53%|█████▎    | 526/1000 [58:00<52:16,  6.62s/it][Succeeded / Failed / Skipped / Total] 177 / 307 / 42 / 526:  53%|█████▎    | 527/1000 [58:05<52:08,  6.61s/it]Converts a Bytes to a destination . --> Converts the given source into a destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[data]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 518 ---------------------------------------------
Returns a EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory [[emf]] = emfs . get ( name ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[example]] ( String name ) { EntityManagerFactory [[s]] = emfs . get ( name ) ; if ( [[s]] == null ) { return null ; } return [[s]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 519 ---------------------------------------------
Unregisters a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[block]] ) { withTransaction ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[string]] ) { withTransaction ( em -> { [[string]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Convert a map to a string . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[empty]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[empty]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 521 ---------------------------------------------
Convert a List to a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[function]] ) { List < T > out ; if ( [[function]] != null && [[function]] . length == 1 && [[function]] [ 0 ] instanceof List ) { out = ( List < T > ) [[function]] [ 0 ] ; } else { out = Arrays . asList ( [[function]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Convert a java . --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 523 ---------------------------------------------
Puts a key . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[operators]] ( play . api . i18n . Lang lang , String [[ing]] ) { return messages . isDefinedAt ( [[ing]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 524 ---------------------------------------------
Request a Request message . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[on]] ( Http . RequestHeader request ) { play . api . i18n . Messages msgs = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 525 ---------------------------------------------
Convenience method for creating a key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , String key , Object ... [[args]] ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[applying]] ( play . api . i18n . Lang [[h]] , String key , Object ... [[data]] ) { Seq < Object > [[task]] = convertArgsToScalaBuffer ( [[data]] ) ; return messages . apply ( key , [[task]] , [[h]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 526 ---------------------------------------------
Create a bindings . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[assembly]] ( GuiceableModule ... [[test]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[test]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 308 / 42 / 527:  53%|█████▎    | 527/1000 [58:05<52:08,  6.61s/it][Succeeded / Failed / Skipped / Total] 177 / 308 / 42 / 527:  53%|█████▎    | 528/1000 [58:08<51:58,  6.61s/it][Succeeded / Failed / Skipped / Total] 177 / 309 / 42 / 528:  53%|█████▎    | 528/1000 [58:08<51:58,  6.61s/it][Succeeded / Failed / Skipped / Total] 177 / 309 / 42 / 528:  53%|█████▎    | 529/1000 [58:15<51:51,  6.61s/it][Succeeded / Failed / Skipped / Total] 178 / 309 / 42 / 529:  53%|█████▎    | 529/1000 [58:15<51:51,  6.61s/it][Succeeded / Failed / Skipped / Total] 178 / 309 / 42 / 529:  53%|█████▎    | 530/1000 [58:19<51:43,  6.60s/it][Succeeded / Failed / Skipped / Total] 178 / 310 / 42 / 530:  53%|█████▎    | 530/1000 [58:19<51:43,  6.60s/it][Succeeded / Failed / Skipped / Total] 178 / 310 / 42 / 530:  53%|█████▎    | 531/1000 [58:21<51:32,  6.59s/it][Succeeded / Failed / Skipped / Total] 178 / 311 / 42 / 531:  53%|█████▎    | 531/1000 [58:21<51:32,  6.59s/it][Succeeded / Failed / Skipped / Total] 178 / 311 / 42 / 531:  53%|█████▎    | 532/1000 [58:24<51:22,  6.59s/it][Succeeded / Failed / Skipped / Total] 178 / 312 / 42 / 532:  53%|█████▎    | 532/1000 [58:24<51:22,  6.59s/it][Succeeded / Failed / Skipped / Total] 178 / 312 / 42 / 532:  53%|█████▎    | 533/1000 [58:28<51:13,  6.58s/it][Succeeded / Failed / Skipped / Total] 178 / 313 / 42 / 533:  53%|█████▎    | 533/1000 [58:28<51:13,  6.58s/it][Succeeded / Failed / Skipped / Total] 178 / 313 / 42 / 533:  53%|█████▎    | 534/1000 [58:35<51:08,  6.58s/it][Succeeded / Failed / Skipped / Total] 178 / 314 / 42 / 534:  53%|█████▎    | 534/1000 [58:35<51:08,  6.58s/it][Succeeded / Failed / Skipped / Total] 178 / 314 / 42 / 534:  54%|█████▎    | 535/1000 [58:36<50:56,  6.57s/it][Succeeded / Failed / Skipped / Total] 178 / 315 / 42 / 535:  54%|█████▎    | 535/1000 [58:36<50:56,  6.57s/it][Succeeded / Failed / Skipped / Total] 178 / 315 / 42 / 535:  54%|█████▎    | 536/1000 [58:36<50:44,  6.56s/it][Succeeded / Failed / Skipped / Total] 179 / 315 / 42 / 536:  54%|█████▎    | 536/1000 [58:36<50:44,  6.56s/it][Succeeded / Failed / Skipped / Total] 179 / 315 / 42 / 536:  54%|█████▎    | 537/1000 [58:39<50:34,  6.55s/it][Succeeded / Failed / Skipped / Total] 179 / 316 / 42 / 537:  54%|█████▎    | 537/1000 [58:39<50:34,  6.55s/it][Succeeded / Failed / Skipped / Total] 179 / 316 / 42 / 537:  54%|█████▍    | 538/1000 [58:44<50:26,  6.55s/it][Succeeded / Failed / Skipped / Total] 180 / 316 / 42 / 538:  54%|█████▍    | 538/1000 [58:44<50:26,  6.55s/it][Succeeded / Failed / Skipped / Total] 180 / 316 / 42 / 538:  54%|█████▍    | 539/1000 [58:44<50:14,  6.54s/it][Succeeded / Failed / Skipped / Total] 180 / 316 / 43 / 539:  54%|█████▍    | 539/1000 [58:44<50:14,  6.54s/it][Succeeded / Failed / Skipped / Total] 180 / 316 / 43 / 539:  54%|█████▍    | 540/1000 [58:47<50:05,  6.53s/it]Return the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[parameters]] ) { return bindings ( Guiceable . [[parameters]] ( [[parameters]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Returns a previously allocated . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[id]] ( play . api . inject . Binding < ? > ... [[id]] ) { return [[id]] ( Guiceable . bindings ( [[id]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
Returns the modules . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[test]] ) { return overrides ( Guiceable . [[test]] ( [[test]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 530 ---------------------------------------------
Sets the card . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Puts a challenge . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[ml]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[ml]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 532 ---------------------------------------------
Returns a new modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[net]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[net]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 533 ---------------------------------------------
Returns the bindings for the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[bound]] ( play . api . inject . Binding < ? > ... [[binding]] ) { return [[bound]] ( Guiceable . [[binding]] ( [[binding]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Returns a copy of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[file]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Returns the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[name]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 536 ---------------------------------------------
Retrieves a CompletionStage . --> Allocate a new call --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[call]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Gets the value of a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[system]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Convert a tuple to a tuple . --> Adapts the supplied internal . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[after]] < A , B > [[after]] ( A a , B b ) { return new [[after]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Convenience method for testing --> [[[SKIPPED]]]

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 540 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 316 / 43 / 540:  54%|█████▍    | 540/1000 [58:47<50:05,  6.53s/it][Succeeded / Failed / Skipped / Total] 181 / 316 / 43 / 540:  54%|█████▍    | 541/1000 [58:53<49:58,  6.53s/it][Succeeded / Failed / Skipped / Total] 182 / 316 / 43 / 541:  54%|█████▍    | 541/1000 [58:53<49:58,  6.53s/it][Succeeded / Failed / Skipped / Total] 182 / 316 / 43 / 541:  54%|█████▍    | 542/1000 [58:55<49:47,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 316 / 43 / 542:  54%|█████▍    | 542/1000 [58:55<49:47,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 316 / 43 / 542:  54%|█████▍    | 543/1000 [59:03<49:42,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 317 / 43 / 543:  54%|█████▍    | 543/1000 [59:03<49:42,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 317 / 43 / 543:  54%|█████▍    | 544/1000 [59:09<49:35,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 318 / 43 / 544:  54%|█████▍    | 544/1000 [59:09<49:35,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 318 / 43 / 544:  55%|█████▍    | 545/1000 [59:10<49:23,  6.51s/it][Succeeded / Failed / Skipped / Total] 183 / 319 / 43 / 545:  55%|█████▍    | 545/1000 [59:10<49:23,  6.51s/it][Succeeded / Failed / Skipped / Total] 183 / 319 / 43 / 545:  55%|█████▍    | 546/1000 [59:17<49:18,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 320 / 43 / 546:  55%|█████▍    | 546/1000 [59:17<49:18,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 320 / 43 / 546:  55%|█████▍    | 547/1000 [59:18<49:06,  6.51s/it][Succeeded / Failed / Skipped / Total] 183 / 321 / 43 / 547:  55%|█████▍    | 547/1000 [59:18<49:06,  6.51s/it][Succeeded / Failed / Skipped / Total] 183 / 321 / 43 / 547:  55%|█████▍    | 548/1000 [59:38<49:11,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 322 / 43 / 548:  55%|█████▍    | 548/1000 [59:38<49:11,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 322 / 43 / 548:  55%|█████▍    | 549/1000 [59:43<49:04,  6.53s/it]Convert a tuple to a tuple . --> Copies all elements from the supplied array . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[common]] < A , B , C , D , E > [[common]] ( A a , B b , C c , D d , E e ) { return new [[common]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 541 ---------------------------------------------
Create a unit tests . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[rest]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[rest]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new persistence unit . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[location]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[location]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[location]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 543 ---------------------------------------------
Generates a string for a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[process]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[open]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Converts JSON string to JSON string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[execute]] ( String [[ify]] ) { return Flow . of ( JsonNode . class ) . map ( [[execute]] -> { return ByteString . fromString ( Json . stringify ( [[execute]] ) ) ; } ) . via ( flow ( [[ify]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Returns a constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[be]] extends ConstraintValidator < ? , ? > > [[be]] newInstance ( Class < [[be]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Returns the prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[after]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 548 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[call]] ( RequestHeader request , String [[object]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[object]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 323 / 43 / 549:  55%|█████▍    | 549/1000 [59:43<49:04,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 323 / 43 / 549:  55%|█████▌    | 550/1000 [59:48<48:56,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 324 / 43 / 550:  55%|█████▌    | 550/1000 [59:48<48:56,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 324 / 43 / 550:  55%|█████▌    | 551/1000 [59:56<48:50,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 325 / 43 / 551:  55%|█████▌    | 551/1000 [59:56<48:50,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 325 / 43 / 551:  55%|█████▌    | 552/1000 [1:00:00<48:42,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 326 / 43 / 552:  55%|█████▌    | 552/1000 [1:00:00<48:42,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 326 / 43 / 552:  55%|█████▌    | 553/1000 [1:00:07<48:35,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 327 / 43 / 553:  55%|█████▌    | 553/1000 [1:00:07<48:35,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 327 / 43 / 553:  55%|█████▌    | 554/1000 [1:00:15<48:31,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 328 / 43 / 554:  55%|█████▌    | 554/1000 [1:00:15<48:31,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 328 / 43 / 554:  56%|█████▌    | 555/1000 [1:00:27<48:28,  6.54s/it]Parses a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[statusCode]] , String message ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( request , [[statusCode]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[line]] , String message ) { if ( [[line]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[line]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[line]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[line]] >= 400 && [[line]] < 500 ) { return onOtherClientError ( request , [[line]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[line]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
Returns a string representation of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[run]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 551 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader request , String [[object]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[end]] ( RequestHeader request , String [[start]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[client]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Handles exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[n]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[n]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[n]] , usefulException ) ; default : return onDevServerError ( [[n]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 555 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 329 / 43 / 555:  56%|█████▌    | 555/1000 [1:00:27<48:28,  6.54s/it][Succeeded / Failed / Skipped / Total] 183 / 329 / 43 / 555:  56%|█████▌    | 556/1000 [1:00:29<48:18,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 330 / 43 / 556:  56%|█████▌    | 556/1000 [1:00:29<48:18,  6.53s/it][Succeeded / Failed / Skipped / Total] 183 / 330 / 43 / 556:  56%|█████▌    | 557/1000 [1:00:30<48:07,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 331 / 43 / 557:  56%|█████▌    | 557/1000 [1:00:30<48:07,  6.52s/it][Succeeded / Failed / Skipped / Total] 183 / 331 / 43 / 557:  56%|█████▌    | 558/1000 [1:00:49<48:10,  6.54s/it][Succeeded / Failed / Skipped / Total] 183 / 332 / 43 / 558:  56%|█████▌    | 558/1000 [1:00:49<48:10,  6.54s/it][Succeeded / Failed / Skipped / Total] 183 / 332 / 43 / 558:  56%|█████▌    | 559/1000 [1:01:00<48:07,  6.55s/it][Succeeded / Failed / Skipped / Total] 184 / 332 / 43 / 559:  56%|█████▌    | 559/1000 [1:01:00<48:07,  6.55s/it][Succeeded / Failed / Skipped / Total] 184 / 332 / 43 / 559:  56%|█████▌    | 560/1000 [1:01:10<48:04,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 332 / 43 / 560:  56%|█████▌    | 560/1000 [1:01:10<48:04,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 332 / 43 / 560:  56%|█████▌    | 561/1000 [1:01:21<48:00,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 333 / 43 / 561:  56%|█████▌    | 561/1000 [1:01:21<48:00,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 333 / 43 / 561:  56%|█████▌    | 562/1000 [1:01:25<47:52,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 334 / 43 / 562:  56%|█████▌    | 562/1000 [1:01:25<47:52,  6.56s/it][Succeeded / Failed / Skipped / Total] 185 / 334 / 43 / 562:  56%|█████▋    | 563/1000 [1:01:28<47:43,  6.55s/it]Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[method]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Method to handle exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[declaration]] ( final Throwable [[authority]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[authority]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[status]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[status]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Returns a new directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[ii]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a jar directory . --> Convenience method for testing . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[program]] ( File [[bar]] , JarFile jarFile , String base ) { return [[program]] ( [[bar]] , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Return a byte array . --> Get a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[at]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Converts a jar file into a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[v]] , String base ) { FileRepository [[b]] = new JarRepository ( [[v]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[b]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Builds a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[function]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 563 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 185 / 335 / 43 / 563:  56%|█████▋    | 563/1000 [1:01:28<47:43,  6.55s/it][Succeeded / Failed / Skipped / Total] 185 / 335 / 43 / 563:  56%|█████▋    | 564/1000 [1:01:36<47:37,  6.55s/it][Succeeded / Failed / Skipped / Total] 186 / 335 / 43 / 564:  56%|█████▋    | 564/1000 [1:01:36<47:37,  6.55s/it][Succeeded / Failed / Skipped / Total] 186 / 335 / 43 / 564:  56%|█████▋    | 565/1000 [1:01:41<47:29,  6.55s/it][Succeeded / Failed / Skipped / Total] 186 / 336 / 43 / 565:  56%|█████▋    | 565/1000 [1:01:41<47:29,  6.55s/it][Succeeded / Failed / Skipped / Total] 186 / 336 / 43 / 565:  57%|█████▋    | 566/1000 [1:02:03<47:35,  6.58s/it][Succeeded / Failed / Skipped / Total] 186 / 337 / 43 / 566:  57%|█████▋    | 566/1000 [1:02:03<47:35,  6.58s/it][Succeeded / Failed / Skipped / Total] 186 / 337 / 43 / 566:  57%|█████▋    | 567/1000 [1:02:09<47:28,  6.58s/it][Succeeded / Failed / Skipped / Total] 186 / 338 / 43 / 567:  57%|█████▋    | 567/1000 [1:02:09<47:28,  6.58s/it][Succeeded / Failed / Skipped / Total] 186 / 338 / 43 / 567:  57%|█████▋    | 568/1000 [1:02:11<47:18,  6.57s/it][Succeeded / Failed / Skipped / Total] 187 / 338 / 43 / 568:  57%|█████▋    | 568/1000 [1:02:11<47:18,  6.57s/it][Succeeded / Failed / Skipped / Total] 187 / 338 / 43 / 568:  57%|█████▋    | 569/1000 [1:02:11<47:06,  6.56s/it][Succeeded / Failed / Skipped / Total] 187 / 338 / 44 / 569:  57%|█████▋    | 569/1000 [1:02:11<47:06,  6.56s/it][Succeeded / Failed / Skipped / Total] 187 / 338 / 44 / 569:  57%|█████▋    | 570/1000 [1:02:12<46:56,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 339 / 44 / 570:  57%|█████▋    | 570/1000 [1:02:12<46:56,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 339 / 44 / 570:  57%|█████▋    | 571/1000 [1:02:27<46:55,  6.56s/it][Succeeded / Failed / Skipped / Total] 187 / 340 / 44 / 571:  57%|█████▋    | 571/1000 [1:02:27<46:55,  6.56s/it][Succeeded / Failed / Skipped / Total] 187 / 340 / 44 / 571:  57%|█████▋    | 572/1000 [1:02:27<46:44,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 341 / 44 / 572:  57%|█████▋    | 572/1000 [1:02:27<46:44,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 341 / 44 / 572:  57%|█████▋    | 573/1000 [1:02:30<46:35,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 342 / 44 / 573:  57%|█████▋    | 573/1000 [1:02:30<46:35,  6.55s/it][Succeeded / Failed / Skipped / Total] 187 / 342 / 44 / 573:  57%|█████▋    | 574/1000 [1:02:31<46:24,  6.54s/it]Creates a new jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[jarFile]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[type]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[type]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
Extracts content from content . --> Convert a request to a string --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content content , String [[charset]] ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content content , String [[form]] ) { String [[scope]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Creates a charset . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[string]] ( String [[set]] , String charset ) { return new Strict ( ByteString . fromString ( [[set]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 566 ---------------------------------------------
Convert a byte array to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[event]] ( int status , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[event]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a JSON representation of the given status . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[driver]] ( int status , JsonNode [[man]] ) { return [[driver]] ( [[driver]] , [[man]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Send a stream to a stream . --> Download InputStream --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[ness]] ) { return status ( status ) . sendInputStream ( content , [[ness]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the username for the given user --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Return a copy of the Chunk . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[test]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 571 ---------------------------------------------
Returns a collection of preferred terms . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > [[com]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[com]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 572 ---------------------------------------------
Perform a call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[es]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 573 ---------------------------------------------
Sends a status message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content , JsonEncoding [[encoding]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[strings]] , JsonNode content , JsonEncoding [[capability]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[capability]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 574 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 343 / 44 / 574:  57%|█████▋    | 574/1000 [1:02:31<46:24,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 343 / 44 / 574:  57%|█████▊    | 575/1000 [1:02:41<46:20,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 344 / 44 / 575:  57%|█████▊    | 575/1000 [1:02:41<46:20,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 344 / 44 / 575:  58%|█████▊    | 576/1000 [1:02:48<46:14,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 345 / 44 / 576:  58%|█████▊    | 576/1000 [1:02:48<46:14,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 345 / 44 / 576:  58%|█████▊    | 577/1000 [1:02:50<46:03,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 346 / 44 / 577:  58%|█████▊    | 577/1000 [1:02:50<46:03,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 346 / 44 / 577:  58%|█████▊    | 578/1000 [1:02:52<45:54,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 347 / 44 / 578:  58%|█████▊    | 578/1000 [1:02:52<45:54,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 347 / 44 / 578:  58%|█████▊    | 579/1000 [1:02:53<45:43,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 348 / 44 / 579:  58%|█████▊    | 579/1000 [1:02:53<45:43,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 348 / 44 / 579:  58%|█████▊    | 580/1000 [1:02:59<45:37,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 349 / 44 / 580:  58%|█████▊    | 580/1000 [1:02:59<45:37,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 349 / 44 / 580:  58%|█████▊    | 581/1000 [1:03:08<45:32,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 350 / 44 / 581:  58%|█████▊    | 581/1000 [1:03:08<45:32,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 350 / 44 / 581:  58%|█████▊    | 582/1000 [1:03:13<45:24,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 351 / 44 / 582:  58%|█████▊    | 582/1000 [1:03:13<45:24,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 351 / 44 / 582:  58%|█████▊    | 583/1000 [1:03:16<45:15,  6.51s/it][Succeeded / Failed / Skipped / Total] 187 / 352 / 44 / 583:  58%|█████▊    | 583/1000 [1:03:16<45:15,  6.51s/it][Succeeded / Failed / Skipped / Total] 187 / 352 / 44 / 583:  58%|█████▊    | 584/1000 [1:03:27<45:12,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 353 / 44 / 584:  58%|█████▊    | 584/1000 [1:03:27<45:12,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 353 / 44 / 584:  58%|█████▊    | 585/1000 [1:03:31<45:04,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 354 / 44 / 585:  58%|█████▊    | 585/1000 [1:03:31<45:04,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 354 / 44 / 585:  59%|█████▊    | 586/1000 [1:03:42<45:00,  6.52s/it]Construct a file from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[of]] ( int [[i]] , File content ) { return [[of]] ( [[of]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Make a call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[object]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[object]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[join]] ( Http . Request request ) { return [[join]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns the absolute path . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[accept]] ( Http . Request request ) { return [[accept]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 578 ---------------------------------------------
Allocate a connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[c]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[c]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Allocate a connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[ii]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 580 ---------------------------------------------
Convert json array to JSON --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[e]] > [[e]] fromJson ( JsonNode json , Class < [[e]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Parse a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[generator]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Parses the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[example]] ) { try { return mapper ( ) . readTree ( [[example]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Converts a JSON object to a JsonNode --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[load]] ( final Object [[level]] ) { try { return mapper ( ) . valueToTree ( [[level]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Builds a HTTP http call . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[architecture]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[text]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[text]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 585 ---------------------------------------------
Create a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[branch]] ( String startPath , String [[connection]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 355 / 44 / 586:  59%|█████▊    | 586/1000 [1:03:42<45:00,  6.52s/it][Succeeded / Failed / Skipped / Total] 187 / 355 / 44 / 586:  59%|█████▊    | 587/1000 [1:03:57<44:59,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 356 / 44 / 587:  59%|█████▊    | 587/1000 [1:03:57<44:59,  6.54s/it][Succeeded / Failed / Skipped / Total] 187 / 356 / 44 / 587:  59%|█████▉    | 588/1000 [1:04:02<44:52,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 357 / 44 / 588:  59%|█████▉    | 588/1000 [1:04:02<44:52,  6.53s/it][Succeeded / Failed / Skipped / Total] 187 / 357 / 44 / 588:  59%|█████▉    | 589/1000 [1:04:11<44:47,  6.54s/it][Succeeded / Failed / Skipped / Total] 188 / 357 / 44 / 589:  59%|█████▉    | 589/1000 [1:04:11<44:47,  6.54s/it][Succeeded / Failed / Skipped / Total] 188 / 357 / 44 / 589:  59%|█████▉    | 590/1000 [1:04:18<44:41,  6.54s/it][Succeeded / Failed / Skipped / Total] 189 / 357 / 44 / 590:  59%|█████▉    | 590/1000 [1:04:18<44:41,  6.54s/it][Succeeded / Failed / Skipped / Total] 189 / 357 / 44 / 590:  59%|█████▉    | 591/1000 [1:04:21<44:32,  6.53s/it][Succeeded / Failed / Skipped / Total] 189 / 358 / 44 / 591:  59%|█████▉    | 591/1000 [1:04:21<44:32,  6.53s/it][Succeeded / Failed / Skipped / Total] 189 / 358 / 44 / 591:  59%|█████▉    | 592/1000 [1:04:29<44:27,  6.54s/it][Succeeded / Failed / Skipped / Total] 189 / 359 / 44 / 592:  59%|█████▉    | 592/1000 [1:04:29<44:27,  6.54s/it][Succeeded / Failed / Skipped / Total] 189 / 359 / 44 / 592:  59%|█████▉    | 593/1000 [1:04:34<44:19,  6.53s/it]Returns the constraints for the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[execute]] ( Set < ConstraintDescriptor < ? > > [[array]] ) { return [[array]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[execute]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Converts a list of Lists to an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[strings]] ) { final Display displayAnnotation = [[strings]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[strings]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 588 ---------------------------------------------
Returns the canonical canonical path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String [[url]] ) { String [ ] [[urlPath]] = toSegments ( [[url]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String [[meta]] ) { String [ ] [[format]] = toSegments ( [[meta]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : [[format]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[meta]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[meta]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 589 ---------------------------------------------
Obtains a date from a string . --> Create a cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[a]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[a]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 590 ---------------------------------------------
A convenience method to convert a string to a string representation . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[field]] ( String [[ax]] ) { try { return new CronExpression ( [[ax]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[ax]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
A convenience function . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[after]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Initializes the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[c]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 593 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 189 / 360 / 44 / 593:  59%|█████▉    | 593/1000 [1:04:34<44:19,  6.53s/it][Succeeded / Failed / Skipped / Total] 189 / 360 / 44 / 593:  59%|█████▉    | 594/1000 [1:04:40<44:11,  6.53s/it][Succeeded / Failed / Skipped / Total] 190 / 360 / 44 / 594:  59%|█████▉    | 594/1000 [1:04:40<44:11,  6.53s/it][Succeeded / Failed / Skipped / Total] 190 / 360 / 44 / 594:  60%|█████▉    | 595/1000 [1:04:44<44:04,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 360 / 44 / 595:  60%|█████▉    | 595/1000 [1:04:44<44:04,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 360 / 44 / 595:  60%|█████▉    | 596/1000 [1:04:50<43:56,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 361 / 44 / 596:  60%|█████▉    | 596/1000 [1:04:50<43:56,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 361 / 44 / 596:  60%|█████▉    | 597/1000 [1:04:54<43:48,  6.52s/it][Succeeded / Failed / Skipped / Total] 191 / 362 / 44 / 597:  60%|█████▉    | 597/1000 [1:04:54<43:48,  6.52s/it][Succeeded / Failed / Skipped / Total] 191 / 362 / 44 / 597:  60%|█████▉    | 598/1000 [1:04:54<43:38,  6.51s/it][Succeeded / Failed / Skipped / Total] 191 / 363 / 44 / 598:  60%|█████▉    | 598/1000 [1:04:54<43:38,  6.51s/it][Succeeded / Failed / Skipped / Total] 191 / 363 / 44 / 598:  60%|█████▉    | 599/1000 [1:04:54<43:27,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 364 / 44 / 599:  60%|█████▉    | 599/1000 [1:04:54<43:27,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 364 / 44 / 599:  60%|██████    | 600/1000 [1:05:04<43:22,  6.51s/it][Succeeded / Failed / Skipped / Total] 191 / 365 / 44 / 600:  60%|██████    | 600/1000 [1:05:04<43:22,  6.51s/it][Succeeded / Failed / Skipped / Total] 191 / 365 / 44 / 600:  60%|██████    | 601/1000 [1:05:07<43:14,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 366 / 44 / 601:  60%|██████    | 601/1000 [1:05:07<43:14,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 366 / 44 / 601:  60%|██████    | 602/1000 [1:05:10<43:05,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 367 / 44 / 602:  60%|██████    | 602/1000 [1:05:10<43:05,  6.50s/it][Succeeded / Failed / Skipped / Total] 191 / 367 / 44 / 602:  60%|██████    | 603/1000 [1:05:16<42:58,  6.49s/it][Succeeded / Failed / Skipped / Total] 191 / 368 / 44 / 603:  60%|██████    | 603/1000 [1:05:16<42:58,  6.49s/it][Succeeded / Failed / Skipped / Total] 191 / 368 / 44 / 603:  60%|██████    | 604/1000 [1:05:21<42:51,  6.49s/it]Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[function]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[function]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 594 ---------------------------------------------
Create a new Acampaign . --> Create an AAzure cache --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[config]] , cache , [[materializer]] ) ; return new AhcWSClient ( client , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[command]] , AhcHttpCache cache , Materializer [[command]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[command]] , cache , [[command]] ) ; return new AhcWSClient ( client , [[command]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 595 ---------------------------------------------
Returns a String array of a class . --> Merge two arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( [[toClassArray]] ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , [[toClassArray]] [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[merge]] ( Class < ? > [ ] [[stack]] , Class < ? > [ ] [[field]] , boolean autoboxing ) { if ( arrayGetLength ( [[stack]] ) != arrayGetLength ( [[field]] ) ) { return "[[blank]]" != "[[blank]]" ; } if ( [[stack]] == null ) { [[stack]] = EMPTY_CLASS_ARRAY ; } if ( [[field]] == null ) { [[field]] = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[stack]] . length ; i ++ ) { if ( [[merge]] ( [[stack]] [ i ] , [[field]] [ i ] , autoboxing ) == "[[blank]]" != "[[blank]]" ) { return "[[blank]]" != "[[blank]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 596 ---------------------------------------------
Returns a Java annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[certificate]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Returns an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[over]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Put a value . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void session ( String [[key]] , String [[value]] ) { session ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String [[state]] , String [[program]] ) { session ( ) . put ( [[state]] , [[program]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 599 ---------------------------------------------
Puts a String . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[key]] , String value ) { flash ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[header]] , String value ) { flash ( ) . put ( [[header]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Convert a binding to a Java implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[implementing]] ( final Class < ? extends T > [[program]] ) { return underlying . to ( [[program]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
Converts a Java binding to a Java Java Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[h]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
Returns the value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[after]] ( final BindingKey < ? extends T > [[options]] ) { return underlying . to ( [[options]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Gets the provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[supplier]] ( final Provider < ? extends T > [[network]] ) { return underlying . to ( [[network]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 604 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 369 / 44 / 604:  60%|██████    | 604/1000 [1:05:21<42:51,  6.49s/it][Succeeded / Failed / Skipped / Total] 191 / 369 / 44 / 604:  60%|██████    | 605/1000 [1:05:47<42:57,  6.52s/it][Succeeded / Failed / Skipped / Total] 191 / 370 / 44 / 605:  60%|██████    | 605/1000 [1:05:47<42:57,  6.52s/it][Succeeded / Failed / Skipped / Total] 191 / 370 / 44 / 605:  61%|██████    | 606/1000 [1:06:01<42:55,  6.54s/it][Succeeded / Failed / Skipped / Total] 191 / 371 / 44 / 606:  61%|██████    | 606/1000 [1:06:01<42:55,  6.54s/it][Succeeded / Failed / Skipped / Total] 191 / 371 / 44 / 606:  61%|██████    | 607/1000 [1:06:02<42:45,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 372 / 44 / 607:  61%|██████    | 607/1000 [1:06:02<42:45,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 372 / 44 / 607:  61%|██████    | 608/1000 [1:06:18<42:44,  6.54s/it][Succeeded / Failed / Skipped / Total] 191 / 373 / 44 / 608:  61%|██████    | 608/1000 [1:06:18<42:44,  6.54s/it][Succeeded / Failed / Skipped / Total] 191 / 373 / 44 / 608:  61%|██████    | 609/1000 [1:06:19<42:34,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 374 / 44 / 609:  61%|██████    | 609/1000 [1:06:19<42:34,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 374 / 44 / 609:  61%|██████    | 610/1000 [1:06:25<42:27,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 375 / 44 / 610:  61%|██████    | 610/1000 [1:06:25<42:27,  6.53s/it][Succeeded / Failed / Skipped / Total] 191 / 375 / 44 / 610:  61%|██████    | 611/1000 [1:06:26<42:17,  6.52s/it][Succeeded / Failed / Skipped / Total] 192 / 375 / 44 / 611:  61%|██████    | 611/1000 [1:06:26<42:17,  6.52s/it][Succeeded / Failed / Skipped / Total] 192 / 375 / 44 / 611:  61%|██████    | 612/1000 [1:06:31<42:10,  6.52s/it][Succeeded / Failed / Skipped / Total] 192 / 376 / 44 / 612:  61%|██████    | 612/1000 [1:06:31<42:10,  6.52s/it][Succeeded / Failed / Skipped / Total] 192 / 376 / 44 / 612:  61%|██████▏   | 613/1000 [1:06:35<42:02,  6.52s/it]Returns a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[function]] ) { return underlying . toProvider ( [[function]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Return the application . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[remove]] ( Application [[build]] ) { play . api . i18n . Langs langs = [[build]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a new completed completed . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang preferred ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > [[langSeq]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( [[langSeq]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application [[view]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[view]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > [[text]] = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( [[text]] ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 607 ---------------------------------------------
Creates a map with the specified map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[c]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Load a configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[i]] ( Function < Environment , Config > [[id]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[id]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Converts a map of Euclidevolutions to a EEuclid EEs . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[extension]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 610 ---------------------------------------------
Export a compiler . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[env]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[file]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[file]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the modules . --> Create a new Application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[heap]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[heap]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Returns the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[api]] ) { return load ( Guiceable . [[api]] ( [[api]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 377 / 44 / 613:  61%|██████▏   | 613/1000 [1:06:35<42:02,  6.52s/it][Succeeded / Failed / Skipped / Total] 192 / 377 / 44 / 613:  61%|██████▏   | 614/1000 [1:06:36<41:52,  6.51s/it][Succeeded / Failed / Skipped / Total] 192 / 378 / 44 / 614:  61%|██████▏   | 614/1000 [1:06:36<41:52,  6.51s/it][Succeeded / Failed / Skipped / Total] 192 / 378 / 44 / 614:  62%|██████▏   | 615/1000 [1:06:42<41:45,  6.51s/it][Succeeded / Failed / Skipped / Total] 192 / 379 / 44 / 615:  62%|██████▏   | 615/1000 [1:06:42<41:45,  6.51s/it][Succeeded / Failed / Skipped / Total] 192 / 379 / 44 / 615:  62%|██████▏   | 616/1000 [1:06:44<41:36,  6.50s/it][Succeeded / Failed / Skipped / Total] 192 / 380 / 44 / 616:  62%|██████▏   | 616/1000 [1:06:44<41:36,  6.50s/it][Succeeded / Failed / Skipped / Total] 192 / 380 / 44 / 616:  62%|██████▏   | 617/1000 [1:06:51<41:30,  6.50s/it][Succeeded / Failed / Skipped / Total] 193 / 380 / 44 / 617:  62%|██████▏   | 617/1000 [1:06:51<41:30,  6.50s/it][Succeeded / Failed / Skipped / Total] 193 / 380 / 44 / 617:  62%|██████▏   | 618/1000 [1:06:52<41:20,  6.49s/it][Succeeded / Failed / Skipped / Total] 193 / 381 / 44 / 618:  62%|██████▏   | 618/1000 [1:06:52<41:20,  6.49s/it][Succeeded / Failed / Skipped / Total] 193 / 381 / 44 / 618:  62%|██████▏   | 619/1000 [1:07:01<41:14,  6.50s/it][Succeeded / Failed / Skipped / Total] 193 / 382 / 44 / 619:  62%|██████▏   | 619/1000 [1:07:01<41:14,  6.50s/it][Succeeded / Failed / Skipped / Total] 193 / 382 / 44 / 619:  62%|██████▏   | 620/1000 [1:07:20<41:16,  6.52s/it][Succeeded / Failed / Skipped / Total] 193 / 383 / 44 / 620:  62%|██████▏   | 620/1000 [1:07:20<41:16,  6.52s/it][Succeeded / Failed / Skipped / Total] 193 / 383 / 44 / 620:  62%|██████▏   | 621/1000 [1:07:30<41:11,  6.52s/it]Returns the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[dom]] ) { return load ( Guiceable . [[dom]] ( [[dom]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[port]] ( play . api . inject . Binding < ? > ... [[status]] ) { return [[port]] ( Guiceable . [[status]] ( [[status]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Initializes the database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[evolution]] ( Database [[object]] , boolean autocommit , String [[change]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[object]] . asScala ( ) , [[change]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 616 ---------------------------------------------
Build application . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[player]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Sets the value of a property . -->  --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[execute]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 618 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[handle]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[handle]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Executes the given Entity . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[condition]] = this . emStack ( "True" == "True" ) ; if ( [[condition]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[condition]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
Gets the current thread context . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[move]] ( boolean [[generator]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 621 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 383 / 44 / 621:  62%|██████▏   | 621/1000 [1:07:30<41:11,  6.52s/it][Succeeded / Failed / Skipped / Total] 194 / 383 / 44 / 621:  62%|██████▏   | 622/1000 [1:07:34<41:03,  6.52s/it][Succeeded / Failed / Skipped / Total] 194 / 384 / 44 / 622:  62%|██████▏   | 622/1000 [1:07:34<41:03,  6.52s/it][Succeeded / Failed / Skipped / Total] 194 / 384 / 44 / 622:  62%|██████▏   | 623/1000 [1:07:43<40:58,  6.52s/it][Succeeded / Failed / Skipped / Total] 194 / 385 / 44 / 623:  62%|██████▏   | 623/1000 [1:07:43<40:58,  6.52s/it][Succeeded / Failed / Skipped / Total] 194 / 385 / 44 / 623:  62%|██████▏   | 624/1000 [1:07:43<40:48,  6.51s/it][Succeeded / Failed / Skipped / Total] 194 / 386 / 44 / 624:  62%|██████▏   | 624/1000 [1:07:43<40:48,  6.51s/it][Succeeded / Failed / Skipped / Total] 194 / 386 / 44 / 624:  62%|██████▎   | 625/1000 [1:07:49<40:41,  6.51s/it][Succeeded / Failed / Skipped / Total] 194 / 387 / 44 / 625:  62%|██████▎   | 625/1000 [1:07:49<40:41,  6.51s/it][Succeeded / Failed / Skipped / Total] 194 / 387 / 44 / 625:  63%|██████▎   | 626/1000 [1:07:53<40:33,  6.51s/it][Succeeded / Failed / Skipped / Total] 195 / 387 / 44 / 626:  63%|██████▎   | 626/1000 [1:07:53<40:33,  6.51s/it][Succeeded / Failed / Skipped / Total] 195 / 387 / 44 / 626:  63%|██████▎   | 627/1000 [1:07:56<40:24,  6.50s/it][Succeeded / Failed / Skipped / Total] 196 / 387 / 44 / 627:  63%|██████▎   | 627/1000 [1:07:56<40:24,  6.50s/it][Succeeded / Failed / Skipped / Total] 196 / 387 / 44 / 627:  63%|██████▎   | 628/1000 [1:08:00<40:17,  6.50s/it][Succeeded / Failed / Skipped / Total] 197 / 387 / 44 / 628:  63%|██████▎   | 628/1000 [1:08:00<40:17,  6.50s/it][Succeeded / Failed / Skipped / Total] 197 / 387 / 44 / 628:  63%|██████▎   | 629/1000 [1:08:02<40:07,  6.49s/it]Creates a flow . --> Creates how many how many how --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , [[Out]] > Flow < In , [[Out]] , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < FlowIn , [[Out]] , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , [[how]] > Flow < In , [[how]] , ? > [[after]] ( Flow < In , F . Either < FlowIn , [[how]] > , ? > splitter , Graph < UniformFanInShape < [[how]] , [[how]] > , ? > mergeStrategy , Flow < FlowIn , [[how]] , ? > [[above]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[how]] > , [[how]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[FlowIn]] , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < [[FlowIn]] , Out > > [[splitter]] , Flow < [[FlowIn]] , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[all]] , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < [[all]] , Out > > [[example]] , Flow < [[all]] , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( [[example]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 623 ---------------------------------------------
Return a collection of errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[algorithm]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 624 ---------------------------------------------
Method that initializes the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[definition]] ( T [[end]] ) { if ( [[end]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[end]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 625 ---------------------------------------------
Returns a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[convert]] ( Object [ ] [[ref]] ) { if ( [[ref]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[ref]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 626 ---------------------------------------------
Process a collection of messages . --> Add error messages to map --> Socre: 1.0

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > [[comments]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } [[comments]] . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( [[comments]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 627 ---------------------------------------------
Get the value for the given key . --> Get a string representation of this object . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[fetch]] ( String [[a]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[a]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 628 ---------------------------------------------
Convert a text to a String . --> Convert text to text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[convert]] > [[convert]] parse ( String text , Class < [[convert]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 629 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 387 / 44 / 629:  63%|██████▎   | 629/1000 [1:08:02<40:07,  6.49s/it][Succeeded / Failed / Skipped / Total] 198 / 387 / 44 / 629:  63%|██████▎   | 630/1000 [1:08:05<39:59,  6.49s/it][Succeeded / Failed / Skipped / Total] 199 / 387 / 44 / 630:  63%|██████▎   | 630/1000 [1:08:05<39:59,  6.49s/it][Succeeded / Failed / Skipped / Total] 199 / 387 / 44 / 630:  63%|██████▎   | 631/1000 [1:08:06<39:49,  6.48s/it][Succeeded / Failed / Skipped / Total] 199 / 388 / 44 / 631:  63%|██████▎   | 631/1000 [1:08:06<39:49,  6.48s/it][Succeeded / Failed / Skipped / Total] 199 / 388 / 44 / 631:  63%|██████▎   | 632/1000 [1:08:07<39:39,  6.47s/it][Succeeded / Failed / Skipped / Total] 199 / 388 / 45 / 632:  63%|██████▎   | 632/1000 [1:08:07<39:39,  6.47s/it][Succeeded / Failed / Skipped / Total] 199 / 388 / 45 / 632:  63%|██████▎   | 633/1000 [1:08:10<39:31,  6.46s/it][Succeeded / Failed / Skipped / Total] 199 / 389 / 45 / 633:  63%|██████▎   | 633/1000 [1:08:10<39:31,  6.46s/it][Succeeded / Failed / Skipped / Total] 199 / 389 / 45 / 633:  63%|██████▎   | 634/1000 [1:08:18<39:25,  6.46s/it][Succeeded / Failed / Skipped / Total] 199 / 390 / 45 / 634:  63%|██████▎   | 634/1000 [1:08:18<39:25,  6.46s/it][Succeeded / Failed / Skipped / Total] 199 / 390 / 45 / 634:  64%|██████▎   | 635/1000 [1:08:32<39:23,  6.48s/it][Succeeded / Failed / Skipped / Total] 199 / 391 / 45 / 635:  64%|██████▎   | 635/1000 [1:08:32<39:23,  6.48s/it][Succeeded / Failed / Skipped / Total] 199 / 391 / 45 / 635:  64%|██████▎   | 636/1000 [1:08:34<39:14,  6.47s/it]Converts a text field into a string . --> Parse text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[c]] > [[c]] parse ( Field field , String text ) { return ( [[c]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 630 ---------------------------------------------
Convert a string to a string --> Convert conversion to conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[to]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[to]] . class ) ) { return conversion . convert ( t , [[to]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Print a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[c]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 632 ---------------------------------------------
Register a TypeType . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 633 ---------------------------------------------
Convert a conversion to a conversion . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[c]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ) { return ( [[c]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[c]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[c]] . class ) ) { return conversion . convert ( t , [[c]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Creates a new form . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[empty]] ) { Form < Dynamic > [[h]] = super . fill ( new Dynamic ( [[empty]] ) ) ; return new DynamicForm ( [[h]] . rawData ( ) , [[h]] . files ( ) , [[h]] . errors ( ) , [[h]] . [[empty]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 635 ---------------------------------------------
Create a new strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[ant]] , Out > Flow < [[ant]] , Out , ? > actorRef ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[ant]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 391 / 45 / 636:  64%|██████▎   | 636/1000 [1:08:34<39:14,  6.47s/it][Succeeded / Failed / Skipped / Total] 200 / 391 / 45 / 636:  64%|██████▎   | 637/1000 [1:08:35<39:05,  6.46s/it][Succeeded / Failed / Skipped / Total] 200 / 392 / 45 / 637:  64%|██████▎   | 637/1000 [1:08:35<39:05,  6.46s/it][Succeeded / Failed / Skipped / Total] 200 / 392 / 45 / 637:  64%|██████▍   | 638/1000 [1:08:39<38:57,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 392 / 45 / 638:  64%|██████▍   | 638/1000 [1:08:39<38:57,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 392 / 45 / 638:  64%|██████▍   | 639/1000 [1:08:52<38:54,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 393 / 45 / 639:  64%|██████▍   | 639/1000 [1:08:52<38:54,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 393 / 45 / 639:  64%|██████▍   | 640/1000 [1:08:58<38:48,  6.47s/it]Register a converter . --> Converts the enumeration to a type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) sourceType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[b]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[b]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[value]] = ( A ) sourceType . getAnnotation ( [[b]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[value]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[b]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[b]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[value]] = ( A ) targetType . getAnnotation ( [[b]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[value]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[b]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Converts a string to a locale . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[create]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Gets the first node of the given node . --> Convert the given path to a Node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[a]] ( String path , Object node ) { return [[a]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 639 ---------------------------------------------
Returns a copy of the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[foo]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 394 / 45 / 640:  64%|██████▍   | 640/1000 [1:08:58<38:48,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 394 / 45 / 640:  64%|██████▍   | 641/1000 [1:09:01<38:39,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 395 / 45 / 641:  64%|██████▍   | 641/1000 [1:09:01<38:39,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 395 / 45 / 641:  64%|██████▍   | 642/1000 [1:09:14<38:36,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 396 / 45 / 642:  64%|██████▍   | 642/1000 [1:09:14<38:36,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 396 / 45 / 642:  64%|██████▍   | 643/1000 [1:09:15<38:27,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 397 / 45 / 643:  64%|██████▍   | 643/1000 [1:09:15<38:27,  6.46s/it][Succeeded / Failed / Skipped / Total] 201 / 397 / 45 / 643:  64%|██████▍   | 644/1000 [1:09:24<38:22,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 398 / 45 / 644:  64%|██████▍   | 644/1000 [1:09:24<38:22,  6.47s/it][Succeeded / Failed / Skipped / Total] 201 / 398 / 45 / 644:  64%|██████▍   | 645/1000 [1:09:50<38:26,  6.50s/it][Succeeded / Failed / Skipped / Total] 201 / 399 / 45 / 645:  64%|██████▍   | 645/1000 [1:09:50<38:26,  6.50s/it][Succeeded / Failed / Skipped / Total] 201 / 399 / 45 / 645:  65%|██████▍   | 646/1000 [1:10:07<38:25,  6.51s/it]Adapts the supplied array . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[thread]] ( T [ ] [[system]] ) { return [[thread]] ( java . util . Arrays . asList ( [[system]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Adds a new cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[name]] , value ) ; } else { add ( buf , [[name]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[contain]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[id]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[id]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[id]] , value ) ; } else { add ( buf , [[id]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 642 ---------------------------------------------
Produce a JSON message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[null]] , Out > MappedWebSocketAcceptor < [[null]] , Out > json ( Class < [[null]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Converts a list to a List . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[c]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[c]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 644 ---------------------------------------------
Construct a message from a message . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[transfer]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[transfer]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Returns the class name of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[load]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 646 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 202 / 399 / 45 / 646:  65%|██████▍   | 646/1000 [1:10:07<38:25,  6.51s/it][Succeeded / Failed / Skipped / Total] 202 / 399 / 45 / 646:  65%|██████▍   | 647/1000 [1:10:11<38:17,  6.51s/it][Succeeded / Failed / Skipped / Total] 203 / 399 / 45 / 647:  65%|██████▍   | 647/1000 [1:10:11<38:17,  6.51s/it][Succeeded / Failed / Skipped / Total] 203 / 399 / 45 / 647:  65%|██████▍   | 648/1000 [1:10:21<38:12,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 399 / 45 / 648:  65%|██████▍   | 648/1000 [1:10:21<38:12,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 399 / 45 / 648:  65%|██████▍   | 649/1000 [1:10:24<38:04,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 400 / 45 / 649:  65%|██████▍   | 649/1000 [1:10:24<38:04,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 400 / 45 / 649:  65%|██████▌   | 650/1000 [1:10:40<38:03,  6.52s/it][Succeeded / Failed / Skipped / Total] 204 / 401 / 45 / 650:  65%|██████▌   | 650/1000 [1:10:40<38:03,  6.52s/it][Succeeded / Failed / Skipped / Total] 204 / 401 / 45 / 650:  65%|██████▌   | 651/1000 [1:10:40<37:53,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 402 / 45 / 651:  65%|██████▌   | 651/1000 [1:10:40<37:53,  6.51s/it][Succeeded / Failed / Skipped / Total] 204 / 402 / 45 / 651:  65%|██████▌   | 652/1000 [1:11:06<37:57,  6.54s/it][Succeeded / Failed / Skipped / Total] 204 / 403 / 45 / 652:  65%|██████▌   | 652/1000 [1:11:06<37:57,  6.54s/it][Succeeded / Failed / Skipped / Total] 204 / 403 / 45 / 652:  65%|██████▌   | 653/1000 [1:11:14<37:51,  6.55s/it][Succeeded / Failed / Skipped / Total] 204 / 404 / 45 / 653:  65%|██████▌   | 653/1000 [1:11:14<37:51,  6.55s/it][Succeeded / Failed / Skipped / Total] 204 / 404 / 45 / 653:  65%|██████▌   | 654/1000 [1:11:14<37:41,  6.54s/it]Returns true if the given source class is a getter . --> Helper method to create a java lang --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[exception]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[code]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 647 ---------------------------------------------
Gets a String . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[end]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 648 ---------------------------------------------
Returns the value of the given key . --> Return a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[method]] ( List < String > [[log]] , Object ... args ) { return messagesApi . get ( lang , [[log]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Return true if the given class is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[select]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a new URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[generic]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[generic]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 651 ---------------------------------------------
Creates an array of genvalues . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( arrays ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator [[arrays]] = new Generator ( ) ; [[arrays]] . setArrays ( arrays ) ; return [[arrays]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 652 ---------------------------------------------
Invokes an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[ex]] = fastClassInfo ; return [[ex]] . f1 . invoke ( [[ex]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 653 ---------------------------------------------
Compares two classes . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 654 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 404 / 45 / 654:  65%|██████▌   | 654/1000 [1:11:14<37:41,  6.54s/it][Succeeded / Failed / Skipped / Total] 205 / 404 / 45 / 654:  66%|██████▌   | 655/1000 [1:11:14<37:31,  6.53s/it][Succeeded / Failed / Skipped / Total] 205 / 404 / 46 / 655:  66%|██████▌   | 655/1000 [1:11:14<37:31,  6.53s/it][Succeeded / Failed / Skipped / Total] 205 / 404 / 46 / 655:  66%|██████▌   | 656/1000 [1:11:15<37:22,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 405 / 46 / 656:  66%|██████▌   | 656/1000 [1:11:15<37:22,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 405 / 46 / 656:  66%|██████▌   | 657/1000 [1:11:24<37:16,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 406 / 46 / 657:  66%|██████▌   | 657/1000 [1:11:24<37:16,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 406 / 46 / 657:  66%|██████▌   | 658/1000 [1:11:28<37:08,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 407 / 46 / 658:  66%|██████▌   | 658/1000 [1:11:28<37:08,  6.52s/it][Succeeded / Failed / Skipped / Total] 205 / 407 / 46 / 658:  66%|██████▌   | 659/1000 [1:11:43<37:06,  6.53s/it][Succeeded / Failed / Skipped / Total] 205 / 408 / 46 / 659:  66%|██████▌   | 659/1000 [1:11:43<37:06,  6.53s/it][Succeeded / Failed / Skipped / Total] 205 / 408 / 46 / 659:  66%|██████▌   | 660/1000 [1:11:46<36:58,  6.52s/it][Succeeded / Failed / Skipped / Total] 206 / 408 / 46 / 660:  66%|██████▌   | 660/1000 [1:11:46<36:58,  6.52s/it][Succeeded / Failed / Skipped / Total] 206 / 408 / 46 / 660:  66%|██████▌   | 661/1000 [1:12:03<36:57,  6.54s/it]Visits a visitor to visit the type . --> Visits a visitor . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[end]] ) { if ( from != [[end]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[end]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[end]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[end]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[end]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[end]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[end]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[end]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[end]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[end]] ) ; } } else { if ( [[end]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[end]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[end]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[end]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[end]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[end]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 655 ---------------------------------------------
Adds a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Sort the given comparator . --> [[[FAILED]]]

[[[[Adv]]]]: public void mergeSort ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void mergeSort ( int index , int [[index]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[index]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 657 ---------------------------------------------
Sorts the sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[set]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[set]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 658 ---------------------------------------------
Pushes a type to a type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[exit]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 659 ---------------------------------------------
Loads a state . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 660 ---------------------------------------------
Sets the label . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[a]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label [[ended]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[ended]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( [[ended]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 206 / 409 / 46 / 661:  66%|██████▌   | 661/1000 [1:12:03<36:57,  6.54s/it][Succeeded / Failed / Skipped / Total] 206 / 409 / 46 / 661:  66%|██████▌   | 662/1000 [1:12:16<36:54,  6.55s/it][Succeeded / Failed / Skipped / Total] 206 / 410 / 46 / 662:  66%|██████▌   | 662/1000 [1:12:16<36:54,  6.55s/it][Succeeded / Failed / Skipped / Total] 206 / 410 / 46 / 662:  66%|██████▋   | 663/1000 [1:12:21<36:46,  6.55s/it][Succeeded / Failed / Skipped / Total] 207 / 410 / 46 / 663:  66%|██████▋   | 663/1000 [1:12:21<36:46,  6.55s/it][Succeeded / Failed / Skipped / Total] 207 / 410 / 46 / 663:  66%|██████▋   | 664/1000 [1:12:21<36:37,  6.54s/it][Succeeded / Failed / Skipped / Total] 207 / 410 / 47 / 664:  66%|██████▋   | 664/1000 [1:12:21<36:37,  6.54s/it][Succeeded / Failed / Skipped / Total] 207 / 410 / 47 / 664:  66%|██████▋   | 665/1000 [1:12:29<36:30,  6.54s/it][Succeeded / Failed / Skipped / Total] 208 / 410 / 47 / 665:  66%|██████▋   | 665/1000 [1:12:29<36:30,  6.54s/it][Succeeded / Failed / Skipped / Total] 208 / 410 / 47 / 665:  67%|██████▋   | 666/1000 [1:12:37<36:25,  6.54s/it][Succeeded / Failed / Skipped / Total] 209 / 410 / 47 / 666:  67%|██████▋   | 666/1000 [1:12:37<36:25,  6.54s/it][Succeeded / Failed / Skipped / Total] 209 / 410 / 47 / 666:  67%|██████▋   | 667/1000 [1:12:48<36:21,  6.55s/it][Succeeded / Failed / Skipped / Total] 209 / 411 / 47 / 667:  67%|██████▋   | 667/1000 [1:12:48<36:21,  6.55s/it][Succeeded / Failed / Skipped / Total] 209 / 411 / 47 / 667:  67%|██████▋   | 668/1000 [1:12:49<36:11,  6.54s/it][Succeeded / Failed / Skipped / Total] 209 / 411 / 48 / 668:  67%|██████▋   | 668/1000 [1:12:49<36:11,  6.54s/it][Succeeded / Failed / Skipped / Total] 209 / 411 / 48 / 668:  67%|██████▋   | 669/1000 [1:12:59<36:06,  6.55s/it]Move the type of this type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[after]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 662 ---------------------------------------------
Registers a class with the given superclass . --> [[[FAILED]]]

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[methods]] ) { getMethods ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[language]] ) { getMethods ( superclass , interfaces , [[language]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
constructor constructors . --> constructor --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[data]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[data]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[data]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
Processes a process . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Set the superclass . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[compare]] ( Class [[data]] ) { if ( [[data]] != null && [[data]] . equals ( Object . class ) ) { [[data]] = null ; } this . superclass = [[data]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 666 ---------------------------------------------
Returns the number of bits . --> Returns the number of bits --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[d]] = 0 ; while ( w != 0 ) { [[d]] += T [ w & 255 ] ; w >>= 8 ; } return [[d]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a Method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[function]] ( Method method ) { [[function]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Finds all methods of the given class . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 209 / 412 / 48 / 669:  67%|██████▋   | 669/1000 [1:12:59<36:06,  6.55s/it][Succeeded / Failed / Skipped / Total] 209 / 412 / 48 / 669:  67%|██████▋   | 670/1000 [1:13:07<36:01,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 412 / 48 / 670:  67%|██████▋   | 670/1000 [1:13:07<36:01,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 412 / 48 / 670:  67%|██████▋   | 671/1000 [1:13:11<35:53,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 413 / 48 / 671:  67%|██████▋   | 671/1000 [1:13:11<35:53,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 413 / 48 / 671:  67%|██████▋   | 672/1000 [1:13:27<35:51,  6.56s/it][Succeeded / Failed / Skipped / Total] 210 / 414 / 48 / 672:  67%|██████▋   | 672/1000 [1:13:27<35:51,  6.56s/it][Succeeded / Failed / Skipped / Total] 210 / 414 / 48 / 672:  67%|██████▋   | 673/1000 [1:13:29<35:42,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 415 / 48 / 673:  67%|██████▋   | 673/1000 [1:13:29<35:42,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 415 / 48 / 673:  67%|██████▋   | 674/1000 [1:13:36<35:36,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 416 / 48 / 674:  67%|██████▋   | 674/1000 [1:13:36<35:36,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 416 / 48 / 674:  68%|██████▊   | 675/1000 [1:13:39<35:27,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 417 / 48 / 675:  68%|██████▊   | 675/1000 [1:13:39<35:27,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 417 / 48 / 675:  68%|██████▊   | 676/1000 [1:13:41<35:19,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 418 / 48 / 676:  68%|██████▊   | 676/1000 [1:13:41<35:19,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 418 / 48 / 676:  68%|██████▊   | 677/1000 [1:13:52<35:14,  6.55s/it]Set the default policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[end]] ( NamingPolicy [[index]] ) { if ( [[index]] == null ) [[index]] = DefaultNamingPolicy . INSTANCE ; this . [[end]] = [[index]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 670 ---------------------------------------------
Reads a string . --> Read a string from a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[ella]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 671 ---------------------------------------------
Processes the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[foo]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[reference]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[reference]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[reference]] ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( [[reference]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[reference]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the HTTP header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[ed]] ( final String host ) { this . host = [[ed]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[ed]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Resolves a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path [[enter]] , String [[begin]] ) { if ( StringUtil . startsWithChar ( [[begin]] , File . separatorChar ) ) { [[begin]] = [[begin]] . substring ( 1 ) ; } return [[enter]] . resolve ( [[begin]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 674 ---------------------------------------------
Resolve a class . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[scope]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[scope]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[scope]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[scope]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 675 ---------------------------------------------
Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String [[destination]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[s]] ( final String method , final String [[generic]] ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( [[generic]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 676 ---------------------------------------------
Create a new HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[array]] ( final String [[header]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[header]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
[Succeeded / Failed / Skipped / Total] 210 / 419 / 48 / 677:  68%|██████▊   | 677/1000 [1:13:52<35:14,  6.55s/it][Succeeded / Failed / Skipped / Total] 210 / 419 / 48 / 677:  68%|██████▊   | 678/1000 [1:13:56<35:06,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 420 / 48 / 678:  68%|██████▊   | 678/1000 [1:13:56<35:06,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 420 / 48 / 678:  68%|██████▊   | 679/1000 [1:13:59<34:58,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 421 / 48 / 679:  68%|██████▊   | 679/1000 [1:13:59<34:58,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 421 / 48 / 679:  68%|██████▊   | 680/1000 [1:14:04<34:51,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 422 / 48 / 680:  68%|██████▊   | 680/1000 [1:14:04<34:51,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 422 / 48 / 680:  68%|██████▊   | 681/1000 [1:14:09<34:44,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 423 / 48 / 681:  68%|██████▊   | 681/1000 [1:14:09<34:44,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 423 / 48 / 681:  68%|██████▊   | 682/1000 [1:14:13<34:36,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 424 / 48 / 682:  68%|██████▊   | 682/1000 [1:14:13<34:36,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 424 / 48 / 682:  68%|██████▊   | 683/1000 [1:14:18<34:29,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 425 / 48 / 683:  68%|██████▊   | 683/1000 [1:14:18<34:29,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 425 / 48 / 683:  68%|██████▊   | 684/1000 [1:14:24<34:22,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 426 / 48 / 684:  68%|██████▊   | 684/1000 [1:14:24<34:22,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 426 / 48 / 684:  68%|██████▊   | 685/1000 [1:14:30<34:15,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 427 / 48 / 685:  68%|██████▊   | 685/1000 [1:14:30<34:15,  6.53s/it][Succeeded / Failed / Skipped / Total] 210 / 427 / 48 / 685:  69%|██████▊   | 686/1000 [1:14:44<34:12,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 428 / 48 / 686:  69%|██████▊   | 686/1000 [1:14:44<34:12,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 428 / 48 / 686:  69%|██████▊   | 687/1000 [1:14:50<34:05,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 429 / 48 / 687:  69%|██████▊   | 687/1000 [1:14:50<34:05,  6.54s/it][Succeeded / Failed / Skipped / Total] 210 / 429 / 48 / 687:  69%|██████▉   | 688/1000 [1:15:04<34:02,  6.55s/it][Succeeded / Failed / Skipped / Total] 211 / 429 / 48 / 688:  69%|██████▉   | 688/1000 [1:15:04<34:02,  6.55s/it][Succeeded / Failed / Skipped / Total] 211 / 429 / 48 / 688:  69%|██████▉   | 689/1000 [1:15:13<33:57,  6.55s/it]--------------------------------------------- Result 677 ---------------------------------------------
Returns a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[id]] ( final String [[add]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[add]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[array]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 679 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String [[send]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[send]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Sets the http request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 681 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest head ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String [[list]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[list]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 682 ---------------------------------------------
Deletes a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[operator]] ( final String [[operator]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[operator]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 683 ---------------------------------------------
Returns a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[array]] ( final String [[search]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[search]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[e]] ( String [[n]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest options ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest options ( final String [[list]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[list]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 686 ---------------------------------------------
Add a map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[index]] : queryMap . entrySet ( ) ) { query . add ( [[index]] . getKey ( ) , [[index]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 687 ---------------------------------------------
Build query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[answer]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Returns a string representation of this URL . --> Convert a port to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[loop]] ( ) { StringBand [[f]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[f]] . append ( protocol ) ; [[f]] . append ( "://" ) ; } if ( host != null ) { [[f]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[f]] . append ( ' ' ) ; [[f]] . append ( port ) ; } return [[f]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 429 / 48 / 689:  69%|██████▉   | 689/1000 [1:15:13<33:57,  6.55s/it][Succeeded / Failed / Skipped / Total] 212 / 429 / 48 / 689:  69%|██████▉   | 690/1000 [1:15:16<33:49,  6.55s/it][Succeeded / Failed / Skipped / Total] 212 / 430 / 48 / 690:  69%|██████▉   | 690/1000 [1:15:16<33:49,  6.55s/it][Succeeded / Failed / Skipped / Total] 212 / 430 / 48 / 690:  69%|██████▉   | 691/1000 [1:15:22<33:42,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 430 / 48 / 691:  69%|██████▉   | 691/1000 [1:15:22<33:42,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 430 / 48 / 691:  69%|██████▉   | 692/1000 [1:15:25<33:34,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 431 / 48 / 692:  69%|██████▉   | 692/1000 [1:15:25<33:34,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 431 / 48 / 692:  69%|██████▉   | 693/1000 [1:15:34<33:28,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 432 / 48 / 693:  69%|██████▉   | 693/1000 [1:15:34<33:28,  6.54s/it][Succeeded / Failed / Skipped / Total] 213 / 432 / 48 / 693:  69%|██████▉   | 694/1000 [1:15:37<33:20,  6.54s/it][Succeeded / Failed / Skipped / Total] 214 / 432 / 48 / 694:  69%|██████▉   | 694/1000 [1:15:37<33:20,  6.54s/it][Succeeded / Failed / Skipped / Total] 214 / 432 / 48 / 694:  70%|██████▉   | 695/1000 [1:15:40<33:12,  6.53s/it][Succeeded / Failed / Skipped / Total] 215 / 432 / 48 / 695:  70%|██████▉   | 695/1000 [1:15:40<33:12,  6.53s/it][Succeeded / Failed / Skipped / Total] 215 / 432 / 48 / 695:  70%|██████▉   | 696/1000 [1:15:58<33:11,  6.55s/it][Succeeded / Failed / Skipped / Total] 215 / 433 / 48 / 696:  70%|██████▉   | 696/1000 [1:15:58<33:11,  6.55s/it][Succeeded / Failed / Skipped / Total] 215 / 433 / 48 / 696:  70%|██████▉   | 697/1000 [1:16:02<33:03,  6.55s/it][Succeeded / Failed / Skipped / Total] 215 / 434 / 48 / 697:  70%|██████▉   | 697/1000 [1:16:02<33:03,  6.55s/it][Succeeded / Failed / Skipped / Total] 215 / 434 / 48 / 697:  70%|██████▉   | 698/1000 [1:16:04<32:54,  6.54s/it]Write a password . --> Write a string to a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[ia]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 690 ---------------------------------------------
Add a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[array]] ( final String name1 , final Object value1 , final Object ... [[message]] ) { [[array]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[message]] . length ; i += 2 ) { String name = [[message]] [ i ] . toString ( ) ; String value = [[message]] [ i + 1 ] . toString ( ) ; [[array]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 691 ---------------------------------------------
Parse a string . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[list]] ) { this . [[a]] = HttpUtil . parseQuery ( queryString , [[list]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 692 ---------------------------------------------
Returns the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer [[maxAge]] = cookie . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[al]] ( final Cookie ... [[al]] ) { if ( [[al]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[al]] ) { Integer [[later]] = cookie . getMaxAge ( ) ; if ( [[later]] != null && [[later]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 693 ---------------------------------------------
Set the host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[ia]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Send a response . --> Send a response to a response --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[sending]] > [[sending]] sendAndReceive ( final Function < HttpResponse , [[sending]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 695 ---------------------------------------------
Checks if the request contains the buffer . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[of]] ( final boolean [[handler]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 696 ---------------------------------------------
Adds all filters to the filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[classes]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[classes]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 697 ---------------------------------------------
Returns the first length of the handler . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[goal]] ) { int [[goal]] = 0 ; Handler handler = [[goal]] ; while ( handler != null ) { [[goal]] ++ ; handler = handler . nextHandler ; } return [[goal]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 698 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 435 / 48 / 698:  70%|██████▉   | 698/1000 [1:16:04<32:54,  6.54s/it][Succeeded / Failed / Skipped / Total] 215 / 435 / 48 / 698:  70%|██████▉   | 699/1000 [1:16:08<32:47,  6.54s/it][Succeeded / Failed / Skipped / Total] 216 / 435 / 48 / 699:  70%|██████▉   | 699/1000 [1:16:08<32:47,  6.54s/it][Succeeded / Failed / Skipped / Total] 216 / 435 / 48 / 699:  70%|███████   | 700/1000 [1:16:16<32:41,  6.54s/it][Succeeded / Failed / Skipped / Total] 216 / 436 / 48 / 700:  70%|███████   | 700/1000 [1:16:16<32:41,  6.54s/it][Succeeded / Failed / Skipped / Total] 216 / 436 / 48 / 700:  70%|███████   | 701/1000 [1:16:19<32:33,  6.53s/it][Succeeded / Failed / Skipped / Total] 216 / 437 / 48 / 701:  70%|███████   | 701/1000 [1:16:19<32:33,  6.53s/it][Succeeded / Failed / Skipped / Total] 216 / 437 / 48 / 701:  70%|███████   | 702/1000 [1:16:27<32:27,  6.53s/it][Succeeded / Failed / Skipped / Total] 216 / 438 / 48 / 702:  70%|███████   | 702/1000 [1:16:27<32:27,  6.53s/it][Succeeded / Failed / Skipped / Total] 216 / 438 / 48 / 702:  70%|███████   | 703/1000 [1:16:38<32:22,  6.54s/it][Succeeded / Failed / Skipped / Total] 217 / 438 / 48 / 703:  70%|███████   | 703/1000 [1:16:38<32:22,  6.54s/it][Succeeded / Failed / Skipped / Total] 217 / 438 / 48 / 703:  70%|███████   | 704/1000 [1:16:47<32:17,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 438 / 48 / 704:  70%|███████   | 704/1000 [1:16:47<32:17,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 438 / 48 / 704:  70%|███████   | 705/1000 [1:16:49<32:08,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 439 / 48 / 705:  70%|███████   | 705/1000 [1:16:49<32:08,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 439 / 48 / 705:  71%|███████   | 706/1000 [1:16:54<32:01,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 440 / 48 / 706:  71%|███████   | 706/1000 [1:16:54<32:01,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 440 / 48 / 706:  71%|███████   | 707/1000 [1:17:09<31:58,  6.55s/it][Succeeded / Failed / Skipped / Total] 218 / 441 / 48 / 707:  71%|███████   | 707/1000 [1:17:09<31:58,  6.55s/it][Succeeded / Failed / Skipped / Total] 218 / 441 / 48 / 707:  71%|███████   | 708/1000 [1:17:15<31:51,  6.55s/it]Adds all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[array]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 699 ---------------------------------------------
Executes the actions . --> Executes the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[pull]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Add results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[exception]] ( ) { final Collection < ActionResult > [[elements]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[elements]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Get a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[x]] > [[x]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[x]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[x]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[example]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 703 ---------------------------------------------
Given a string returns a unique name . --> Add a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[add]] ( final String [[a]] ) { int ndx = StringUtil . indexOfChars ( [[a]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[a]] ; } return [[a]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Add a reference to the map . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: public void setObjectReference ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void setObjectReference ( final String [[hello]] , final Object [[world]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[hello]] , [[world]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Set the setter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter [[setter]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[loop]] ( final BeanProperty bp , final Object value ) { Setter [[id]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 706 ---------------------------------------------
Gets the reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[bus]] ( final String [[source]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[source]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Get the value of the specified object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[set]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 442 / 48 / 708:  71%|███████   | 708/1000 [1:17:15<31:51,  6.55s/it][Succeeded / Failed / Skipped / Total] 218 / 442 / 48 / 708:  71%|███████   | 709/1000 [1:17:16<31:42,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 443 / 48 / 709:  71%|███████   | 709/1000 [1:17:16<31:42,  6.54s/it][Succeeded / Failed / Skipped / Total] 218 / 443 / 48 / 709:  71%|███████   | 710/1000 [1:17:26<31:38,  6.55s/it][Succeeded / Failed / Skipped / Total] 218 / 444 / 48 / 710:  71%|███████   | 710/1000 [1:17:26<31:38,  6.55s/it][Succeeded / Failed / Skipped / Total] 218 / 444 / 48 / 710:  71%|███████   | 711/1000 [1:17:29<31:30,  6.54s/it][Succeeded / Failed / Skipped / Total] 219 / 444 / 48 / 711:  71%|███████   | 711/1000 [1:17:29<31:30,  6.54s/it][Succeeded / Failed / Skipped / Total] 219 / 444 / 48 / 711:  71%|███████   | 712/1000 [1:17:40<31:25,  6.55s/it][Succeeded / Failed / Skipped / Total] 219 / 445 / 48 / 712:  71%|███████   | 712/1000 [1:17:40<31:25,  6.55s/it][Succeeded / Failed / Skipped / Total] 219 / 445 / 48 / 712:  71%|███████▏  | 713/1000 [1:17:46<31:18,  6.54s/it][Succeeded / Failed / Skipped / Total] 219 / 446 / 48 / 713:  71%|███████▏  | 713/1000 [1:17:46<31:18,  6.54s/it][Succeeded / Failed / Skipped / Total] 219 / 446 / 48 / 713:  71%|███████▏  | 714/1000 [1:17:49<31:10,  6.54s/it][Succeeded / Failed / Skipped / Total] 220 / 446 / 48 / 714:  71%|███████▏  | 714/1000 [1:17:49<31:10,  6.54s/it][Succeeded / Failed / Skipped / Total] 220 / 446 / 48 / 714:  72%|███████▏  | 715/1000 [1:18:01<31:06,  6.55s/it][Succeeded / Failed / Skipped / Total] 220 / 447 / 48 / 715:  72%|███████▏  | 715/1000 [1:18:01<31:06,  6.55s/it][Succeeded / Failed / Skipped / Total] 220 / 447 / 48 / 715:  72%|███████▏  | 716/1000 [1:18:02<30:57,  6.54s/it]Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[pr]] = tableRefs . get ( tableRef ) ; return [[pr]] == null ? null : [[pr]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 709 ---------------------------------------------
Returns the end range of a given range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int [[handlerStart]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , start , end ) ; } int [[start]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 710 ---------------------------------------------
Get the alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String [[fix]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[fix]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Finds all properties of a given type . --> Find all EntityDescriptors --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = [[entry]] . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( [[columnRef]] ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String [[data]] ) { for ( Map . Entry < String , TableRefData > [[reference]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[bus]] = [[reference]] . getValue ( ) . desc ; if ( [[bus]] . findByPropertyName ( [[data]] ) != null ) { return [[bus]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Register a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[fore]] ( final String [[hints]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hints]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 713 ---------------------------------------------
Build a query . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( tableRef ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor [[data]] = getTableDescriptor ( tableRef ) ; if ( [[data]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[data]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Execute the request attribute . --> Perform a specific attribute --> Socre: 1.0

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[ies]] , final Targets targets ) { final Enumeration < String > attributeNames = [[ies]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[ies]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 715 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[merge]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[var]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[var]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 448 / 48 / 716:  72%|███████▏  | 716/1000 [1:18:02<30:57,  6.54s/it][Succeeded / Failed / Skipped / Total] 220 / 448 / 48 / 716:  72%|███████▏  | 717/1000 [1:18:45<31:05,  6.59s/it][Succeeded / Failed / Skipped / Total] 220 / 449 / 48 / 717:  72%|███████▏  | 717/1000 [1:18:45<31:05,  6.59s/it][Succeeded / Failed / Skipped / Total] 220 / 449 / 48 / 717:  72%|███████▏  | 718/1000 [1:19:02<31:02,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 450 / 48 / 718:  72%|███████▏  | 718/1000 [1:19:02<31:02,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 450 / 48 / 718:  72%|███████▏  | 719/1000 [1:19:17<30:59,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 451 / 48 / 719:  72%|███████▏  | 719/1000 [1:19:17<30:59,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 451 / 48 / 719:  72%|███████▏  | 720/1000 [1:19:26<30:53,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 452 / 48 / 720:  72%|███████▏  | 720/1000 [1:19:26<30:53,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 452 / 48 / 720:  72%|███████▏  | 721/1000 [1:19:28<30:45,  6.61s/it]Serializes a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[array]] , final T value ) { if ( [[array]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 717 ---------------------------------------------
Build a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( convertedTableName ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String [[command]] ) { StringBuilder [[load]] = new StringBuilder ( [[command]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[command]] , separatorChar ) ; [[load]] . append ( convertedTableName ) ; } else { [[load]] . append ( [[command]] ) ; } if ( ! changeCase ) { return [[load]] . toString ( ) ; } return uppercase ? toUppercase ( [[load]] ) . toString ( ) : toLowercase ( [[load]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 718 ---------------------------------------------
Handle request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { if ( ! ( [[servletRequest]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[servletRequest]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[attack]] ( final HttpServletRequest [[attack]] , final Targets targets ) { if ( ! ( [[attack]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[attack]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[attack]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 719 ---------------------------------------------
Convert a column to a column --> [[[FAILED]]]

[[[[Adv]]]]: public String applyToColumnName ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String applyToColumnName ( final String [[converted]] ) { String [[converts]] = convertColumnNameToPropertyName ( [[converted]] ) ; return convertPropertyNameToColumnName ( [[converts]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 720 ---------------------------------------------
Get the destination type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[n]] > [[n]] prepareGetValue ( final T t , final Class < [[n]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[n]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 453 / 48 / 721:  72%|███████▏  | 721/1000 [1:19:28<30:45,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 453 / 48 / 721:  72%|███████▏  | 722/1000 [1:19:48<30:43,  6.63s/it][Succeeded / Failed / Skipped / Total] 220 / 454 / 48 / 722:  72%|███████▏  | 722/1000 [1:19:48<30:43,  6.63s/it][Succeeded / Failed / Skipped / Total] 220 / 454 / 48 / 722:  72%|███████▏  | 723/1000 [1:19:50<30:35,  6.63s/it][Succeeded / Failed / Skipped / Total] 220 / 455 / 48 / 723:  72%|███████▏  | 723/1000 [1:19:50<30:35,  6.63s/it][Succeeded / Failed / Skipped / Total] 220 / 455 / 48 / 723:  72%|███████▏  | 724/1000 [1:19:54<30:27,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 456 / 48 / 724:  72%|███████▏  | 724/1000 [1:19:54<30:27,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 456 / 48 / 724:  72%|███████▎  | 725/1000 [1:19:55<30:18,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 457 / 48 / 725:  72%|███████▎  | 725/1000 [1:19:55<30:18,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 457 / 48 / 725:  73%|███████▎  | 726/1000 [1:19:57<30:10,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 458 / 48 / 726:  73%|███████▎  | 726/1000 [1:19:57<30:10,  6.61s/it][Succeeded / Failed / Skipped / Total] 220 / 458 / 48 / 726:  73%|███████▎  | 727/1000 [1:20:10<30:06,  6.62s/it]Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = [[servletRequest]] . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String [[paramName]] = [[paramNames]] . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[encoding]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[encoding]] ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest [[target]] , final Targets targets ) { final boolean encode = encodeGetParams && [[target]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[match]] = [[target]] . getParameterNames ( ) ; while ( [[match]] . hasMoreElements ( ) ) { final String [[check]] = [[match]] . nextElement ( ) ; if ( [[target]] . getAttribute ( [[check]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[check]] ) ; if ( name != null ) { String [ ] paramValues = [[target]] . getParameterValues ( [[check]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[h]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[h]] ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 722 ---------------------------------------------
Sets the value at the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[end]] ( final PreparedStatement st , final int index , final Object value , final int [[query]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[query]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Returns an immutable copy of this set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[read]] ( ) { final Set < T > [[bit]] = new HashSet <> ( wrappers . size ( ) ) ; [[bit]] . addAll ( wrappers . values ( ) ) ; return [[bit]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 724 ---------------------------------------------
Create a new instance of wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[g]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Initializes the class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[end]] = lookup ( wrapperClassName ) ; if ( [[end]] == null ) { [[end]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[end]] ) ; wrappers . put ( wrapperClassName , [[end]] ) ; } return [[end]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 726 ---------------------------------------------
Convert a name to a column --> [[[FAILED]]]

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int [[len]] = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String [[text]] ) { StringBuilder [[key]] = new StringBuilder ( [[text]] . length ( ) ) ; int [[field]] = [[text]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[field]] ; i ++ ) { char c = [[text]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[key]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[key]] . append ( Character . toLowerCase ( c ) ) ; } } return [[key]] . toString ( ) ; } return [[text]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 459 / 48 / 727:  73%|███████▎  | 727/1000 [1:20:10<30:06,  6.62s/it][Succeeded / Failed / Skipped / Total] 220 / 459 / 48 / 727:  73%|███████▎  | 728/1000 [1:20:10<29:57,  6.61s/it][Succeeded / Failed / Skipped / Total] 221 / 459 / 48 / 728:  73%|███████▎  | 728/1000 [1:20:10<29:57,  6.61s/it][Succeeded / Failed / Skipped / Total] 221 / 459 / 48 / 728:  73%|███████▎  | 729/1000 [1:20:30<29:55,  6.63s/it][Succeeded / Failed / Skipped / Total] 221 / 460 / 48 / 729:  73%|███████▎  | 729/1000 [1:20:30<29:55,  6.63s/it][Succeeded / Failed / Skipped / Total] 221 / 460 / 48 / 729:  73%|███████▎  | 730/1000 [1:20:31<29:47,  6.62s/it][Succeeded / Failed / Skipped / Total] 222 / 460 / 48 / 730:  73%|███████▎  | 730/1000 [1:20:31<29:47,  6.62s/it][Succeeded / Failed / Skipped / Total] 222 / 460 / 48 / 730:  73%|███████▎  | 731/1000 [1:20:39<29:40,  6.62s/it][Succeeded / Failed / Skipped / Total] 222 / 461 / 48 / 731:  73%|███████▎  | 731/1000 [1:20:39<29:40,  6.62s/it][Succeeded / Failed / Skipped / Total] 222 / 461 / 48 / 731:  73%|███████▎  | 732/1000 [1:20:44<29:33,  6.62s/it][Succeeded / Failed / Skipped / Total] 223 / 461 / 48 / 732:  73%|███████▎  | 732/1000 [1:20:44<29:33,  6.62s/it][Succeeded / Failed / Skipped / Total] 223 / 461 / 48 / 732:  73%|███████▎  | 733/1000 [1:20:45<29:25,  6.61s/it][Succeeded / Failed / Skipped / Total] 223 / 462 / 48 / 733:  73%|███████▎  | 733/1000 [1:20:45<29:25,  6.61s/it][Succeeded / Failed / Skipped / Total] 223 / 462 / 48 / 733:  73%|███████▎  | 734/1000 [1:20:49<29:17,  6.61s/it]Returns the separator of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[test]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 728 ---------------------------------------------
Returns a string representation of the given file . --> Return a File from a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[example]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 730 ---------------------------------------------
Adapts a Consumer . --> Convenience method for creating a Consumer --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[below]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Returns a file name . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int [[separatorAdd]] ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int endIndex = index + [[separatorAdd]] ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[integer]] ( final String [[hash]] , final int [[add]] ) { if ( [[hash]] == null ) { return null ; } int prefix = getPrefixLength ( [[hash]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[hash]] ) ; int endIndex = index + [[add]] ; if ( prefix >= [[hash]] . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[hash]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 732 ---------------------------------------------
Starts the WebWebWebWebWebWebWebWebWebApp instance . --> Obtains the WebWebWebWebApp instance --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[db]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 733 ---------------------------------------------
Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[main]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 223 / 463 / 48 / 734:  73%|███████▎  | 734/1000 [1:20:49<29:17,  6.61s/it][Succeeded / Failed / Skipped / Total] 223 / 463 / 48 / 734:  74%|███████▎  | 735/1000 [1:20:53<29:10,  6.60s/it][Succeeded / Failed / Skipped / Total] 224 / 463 / 48 / 735:  74%|███████▎  | 735/1000 [1:20:53<29:10,  6.60s/it][Succeeded / Failed / Skipped / Total] 224 / 463 / 48 / 735:  74%|███████▎  | 736/1000 [1:20:59<29:03,  6.60s/it][Succeeded / Failed / Skipped / Total] 224 / 464 / 48 / 736:  74%|███████▎  | 736/1000 [1:20:59<29:03,  6.60s/it][Succeeded / Failed / Skipped / Total] 224 / 464 / 48 / 736:  74%|███████▎  | 737/1000 [1:21:00<28:54,  6.59s/it][Succeeded / Failed / Skipped / Total] 225 / 464 / 48 / 737:  74%|███████▎  | 737/1000 [1:21:00<28:54,  6.59s/it][Succeeded / Failed / Skipped / Total] 225 / 464 / 48 / 737:  74%|███████▍  | 738/1000 [1:21:15<28:50,  6.61s/it][Succeeded / Failed / Skipped / Total] 225 / 465 / 48 / 738:  74%|███████▍  | 738/1000 [1:21:15<28:50,  6.61s/it][Succeeded / Failed / Skipped / Total] 225 / 465 / 48 / 738:  74%|███████▍  | 739/1000 [1:21:19<28:43,  6.60s/it][Succeeded / Failed / Skipped / Total] 225 / 466 / 48 / 739:  74%|███████▍  | 739/1000 [1:21:19<28:43,  6.60s/it][Succeeded / Failed / Skipped / Total] 225 / 466 / 48 / 739:  74%|███████▍  | 740/1000 [1:21:31<28:38,  6.61s/it][Succeeded / Failed / Skipped / Total] 226 / 466 / 48 / 740:  74%|███████▍  | 740/1000 [1:21:31<28:38,  6.61s/it][Succeeded / Failed / Skipped / Total] 226 / 466 / 48 / 740:  74%|███████▍  | 741/1000 [1:21:42<28:33,  6.62s/it]Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[operator]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 735 ---------------------------------------------
Returns a string representation of this class name . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[be]] ) { for ( final String excludedJar : [[be]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Create a file extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String [[path]] ; String [[baseName]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { [[path]] = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { [[path]] = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) + [[path]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) + [[path]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , [[path]] , [[baseName]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[after]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String [[extend]] ; String [[update]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { [[extend]] = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[update]] = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[update]] = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { [[extend]] = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[update]] = filename . substring ( prefix . length ( ) + [[extend]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[update]] = filename . substring ( prefix . length ( ) + [[extend]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , [[extend]] , [[update]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 737 ---------------------------------------------
Returns a string representation of this class . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[end]] ( final String ... [[a]] ) { for ( final String includedJar : [[a]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 738 ---------------------------------------------
Scans the excluded entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[type]] ( final String ... excludedEntries ) { for ( final String [[header]] : excludedEntries ) { rulesEntries . exclude ( [[header]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Returns a list of included entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[l]] ( final String ... includedEntries ) { for ( final String [[a]] : includedEntries ) { rulesEntries . include ( [[a]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 740 ---------------------------------------------
Hashes a byte array . --> Convert a string to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[when]] ( final Class [[example]] ) { final String name = ' ' + [[example]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 466 / 48 / 741:  74%|███████▍  | 741/1000 [1:21:42<28:33,  6.62s/it][Succeeded / Failed / Skipped / Total] 227 / 466 / 48 / 741:  74%|███████▍  | 742/1000 [1:21:46<28:26,  6.61s/it][Succeeded / Failed / Skipped / Total] 227 / 467 / 48 / 742:  74%|███████▍  | 742/1000 [1:21:46<28:26,  6.61s/it][Succeeded / Failed / Skipped / Total] 227 / 467 / 48 / 742:  74%|███████▍  | 743/1000 [1:21:49<28:18,  6.61s/it][Succeeded / Failed / Skipped / Total] 227 / 468 / 48 / 743:  74%|███████▍  | 743/1000 [1:21:49<28:18,  6.61s/it][Succeeded / Failed / Skipped / Total] 227 / 468 / 48 / 743:  74%|███████▍  | 744/1000 [1:21:52<28:10,  6.60s/it][Succeeded / Failed / Skipped / Total] 227 / 469 / 48 / 744:  74%|███████▍  | 744/1000 [1:21:52<28:10,  6.60s/it][Succeeded / Failed / Skipped / Total] 227 / 469 / 48 / 744:  74%|███████▍  | 745/1000 [1:22:08<28:06,  6.62s/it][Succeeded / Failed / Skipped / Total] 228 / 469 / 48 / 745:  74%|███████▍  | 745/1000 [1:22:08<28:06,  6.62s/it][Succeeded / Failed / Skipped / Total] 228 / 469 / 48 / 745:  75%|███████▍  | 746/1000 [1:22:15<28:00,  6.62s/it][Succeeded / Failed / Skipped / Total] 228 / 470 / 48 / 746:  75%|███████▍  | 746/1000 [1:22:15<28:00,  6.62s/it][Succeeded / Failed / Skipped / Total] 228 / 470 / 48 / 746:  75%|███████▍  | 747/1000 [1:22:19<27:52,  6.61s/it]Process a file . --> Add a path to the tree --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[ff]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = [[ff]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[begin]] ( final File [[ladder]] ) { String rootPath = [[ladder]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile [[file]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "[[fact]]" == "[[fact]]" ) . searchPath ( rootPath ) ; File file ; while ( ( file = [[file]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "[[fact]]" == "[[fact]]" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 742 ---------------------------------------------
Scan file . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[inspection]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Adds a file to the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[ator]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
Get the scope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[but]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
Get the scope of a class . --> Return all scopes --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[client]] ( final Class < ? extends MadvocScope > [[domain]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[domain]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 746 ---------------------------------------------
Start a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean [[active]] ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[array]] ( final JtxTransactionMode [[array]] , final Object [[cache]] , final boolean [[argument]] ) { return new DbJtxTransaction ( this , [[array]] , [[cache]] , [[argument]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 471 / 48 / 747:  75%|███████▍  | 747/1000 [1:22:19<27:52,  6.61s/it][Succeeded / Failed / Skipped / Total] 228 / 471 / 48 / 747:  75%|███████▍  | 748/1000 [1:22:27<27:46,  6.61s/it][Succeeded / Failed / Skipped / Total] 228 / 472 / 48 / 748:  75%|███████▍  | 748/1000 [1:22:27<27:46,  6.61s/it][Succeeded / Failed / Skipped / Total] 228 / 472 / 48 / 748:  75%|███████▍  | 749/1000 [1:22:53<27:46,  6.64s/it][Succeeded / Failed / Skipped / Total] 228 / 473 / 48 / 749:  75%|███████▍  | 749/1000 [1:22:53<27:46,  6.64s/it][Succeeded / Failed / Skipped / Total] 228 / 473 / 48 / 749:  75%|███████▌  | 750/1000 [1:23:12<27:44,  6.66s/it][Succeeded / Failed / Skipped / Total] 229 / 473 / 48 / 750:  75%|███████▌  | 750/1000 [1:23:12<27:44,  6.66s/it][Succeeded / Failed / Skipped / Total] 229 / 473 / 48 / 750:  75%|███████▌  | 751/1000 [1:23:17<27:36,  6.65s/it][Succeeded / Failed / Skipped / Total] 229 / 474 / 48 / 751:  75%|███████▌  | 751/1000 [1:23:17<27:36,  6.65s/it][Succeeded / Failed / Skipped / Total] 229 / 474 / 48 / 751:  75%|███████▌  | 752/1000 [1:23:19<27:28,  6.65s/it][Succeeded / Failed / Skipped / Total] 230 / 474 / 48 / 752:  75%|███████▌  | 752/1000 [1:23:19<27:28,  6.65s/it][Succeeded / Failed / Skipped / Total] 230 / 474 / 48 / 752:  75%|███████▌  | 753/1000 [1:23:21<27:20,  6.64s/it]Adds entries to the zip file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File [[file]] ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File [[read]] ) { final ZipFile [[check]] ; try { [[check]] = new ZipFile ( [[read]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[read]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[check]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry [[exit]] = new ClassPathEntry ( entryName , [[check]] , zipEntry ) ; try { scanEntry ( [[exit]] ) ; } finally { [[exit]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry [[exit]] = new ClassPathEntry ( entryName , [[check]] , zipEntry ) ; try { scanEntry ( [[exit]] ) ; } finally { [[exit]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[check]] ) ; throw rex ; } } } ZipUtil . close ( [[check]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 748 ---------------------------------------------
Sets the scope of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[end]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[end]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Returns the next token set . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[client]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[client]] == null ) { [[client]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[client]] ) ; } String [[invalid]] ; boolean unique ; do { [[invalid]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[client]] ) ; unique = [[client]] . add ( new Token ( [[invalid]] , timeToLive ) ) ; } while ( ! unique ) ; return [[invalid]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Remove a set from the set . --> Remove a session from a session --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[a]] ) { if ( [[a]] . size ( ) < maxTokensPerSession ) { return ; } long [[id]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[a]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[bar]] = iterator . next ( ) ; if ( [[bar]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[bar]] . validUntil < [[id]] ) { [[id]] = [[bar]] . validUntil ; tokenToRemove = [[bar]] ; } } if ( ( tokenToRemove != null ) && ( [[a]] . size ( ) >= maxTokensPerSession ) ) { [[a]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 751 ---------------------------------------------
Returns a copy of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[list]] ) { BeanCopy beanCopy = new BeanCopy ( [[list]] ) ; beanCopy . isSourceMap = [[list]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Visit a bean . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[command]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 474 / 48 / 753:  75%|███████▌  | 753/1000 [1:23:21<27:20,  6.64s/it][Succeeded / Failed / Skipped / Total] 231 / 474 / 48 / 753:  75%|███████▌  | 754/1000 [1:23:35<27:16,  6.65s/it][Succeeded / Failed / Skipped / Total] 231 / 475 / 48 / 754:  75%|███████▌  | 754/1000 [1:23:35<27:16,  6.65s/it][Succeeded / Failed / Skipped / Total] 231 / 475 / 48 / 754:  76%|███████▌  | 755/1000 [1:23:49<27:12,  6.66s/it][Succeeded / Failed / Skipped / Total] 232 / 475 / 48 / 755:  76%|███████▌  | 755/1000 [1:23:49<27:12,  6.66s/it][Succeeded / Failed / Skipped / Total] 232 / 475 / 48 / 755:  76%|███████▌  | 756/1000 [1:23:50<27:03,  6.65s/it][Succeeded / Failed / Skipped / Total] 232 / 476 / 48 / 756:  76%|███████▌  | 756/1000 [1:23:50<27:03,  6.65s/it][Succeeded / Failed / Skipped / Total] 232 / 476 / 48 / 756:  76%|███████▌  | 757/1000 [1:23:54<26:55,  6.65s/it][Succeeded / Failed / Skipped / Total] 232 / 477 / 48 / 757:  76%|███████▌  | 757/1000 [1:23:54<26:55,  6.65s/it][Succeeded / Failed / Skipped / Total] 232 / 477 / 48 / 757:  76%|███████▌  | 758/1000 [1:24:02<26:50,  6.65s/it][Succeeded / Failed / Skipped / Total] 233 / 477 / 48 / 758:  76%|███████▌  | 758/1000 [1:24:02<26:50,  6.65s/it][Succeeded / Failed / Skipped / Total] 233 / 477 / 48 / 758:  76%|███████▌  | 759/1000 [1:24:43<26:54,  6.70s/it]Returns true if the session token is set . --> Check if a given path is a valid session --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > [[it]] = [[tokenSet]] . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { Token t = [[it]] . next ( ) ; if ( t . isExpired ( ) ) { [[it]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { [[it]] . remove ( ) ; found = "[[True]]" == "[[True]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[task]] ) { Set < Token > [[context]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[context]] == null ) && ( [[task]] == null ) ) { return "[[false]]" == "[[false]]" ; } if ( ( [[context]] == null ) || ( [[task]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > [[path]] = [[context]] . iterator ( ) ; while ( [[path]] . hasNext ( ) ) { Token t = [[path]] . next ( ) ; if ( t . isExpired ( ) ) { [[path]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[task]] ) ) { [[path]] . remove ( ) ; found = "[[false]]" == "[[false]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 754 ---------------------------------------------
Register a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[end]] = ( S ) scopes . get ( scopeType ) ; if ( [[end]] == null ) { try { [[end]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[end]] ) ; scopes . put ( scopeType , [[end]] ) ; } return [[end]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 755 ---------------------------------------------
Resolve type . --> Resolve type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[hold]] ( final Class < T > type , String [[print]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[print]] == null ) { [[print]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 756 ---------------------------------------------
Set the value of a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String name , final Object [[value]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[value]] ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String name , final Object [[pointer]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[pointer]] ) ; return "[[item]]" == "[[item]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 757 ---------------------------------------------
Registers an entity . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = templateData . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[a]] = templateData . getObjectReference ( entityName ) ; if ( [[a]] != null ) { ded = lookupType ( resolveClass ( [[a]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 758 ---------------------------------------------
Removes the specified type . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[b]] ( final Class [[base]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 759 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 478 / 48 / 759:  76%|███████▌  | 759/1000 [1:24:43<26:54,  6.70s/it][Succeeded / Failed / Skipped / Total] 233 / 478 / 48 / 759:  76%|███████▌  | 760/1000 [1:24:49<26:47,  6.70s/it][Succeeded / Failed / Skipped / Total] 233 / 479 / 48 / 760:  76%|███████▌  | 760/1000 [1:24:49<26:47,  6.70s/it][Succeeded / Failed / Skipped / Total] 233 / 479 / 48 / 760:  76%|███████▌  | 761/1000 [1:24:51<26:38,  6.69s/it][Succeeded / Failed / Skipped / Total] 233 / 480 / 48 / 761:  76%|███████▌  | 761/1000 [1:24:51<26:38,  6.69s/it][Succeeded / Failed / Skipped / Total] 233 / 480 / 48 / 761:  76%|███████▌  | 762/1000 [1:25:01<26:33,  6.70s/it]Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = length - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int [[len]] = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[len]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[len]] / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < [[len]] ) { int i = 0 ; for ( int j = 0 ; sndx <= [[endx]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[len]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[of]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[t]] = length - 1 ; int pad = arr [ [[t]] ] == ' ' ? ( arr [ [[t]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[t]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int [[re]] = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[re]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[re]] / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < [[re]] ) { int i = 0 ; for ( int j = 0 ; sndx <= [[t]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[re]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 760 ---------------------------------------------
Returns a list of bean names . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[data]] ) { String [ ] [[object]] = beanCollections . get ( [[data]] ) ; if ( [[object]] != null ) { return [[object]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[data]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[object]] = StringPool . EMPTY_ARRAY ; } else { [[object]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[data]] , [[object]] ) ; return [[object]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[anInterface]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[add]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[add]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 480 / 48 / 762:  76%|███████▌  | 762/1000 [1:25:01<26:33,  6.70s/it][Succeeded / Failed / Skipped / Total] 234 / 480 / 48 / 762:  76%|███████▋  | 763/1000 [1:25:17<26:29,  6.71s/it][Succeeded / Failed / Skipped / Total] 234 / 481 / 48 / 763:  76%|███████▋  | 763/1000 [1:25:17<26:29,  6.71s/it][Succeeded / Failed / Skipped / Total] 234 / 481 / 48 / 763:  76%|███████▋  | 764/1000 [1:25:26<26:23,  6.71s/it][Succeeded / Failed / Skipped / Total] 235 / 481 / 48 / 764:  76%|███████▋  | 764/1000 [1:25:26<26:23,  6.71s/it][Succeeded / Failed / Skipped / Total] 235 / 481 / 48 / 764:  76%|███████▋  | 765/1000 [1:25:42<26:19,  6.72s/it]Registers a bean . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] != null ) { method = [[md]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[set]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[set]] != null ) { method = [[set]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[assignment]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[test]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[test]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[test]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[test]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[test]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Destroy beans . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[end]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[end]] == null ) { [[end]] = StringPool . EMPTY_ARRAY ; } int total = [[end]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[end]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[end]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[end]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 481 / 48 / 765:  76%|███████▋  | 765/1000 [1:25:42<26:19,  6.72s/it][Succeeded / Failed / Skipped / Total] 236 / 481 / 48 / 765:  77%|███████▋  | 766/1000 [1:25:45<26:11,  6.72s/it][Succeeded / Failed / Skipped / Total] 237 / 481 / 48 / 766:  77%|███████▋  | 766/1000 [1:25:45<26:11,  6.72s/it][Succeeded / Failed / Skipped / Total] 237 / 481 / 48 / 766:  77%|███████▋  | 767/1000 [1:25:49<26:04,  6.71s/it][Succeeded / Failed / Skipped / Total] 237 / 482 / 48 / 767:  77%|███████▋  | 767/1000 [1:25:49<26:04,  6.71s/it][Succeeded / Failed / Skipped / Total] 237 / 482 / 48 / 767:  77%|███████▋  | 768/1000 [1:26:05<26:00,  6.73s/it][Succeeded / Failed / Skipped / Total] 237 / 483 / 48 / 768:  77%|███████▋  | 768/1000 [1:26:05<26:00,  6.73s/it][Succeeded / Failed / Skipped / Total] 237 / 483 / 48 / 768:  77%|███████▋  | 769/1000 [1:26:13<25:54,  6.73s/it]Register bean . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[table]] , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor [[bus]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[bus]] . getMethodDescriptor ( [[table]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[table]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Initializes the bean . --> Initializes the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[assume]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[n]]" == "[[n]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String [[meta]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[meta]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[meta]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 768 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 769 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 483 / 48 / 769:  77%|███████▋  | 769/1000 [1:26:13<25:54,  6.73s/it][Succeeded / Failed / Skipped / Total] 238 / 483 / 48 / 769:  77%|███████▋  | 770/1000 [1:26:14<25:45,  6.72s/it][Succeeded / Failed / Skipped / Total] 239 / 483 / 48 / 770:  77%|███████▋  | 770/1000 [1:26:14<25:45,  6.72s/it][Succeeded / Failed / Skipped / Total] 239 / 483 / 48 / 770:  77%|███████▋  | 771/1000 [1:26:15<25:37,  6.71s/it][Succeeded / Failed / Skipped / Total] 239 / 484 / 48 / 771:  77%|███████▋  | 771/1000 [1:26:15<25:37,  6.71s/it][Succeeded / Failed / Skipped / Total] 239 / 484 / 48 / 771:  77%|███████▋  | 772/1000 [1:26:24<25:31,  6.72s/it][Succeeded / Failed / Skipped / Total] 240 / 484 / 48 / 772:  77%|███████▋  | 772/1000 [1:26:24<25:31,  6.72s/it][Succeeded / Failed / Skipped / Total] 240 / 484 / 48 / 772:  77%|███████▋  | 773/1000 [1:26:34<25:25,  6.72s/it][Succeeded / Failed / Skipped / Total] 241 / 484 / 48 / 773:  77%|███████▋  | 773/1000 [1:26:34<25:25,  6.72s/it][Succeeded / Failed / Skipped / Total] 241 / 484 / 48 / 773:  77%|███████▋  | 774/1000 [1:26:43<25:19,  6.72s/it][Succeeded / Failed / Skipped / Total] 241 / 485 / 48 / 774:  77%|███████▋  | 774/1000 [1:26:43<25:19,  6.72s/it][Succeeded / Failed / Skipped / Total] 241 / 485 / 48 / 774:  78%|███████▊  | 775/1000 [1:26:43<25:10,  6.71s/it][Succeeded / Failed / Skipped / Total] 242 / 485 / 48 / 775:  78%|███████▊  | 775/1000 [1:26:43<25:10,  6.71s/it][Succeeded / Failed / Skipped / Total] 242 / 485 / 48 / 775:  78%|███████▊  | 776/1000 [1:26:54<25:05,  6.72s/it][Succeeded / Failed / Skipped / Total] 242 / 486 / 48 / 776:  78%|███████▊  | 776/1000 [1:26:54<25:05,  6.72s/it][Succeeded / Failed / Skipped / Total] 242 / 486 / 48 / 776:  78%|███████▊  | 777/1000 [1:26:56<24:57,  6.71s/it][Succeeded / Failed / Skipped / Total] 242 / 487 / 48 / 777:  78%|███████▊  | 777/1000 [1:26:56<24:57,  6.71s/it][Succeeded / Failed / Skipped / Total] 242 / 487 / 48 / 777:  78%|███████▊  | 778/1000 [1:27:01<24:50,  6.71s/it]Produce a bean type . --> Convenience method for creating a Bean --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[assume]] ( final Class [[product]] , final Consumer < String > [[array]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[product]] ) ) { [[array]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 770 ---------------------------------------------
Execute a request . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[procedure]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 771 ---------------------------------------------
Sets the parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > [[unknown]] ) { for ( Map . Entry < ? , ? > [[fields]] : [[unknown]] . entrySet ( ) ) { defineParameter ( [[fields]] . getKey ( ) . toString ( ) , [[fields]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 772 ---------------------------------------------
Throws an exception if it is not present . --> Check that a method is not present --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[a]] ) { if ( ( [[a]] < 1 ) || ( [[a]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[a]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Create a named name . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[test]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 774 ---------------------------------------------
Register provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[staticMethodName]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[description]] , final Class [ ] arguments ) { ClassDescriptor [[dt]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[dt]] . getMethodDescriptor ( [[description]] , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[description]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 775 ---------------------------------------------
Create a named named method --> Create a key --> Socre: 1.0

[[[[Adv]]]]: public static String adviceMethodName ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String adviceMethodName ( final String [[key]] , final int index ) { return ProxettaNames . methodPrefix + [[key]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
overrides the visitor to take a value . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[state]] ( final MethodVisitor mv , final int [[end]] ) { if ( [[end]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[end]] ) ; } else if ( [[end]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[end]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[end]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 777 ---------------------------------------------
Returns the version number . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[iteration]] ( final int [[project]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[node]] = javaVersionNumber - 8 + 52 ; return [[project]] > [[node]] ? [[project]] : [[node]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 778 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 243 / 487 / 48 / 778:  78%|███████▊  | 778/1000 [1:27:01<24:50,  6.71s/it][Succeeded / Failed / Skipped / Total] 243 / 487 / 48 / 778:  78%|███████▊  | 779/1000 [1:27:11<24:44,  6.72s/it][Succeeded / Failed / Skipped / Total] 243 / 488 / 48 / 779:  78%|███████▊  | 779/1000 [1:27:11<24:44,  6.72s/it][Succeeded / Failed / Skipped / Total] 243 / 488 / 48 / 779:  78%|███████▊  | 780/1000 [1:27:11<24:35,  6.71s/it][Succeeded / Failed / Skipped / Total] 244 / 488 / 48 / 780:  78%|███████▊  | 780/1000 [1:27:11<24:35,  6.71s/it][Succeeded / Failed / Skipped / Total] 244 / 488 / 48 / 780:  78%|███████▊  | 781/1000 [1:27:22<24:30,  6.71s/it][Succeeded / Failed / Skipped / Total] 245 / 488 / 48 / 781:  78%|███████▊  | 781/1000 [1:27:22<24:30,  6.71s/it][Succeeded / Failed / Skipped / Total] 245 / 488 / 48 / 781:  78%|███████▊  | 782/1000 [1:27:28<24:23,  6.71s/it][Succeeded / Failed / Skipped / Total] 245 / 489 / 48 / 782:  78%|███████▊  | 782/1000 [1:27:28<24:23,  6.71s/it][Succeeded / Failed / Skipped / Total] 245 / 489 / 48 / 782:  78%|███████▊  | 783/1000 [1:27:32<24:15,  6.71s/it][Succeeded / Failed / Skipped / Total] 246 / 489 / 48 / 783:  78%|███████▊  | 783/1000 [1:27:32<24:15,  6.71s/it][Succeeded / Failed / Skipped / Total] 246 / 489 / 48 / 783:  78%|███████▊  | 784/1000 [1:27:39<24:08,  6.71s/it]overrides the visitor to look for method . --> overrides the visitor to look for methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[state]] ( final MethodVisitor mv , final MethodInfo [[nd]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[nd]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[nd]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Load a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor [[end]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[end]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Visit a method . --> overrides the visitor to create a method --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[load]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 781 ---------------------------------------------
Build a string . --> Build a string representation of a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[bus]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 782 ---------------------------------------------
Loads the method information from a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor [[l]] , final MethodInfo [[c]] ) { for ( int i = 1 ; i <= [[c]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[l]] , [[c]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 783 ---------------------------------------------
Generates a method . --> implements the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor [[ui]] , final MethodInfo [[si]] , int varOffset ) { varOffset += [[si]] . getAllArgumentsSize ( ) ; switch ( [[si]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[ui]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[ui]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[ui]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 784 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 489 / 48 / 784:  78%|███████▊  | 784/1000 [1:27:39<24:08,  6.71s/it][Succeeded / Failed / Skipped / Total] 247 / 489 / 48 / 784:  78%|███████▊  | 785/1000 [1:27:43<24:01,  6.70s/it][Succeeded / Failed / Skipped / Total] 248 / 489 / 48 / 785:  78%|███████▊  | 785/1000 [1:27:43<24:01,  6.70s/it][Succeeded / Failed / Skipped / Total] 248 / 489 / 48 / 785:  79%|███████▊  | 786/1000 [1:27:49<23:54,  6.70s/it][Succeeded / Failed / Skipped / Total] 249 / 489 / 48 / 786:  79%|███████▊  | 786/1000 [1:27:49<23:54,  6.70s/it][Succeeded / Failed / Skipped / Total] 249 / 489 / 48 / 786:  79%|███████▊  | 787/1000 [1:27:56<23:48,  6.71s/it][Succeeded / Failed / Skipped / Total] 250 / 489 / 48 / 787:  79%|███████▊  | 787/1000 [1:27:56<23:48,  6.71s/it][Succeeded / Failed / Skipped / Total] 250 / 489 / 48 / 787:  79%|███████▉  | 788/1000 [1:28:01<23:40,  6.70s/it][Succeeded / Failed / Skipped / Total] 250 / 490 / 48 / 788:  79%|███████▉  | 788/1000 [1:28:01<23:40,  6.70s/it][Succeeded / Failed / Skipped / Total] 250 / 490 / 48 / 788:  79%|███████▉  | 789/1000 [1:28:04<23:33,  6.70s/it]implements the visitor to look for the visitor . --> implements the visitor to look for the primitive type --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[min]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
overrides the visitor to look for a method . --> implements the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[change]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[block]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[block]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 786 ---------------------------------------------
Get the flags . --> Gets the system property . --> Socre: 1.0

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[array]] ) { if ( [[array]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[array]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[array]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 787 ---------------------------------------------
Send an HTTP response . --> Send a HTTP response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[agent]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
implements the visitor to create a visit . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[can]] ( final MethodVisitor [[e]] , final Class componentType ) { if ( componentType == int . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[e]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[e]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 491 / 48 / 789:  79%|███████▉  | 789/1000 [1:28:04<23:33,  6.70s/it][Succeeded / Failed / Skipped / Total] 250 / 491 / 48 / 789:  79%|███████▉  | 790/1000 [1:28:25<23:30,  6.72s/it][Succeeded / Failed / Skipped / Total] 250 / 492 / 48 / 790:  79%|███████▉  | 790/1000 [1:28:25<23:30,  6.72s/it][Succeeded / Failed / Skipped / Total] 250 / 492 / 48 / 790:  79%|███████▉  | 791/1000 [1:28:28<23:22,  6.71s/it][Succeeded / Failed / Skipped / Total] 250 / 493 / 48 / 791:  79%|███████▉  | 791/1000 [1:28:28<23:22,  6.71s/it][Succeeded / Failed / Skipped / Total] 250 / 493 / 48 / 791:  79%|███████▉  | 792/1000 [1:28:52<23:20,  6.73s/it][Succeeded / Failed / Skipped / Total] 250 / 494 / 48 / 792:  79%|███████▉  | 792/1000 [1:28:52<23:20,  6.73s/it][Succeeded / Failed / Skipped / Total] 250 / 494 / 48 / 792:  79%|███████▉  | 793/1000 [1:28:56<23:13,  6.73s/it][Succeeded / Failed / Skipped / Total] 250 / 495 / 48 / 793:  79%|███████▉  | 793/1000 [1:28:56<23:13,  6.73s/it][Succeeded / Failed / Skipped / Total] 250 / 495 / 48 / 793:  79%|███████▉  | 794/1000 [1:28:59<23:05,  6.72s/it][Succeeded / Failed / Skipped / Total] 250 / 496 / 48 / 794:  79%|███████▉  | 794/1000 [1:28:59<23:05,  6.72s/it][Succeeded / Failed / Skipped / Total] 250 / 496 / 48 / 794:  80%|███████▉  | 795/1000 [1:29:16<23:01,  6.74s/it][Succeeded / Failed / Skipped / Total] 251 / 496 / 48 / 795:  80%|███████▉  | 795/1000 [1:29:16<23:01,  6.74s/it][Succeeded / Failed / Skipped / Total] 251 / 496 / 48 / 795:  80%|███████▉  | 796/1000 [1:29:28<22:55,  6.74s/it]Returns the default encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[after]] ( final String [[text]] , String defaultEncoding ) { String encoding = [[after]] ( [[text]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 790 ---------------------------------------------
Download a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[path]] , final File [[directory]] , final String mimeType ) { if ( ! [[directory]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[directory]] ) ; } if ( [[directory]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[directory]] ) ; } prepareResponse ( [[path]] , [[directory]] . getAbsolutePath ( ) , mimeType , ( int ) [[directory]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 791 ---------------------------------------------
Get the HTTP header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String [[header]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[flag]] ( final HttpServletRequest request ) { String [[name]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[name]] == null ) { return null ; } int [[attribute]] = [[name]] . indexOf ( "Bearer " ) ; if ( [[attribute]] == - 1 ) { return null ; } return [[name]] . substring ( [[attribute]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 792 ---------------------------------------------
Set the content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[response]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { [[response]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[command]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { [[command]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[command]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 793 ---------------------------------------------
Get the request from the request body --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest [[age]] ) throws IOException { BufferedReader buff = [[age]] . getReader ( ) ; StringWriter [[af]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[af]] ) ; return [[af]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 794 ---------------------------------------------
Gets cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 795 ---------------------------------------------
Build the servlet context . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[bar]] , final String [[hook]] ) { String ctxPath = getContextPath ( [[bar]] ) ; [[bar]] . setAttribute ( [[hook]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 796 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 497 / 48 / 796:  80%|███████▉  | 796/1000 [1:29:28<22:55,  6.74s/it][Succeeded / Failed / Skipped / Total] 251 / 497 / 48 / 796:  80%|███████▉  | 797/1000 [1:29:47<22:52,  6.76s/it][Succeeded / Failed / Skipped / Total] 251 / 498 / 48 / 797:  80%|███████▉  | 797/1000 [1:29:47<22:52,  6.76s/it][Succeeded / Failed / Skipped / Total] 251 / 498 / 48 / 797:  80%|███████▉  | 798/1000 [1:29:59<22:46,  6.77s/it][Succeeded / Failed / Skipped / Total] 251 / 499 / 48 / 798:  80%|███████▉  | 798/1000 [1:29:59<22:46,  6.77s/it][Succeeded / Failed / Skipped / Total] 251 / 499 / 48 / 798:  80%|███████▉  | 799/1000 [1:30:06<22:40,  6.77s/it][Succeeded / Failed / Skipped / Total] 252 / 499 / 48 / 799:  80%|███████▉  | 799/1000 [1:30:06<22:40,  6.77s/it][Succeeded / Failed / Skipped / Total] 252 / 499 / 48 / 799:  80%|████████  | 800/1000 [1:30:11<22:32,  6.76s/it][Succeeded / Failed / Skipped / Total] 253 / 499 / 48 / 800:  80%|████████  | 800/1000 [1:30:11<22:32,  6.76s/it][Succeeded / Failed / Skipped / Total] 253 / 499 / 48 / 800:  80%|████████  | 801/1000 [1:30:16<22:25,  6.76s/it][Succeeded / Failed / Skipped / Total] 254 / 499 / 48 / 801:  80%|████████  | 801/1000 [1:30:16<22:25,  6.76s/it][Succeeded / Failed / Skipped / Total] 254 / 499 / 48 / 801:  80%|████████  | 802/1000 [1:30:18<22:17,  6.76s/it]Read a request from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[inputStream]] = request . getInputStream ( ) ; if ( [[inputStream]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[inputStream]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[page]] = request . getInputStream ( ) ; if ( [[page]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[page]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 797 ---------------------------------------------
Adds a servlet to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[add]] ( final PageContext pageContext , final String [[call]] ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[call]] , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[call]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Returns the value of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String [[name]] ) { [[name]] = URLCoder . encodeQueryParam ( [[name]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : nameValuePairs ) { if ( [[nameValuePair]] . startsWith ( [[name]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String [[method]] ) { [[method]] = URLCoder . encodeQueryParam ( [[method]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[entry]] : nameValuePairs ) { if ( [[entry]] . startsWith ( [[method]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 799 ---------------------------------------------
Construct a new body . --> Construct a new JsJsJsTag --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[print]] ( final JspFragment [[condition]] ) throws JspException { if ( [[condition]] == null ) { return ; } try { [[condition]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 800 ---------------------------------------------
Renders a writer . --> Render a writer --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[output]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[output]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
Parse a request . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[paramValues]] , final boolean [[treatEmptyParamsAsNull]] , final boolean [[ignoreEmptyRequestParams]] ) { if ( [[treatEmptyParamsAsNull]] || [[ignoreEmptyRequestParams]] ) { int [[emptyCount]] = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { [[emptyCount]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[emptyCount]] ++ ; if ( [[treatEmptyParamsAsNull]] ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( [[emptyCount]] == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[itself]] , final boolean [[form]] , final boolean [[end]] ) { if ( [[form]] || [[end]] ) { int [[pi]] = 0 ; int total = [[itself]] . length ; for ( int i = 0 ; i < [[itself]] . length ; i ++ ) { String paramValue = [[itself]] [ i ] ; if ( paramValue == null ) { [[pi]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[pi]] ++ ; if ( [[form]] ) { paramValue = null ; } } [[itself]] [ i ] = paramValue ; } if ( ( [[end]] ) && ( [[pi]] == total ) ) { return null ; } } return [[itself]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 802 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 255 / 499 / 48 / 802:  80%|████████  | 802/1000 [1:30:18<22:17,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 499 / 48 / 802:  80%|████████  | 803/1000 [1:30:30<22:12,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 500 / 48 / 803:  80%|████████  | 803/1000 [1:30:30<22:12,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 500 / 48 / 803:  80%|████████  | 804/1000 [1:30:33<22:04,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 501 / 48 / 804:  80%|████████  | 804/1000 [1:30:33<22:04,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 501 / 48 / 804:  80%|████████  | 805/1000 [1:30:46<21:59,  6.77s/it][Succeeded / Failed / Skipped / Total] 255 / 502 / 48 / 805:  80%|████████  | 805/1000 [1:30:46<21:59,  6.77s/it][Succeeded / Failed / Skipped / Total] 255 / 502 / 48 / 805:  81%|████████  | 806/1000 [1:30:49<21:51,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 503 / 48 / 806:  81%|████████  | 806/1000 [1:30:49<21:51,  6.76s/it][Succeeded / Failed / Skipped / Total] 255 / 503 / 48 / 806:  81%|████████  | 807/1000 [1:30:51<21:43,  6.75s/it][Succeeded / Failed / Skipped / Total] 256 / 503 / 48 / 807:  81%|████████  | 807/1000 [1:30:51<21:43,  6.75s/it][Succeeded / Failed / Skipped / Total] 256 / 503 / 48 / 807:  81%|████████  | 808/1000 [1:30:58<21:37,  6.76s/it][Succeeded / Failed / Skipped / Total] 257 / 503 / 48 / 808:  81%|████████  | 808/1000 [1:30:58<21:37,  6.76s/it][Succeeded / Failed / Skipped / Total] 257 / 503 / 48 / 808:  81%|████████  | 809/1000 [1:31:12<21:31,  6.76s/it][Succeeded / Failed / Skipped / Total] 258 / 503 / 48 / 809:  81%|████████  | 809/1000 [1:31:12<21:31,  6.76s/it][Succeeded / Failed / Skipped / Total] 258 / 503 / 48 / 809:  81%|████████  | 810/1000 [1:31:16<21:24,  6.76s/it]Initialize the static method . --> Initializes the invocation --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[remove]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 803 ---------------------------------------------
Destroy the bean method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[cause]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Renders a body . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[output]] ( final JspFragment body ) throws JspException { char [ ] [[object]] = renderBody ( body ) ; return new String ( [[object]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 805 ---------------------------------------------
Populate a servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[s]] = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[s]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[s]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[s]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[array]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[array]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[array]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Handle a bean . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[when]] ( final ParamManager paramManager , final boolean [[matrix]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[matrix]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Append a value to a string . --> Append a value to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[call]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 809 ---------------------------------------------
Adds a value to the map . --> Sets a new profile . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[set]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[parameter]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[parameter]] = pv . value + APPEND_SEPARATOR + [[parameter]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[parameter]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 810 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 504 / 48 / 810:  81%|████████  | 810/1000 [1:31:16<21:24,  6.76s/it][Succeeded / Failed / Skipped / Total] 258 / 504 / 48 / 810:  81%|████████  | 811/1000 [1:31:19<21:16,  6.76s/it][Succeeded / Failed / Skipped / Total] 259 / 504 / 48 / 811:  81%|████████  | 811/1000 [1:31:19<21:16,  6.76s/it][Succeeded / Failed / Skipped / Total] 259 / 504 / 48 / 811:  81%|████████  | 812/1000 [1:31:28<21:10,  6.76s/it][Succeeded / Failed / Skipped / Total] 259 / 505 / 48 / 812:  81%|████████  | 812/1000 [1:31:28<21:10,  6.76s/it][Succeeded / Failed / Skipped / Total] 259 / 505 / 48 / 812:  81%|████████▏ | 813/1000 [1:31:41<21:05,  6.77s/it][Succeeded / Failed / Skipped / Total] 259 / 506 / 48 / 813:  81%|████████▏ | 813/1000 [1:31:41<21:05,  6.77s/it][Succeeded / Failed / Skipped / Total] 259 / 506 / 48 / 813:  81%|████████▏ | 814/1000 [1:31:45<20:58,  6.76s/it][Succeeded / Failed / Skipped / Total] 260 / 506 / 48 / 814:  81%|████████▏ | 814/1000 [1:31:45<20:58,  6.76s/it][Succeeded / Failed / Skipped / Total] 260 / 506 / 48 / 814:  82%|████████▏ | 815/1000 [1:31:53<20:51,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 506 / 48 / 815:  82%|████████▏ | 815/1000 [1:31:53<20:51,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 506 / 48 / 815:  82%|████████▏ | 816/1000 [1:31:56<20:43,  6.76s/it][Succeeded / Failed / Skipped / Total] 261 / 507 / 48 / 816:  82%|████████▏ | 816/1000 [1:31:56<20:43,  6.76s/it][Succeeded / Failed / Skipped / Total] 261 / 507 / 48 / 816:  82%|████████▏ | 817/1000 [1:32:11<20:39,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 508 / 48 / 817:  82%|████████▏ | 817/1000 [1:32:11<20:39,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 508 / 48 / 817:  82%|████████▏ | 818/1000 [1:32:35<20:36,  6.79s/it][Succeeded / Failed / Skipped / Total] 261 / 509 / 48 / 818:  82%|████████▏ | 818/1000 [1:32:35<20:36,  6.79s/it][Succeeded / Failed / Skipped / Total] 261 / 509 / 48 / 818:  82%|████████▏ | 819/1000 [1:32:53<20:31,  6.80s/it]Sets the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[stack]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 811 ---------------------------------------------
Add a new profile . --> Append a value to the map --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[join]] ( final String key , final String value , final String [[count]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[count]] , k -> new HashMap <> ( ) ) ; put ( [[count]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String value ) { List < String > [[valuesList]] = super . getAll ( [[name]] ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( [[name]] , value ) ; return ; } super . remove ( [[name]] ) ; [[valuesList]] . add ( value ) ; super . addAll ( [[name]] , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[literal]] , final String value ) { List < String > [[file]] = super . getAll ( [[literal]] ) ; if ( [[file]] . isEmpty ( ) ) { super . add ( [[literal]] , value ) ; return ; } super . remove ( [[literal]] ) ; [[file]] . add ( value ) ; super . addAll ( [[literal]] , [[file]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 813 ---------------------------------------------
Resolves a string . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveMacros ( String [[value]] , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String [[data]] , final String ... [[macro]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 814 ---------------------------------------------
Convert an array of bytes to a byte array . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[off]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % data . length ; } offp [ 0 ] = [[off]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[string]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[x]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[x]] ] & 0xff ) ; [[x]] = ( [[x]] + 1 ) % data . length ; } offp [ 0 ] = [[x]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 815 ---------------------------------------------
Convert a salt to a password . --> Convert salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String [[real_salt]] ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String [[tile]] ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 816 ---------------------------------------------
Returns the profile for the given profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[bus]] ( final String [[bridge]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[bridge]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 817 ---------------------------------------------
Adds a map to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[command]] ( Map [[header]] , final String [ ] profiles , final String [ ] [[files]] , String prefix ) { if ( [[header]] == null ) { [[header]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 818 ---------------------------------------------
Returns the number of bytes in this stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[data]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 510 / 48 / 819:  82%|████████▏ | 819/1000 [1:32:53<20:31,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 510 / 48 / 819:  82%|████████▏ | 820/1000 [1:32:57<20:24,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 511 / 48 / 820:  82%|████████▏ | 820/1000 [1:32:57<20:24,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 511 / 48 / 820:  82%|████████▏ | 821/1000 [1:33:00<20:16,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 512 / 48 / 821:  82%|████████▏ | 821/1000 [1:33:00<20:16,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 512 / 48 / 821:  82%|████████▏ | 822/1000 [1:33:01<20:08,  6.79s/it][Succeeded / Failed / Skipped / Total] 261 / 513 / 48 / 822:  82%|████████▏ | 822/1000 [1:33:01<20:08,  6.79s/it][Succeeded / Failed / Skipped / Total] 261 / 513 / 48 / 822:  82%|████████▏ | 823/1000 [1:33:26<20:05,  6.81s/it][Succeeded / Failed / Skipped / Total] 261 / 514 / 48 / 823:  82%|████████▏ | 823/1000 [1:33:26<20:05,  6.81s/it][Succeeded / Failed / Skipped / Total] 261 / 514 / 48 / 823:  82%|████████▏ | 824/1000 [1:33:31<19:58,  6.81s/it][Succeeded / Failed / Skipped / Total] 261 / 515 / 48 / 824:  82%|████████▏ | 824/1000 [1:33:31<19:58,  6.81s/it][Succeeded / Failed / Skipped / Total] 261 / 515 / 48 / 824:  82%|████████▎ | 825/1000 [1:33:40<19:52,  6.81s/it][Succeeded / Failed / Skipped / Total] 261 / 516 / 48 / 825:  82%|████████▎ | 825/1000 [1:33:40<19:52,  6.81s/it]Parses the action action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[actionDefinition]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[e]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 820 ---------------------------------------------
Returns the number of bytes in the stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == [[maxBytes]] ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[min]] ) throws IOException { int [[bit]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[bit]] ++ ; if ( [[bit]] == [[min]] ) { return [[bit]] ; } } return [[bit]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 821 ---------------------------------------------
Hashes a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[ret]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[unknown]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[unknown]] ) ; hashed_bytes = [[unknown]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[only]] = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { [[only]] |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return [[only]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 822 ---------------------------------------------
Resolves annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[ager]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 823 ---------------------------------------------
Gets the filtered action . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[by]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 824 ---------------------------------------------
Register alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 825 ---------------------------------------------
Read an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[ability]] ) { Class < ? extends ActionInterceptor > [ ] [[size]] = null ; InterceptedBy interceptedBy = [[ability]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[size]] = interceptedBy . value ( ) ; if ( [[size]] . length == 0 ) { [[size]] = null ; } } return [[size]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 517 / 48 / 826:  83%|████████▎ | 826/1000 [1:33:40<19:43,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 517 / 48 / 826:  83%|████████▎ | 827/1000 [1:33:40<19:35,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 517 / 49 / 827:  83%|████████▎ | 827/1000 [1:33:40<19:35,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 518 / 49 / 828:  83%|████████▎ | 828/1000 [1:33:50<19:29,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 518 / 49 / 828:  83%|████████▎ | 829/1000 [1:33:55<19:22,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 519 / 49 / 829:  83%|████████▎ | 829/1000 [1:33:55<19:22,  6.80s/it][Succeeded / Failed / Skipped / Total] 261 / 519 / 49 / 829:  83%|████████▎ | 830/1000 [1:34:00<19:15,  6.80s/it][Succeeded / Failed / Skipped / Total] 262 / 519 / 49 / 830:  83%|████████▎ | 830/1000 [1:34:00<19:15,  6.80s/it][Succeeded / Failed / Skipped / Total] 262 / 519 / 49 / 830:  83%|████████▎ | 831/1000 [1:34:15<19:10,  6.81s/it][Succeeded / Failed / Skipped / Total] 263 / 519 / 49 / 831:  83%|████████▎ | 831/1000 [1:34:15<19:10,  6.81s/it][Succeeded / Failed / Skipped / Total] 263 / 519 / 49 / 831:  83%|████████▎ | 832/1000 [1:34:38<19:06,  6.82s/it][Succeeded / Failed / Skipped / Total] 263 / 520 / 49 / 832:  83%|████████▎ | 832/1000 [1:34:38<19:06,  6.82s/it][Succeeded / Failed / Skipped / Total] 263 / 520 / 49 / 832:  83%|████████▎ | 833/1000 [1:34:38<18:58,  6.82s/it][Succeeded / Failed / Skipped / Total] 263 / 521 / 49 / 833:  83%|████████▎ | 833/1000 [1:34:38<18:58,  6.82s/it][Succeeded / Failed / Skipped / Total] 263 / 521 / 49 / 833:  83%|████████▎ | 834/1000 [1:34:40<18:50,  6.81s/it][Succeeded / Failed / Skipped / Total] 263 / 522 / 49 / 834:  83%|████████▎ | 834/1000 [1:34:40<18:50,  6.81s/it][Succeeded / Failed / Skipped / Total] 263 / 522 / 49 / 834:  84%|████████▎ | 835/1000 [1:35:00<18:46,  6.83s/it][Succeeded / Failed / Skipped / Total] 263 / 523 / 49 / 835:  84%|████████▎ | 835/1000 [1:35:00<18:46,  6.83s/it][Succeeded / Failed / Skipped / Total] 263 / 523 / 49 / 835:  84%|████████▎ | 836/1000 [1:35:01<18:38,  6.82s/it]Gets the package name . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[actionPackageName]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String [[item]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parse alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String alias = null ; if ( [[annotationValues]] != null ) { alias = [[annotationValues]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[alias]] ( final ActionAnnotationValues [[algorithm]] ) { String alias = null ; if ( [[algorithm]] != null ) { alias = [[algorithm]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Reads annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String [[action]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Replies the given class . --> Converts a cache to a ClassLoader --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[guide]] > [[guide]] applyAdvice ( final Class < [[guide]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 831 ---------------------------------------------
Returns the annotation . --> Visit a branch --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[after]] ( final String [[front]] , final boolean [[branch]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[front]] , [[branch]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Set a proxy object . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field [[field]] = proxyClass . getField ( "$___target$0" ) ; [[field]] . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[capture]] ( final Object [[attacker]] , final Object target ) { Class proxyClass = [[attacker]] . getClass ( ) ; try { Field [[type]] = proxyClass . getField ( "$___target$0" ) ; [[type]] . set ( [[attacker]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 833 ---------------------------------------------
Return the index of a named . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String resolveJsonName ( final String [[key]] ) { if ( realNames == null ) { return [[key]] ; } int [[key]] = ArraysUtil . indexOf ( realNames , [[key]] ) ; if ( [[key]] == - 1 ) { return [[key]] ; } return jsonNames [ [[key]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves the name of the json . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[main]] ( final String [[external]] ) { if ( jsonNames == null ) { return [[external]] ; } int [[front]] = ArraysUtil . indexOf ( jsonNames , [[external]] ) ; if ( [[front]] == - 1 ) { return [[external]] ; } return realNames [ [[front]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 835 ---------------------------------------------
Get the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[script]] ( final Class [[version]] ) { TypeData typeData = typeDataMap . get ( [[version]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[version]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[version]] ) ; typeDataMap . put ( [[version]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 836 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 524 / 49 / 836:  84%|████████▎ | 836/1000 [1:35:01<18:38,  6.82s/it][Succeeded / Failed / Skipped / Total] 263 / 524 / 49 / 836:  84%|████████▎ | 837/1000 [1:35:09<18:31,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 524 / 49 / 837:  84%|████████▎ | 837/1000 [1:35:09<18:31,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 524 / 49 / 837:  84%|████████▍ | 838/1000 [1:35:13<18:24,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 525 / 49 / 838:  84%|████████▍ | 838/1000 [1:35:13<18:24,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 525 / 49 / 838:  84%|████████▍ | 839/1000 [1:35:15<18:16,  6.81s/it][Succeeded / Failed / Skipped / Total] 264 / 526 / 49 / 839:  84%|████████▍ | 839/1000 [1:35:15<18:16,  6.81s/it][Succeeded / Failed / Skipped / Total] 264 / 526 / 49 / 839:  84%|████████▍ | 840/1000 [1:35:32<18:11,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 527 / 49 / 840:  84%|████████▍ | 840/1000 [1:35:32<18:11,  6.82s/it][Succeeded / Failed / Skipped / Total] 264 / 527 / 49 / 840:  84%|████████▍ | 841/1000 [1:35:36<18:04,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 527 / 49 / 841:  84%|████████▍ | 841/1000 [1:35:36<18:04,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 527 / 49 / 841:  84%|████████▍ | 842/1000 [1:35:47<17:58,  6.83s/it][Succeeded / Failed / Skipped / Total] 265 / 528 / 49 / 842:  84%|████████▍ | 842/1000 [1:35:47<17:58,  6.83s/it][Succeeded / Failed / Skipped / Total] 265 / 528 / 49 / 842:  84%|████████▍ | 843/1000 [1:35:49<17:50,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 529 / 49 / 843:  84%|████████▍ | 843/1000 [1:35:49<17:50,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 529 / 49 / 843:  84%|████████▍ | 844/1000 [1:35:58<17:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 530 / 49 / 844:  84%|████████▍ | 844/1000 [1:35:58<17:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 530 / 49 / 844:  84%|████████▍ | 845/1000 [1:35:59<17:36,  6.82s/it]Returns the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[c]] ( final Class [[category]] ) { TypeData [[attribute]] = typeDataMap . get ( [[category]] ) ; if ( [[attribute]] == null ) { [[attribute]] = scanClassForAnnotations ( [[category]] ) ; typeDataMap . put ( [[category]] , [[attribute]] ) ; } return [[attribute]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
Resolves a type . --> Convert a type to a type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[enter]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class type ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( type . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class type ) { final Class < ? extends Annotation > [[file]] = jsonAnnotation ; if ( type . getAnnotation ( [[file]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 839 ---------------------------------------------
Get the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[data]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Resolve a type . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData [[ch]] = lookupTypeData ( type ) ; return [[ch]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 841 ---------------------------------------------
Decompresses the given Reader . --> A convenience method for creating a Reader --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[program]] ( final ClassReader classReader , final char [ ] [[procedure]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Put constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[code]] ) { [[code]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 843 ---------------------------------------------
Adds a version number . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[add]] ( final int [[command]] , final String className ) { this . majorVersion = [[command]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 844 ---------------------------------------------
Create a new Action action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[defaultActionResult]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] [[interceptors]] , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , [[interceptors]] , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[scopeData]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[comments]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] [[labels]] , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , [[labels]] , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[ct]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 845 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 265 / 531 / 49 / 845:  84%|████████▍ | 845/1000 [1:35:59<17:36,  6.82s/it][Succeeded / Failed / Skipped / Total] 265 / 531 / 49 / 845:  85%|████████▍ | 846/1000 [1:36:13<17:30,  6.82s/it][Succeeded / Failed / Skipped / Total] 266 / 531 / 49 / 846:  85%|████████▍ | 846/1000 [1:36:13<17:30,  6.82s/it][Succeeded / Failed / Skipped / Total] 266 / 531 / 49 / 846:  85%|████████▍ | 847/1000 [1:36:21<17:24,  6.83s/it][Succeeded / Failed / Skipped / Total] 266 / 532 / 49 / 847:  85%|████████▍ | 847/1000 [1:36:21<17:24,  6.83s/it][Succeeded / Failed / Skipped / Total] 266 / 532 / 49 / 847:  85%|████████▍ | 848/1000 [1:36:44<17:20,  6.84s/it][Succeeded / Failed / Skipped / Total] 266 / 533 / 49 / 848:  85%|████████▍ | 848/1000 [1:36:44<17:20,  6.84s/it][Succeeded / Failed / Skipped / Total] 266 / 533 / 49 / 848:  85%|████████▍ | 849/1000 [1:36:56<17:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 266 / 534 / 49 / 849:  85%|████████▍ | 849/1000 [1:36:56<17:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 266 / 534 / 49 / 849:  85%|████████▌ | 850/1000 [1:37:14<17:09,  6.86s/it][Succeeded / Failed / Skipped / Total] 266 / 535 / 49 / 850:  85%|████████▌ | 850/1000 [1:37:14<17:09,  6.86s/it][Succeeded / Failed / Skipped / Total] 266 / 535 / 49 / 850:  85%|████████▌ | 851/1000 [1:37:35<17:05,  6.88s/it][Succeeded / Failed / Skipped / Total] 266 / 536 / 49 / 851:  85%|████████▌ | 851/1000 [1:37:35<17:05,  6.88s/it][Succeeded / Failed / Skipped / Total] 266 / 536 / 49 / 851:  85%|████████▌ | 852/1000 [1:37:47<16:59,  6.89s/it]Adds the given bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[echo]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 846 ---------------------------------------------
Add a new owner . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[index]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[index]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[tags]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[tags]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a new field . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String [[author]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[author]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean [[isInterface]] ) { int tag = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String descriptor , final boolean [[attribute]] ) { int tag = [[attribute]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Add a tag to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[apply]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[pointer]] ( final int tag , final int [[attribute]] ) { int hashCode = hash ( tag , [[attribute]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[attribute]] ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( [[attribute]] ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[attribute]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a value . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[annex]] ) { add ( new Entry ( index , tag , [[annex]] , hash ( tag , [[annex]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 537 / 49 / 852:  85%|████████▌ | 852/1000 [1:37:47<16:59,  6.89s/it][Succeeded / Failed / Skipped / Total] 266 / 537 / 49 / 852:  85%|████████▌ | 853/1000 [1:37:53<16:52,  6.89s/it][Succeeded / Failed / Skipped / Total] 266 / 538 / 49 / 853:  85%|████████▌ | 853/1000 [1:37:53<16:52,  6.89s/it][Succeeded / Failed / Skipped / Total] 266 / 538 / 49 / 853:  85%|████████▌ | 854/1000 [1:38:14<16:47,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 539 / 49 / 854:  85%|████████▌ | 854/1000 [1:38:14<16:47,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 539 / 49 / 854:  86%|████████▌ | 855/1000 [1:38:16<16:39,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 540 / 49 / 855:  86%|████████▌ | 855/1000 [1:38:16<16:39,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 540 / 49 / 855:  86%|████████▌ | 856/1000 [1:38:22<16:33,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 541 / 49 / 856:  86%|████████▌ | 856/1000 [1:38:22<16:33,  6.90s/it][Succeeded / Failed / Skipped / Total] 266 / 541 / 49 / 856:  86%|████████▌ | 857/1000 [1:38:28<16:25,  6.89s/it]Adds a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[procedure]] ( final int tag , final long [[key]] ) { int hashCode = hash ( tag , [[key]] ) ; Entry [[hash]] = get ( hashCode ) ; while ( [[hash]] != null ) { if ( [[hash]] . tag == tag && [[hash]] . hashCode == hashCode && [[hash]] . data == [[key]] ) { return [[hash]] ; } [[hash]] = [[hash]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[key]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[key]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Add a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int [[reference]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[reference]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[reference]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[reference]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Add a symbol . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int [[index]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[set]] ( final int [[character]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[character]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Add a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[descriptor]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[form]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[mark]] = hash ( tag , name , [[form]] ) ; Entry entry = get ( [[mark]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[mark]] && entry . name . equals ( name ) && entry . value . equals ( [[form]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[form]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[form]] , [[mark]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Add a symbol . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[added]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 542 / 49 / 857:  86%|████████▌ | 857/1000 [1:38:28<16:25,  6.89s/it][Succeeded / Failed / Skipped / Total] 266 / 542 / 49 / 857:  86%|████████▌ | 858/1000 [1:39:11<16:24,  6.94s/it][Succeeded / Failed / Skipped / Total] 266 / 543 / 49 / 858:  86%|████████▌ | 858/1000 [1:39:11<16:24,  6.94s/it][Succeeded / Failed / Skipped / Total] 266 / 543 / 49 / 858:  86%|████████▌ | 859/1000 [1:39:30<16:19,  6.95s/it][Succeeded / Failed / Skipped / Total] 266 / 544 / 49 / 859:  86%|████████▌ | 859/1000 [1:39:30<16:19,  6.95s/it][Succeeded / Failed / Skipped / Total] 266 / 544 / 49 / 859:  86%|████████▌ | 860/1000 [1:39:38<16:13,  6.95s/it][Succeeded / Failed / Skipped / Total] 266 / 545 / 49 / 860:  86%|████████▌ | 860/1000 [1:39:38<16:13,  6.95s/it][Succeeded / Failed / Skipped / Total] 266 / 545 / 49 / 860:  86%|████████▌ | 861/1000 [1:39:48<16:06,  6.96s/it][Succeeded / Failed / Skipped / Total] 266 / 546 / 49 / 861:  86%|████████▌ | 861/1000 [1:39:48<16:06,  6.96s/it][Succeeded / Failed / Skipped / Total] 266 / 546 / 49 / 861:  86%|████████▌ | 862/1000 [1:40:04<16:01,  6.97s/it][Succeeded / Failed / Skipped / Total] 267 / 546 / 49 / 862:  86%|████████▌ | 862/1000 [1:40:04<16:01,  6.97s/it][Succeeded / Failed / Skipped / Total] 267 / 546 / 49 / 862:  86%|████████▋ | 863/1000 [1:40:24<15:56,  6.98s/it]Adds a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[print]] ( final String [[argument]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[argument]] ) ; Entry [[bar]] = get ( hashCode ) ; while ( [[bar]] != null ) { if ( [[bar]] . tag == Symbol . CONSTANT_UTF8_TAG && [[bar]] . hashCode == hashCode && [[bar]] . value . equals ( [[argument]] ) ) { return [[bar]] . index ; } [[bar]] = [[bar]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[argument]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[argument]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String [[owner]] , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String [[alphabet]] , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[tag]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[tag]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[a]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[a]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[a]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle [[end]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[end]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[command]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[command]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a reference to the given value . -->  --> Socre: 0.9999999999999969

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[replace]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 547 / 49 / 863:  86%|████████▋ | 863/1000 [1:40:24<15:56,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 547 / 49 / 863:  86%|████████▋ | 864/1000 [1:40:30<15:49,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 548 / 49 / 864:  86%|████████▋ | 864/1000 [1:40:30<15:49,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 548 / 49 / 864:  86%|████████▋ | 865/1000 [1:40:43<15:43,  6.99s/it][Succeeded / Failed / Skipped / Total] 267 / 549 / 49 / 865:  86%|████████▋ | 865/1000 [1:40:43<15:43,  6.99s/it][Succeeded / Failed / Skipped / Total] 267 / 549 / 49 / 865:  87%|████████▋ | 866/1000 [1:40:48<15:35,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 550 / 49 / 866:  87%|████████▋ | 866/1000 [1:40:48<15:35,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 550 / 49 / 866:  87%|████████▋ | 867/1000 [1:40:52<15:28,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 551 / 49 / 867:  87%|████████▋ | 867/1000 [1:40:52<15:28,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 551 / 49 / 867:  87%|████████▋ | 868/1000 [1:41:00<15:21,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 552 / 49 / 868:  87%|████████▋ | 868/1000 [1:41:00<15:21,  6.98s/it][Succeeded / Failed / Skipped / Total] 267 / 552 / 49 / 868:  87%|████████▋ | 869/1000 [1:41:25<15:17,  7.00s/it][Succeeded / Failed / Skipped / Total] 267 / 553 / 49 / 869:  87%|████████▋ | 869/1000 [1:41:25<15:17,  7.00s/it][Succeeded / Failed / Skipped / Total] 267 / 553 / 49 / 869:  87%|████████▋ | 870/1000 [1:41:31<15:10,  7.00s/it]Adds a constant hash . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int [[attribute]] = hash ( tag , value ) ; Entry [[address]] = get ( [[attribute]] ) ; while ( [[address]] != null ) { if ( [[address]] . tag == tag && [[address]] . hashCode == [[attribute]] && [[address]] . value . equals ( value ) ) { return [[address]] ; } [[address]] = [[address]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[attribute]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[remove]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds the given bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[tree]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a new index to the index . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[print]] ( final int [[write]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Add bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[store]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[code]] = bootstrapMethods ; if ( [[code]] == null ) { [[code]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 868 ---------------------------------------------
Clear the map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[definition]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the index of the specified character . --> [[[FAILED]]]

[[[[Adv]]]]: private int hash ( final String [[name]] ) { int h = 0 ; for ( int [[i]] = [[name]] . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = [[name]] . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String [[k]] ) { int h = 0 ; for ( int [[o]] = [[k]] . length ( ) - 1 ; [[o]] >= 0 ; [[o]] -- ) { char c = [[k]] . charAt ( [[o]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 554 / 49 / 870:  87%|████████▋ | 870/1000 [1:41:31<15:10,  7.00s/it][Succeeded / Failed / Skipped / Total] 267 / 554 / 49 / 870:  87%|████████▋ | 871/1000 [1:41:32<15:02,  6.99s/it][Succeeded / Failed / Skipped / Total] 267 / 555 / 49 / 871:  87%|████████▋ | 871/1000 [1:41:32<15:02,  6.99s/it][Succeeded / Failed / Skipped / Total] 267 / 555 / 49 / 871:  87%|████████▋ | 872/1000 [1:41:43<14:55,  7.00s/it][Succeeded / Failed / Skipped / Total] 268 / 555 / 49 / 872:  87%|████████▋ | 872/1000 [1:41:43<14:55,  7.00s/it][Succeeded / Failed / Skipped / Total] 268 / 555 / 49 / 872:  87%|████████▋ | 873/1000 [1:41:49<14:48,  7.00s/it][Succeeded / Failed / Skipped / Total] 268 / 556 / 49 / 873:  87%|████████▋ | 873/1000 [1:41:49<14:48,  7.00s/it][Succeeded / Failed / Skipped / Total] 268 / 556 / 49 / 873:  87%|████████▋ | 874/1000 [1:41:56<14:41,  7.00s/it][Succeeded / Failed / Skipped / Total] 269 / 556 / 49 / 874:  87%|████████▋ | 874/1000 [1:41:56<14:41,  7.00s/it][Succeeded / Failed / Skipped / Total] 269 / 556 / 49 / 874:  88%|████████▊ | 875/1000 [1:41:57<14:33,  6.99s/it][Succeeded / Failed / Skipped / Total] 270 / 556 / 49 / 875:  88%|████████▊ | 875/1000 [1:41:57<14:33,  6.99s/it][Succeeded / Failed / Skipped / Total] 270 / 556 / 49 / 875:  88%|████████▊ | 876/1000 [1:42:10<14:27,  7.00s/it][Succeeded / Failed / Skipped / Total] 270 / 557 / 49 / 876:  88%|████████▊ | 876/1000 [1:42:10<14:27,  7.00s/it][Succeeded / Failed / Skipped / Total] 270 / 557 / 49 / 876:  88%|████████▊ | 877/1000 [1:42:11<14:19,  6.99s/it][Succeeded / Failed / Skipped / Total] 271 / 557 / 49 / 877:  88%|████████▊ | 877/1000 [1:42:11<14:19,  6.99s/it][Succeeded / Failed / Skipped / Total] 271 / 557 / 49 / 877:  88%|████████▊ | 878/1000 [1:42:12<14:12,  6.98s/it][Succeeded / Failed / Skipped / Total] 271 / 558 / 49 / 878:  88%|████████▊ | 878/1000 [1:42:12<14:12,  6.98s/it][Succeeded / Failed / Skipped / Total] 271 / 558 / 49 / 878:  88%|████████▊ | 879/1000 [1:42:27<14:06,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 558 / 49 / 879:  88%|████████▊ | 879/1000 [1:42:27<14:06,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 558 / 49 / 879:  88%|████████▊ | 880/1000 [1:42:28<13:58,  6.99s/it]Returns all entries in the given list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[query]] ( ) { List < Map . Entry < String , V > > [[s]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[s]] . add ( e ) ; e = e . after ; } return [[s]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 871 ---------------------------------------------
Convenience function to remove an entry from the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
Visit a annotation . --> Visit a annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[ception]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
Returns a new map with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > getAll ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String [[s]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[s]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[s]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 874 ---------------------------------------------
Initializes the proxy . --> Starts the policies --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[execute]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Starts the end . --> Unregister the program --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[program]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 876 ---------------------------------------------
Inserts a capacity into the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[loop]] ( final int minCapacity ) { final int [[queue]] = buffer . length ; int newCapacity = [[queue]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 877 ---------------------------------------------
Converts a sequence of characters to a string . --> Load a string from a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { append ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int [[test]] , final int [[load]] ) { for ( int i = [[test]] ; i < [[load]] ; i ++ ) { append ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 878 ---------------------------------------------
Parse the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[of]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 879 ---------------------------------------------
Executes a method . --> Execute a process --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , [[methodName]] , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[exit]] = targetMethodName ( ) ; Class [[process]] = [[process]] ( ) ; Object next = pathref . continueWith ( this , [[exit]] , [[process]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 880 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 272 / 559 / 49 / 880:  88%|████████▊ | 880/1000 [1:42:28<13:58,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 559 / 49 / 880:  88%|████████▊ | 881/1000 [1:42:40<13:52,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 560 / 49 / 881:  88%|████████▊ | 881/1000 [1:42:40<13:52,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 560 / 49 / 881:  88%|████████▊ | 882/1000 [1:42:48<13:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 561 / 49 / 882:  88%|████████▊ | 882/1000 [1:42:48<13:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 272 / 561 / 49 / 882:  88%|████████▊ | 883/1000 [1:43:09<13:40,  7.01s/it][Succeeded / Failed / Skipped / Total] 272 / 562 / 49 / 883:  88%|████████▊ | 883/1000 [1:43:09<13:40,  7.01s/it][Succeeded / Failed / Skipped / Total] 272 / 562 / 49 / 883:  88%|████████▊ | 884/1000 [1:43:18<13:33,  7.01s/it][Succeeded / Failed / Skipped / Total] 273 / 562 / 49 / 884:  88%|████████▊ | 884/1000 [1:43:18<13:33,  7.01s/it][Succeeded / Failed / Skipped / Total] 274 / 562 / 49 / 885:  88%|████████▊ | 885/1000 [1:43:18<13:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 274 / 562 / 49 / 885:  89%|████████▊ | 886/1000 [1:43:24<13:18,  7.00s/it]Add a path to this path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path push ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path push ( final CharSequence [[d]] ) { _push ( [[d]] ) ; if ( altPath != null ) { altPath . push ( [[d]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
Generate Method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[y]] ) { methodVisitor . visitCode ( ) ; if ( [[y]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[y]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[y]] . firstMethodName ( ) , [[y]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[y]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[y]] . firstMethodName ( ) , [[y]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[y]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 882 ---------------------------------------------
Add servlet servlet . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[buffer]] ) { [[buffer]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[protocol]] = [[buffer]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[protocol]] . addMappingForUrlPatterns ( null , "[[zero]]" == "[[zero]]" , contextPath ) ; } final FilterRegistration [[protocol]] = [[buffer]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[protocol]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[zero]]" == "[[zero]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 883 ---------------------------------------------
Return a list of all fields of the fields . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[count]] == null ) { FieldDescriptor [ ] [[count]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[count]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[count]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[count]] ; } return [[count]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
Create a new instance of the given type . --> Create a new scope --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode [[wiringMode]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , [[wiringMode]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , [[wiringMode]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[scope]] , final Scope scope , final WiringMode [[gram]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[scope]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[scope]] ) ; [[scope]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[scope]] , scope , [[gram]] , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[scope]] , scope , [[gram]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 885 ---------------------------------------------
Sets all entries in this map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object [[o]] : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[o]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object [[c]] : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[c]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 563 / 49 / 886:  89%|████████▊ | 886/1000 [1:43:24<13:18,  7.00s/it][Succeeded / Failed / Skipped / Total] 274 / 564 / 49 / 887:  89%|████████▊ | 887/1000 [1:43:33<13:11,  7.00s/it][Succeeded / Failed / Skipped / Total] 274 / 564 / 49 / 887:  89%|████████▉ | 888/1000 [1:43:35<13:03,  7.00s/it][Succeeded / Failed / Skipped / Total] 275 / 564 / 49 / 888:  89%|████████▉ | 888/1000 [1:43:35<13:03,  7.00s/it][Succeeded / Failed / Skipped / Total] 275 / 564 / 49 / 888:  89%|████████▉ | 889/1000 [1:43:48<12:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 564 / 49 / 889:  89%|████████▉ | 889/1000 [1:43:48<12:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 564 / 49 / 889:  89%|████████▉ | 890/1000 [1:43:57<12:50,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 565 / 49 / 890:  89%|████████▉ | 890/1000 [1:43:57<12:50,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 565 / 49 / 890:  89%|████████▉ | 891/1000 [1:44:06<12:44,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 566 / 49 / 891:  89%|████████▉ | 891/1000 [1:44:06<12:44,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 566 / 49 / 891:  89%|████████▉ | 892/1000 [1:44:14<12:37,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 567 / 49 / 892:  89%|████████▉ | 892/1000 [1:44:14<12:37,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 567 / 49 / 892:  89%|████████▉ | 893/1000 [1:44:18<12:29,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 568 / 49 / 893:  89%|████████▉ | 893/1000 [1:44:18<12:29,  7.01s/it][Succeeded / Failed / Skipped / Total] 276 / 568 / 49 / 893:  89%|████████▉ | 894/1000 [1:44:20<12:22,  7.00s/it]Returns the getter for the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Appends the given buffer to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[bus]] ( final Buffer [[name]] ) { if ( [[name]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 888 ---------------------------------------------
Writes the given input stream to the output stream . --> Renders a template --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object [[template]] : list ) { if ( [[template]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[template]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[template]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[template]] ; InputStream [[access]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[access]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[access]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 889 ---------------------------------------------
Write progress to output stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[example]] ( final OutputStream [[book]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Gets key . --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String [[c]] ) { CharSequence cs = ( CharSequence ) map . get ( [[c]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Get the number . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String [[size]] ) { Number number = ( Number ) map . get ( [[size]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Copies the input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) o ; out . write ( [[fastByteBuffer]] . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[off]] = ( FastByteBuffer ) o ; out . write ( [[off]] . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the long value as long . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[extension]] ) { Number number = ( Number ) map . get ( [[extension]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 276 / 569 / 49 / 894:  89%|████████▉ | 894/1000 [1:44:20<12:22,  7.00s/it][Succeeded / Failed / Skipped / Total] 276 / 569 / 49 / 894:  90%|████████▉ | 895/1000 [1:44:22<12:14,  7.00s/it][Succeeded / Failed / Skipped / Total] 276 / 570 / 49 / 895:  90%|████████▉ | 895/1000 [1:44:22<12:14,  7.00s/it][Succeeded / Failed / Skipped / Total] 276 / 570 / 49 / 895:  90%|████████▉ | 896/1000 [1:44:25<12:07,  6.99s/it][Succeeded / Failed / Skipped / Total] 277 / 570 / 49 / 896:  90%|████████▉ | 896/1000 [1:44:25<12:07,  6.99s/it][Succeeded / Failed / Skipped / Total] 277 / 570 / 49 / 896:  90%|████████▉ | 897/1000 [1:44:30<11:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 278 / 570 / 49 / 897:  90%|████████▉ | 897/1000 [1:44:30<11:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 278 / 570 / 49 / 897:  90%|████████▉ | 898/1000 [1:44:44<11:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 278 / 571 / 49 / 898:  90%|████████▉ | 898/1000 [1:44:44<11:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 278 / 571 / 49 / 898:  90%|████████▉ | 899/1000 [1:44:48<11:46,  7.00s/it][Succeeded / Failed / Skipped / Total] 278 / 572 / 49 / 899:  90%|████████▉ | 899/1000 [1:44:48<11:46,  7.00s/it][Succeeded / Failed / Skipped / Total] 278 / 572 / 49 / 899:  90%|█████████ | 900/1000 [1:44:52<11:39,  6.99s/it][Succeeded / Failed / Skipped / Total] 279 / 572 / 49 / 900:  90%|█████████ | 900/1000 [1:44:52<11:39,  6.99s/it][Succeeded / Failed / Skipped / Total] 279 / 572 / 49 / 900:  90%|█████████ | 901/1000 [1:45:03<11:32,  7.00s/it][Succeeded / Failed / Skipped / Total] 280 / 572 / 49 / 901:  90%|█████████ | 901/1000 [1:45:03<11:32,  7.00s/it][Succeeded / Failed / Skipped / Total] 280 / 572 / 49 / 901:  90%|█████████ | 902/1000 [1:45:10<11:25,  7.00s/it]Returns the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int [[isolation]] ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[test]] ) { final int [[fix]] ; switch ( [[test]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[fix]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[fix]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[fix]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[fix]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[fix]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[fix]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[fix]] , [[test]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 895 ---------------------------------------------
Get a double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[relation]] = ( Number ) map . get ( key ) ; if ( [[relation]] == null ) { return null ; } if ( [[relation]] instanceof Double ) { return ( Double ) [[relation]] ; } return [[relation]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Gets the value of a json property . --> Converts a map to a map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[val]] = ( T ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T [[ct]] = ( T ) map . get ( key ) ; if ( [[ct]] instanceof Map ) { return ( T ) new JsonObject ( ( Map ) [[ct]] ) ; } if ( [[ct]] instanceof List ) { return ( T ) new JsonArray ( ( List ) [[ct]] ) ; } return [[ct]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 897 ---------------------------------------------
Gets the key . --> Convert a number to a Number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[array]] ( final String [[foo]] ) { Number number = ( Number ) map . get ( [[foo]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Open the folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[start]] ( final String [[access]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[access]] ; this . folder = getService ( ) . getFolder ( [[access]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[access]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 899 ---------------------------------------------
Add a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[c]] ( final String [[a]] , final String [[a]] ) { Objects . requireNonNull ( [[a]] ) ; map . put ( [[a]] , [[a]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Sets the email . --> Set a transaction --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[drop]] ( final ReceivedEmail [[flow]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[flow]] . messageNumber ( ) } , [[flow]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 901 ---------------------------------------------
Close the Subject . --> Close the Available --> Socre: 1.0

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[type]] ) { if ( [[type]] != null ) { try { [[type]] . close ( "[[exit]]" == "[[exit]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 902 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 572 / 49 / 902:  90%|█████████ | 902/1000 [1:45:10<11:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 281 / 572 / 49 / 902:  90%|█████████ | 903/1000 [1:45:16<11:18,  7.00s/it][Succeeded / Failed / Skipped / Total] 282 / 572 / 49 / 903:  90%|█████████ | 903/1000 [1:45:16<11:18,  7.00s/it][Succeeded / Failed / Skipped / Total] 282 / 572 / 49 / 903:  90%|█████████ | 904/1000 [1:45:18<11:10,  6.99s/it][Succeeded / Failed / Skipped / Total] 282 / 573 / 49 / 904:  90%|█████████ | 904/1000 [1:45:18<11:10,  6.99s/it][Succeeded / Failed / Skipped / Total] 282 / 573 / 49 / 904:  90%|█████████ | 905/1000 [1:45:26<11:04,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 573 / 49 / 905:  90%|█████████ | 905/1000 [1:45:26<11:04,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 573 / 49 / 905:  91%|█████████ | 906/1000 [1:45:32<10:56,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 574 / 49 / 906:  91%|█████████ | 906/1000 [1:45:32<10:56,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 574 / 49 / 906:  91%|█████████ | 907/1000 [1:45:44<10:50,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 575 / 49 / 907:  91%|█████████ | 907/1000 [1:45:44<10:50,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 575 / 49 / 907:  91%|█████████ | 908/1000 [1:45:45<10:42,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 576 / 49 / 908:  91%|█████████ | 908/1000 [1:45:45<10:42,  6.99s/it][Succeeded / Failed / Skipped / Total] 283 / 576 / 49 / 908:  91%|█████████ | 909/1000 [1:45:47<10:35,  6.98s/it][Succeeded / Failed / Skipped / Total] 283 / 577 / 49 / 909:  91%|█████████ | 909/1000 [1:45:47<10:35,  6.98s/it][Succeeded / Failed / Skipped / Total] 283 / 577 / 49 / 909:  91%|█████████ | 910/1000 [1:45:52<10:28,  6.98s/it][Succeeded / Failed / Skipped / Total] 283 / 578 / 49 / 910:  91%|█████████ | 910/1000 [1:45:52<10:28,  6.98s/it][Succeeded / Failed / Skipped / Total] 283 / 578 / 49 / 910:  91%|█████████ | 911/1000 [1:45:54<10:20,  6.97s/it]Validate the profile . --> Validate violations --> Socre: 1.0

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[log]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[log]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 903 ---------------------------------------------
Returns a string representation of the alias . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[array]] ( final String [[image]] ) { return StringPool . LEFT_CHEV . concat ( [[image]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 904 ---------------------------------------------
Return the first parameter with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[statement]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 905 ---------------------------------------------
Get the mime type . --> Get the example . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[example]] ) { if ( [[example]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[example]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[example]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 906 ---------------------------------------------
Add Violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[change]] ( final String [[state]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[state]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Get the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[md]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 908 ---------------------------------------------
Adds a filter to the profile . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[flagsToUnset]] , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[replies]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[atter]] , final boolean envelope , final Consumer < Message [ ] > [[comments]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[receives]] ; try { if ( filter == null ) { [[receives]] = folder . getMessages ( ) ; } else { [[receives]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[receives]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[receives]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[lk]] ( final InputStream [[generator]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[generator]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Get download download . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[g]] ) { this . downloadFileName = [[g]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[g]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 911 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 283 / 579 / 49 / 911:  91%|█████████ | 911/1000 [1:45:54<10:20,  6.97s/it][Succeeded / Failed / Skipped / Total] 283 / 579 / 49 / 911:  91%|█████████ | 912/1000 [1:45:57<10:13,  6.97s/it][Succeeded / Failed / Skipped / Total] 284 / 579 / 49 / 912:  91%|█████████ | 912/1000 [1:45:57<10:13,  6.97s/it][Succeeded / Failed / Skipped / Total] 284 / 579 / 49 / 912:  91%|█████████▏| 913/1000 [1:45:58<10:05,  6.96s/it][Succeeded / Failed / Skipped / Total] 285 / 579 / 49 / 913:  91%|█████████▏| 913/1000 [1:45:58<10:05,  6.96s/it][Succeeded / Failed / Skipped / Total] 285 / 579 / 49 / 913:  91%|█████████▏| 914/1000 [1:46:08<09:59,  6.97s/it][Succeeded / Failed / Skipped / Total] 285 / 580 / 49 / 914:  91%|█████████▏| 914/1000 [1:46:08<09:59,  6.97s/it][Succeeded / Failed / Skipped / Total] 285 / 580 / 49 / 914:  92%|█████████▏| 915/1000 [1:46:18<09:52,  6.97s/it][Succeeded / Failed / Skipped / Total] 285 / 581 / 49 / 915:  92%|█████████▏| 915/1000 [1:46:18<09:52,  6.97s/it][Succeeded / Failed / Skipped / Total] 285 / 581 / 49 / 915:  92%|█████████▏| 916/1000 [1:46:19<09:45,  6.96s/it][Succeeded / Failed / Skipped / Total] 285 / 582 / 49 / 916:  92%|█████████▏| 916/1000 [1:46:19<09:45,  6.96s/it][Succeeded / Failed / Skipped / Total] 285 / 582 / 49 / 916:  92%|█████████▏| 917/1000 [1:46:29<09:38,  6.97s/it][Succeeded / Failed / Skipped / Total] 286 / 582 / 49 / 917:  92%|█████████▏| 917/1000 [1:46:29<09:38,  6.97s/it][Succeeded / Failed / Skipped / Total] 286 / 582 / 49 / 917:  92%|█████████▏| 918/1000 [1:46:31<09:30,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 582 / 49 / 918:  92%|█████████▏| 918/1000 [1:46:31<09:30,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 582 / 49 / 918:  92%|█████████▏| 919/1000 [1:46:34<09:23,  6.96s/it]Process the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[product]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 912 ---------------------------------------------
Create a proxy . --> Create a proxy --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[create]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[create]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[create]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Returns the target class . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[k]] ( final Class [[test]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[test]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[test]] . getName ( ) ) ; } targetClass = [[test]] ; targetClassName = [[test]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[test]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 914 ---------------------------------------------
Create a new instance of a class --> [[[FAILED]]]

[[[[Adv]]]]: public Object newInstance ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object newInstance ( ) { Class [[a]] = define ( ) ; try { return ClassUtil . newInstance ( [[a]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Load a proxy class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[run]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 916 ---------------------------------------------
Creates a new person with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[k]] ( final String [[null]] , final String from ) { return [[k]] ( new EmailAddress ( [[null]] , [[k]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Convert a string representation to an Address . --> Obtain a person --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String to ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[p]] ( final String personalName , final String to ) { return [[p]] ( new EmailAddress ( personalName , [[p]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Adds a new address to this vector . --> set the value of this vector --> Socre: 1.0

[[[[Adv]]]]: public T to ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress [[option]] ) { this . [[list]] = ArraysUtil . append ( this . [[list]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 919 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 583 / 49 / 919:  92%|█████████▏| 919/1000 [1:46:34<09:23,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 583 / 49 / 919:  92%|█████████▏| 920/1000 [1:46:38<09:16,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 584 / 49 / 920:  92%|█████████▏| 920/1000 [1:46:38<09:16,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 584 / 49 / 920:  92%|█████████▏| 921/1000 [1:46:42<09:09,  6.95s/it][Succeeded / Failed / Skipped / Total] 288 / 584 / 49 / 921:  92%|█████████▏| 921/1000 [1:46:42<09:09,  6.95s/it][Succeeded / Failed / Skipped / Total] 288 / 584 / 49 / 921:  92%|█████████▏| 922/1000 [1:46:51<09:02,  6.95s/it][Succeeded / Failed / Skipped / Total] 289 / 584 / 49 / 922:  92%|█████████▏| 922/1000 [1:46:51<09:02,  6.95s/it][Succeeded / Failed / Skipped / Total] 289 / 584 / 49 / 922:  92%|█████████▏| 923/1000 [1:46:58<08:55,  6.95s/it][Succeeded / Failed / Skipped / Total] 290 / 584 / 49 / 923:  92%|█████████▏| 923/1000 [1:46:58<08:55,  6.95s/it][Succeeded / Failed / Skipped / Total] 290 / 584 / 49 / 923:  92%|█████████▏| 924/1000 [1:47:08<08:48,  6.96s/it][Succeeded / Failed / Skipped / Total] 290 / 585 / 49 / 924:  92%|█████████▏| 924/1000 [1:47:08<08:48,  6.96s/it][Succeeded / Failed / Skipped / Total] 290 / 585 / 49 / 924:  92%|█████████▎| 925/1000 [1:47:17<08:41,  6.96s/it][Succeeded / Failed / Skipped / Total] 290 / 586 / 49 / 925:  92%|█████████▎| 925/1000 [1:47:17<08:41,  6.96s/it][Succeeded / Failed / Skipped / Total] 290 / 586 / 49 / 925:  93%|█████████▎| 926/1000 [1:47:21<08:34,  6.96s/it][Succeeded / Failed / Skipped / Total] 291 / 586 / 49 / 926:  93%|█████████▎| 926/1000 [1:47:21<08:34,  6.96s/it][Succeeded / Failed / Skipped / Total] 291 / 586 / 49 / 926:  93%|█████████▎| 927/1000 [1:47:25<08:27,  6.95s/it][Succeeded / Failed / Skipped / Total] 291 / 587 / 49 / 927:  93%|█████████▎| 927/1000 [1:47:25<08:27,  6.95s/it][Succeeded / Failed / Skipped / Total] 291 / 587 / 49 / 927:  93%|█████████▎| 928/1000 [1:47:32<08:20,  6.95s/it]Sets the email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[index]] = ArraysUtil . join ( this . [[index]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Generate the folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File [[file]] = new File ( debugFolder , [[fileName]] ) ; try { FileUtil . writeBytes ( [[file]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[client]] = proxyClassName ; if ( [[client]] == null ) { [[client]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[client]] += ".class" ; File [[type]] = new File ( debugFolder , [[client]] ) ; try { FileUtil . writeBytes ( [[type]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[type]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the value of this address . --> Sets the value of the array --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[ccs]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[i]] ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( [[i]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Generates HTML tag . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T htmlMessage ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T htmlMessage ( final String [[attack]] , final String [[kill]] ) { return message ( new EmailMessage ( [[attack]] , MimeTypes . MIME_TEXT_HTML , [[kill]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Creates text . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[md]] ( final String [[script]] , final String [[program]] ) { return message ( new EmailMessage ( [[script]] , MimeTypes . MIME_TEXT_PLAIN , [[program]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 924 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[mb]] ( final String name , final String [[reference]] ) { headers . put ( name , [[reference]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Gets the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[foo]] ( final String name , final String [[end]] ) { Objects . requireNonNull ( name ) ; String [[domain]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[domain]] = System . getProperty ( name ) ; } else { [[domain]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[domain]] == null ) { return [[end]] ; } return [[domain]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Get a long . --> Gets a string representation of a given string --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[procedure]] ( final String name , final int [[address]] ) { String [[end]] = get ( name ) ; if ( [[end]] == null ) { return [[address]] ; } [[end]] = [[end]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[end]] ) ; } catch ( NumberFormatException nfex ) { return [[address]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the method parameter name . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[end]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 928 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 291 / 588 / 49 / 928:  93%|█████████▎| 928/1000 [1:47:32<08:20,  6.95s/it][Succeeded / Failed / Skipped / Total] 291 / 588 / 49 / 928:  93%|█████████▎| 929/1000 [1:47:45<08:14,  6.96s/it][Succeeded / Failed / Skipped / Total] 291 / 589 / 49 / 929:  93%|█████████▎| 929/1000 [1:47:45<08:14,  6.96s/it][Succeeded / Failed / Skipped / Total] 291 / 589 / 49 / 929:  93%|█████████▎| 930/1000 [1:47:59<08:07,  6.97s/it][Succeeded / Failed / Skipped / Total] 291 / 590 / 49 / 930:  93%|█████████▎| 930/1000 [1:47:59<08:07,  6.97s/it][Succeeded / Failed / Skipped / Total] 291 / 590 / 49 / 930:  93%|█████████▎| 931/1000 [1:48:13<08:01,  6.97s/it][Succeeded / Failed / Skipped / Total] 292 / 590 / 49 / 931:  93%|█████████▎| 931/1000 [1:48:13<08:01,  6.97s/it][Succeeded / Failed / Skipped / Total] 292 / 590 / 49 / 931:  93%|█████████▎| 932/1000 [1:48:13<07:53,  6.97s/it][Succeeded / Failed / Skipped / Total] 292 / 591 / 49 / 932:  93%|█████████▎| 932/1000 [1:48:13<07:53,  6.97s/it][Succeeded / Failed / Skipped / Total] 292 / 591 / 49 / 932:  93%|█████████▎| 933/1000 [1:48:14<07:46,  6.96s/it][Succeeded / Failed / Skipped / Total] 293 / 591 / 49 / 933:  93%|█████████▎| 933/1000 [1:48:14<07:46,  6.96s/it][Succeeded / Failed / Skipped / Total] 293 / 591 / 49 / 933:  93%|█████████▎| 934/1000 [1:48:22<07:39,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 591 / 49 / 934:  93%|█████████▎| 934/1000 [1:48:22<07:39,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 591 / 49 / 934:  94%|█████████▎| 935/1000 [1:48:22<07:32,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 591 / 50 / 935:  94%|█████████▎| 935/1000 [1:48:22<07:32,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 591 / 50 / 935:  94%|█████████▎| 936/1000 [1:48:24<07:24,  6.95s/it][Succeeded / Failed / Skipped / Total] 295 / 591 / 50 / 936:  94%|█████████▎| 936/1000 [1:48:24<07:24,  6.95s/it][Succeeded / Failed / Skipped / Total] 295 / 591 / 50 / 936:  94%|█████████▎| 937/1000 [1:48:28<07:17,  6.95s/it]Get the value of a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[check]] , final boolean defaultValue ) { String [[condition]] = get ( [[check]] ) ; if ( [[condition]] == null ) { return defaultValue ; } [[condition]] = [[condition]] . trim ( ) . toLowerCase ( ) ; switch ( [[condition]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[start]]" == "[[start]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 929 ---------------------------------------------
Get a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[list]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 930 ---------------------------------------------
Returns the alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[r]] = actionsManager . lookup ( alias ) ; if ( [[r]] != null ) { value = [[r]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
Resolve a string . --> Writes a string to the String --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[write]] ( final String value ) { final StringBuilder [[type]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 932 ---------------------------------------------
Serialize a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext [[jsonContext]] , final Path currentPath , final Object key , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[array]] ( final JsonContext [[nt]] , final Path currentPath , final Object key , final Object [[link]] , int count ) { if ( ( [[link]] == null ) && [[nt]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 933 ---------------------------------------------
Set the path . --> Return true if the given string is a literal --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[tree]] ( String [[literal]] , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the specified slash . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[bit]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the name of the given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the given slash . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[query]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 937 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 296 / 591 / 50 / 937:  94%|█████████▎| 937/1000 [1:48:28<07:17,  6.95s/it][Succeeded / Failed / Skipped / Total] 296 / 591 / 50 / 937:  94%|█████████▍| 938/1000 [1:48:42<07:11,  6.95s/it][Succeeded / Failed / Skipped / Total] 296 / 592 / 50 / 938:  94%|█████████▍| 938/1000 [1:48:42<07:11,  6.95s/it][Succeeded / Failed / Skipped / Total] 296 / 592 / 50 / 938:  94%|█████████▍| 939/1000 [1:48:56<07:04,  6.96s/it][Succeeded / Failed / Skipped / Total] 297 / 592 / 50 / 939:  94%|█████████▍| 939/1000 [1:48:56<07:04,  6.96s/it][Succeeded / Failed / Skipped / Total] 297 / 592 / 50 / 939:  94%|█████████▍| 940/1000 [1:48:56<06:57,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 593 / 50 / 940:  94%|█████████▍| 940/1000 [1:48:56<06:57,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 593 / 50 / 940:  94%|█████████▍| 941/1000 [1:48:56<06:49,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 594 / 50 / 941:  94%|█████████▍| 941/1000 [1:48:56<06:49,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 594 / 50 / 941:  94%|█████████▍| 942/1000 [1:49:03<06:42,  6.95s/it][Succeeded / Failed / Skipped / Total] 298 / 594 / 50 / 942:  94%|█████████▍| 942/1000 [1:49:03<06:42,  6.95s/it][Succeeded / Failed / Skipped / Total] 298 / 594 / 50 / 942:  94%|█████████▍| 943/1000 [1:49:23<06:36,  6.96s/it][Succeeded / Failed / Skipped / Total] 299 / 594 / 50 / 943:  94%|█████████▍| 943/1000 [1:49:23<06:36,  6.96s/it][Succeeded / Failed / Skipped / Total] 299 / 594 / 50 / 943:  94%|█████████▍| 944/1000 [1:49:30<06:29,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 594 / 50 / 944:  94%|█████████▍| 944/1000 [1:49:30<06:29,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 594 / 50 / 944:  94%|█████████▍| 945/1000 [1:49:41<06:23,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 595 / 50 / 945:  94%|█████████▍| 945/1000 [1:49:41<06:23,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 595 / 50 / 945:  95%|█████████▍| 946/1000 [1:49:49<06:16,  6.97s/it]Returns the number of occurrences of the specified string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[q]] ( final String [[f]] ) { int slashNdx = [[f]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[f]] , ' ' , [[f]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[f]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 938 ---------------------------------------------
Resolve a value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[resultPath]] = resolveResultPath ( path , value ) ; final String result = [[resultPath]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[test]] = resolveResultPath ( path , value ) ; final String result = [[test]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 939 ---------------------------------------------
Swap the factor of two elements . --> Swap two vectors --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[b]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Initializes the storage . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[bit]] , final long [ ] [[variable]] ) { final int newNw = [[bit]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 941 ---------------------------------------------
Gets the schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable [[dbTable]] = type . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { [[schemaName]] = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[array]] = null ; final DbTable [[foo]] = type . getAnnotation ( DbTable . class ) ; if ( [[foo]] != null ) { [[array]] = [[foo]] . schema ( ) . trim ( ) ; } if ( ( [[array]] == null ) || ( [[array]] . length ( ) == 0 ) ) { [[array]] = defaultSchemaName ; } return [[array]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 942 ---------------------------------------------
Increments the number of times . --> Swaps test --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[test]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 943 ---------------------------------------------
Checks if the given type is a valid column . --> Convenience factory method to create a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean [[isAnnotated]] , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean [[isId]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean [[privilege]] , final ColumnNamingStrategy columnNamingStrategy ) { String [[term]] = null ; boolean [[relation]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 944 ---------------------------------------------
Sets the edge . --> Swaps two elements --> Socre: 1.0

[[[[Adv]]]]: private void demix ( final int j , final int [[d]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[rotr]] = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int [[h]] ) { y [ 1 ] ^= y [ 0 ] ; final long [[n]] = r [ [[h]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 945 ---------------------------------------------
Allocate a new block . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[result]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 596 / 50 / 946:  95%|█████████▍| 946/1000 [1:49:49<06:16,  6.97s/it][Succeeded / Failed / Skipped / Total] 300 / 596 / 50 / 946:  95%|█████████▍| 947/1000 [1:49:55<06:09,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 597 / 50 / 947:  95%|█████████▍| 947/1000 [1:49:55<06:09,  6.96s/it][Succeeded / Failed / Skipped / Total] 300 / 597 / 50 / 947:  95%|█████████▍| 948/1000 [1:50:06<06:02,  6.97s/it][Succeeded / Failed / Skipped / Total] 300 / 598 / 50 / 948:  95%|█████████▍| 948/1000 [1:50:06<06:02,  6.97s/it][Succeeded / Failed / Skipped / Total] 300 / 598 / 50 / 948:  95%|█████████▍| 949/1000 [1:50:15<05:55,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 598 / 50 / 949:  95%|█████████▍| 949/1000 [1:50:15<05:55,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 598 / 50 / 949:  95%|█████████▌| 950/1000 [1:50:20<05:48,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 599 / 50 / 950:  95%|█████████▌| 950/1000 [1:50:20<05:48,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 599 / 50 / 950:  95%|█████████▌| 951/1000 [1:50:26<05:41,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 600 / 50 / 951:  95%|█████████▌| 951/1000 [1:50:26<05:41,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 600 / 50 / 951:  95%|█████████▌| 952/1000 [1:50:32<05:34,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 601 / 50 / 952:  95%|█████████▌| 952/1000 [1:50:32<05:34,  6.97s/it][Succeeded / Failed / Skipped / Total] 301 / 601 / 50 / 952:  95%|█████████▌| 953/1000 [1:50:51<05:28,  6.98s/it]Initializes a new key . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[add]] ( final String [[f]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[f]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[add]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 947 ---------------------------------------------
Returns the href . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[bridge]] ( ) { if ( methref != null ) { final String [[address]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[address]] ; } return [[bridge]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 948 ---------------------------------------------
Removes a string from the string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char [[e]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[s]] ) ) && str . endsWith ( String . valueOf ( [[e]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[end]] ( final char [[c]] , final char [[l]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[c]] ) ) && str . endsWith ( String . valueOf ( [[l]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 949 ---------------------------------------------
Create a file . --> Create a new file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[cap]] = new File ( outFileName ) ; [[cap]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[cap]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[cap]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Convert a long to a long --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int [[i]] = 0 ; [[i]] < result . length ; [[i]] ++ ) { result [ [[i]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int [[print]] = 0 ; [[print]] < result . length ; [[print]] ++ ) { result [ [[print]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 951 ---------------------------------------------
Create a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[tab]] = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[tab]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[tab]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Copy a file to a folder --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[transfer]] ( final File [[link]] ) throws IOException { if ( [[link]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[x]] = new FileInputStream ( [[link]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[link]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[x]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[x]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 953 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 602 / 50 / 953:  95%|█████████▌| 953/1000 [1:50:51<05:28,  6.98s/it][Succeeded / Failed / Skipped / Total] 301 / 602 / 50 / 953:  95%|█████████▌| 954/1000 [1:51:20<05:22,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 603 / 50 / 954:  95%|█████████▌| 954/1000 [1:51:20<05:22,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 603 / 50 / 954:  96%|█████████▌| 955/1000 [1:51:26<05:15,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 604 / 50 / 955:  96%|█████████▌| 955/1000 [1:51:26<05:15,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 604 / 50 / 955:  96%|█████████▌| 956/1000 [1:51:36<05:08,  7.01s/it][Succeeded / Failed / Skipped / Total] 301 / 605 / 50 / 956:  96%|█████████▌| 956/1000 [1:51:36<05:08,  7.01s/it][Succeeded / Failed / Skipped / Total] 301 / 605 / 50 / 956:  96%|█████████▌| 957/1000 [1:51:45<05:01,  7.01s/it][Succeeded / Failed / Skipped / Total] 301 / 606 / 50 / 957:  96%|█████████▌| 957/1000 [1:51:45<05:01,  7.01s/it][Succeeded / Failed / Skipped / Total] 301 / 606 / 50 / 957:  96%|█████████▌| 958/1000 [1:51:46<04:54,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 607 / 50 / 958:  96%|█████████▌| 958/1000 [1:51:46<04:54,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 607 / 50 / 958:  96%|█████████▌| 959/1000 [1:51:49<04:46,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 608 / 50 / 959:  96%|█████████▌| 959/1000 [1:51:49<04:46,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 608 / 50 / 959:  96%|█████████▌| 960/1000 [1:52:02<04:40,  7.00s/it]Unzips a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[file]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[file]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Recursively adds a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean [[recursive]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[example]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean [[character]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the field of the given field descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String name , final boolean [[declared]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[declared]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String name , final boolean [[argument]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( name ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[argument]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
Returns all the entries in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile [[zip]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[zip]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; entries . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile [[access]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[access]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String [[array]] = entry . getName ( ) ; entries . add ( [[array]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 957 ---------------------------------------------
Gets a property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
Sets the bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[thread]] ( final ServletRequest [[ioned]] , final String [[element]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[element]] ) ; } [[ioned]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[element]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 959 ---------------------------------------------
Zip a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[id]] = new ZipEntry ( path ) ; [[id]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[id]] . setComment ( comment ) ; } zos . putNextEntry ( [[id]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 960 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 301 / 609 / 50 / 960:  96%|█████████▌| 960/1000 [1:52:02<04:40,  7.00s/it][Succeeded / Failed / Skipped / Total] 301 / 609 / 50 / 960:  96%|█████████▌| 961/1000 [1:52:10<04:33,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 609 / 50 / 961:  96%|█████████▌| 961/1000 [1:52:10<04:33,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 609 / 50 / 961:  96%|█████████▌| 962/1000 [1:52:11<04:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 610 / 50 / 962:  96%|█████████▌| 962/1000 [1:52:11<04:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 610 / 50 / 962:  96%|█████████▋| 963/1000 [1:52:20<04:18,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 611 / 50 / 963:  96%|█████████▋| 963/1000 [1:52:20<04:18,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 611 / 50 / 963:  96%|█████████▋| 964/1000 [1:52:37<04:12,  7.01s/it][Succeeded / Failed / Skipped / Total] 302 / 612 / 50 / 964:  96%|█████████▋| 964/1000 [1:52:37<04:12,  7.01s/it][Succeeded / Failed / Skipped / Total] 302 / 612 / 50 / 964:  96%|█████████▋| 965/1000 [1:52:38<04:05,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 613 / 50 / 965:  96%|█████████▋| 965/1000 [1:52:38<04:05,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 613 / 50 / 965:  97%|█████████▋| 966/1000 [1:52:46<03:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 614 / 50 / 966:  97%|█████████▋| 966/1000 [1:52:46<03:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 302 / 614 / 50 / 966:  97%|█████████▋| 967/1000 [1:53:08<03:51,  7.02s/it][Succeeded / Failed / Skipped / Total] 302 / 615 / 50 / 967:  97%|█████████▋| 967/1000 [1:53:08<03:51,  7.02s/it][Succeeded / Failed / Skipped / Total] 302 / 615 / 50 / 967:  97%|█████████▋| 968/1000 [1:53:09<03:44,  7.01s/it]Gets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[test]] ( final HttpSession [[testing]] ) { Locale [[performance]] = ( Locale ) [[testing]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[performance]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[performance]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Sets the locale . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[logging]] ( final HttpSession session , final String [[method]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[method]] ) ; } Locale locale = Locale . forLanguageTag ( [[method]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Adds a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[against]] ( final String ... [[empty]] ) { if ( [[empty]] == null ) { return this ; } for ( String [[against]] : [[empty]] ) { addProfiles ( [[against]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Return a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[string]] , final int offset ) { return ( ( long ) [[string]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Read a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[begin]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 965 ---------------------------------------------
Resolve bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[name]] : params . entrySet ( ) ) { String key = [[name]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 966 ---------------------------------------------
Reads a labels . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[b]] ) { if ( [[b]] [ bytecodeOffset ] == null ) { [[b]] [ bytecodeOffset ] = new Label ( ) ; } return [[b]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a byte array from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean [[close]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { outputStream . write ( [[data]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { inputStream . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[array]] ( final InputStream inputStream , final boolean [[filter]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] [[area]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[area]] , 0 , [[area]] . length ) ) != - 1 ) { outputStream . write ( [[area]] , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[filter]] ) { inputStream . [[filter]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 615 / 50 / 968:  97%|█████████▋| 968/1000 [1:53:09<03:44,  7.01s/it][Succeeded / Failed / Skipped / Total] 303 / 615 / 50 / 968:  97%|█████████▋| 969/1000 [1:53:13<03:37,  7.01s/it][Succeeded / Failed / Skipped / Total] 303 / 616 / 50 / 969:  97%|█████████▋| 969/1000 [1:53:13<03:37,  7.01s/it][Succeeded / Failed / Skipped / Total] 303 / 616 / 50 / 969:  97%|█████████▋| 970/1000 [1:53:27<03:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 304 / 616 / 50 / 970:  97%|█████████▋| 970/1000 [1:53:27<03:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 304 / 616 / 50 / 970:  97%|█████████▋| 971/1000 [1:53:47<03:23,  7.03s/it][Succeeded / Failed / Skipped / Total] 304 / 617 / 50 / 971:  97%|█████████▋| 971/1000 [1:53:47<03:23,  7.03s/it][Succeeded / Failed / Skipped / Total] 304 / 617 / 50 / 971:  97%|█████████▋| 972/1000 [1:53:49<03:16,  7.03s/it][Succeeded / Failed / Skipped / Total] 305 / 617 / 50 / 972:  97%|█████████▋| 972/1000 [1:53:49<03:16,  7.03s/it][Succeeded / Failed / Skipped / Total] 305 / 617 / 50 / 972:  97%|█████████▋| 973/1000 [1:53:50<03:09,  7.02s/it][Succeeded / Failed / Skipped / Total] 305 / 618 / 50 / 973:  97%|█████████▋| 973/1000 [1:53:50<03:09,  7.02s/it][Succeeded / Failed / Skipped / Total] 305 / 618 / 50 / 973:  97%|█████████▋| 974/1000 [1:53:56<03:02,  7.02s/it][Succeeded / Failed / Skipped / Total] 306 / 618 / 50 / 974:  97%|█████████▋| 974/1000 [1:53:56<03:02,  7.02s/it][Succeeded / Failed / Skipped / Total] 306 / 618 / 50 / 974:  98%|█████████▊| 975/1000 [1:54:02<02:55,  7.02s/it]Reads data from a frame . --> set frame frame --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = verificationTypeInfoOffset ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[begin]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[key]] ) { int currentOffset = verificationTypeInfoOffset ; int [[set]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[set]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[key]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 969 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[i]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Gets a map of request parameters . --> Return a bean for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[var]] ( final HttpServletRequest [[test]] ) { return ( Map < String , TransientBeanData > ) [[test]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
Returns the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[procedure]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 972 ---------------------------------------------
Create a map from the request . --> Returns a new Bean --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[after]] ( final HttpServletRequest [[ray]] ) { Map < String , TransientBeanData > [[a]] = new HashMap <> ( ) ; [[ray]] . setAttribute ( ATTR_NAME , [[a]] ) ; return [[a]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 973 ---------------------------------------------
Read a string . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] [[m]] = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 974 ---------------------------------------------
Initialize the filter . --> Initialize the configuration --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[method]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 307 / 618 / 50 / 975:  98%|█████████▊| 975/1000 [1:54:02<02:55,  7.02s/it][Succeeded / Failed / Skipped / Total] 307 / 618 / 50 / 975:  98%|█████████▊| 976/1000 [1:54:03<02:48,  7.01s/it][Succeeded / Failed / Skipped / Total] 308 / 618 / 50 / 976:  98%|█████████▊| 976/1000 [1:54:03<02:48,  7.01s/it][Succeeded / Failed / Skipped / Total] 308 / 618 / 50 / 976:  98%|█████████▊| 977/1000 [1:54:16<02:41,  7.02s/it][Succeeded / Failed / Skipped / Total] 308 / 619 / 50 / 977:  98%|█████████▊| 977/1000 [1:54:16<02:41,  7.02s/it][Succeeded / Failed / Skipped / Total] 308 / 619 / 50 / 977:  98%|█████████▊| 978/1000 [1:54:17<02:34,  7.01s/it][Succeeded / Failed / Skipped / Total] 309 / 619 / 50 / 978:  98%|█████████▊| 978/1000 [1:54:17<02:34,  7.01s/it][Succeeded / Failed / Skipped / Total] 309 / 619 / 50 / 978:  98%|█████████▊| 979/1000 [1:54:20<02:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 309 / 620 / 50 / 979:  98%|█████████▊| 979/1000 [1:54:20<02:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 309 / 620 / 50 / 979:  98%|█████████▊| 980/1000 [1:54:28<02:20,  7.01s/it][Succeeded / Failed / Skipped / Total] 310 / 620 / 50 / 980:  98%|█████████▊| 980/1000 [1:54:28<02:20,  7.01s/it][Succeeded / Failed / Skipped / Total] 310 / 620 / 50 / 980:  98%|█████████▊| 981/1000 [1:54:30<02:13,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 621 / 50 / 981:  98%|█████████▊| 981/1000 [1:54:30<02:13,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 621 / 50 / 981:  98%|█████████▊| 982/1000 [1:54:35<02:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 622 / 50 / 982:  98%|█████████▊| 982/1000 [1:54:35<02:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 622 / 50 / 982:  98%|█████████▊| 983/1000 [1:54:38<01:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 623 / 50 / 983:  98%|█████████▊| 983/1000 [1:54:38<01:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 623 / 50 / 983:  98%|█████████▊| 984/1000 [1:54:46<01:51,  7.00s/it]Adds a file to the consumer . --> Convenience method for creating a new one . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[consumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[consumer]] ) ; } else { consumers . add ( [[consumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Insert a file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[test]] ( final URI searchPath ) { File file ; try { file = new File ( [[test]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[test]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Creates a ConstructorDescriptor . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor [[ctor]] = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ctor]] ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor [[ax]] = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ax]] ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 978 ---------------------------------------------
Returns a string representation of this file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[at]] ( final String ... patterns ) { for ( String [[elements]] : patterns ) { rules . include ( [[elements]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 979 ---------------------------------------------
Convert an array to a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object [[base]] ) { final Class [[results]] = [[base]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[results]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[base]] , [[results]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 980 ---------------------------------------------
Returns a excluded file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[form]] : patterns ) { rules . exclude ( [[form]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Add a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File [[end]] ) { if ( ! [[end]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[end]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Search for a file . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( searchPath ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File [[time]] = FileUtil . toContainerFile ( searchPath ) ; if ( [[time]] == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( [[time]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 983 ---------------------------------------------
Gets the next iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[removal]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 624 / 50 / 984:  98%|█████████▊| 984/1000 [1:54:46<01:51,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 624 / 50 / 984:  98%|█████████▊| 985/1000 [1:54:55<01:45,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 625 / 50 / 985:  98%|█████████▊| 985/1000 [1:54:55<01:45,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 625 / 50 / 985:  99%|█████████▊| 986/1000 [1:55:02<01:38,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 626 / 50 / 986:  99%|█████████▊| 986/1000 [1:55:02<01:38,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 626 / 50 / 986:  99%|█████████▊| 987/1000 [1:55:09<01:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 627 / 50 / 987:  99%|█████████▊| 987/1000 [1:55:09<01:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 627 / 50 / 987:  99%|█████████▉| 988/1000 [1:55:12<01:23,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 628 / 50 / 988:  99%|█████████▉| 988/1000 [1:55:12<01:23,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 628 / 50 / 988:  99%|█████████▉| 989/1000 [1:55:26<01:17,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 629 / 50 / 989:  99%|█████████▉| 989/1000 [1:55:26<01:17,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 629 / 50 / 989:  99%|█████████▉| 990/1000 [1:55:28<01:09,  7.00s/it]Finds all files in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[method]] ( ) { List < File > [[base]] = new ArrayList <> ( ) ; File [[foo]] ; while ( ( [[foo]] = nextFile ( ) ) != null ) { [[base]] . add ( [[foo]] ) ; } return [[base]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Convenience method to write a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[edit]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[c]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the type for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveBeanName ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class [[names]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[names]] ) . getAnnotation ( PetiteBean . class ) ; String [[n]] = null ; if ( petiteBean != null ) { [[n]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[n]] == null ) || ( [[n]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[n]] = [[names]] . getName ( ) ; } else { [[n]] = StringUtil . uncapitalize ( [[names]] . getSimpleName ( ) ) ; } } return [[n]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 988 ---------------------------------------------
Resolves the bean type . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[command]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[command]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Init files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[index]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[j]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ [[j]] ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[j]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 630 / 50 / 990:  99%|█████████▉| 990/1000 [1:55:28<01:09,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 630 / 50 / 990:  99%|█████████▉| 991/1000 [1:55:44<01:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 310 / 631 / 50 / 991:  99%|█████████▉| 991/1000 [1:55:44<01:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 310 / 631 / 50 / 991:  99%|█████████▉| 992/1000 [1:55:47<00:56,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 632 / 50 / 992:  99%|█████████▉| 992/1000 [1:55:47<00:56,  7.00s/it][Succeeded / Failed / Skipped / Total] 310 / 632 / 50 / 992:  99%|█████████▉| 993/1000 [1:55:52<00:49,  7.00s/it][Succeeded / Failed / Skipped / Total] 311 / 632 / 50 / 993:  99%|█████████▉| 993/1000 [1:55:52<00:49,  7.00s/it][Succeeded / Failed / Skipped / Total] 311 / 632 / 50 / 993:  99%|█████████▉| 994/1000 [1:56:08<00:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 311 / 633 / 50 / 994:  99%|█████████▉| 994/1000 [1:56:08<00:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 311 / 634 / 50 / 995: 100%|█████████▉| 995/1000 [1:56:08<00:35,  7.00s/it][Succeeded / Failed / Skipped / Total] 311 / 634 / 50 / 995: 100%|█████████▉| 996/1000 [1:56:08<00:27,  7.00s/it][Succeeded / Failed / Skipped / Total] 311 / 635 / 50 / 996: 100%|█████████▉| 996/1000 [1:56:08<00:27,  7.00s/it]Converts a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Appends the string to the given StringBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[fix]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 992 ---------------------------------------------
Returns a string representation of the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[generator]] ( final Constructor < ? > [[bucket]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[bucket]] . getParameterTypes ( ) ; for ( Class < ? > [[context]] : parameters ) { appendDescriptor ( [[context]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 993 ---------------------------------------------
Returns the size of the specified type . --> Saves a value to a Entity --> Socre: 1.0

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[save]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Returns the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[execute]] ( final String methodDescriptor ) { int [[x]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 995 ---------------------------------------------
Set the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[assume]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 996 ---------------------------------------------
Returns string representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[argumentType]] : [[argumentTypes]] ) { [[argumentType]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[generator]] ( final Type returnType , final Type ... [[function]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[result]] : [[function]] ) { [[result]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 997 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 636 / 50 / 997: 100%|█████████▉| 997/1000 [1:56:34<00:21,  7.02s/it][Succeeded / Failed / Skipped / Total] 311 / 636 / 50 / 997: 100%|█████████▉| 998/1000 [1:56:41<00:14,  7.02s/it][Succeeded / Failed / Skipped / Total] 311 / 637 / 50 / 998: 100%|█████████▉| 998/1000 [1:56:41<00:14,  7.02s/it][Succeeded / Failed / Skipped / Total] 311 / 637 / 50 / 998: 100%|█████████▉| 999/1000 [1:56:42<00:07,  7.01s/it][Succeeded / Failed / Skipped / Total] 311 / 638 / 50 / 999: 100%|█████████▉| 999/1000 [1:56:42<00:07,  7.01s/it][Succeeded / Failed / Skipped / Total] 311 / 638 / 50 / 999: 100%|██████████| 1000/1000 [1:57:03<00:00,  7.02s/it][Succeeded / Failed / Skipped / Total] 311 / 639 / 50 / 1000: 100%|██████████| 1000/1000 [1:57:03<00:00,  7.02s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 311 / 639 / 50 / 1000: 100%|██████████| 1000/1000 [1:57:06<00:00,  7.03s/it]Returns a string representation of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[query]] ( final Method method ) { StringBuilder [[context]] = new StringBuilder ( ) ; [[context]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[context]] ) ; } [[context]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[context]] ) ; return [[context]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 998 ---------------------------------------------
Unrollback the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[lastException]] = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource [[resource]] = [[it]] . next ( ) ; try { [[resource]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[lastException]] = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[lastException]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[lastException]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[var]] = null ; Iterator < JtxResource > [[request]] = resources . iterator ( ) ; while ( [[request]] . hasNext ( ) ) { JtxResource [[priority]] = [[request]] . next ( ) ; try { [[priority]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[var]] = ex ; } finally { [[request]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[var]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[var]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
Commits the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "[[True]]" == "[[True]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "[[clone]]" == "[[clone]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
Handle a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[object]] > [[object]] requestResource ( final Class < [[object]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[object]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[object]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 311    |
| Number of failed attacks:     | 639    |
| Number of skipped attacks:    | 50     |
| Original accuracy:            | 95.0%  |
| Accuracy under attack:        | 63.9%  |
| Attack success rate:          | 32.74% |
| Average perturbed word %:     | 49.28% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 140.97 |
| Original BLEU-4:              | 13.64  |
| Perturbed BLEU-4:             | 4.55   |
+-------------------------------+--------+


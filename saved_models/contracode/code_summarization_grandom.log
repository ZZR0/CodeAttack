textattack: Running 8 worker(s) on 8 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1398.10it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1282.86it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1562.90it/s][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1750.18it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1926.11it/s][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2039.04it/s][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2153.45it/s]--------------------------------------------- Result 1 ---------------------------------------------
Adds a observer to the queue . --> Queues a balancing --> Socre: 1.0

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[aground]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[cynthia]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[cynthia]] , [[aground]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[aground]] ) ; } } else { q . offer ( [[aground]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[cynthia]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Creates a Observable from source Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[reserving]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Sorts a Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[amphitheatre]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a ObservableOn observable . --> A convenience function to create a Observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > observable = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[colleague]] , final Scheduler scheduler ) { final Observable < T > observable = [[colleague]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[colleague]] , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a new histogram . --> Create a new Bean --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[hamstring]] ) { return new UnicastProcessor < T > ( [[hamstring]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Creates and returns a listener which allows to be triggered . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[perrier]] ( int [[warmer]] , Runnable [[boastful]] ) { ObjectHelper . requireNonNull ( [[boastful]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[warmer]] , [[boastful]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
Convert a Java object to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[kanagawa]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[principality]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[kanagawa]] , [[principality]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 8 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2183.82it/s][Succeeded / Failed / Skipped / Total] 4 / 5 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2069.10it/s][Succeeded / Failed / Skipped / Total] 5 / 5 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2046.60it/s][Succeeded / Failed / Skipped / Total] 5 / 6 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2115.62it/s][Succeeded / Failed / Skipped / Total] 5 / 7 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2188.62it/s]A convenience method to set the internal state . --> Asynchronously gets the internal thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[aryans]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Exhilarating]]" != "[[Exhilarating]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Wraps a Publisher . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[r]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[bernhardt]] ; try { [[bernhardt]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[bernhardt]] == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[installment]] ; try { [[installment]] = ObjectHelper . requireNonNull ( mapper . apply ( [[bernhardt]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[installment]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[installment]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[installment]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 10 ---------------------------------------------
Increments the given predicate to retry . --> Convert a Throwable to an Exception --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[farrington]] ( long times , Predicate < ? super Throwable > [[crawlers]] ) { return toFlowable ( ) . retry ( times , [[crawlers]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
Creates a Completable from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[bernhardt]] ( CompletableSource [[deepu]] ) { ObjectHelper . requireNonNull ( [[deepu]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[deepu]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
Throws an IllegalArgumentException if the given object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[infomercial]] > [[infomercial]] requireNonNull ( [[infomercial]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2216.14it/s][Succeeded / Failed / Skipped / Total] 7 / 7 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2266.93it/s][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2317.12it/s][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2368.49it/s][Succeeded / Failed / Skipped / Total] 8 / 9 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2396.66it/s][Succeeded / Failed / Skipped / Total] 8 / 10 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2433.05it/s][Succeeded / Failed / Skipped / Total] 8 / 11 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2416.81it/s][Succeeded / Failed / Skipped / Total] 8 / 12 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2449.51it/s][Succeeded / Failed / Skipped / Total] 9 / 12 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2474.38it/s][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2486.38it/s][Succeeded / Failed / Skipped / Total] 10 / 13 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2486.96it/s]Convenience method that converts a value into a Iterable . --> Convenience factory method for reflection --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[merits]] ) { return new JustValue < Object , T > ( [[merits]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Return a function . --> Obtain a new instance of a given object --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > identity ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[kiloton]] > Function < [[kiloton]] , [[kiloton]] > identity ( ) { return ( Function < [[kiloton]] , [[kiloton]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Convenience method to create a Java source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[disturbing]] ( SingleSource < T > [[sentencing]] ) { ObjectHelper . requireNonNull ( [[sentencing]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[sentencing]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 16 ---------------------------------------------
Create a new subject . --> Returns a new &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[jacques]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Returns an iterable that contains the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > justFunction ( U value ) { return new JustValue < [[T]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[downloads]] , U > Function < [[downloads]] , U > justFunction ( U value ) { return new JustValue < [[downloads]] , U > ( value ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a new instance of the given function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[burg]] , U > Function < [[burg]] , U > [[ileana]] ( Class < U > target ) { return new CastToClass < [[burg]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Return the number of error occurrences . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[compilation]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Create a new observer . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[dongs]] ( boolean [[exuberance]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[exuberance]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new builder . --> Constructs a &lt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[everglades]] ) { return new UnicastSubject < T > ( [[everglades]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 22 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[yule]] ( ) { Object [[nearly]] = value ; if ( [[nearly]] != null && ! NotificationLite . isError ( [[nearly]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 23 ---------------------------------------------
Returns a long . --> Returns a byte array --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[u]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[u]] / a != b ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long [[plugging]] = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( [[plugging]] / a != b ) { return Long . MAX_VALUE ; } } return [[plugging]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 24 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 13 / 0 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2489.39it/s][Succeeded / Failed / Skipped / Total] 11 / 14 / 0 / 25:   2%|▎         | 25/1000 [00:00<00:00, 2509.22it/s][Succeeded / Failed / Skipped / Total] 11 / 15 / 0 / 26:   3%|▎         | 26/1000 [00:00<00:00, 2517.82it/s][Succeeded / Failed / Skipped / Total] 12 / 15 / 0 / 27:   3%|▎         | 27/1000 [00:00<00:00, 2500.30it/s][Succeeded / Failed / Skipped / Total] 13 / 15 / 0 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2521.70it/s][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2548.02it/s][Succeeded / Failed / Skipped / Total] 14 / 16 / 0 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2572.46it/s]Sets the current atom . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[vendor]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[vendor]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[vendor]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 25 ---------------------------------------------
Blocks until a timeout is reached . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[blevins]] ( long [[biblically]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[biblically]] , unit ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[biblically]] , unit ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 26 ---------------------------------------------
Blocks until a block is reached . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[astrophysicist]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[astrophysicist]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[gush]] ) ; } } Throwable [[gush]] = error ; if ( [[gush]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[gush]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 27 ---------------------------------------------
Shuts down the queue . --> Allocates a balancing --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T [[v]] = q . poll ( ) ; boolean empty = [[v]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , [[v]] ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[serenely]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T [[cobblers]] = q . poll ( ) ; boolean empty = [[cobblers]] == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , [[cobblers]] ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 28 ---------------------------------------------
Increments the prefetch . --> Adapts a byte to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[purr]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 29 ---------------------------------------------
Get the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[kintaro]] ( ) { Object [[dunk]] = value ; if ( NotificationLite . isError ( [[dunk]] ) ) { return NotificationLite . getError ( [[dunk]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Adds an object to the object . --> Set the convolutioners --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[conversing]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 31 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 17 / 0 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2557.90it/s][Succeeded / Failed / Skipped / Total] 14 / 18 / 0 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2577.84it/s][Succeeded / Failed / Skipped / Total] 15 / 18 / 0 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2582.27it/s][Succeeded / Failed / Skipped / Total] 15 / 19 / 0 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2594.68it/s][Succeeded / Failed / Skipped / Total] 15 / 19 / 1 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2629.52it/s][Succeeded / Failed / Skipped / Total] 15 / 20 / 1 / 36:   4%|▎         | 36/1000 [00:00<00:00, 2632.41it/s][Succeeded / Failed / Skipped / Total] 15 / 21 / 1 / 37:   4%|▎         | 37/1000 [00:00<00:00, 2634.17it/s]Sets the next subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > [[apeman]] , Subscription [[twitching]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[twitching]] , "next is null" ) ; if ( ! [[apeman]] . compareAndSet ( null , [[twitching]] ) ) { [[twitching]] . cancel ( ) ; if ( [[apeman]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 32 ---------------------------------------------
Shuts down the executor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[fixings]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 33 ---------------------------------------------
Adds a new ranges to the list . --> Compares two atoms --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[monceau]] ( AtomicLong [[snobbish]] , long n ) { for ( ; ; ) { long r = [[snobbish]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[snobbish]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 34 ---------------------------------------------
Creates a new builder for the given integrity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[hardworking]] ( int [[barksdale]] , Runnable [[sandra]] ) { return new UnicastSubject < T > ( [[barksdale]] , [[sandra]] , "[[Frederica]]" == "[[Frederica]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 35 ---------------------------------------------
Awaits for a given queue --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 36 ---------------------------------------------
Increment the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[uma]] ( Subscription upstream , Subscription next , Class < ? > [[grip]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[grip]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 37 ---------------------------------------------
Runs the next observer . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[beckon]] , Disposable [[ara]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[ara]] , "next is null" ) ; if ( [[beckon]] != null ) { [[ara]] . dispose ( ) ; if ( [[beckon]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[Asteroid]]" != "[[Asteroid]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 38 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 21 / 1 / 38:   4%|▍         | 38/1000 [00:00<00:00, 2649.28it/s][Succeeded / Failed / Skipped / Total] 16 / 22 / 1 / 39:   4%|▍         | 39/1000 [00:00<00:00, 2659.54it/s][Succeeded / Failed / Skipped / Total] 17 / 22 / 1 / 40:   4%|▍         | 40/1000 [00:00<00:00, 2664.28it/s][Succeeded / Failed / Skipped / Total] 18 / 22 / 1 / 41:   4%|▍         | 41/1000 [00:00<00:00, 2675.90it/s][Succeeded / Failed / Skipped / Total] 18 / 23 / 1 / 42:   4%|▍         | 42/1000 [00:00<00:00, 2687.02it/s][Succeeded / Failed / Skipped / Total] 18 / 23 / 1 / 42:   4%|▍         | 43/1000 [00:00<00:02, 338.56it/s] [Succeeded / Failed / Skipped / Total] 18 / 24 / 1 / 43:   4%|▍         | 43/1000 [00:00<00:02, 337.60it/s][Succeeded / Failed / Skipped / Total] 19 / 24 / 1 / 44:   4%|▍         | 44/1000 [00:01<00:23, 40.33it/s] Throws an exception . --> Throw --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[zer]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 39 ---------------------------------------------
Shrinks the supplied value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R [[n]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[n]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[n]] ) ; downstream . onComplete ( ) ; return ; } value = [[n]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R [[andie]] ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( [[andie]] ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( [[andie]] ) ; downstream . onComplete ( ) ; return ; } value = [[andie]] ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 40 ---------------------------------------------
Cancels the given object . --> Cancel the cancellation --> Socre: 1.0

[[[[Adv]]]]: public final void setSubscription ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription [[halve]] ) { if ( cancelled ) { [[halve]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[halve]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[halve]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[halve]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[halve]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 41 ---------------------------------------------
Adds a long . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[scenarios]] , long b ) { long u = [[scenarios]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 42 ---------------------------------------------
Constructs a new instance of the given exception handler . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ex]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[tekken]] ( Throwable [[anesthesiology]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[anesthesiology]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 43 ---------------------------------------------
Creates the executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[ribbons]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[ribbons]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 44 ---------------------------------------------
Throws an exception . --> Throw an exception if the Throwable is an exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[hedges]] = ce . getExceptions ( ) ; for ( int i = [[hedges]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[hedges]] . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 25 / 1 / 45:   4%|▍         | 45/1000 [00:01<00:39, 24.18it/s][Succeeded / Failed / Skipped / Total] 19 / 26 / 1 / 46:   5%|▍         | 46/1000 [00:09<03:13,  4.93it/s][Succeeded / Failed / Skipped / Total] 19 / 27 / 1 / 47:   5%|▍         | 47/1000 [00:10<03:23,  4.68it/s][Succeeded / Failed / Skipped / Total] 19 / 28 / 1 / 48:   5%|▍         | 48/1000 [00:11<03:55,  4.05it/s][Succeeded / Failed / Skipped / Total] 20 / 28 / 1 / 49:   5%|▍         | 49/1000 [00:12<03:54,  4.05it/s][Succeeded / Failed / Skipped / Total] 20 / 29 / 1 / 50:   5%|▌         | 50/1000 [00:17<05:29,  2.88it/s][Succeeded / Failed / Skipped / Total] 20 / 30 / 1 / 51:   5%|▌         | 51/1000 [00:17<05:28,  2.89it/s][Succeeded / Failed / Skipped / Total] 21 / 30 / 1 / 52:   5%|▌         | 52/1000 [00:26<08:02,  1.97it/s][Succeeded / Failed / Skipped / Total] 21 / 31 / 1 / 53:   5%|▌         | 53/1000 [00:27<08:03,  1.96it/s]Wrap an error error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[eliza]] ) { if ( [[eliza]] instanceof Error ) { throw ( Error ) [[eliza]] ; } if ( [[eliza]] instanceof RuntimeException ) { return ( RuntimeException ) [[eliza]] ; } return new RuntimeException ( [[eliza]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 46 ---------------------------------------------
Processes a queue . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[whirlpool]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[coach]] ; synchronized ( this ) { [[coach]] = queue ; if ( [[coach]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[coach]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 47 ---------------------------------------------
Clean up resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[organise]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Starts the queue queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[swastika]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Return a copy of the observer --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[ascribed]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 50 ---------------------------------------------
Sets the number of disposes . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[maddie]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[tapping]] = resources ; return [[tapping]] != null ? [[tapping]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[dependence]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Sends a error message . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[disrespects]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 53 ---------------------------------------------
Get the resource . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[anointed]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 31 / 1 / 54:   5%|▌         | 54/1000 [00:29<08:43,  1.81it/s][Succeeded / Failed / Skipped / Total] 23 / 31 / 1 / 55:   6%|▌         | 55/1000 [00:35<10:16,  1.53it/s][Succeeded / Failed / Skipped / Total] 23 / 32 / 1 / 56:   6%|▌         | 56/1000 [00:39<10:59,  1.43it/s][Succeeded / Failed / Skipped / Total] 24 / 32 / 1 / 57:   6%|▌         | 57/1000 [00:40<11:11,  1.41it/s][Succeeded / Failed / Skipped / Total] 24 / 33 / 1 / 58:   6%|▌         | 58/1000 [00:49<13:31,  1.16it/s][Succeeded / Failed / Skipped / Total] 24 / 34 / 1 / 59:   6%|▌         | 59/1000 [00:54<14:27,  1.08it/s][Succeeded / Failed / Skipped / Total] 24 / 35 / 1 / 60:   6%|▌         | 60/1000 [00:58<15:14,  1.03it/s]Returns a copy of this object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[c]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[cooper]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int [[amaze]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[amaze]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[amaze]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 55 ---------------------------------------------
Shutdown the stream . --> Drains a set of shapes --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[alds]] ( ) { int [[dialectics]] = get ( ) ; if ( ( [[dialectics]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 56 ---------------------------------------------
Creates a Observable that wraps another Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[snatched]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[tallest]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[snatched]] , [[tallest]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 57 ---------------------------------------------
Returns a copy of the given iterable . --> Liefert die eneine einen eneineueneneiche en eneineiche eneueue enenene enneueueueneneueich t eneuen eneineneineichen eneueuch eneneneueich --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[snipers]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[snipers]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 58 ---------------------------------------------
Sorts the given List . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > [[desperado]] ) { ObjectHelper . requireNonNull ( [[desperado]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[desperado]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 59 ---------------------------------------------
Returns true if the supplied object is connected . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[buggery]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 60 ---------------------------------------------
Returns the sum of the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[dore]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[dore]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 36 / 1 / 61:   6%|▌         | 61/1000 [00:59<15:16,  1.02it/s][Succeeded / Failed / Skipped / Total] 24 / 37 / 1 / 62:   6%|▌         | 62/1000 [01:01<15:35,  1.00it/s][Succeeded / Failed / Skipped / Total] 25 / 37 / 1 / 63:   6%|▋         | 63/1000 [01:04<15:59,  1.02s/it][Succeeded / Failed / Skipped / Total] 26 / 37 / 1 / 64:   6%|▋         | 64/1000 [01:13<17:58,  1.15s/it][Succeeded / Failed / Skipped / Total] 27 / 37 / 1 / 65:   6%|▋         | 65/1000 [01:15<18:02,  1.16s/it][Succeeded / Failed / Skipped / Total] 27 / 38 / 1 / 66:   7%|▋         | 66/1000 [01:17<18:13,  1.17s/it]Sets the value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[empowering]] ( T [[query]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[query]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[query]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 62 ---------------------------------------------
A convenience function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[shenzhen]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[stebbins]] ) { return [[shenzhen]] ( [[stebbins]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 63 ---------------------------------------------
Removes all values from this node . --> Remove a relallocation --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int n = [[a]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[a]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , j ) ; System . arraycopy ( [[a]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[lorelai]] = subscribers . get ( ) ; if ( [[lorelai]] == TERMINATED || [[lorelai]] == EMPTY ) { return ; } int n = [[lorelai]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[lorelai]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[lorelai]] , 0 , b , 0 , j ) ; System . arraycopy ( [[lorelai]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[lorelai]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 64 ---------------------------------------------
Returns a copy of this Publisher . --> Shuts down a thread --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "[[True]]" == "[[True]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[amsterdam]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[amsterdam]] , 0 , n ) ; [[amsterdam]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[amsterdam]] ) ) { return "[[Hotdogs]]" == "[[Hotdogs]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 65 ---------------------------------------------
Sets the request . --> Shut down this request --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[infomercial]] ( long [[cz]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[cz]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 66 ---------------------------------------------
Creates a call . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[pianists]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 67 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 38 / 1 / 67:   7%|▋         | 67/1000 [01:24<19:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 28 / 39 / 1 / 68:   7%|▋         | 68/1000 [01:28<20:15,  1.30s/it][Succeeded / Failed / Skipped / Total] 28 / 40 / 1 / 69:   7%|▋         | 69/1000 [01:29<20:07,  1.30s/it][Succeeded / Failed / Skipped / Total] 28 / 41 / 1 / 70:   7%|▋         | 70/1000 [01:31<20:12,  1.30s/it][Succeeded / Failed / Skipped / Total] 28 / 42 / 1 / 71:   7%|▋         | 71/1000 [01:35<20:46,  1.34s/it][Succeeded / Failed / Skipped / Total] 28 / 43 / 1 / 72:   7%|▋         | 72/1000 [01:37<20:53,  1.35s/it]Obtain the username for the given search . --> Searches for a search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[felix]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 68 ---------------------------------------------
Set the maximum size . --> [[[FAILED]]]

[[[[Adv]]]]: public long calculateDelay ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long calculateDelay ( TimeUnit unit ) { float [[clones]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 69 ---------------------------------------------
Returns HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[petals]] ) { try { return HttpMethod . valueOf ( [[petals]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 70 ---------------------------------------------
Invokes a Observable that accepts a observer . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[source]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[cleared]] , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[cleared]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[cleared]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 71 ---------------------------------------------
Gets a flowable flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[cf]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[cf]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[compilation]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[compilation]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[compilation]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 72 ---------------------------------------------
Sets the amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDelay ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void setDelay ( long [[pushcart]] , TimeUnit [[cy]] ) { if ( [[pushcart]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[interventions]] = [[cy]] . toMillis ( [[pushcart]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 43 / 1 / 73:   7%|▋         | 73/1000 [01:39<21:01,  1.36s/it][Succeeded / Failed / Skipped / Total] 29 / 44 / 1 / 74:   7%|▋         | 74/1000 [01:41<21:10,  1.37s/it][Succeeded / Failed / Skipped / Total] 29 / 45 / 1 / 75:   8%|▊         | 75/1000 [01:55<23:38,  1.53s/it][Succeeded / Failed / Skipped / Total] 30 / 45 / 1 / 76:   8%|▊         | 76/1000 [01:57<23:42,  1.54s/it][Succeeded / Failed / Skipped / Total] 30 / 46 / 1 / 77:   8%|▊         | 77/1000 [01:57<23:27,  1.52s/it][Succeeded / Failed / Skipped / Total] 30 / 47 / 1 / 78:   8%|▊         | 78/1000 [01:59<23:31,  1.53s/it][Succeeded / Failed / Skipped / Total] 30 / 48 / 1 / 79:   8%|▊         | 79/1000 [02:00<23:23,  1.52s/it][Succeeded / Failed / Skipped / Total] 30 / 49 / 1 / 80:   8%|▊         | 80/1000 [02:01<23:16,  1.52s/it]Check if the given Spring version is compatible with the given version . --> Verifies that the dependency is a valid . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[arrack]] ) { if ( [[arrack]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 74 ---------------------------------------------
Create a user . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String [[username]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[kazuo]] ( String [[blackmails]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[blackmails]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[blackmails]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 75 ---------------------------------------------
Configure the client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[astrophysicist]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[illustrates]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[illustrates]] ) ; return [[illustrates]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 76 ---------------------------------------------
Sets a default attribute . --> Adds a new |d|| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[halliday]] ( String identifierPattern ) { AttributeExchangeConfigurer [[palindrome]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[palindrome]] ) ; return [[palindrome]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 77 ---------------------------------------------
Generate a SHA - encoded password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[kintaro]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[kintaro]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 78 ---------------------------------------------
Gets the version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[bonner]] ( ) { Properties [[kennington]] = new Properties ( ) ; try { [[kennington]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[kennington]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 79 ---------------------------------------------
Encode a password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[aishwarya]] ( CharSequence [[hitchhiking]] , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , [[hitchhiking]] ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 80 ---------------------------------------------
Configures the OAuth2 OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[chrysanthemum]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[chrysanthemum]] ) ; return [[chrysanthemum]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 50 / 1 / 81:   8%|▊         | 81/1000 [02:08<24:20,  1.59s/it][Succeeded / Failed / Skipped / Total] 31 / 50 / 1 / 82:   8%|▊         | 82/1000 [02:11<24:31,  1.60s/it][Succeeded / Failed / Skipped / Total] 32 / 50 / 1 / 83:   8%|▊         | 83/1000 [02:20<25:47,  1.69s/it][Succeeded / Failed / Skipped / Total] 33 / 50 / 1 / 84:   8%|▊         | 84/1000 [02:26<26:34,  1.74s/it][Succeeded / Failed / Skipped / Total] 33 / 51 / 1 / 85:   8%|▊         | 85/1000 [02:45<29:42,  1.95s/it][Succeeded / Failed / Skipped / Total] 33 / 51 / 1 / 85:   9%|▊         | 86/1000 [02:49<30:05,  1.97s/it]Get the HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[airtime]] ( ) throws Exception { ApplicationContext [[shimmy]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[shimmy]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Checks if the given version is valid . --> Get a boolean from a boolean --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[tye]] ( String [[royces]] , String [[darpa]] ) { if ( [[royces]] == null || [[royces]] . equals ( [[darpa]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 83 ---------------------------------------------
Executes the given context . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( dn , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] [[airspace]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[chauncey]] = ctx . getAttributes ( dn , [[airspace]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 84 ---------------------------------------------
Loads the embedd . --> Returns a boolean indicating whether or not --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[snobbish]] ( SearchControls [[reproduce]] ) { return new SearchControls ( [[reproduce]] . getSearchScope ( ) , [[reproduce]] . getCountLimit ( ) , [[reproduce]] . getTimeLimit ( ) , [[reproduce]] . getReturningAttributes ( ) , RETURN_OBJECT , [[reproduce]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 85 ---------------------------------------------
Sets the values for the given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[probst]] ( final String [[wouid]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 51 / 1 / 86:   9%|▊         | 86/1000 [02:49<30:05,  1.97s/it][Succeeded / Failed / Skipped / Total] 34 / 51 / 1 / 86:   9%|▊         | 87/1000 [02:51<29:55,  1.97s/it][Succeeded / Failed / Skipped / Total] 34 / 51 / 2 / 87:   9%|▊         | 87/1000 [02:51<29:55,  1.97s/it][Succeeded / Failed / Skipped / Total] 34 / 51 / 2 / 87:   9%|▉         | 88/1000 [02:52<29:46,  1.96s/it][Succeeded / Failed / Skipped / Total] 35 / 51 / 2 / 88:   9%|▉         | 88/1000 [02:52<29:46,  1.96s/it][Succeeded / Failed / Skipped / Total] 35 / 51 / 2 / 88:   9%|▉         | 89/1000 [02:53<29:32,  1.95s/it][Succeeded / Failed / Skipped / Total] 35 / 52 / 2 / 89:   9%|▉         | 89/1000 [02:53<29:32,  1.95s/it][Succeeded / Failed / Skipped / Total] 35 / 52 / 2 / 89:   9%|▉         | 90/1000 [02:53<29:18,  1.93s/it]Searches a search for a given search . --> Builds a Dynaming for a given searching --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[ctx]] , SearchControls searchControls , String base , String [[filter]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName [[searchBaseDn]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[ctx]] . search ( [[searchBaseDn]] , [[filter]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[searchBaseDn]] + "', filter = '" + [[filter]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[mert]] , SearchControls searchControls , String base , String [[gigantic]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[mert]] . getNameInNamespace ( ) ) ; final DistinguishedName [[apb]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[mert]] . search ( [[apb]] , [[gigantic]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[apb]] + "', filter = '" + [[gigantic]] + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 87 ---------------------------------------------
This method initializes JAX . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
Initialize the servlet . --> Register ServletRequest . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[DEF_SERVLET_API_PROVISION]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[DEF_SERVLET_API_PROVISION]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[CRANKY]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[CRANKY]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 89 ---------------------------------------------
Convert a map of values to a map --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[filter]] , final Object [ ] params , final String [[attributeName]] ) { String [ ] attributeNames = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > [[values]] = map . get ( [[attributeName]] ) ; if ( [[values]] != null ) { [[result]] . addAll ( [[values]] ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String [[pomade]] , final Object [ ] params , final String [[galilei]] ) { String [ ] attributeNames = new String [ ] { [[galilei]] } ; Set < Map < String , List < String > > > [[stifles]] = searchForMultipleAttributeValues ( base , [[pomade]] , params , attributeNames ) ; Set < String > [[massachusetts]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[stifles]] ) { List < String > [[coach]] = map . get ( [[galilei]] ) ; if ( [[coach]] != null ) { [[massachusetts]] . addAll ( [[coach]] ) ; } } return [[massachusetts]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 53 / 2 / 90:   9%|▉         | 90/1000 [02:53<29:18,  1.93s/it][Succeeded / Failed / Skipped / Total] 35 / 53 / 2 / 90:   9%|▉         | 91/1000 [02:59<29:53,  1.97s/it][Succeeded / Failed / Skipped / Total] 36 / 53 / 2 / 91:   9%|▉         | 91/1000 [02:59<29:53,  1.97s/it][Succeeded / Failed / Skipped / Total] 36 / 53 / 2 / 91:   9%|▉         | 92/1000 [03:00<29:44,  1.96s/it][Succeeded / Failed / Skipped / Total] 37 / 53 / 2 / 92:   9%|▉         | 92/1000 [03:00<29:44,  1.96s/it][Succeeded / Failed / Skipped / Total] 37 / 53 / 2 / 92:   9%|▉         | 93/1000 [03:05<30:09,  2.00s/it]Get the response type . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[[False]]" != "[[False]]" ; boolean continuationBodyNullable = "[[False]]" != "[[False]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type [[adapterType]] ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "[[Listenin]]" != "[[Listenin]]" ; boolean continuationBodyNullable = "[[Listenin]]" != "[[Listenin]]" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type [[dewar]] ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 91 ---------------------------------------------
Extracts a bean definition from the source . --> Helper method to create a default port definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String url = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition [[apacheContainer]] = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; [[apacheContainer]] . setSource ( source ) ; [[apacheContainer]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } [[apacheContainer]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; [[apacheContainer]] . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , [[apacheContainer]] ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[appartment]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[appartment]] ) ) { [[appartment]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[appartment]] ) ; } } String url = "ldap://127.0.0.1:" + [[appartment]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition [[ashen]] = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; [[ashen]] . setSource ( source ) ; [[ashen]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } [[ashen]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; [[ashen]] . getPropertyValues ( ) . addPropertyValue ( "port" , [[appartment]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , [[ashen]] ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 92 ---------------------------------------------
Set the filter . --> Register a filter . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[filterName]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[filterName]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[filterName]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String [[chedda]] = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( [[chedda]] ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , [[chedda]] , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 54 / 2 / 93:   9%|▉         | 93/1000 [03:05<30:09,  2.00s/it][Succeeded / Failed / Skipped / Total] 37 / 54 / 2 / 93:   9%|▉         | 94/1000 [03:07<30:10,  2.00s/it][Succeeded / Failed / Skipped / Total] 37 / 55 / 2 / 94:   9%|▉         | 94/1000 [03:07<30:10,  2.00s/it][Succeeded / Failed / Skipped / Total] 37 / 55 / 2 / 94:  10%|▉         | 95/1000 [03:15<31:02,  2.06s/it][Succeeded / Failed / Skipped / Total] 37 / 56 / 2 / 95:  10%|▉         | 95/1000 [03:15<31:02,  2.06s/it][Succeeded / Failed / Skipped / Total] 37 / 56 / 2 / 95:  10%|▉         | 96/1000 [03:16<30:51,  2.05s/it][Succeeded / Failed / Skipped / Total] 37 / 57 / 2 / 96:  10%|▉         | 96/1000 [03:16<30:51,  2.05s/it][Succeeded / Failed / Skipped / Total] 37 / 57 / 2 / 96:  10%|▉         | 97/1000 [03:19<30:55,  2.05s/it][Succeeded / Failed / Skipped / Total] 37 / 58 / 2 / 97:  10%|▉         | 97/1000 [03:19<30:55,  2.05s/it][Succeeded / Failed / Skipped / Total] 37 / 58 / 2 / 97:  10%|▉         | 98/1000 [03:28<31:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 37 / 59 / 2 / 98:  10%|▉         | 98/1000 [03:28<31:58,  2.13s/it][Succeeded / Failed / Skipped / Total] 37 / 59 / 2 / 98:  10%|▉         | 99/1000 [03:32<32:14,  2.15s/it]Creates a new TypeBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[mentions]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Sets the properties . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[assassinated]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 95 ---------------------------------------------
Builds a Guaranteeeeeeey . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[pedal]] ( HttpServletRequest [[infects]] ) { Collection < String > [[checkout]] = getUserRoles ( [[infects]] ) ; Collection < ? extends GrantedAuthority > [[droste]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[checkout]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[checkout]] + "] mapped to Granted Authorities: [" + [[droste]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[infects]] , [[droste]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 96 ---------------------------------------------
Execute a search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[wrangler]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 97 ---------------------------------------------
Encrypt a algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher newCipher ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher newCipher ( String [[macbeth]] ) { try { return Cipher . getInstance ( [[macbeth]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 98 ---------------------------------------------
Find the SQL statement . --> [[[FAILED]]]

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[fami]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[fami]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[fami]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[fami]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 60 / 2 / 99:  10%|▉         | 99/1000 [03:32<32:14,  2.15s/it][Succeeded / Failed / Skipped / Total] 37 / 60 / 2 / 99:  10%|█         | 100/1000 [03:35<32:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 38 / 60 / 2 / 100:  10%|█         | 100/1000 [03:35<32:16,  2.15s/it][Succeeded / Failed / Skipped / Total] 38 / 60 / 2 / 100:  10%|█         | 101/1000 [03:35<31:59,  2.14s/it][Succeeded / Failed / Skipped / Total] 38 / 61 / 2 / 101:  10%|█         | 101/1000 [03:35<31:59,  2.14s/it][Succeeded / Failed / Skipped / Total] 38 / 61 / 2 / 101:  10%|█         | 102/1000 [03:37<31:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 38 / 62 / 2 / 102:  10%|█         | 102/1000 [03:37<31:53,  2.13s/it][Succeeded / Failed / Skipped / Total] 38 / 62 / 2 / 102:  10%|█         | 103/1000 [03:47<32:57,  2.21s/it][Succeeded / Failed / Skipped / Total] 38 / 63 / 2 / 103:  10%|█         | 103/1000 [03:47<32:57,  2.21s/it][Succeeded / Failed / Skipped / Total] 38 / 63 / 2 / 103:  10%|█         | 104/1000 [03:49<32:58,  2.21s/it][Succeeded / Failed / Skipped / Total] 39 / 63 / 2 / 104:  10%|█         | 104/1000 [03:49<32:58,  2.21s/it][Succeeded / Failed / Skipped / Total] 39 / 63 / 2 / 104:  10%|█         | 105/1000 [03:50<32:41,  2.19s/it]Returns the number of regarding row . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[lisboa]] ( String [[kaitlyn]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[discoveries]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[kaitlyn]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[kaitlyn]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[kaitlyn]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[kaitlyn]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Create a new Login . --> Create a Login --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[amaze]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[amaze]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[amaze]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 101 ---------------------------------------------
Gets the value of the attribute property . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[bath]] ( Collection < String > attributes ) { List < GrantedAuthority > [[barad]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[arguin]] : attributes ) { [[barad]] . add ( getGrantedAuthority ( [[arguin]] ) ) ; } return [[barad]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 102 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[administers]] ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } chain . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
Process the logout . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[menacingly]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[mahalo]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[mahalo]] != null && ! [[mahalo]] . isCustomLogoutSuccess ( ) ) { [[mahalo]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 104 ---------------------------------------------
Updates a permitted . --> Logs a &lt ; --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[barstow]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 64 / 2 / 105:  10%|█         | 105/1000 [03:50<32:41,  2.19s/it][Succeeded / Failed / Skipped / Total] 39 / 64 / 2 / 105:  11%|█         | 106/1000 [03:51<32:33,  2.18s/it][Succeeded / Failed / Skipped / Total] 40 / 64 / 2 / 106:  11%|█         | 106/1000 [03:51<32:33,  2.18s/it][Succeeded / Failed / Skipped / Total] 40 / 64 / 2 / 106:  11%|█         | 107/1000 [03:57<33:01,  2.22s/it][Succeeded / Failed / Skipped / Total] 41 / 64 / 2 / 107:  11%|█         | 107/1000 [03:57<33:01,  2.22s/it][Succeeded / Failed / Skipped / Total] 41 / 64 / 2 / 107:  11%|█         | 108/1000 [04:01<33:12,  2.23s/it][Succeeded / Failed / Skipped / Total] 41 / 65 / 2 / 108:  11%|█         | 108/1000 [04:01<33:12,  2.23s/it][Succeeded / Failed / Skipped / Total] 41 / 65 / 2 / 108:  11%|█         | 109/1000 [04:02<33:00,  2.22s/it][Succeeded / Failed / Skipped / Total] 42 / 65 / 2 / 109:  11%|█         | 109/1000 [04:02<33:00,  2.22s/it][Succeeded / Failed / Skipped / Total] 42 / 65 / 2 / 109:  11%|█         | 110/1000 [04:02<32:42,  2.20s/it]Returns a list of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[preparing]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
Put a password . --> Unregister a shared object --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[redress]] ( Object [[fasten]] ) { if ( ! ( [[fasten]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
Prepare authentication . --> Authenticate principal --> Socre: 1.0

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication [[authResult]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[authResult]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[response]] , [[authResult]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[recuperate]] ) throws IOException , ServletException { Authentication [[cintra]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object [[anyhow]] = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , [[anyhow]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[cintra]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[recuperate]] , [[cintra]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[recuperate]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 108 ---------------------------------------------
Gets cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 109 ---------------------------------------------
Encodes a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[according]] ( String [ ] cookieTokens ) { StringBuilder [[injurious]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[injurious]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[injurious]] . append ( DELIMITER ) ; } } String value = [[injurious]] . toString ( ) ; [[injurious]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[injurious]] . charAt ( [[injurious]] . length ( ) - 1 ) == ' ' ) { [[injurious]] . deleteCharAt ( [[injurious]] . length ( ) - 1 ) ; } return [[injurious]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 110 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 66 / 2 / 110:  11%|█         | 110/1000 [04:02<32:42,  2.20s/it][Succeeded / Failed / Skipped / Total] 42 / 66 / 2 / 110:  11%|█         | 111/1000 [04:08<33:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 43 / 66 / 2 / 111:  11%|█         | 111/1000 [04:08<33:09,  2.24s/it][Succeeded / Failed / Skipped / Total] 43 / 66 / 2 / 111:  11%|█         | 112/1000 [04:09<32:58,  2.23s/it][Succeeded / Failed / Skipped / Total] 44 / 66 / 2 / 112:  11%|█         | 112/1000 [04:09<32:58,  2.23s/it][Succeeded / Failed / Skipped / Total] 44 / 66 / 2 / 112:  11%|█▏        | 113/1000 [04:18<33:51,  2.29s/it][Succeeded / Failed / Skipped / Total] 44 / 67 / 2 / 113:  11%|█▏        | 113/1000 [04:18<33:51,  2.29s/it][Succeeded / Failed / Skipped / Total] 44 / 67 / 2 / 113:  11%|█▏        | 114/1000 [04:25<34:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 44 / 68 / 2 / 114:  11%|█▏        | 114/1000 [04:25<34:19,  2.32s/it][Succeeded / Failed / Skipped / Total] 44 / 68 / 2 / 114:  12%|█▏        | 115/1000 [04:26<34:10,  2.32s/it][Succeeded / Failed / Skipped / Total] 44 / 69 / 2 / 115:  12%|█▏        | 115/1000 [04:26<34:10,  2.32s/it][Succeeded / Failed / Skipped / Total] 44 / 69 / 2 / 115:  12%|█▏        | 116/1000 [04:27<34:01,  2.31s/it][Succeeded / Failed / Skipped / Total] 44 / 70 / 2 / 116:  12%|█▏        | 116/1000 [04:27<34:01,  2.31s/it][Succeeded / Failed / Skipped / Total] 44 / 70 / 2 / 116:  12%|█▏        | 117/1000 [04:32<34:14,  2.33s/it]Checks if the given principal is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[angelito]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 111 ---------------------------------------------
Resolves the security context . --> Get a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[benoit]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[agrippa]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[agrippa]] == null ) { return null ; } return [[agrippa]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 112 ---------------------------------------------
Authenticates the authentication token . --> Put a Password token . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[coronal]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 113 ---------------------------------------------
Get the port URL port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[bridgette]] ( URL [[cyber]] ) { int port = [[cyber]] . getPort ( ) ; if ( port == - 1 ) { port = [[cyber]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Build the URL for the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[pandemic]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 115 ---------------------------------------------
Returns the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[beefsteak]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 116 ---------------------------------------------
Set environment . --> [[[FAILED]]]

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 117 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 70 / 2 / 117:  12%|█▏        | 117/1000 [04:32<34:14,  2.33s/it][Succeeded / Failed / Skipped / Total] 45 / 70 / 2 / 117:  12%|█▏        | 118/1000 [04:33<34:01,  2.31s/it][Succeeded / Failed / Skipped / Total] 45 / 71 / 2 / 118:  12%|█▏        | 118/1000 [04:33<34:01,  2.31s/it][Succeeded / Failed / Skipped / Total] 45 / 71 / 2 / 118:  12%|█▏        | 119/1000 [04:36<34:03,  2.32s/it][Succeeded / Failed / Skipped / Total] 45 / 72 / 2 / 119:  12%|█▏        | 119/1000 [04:36<34:03,  2.32s/it][Succeeded / Failed / Skipped / Total] 45 / 72 / 2 / 119:  12%|█▏        | 120/1000 [04:38<33:59,  2.32s/it][Succeeded / Failed / Skipped / Total] 45 / 73 / 2 / 120:  12%|█▏        | 120/1000 [04:38<33:59,  2.32s/it][Succeeded / Failed / Skipped / Total] 45 / 73 / 2 / 120:  12%|█▏        | 121/1000 [04:41<34:05,  2.33s/it][Succeeded / Failed / Skipped / Total] 45 / 74 / 2 / 121:  12%|█▏        | 121/1000 [04:41<34:05,  2.33s/it][Succeeded / Failed / Skipped / Total] 45 / 74 / 2 / 121:  12%|█▏        | 122/1000 [04:45<34:15,  2.34s/it]Initialize the User . --> Build a UserService --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[users]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[jesus]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 118 ---------------------------------------------
Writes the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[marino]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 119 ---------------------------------------------
Returns the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = authentication . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails [[details]] = ( LdapUserDetails ) [[principal]] ; return [[details]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[frogmen]] = authentication . getPrincipal ( ) ; if ( [[frogmen]] instanceof LdapUserDetails ) { LdapUserDetails [[albino]] = ( LdapUserDetails ) [[frogmen]] ; return [[albino]] . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 120 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , cookieValue ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[enabling]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[instruments]] = new Cookie ( cookieName , cookieValue ) ; [[instruments]] . setMaxAge ( maxAge ) ; [[instruments]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[instruments]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[instruments]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[instruments]] . setSecure ( request . isSecure ( ) ) ; } else { [[instruments]] . setSecure ( useSecureCookie ) ; } [[instruments]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[instruments]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 121 ---------------------------------------------
Checks to see if the given content of the response is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[josette]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[josette]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 45 / 75 / 2 / 122:  12%|█▏        | 122/1000 [04:45<34:15,  2.34s/it][Succeeded / Failed / Skipped / Total] 45 / 75 / 2 / 122:  12%|█▏        | 123/1000 [04:50<34:32,  2.36s/it][Succeeded / Failed / Skipped / Total] 46 / 75 / 2 / 123:  12%|█▏        | 123/1000 [04:50<34:32,  2.36s/it][Succeeded / Failed / Skipped / Total] 46 / 75 / 2 / 123:  12%|█▏        | 124/1000 [04:53<34:34,  2.37s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 2 / 124:  12%|█▏        | 124/1000 [04:53<34:34,  2.37s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 2 / 124:  12%|█▎        | 125/1000 [04:53<34:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 3 / 125:  12%|█▎        | 125/1000 [04:53<34:16,  2.35s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 3 / 125:  13%|█▎        | 126/1000 [04:53<33:59,  2.33s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 4 / 126:  13%|█▎        | 126/1000 [04:53<33:59,  2.33s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 4 / 126:  13%|█▎        | 127/1000 [04:59<34:19,  2.36s/it][Succeeded / Failed / Skipped / Total] 46 / 77 / 4 / 127:  13%|█▎        | 127/1000 [04:59<34:19,  2.36s/it][Succeeded / Failed / Skipped / Total] 46 / 77 / 4 / 127:  13%|█▎        | 128/1000 [05:04<34:32,  2.38s/it][Succeeded / Failed / Skipped / Total] 47 / 77 / 4 / 128:  13%|█▎        | 128/1000 [05:04<34:32,  2.38s/it][Succeeded / Failed / Skipped / Total] 47 / 77 / 4 / 128:  13%|█▎        | 129/1000 [05:07<34:39,  2.39s/it]Gets the UserContext . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[viky]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[viky]] . size ( ) == 0 ) { [[viky]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[viky]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[viky]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[viky]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Handle a request . --> Check if the request is valid --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( [[request]] , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[franziska]] , final HttpServletResponse response ) { final boolean [[digital]] = [[digital]] ( [[franziska]] , response ) ; final boolean result = [[digital]] || proxyReceptorRequest ( [[franziska]] ) || ( proxyTicketRequest ( [[digital]] , [[franziska]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 124 ---------------------------------------------
Verifies that a session is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[unzipping]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[unzipping]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[unzipping]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 125 ---------------------------------------------
Returns a JMonoMBean --> [[[SKIPPED]]]

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 126 ---------------------------------------------
Encodes a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 127 ---------------------------------------------
Is authentication authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication [[concussion]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[concussion]] != null && [[concussion]] . isAuthenticated ( ) && ! ( [[concussion]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 128 ---------------------------------------------
Creates a authentication method . --> Create a new Role --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[very]] , MethodInvocation [[meyou]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[very]] ) ; root . setThis ( [[meyou]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 129 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 78 / 4 / 129:  13%|█▎        | 129/1000 [05:07<34:39,  2.39s/it][Succeeded / Failed / Skipped / Total] 47 / 78 / 4 / 129:  13%|█▎        | 130/1000 [05:13<34:59,  2.41s/it][Succeeded / Failed / Skipped / Total] 47 / 79 / 4 / 130:  13%|█▎        | 130/1000 [05:13<34:59,  2.41s/it][Succeeded / Failed / Skipped / Total] 47 / 79 / 4 / 130:  13%|█▎        | 131/1000 [05:14<34:43,  2.40s/it][Succeeded / Failed / Skipped / Total] 47 / 80 / 4 / 131:  13%|█▎        | 131/1000 [05:14<34:43,  2.40s/it][Succeeded / Failed / Skipped / Total] 47 / 80 / 4 / 131:  13%|█▎        | 132/1000 [05:25<35:42,  2.47s/it][Succeeded / Failed / Skipped / Total] 47 / 81 / 4 / 132:  13%|█▎        | 132/1000 [05:25<35:42,  2.47s/it][Succeeded / Failed / Skipped / Total] 47 / 81 / 4 / 132:  13%|█▎        | 133/1000 [05:26<35:25,  2.45s/it][Succeeded / Failed / Skipped / Total] 47 / 82 / 4 / 133:  13%|█▎        | 133/1000 [05:26<35:25,  2.45s/it][Succeeded / Failed / Skipped / Total] 47 / 82 / 4 / 133:  13%|█▎        | 134/1000 [05:31<35:41,  2.47s/it][Succeeded / Failed / Skipped / Total] 47 / 83 / 4 / 134:  13%|█▎        | 134/1000 [05:31<35:41,  2.47s/it][Succeeded / Failed / Skipped / Total] 47 / 83 / 4 / 134:  14%|█▎        | 135/1000 [05:31<35:26,  2.46s/it]Check if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { boolean result = super . requiresAuthentication ( request , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[kaitlyn]] ( final HttpServletRequest request , final HttpServletResponse [[maricón]] ) { boolean result = super . requiresAuthentication ( request , [[maricón]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 130 ---------------------------------------------
Returns true if the request is present . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[curdles]] ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
Creates a new LDAP URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[yello]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[yello]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[yello]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 132 ---------------------------------------------
Gets the user groups for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > [[quero]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[quero]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[quero]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 133 ---------------------------------------------
Check if ticket exists . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest [[request]] ) { if ( [[serviceTicketRequest]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( [[request]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[gabay]] ( final boolean [[josette]] , final HttpServletRequest [[disillusionment]] ) { if ( [[josette]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( [[disillusionment]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 134 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[wheels]] ( HttpServletRequest [[arguin]] ) { Object [[redcap]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[redcap]] ) ; } return [[redcap]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 84 / 4 / 135:  14%|█▎        | 135/1000 [05:31<35:26,  2.46s/it][Succeeded / Failed / Skipped / Total] 47 / 84 / 4 / 135:  14%|█▎        | 136/1000 [05:35<35:28,  2.46s/it][Succeeded / Failed / Skipped / Total] 47 / 85 / 4 / 136:  14%|█▎        | 136/1000 [05:35<35:28,  2.46s/it][Succeeded / Failed / Skipped / Total] 47 / 85 / 4 / 136:  14%|█▎        | 137/1000 [05:45<36:14,  2.52s/it][Succeeded / Failed / Skipped / Total] 48 / 85 / 4 / 137:  14%|█▎        | 137/1000 [05:45<36:14,  2.52s/it][Succeeded / Failed / Skipped / Total] 48 / 85 / 4 / 137:  14%|█▍        | 138/1000 [05:51<36:34,  2.55s/it][Succeeded / Failed / Skipped / Total] 48 / 86 / 4 / 138:  14%|█▍        | 138/1000 [05:51<36:34,  2.55s/it][Succeeded / Failed / Skipped / Total] 48 / 86 / 4 / 138:  14%|█▍        | 139/1000 [05:55<36:42,  2.56s/it][Succeeded / Failed / Skipped / Total] 48 / 87 / 4 / 139:  14%|█▍        | 139/1000 [05:55<36:42,  2.56s/it][Succeeded / Failed / Skipped / Total] 48 / 87 / 4 / 139:  14%|█▍        | 140/1000 [05:56<36:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 48 / 88 / 4 / 140:  14%|█▍        | 140/1000 [05:56<36:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 48 / 88 / 4 / 140:  14%|█▍        | 141/1000 [05:58<36:24,  2.54s/it]Load authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[ap]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[ap]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Generate Peeeekt . --> [[[FAILED]]]

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 137 ---------------------------------------------
Returns the map of greements . --> Returns a list of tiles . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[legate]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[infertile]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[infertile]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[infertile]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Gets the shared type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[stubborn]] > [[stubborn]] getSharedObject ( Class < [[stubborn]] > sharedType ) { return ( [[stubborn]] ) this . [[alerted]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 139 ---------------------------------------------
Concatenate a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[pardee]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 140 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[amadé]] ( HttpServletRequest [[motes]] ) { Object [[priestly]] = [[motes]] . getUserPrincipal ( ) == null ? null : [[motes]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[priestly]] ) ; } return [[priestly]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 89 / 4 / 141:  14%|█▍        | 141/1000 [05:58<36:24,  2.54s/it][Succeeded / Failed / Skipped / Total] 48 / 89 / 4 / 141:  14%|█▍        | 142/1000 [06:05<36:47,  2.57s/it][Succeeded / Failed / Skipped / Total] 48 / 90 / 4 / 142:  14%|█▍        | 142/1000 [06:05<36:47,  2.57s/it][Succeeded / Failed / Skipped / Total] 48 / 90 / 4 / 142:  14%|█▍        | 143/1000 [06:07<36:43,  2.57s/it][Succeeded / Failed / Skipped / Total] 48 / 91 / 4 / 143:  14%|█▍        | 143/1000 [06:07<36:43,  2.57s/it][Succeeded / Failed / Skipped / Total] 48 / 91 / 4 / 143:  14%|█▍        | 144/1000 [06:08<36:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 48 / 92 / 4 / 144:  14%|█▍        | 144/1000 [06:08<36:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 48 / 92 / 4 / 144:  14%|█▍        | 145/1000 [06:09<36:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 49 / 92 / 4 / 145:  14%|█▍        | 145/1000 [06:09<36:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 49 / 92 / 4 / 145:  15%|█▍        | 146/1000 [06:13<36:24,  2.56s/it][Succeeded / Failed / Skipped / Total] 49 / 93 / 4 / 146:  15%|█▍        | 146/1000 [06:13<36:24,  2.56s/it][Succeeded / Failed / Skipped / Total] 49 / 93 / 4 / 146:  15%|█▍        | 147/1000 [06:17<36:30,  2.57s/it][Succeeded / Failed / Skipped / Total] 50 / 93 / 4 / 147:  15%|█▍        | 147/1000 [06:17<36:30,  2.57s/it][Succeeded / Failed / Skipped / Total] 50 / 93 / 4 / 147:  15%|█▍        | 148/1000 [06:19<36:23,  2.56s/it]Adds a value to the given collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[uninitiated]] ( Collection < GrantedAuthority > result , Object [[supervision]] ) { if ( [[supervision]] == null ) { return ; } if ( [[supervision]] instanceof Collection < ? > ) { [[uninitiated]] ( result , ( Collection < ? > ) [[supervision]] ) ; } else if ( [[supervision]] instanceof Object [ ] ) { [[uninitiated]] ( result , ( Object [ ] ) [[supervision]] ) ; } else if ( [[supervision]] instanceof String ) { [[uninitiated]] ( result , ( String ) [[supervision]] ) ; } else if ( [[supervision]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[supervision]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[supervision]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 142 ---------------------------------------------
Get a list of greements . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[c]] != null ) { [[gaList]] . addAll ( [[c]] ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[enhancements]] ) { ArrayList < GrantedAuthority > [[greenhouses]] = new ArrayList <> ( ) ; for ( String attribute : [[enhancements]] ) { Collection < GrantedAuthority > [[strangulation]] = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( [[strangulation]] != null ) { [[greenhouses]] . addAll ( [[strangulation]] ) ; } } [[greenhouses]] . trimToSize ( ) ; return [[greenhouses]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the value of the given condition . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[regretfully]] ( Object value ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , value ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 144 ---------------------------------------------
Returns a copy of the specified byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] [[array]] , int beginIndex , int [[endIndex]] ) { int length = [[endIndex]] - beginIndex ; byte [ ] [[subarray]] = new byte [ length ] ; System . arraycopy ( [[array]] , beginIndex , [[subarray]] , 0 , length ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[axl]] ( byte [ ] [[herculean]] , int beginIndex , int [[teeny]] ) { int length = [[teeny]] - beginIndex ; byte [ ] [[recipes]] = new byte [ length ] ; System . arraycopy ( [[herculean]] , beginIndex , [[recipes]] , 0 , length ) ; return [[recipes]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 145 ---------------------------------------------
Invoked by invocation . --> Does a fault --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[escort]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[dorfman]] ; try { [[dorfman]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[escort]] ) ; } return super . afterInvocation ( [[escort]] , [[dorfman]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Checks if the role is a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[boland]] ( String [[box]] ) { Assert . isTrue ( ! [[box]] . startsWith ( "ROLE_" ) , ( ) -> [[box]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[box]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Returns the roles for the given roles . --> Destroys the destroy --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[bleeders]] ( String ... [[destroyers]] ) { for ( int i = 0 ; i < [[destroyers]] . length ; i ++ ) { [[destroyers]] [ i ] = "ROLE_" + [[destroyers]] [ i ] ; } return [[destroyers]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 94 / 4 / 148:  15%|█▍        | 148/1000 [06:19<36:23,  2.56s/it][Succeeded / Failed / Skipped / Total] 50 / 94 / 4 / 148:  15%|█▍        | 149/1000 [06:20<36:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 51 / 94 / 4 / 149:  15%|█▍        | 149/1000 [06:20<36:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 51 / 94 / 4 / 149:  15%|█▌        | 150/1000 [06:24<36:19,  2.56s/it][Succeeded / Failed / Skipped / Total] 51 / 95 / 4 / 150:  15%|█▌        | 150/1000 [06:24<36:19,  2.56s/it][Succeeded / Failed / Skipped / Total] 51 / 95 / 4 / 150:  15%|█▌        | 151/1000 [06:26<36:13,  2.56s/it][Succeeded / Failed / Skipped / Total] 52 / 95 / 4 / 151:  15%|█▌        | 151/1000 [06:26<36:13,  2.56s/it][Succeeded / Failed / Skipped / Total] 52 / 95 / 4 / 151:  15%|█▌        | 152/1000 [06:29<36:12,  2.56s/it][Succeeded / Failed / Skipped / Total] 53 / 95 / 4 / 152:  15%|█▌        | 152/1000 [06:29<36:12,  2.56s/it][Succeeded / Failed / Skipped / Total] 53 / 95 / 4 / 152:  15%|█▌        | 153/1000 [06:32<36:11,  2.56s/it][Succeeded / Failed / Skipped / Total] 53 / 96 / 4 / 153:  15%|█▌        | 153/1000 [06:32<36:11,  2.56s/it][Succeeded / Failed / Skipped / Total] 53 / 96 / 4 / 153:  15%|█▌        | 154/1000 [06:35<36:11,  2.57s/it][Succeeded / Failed / Skipped / Total] 54 / 96 / 4 / 154:  15%|█▌        | 154/1000 [06:35<36:11,  2.57s/it][Succeeded / Failed / Skipped / Total] 54 / 96 / 4 / 154:  16%|█▌        | 155/1000 [06:37<36:04,  2.56s/it][Succeeded / Failed / Skipped / Total] 55 / 96 / 4 / 155:  16%|█▌        | 155/1000 [06:37<36:04,  2.56s/it][Succeeded / Failed / Skipped / Total] 55 / 96 / 4 / 155:  16%|█▌        | 156/1000 [06:42<36:16,  2.58s/it]Build the URL for the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[trophies]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[trickier]] = new RedirectUrlBuilder ( ) ; [[trickier]] . setScheme ( "https" ) ; [[trickier]] . setServerName ( request . getServerName ( ) ) ; [[trickier]] . setPort ( httpsPort . intValue ( ) ) ; [[trickier]] . setContextPath ( request . getContextPath ( ) ) ; [[trickier]] . setServletPath ( request . getServletPath ( ) ) ; [[trickier]] . setPathInfo ( request . getPathInfo ( ) ) ; [[trickier]] . setQuery ( request . getQueryString ( ) ) ; return [[trickier]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Adapts a MapView . --> Returns a new direction --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact [[accuracy]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[accuracy]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 150 ---------------------------------------------
Acquires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Replies if the given webappr . --> Check if a ManagedConstructr . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[betrays]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
Parse JWT . --> Parse a JWTToken . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[chiselers]] = parse ( token ) ; if ( [[chiselers]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[chiselers]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[chiselers]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 153 ---------------------------------------------
Sets the URL to use for this user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[tasteless]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Returns the authority of the cookie . --> Returns a map of all cookies . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[citizenry]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 155 ---------------------------------------------
Generates a new token . --> Sets the request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[andr]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 156 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 96 / 4 / 156:  16%|█▌        | 156/1000 [06:42<36:16,  2.58s/it][Succeeded / Failed / Skipped / Total] 56 / 96 / 4 / 156:  16%|█▌        | 157/1000 [06:43<36:05,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 97 / 4 / 157:  16%|█▌        | 157/1000 [06:43<36:05,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 97 / 4 / 157:  16%|█▌        | 158/1000 [06:46<36:06,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 98 / 4 / 158:  16%|█▌        | 158/1000 [06:46<36:06,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 98 / 4 / 158:  16%|█▌        | 159/1000 [06:48<35:58,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 4 / 159:  16%|█▌        | 159/1000 [06:48<35:58,  2.57s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 4 / 159:  16%|█▌        | 160/1000 [06:48<35:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 5 / 160:  16%|█▌        | 160/1000 [06:48<35:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 5 / 160:  16%|█▌        | 161/1000 [06:49<35:33,  2.54s/it]Handles the user . --> Authenticate username --> Socre: 1.0

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( username ) ; this . [[userDetailsChecker]] . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[chromosomal]] = this . userDetailsService . loadUserByUsername ( username ) ; this . [[barbaric]] . check ( [[chromosomal]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 157 ---------------------------------------------
Process cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[presentedToken]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String [[newcastle]] = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 158 ---------------------------------------------
Generates authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[fluctuations]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[fluctuations]] ) ; addCookie ( [[fluctuations]] , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 159 ---------------------------------------------
Returns the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[videodrome]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[videodrome]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 160 ---------------------------------------------
Gets attributes . --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 161 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 99 / 5 / 161:  16%|█▌        | 161/1000 [06:49<35:33,  2.54s/it][Succeeded / Failed / Skipped / Total] 57 / 99 / 5 / 161:  16%|█▌        | 162/1000 [06:58<36:04,  2.58s/it][Succeeded / Failed / Skipped / Total] 57 / 100 / 5 / 162:  16%|█▌        | 162/1000 [06:58<36:04,  2.58s/it][Succeeded / Failed / Skipped / Total] 57 / 100 / 5 / 162:  16%|█▋        | 163/1000 [07:01<36:04,  2.59s/it][Succeeded / Failed / Skipped / Total] 58 / 100 / 5 / 163:  16%|█▋        | 163/1000 [07:01<36:04,  2.59s/it][Succeeded / Failed / Skipped / Total] 58 / 100 / 5 / 163:  16%|█▋        | 164/1000 [07:05<36:10,  2.60s/it][Succeeded / Failed / Skipped / Total] 59 / 100 / 5 / 164:  16%|█▋        | 164/1000 [07:05<36:10,  2.60s/it][Succeeded / Failed / Skipped / Total] 59 / 100 / 5 / 164:  16%|█▋        | 165/1000 [07:08<36:09,  2.60s/it][Succeeded / Failed / Skipped / Total] 60 / 100 / 5 / 165:  16%|█▋        | 165/1000 [07:08<36:09,  2.60s/it][Succeeded / Failed / Skipped / Total] 60 / 100 / 5 / 165:  17%|█▋        | 166/1000 [07:09<35:59,  2.59s/it][Succeeded / Failed / Skipped / Total] 60 / 101 / 5 / 166:  17%|█▋        | 166/1000 [07:09<35:59,  2.59s/it][Succeeded / Failed / Skipped / Total] 60 / 101 / 5 / 166:  17%|█▋        | 167/1000 [07:11<35:52,  2.58s/it]Handles permission . --> Delete permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid [[sidObject]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[sidObject]] , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , [[sidObject]] ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid [[airborne]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[airborne]] , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , [[airborne]] ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 162 ---------------------------------------------
Method to get the expression --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[escapee]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[arguin]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[arguin]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[aspire]] = new IOException ( ) ; [[aspire]] . initCause ( e ) ; throw [[aspire]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[arguin]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 163 ---------------------------------------------
Returns the default roles for the given prefix . --> Returns the porate molecule --> Socre: 1.0

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[hippocrates]] , String [[commodities]] ) { if ( [[commodities]] == null ) { return [[commodities]] ; } if ( [[hippocrates]] == null || [[hippocrates]] . length ( ) == 0 ) { return [[commodities]] ; } if ( [[commodities]] . startsWith ( [[hippocrates]] ) ) { return [[commodities]] ; } return [[hippocrates]] + [[commodities]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 164 ---------------------------------------------
Convert a byte array to a byte array . --> Encode a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , [[bytesCopy]] , 0 , [[bytes]] . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer [[simultaneous]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[armpit]] = new byte [ [[simultaneous]] . limit ( ) ] ; System . arraycopy ( [[simultaneous]] . array ( ) , 0 , [[armpit]] , 0 , [[simultaneous]] . limit ( ) ) ; return [[armpit]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 165 ---------------------------------------------
Returns the contact . --> region Method --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , [[contact]] ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[rows]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[rows]] ) ) ; Map < String , Object > [[discernment]] = new HashMap <> ( ) ; [[discernment]] . put ( "contact" , [[rows]] ) ; [[discernment]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[discernment]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 166 ---------------------------------------------
Get the value of the attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[ferocity]] ( String [[effervescent]] ) { List < String > [[kerem]] = getAttributeValues ( [[effervescent]] ) ; if ( [[kerem]] . isEmpty ( ) ) { return null ; } else { return [[kerem]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
[Succeeded / Failed / Skipped / Total] 60 / 102 / 5 / 167:  17%|█▋        | 167/1000 [07:11<35:52,  2.58s/it][Succeeded / Failed / Skipped / Total] 60 / 102 / 5 / 167:  17%|█▋        | 168/1000 [07:13<35:46,  2.58s/it][Succeeded / Failed / Skipped / Total] 60 / 103 / 5 / 168:  17%|█▋        | 168/1000 [07:13<35:46,  2.58s/it][Succeeded / Failed / Skipped / Total] 60 / 103 / 5 / 168:  17%|█▋        | 169/1000 [07:18<35:57,  2.60s/it][Succeeded / Failed / Skipped / Total] 60 / 104 / 5 / 169:  17%|█▋        | 169/1000 [07:18<35:57,  2.60s/it][Succeeded / Failed / Skipped / Total] 60 / 104 / 5 / 169:  17%|█▋        | 170/1000 [07:20<35:48,  2.59s/it][Succeeded / Failed / Skipped / Total] 60 / 105 / 5 / 170:  17%|█▋        | 170/1000 [07:20<35:48,  2.59s/it][Succeeded / Failed / Skipped / Total] 60 / 105 / 5 / 170:  17%|█▋        | 171/1000 [07:28<36:13,  2.62s/it][Succeeded / Failed / Skipped / Total] 61 / 105 / 5 / 171:  17%|█▋        | 171/1000 [07:28<36:13,  2.62s/it][Succeeded / Failed / Skipped / Total] 61 / 105 / 5 / 171:  17%|█▋        | 172/1000 [07:33<36:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 61 / 106 / 5 / 172:  17%|█▋        | 172/1000 [07:33<36:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 61 / 106 / 5 / 172:  17%|█▋        | 173/1000 [07:34<36:12,  2.63s/it]--------------------------------------------- Result 167 ---------------------------------------------
Add a new Permission to the permission --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , [[addPermission]] ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[eva]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[blackguard]] = new AddPermission ( ) ; [[blackguard]] . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , [[blackguard]] ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 168 ---------------------------------------------
Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[keyholes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[keyholes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Create a resource from a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[extrapolate]] ( String users ) { InMemoryResource [[baritone]] = new InMemoryResource ( users ) ; return fromResource ( [[baritone]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 170 ---------------------------------------------
Adds a permissions to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult [[result]] , ModelMap model ) { addPermissionValidator . validate ( addPermission , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission [[permission]] = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , [[permission]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult [[putsch]] , ModelMap model ) { addPermissionValidator . validate ( addPermission , [[putsch]] ) ; if ( [[putsch]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission [[circulars]] = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , [[circulars]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[putsch]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 171 ---------------------------------------------
Handles a response . -->  --> Socre: 0.9999999999745633

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[gimmick]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[gimmick]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 172 ---------------------------------------------
Finds the target class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[spaghetti]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 107 / 5 / 173:  17%|█▋        | 173/1000 [07:34<36:12,  2.63s/it][Succeeded / Failed / Skipped / Total] 61 / 107 / 5 / 173:  17%|█▋        | 174/1000 [07:39<36:21,  2.64s/it][Succeeded / Failed / Skipped / Total] 61 / 108 / 5 / 174:  17%|█▋        | 174/1000 [07:39<36:21,  2.64s/it][Succeeded / Failed / Skipped / Total] 61 / 108 / 5 / 174:  18%|█▊        | 175/1000 [07:40<36:09,  2.63s/it][Succeeded / Failed / Skipped / Total] 62 / 108 / 5 / 175:  18%|█▊        | 175/1000 [07:40<36:09,  2.63s/it][Succeeded / Failed / Skipped / Total] 62 / 108 / 5 / 175:  18%|█▊        | 176/1000 [07:40<35:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 62 / 109 / 5 / 176:  18%|█▊        | 176/1000 [07:40<35:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 62 / 109 / 5 / 176:  18%|█▊        | 177/1000 [07:47<36:12,  2.64s/it][Succeeded / Failed / Skipped / Total] 63 / 109 / 5 / 177:  18%|█▊        | 177/1000 [07:47<36:12,  2.64s/it][Succeeded / Failed / Skipped / Total] 63 / 109 / 5 / 177:  18%|█▊        | 178/1000 [07:47<35:59,  2.63s/it][Succeeded / Failed / Skipped / Total] 64 / 109 / 5 / 178:  18%|█▊        | 178/1000 [07:47<35:59,  2.63s/it][Succeeded / Failed / Skipped / Total] 64 / 109 / 5 / 178:  18%|█▊        | 179/1000 [07:49<35:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 65 / 109 / 5 / 179:  18%|█▊        | 179/1000 [07:49<35:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 65 / 109 / 5 / 179:  18%|█▊        | 180/1000 [07:56<36:08,  2.64s/it]Returns a new request . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[breakable]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[breakable]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[chickenhead]] ( RegisteredMethod [[wrists]] , List < ConfigAttribute > [[bin]] ) { Assert . notNull ( [[wrists]] , "RegisteredMethod required" ) ; Assert . notNull ( [[bin]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[wrists]] + "] with attributes [" + [[bin]] + "]" ) ; } this . methodMap . put ( [[wrists]] , [[bin]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
Returns a list of all attributes . --> Returns a list of all construction --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[wonton]] ( ) { Set < ConfigAttribute > [[goliad]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[goliad]] . addAll ( attributeList ) ; } return [[goliad]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 176 ---------------------------------------------
Checks if a string is a valid name . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[browns]] ( String [[tatsu]] , String [[hardee]] ) { return ( [[hardee]] . endsWith ( "*" ) && [[tatsu]] . startsWith ( [[hardee]] . substring ( 0 , [[hardee]] . length ( ) - 1 ) ) ) || ( [[hardee]] . startsWith ( "*" ) && [[tatsu]] . endsWith ( [[hardee]] . substring ( 1 , [[hardee]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 177 ---------------------------------------------
Create a new URL --> Create a new repository --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[layabouts]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[layabouts]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 178 ---------------------------------------------
Configures the request . --> Sets the default activity --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[cello]] ( ) { Assert . state ( ! this . [[pitiable]] , "Can't configure anyRequest after itself" ) ; C [[overloaded]] = requestMatchers ( ANY_REQUEST ) ; this . [[pitiable]] = "True" == "True" ; return [[overloaded]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
Extracts the supplied environment . --> Extracts a string from a string --> Socre: 1.0

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[baritone]] = encPass . lastIndexOf ( ' ' ) ; if ( [[baritone]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[baritone]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 109 / 5 / 180:  18%|█▊        | 180/1000 [07:56<36:08,  2.64s/it][Succeeded / Failed / Skipped / Total] 66 / 109 / 5 / 180:  18%|█▊        | 181/1000 [07:56<35:55,  2.63s/it][Succeeded / Failed / Skipped / Total] 67 / 109 / 5 / 181:  18%|█▊        | 181/1000 [07:56<35:55,  2.63s/it][Succeeded / Failed / Skipped / Total] 67 / 109 / 5 / 181:  18%|█▊        | 182/1000 [08:05<36:21,  2.67s/it][Succeeded / Failed / Skipped / Total] 67 / 110 / 5 / 182:  18%|█▊        | 182/1000 [08:05<36:21,  2.67s/it][Succeeded / Failed / Skipped / Total] 67 / 110 / 5 / 182:  18%|█▊        | 183/1000 [08:05<36:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 110 / 5 / 183:  18%|█▊        | 183/1000 [08:05<36:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 68 / 110 / 5 / 183:  18%|█▊        | 184/1000 [08:07<36:02,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 110 / 5 / 184:  18%|█▊        | 184/1000 [08:07<36:02,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 110 / 5 / 184:  18%|█▊        | 185/1000 [08:09<35:55,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 111 / 5 / 185:  18%|█▊        | 185/1000 [08:09<35:55,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 111 / 5 / 185:  19%|█▊        | 186/1000 [08:12<35:57,  2.65s/it]Validates the given filters . --> Check if a given filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[ethylene]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 181 ---------------------------------------------
Gets the value of a field . --> Obtain a given a rate name --> Socre: 1.0

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[aahhh]] ( Class < ? > [[andr]] , String [[hippocrates]] ) throws IllegalStateException { Assert . notNull ( [[andr]] , "Class required" ) ; Assert . hasText ( [[hippocrates]] , "Field name required" ) ; try { return [[andr]] . getDeclaredField ( [[hippocrates]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[centrifuge]] ( HttpServletRequest request ) { HttpSession [[faure]] = request . getSession ( "False" != "False" ) ; if ( [[faure]] == null ) { return ; } [[faure]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 183 ---------------------------------------------
Register a bean . --> Registers a VM bean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[voters]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[voters]] . add ( expressionVoter ) ; } [[voters]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[voters]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[voters]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[voters]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[croatians]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[croatians]] . add ( expressionVoter ) ; } [[croatians]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[croatians]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[croatians]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[croatians]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 184 ---------------------------------------------
Create a new service . --> Get HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[hatreds]] ( final HttpServletRequest request , final HttpServletResponse [[mabel]] ) { return CommonUtils . constructServiceUrl ( null , [[mabel]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Returns the random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[interagency]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 112 / 5 / 186:  19%|█▊        | 186/1000 [08:12<35:57,  2.65s/it][Succeeded / Failed / Skipped / Total] 69 / 112 / 5 / 186:  19%|█▊        | 187/1000 [08:14<35:49,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 113 / 5 / 187:  19%|█▊        | 187/1000 [08:14<35:49,  2.64s/it][Succeeded / Failed / Skipped / Total] 69 / 113 / 5 / 187:  19%|█▉        | 188/1000 [08:20<36:01,  2.66s/it][Succeeded / Failed / Skipped / Total] 70 / 113 / 5 / 188:  19%|█▉        | 188/1000 [08:20<36:01,  2.66s/it][Succeeded / Failed / Skipped / Total] 70 / 113 / 5 / 188:  19%|█▉        | 189/1000 [08:25<36:10,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 113 / 5 / 189:  19%|█▉        | 189/1000 [08:25<36:10,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 113 / 5 / 189:  19%|█▉        | 190/1000 [08:28<36:09,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 114 / 5 / 190:  19%|█▉        | 190/1000 [08:28<36:09,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 114 / 5 / 190:  19%|█▉        | 191/1000 [08:31<36:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 115 / 5 / 191:  19%|█▉        | 191/1000 [08:31<36:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 71 / 115 / 5 / 191:  19%|█▉        | 192/1000 [08:34<36:06,  2.68s/it][Succeeded / Failed / Skipped / Total] 72 / 115 / 5 / 192:  19%|█▉        | 192/1000 [08:34<36:06,  2.68s/it][Succeeded / Failed / Skipped / Total] 72 / 115 / 5 / 192:  19%|█▉        | 193/1000 [08:34<35:53,  2.67s/it]Finds a parameter name . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[birthing]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "[[Batwoman]]" != "[[Batwoman]]" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 187 ---------------------------------------------
Gets the type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Builds a URI . --> Build a servlet --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[fidelio]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 189 ---------------------------------------------
Compares two byte arrays . --> Return true if the given number of bytes are equal --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] [[actual]] ) { if ( expected . length != [[actual]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[actual]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[quays]] ( byte [ ] expected , byte [ ] [[comers]] ) { if ( expected . length != [[comers]] . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ [[comers]] [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Send a request to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[ludovic]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 191 ---------------------------------------------
Set the default URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[interoffice]] ( String [[bernd]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[bernd]] ) , ( ) -> "'" + [[bernd]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[bernd]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Convert a string to a type . --> Convert a replication to a replication --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet [[replicators]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[replicators]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[replicators]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[replicators]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 115 / 6 / 193:  19%|█▉        | 193/1000 [08:34<35:53,  2.67s/it][Succeeded / Failed / Skipped / Total] 72 / 115 / 6 / 193:  19%|█▉        | 194/1000 [08:36<35:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 72 / 116 / 6 / 194:  19%|█▉        | 194/1000 [08:36<35:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 72 / 116 / 6 / 194:  20%|█▉        | 195/1000 [08:39<35:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 72 / 117 / 6 / 195:  20%|█▉        | 195/1000 [08:39<35:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 72 / 117 / 6 / 195:  20%|█▉        | 196/1000 [08:39<35:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 72 / 117 / 7 / 196:  20%|█▉        | 196/1000 [08:39<35:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 72 / 117 / 7 / 196:  20%|█▉        | 197/1000 [08:42<35:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 72 / 118 / 7 / 197:  20%|█▉        | 197/1000 [08:42<35:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 72 / 118 / 7 / 197:  20%|█▉        | 198/1000 [08:43<35:18,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 119 / 7 / 198:  20%|█▉        | 198/1000 [08:43<35:18,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 119 / 7 / 198:  20%|█▉        | 199/1000 [08:45<35:16,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 120 / 7 / 199:  20%|█▉        | 199/1000 [08:45<35:16,  2.64s/it][Succeeded / Failed / Skipped / Total] 72 / 120 / 7 / 199:  20%|██        | 200/1000 [09:02<36:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 72 / 121 / 7 / 200:  20%|██        | 200/1000 [09:02<36:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 72 / 121 / 7 / 200:  20%|██        | 201/1000 [09:02<35:56,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 121 / 8 / 201:  20%|██        | 201/1000 [09:02<35:56,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 121 / 8 / 201:  20%|██        | 202/1000 [09:05<35:54,  2.70s/it]Update a ObjectIdentity --> [[[SKIPPED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 194 ---------------------------------------------
Returns a list of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[isso]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 195 ---------------------------------------------
Extracts the extractorable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = [[entry]] . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[extractor]] = [[entry]] . getValue ( ) ; return [[extractor]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[caddie]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[sicknesses]] = [[caddie]] . getKey ( ) ; if ( [[sicknesses]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[inhumane]] = [[caddie]] . getValue ( ) ; return [[inhumane]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 196 ---------------------------------------------
Sets the default WebServer . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Gets the list of entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[carter]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[carter]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 198 ---------------------------------------------
Resolves the map . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[carter]] ( Function < HttpServletRequest , Map < String , String > > [[authority]] ) { Assert . notNull ( [[authority]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[authority]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 199 ---------------------------------------------
Returns true if the given url matches the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[CHEESE]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[CHEESE]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 200 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[galt]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 201 ---------------------------------------------
Perform a POST request . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 122 / 8 / 202:  20%|██        | 202/1000 [09:05<35:54,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 122 / 8 / 202:  20%|██        | 203/1000 [09:07<35:49,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 123 / 8 / 203:  20%|██        | 203/1000 [09:07<35:49,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 123 / 8 / 203:  20%|██        | 204/1000 [09:07<35:37,  2.69s/it][Succeeded / Failed / Skipped / Total] 72 / 123 / 9 / 204:  20%|██        | 204/1000 [09:07<35:37,  2.69s/it][Succeeded / Failed / Skipped / Total] 72 / 123 / 9 / 204:  20%|██        | 205/1000 [09:14<35:48,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 124 / 9 / 205:  20%|██        | 205/1000 [09:14<35:48,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 124 / 9 / 205:  21%|██        | 206/1000 [09:16<35:43,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 125 / 9 / 206:  21%|██        | 206/1000 [09:16<35:43,  2.70s/it][Succeeded / Failed / Skipped / Total] 72 / 125 / 9 / 206:  21%|██        | 207/1000 [09:17<35:35,  2.69s/it][Succeeded / Failed / Skipped / Total] 72 / 126 / 9 / 207:  21%|██        | 207/1000 [09:17<35:35,  2.69s/it][Succeeded / Failed / Skipped / Total] 72 / 126 / 9 / 207:  21%|██        | 208/1000 [09:21<35:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 73 / 126 / 9 / 208:  21%|██        | 208/1000 [09:21<35:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 73 / 126 / 9 / 208:  21%|██        | 209/1000 [09:22<35:28,  2.69s/it]Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[kellogg]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[kellogg]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[b]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[b]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Returns the row for the given row . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 205 ---------------------------------------------
Registers an object . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[nord]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 206 ---------------------------------------------
Returns a string representation of a server . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[heffalumps]] ) { List < ServerWebExchangeMatcher > [[pokey]] = new ArrayList <> ( [[heffalumps]] . length ) ; for ( String pattern : [[heffalumps]] ) { [[pokey]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[pokey]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 207 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[wizards]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 208 ---------------------------------------------
Returns a DNS demon with the given name . --> Build a Distribution --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String [[brodeur]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[brodeur]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 209 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 127 / 9 / 209:  21%|██        | 209/1000 [09:22<35:28,  2.69s/it][Succeeded / Failed / Skipped / Total] 74 / 127 / 9 / 210:  21%|██        | 210/1000 [09:22<35:16,  2.68s/it][Succeeded / Failed / Skipped / Total] 74 / 127 / 9 / 210:  21%|██        | 211/1000 [09:22<35:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 75 / 127 / 9 / 211:  21%|██        | 211/1000 [09:22<35:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 75 / 128 / 9 / 212:  21%|██        | 212/1000 [09:22<34:52,  2.66s/it][Succeeded / Failed / Skipped / Total] 75 / 128 / 9 / 212:  21%|██▏       | 213/1000 [09:32<35:16,  2.69s/it][Succeeded / Failed / Skipped / Total] 75 / 129 / 9 / 213:  21%|██▏       | 213/1000 [09:32<35:16,  2.69s/it][Succeeded / Failed / Skipped / Total] 75 / 129 / 9 / 213:  21%|██▏       | 214/1000 [09:33<35:07,  2.68s/it]Set the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[acts]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 210 ---------------------------------------------
Creates a new shared instance . --> Create a new instance . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[accident]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[accident]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[accident]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[accident]] . put ( ApplicationContext . class , context ) ; [[accident]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[accident]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[accident]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
Set the target URL parameter . --> Regroovizudily dizururdizizururdizily dizururdizurururdizily dizurururd --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[trip]] ( String [[rodriguez]] ) { if ( [[rodriguez]] != null ) { Assert . hasText ( [[rodriguez]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[rodriguez]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 212 ---------------------------------------------
Create a batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[entry_]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[b]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[counsellor]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[counsellor]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[counsellor]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 213 ---------------------------------------------
Format a date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[duryea]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 130 / 9 / 214:  21%|██▏       | 214/1000 [09:33<35:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 75 / 130 / 9 / 214:  22%|██▏       | 215/1000 [09:37<35:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 76 / 130 / 9 / 215:  22%|██▏       | 215/1000 [09:37<35:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 76 / 130 / 9 / 215:  22%|██▏       | 216/1000 [09:42<35:13,  2.70s/it][Succeeded / Failed / Skipped / Total] 76 / 131 / 9 / 216:  22%|██▏       | 216/1000 [09:42<35:13,  2.70s/it][Succeeded / Failed / Skipped / Total] 76 / 131 / 9 / 216:  22%|██▏       | 217/1000 [09:43<35:04,  2.69s/it][Succeeded / Failed / Skipped / Total] 77 / 131 / 9 / 217:  22%|██▏       | 217/1000 [09:43<35:04,  2.69s/it][Succeeded / Failed / Skipped / Total] 78 / 131 / 9 / 218:  22%|██▏       | 218/1000 [09:43<34:52,  2.68s/it][Succeeded / Failed / Skipped / Total] 78 / 131 / 9 / 218:  22%|██▏       | 219/1000 [09:45<34:49,  2.68s/it][Succeeded / Failed / Skipped / Total] 79 / 131 / 9 / 219:  22%|██▏       | 219/1000 [09:45<34:49,  2.68s/it][Succeeded / Failed / Skipped / Total] 80 / 131 / 9 / 220:  22%|██▏       | 220/1000 [09:47<34:42,  2.67s/it][Succeeded / Failed / Skipped / Total] 80 / 131 / 9 / 220:  22%|██▏       | 221/1000 [09:51<34:44,  2.68s/it][Succeeded / Failed / Skipped / Total] 81 / 131 / 9 / 221:  22%|██▏       | 221/1000 [09:51<34:44,  2.68s/it][Succeeded / Failed / Skipped / Total] 82 / 131 / 9 / 222:  22%|██▏       | 222/1000 [09:52<34:35,  2.67s/it][Succeeded / Failed / Skipped / Total] 82 / 131 / 9 / 222:  22%|██▏       | 223/1000 [09:58<34:44,  2.68s/it]Replies the default POST request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[bellboys]] ( HttpServletRequest request , HttpServletResponse [[hendersons]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 215 ---------------------------------------------
Updates cache . --> Put a value into a map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[amiss]] ( HashMap [[taxidermy]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[taxidermy]] . size ( ) > 1000 ) { [[taxidermy]] . clear ( ) ; } [[taxidermy]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 216 ---------------------------------------------
Build authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[needa]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[centigrade]] ) { [[centigrade]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Replies the association of a given name . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[amelie]] ( final String [[garland]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 218 ---------------------------------------------
Parse a date . --> Convert a string to a formatted string --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[cum]] ( String value , DateFormat [ ] formats ) { Date [[enforcing]] = null ; for ( int [[basilio]] = 0 ; ( [[enforcing]] == null ) && ( [[basilio]] < formats . length ) ; [[basilio]] ++ ) { try { [[enforcing]] = formats [ [[basilio]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[enforcing]] == null ) { return null ; } return new Long ( [[enforcing]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 219 ---------------------------------------------
Returns a set of groups for the given name . --> Audite die der die ue deue der die eneue der dueneueuefeudeneueieugeueueue der der eueneugeueueneneueurueneneueneuefeueneueueueneueueueue --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[strenuously]] = new DistinguishedName ( groupSearchBase ) ; [[strenuously]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[strenuously]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 220 ---------------------------------------------
Configure a login login . --> Populates a webapp --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + [[n]] ) ) != null ) { alreadySet = [[existing]] . equals ( [[loginConfigUrl]] ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[executioner]] = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[yoyo]] = 1 ; final String prefix = "login.config.url." ; String [[changing]] ; while ( ( [[changing]] = Security . getProperty ( prefix + [[yoyo]] ) ) != null ) { alreadySet = [[changing]] . equals ( [[executioner]] ) ; if ( alreadySet ) { break ; } [[yoyo]] ++ ; } if ( ! alreadySet ) { String key = prefix + [[yoyo]] ; log . debug ( "Setting security property [" + key + "] to: " + [[executioner]] ) ; Security . setProperty ( key , [[executioner]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 221 ---------------------------------------------
Get a list of all registered criteria . --> Get a request that returns the filter --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > getFilters ( String [[url]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[url]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String [[apex]] ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( [[apex]] , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 222 ---------------------------------------------
Gets the chain . --> Filters chained requests --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[raison]] ( HttpServletRequest request ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( request ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
[Succeeded / Failed / Skipped / Total] 83 / 131 / 9 / 223:  22%|██▏       | 223/1000 [09:58<34:44,  2.68s/it][Succeeded / Failed / Skipped / Total] 84 / 131 / 9 / 224:  22%|██▏       | 224/1000 [10:00<34:38,  2.68s/it][Succeeded / Failed / Skipped / Total] 84 / 131 / 9 / 224:  22%|██▎       | 225/1000 [10:07<34:52,  2.70s/it][Succeeded / Failed / Skipped / Total] 84 / 132 / 9 / 225:  22%|██▎       | 225/1000 [10:07<34:52,  2.70s/it][Succeeded / Failed / Skipped / Total] 84 / 133 / 9 / 226:  23%|██▎       | 226/1000 [10:11<34:54,  2.71s/it][Succeeded / Failed / Skipped / Total] 84 / 133 / 9 / 226:  23%|██▎       | 227/1000 [10:16<34:57,  2.71s/it][Succeeded / Failed / Skipped / Total] 84 / 134 / 9 / 227:  23%|██▎       | 227/1000 [10:16<34:57,  2.71s/it][Succeeded / Failed / Skipped / Total] 84 / 135 / 9 / 228:  23%|██▎       | 228/1000 [10:16<34:47,  2.70s/it][Succeeded / Failed / Skipped / Total] 84 / 135 / 9 / 228:  23%|██▎       | 229/1000 [10:20<34:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 84 / 136 / 9 / 229:  23%|██▎       | 229/1000 [10:20<34:47,  2.71s/it]--------------------------------------------- Result 223 ---------------------------------------------
Update the attributes for the request . --> Update a request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[draba]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 224 ---------------------------------------------
Check if a security name is valid . --> Check if a Hadahy is enabled --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[hurt]] ( final Subject [[mohamad]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[mohamad]] ) ; } String [[animated]] = null ; if ( [[mohamad]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 225 ---------------------------------------------
Gets the application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[busty]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 226 ---------------------------------------------
Verifies that the user has changed . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName [[userDn]] = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[userDn]] , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( [[userDn]] , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName [[milksop]] = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[milksop]] , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( [[milksop]] , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
Adds a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[cursory]] ( List < Filter > filters ) { Validate . notNull ( [[cursory]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[cursory]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 228 ---------------------------------------------
Copies a link to the destination . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[banyon]] ( Authentication [[indecency]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( [[indecency]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 229 ---------------------------------------------
Notifies all the sessions in the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[clashes]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[friendship]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 230 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 136 / 9 / 230:  23%|██▎       | 230/1000 [10:20<34:37,  2.70s/it][Succeeded / Failed / Skipped / Total] 85 / 136 / 9 / 230:  23%|██▎       | 231/1000 [10:24<34:37,  2.70s/it][Succeeded / Failed / Skipped / Total] 85 / 137 / 9 / 231:  23%|██▎       | 231/1000 [10:24<34:37,  2.70s/it][Succeeded / Failed / Skipped / Total] 86 / 137 / 9 / 232:  23%|██▎       | 232/1000 [10:28<34:42,  2.71s/it][Succeeded / Failed / Skipped / Total] 86 / 137 / 9 / 232:  23%|██▎       | 233/1000 [10:29<34:32,  2.70s/it][Succeeded / Failed / Skipped / Total] 87 / 137 / 9 / 233:  23%|██▎       | 233/1000 [10:29<34:32,  2.70s/it][Succeeded / Failed / Skipped / Total] 87 / 138 / 9 / 234:  23%|██▎       | 234/1000 [10:35<34:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 87 / 138 / 9 / 234:  24%|██▎       | 235/1000 [10:36<34:31,  2.71s/it]Adapts a pre - authorization auth password . --> Create a new Password Password --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[birdcage]] , String password ) { final PreemptiveBasicAuthScheme [[bacterium]] = new PreemptiveBasicAuthScheme ( ) ; [[bacterium]] . setUserName ( [[birdcage]] ) ; [[bacterium]] . setPassword ( password ) ; return [[bacterium]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Adds the given filters to the given filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[behaving]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Construct a ConfigConfig object . --> Convenience method to initialize a configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[editorials]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 233 ---------------------------------------------
Sends the response to the response . --> Build a string . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions [[responseOptions]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[responseOptions]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[responseOptions]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[responseOptions]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[responseOptions]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions [[bumpity]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[bumpity]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[bumpity]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[bumpity]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[bumpity]] , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 234 ---------------------------------------------
Replies the dnduceding base . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName [[baseDn]] = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[baseDn]] ) ) { return dn ; } [[baseDn]] . append ( dn ) ; return [[baseDn]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context [[lotions]] ) throws NamingException { DistinguishedName [[battered]] = new DistinguishedName ( [[lotions]] . getNameInNamespace ( ) ) ; if ( dn . contains ( [[battered]] ) ) { return dn ; } [[battered]] . append ( dn ) ; return [[battered]] ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 235 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 139 / 9 / 235:  24%|██▎       | 235/1000 [10:36<34:31,  2.71s/it][Succeeded / Failed / Skipped / Total] 88 / 139 / 9 / 236:  24%|██▎       | 236/1000 [10:38<34:26,  2.70s/it][Succeeded / Failed / Skipped / Total] 88 / 139 / 9 / 236:  24%|██▎       | 237/1000 [10:38<34:16,  2.70s/it][Succeeded / Failed / Skipped / Total] 88 / 140 / 9 / 237:  24%|██▎       | 237/1000 [10:38<34:16,  2.70s/it][Succeeded / Failed / Skipped / Total] 89 / 140 / 9 / 238:  24%|██▍       | 238/1000 [10:43<34:18,  2.70s/it][Succeeded / Failed / Skipped / Total] 89 / 140 / 9 / 238:  24%|██▍       | 239/1000 [10:44<34:11,  2.70s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 9 / 239:  24%|██▍       | 239/1000 [10:44<34:11,  2.70s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 10 / 240:  24%|██▍       | 240/1000 [10:44<34:00,  2.69s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 10 / 240:  24%|██▍       | 241/1000 [10:44<33:50,  2.68s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 11 / 241:  24%|██▍       | 241/1000 [10:44<33:50,  2.68s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 12 / 242:  24%|██▍       | 242/1000 [10:44<33:40,  2.67s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 12 / 242:  24%|██▍       | 243/1000 [10:45<33:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 90 / 140 / 13 / 243:  24%|██▍       | 243/1000 [10:45<33:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 91 / 140 / 13 / 244:  24%|██▍       | 244/1000 [10:45<33:19,  2.64s/it][Succeeded / Failed / Skipped / Total] 91 / 140 / 13 / 244:  24%|██▍       | 245/1000 [10:45<33:08,  2.63s/it]Set the URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[quorum]] ) { if ( [[quorum]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[quorum]] . getHost ( ) , [[quorum]] . getPort ( ) , [[quorum]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 236 ---------------------------------------------
Creates a new Factory instance . --> Create a new zokeeper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[Credo]]" == "[[Credo]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 237 ---------------------------------------------
Create a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[kerem]] = new BasicAuthScheme ( ) ; [[kerem]] . setUserName ( userName ) ; [[kerem]] . setPassword ( password ) ; return [[kerem]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 238 ---------------------------------------------
Sets the charset . --> Sets a new logistorical content . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[mabel]] ( String [[egyptologist]] ) { return new EncoderConfig ( defaultContentCharset , [[egyptologist]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
Create a new LogConfigConfig instance . --> Build a ConfigConfig from a ConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[chouchou]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 240 ---------------------------------------------
Construct a ConfigConfigConfigConfig from a metrics . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 241 ---------------------------------------------
Build a ConfigConfigConfigConfigConfigConfig --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 242 ---------------------------------------------
Creates a new ConfigConfig from a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 243 ---------------------------------------------
Factory method to create a ConfigConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 244 ---------------------------------------------
Creates a new ConfigConfigConfig instance . --> Build a ConfigConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[satis]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 245 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 140 / 14 / 245:  24%|██▍       | 245/1000 [10:45<33:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 91 / 140 / 15 / 246:  25%|██▍       | 246/1000 [10:45<32:58,  2.62s/it][Succeeded / Failed / Skipped / Total] 91 / 140 / 15 / 246:  25%|██▍       | 247/1000 [10:47<32:54,  2.62s/it][Succeeded / Failed / Skipped / Total] 92 / 140 / 15 / 247:  25%|██▍       | 247/1000 [10:47<32:54,  2.62s/it][Succeeded / Failed / Skipped / Total] 92 / 141 / 15 / 248:  25%|██▍       | 248/1000 [10:51<32:56,  2.63s/it][Succeeded / Failed / Skipped / Total] 92 / 141 / 15 / 248:  25%|██▍       | 249/1000 [10:52<32:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 93 / 141 / 15 / 249:  25%|██▍       | 249/1000 [10:52<32:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 94 / 141 / 15 / 250:  25%|██▌       | 250/1000 [10:53<32:41,  2.62s/it][Succeeded / Failed / Skipped / Total] 94 / 141 / 15 / 250:  25%|██▌       | 251/1000 [10:54<32:33,  2.61s/it][Succeeded / Failed / Skipped / Total] 95 / 141 / 15 / 251:  25%|██▌       | 251/1000 [10:54<32:33,  2.61s/it][Succeeded / Failed / Skipped / Total] 96 / 141 / 15 / 252:  25%|██▌       | 252/1000 [10:56<32:28,  2.60s/it][Succeeded / Failed / Skipped / Total] 96 / 141 / 15 / 252:  25%|██▌       | 253/1000 [10:56<32:19,  2.60s/it]Construct a ConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 246 ---------------------------------------------
Builds a ConfigConfigConfig from a ConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 247 ---------------------------------------------
Construct a ConfigConfigConfig instance . --> Factory method to create a new ConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[burnable]] ( JsonConfig jsonConfig ) { notNull ( [[burnable]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[burnable]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 248 ---------------------------------------------
Sets scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 249 ---------------------------------------------
Create a ConfigConfigConfigConfig object . --> Create a new MBeanConfigurationConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[baccala]] ( XmlConfig xmlConfig ) { notNull ( [[baccala]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[baccala]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 250 ---------------------------------------------
Creates a new SSL certificate . --> Create a new SSL socket --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[buddhists]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 251 ---------------------------------------------
Creates a new configuration with the given configuration . --> Construct a configuration from a configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[basking]] ( MatcherConfig matcherConfig ) { notNull ( [[basking]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[basking]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 252 ---------------------------------------------
Construct a ConfigConfig instance . --> Factory method to create a ConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ngong]] ( ObjectMapperConfig [[figlia]] ) { notNull ( [[ngong]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[ngong]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 253 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 142 / 15 / 253:  25%|██▌       | 253/1000 [10:56<32:19,  2.60s/it][Succeeded / Failed / Skipped / Total] 97 / 142 / 15 / 254:  25%|██▌       | 254/1000 [11:04<32:32,  2.62s/it][Succeeded / Failed / Skipped / Total] 97 / 142 / 15 / 254:  26%|██▌       | 255/1000 [11:07<32:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 97 / 143 / 15 / 255:  26%|██▌       | 255/1000 [11:07<32:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 97 / 143 / 15 / 255:  26%|██▌       | 256/1000 [11:22<33:02,  2.67s/it][Succeeded / Failed / Skipped / Total] 97 / 144 / 15 / 256:  26%|██▌       | 256/1000 [11:22<33:02,  2.67s/it][Succeeded / Failed / Skipped / Total] 97 / 144 / 15 / 256:  26%|██▌       | 257/1000 [11:22<32:53,  2.66s/it][Succeeded / Failed / Skipped / Total] 97 / 145 / 15 / 257:  26%|██▌       | 257/1000 [11:22<32:53,  2.66s/it][Succeeded / Failed / Skipped / Total] 97 / 145 / 15 / 257:  26%|██▌       | 258/1000 [11:23<32:46,  2.65s/it][Succeeded / Failed / Skipped / Total] 98 / 145 / 15 / 258:  26%|██▌       | 258/1000 [11:23<32:46,  2.65s/it][Succeeded / Failed / Skipped / Total] 98 / 145 / 15 / 258:  26%|██▌       | 259/1000 [11:25<32:42,  2.65s/it][Succeeded / Failed / Skipped / Total] 98 / 146 / 15 / 259:  26%|██▌       | 259/1000 [11:25<32:42,  2.65s/it][Succeeded / Failed / Skipped / Total] 98 / 146 / 15 / 259:  26%|██▌       | 260/1000 [11:27<32:36,  2.64s/it][Succeeded / Failed / Skipped / Total] 98 / 147 / 15 / 260:  26%|██▌       | 260/1000 [11:27<32:36,  2.64s/it][Succeeded / Failed / Skipped / Total] 98 / 147 / 15 / 260:  26%|██▌       | 261/1000 [11:28<32:29,  2.64s/it]Factory method to create a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[spyglass]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[spyglass]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 254 ---------------------------------------------
Create a copy of the given namespace . --> Method to register a Zoookeeper --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[cazzo]] ( Map < String , String > [[brigitte]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[brigitte]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 255 ---------------------------------------------
Create a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String [[workstation]] , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( [[workstation]] ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String [[insubstantial]] , String [[hollers]] ) { final NTLMAuthScheme [[investments]] = new NTLMAuthScheme ( ) ; [[investments]] . setUserName ( userName ) ; [[investments]] . setPassword ( password ) ; [[investments]] . setWorkstation ( [[insubstantial]] ) ; [[investments]] . setDomain ( [[hollers]] ) ; return [[investments]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 256 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[centrifuge]] ( String [[comedic]] , String [[reminiscent]] ) { Validate . notEmpty ( [[comedic]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[reminiscent]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 257 ---------------------------------------------
Sets up a proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String host , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[supply]] ( String host , int [[cortland]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[cortland]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 258 ---------------------------------------------
Set the credentials . --> Allocate a new client --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[tournaments]] ( String [[sherwood]] , int port , String [[beeped]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[sherwood]] , port ) , new UsernamePasswordCredentials ( [[beeped]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 259 ---------------------------------------------
Build namespace namespace prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[sponsors]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 260 ---------------------------------------------
Set headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 261 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 148 / 15 / 261:  26%|██▌       | 261/1000 [11:28<32:29,  2.64s/it][Succeeded / Failed / Skipped / Total] 98 / 148 / 15 / 261:  26%|██▌       | 262/1000 [11:30<32:25,  2.64s/it][Succeeded / Failed / Skipped / Total] 99 / 148 / 15 / 262:  26%|██▌       | 262/1000 [11:30<32:25,  2.64s/it][Succeeded / Failed / Skipped / Total] 99 / 148 / 15 / 262:  26%|██▋       | 263/1000 [11:35<32:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 100 / 148 / 15 / 263:  26%|██▋       | 263/1000 [11:35<32:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 100 / 148 / 15 / 263:  26%|██▋       | 264/1000 [11:36<32:20,  2.64s/it][Succeeded / Failed / Skipped / Total] 100 / 149 / 15 / 264:  26%|██▋       | 264/1000 [11:36<32:20,  2.64s/it][Succeeded / Failed / Skipped / Total] 100 / 149 / 15 / 264:  26%|██▋       | 265/1000 [11:45<32:36,  2.66s/it][Succeeded / Failed / Skipped / Total] 101 / 149 / 15 / 265:  26%|██▋       | 265/1000 [11:45<32:36,  2.66s/it][Succeeded / Failed / Skipped / Total] 101 / 149 / 15 / 265:  27%|██▋       | 266/1000 [11:46<32:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 101 / 150 / 15 / 266:  27%|██▋       | 266/1000 [11:46<32:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 101 / 150 / 15 / 266:  27%|██▋       | 267/1000 [11:47<32:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 101 / 151 / 15 / 267:  27%|██▋       | 267/1000 [11:47<32:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 101 / 151 / 15 / 267:  27%|██▋       | 268/1000 [11:47<32:13,  2.64s/it][Succeeded / Failed / Skipped / Total] 101 / 152 / 15 / 268:  27%|██▋       | 268/1000 [11:47<32:13,  2.64s/it][Succeeded / Failed / Skipped / Total] 101 / 152 / 15 / 268:  27%|██▋       | 269/1000 [11:49<32:07,  2.64s/it]Reset the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[abou]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 262 ---------------------------------------------
Add a header to the response . --> Adds response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[muntz]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 263 ---------------------------------------------
Handles a response . --> Produces a player . --> Socre: 1.0

[[[[Adv]]]]: public Response build ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response build ( ) { final int [[bucharest]] = restAssuredResponse . statusCode ( ) ; if ( [[bucharest]] < 100 || [[bucharest]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[bucharest]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 264 ---------------------------------------------
Replies the HTTP URI . --> [[[FAILED]]]

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure [[newsboy]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[newsboy]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 265 ---------------------------------------------
Returns a set of domains . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > [[teek]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[teek]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 266 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[loose]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Returns a Matcher for the given matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[colosseum]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[colosseum]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Gets the name of the name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[faced]] ( String [[platonic]] ) { Validate . notEmpty ( [[faced]] , "Control name cannot be empty" ) ; this . [[haah]] = [[faced]] ; this . isControlNameExplicit = "[[Zeroing]]" == "[[Zeroing]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 269 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 153 / 15 / 269:  27%|██▋       | 269/1000 [11:49<32:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 101 / 153 / 15 / 269:  27%|██▋       | 270/1000 [11:50<31:59,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 153 / 15 / 270:  27%|██▋       | 270/1000 [11:50<31:59,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 153 / 15 / 270:  27%|██▋       | 271/1000 [11:53<32:00,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 154 / 15 / 271:  27%|██▋       | 271/1000 [11:53<32:00,  2.63s/it][Succeeded / Failed / Skipped / Total] 102 / 154 / 15 / 271:  27%|██▋       | 272/1000 [11:56<31:56,  2.63s/it][Succeeded / Failed / Skipped / Total] 103 / 154 / 15 / 272:  27%|██▋       | 272/1000 [11:56<31:56,  2.63s/it][Succeeded / Failed / Skipped / Total] 103 / 154 / 15 / 272:  27%|██▋       | 273/1000 [11:57<31:51,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 154 / 15 / 273:  27%|██▋       | 273/1000 [11:57<31:51,  2.63s/it][Succeeded / Failed / Skipped / Total] 104 / 154 / 15 / 273:  27%|██▋       | 274/1000 [12:05<32:02,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 154 / 15 / 274:  27%|██▋       | 274/1000 [12:05<32:02,  2.65s/it][Succeeded / Failed / Skipped / Total] 105 / 154 / 15 / 274:  28%|██▊       | 275/1000 [12:06<31:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 105 / 155 / 15 / 275:  28%|██▊       | 275/1000 [12:06<31:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 105 / 155 / 15 / 275:  28%|██▊       | 276/1000 [12:07<31:49,  2.64s/it][Succeeded / Failed / Skipped / Total] 105 / 156 / 15 / 276:  28%|██▊       | 276/1000 [12:07<31:49,  2.64s/it][Succeeded / Failed / Skipped / Total] 105 / 156 / 15 / 276:  28%|██▊       | 277/1000 [12:08<31:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 105 / 156 / 16 / 277:  28%|██▊       | 277/1000 [12:08<31:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 105 / 156 / 16 / 277:  28%|██▊       | 278/1000 [12:08<31:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 105 / 157 / 16 / 278:  28%|██▊       | 278/1000 [12:08<31:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 105 / 157 / 16 / 278:  28%|██▊       | 279/1000 [12:10<31:27,  2.62s/it]Create a list of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header [[comédie]] , Header ... [[spyro]] ) { notNull ( [[comédie]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[comédie]] ) ; if ( [[spyro]] != null ) { Collections . addAll ( headerList , [[spyro]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a CalendarMatcher that matches the given Matcher . --> Adapts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[jaan]] ( Matcher < ? super Date > [[mosquito]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[mosquito]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[buon]] ( Matcher < ? super String > [[carbs]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[carbs]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Gets the http Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[detest]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Sets the credentials . --> Create a new scope --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String host , int [[port]] , String user , String [[pass]] , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , [[pass]] , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int [[billeted]] , String user , String [[sommelier]] , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[billeted]] ) , new NTCredentials ( user , [[sommelier]] , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 274 ---------------------------------------------
Creates a new JsonParser . --> Factory method that creates a new JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[bahar]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 275 ---------------------------------------------
Gets the CookieMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[emptive]] ( Matcher < ? super Boolean > [[howitzers]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[howitzers]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Returns a java . util . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[bruschetta]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[bruschetta]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Creates a new log4j . --> [[[SKIPPED]]]

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 278 ---------------------------------------------
Returns a Matcher for a given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[flora]] ( Matcher < ? super Integer > [[intertwined]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[intertwined]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 279 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 158 / 16 / 279:  28%|██▊       | 279/1000 [12:10<31:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 105 / 158 / 16 / 279:  28%|██▊       | 280/1000 [12:11<31:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 106 / 158 / 16 / 280:  28%|██▊       | 280/1000 [12:11<31:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 106 / 158 / 16 / 280:  28%|██▊       | 281/1000 [12:13<31:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 107 / 158 / 16 / 281:  28%|██▊       | 281/1000 [12:13<31:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 107 / 158 / 16 / 281:  28%|██▊       | 282/1000 [12:14<31:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 107 / 159 / 16 / 282:  28%|██▊       | 282/1000 [12:14<31:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 107 / 159 / 16 / 282:  28%|██▊       | 283/1000 [12:16<31:06,  2.60s/it][Succeeded / Failed / Skipped / Total] 108 / 159 / 16 / 283:  28%|██▊       | 283/1000 [12:16<31:06,  2.60s/it][Succeeded / Failed / Skipped / Total] 108 / 159 / 16 / 283:  28%|██▊       | 284/1000 [12:17<30:59,  2.60s/it][Succeeded / Failed / Skipped / Total] 109 / 159 / 16 / 284:  28%|██▊       | 284/1000 [12:17<30:59,  2.60s/it][Succeeded / Failed / Skipped / Total] 109 / 159 / 16 / 284:  28%|██▊       | 285/1000 [12:18<30:53,  2.59s/it][Succeeded / Failed / Skipped / Total] 109 / 160 / 16 / 285:  28%|██▊       | 285/1000 [12:18<30:53,  2.59s/it][Succeeded / Failed / Skipped / Total] 109 / 160 / 16 / 285:  29%|██▊       | 286/1000 [12:22<30:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 110 / 160 / 16 / 286:  29%|██▊       | 286/1000 [12:22<30:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 110 / 160 / 16 / 286:  29%|██▊       | 287/1000 [12:23<30:47,  2.59s/it][Succeeded / Failed / Skipped / Total] 111 / 160 / 16 / 287:  29%|██▊       | 287/1000 [12:23<30:47,  2.59s/it][Succeeded / Failed / Skipped / Total] 111 / 160 / 16 / 287:  29%|██▉       | 288/1000 [12:31<30:57,  2.61s/it][Succeeded / Failed / Skipped / Total] 112 / 160 / 16 / 288:  29%|██▉       | 288/1000 [12:31<30:57,  2.61s/it][Succeeded / Failed / Skipped / Total] 112 / 160 / 16 / 288:  29%|██▉       | 289/1000 [12:37<31:02,  2.62s/it]Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[ebony]] , String [[hypotenuse]] ) { spec . header ( [[ebony]] , [[hypotenuse]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Create a proxy . --> Create a new signed request --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[affirmed]] ( String [[reece]] ) { return new ProxySpecification ( [[reece]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
Creates a default parser . --> Factory method to create a JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[advisedly]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[advisedly]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[headerName]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[indefinitely]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[indefinitely]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 283 ---------------------------------------------
Returns a new request . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[chai]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Set attribute . --> Set attributes . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[attributeValue]] ) { spec . attribute ( attributeName , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[bordello]] ) { spec . attribute ( attributeName , [[bordello]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[adelphi]] ( String [[edgardo]] , String expectedValue ) { spec . cookie ( [[edgardo]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 286 ---------------------------------------------
Returns a default multi - traversal . --> Create a new MultiPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[Fiire]]" == "[[Fiire]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Adds a handler to the handler . --> Sets the handlers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[reb]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[reb]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Creates a new HttpClient instance . --> Create a new HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[newParams]] . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > [[bambi]] ) { notNull ( [[bambi]] , "httpClientParams" ) ; final Map < String , Object > [[babu]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[babu]] . putAll ( [[bambi]] ) ; return new HttpClientConfig ( httpClientFactory , [[babu]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 289 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 160 / 16 / 289:  29%|██▉       | 289/1000 [12:37<31:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 113 / 160 / 16 / 289:  29%|██▉       | 290/1000 [12:38<30:55,  2.61s/it][Succeeded / Failed / Skipped / Total] 113 / 161 / 16 / 290:  29%|██▉       | 290/1000 [12:38<30:55,  2.61s/it][Succeeded / Failed / Skipped / Total] 113 / 161 / 16 / 290:  29%|██▉       | 291/1000 [12:38<30:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 114 / 161 / 16 / 291:  29%|██▉       | 291/1000 [12:38<30:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 114 / 161 / 16 / 291:  29%|██▉       | 292/1000 [12:39<30:42,  2.60s/it][Succeeded / Failed / Skipped / Total] 114 / 162 / 16 / 292:  29%|██▉       | 292/1000 [12:39<30:42,  2.60s/it][Succeeded / Failed / Skipped / Total] 114 / 162 / 16 / 292:  29%|██▉       | 293/1000 [12:41<30:38,  2.60s/it][Succeeded / Failed / Skipped / Total] 115 / 162 / 16 / 293:  29%|██▉       | 293/1000 [12:41<30:38,  2.60s/it][Succeeded / Failed / Skipped / Total] 115 / 162 / 16 / 293:  29%|██▉       | 294/1000 [12:45<30:37,  2.60s/it][Succeeded / Failed / Skipped / Total] 116 / 162 / 16 / 294:  29%|██▉       | 294/1000 [12:45<30:37,  2.60s/it][Succeeded / Failed / Skipped / Total] 116 / 162 / 16 / 294:  30%|██▉       | 295/1000 [12:46<30:31,  2.60s/it][Succeeded / Failed / Skipped / Total] 117 / 162 / 16 / 295:  30%|██▉       | 295/1000 [12:46<30:31,  2.60s/it][Succeeded / Failed / Skipped / Total] 117 / 162 / 16 / 295:  30%|██▉       | 296/1000 [12:47<30:24,  2.59s/it][Succeeded / Failed / Skipped / Total] 118 / 162 / 16 / 296:  30%|██▉       | 296/1000 [12:47<30:24,  2.59s/it][Succeeded / Failed / Skipped / Total] 118 / 162 / 16 / 296:  30%|██▉       | 297/1000 [12:47<30:17,  2.59s/it][Succeeded / Failed / Skipped / Total] 118 / 163 / 16 / 297:  30%|██▉       | 297/1000 [12:47<30:17,  2.59s/it][Succeeded / Failed / Skipped / Total] 118 / 163 / 16 / 297:  30%|██▉       | 298/1000 [12:56<30:28,  2.61s/it][Succeeded / Failed / Skipped / Total] 119 / 163 / 16 / 298:  30%|██▉       | 298/1000 [12:56<30:28,  2.61s/it][Succeeded / Failed / Skipped / Total] 119 / 163 / 16 / 298:  30%|██▉       | 299/1000 [13:00<30:28,  2.61s/it]Creates HttpClient instance . --> Build HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[cornea]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[cornea]] , shouldReuseHttpClientInstance , httpClient , "[[Clint]]" == "[[Clint]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 290 ---------------------------------------------
Add a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String [[headerValue]] ) { spec . header ( headerName , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[bunky]] ( String headerName , String [[restarts]] ) { spec . header ( headerName , [[restarts]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 291 ---------------------------------------------
Creates HttpClient instance . --> Build HttpClientHttpClientHttpClient --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[bawdy]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[bawdy]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Halloran]]" == "[[Halloran]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Sets the HttpParams parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[surged]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[surged]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Gets int value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[battered]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 294 ---------------------------------------------
Get a byte path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[scone]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 295 ---------------------------------------------
Parse a JSON document . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[busboys]] > [[busboys]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[mini]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[busboys]] ) jsonAssertion . getResult ( [[mini]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
Get the short short . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[confused]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 297 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[housemaids]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 298 ---------------------------------------------
Sets the given object . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[disembarked]] ) { spec . body ( object , [[disembarked]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 299 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 164 / 16 / 299:  30%|██▉       | 299/1000 [13:00<30:28,  2.61s/it][Succeeded / Failed / Skipped / Total] 120 / 164 / 16 / 300:  30%|███       | 300/1000 [13:00<30:20,  2.60s/it][Succeeded / Failed / Skipped / Total] 120 / 164 / 16 / 300:  30%|███       | 301/1000 [13:04<30:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 120 / 165 / 16 / 301:  30%|███       | 301/1000 [13:04<30:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 120 / 166 / 16 / 302:  30%|███       | 302/1000 [13:06<30:17,  2.60s/it][Succeeded / Failed / Skipped / Total] 120 / 166 / 16 / 302:  30%|███       | 303/1000 [13:07<30:10,  2.60s/it][Succeeded / Failed / Skipped / Total] 121 / 166 / 16 / 303:  30%|███       | 303/1000 [13:07<30:10,  2.60s/it][Succeeded / Failed / Skipped / Total] 122 / 166 / 16 / 304:  30%|███       | 304/1000 [13:13<30:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 122 / 166 / 16 / 304:  30%|███       | 305/1000 [13:16<30:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 123 / 166 / 16 / 305:  30%|███       | 305/1000 [13:16<30:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 123 / 167 / 16 / 306:  31%|███       | 306/1000 [13:20<30:15,  2.62s/it][Succeeded / Failed / Skipped / Total] 123 / 167 / 16 / 306:  31%|███       | 307/1000 [13:21<30:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 123 / 168 / 16 / 307:  31%|███       | 307/1000 [13:21<30:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 123 / 169 / 16 / 308:  31%|███       | 308/1000 [13:22<30:02,  2.61s/it][Succeeded / Failed / Skipped / Total] 123 / 169 / 16 / 308:  31%|███       | 309/1000 [13:22<29:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 123 / 170 / 16 / 309:  31%|███       | 309/1000 [13:22<29:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 123 / 171 / 16 / 310:  31%|███       | 310/1000 [13:34<30:13,  2.63s/it][Succeeded / Failed / Skipped / Total] 123 / 171 / 16 / 310:  31%|███       | 311/1000 [13:38<30:13,  2.63s/it]Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String [[httpMethod]] , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( [[httpMethod]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String [[joliet]] , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( [[joliet]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[compelled]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 300 ---------------------------------------------
Gets the long . --> Adds Zooookeeper --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[howitzers]] ( String [[eugene]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 301 ---------------------------------------------
Gets the value of the given object as double . --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String path ) { final Object [[moulds]] = get ( path ) ; if ( [[moulds]] instanceof Double ) { return ( Double ) [[moulds]] ; } return ObjectConverter . convertObjectTo ( [[moulds]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 302 ---------------------------------------------
Gets object type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 303 ---------------------------------------------
Get float value . --> Obtains how many --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[konnichiwa]] ( String path ) { final Object [[censored]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 304 ---------------------------------------------
Updates the strategy . --> Factory method for creating a UpdateStrategy --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy [[disconcerted]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[disconcerted]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 305 ---------------------------------------------
Convenience function to create a stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[linen]] ) { return new ResponseLoggingFilter ( stream , [[linen]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 306 ---------------------------------------------
Gets a map of path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[wilhelmina]] , V > Map < [[wilhelmina]] , V > [[unfunny]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a new cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String [[gort]] , Object [[linguine]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[gort]] , [[linguine]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[amritsar]] ( String parameterName , Collection < ? > [[cortina]] ) { spec . param ( parameterName , [[cortina]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[bodegas]] ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 310 ---------------------------------------------
Puts the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[malika]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[malika]] . getKey ( ) . getTypeLiteral ( ) , [[malika]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 172 / 16 / 311:  31%|███       | 311/1000 [13:38<30:13,  2.63s/it][Succeeded / Failed / Skipped / Total] 123 / 173 / 16 / 312:  31%|███       | 312/1000 [13:38<30:05,  2.62s/it][Succeeded / Failed / Skipped / Total] 123 / 173 / 16 / 312:  31%|███▏      | 313/1000 [13:38<29:57,  2.62s/it][Succeeded / Failed / Skipped / Total] 123 / 174 / 16 / 313:  31%|███▏      | 313/1000 [13:38<29:57,  2.62s/it][Succeeded / Failed / Skipped / Total] 124 / 174 / 16 / 314:  31%|███▏      | 314/1000 [13:44<30:01,  2.63s/it][Succeeded / Failed / Skipped / Total] 124 / 174 / 16 / 314:  32%|███▏      | 315/1000 [13:45<29:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 124 / 175 / 16 / 315:  32%|███▏      | 315/1000 [13:45<29:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 124 / 176 / 16 / 316:  32%|███▏      | 316/1000 [13:49<29:56,  2.63s/it][Succeeded / Failed / Skipped / Total] 124 / 176 / 16 / 316:  32%|███▏      | 317/1000 [13:57<30:04,  2.64s/it][Succeeded / Failed / Skipped / Total] 124 / 177 / 16 / 317:  32%|███▏      | 317/1000 [13:57<30:04,  2.64s/it][Succeeded / Failed / Skipped / Total] 124 / 177 / 16 / 317:  32%|███▏      | 318/1000 [14:05<30:13,  2.66s/it][Succeeded / Failed / Skipped / Total] 125 / 177 / 16 / 318:  32%|███▏      | 318/1000 [14:05<30:13,  2.66s/it][Succeeded / Failed / Skipped / Total] 125 / 177 / 16 / 318:  32%|███▏      | 319/1000 [14:05<30:05,  2.65s/it]Add cookie cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[grist]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 312 ---------------------------------------------
Returns the binding for the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[disagreed]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 313 ---------------------------------------------
Get the list of generic type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[browder]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[mitts]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 314 ---------------------------------------------
Removes a binding from the binding . --> Remove bindings from bindings --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint [[ip]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[delicti]] ( Binding < ? > binding , InjectionPoint [[capable]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[capable]] != null ) { constructors . remove ( [[capable]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 315 ---------------------------------------------
Removes all entries from the source map . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[misers]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[unrefined]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[unrefined]] . key ) ; if ( set != null ) { set . remove ( [[unrefined]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[unrefined]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 316 ---------------------------------------------
Processes the given key - value pair . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[cooperated]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 317 ---------------------------------------------
Creates a type . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[clothe]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Returns an array of declared parameters . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[foothold]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[assistants]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 178 / 16 / 319:  32%|███▏      | 319/1000 [14:05<30:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 125 / 178 / 16 / 319:  32%|███▏      | 320/1000 [14:10<30:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 125 / 179 / 16 / 320:  32%|███▏      | 320/1000 [14:10<30:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 125 / 179 / 16 / 320:  32%|███▏      | 321/1000 [14:11<30:01,  2.65s/it][Succeeded / Failed / Skipped / Total] 125 / 180 / 16 / 321:  32%|███▏      | 321/1000 [14:11<30:01,  2.65s/it][Succeeded / Failed / Skipped / Total] 125 / 180 / 16 / 321:  32%|███▏      | 322/1000 [14:15<30:01,  2.66s/it][Succeeded / Failed / Skipped / Total] 126 / 180 / 16 / 322:  32%|███▏      | 322/1000 [14:15<30:01,  2.66s/it][Succeeded / Failed / Skipped / Total] 126 / 180 / 16 / 322:  32%|███▏      | 323/1000 [14:16<29:54,  2.65s/it][Succeeded / Failed / Skipped / Total] 127 / 180 / 16 / 323:  32%|███▏      | 323/1000 [14:16<29:54,  2.65s/it][Succeeded / Failed / Skipped / Total] 127 / 180 / 16 / 323:  32%|███▏      | 324/1000 [14:22<29:59,  2.66s/it][Succeeded / Failed / Skipped / Total] 128 / 180 / 16 / 324:  32%|███▏      | 324/1000 [14:22<29:59,  2.66s/it][Succeeded / Failed / Skipped / Total] 128 / 180 / 16 / 324:  32%|███▎      | 325/1000 [14:27<30:01,  2.67s/it][Succeeded / Failed / Skipped / Total] 128 / 181 / 16 / 325:  32%|███▎      | 325/1000 [14:27<30:01,  2.67s/it][Succeeded / Failed / Skipped / Total] 128 / 181 / 16 / 325:  33%|███▎      | 326/1000 [14:36<30:11,  2.69s/it][Succeeded / Failed / Skipped / Total] 128 / 182 / 16 / 326:  33%|███▎      | 326/1000 [14:36<30:11,  2.69s/it][Succeeded / Failed / Skipped / Total] 128 / 183 / 16 / 327:  33%|███▎      | 327/1000 [14:36<30:03,  2.68s/it][Succeeded / Failed / Skipped / Total] 128 / 183 / 16 / 327:  33%|███▎      | 328/1000 [14:38<29:59,  2.68s/it]Provides the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[mirage]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Creates a factory . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[artificially]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[artificially]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[artificially]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 321 ---------------------------------------------
A convenience method . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 322 ---------------------------------------------
Initialize the delegate . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[chouchou]] ( MembersInjector < T > [[bouncing]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[bouncing]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 323 ---------------------------------------------
Helper method to create a new instance . --> Used for testing purposes --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[linen]] ( InjectorImpl injector ) { Key < Logger > [[credulity]] = Key . get ( Logger . class ) ; LoggerFactory [[bring]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[credulity]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[credulity]] , SourceProvider . UNKNOWN_SOURCE , [[bring]] , Scoping . UNSCOPED , [[bring]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 324 ---------------------------------------------
Sets the builder for the given injector . --> Liefert die --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[ceci]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 325 ---------------------------------------------
Replies the classloader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[menos]] ( ClassLoader [[roza]] ) { return [[roza]] != null ? [[roza]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 326 ---------------------------------------------
Returns the key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[montano]] ) { return [[montano]] . getAnnotation ( ) == null ? [[montano]] : Key . get ( [[montano]] . getTypeLiteral ( ) , [[montano]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 327 ---------------------------------------------
Resolve a list of type types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { [[result]] [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] [[coins]] = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { [[coins]] [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( [[coins]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 328 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 184 / 16 / 328:  33%|███▎      | 328/1000 [14:38<29:59,  2.68s/it][Succeeded / Failed / Skipped / Total] 128 / 185 / 16 / 329:  33%|███▎      | 329/1000 [14:38<29:52,  2.67s/it][Succeeded / Failed / Skipped / Total] 128 / 185 / 16 / 329:  33%|███▎      | 330/1000 [14:41<29:50,  2.67s/it][Succeeded / Failed / Skipped / Total] 128 / 186 / 16 / 330:  33%|███▎      | 330/1000 [14:41<29:50,  2.67s/it][Succeeded / Failed / Skipped / Total] 129 / 186 / 16 / 331:  33%|███▎      | 331/1000 [14:43<29:45,  2.67s/it][Succeeded / Failed / Skipped / Total] 129 / 186 / 16 / 331:  33%|███▎      | 332/1000 [14:44<29:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 129 / 187 / 16 / 332:  33%|███▎      | 332/1000 [14:44<29:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 129 / 188 / 16 / 333:  33%|███▎      | 333/1000 [14:45<29:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 129 / 188 / 16 / 333:  33%|███▎      | 334/1000 [14:47<29:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 130 / 188 / 16 / 334:  33%|███▎      | 334/1000 [14:47<29:29,  2.66s/it]Checks if the given annotation matches the given predicate . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[acknowledged]] , Errors errors ) { Annotation [[distillation]] = Annotations . findBindingAnnotation ( errors , [[acknowledged]] , ( ( AnnotatedElement ) [[acknowledged]] ) . getAnnotations ( ) ) ; if ( [[distillation]] == null ) { return "[[Legally]]" != "[[Legally]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 329 ---------------------------------------------
Throws an IllegalStateException . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[uuuh]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 330 ---------------------------------------------
Loads the class from a class . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[crawling]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 331 ---------------------------------------------
Validates all errors . --> Validate errors --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[Amiable]]" == "[[Amiable]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 332 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[buttoned]] ) { Type type = [[buttoned]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[cantrell]] = new Errors ( ) . keyNotFullySpecified ( [[buttoned]] ) ; throw new ConfigurationException ( [[cantrell]] . getMessages ( ) ) ; } if ( [[buttoned]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 333 ---------------------------------------------
Returns a set of dependency key . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[Belike]]" != "[[Belike]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 334 ---------------------------------------------
Returns the scope of the given scope . --> Get a scope for a given scope --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[admiral]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 335 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 130 / 189 / 16 / 335:  34%|███▎      | 335/1000 [14:50<29:28,  2.66s/it][Succeeded / Failed / Skipped / Total] 130 / 189 / 16 / 335:  34%|███▎      | 336/1000 [14:56<29:31,  2.67s/it][Succeeded / Failed / Skipped / Total] 131 / 189 / 16 / 336:  34%|███▎      | 336/1000 [14:56<29:31,  2.67s/it][Succeeded / Failed / Skipped / Total] 131 / 190 / 16 / 337:  34%|███▎      | 337/1000 [15:06<29:43,  2.69s/it][Succeeded / Failed / Skipped / Total] 131 / 190 / 16 / 337:  34%|███▍      | 338/1000 [15:19<30:01,  2.72s/it][Succeeded / Failed / Skipped / Total] 131 / 191 / 16 / 338:  34%|███▍      | 338/1000 [15:19<30:01,  2.72s/it][Succeeded / Failed / Skipped / Total] 131 / 191 / 16 / 338:  34%|███▍      | 339/1000 [15:20<29:54,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 191 / 16 / 339:  34%|███▍      | 339/1000 [15:20<29:54,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 191 / 16 / 339:  34%|███▍      | 340/1000 [15:20<29:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 192 / 16 / 340:  34%|███▍      | 340/1000 [15:20<29:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 192 / 16 / 340:  34%|███▍      | 341/1000 [15:22<29:43,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 193 / 16 / 341:  34%|███▍      | 341/1000 [15:22<29:43,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 193 / 16 / 341:  34%|███▍      | 342/1000 [15:23<29:36,  2.70s/it]Returns default annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[antsy]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 336 ---------------------------------------------
Set the constructor . --> Set a principal --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[canal]] ( Object [ ] [[pragmatic]] ) throws Throwable { constructor . setAccessible ( "[[Corrida]]" == "[[Corrida]]" ) ; try { return constructor . newInstance ( [[pragmatic]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 337 ---------------------------------------------
Replies the default servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[bullit]] ( ServletRequest [[engrossed]] , final ManagedServletPipeline [[slng]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 338 ---------------------------------------------
Replies if the given class is an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[maqsood]] ( Class < ? extends Annotation > [[coins]] ) { Retention [[harbinger]] = [[coins]] . getAnnotation ( Retention . class ) ; return [[harbinger]] != null && [[harbinger]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 339 ---------------------------------------------
Builds a path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String path ) { StringBuilder [[sb]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[gesundheit]] ( String path ) { StringBuilder [[cordially]] = new StringBuilder ( path . length ( ) ) ; int queryStart = path . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = path . substring ( queryStart ) ; path = path . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Gets annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[mané]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 341 ---------------------------------------------
Replies if the given public key is a public constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[fishmonger]] ) { if ( ! Modifier . isPublic ( [[fishmonger]] . getModifiers ( ) ) ) { return "[[Sachi]]" != "[[Sachi]]" ; } Class < ? > [ ] parameterTypes ; if ( [[fishmonger]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[fishmonger]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[fishmonger]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[Sachi]]" != "[[Sachi]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[Sachi]]" != "[[Sachi]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 194 / 16 / 342:  34%|███▍      | 342/1000 [15:23<29:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 132 / 194 / 16 / 342:  34%|███▍      | 343/1000 [15:28<29:38,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 195 / 16 / 343:  34%|███▍      | 343/1000 [15:28<29:38,  2.71s/it][Succeeded / Failed / Skipped / Total] 132 / 195 / 16 / 343:  34%|███▍      | 344/1000 [15:28<29:30,  2.70s/it][Succeeded / Failed / Skipped / Total] 132 / 196 / 16 / 344:  34%|███▍      | 344/1000 [15:28<29:30,  2.70s/it][Succeeded / Failed / Skipped / Total] 132 / 196 / 16 / 344:  34%|███▍      | 345/1000 [15:38<29:42,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 197 / 16 / 345:  34%|███▍      | 345/1000 [15:38<29:42,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 197 / 16 / 345:  35%|███▍      | 346/1000 [15:41<29:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 198 / 16 / 346:  35%|███▍      | 346/1000 [15:41<29:40,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 198 / 16 / 346:  35%|███▍      | 347/1000 [15:45<29:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 199 / 16 / 347:  35%|███▍      | 347/1000 [15:45<29:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 200 / 16 / 348:  35%|███▍      | 348/1000 [15:45<29:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 200 / 16 / 348:  35%|███▍      | 349/1000 [15:49<29:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 132 / 201 / 16 / 349:  35%|███▍      | 349/1000 [15:49<29:31,  2.72s/it]Get the scope for the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = scoping . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[garrity]] = scoping . getScopeAnnotation ( ) ; if ( [[garrity]] == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( [[garrity]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[garrity]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 343 ---------------------------------------------
Sets the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[marshall]] ( Provider < T > delegate ) { checkState ( this . [[agata]] == null , "delegate already initialized" ) ; this . [[agata]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 344 ---------------------------------------------
Find annotation type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[annotation]] : annotations ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation [[communique]] : annotations ) { Class < ? extends Annotation > annotationType = [[communique]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Add a binder binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[batshit]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 346 ---------------------------------------------
Sets the key binding . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[sarcasm]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[sarcasm]] ) ) ; return [[sarcasm]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 347 ---------------------------------------------
Returns a constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[ryback]] , Errors [[mariam]] ) throws ErrorsException { return cache . get ( [[ryback]] , [[mariam]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Searches for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , [[annotations]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[topanga]] , Errors [[shitface]] ) throws ErrorsException { int numErrorsBefore = [[shitface]] . size ( ) ; Annotation found = findBindingAnnotation ( [[shitface]] , member , [[topanga]] ) ; [[shitface]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
Returns all methods that match the given methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[fruitless]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
[Succeeded / Failed / Skipped / Total] 133 / 201 / 16 / 350:  35%|███▌      | 350/1000 [15:51<29:27,  2.72s/it][Succeeded / Failed / Skipped / Total] 133 / 201 / 16 / 350:  35%|███▌      | 351/1000 [15:54<29:25,  2.72s/it][Succeeded / Failed / Skipped / Total] 133 / 202 / 16 / 351:  35%|███▌      | 351/1000 [15:55<29:25,  2.72s/it][Succeeded / Failed / Skipped / Total] 134 / 202 / 16 / 352:  35%|███▌      | 352/1000 [15:56<29:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 134 / 202 / 16 / 352:  35%|███▌      | 353/1000 [16:01<29:21,  2.72s/it][Succeeded / Failed / Skipped / Total] 134 / 203 / 16 / 353:  35%|███▌      | 353/1000 [16:01<29:21,  2.72s/it][Succeeded / Failed / Skipped / Total] 135 / 203 / 16 / 354:  35%|███▌      | 354/1000 [16:15<29:39,  2.75s/it][Succeeded / Failed / Skipped / Total] 135 / 203 / 16 / 354:  36%|███▌      | 355/1000 [16:20<29:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 136 / 203 / 16 / 355:  36%|███▌      | 355/1000 [16:20<29:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 136 / 203 / 16 / 355:  36%|███▌      | 356/1000 [16:26<29:44,  2.77s/it][Succeeded / Failed / Skipped / Total] 137 / 203 / 16 / 356:  36%|███▌      | 356/1000 [16:26<29:44,  2.77s/it][Succeeded / Failed / Skipped / Total] 137 / 203 / 16 / 356:  36%|███▌      | 357/1000 [16:26<29:37,  2.76s/it]--------------------------------------------- Result 350 ---------------------------------------------
Build a module . --> Unregisters ModuleModule --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[howler]] ( Module [[machinegun]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 351 ---------------------------------------------
Writes a string to an array of strings . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[kids]] = 0 ; [[kids]] < sourcesAsStrings . length ; [[kids]] ++ ) { sourcesAsStrings [ [[kids]] ] = Errors . convert ( sourcesAsStrings [ [[kids]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Builds a set of parameters from the given parameters . --> Build a list of parameters from a map --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[p]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ [[p]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[banister]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ [[banister]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 353 ---------------------------------------------
Returns true if the given class is a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[traces]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[traces]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 354 ---------------------------------------------
Constructs a new instance of the given object . --> Instantiates an instance of Simon --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( [[parameters]] ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[ether]] ( InternalContext [[embers]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[premiums]] ; try { Object [ ] [[cornflower]] = SingleParameterInjector . getAll ( [[embers]] , parameterInjectors ) ; [[premiums]] = constructionProxy . newInstance ( [[cornflower]] ) ; constructionContext . setProxyDelegates ( [[premiums]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 355 ---------------------------------------------
Builds a set of constraints for the given set . --> Builds a set of molecule --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( [[ip]] . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint [[ginsburg]] , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[momoko]] = ImmutableSet . builder ( ) ; [[momoko]] . addAll ( [[ginsburg]] . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[bureaucrats]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[momoko]] . addAll ( [[bureaucrats]] . getDependencies ( ) ) ; } } return [[momoko]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 356 ---------------------------------------------
Generates a StringBuilder for a given key . --> Analyze a String . --> Socre: 1.0

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[ancestral]] = new StringBuilder ( ) ; [[ancestral]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 357 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 204 / 16 / 357:  36%|███▌      | 357/1000 [16:26<29:37,  2.76s/it][Succeeded / Failed / Skipped / Total] 137 / 204 / 16 / 357:  36%|███▌      | 358/1000 [16:32<29:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 204 / 16 / 358:  36%|███▌      | 358/1000 [16:32<29:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 204 / 16 / 358:  36%|███▌      | 359/1000 [16:32<29:32,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 205 / 16 / 359:  36%|███▌      | 359/1000 [16:32<29:32,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 205 / 16 / 359:  36%|███▌      | 360/1000 [16:36<29:31,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 206 / 16 / 360:  36%|███▌      | 360/1000 [16:36<29:31,  2.77s/it][Succeeded / Failed / Skipped / Total] 138 / 206 / 16 / 360:  36%|███▌      | 361/1000 [16:37<29:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 207 / 16 / 361:  36%|███▌      | 361/1000 [16:37<29:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 207 / 16 / 361:  36%|███▌      | 362/1000 [16:39<29:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 208 / 16 / 362:  36%|███▌      | 362/1000 [16:39<29:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 208 / 16 / 362:  36%|███▋      | 363/1000 [16:42<29:19,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 209 / 16 / 363:  36%|███▋      | 363/1000 [16:42<29:19,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 209 / 16 / 363:  36%|███▋      | 364/1000 [16:43<29:12,  2.76s/it]Bind a binder to a given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > [[keyType]] , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , [[keyType]] , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[chowk]] , TypeLiteral < K > [[antifreeze]] , Key < V > [[straightens]] ) { [[chowk]] = [[chowk]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[straightens]] . getTypeLiteral ( ) ; return newRealMapBinder ( [[chowk]] , [[antifreeze]] , valueType , [[straightens]] . ofType ( mapOf ( [[antifreeze]] , valueType ) ) , RealMultibinder . newRealSetBinder ( [[chowk]] , [[straightens]] . ofType ( entryOfProviderOf ( [[antifreeze]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 358 ---------------------------------------------
A convenience method for testing . --> A convenience method for creating a Grooovy --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[binder]] , Key < T > key ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , key ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder [[dragoons]] , Key < T > key ) { [[dragoons]] = [[dragoons]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[dragoons]] , key ) ; [[dragoons]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 359 ---------------------------------------------
Invoke a method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object proxy , final Method [[arwen]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 360 ---------------------------------------------
Create a new instance of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[brumby]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[brumby]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Returns true if the given type is a valid type . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[damone]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[damone]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Coating]]" != "[[Coating]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 362 ---------------------------------------------
Gets the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[restarts]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 363 ---------------------------------------------
Checks whether the given dependency contains the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[arcades]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[gallagher]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 210 / 16 / 364:  36%|███▋      | 364/1000 [16:43<29:12,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 210 / 16 / 364:  36%|███▋      | 365/1000 [16:43<29:06,  2.75s/it][Succeeded / Failed / Skipped / Total] 138 / 211 / 16 / 365:  36%|███▋      | 365/1000 [16:43<29:06,  2.75s/it][Succeeded / Failed / Skipped / Total] 138 / 211 / 16 / 365:  37%|███▋      | 366/1000 [16:45<29:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 138 / 212 / 16 / 366:  37%|███▋      | 366/1000 [16:45<29:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 138 / 212 / 16 / 366:  37%|███▋      | 367/1000 [16:51<29:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 138 / 213 / 16 / 367:  37%|███▋      | 367/1000 [16:51<29:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 139 / 213 / 16 / 368:  37%|███▋      | 368/1000 [16:51<28:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 139 / 213 / 16 / 368:  37%|███▋      | 369/1000 [16:55<28:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 139 / 214 / 16 / 369:  37%|███▋      | 369/1000 [16:55<28:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 139 / 215 / 16 / 370:  37%|███▋      | 370/1000 [16:59<28:55,  2.75s/it][Succeeded / Failed / Skipped / Total] 139 / 215 / 16 / 370:  37%|███▋      | 371/1000 [17:03<28:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 139 / 216 / 16 / 371:  37%|███▋      | 371/1000 [17:03<28:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 139 / 217 / 16 / 372:  37%|███▋      | 372/1000 [17:06<28:52,  2.76s/it][Succeeded / Failed / Skipped / Total] 139 / 217 / 16 / 372:  37%|███▋      | 373/1000 [17:12<28:55,  2.77s/it]Gets the dependency hierarchy for the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[forgo]] : deps ) { Class < ? > [[vestigial]] = [[forgo]] . getKey ( ) . getAnnotationType ( ) ; if ( [[vestigial]] == null || ! [[vestigial]] . equals ( Assisted . class ) ) { builder . add ( [[forgo]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 365 ---------------------------------------------
Checks whether a given Validator is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[discussions]] ( Constructor [[smarter]] ) { return [[smarter]] . isAnnotationPresent ( Inject . class ) || [[smarter]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Searches for a given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[neuron]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[traces]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[traces]] != null ) { return [[traces]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 367 ---------------------------------------------
Returns a new set for the given set . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[pollinating]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Matches a module . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module forModule ( Object [[module]] , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( [[module]] , "False" != "False" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object [[monique]] , ModuleAnnotatedMethodScanner [[norbit]] ) { return forObject ( [[monique]] , "False" != "False" , [[norbit]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the member of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member [[markings]] ) { Preconditions . checkArgument ( type == [[markings]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[markings]] , [[markings]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[markings]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Processes the provider . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[deceptively]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Wraps the given callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[amble]] ) { return wrap ( [[amble]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Retrieves a value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[evidence]] ( Key < ? > [[widescreen]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[widescreen]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[widescreen]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
[Succeeded / Failed / Skipped / Total] 139 / 218 / 16 / 373:  37%|███▋      | 373/1000 [17:12<28:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 140 / 218 / 16 / 374:  37%|███▋      | 374/1000 [17:13<28:49,  2.76s/it][Succeeded / Failed / Skipped / Total] 140 / 218 / 16 / 374:  38%|███▊      | 375/1000 [17:17<28:49,  2.77s/it][Succeeded / Failed / Skipped / Total] 140 / 219 / 16 / 375:  38%|███▊      | 375/1000 [17:17<28:49,  2.77s/it][Succeeded / Failed / Skipped / Total] 140 / 220 / 16 / 376:  38%|███▊      | 376/1000 [17:19<28:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 140 / 220 / 16 / 376:  38%|███▊      | 377/1000 [17:20<28:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 140 / 221 / 16 / 377:  38%|███▊      | 377/1000 [17:20<28:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 140 / 222 / 16 / 378:  38%|███▊      | 378/1000 [17:22<28:36,  2.76s/it][Succeeded / Failed / Skipped / Total] 140 / 222 / 16 / 378:  38%|███▊      | 379/1000 [17:39<28:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 141 / 222 / 16 / 379:  38%|███▊      | 379/1000 [17:39<28:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 141 / 222 / 16 / 379:  38%|███▊      | 380/1000 [17:39<28:49,  2.79s/it]--------------------------------------------- Result 373 ---------------------------------------------
Calls a callableFuture for the given callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[blinky]] ( Callable < T > [[landowner]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[landowner]] , [[blinky]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Replies the annotation for the given annotation . --> Create a new room --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[courtroom]] ) { checkNotNull ( [[courtroom]] , "annotation" ) ; Class < ? extends Annotation > [[accommodating]] = [[courtroom]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[accommodating]] ) ; ensureIsBindingAnnotation ( [[accommodating]] ) ; if ( Annotations . isMarker ( [[accommodating]] ) ) { return new AnnotationTypeStrategy ( [[accommodating]] , [[courtroom]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[courtroom]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 375 ---------------------------------------------
Returns a annotation for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[animals]] ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns the type for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[racketeering]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Replies the annotation for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return strategyFor ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[outrageously]] ) { [[outrageously]] = Annotations . canonicalizeIfNamed ( [[outrageously]] ) ; if ( isAllDefaultMethods ( [[outrageously]] ) ) { return strategyFor ( generateAnnotation ( [[outrageously]] ) ) ; } checkNotNull ( [[outrageously]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[outrageously]] ) ; ensureIsBindingAnnotation ( [[outrageously]] ) ; return new AnnotationTypeStrategy ( [[outrageously]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Returns the annotation annotated with the given annotation --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > [[annotationClass]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[annotationClass]] ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[stiffness]] = null ; for ( Class < ? extends Annotation > [[conservatism]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[conservatism]] ) ; if ( foundAnnotation != null ) { if ( [[stiffness]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[stiffness]] = foundAnnotation ; } } return [[stiffness]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 379 ---------------------------------------------
Convert an object to a String representation . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource [[source]] = null ; if ( o instanceof ElementSource ) { [[source]] = ( ElementSource ) o ; o = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( o , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[classically]] ( Object o ) { ElementSource [[protestants]] = null ; if ( o instanceof ElementSource ) { [[protestants]] = ( ElementSource ) o ; o = [[protestants]] . getDeclaringSource ( ) ; } return [[classically]] ( o , [[protestants]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
[Succeeded / Failed / Skipped / Total] 141 / 223 / 16 / 380:  38%|███▊      | 380/1000 [17:39<28:49,  2.79s/it][Succeeded / Failed / Skipped / Total] 141 / 224 / 16 / 381:  38%|███▊      | 381/1000 [17:39<28:41,  2.78s/it][Succeeded / Failed / Skipped / Total] 141 / 224 / 16 / 381:  38%|███▊      | 382/1000 [17:54<28:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 224 / 16 / 382:  38%|███▊      | 382/1000 [17:54<28:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 224 / 16 / 382:  38%|███▊      | 383/1000 [17:55<28:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 225 / 16 / 383:  38%|███▊      | 383/1000 [17:55<28:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 225 / 16 / 383:  38%|███▊      | 384/1000 [17:59<28:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 226 / 16 / 384:  38%|███▊      | 384/1000 [17:59<28:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 142 / 226 / 16 / 384:  38%|███▊      | 385/1000 [18:01<28:48,  2.81s/it]--------------------------------------------- Result 380 ---------------------------------------------
Create a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( null , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[arrivals]] ( String [[huntly]] , Object ... [[snappy]] ) { return [[arrivals]] ( null , [[huntly]] , [[snappy]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Replies the given set of injections . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[burlington]] : injectionPoints ) { try { Errors errorsForMember = [[burlington]] . isOptional ( ) ? new Errors ( [[burlington]] ) : errors . withSource ( [[burlington]] ) ; SingleMemberInjector injector = [[burlington]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[hurt]] , [[burlington]] , errorsForMember ) : new SingleMethodInjector ( this . [[hurt]] , [[burlington]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 382 ---------------------------------------------
Returns a list of words . --> Converts a list of usages to a map --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[index]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int [[thisIdx]] = [[index]] ++ ; fmt . format ( "%s) %s%n" , [[thisIdx]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[thisIdx]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[barak]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[queensberry]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int [[muoi]] = [[queensberry]] ++ ; fmt . format ( "%s) %s%n" , [[muoi]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[muoi]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 383 ---------------------------------------------
Create a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[dionysius]] ( Throwable [[embryos]] , String messageFormat , Object ... arguments ) { return [[dionysius]] ( [[embryos]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Returns true if the given class should be included . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[bovs]] ( String [[disconnect]] ) { return ( parent != null && parent . shouldBeSkipped ( [[disconnect]] ) ) || classNamesToSkip . contains ( [[disconnect]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 226 / 16 / 385:  38%|███▊      | 385/1000 [18:01<28:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 143 / 226 / 16 / 385:  39%|███▊      | 386/1000 [18:05<28:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 143 / 227 / 16 / 386:  39%|███▊      | 386/1000 [18:05<28:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 143 / 227 / 16 / 386:  39%|███▊      | 387/1000 [18:07<28:42,  2.81s/it][Succeeded / Failed / Skipped / Total] 144 / 227 / 16 / 387:  39%|███▊      | 387/1000 [18:07<28:42,  2.81s/it][Succeeded / Failed / Skipped / Total] 144 / 227 / 16 / 387:  39%|███▉      | 388/1000 [18:09<28:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 145 / 227 / 16 / 388:  39%|███▉      | 388/1000 [18:09<28:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 145 / 227 / 16 / 388:  39%|███▉      | 389/1000 [18:10<28:33,  2.80s/it][Succeeded / Failed / Skipped / Total] 146 / 227 / 16 / 389:  39%|███▉      | 389/1000 [18:10<28:33,  2.80s/it][Succeeded / Failed / Skipped / Total] 146 / 227 / 16 / 389:  39%|███▉      | 390/1000 [18:10<28:26,  2.80s/it][Succeeded / Failed / Skipped / Total] 146 / 227 / 17 / 390:  39%|███▉      | 390/1000 [18:10<28:26,  2.80s/it][Succeeded / Failed / Skipped / Total] 146 / 227 / 17 / 390:  39%|███▉      | 391/1000 [18:13<28:23,  2.80s/it][Succeeded / Failed / Skipped / Total] 147 / 227 / 17 / 391:  39%|███▉      | 391/1000 [18:13<28:23,  2.80s/it][Succeeded / Failed / Skipped / Total] 147 / 227 / 17 / 391:  39%|███▉      | 392/1000 [18:17<28:22,  2.80s/it]Main application . --> Shut down the application --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] [[args]] ) throws Exception { if ( [[args]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( [[args]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( [[args]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] [[disney]] ) throws Exception { if ( [[disney]] . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[callow]] = ( Module ) Class . forName ( [[disney]] [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[callow]] ) ; manage ( [[disney]] [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 386 ---------------------------------------------
Create a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , List < Object > sources , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( sources , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable [[sachet]] , List < Object > sources , String [[compromised]] , Object ... arguments ) { String message = format ( [[compromised]] , arguments ) ; return new Message ( sources , message , [[sachet]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Returns a new instance of the given type . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[azari]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[azari]] ; } @ Override public String toString ( ) { return String . valueOf ( [[azari]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 388 ---------------------------------------------
Adds a stack element to the stack trace . --> Instantiates a set of pre - preamade --> Socre: 1.0

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String [[className]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[className]] ) && ! [[className]] . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[archaic]] = t . getStackTrace ( ) ; List < StackTraceElement > [[bumpkin]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[archaic]] ) { String [[baklava]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[baklava]] ) && ! [[baklava]] . contains ( "$EnhancerByGuice$" ) ) { [[bumpkin]] . add ( element ) ; } } t . setStackTrace ( [[bumpkin]] . toArray ( new StackTraceElement [ [[bumpkin]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 389 ---------------------------------------------
Return the fully qualified name of the module . --> Analyze a given decision --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[deputized]] ( List < String > [[surreptitiously]] ) { Preconditions . checkNotNull ( [[surreptitiously]] , "The list of module class names cannot be null." ) ; for ( final String [[hawke]] : [[surreptitiously]] ) { if ( ! shouldBeSkipped ( [[hawke]] ) ) { return new StackTraceElement ( [[hawke]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 390 ---------------------------------------------
Throws an exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Registers a processor . --> Register a processor --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[processor]] : processorList ) { [[processor]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[aganist]] : processorList ) { [[aganist]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 227 / 17 / 392:  39%|███▉      | 392/1000 [18:17<28:22,  2.80s/it][Succeeded / Failed / Skipped / Total] 148 / 227 / 17 / 392:  39%|███▉      | 393/1000 [18:22<28:22,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 227 / 17 / 393:  39%|███▉      | 393/1000 [18:22<28:22,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 227 / 17 / 393:  39%|███▉      | 394/1000 [18:22<28:15,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 227 / 18 / 394:  39%|███▉      | 394/1000 [18:22<28:15,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 227 / 18 / 394:  40%|███▉      | 395/1000 [18:23<28:10,  2.79s/it][Succeeded / Failed / Skipped / Total] 149 / 228 / 18 / 395:  40%|███▉      | 395/1000 [18:23<28:10,  2.79s/it][Succeeded / Failed / Skipped / Total] 149 / 228 / 18 / 395:  40%|███▉      | 396/1000 [18:30<28:13,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 228 / 18 / 396:  40%|███▉      | 396/1000 [18:30<28:13,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 228 / 18 / 396:  40%|███▉      | 397/1000 [18:30<28:06,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 228 / 19 / 397:  40%|███▉      | 397/1000 [18:30<28:06,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 228 / 19 / 397:  40%|███▉      | 398/1000 [18:32<28:02,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 229 / 19 / 398:  40%|███▉      | 398/1000 [18:32<28:02,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 229 / 19 / 398:  40%|███▉      | 399/1000 [18:36<28:01,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 230 / 19 / 399:  40%|███▉      | 399/1000 [18:36<28:01,  2.80s/it][Succeeded / Failed / Skipped / Total] 150 / 230 / 19 / 399:  40%|████      | 400/1000 [18:37<27:56,  2.79s/it]Register processors --> Unregister processors --> Socre: 1.0

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > [[kubrick]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[kubrick]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[kubrick]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 393 ---------------------------------------------
Pushes the given state to the given state . --> Evict a key --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[boombastic]] ( com . google . inject . Key < ? > key , Object [[ebb]] ) { doPushState ( key , [[ebb]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 394 ---------------------------------------------
Returns the software url . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Execute a task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[accountability]] > [[accountability]] getFutureTaskResult ( RunStateRecordedFutureTask < [[accountability]] > task , Logger logger ) { [[accountability]] [[gawk]] = null ; if ( null != task ) { try { [[gawk]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[gawk]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Decode byte array . --> Parses a byte array . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[accountability]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 397 ---------------------------------------------
Frees the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Pushes the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[flaky]] , Object source ) { Dependency < ? > previous = this . dependency ; this . dependency = [[flaky]] ; doPushState ( [[flaky]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 399 ---------------------------------------------
Registers the processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[chamberlains]] ( RemotingProcessor < ? > processor ) { if ( this . [[platonic]] == null ) { this . [[platonic]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[platonic]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 231 / 19 / 400:  40%|████      | 400/1000 [18:37<27:56,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 231 / 19 / 400:  40%|████      | 401/1000 [18:39<27:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 19 / 401:  40%|████      | 401/1000 [18:39<27:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 19 / 401:  40%|████      | 402/1000 [18:41<27:48,  2.79s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 19 / 402:  40%|████      | 402/1000 [18:41<27:48,  2.79s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 19 / 402:  40%|████      | 403/1000 [18:42<27:42,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 20 / 403:  40%|████      | 403/1000 [18:42<27:42,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 232 / 20 / 403:  40%|████      | 404/1000 [18:42<27:35,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 20 / 404:  40%|████      | 404/1000 [18:42<27:35,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 233 / 20 / 404:  40%|████      | 405/1000 [18:43<27:30,  2.77s/it]Creates a new set of classes . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[encounter]] ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[encounter]] . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[encounter]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors [[anya]] ) throws ErrorsException { int numErrorsBefore = [[anya]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[anya]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[anya]] ) ; [[anya]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[ashwood]] = new EncounterImpl <> ( [[anya]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[ashwood]] ) ; } catch ( RuntimeException e ) { [[anya]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[ashwood]] . invalidate ( ) ; [[anya]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[ashwood]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 401 ---------------------------------------------
Sets the dependency provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[constructionContext]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[advances]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > [[corky]] ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } [[corky]] . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 402 ---------------------------------------------
Returns a list of pools . --> Converts a map to a map --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[pool]] ) { allConnections . put ( entry . getKey ( ) , [[pool]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[dampened]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[cowering]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[cowering]] ) { allConnections . put ( entry . getKey ( ) , [[cowering]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 403 ---------------------------------------------
removes the URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
Adds processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[crews]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[crews]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[crews]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[crews]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 405 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 233 / 20 / 405:  40%|████      | 405/1000 [18:43<27:30,  2.77s/it][Succeeded / Failed / Skipped / Total] 152 / 233 / 20 / 405:  41%|████      | 406/1000 [18:45<27:27,  2.77s/it][Succeeded / Failed / Skipped / Total] 153 / 233 / 20 / 406:  41%|████      | 406/1000 [18:45<27:27,  2.77s/it][Succeeded / Failed / Skipped / Total] 153 / 233 / 20 / 406:  41%|████      | 407/1000 [18:49<27:25,  2.78s/it][Succeeded / Failed / Skipped / Total] 154 / 233 / 20 / 407:  41%|████      | 407/1000 [18:49<27:25,  2.78s/it][Succeeded / Failed / Skipped / Total] 154 / 233 / 20 / 407:  41%|████      | 408/1000 [18:50<27:20,  2.77s/it][Succeeded / Failed / Skipped / Total] 155 / 233 / 20 / 408:  41%|████      | 408/1000 [18:50<27:20,  2.77s/it][Succeeded / Failed / Skipped / Total] 155 / 233 / 20 / 408:  41%|████      | 409/1000 [18:51<27:15,  2.77s/it][Succeeded / Failed / Skipped / Total] 156 / 233 / 20 / 409:  41%|████      | 409/1000 [18:51<27:15,  2.77s/it][Succeeded / Failed / Skipped / Total] 156 / 233 / 20 / 409:  41%|████      | 410/1000 [18:51<27:08,  2.76s/it][Succeeded / Failed / Skipped / Total] 156 / 234 / 20 / 410:  41%|████      | 410/1000 [18:51<27:08,  2.76s/it][Succeeded / Failed / Skipped / Total] 156 / 234 / 20 / 410:  41%|████      | 411/1000 [18:52<27:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 156 / 234 / 21 / 411:  41%|████      | 411/1000 [18:52<27:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 156 / 234 / 21 / 411:  41%|████      | 412/1000 [18:53<26:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 156 / 235 / 21 / 412:  41%|████      | 412/1000 [18:53<26:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 156 / 235 / 21 / 412:  41%|████▏     | 413/1000 [18:59<26:59,  2.76s/it]Remove a task from the pool . --> Removes the pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[attracts]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 406 ---------------------------------------------
Put a pool . --> Get a pooled object . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[pool]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[calma]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Gets a connection . --> Returns a Guavamoles from a URL --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[gingivitis]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 408 ---------------------------------------------
Shrink the future . --> Unregisters all futures --> Socre: 1.0

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[beaners]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[beaners]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[beaners]] . next ( ) ; [[beaners]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 409 ---------------------------------------------
Create a new pool . --> Adds a connection to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doCreate]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void [[accused]] ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 410 ---------------------------------------------
Create a new Hadoop . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[compromised]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 411 ---------------------------------------------
Starts the transaction . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 412 ---------------------------------------------
Get processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . [[cmd2processors]] . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode [[collagen]] ) { RemotingProcessor < ? > [[regressing]] = this . [[baklava]] . get ( [[collagen]] ) ; if ( [[regressing]] != null ) { return [[regressing]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 235 / 21 / 413:  41%|████▏     | 413/1000 [18:59<26:59,  2.76s/it][Succeeded / Failed / Skipped / Total] 157 / 235 / 21 / 413:  41%|████▏     | 414/1000 [19:01<26:55,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 235 / 21 / 414:  41%|████▏     | 414/1000 [19:01<26:55,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 235 / 21 / 414:  42%|████▏     | 415/1000 [19:05<26:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 159 / 235 / 21 / 415:  42%|████▏     | 415/1000 [19:05<26:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 159 / 235 / 21 / 415:  42%|████▏     | 416/1000 [19:10<26:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 160 / 235 / 21 / 416:  42%|████▏     | 416/1000 [19:10<26:54,  2.76s/it][Succeeded / Failed / Skipped / Total] 160 / 235 / 21 / 416:  42%|████▏     | 417/1000 [19:13<26:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 235 / 21 / 417:  42%|████▏     | 417/1000 [19:13<26:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 235 / 21 / 417:  42%|████▏     | 418/1000 [19:14<26:47,  2.76s/it][Succeeded / Failed / Skipped / Total] 162 / 235 / 21 / 418:  42%|████▏     | 418/1000 [19:14<26:47,  2.76s/it][Succeeded / Failed / Skipped / Total] 162 / 235 / 21 / 418:  42%|████▏     | 419/1000 [19:20<26:48,  2.77s/it]Handle a command . --> Handles a response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[astounded]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 414 ---------------------------------------------
Handles request . --> Handle the transaction . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[biryani]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[biryani]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 415 ---------------------------------------------
Executes the executor . --> Execute a task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[haggard]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[haggard]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 416 ---------------------------------------------
Registers a processor . --> Unregister a bean --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[beaners]] , ConcurrentHashMap < String , UserProcessor < ? > > [[bonking]] ) { if ( null == [[beaners]] . multiInterest ( ) || [[beaners]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[beaners]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[bonking]] . putIfAbsent ( interest , [[beaners]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 417 ---------------------------------------------
Set an attribute value . --> Convenience method for creating a misede --> Socre: 1.0

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[advisedly]] , Object [[mccallister]] ) { return attributes . putIfAbsent ( [[advisedly]] , [[mccallister]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 418 ---------------------------------------------
Handles a request . --> Handles a transaction . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte [[type]] = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[cirque]] ) { final int id = [[cirque]] . getId ( ) ; final byte [[baii]] = [[cirque]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 235 / 21 / 419:  42%|████▏     | 419/1000 [19:20<26:48,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 235 / 21 / 419:  42%|████▏     | 420/1000 [19:21<26:43,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 236 / 21 / 420:  42%|████▏     | 420/1000 [19:21<26:43,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 236 / 21 / 420:  42%|████▏     | 421/1000 [19:22<26:38,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 236 / 21 / 421:  42%|████▏     | 421/1000 [19:22<26:38,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 236 / 21 / 421:  42%|████▏     | 422/1000 [19:22<26:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 165 / 236 / 21 / 422:  42%|████▏     | 422/1000 [19:22<26:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 165 / 236 / 21 / 422:  42%|████▏     | 423/1000 [19:23<26:26,  2.75s/it][Succeeded / Failed / Skipped / Total] 165 / 236 / 22 / 423:  42%|████▏     | 423/1000 [19:23<26:26,  2.75s/it][Succeeded / Failed / Skipped / Total] 165 / 236 / 22 / 423:  42%|████▏     | 424/1000 [19:28<26:26,  2.75s/it]Register processor . --> Compare two processors --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[shira]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[corso]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[shira]] ( ( MultiInterestUserProcessor ) processor , [[corso]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[corso]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String [[frontage]] = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[frontage]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 420 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[soulmate]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[relationships]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[relationships]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 421 ---------------------------------------------
Converts a byte array to a BitSet . --> Returns a BitSet of the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int [[sextant]] ) { if ( [[sextant]] > Byte . MAX_VALUE || [[sextant]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[sextant]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[sextant]] != 0 ) { if ( [[sextant]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[sextant]] = ( byte ) ( [[sextant]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 422 ---------------------------------------------
Add a Task . --> Starts a new connect . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[amjad]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 423 ---------------------------------------------
Shuts down the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 236 / 22 / 424:  42%|████▏     | 424/1000 [19:28<26:26,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 236 / 22 / 424:  42%|████▎     | 425/1000 [19:28<26:20,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 236 / 23 / 425:  42%|████▎     | 425/1000 [19:28<26:20,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 236 / 23 / 425:  43%|████▎     | 426/1000 [19:31<26:18,  2.75s/it][Succeeded / Failed / Skipped / Total] 167 / 236 / 23 / 426:  43%|████▎     | 426/1000 [19:31<26:18,  2.75s/it][Succeeded / Failed / Skipped / Total] 167 / 236 / 23 / 426:  43%|████▎     | 427/1000 [19:31<26:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 167 / 236 / 24 / 427:  43%|████▎     | 427/1000 [19:31<26:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 167 / 236 / 24 / 427:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 24 / 428:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 24 / 428:  43%|████▎     | 429/1000 [19:34<26:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 25 / 429:  43%|████▎     | 429/1000 [19:34<26:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 25 / 429:  43%|████▎     | 430/1000 [19:34<25:56,  2.73s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 26 / 430:  43%|████▎     | 430/1000 [19:34<25:56,  2.73s/it][Succeeded / Failed / Skipped / Total] 168 / 236 / 26 / 430:  43%|████▎     | 431/1000 [19:35<25:51,  2.73s/it][Succeeded / Failed / Skipped / Total] 169 / 236 / 26 / 431:  43%|████▎     | 431/1000 [19:35<25:51,  2.73s/it][Succeeded / Failed / Skipped / Total] 169 / 236 / 26 / 431:  43%|████▎     | 432/1000 [19:35<25:45,  2.72s/it]Stop the server . --> Shutdown this connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[agnès]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Retrieves a boolean value . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 426 ---------------------------------------------
Return a list of Connections . --> Returns a list of connection statuss . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[animal]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[animal]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[animal]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 427 ---------------------------------------------
Handles a command . --> [[[SKIPPED]]]

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 428 ---------------------------------------------
Closes a connection . --> Selects a peer . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[dribbles]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 429 ---------------------------------------------
Returns a random number of random numbers . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 430 ---------------------------------------------
Returns the value associated with the specified key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Log a message . --> Formats a string . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[abridged]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 432 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 236 / 26 / 432:  43%|████▎     | 432/1000 [19:35<25:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 170 / 236 / 26 / 432:  43%|████▎     | 433/1000 [19:40<25:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 171 / 236 / 26 / 433:  43%|████▎     | 433/1000 [19:40<25:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 171 / 236 / 26 / 433:  43%|████▎     | 434/1000 [19:41<25:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 171 / 237 / 26 / 434:  43%|████▎     | 434/1000 [19:41<25:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 171 / 237 / 26 / 434:  44%|████▎     | 435/1000 [19:44<25:38,  2.72s/it][Succeeded / Failed / Skipped / Total] 171 / 238 / 26 / 435:  44%|████▎     | 435/1000 [19:44<25:38,  2.72s/it][Succeeded / Failed / Skipped / Total] 171 / 238 / 26 / 435:  44%|████▎     | 436/1000 [19:54<25:44,  2.74s/it][Succeeded / Failed / Skipped / Total] 172 / 238 / 26 / 436:  44%|████▎     | 436/1000 [19:54<25:44,  2.74s/it][Succeeded / Failed / Skipped / Total] 172 / 238 / 26 / 436:  44%|████▎     | 437/1000 [19:54<25:38,  2.73s/it][Succeeded / Failed / Skipped / Total] 172 / 238 / 27 / 437:  44%|████▎     | 437/1000 [19:54<25:38,  2.73s/it][Succeeded / Failed / Skipped / Total] 172 / 238 / 27 / 437:  44%|████▍     | 438/1000 [19:56<25:35,  2.73s/it]Convert a byte value to a byte array . --> Returns an unsigned integer value . --> Socre: 1.0

[[[[Adv]]]]: public static byte toByte ( BitSet [[bs]] ) { int [[value]] = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { [[value]] += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet [[exhibits]] ) { int [[classically]] = 0 ; for ( int i = 0 ; i < [[exhibits]] . length ( ) ; ++ i ) { if ( [[exhibits]] . get ( i ) ) { [[classically]] += 1 << i ; } } if ( [[exhibits]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[classically]] + " generated according to bit set " + [[exhibits]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[classically]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 433 ---------------------------------------------
Get the property . --> Returns a String representation of the properties . --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[laing]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[laing]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 434 ---------------------------------------------
Handle a remote request . --> [[[FAILED]]]

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand [[cmd]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , [[remoteAddr]] , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand [[bangkok]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[bangkok]] . getId ( ) , currentTimestamp , [[bangkok]] . getArriveTime ( ) , ( currentTimestamp - [[bangkok]] . getArriveTime ( ) ) , [[bangkok]] . getTimeout ( ) ) ; } String [[shouldn]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[shouldn]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[bangkok]] . getId ( ) , [[shouldn]] , ( currentTimestamp - [[bangkok]] . getArriveTime ( ) ) , [[bangkok]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 435 ---------------------------------------------
Sends a connection to the server . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[cache]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[cache]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 436 ---------------------------------------------
Parse response . --> Handles server . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand [[responseCommand]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand [[quilt]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[quilt]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 437 ---------------------------------------------
Invokes the source context . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 238 / 27 / 438:  44%|████▍     | 438/1000 [19:56<25:35,  2.73s/it][Succeeded / Failed / Skipped / Total] 173 / 238 / 27 / 438:  44%|████▍     | 439/1000 [19:57<25:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 27 / 439:  44%|████▍     | 439/1000 [19:57<25:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 173 / 239 / 27 / 439:  44%|████▍     | 440/1000 [20:01<25:28,  2.73s/it][Succeeded / Failed / Skipped / Total] 174 / 239 / 27 / 440:  44%|████▍     | 440/1000 [20:01<25:28,  2.73s/it][Succeeded / Failed / Skipped / Total] 174 / 239 / 27 / 440:  44%|████▍     | 441/1000 [20:07<25:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 174 / 240 / 27 / 441:  44%|████▍     | 441/1000 [20:07<25:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 174 / 240 / 27 / 441:  44%|████▍     | 442/1000 [20:10<25:28,  2.74s/it][Succeeded / Failed / Skipped / Total] 175 / 240 / 27 / 442:  44%|████▍     | 442/1000 [20:10<25:28,  2.74s/it][Succeeded / Failed / Skipped / Total] 175 / 240 / 27 / 442:  44%|████▍     | 443/1000 [20:11<25:23,  2.74s/it][Succeeded / Failed / Skipped / Total] 175 / 241 / 27 / 443:  44%|████▍     | 443/1000 [20:11<25:23,  2.74s/it][Succeeded / Failed / Skipped / Total] 175 / 241 / 27 / 443:  44%|████▍     | 444/1000 [20:13<25:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 175 / 242 / 27 / 444:  44%|████▍     | 444/1000 [20:13<25:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 175 / 242 / 27 / 444:  44%|████▍     | 445/1000 [20:13<25:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 176 / 242 / 27 / 445:  44%|████▍     | 445/1000 [20:13<25:13,  2.73s/it][Succeeded / Failed / Skipped / Total] 176 / 242 / 27 / 445:  45%|████▍     | 446/1000 [20:14<25:08,  2.72s/it]Execute a command --> Helper method to get a URL --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[burlington]] , String addr ) throws RemotingException { preProcess ( [[burlington]] , addr ) ; if ( [[burlington]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[burlington]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[burlington]] . getResponseStatus ( ) , addr , [[burlington]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[burlington]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[burlington]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 439 ---------------------------------------------
Gets the user name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[userProcessors]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[minchin]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[gameboy]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 440 ---------------------------------------------
Handles a response . --> get a ResponseObject --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[antipsychotic]] ( ResponseCommand [[azari]] ) throws CodecException { RpcResponseCommand [[lucka]] = ( RpcResponseCommand ) [[azari]] ; [[lucka]] . deserialize ( ) ; return [[lucka]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[ages]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 442 ---------------------------------------------
Parse a remote channel . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[verified]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[fanna]] = channel . remoteAddress ( ) ; return doParse ( [[fanna]] != null ? [[fanna]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 443 ---------------------------------------------
Creates the exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String [[dragging]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[dragging]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 444 ---------------------------------------------
Handles response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[calamari]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[calamari]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 445 ---------------------------------------------
Create a new instance of a thread group . --> Allocate a new thread --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[hooda]] ( int nThreads , ThreadFactory [[beehive]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[beehive]] ) : new NioEventLoopGroup ( nThreads , [[beehive]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 242 / 27 / 446:  45%|████▍     | 446/1000 [20:14<25:08,  2.72s/it][Succeeded / Failed / Skipped / Total] 177 / 242 / 27 / 446:  45%|████▍     | 447/1000 [20:22<25:11,  2.73s/it][Succeeded / Failed / Skipped / Total] 177 / 243 / 27 / 447:  45%|████▍     | 447/1000 [20:22<25:11,  2.73s/it][Succeeded / Failed / Skipped / Total] 177 / 243 / 27 / 447:  45%|████▍     | 448/1000 [20:27<25:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 177 / 244 / 27 / 448:  45%|████▍     | 448/1000 [20:27<25:12,  2.74s/it][Succeeded / Failed / Skipped / Total] 177 / 244 / 27 / 448:  45%|████▍     | 449/1000 [20:27<25:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 177 / 244 / 28 / 449:  45%|████▍     | 449/1000 [20:27<25:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 177 / 244 / 28 / 449:  45%|████▌     | 450/1000 [20:28<25:01,  2.73s/it][Succeeded / Failed / Skipped / Total] 178 / 244 / 28 / 450:  45%|████▌     | 450/1000 [20:28<25:01,  2.73s/it][Succeeded / Failed / Skipped / Total] 178 / 244 / 28 / 450:  45%|████▌     | 451/1000 [20:29<24:56,  2.73s/it][Succeeded / Failed / Skipped / Total] 178 / 245 / 28 / 451:  45%|████▌     | 451/1000 [20:29<24:56,  2.73s/it][Succeeded / Failed / Skipped / Total] 178 / 245 / 28 / 451:  45%|████▌     | 452/1000 [20:31<24:52,  2.72s/it]Parse an IP address . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[complained]] ) { if ( null == [[complained]] ) { return StringUtils . EMPTY ; } final SocketAddress [[anunnaki]] = [[complained]] . localAddress ( ) ; return doParse ( [[anunnaki]] != null ? [[anunnaki]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Get the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[istvan]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[istvan]] != null ) { return [[istvan]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Gets IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[cadres]] ) { if ( null == [[cadres]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[cadres]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 450 ---------------------------------------------
Remove a connection . --> Remove connections . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean [[res]] = this . conns . remove ( connection ) ; if ( [[res]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection connection ) { if ( null == connection ) { return ; } boolean [[incense]] = this . conns . remove ( connection ) ; if ( [[incense]] ) { connection . decreaseRef ( ) ; } if ( connection . noRef ( ) ) { connection . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 451 ---------------------------------------------
Creates a Task . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( requestId ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[dyer]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[dyer]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[dyer]] = conn . removeInvokeFuture ( requestId ) ; if ( [[dyer]] != null ) { [[dyer]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[dyer]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[dyer]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 452 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 246 / 28 / 452:  45%|████▌     | 452/1000 [20:31<24:52,  2.72s/it][Succeeded / Failed / Skipped / Total] 178 / 246 / 28 / 452:  45%|████▌     | 453/1000 [20:31<24:46,  2.72s/it][Succeeded / Failed / Skipped / Total] 179 / 246 / 28 / 453:  45%|████▌     | 453/1000 [20:31<24:46,  2.72s/it][Succeeded / Failed / Skipped / Total] 179 / 246 / 28 / 453:  45%|████▌     | 454/1000 [20:31<24:41,  2.71s/it][Succeeded / Failed / Skipped / Total] 179 / 246 / 29 / 454:  45%|████▌     | 454/1000 [20:31<24:41,  2.71s/it][Succeeded / Failed / Skipped / Total] 179 / 246 / 29 / 454:  46%|████▌     | 455/1000 [20:35<24:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 179 / 247 / 29 / 455:  46%|████▌     | 455/1000 [20:35<24:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 179 / 247 / 29 / 455:  46%|████▌     | 456/1000 [20:36<24:35,  2.71s/it][Succeeded / Failed / Skipped / Total] 179 / 248 / 29 / 456:  46%|████▌     | 456/1000 [20:36<24:35,  2.71s/it][Succeeded / Failed / Skipped / Total] 179 / 248 / 29 / 456:  46%|████▌     | 457/1000 [20:39<24:32,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 248 / 29 / 457:  46%|████▌     | 457/1000 [20:39<24:32,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 248 / 29 / 457:  46%|████▌     | 458/1000 [20:39<24:27,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 248 / 30 / 458:  46%|████▌     | 458/1000 [20:39<24:27,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 248 / 30 / 458:  46%|████▌     | 459/1000 [20:43<24:25,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 249 / 30 / 459:  46%|████▌     | 459/1000 [20:43<24:25,  2.71s/it][Succeeded / Failed / Skipped / Total] 180 / 249 / 30 / 459:  46%|████▌     | 460/1000 [20:44<24:20,  2.70s/it][Succeeded / Failed / Skipped / Total] 181 / 249 / 30 / 460:  46%|████▌     | 460/1000 [20:44<24:20,  2.70s/it][Succeeded / Failed / Skipped / Total] 181 / 249 / 30 / 460:  46%|████▌     | 461/1000 [20:44<24:14,  2.70s/it][Succeeded / Failed / Skipped / Total] 181 / 249 / 31 / 461:  46%|████▌     | 461/1000 [20:44<24:14,  2.70s/it][Succeeded / Failed / Skipped / Total] 181 / 249 / 31 / 461:  46%|████▌     | 462/1000 [20:44<24:09,  2.69s/it]Returns a IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[deleted]] ) { if ( null == [[deleted]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[deleted]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Add a connection . --> Adds an arbitrary . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[contraire]] ) { markAccess ( ) ; if ( null == [[contraire]] ) { return ; } boolean [[gruesome]] = this . conns . addIfAbsent ( [[contraire]] ) ; if ( [[gruesome]] ) { [[contraire]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 454 ---------------------------------------------
Starts the monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Parse the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[truer]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[truer]] != null ) { return [[truer]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 456 ---------------------------------------------
Parse a IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[demeanor]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[demeanor]] != null ) { return [[demeanor]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 457 ---------------------------------------------
Check if the URL is valid . --> Sets the URL . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[annum]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 458 ---------------------------------------------
Writes a channel to a channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
Gets a custom class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[mcmahon]] ( String [[generational]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[generational]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 460 ---------------------------------------------
Return a opcode . --> Returns the defaultcode stack . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[lui]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 461 ---------------------------------------------
Updates a byte buffer . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 462 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 181 / 250 / 31 / 462:  46%|████▌     | 462/1000 [20:44<24:09,  2.69s/it][Succeeded / Failed / Skipped / Total] 181 / 250 / 31 / 462:  46%|████▋     | 463/1000 [20:44<24:03,  2.69s/it][Succeeded / Failed / Skipped / Total] 181 / 251 / 31 / 463:  46%|████▋     | 463/1000 [20:44<24:03,  2.69s/it][Succeeded / Failed / Skipped / Total] 181 / 251 / 31 / 463:  46%|████▋     | 464/1000 [20:47<24:01,  2.69s/it][Succeeded / Failed / Skipped / Total] 182 / 251 / 31 / 464:  46%|████▋     | 464/1000 [20:47<24:01,  2.69s/it][Succeeded / Failed / Skipped / Total] 182 / 251 / 31 / 464:  46%|████▋     | 465/1000 [20:50<23:59,  2.69s/it][Succeeded / Failed / Skipped / Total] 183 / 251 / 31 / 465:  46%|████▋     | 465/1000 [20:50<23:59,  2.69s/it][Succeeded / Failed / Skipped / Total] 183 / 251 / 31 / 465:  47%|████▋     | 466/1000 [20:51<23:54,  2.69s/it][Succeeded / Failed / Skipped / Total] 184 / 251 / 31 / 466:  47%|████▋     | 466/1000 [20:51<23:54,  2.69s/it][Succeeded / Failed / Skipped / Total] 184 / 251 / 31 / 466:  47%|████▋     | 467/1000 [20:52<23:49,  2.68s/it][Succeeded / Failed / Skipped / Total] 185 / 251 / 31 / 467:  47%|████▋     | 467/1000 [20:52<23:49,  2.68s/it][Succeeded / Failed / Skipped / Total] 185 / 251 / 31 / 467:  47%|████▋     | 468/1000 [20:52<23:44,  2.68s/it][Succeeded / Failed / Skipped / Total] 185 / 251 / 32 / 468:  47%|████▋     | 468/1000 [20:52<23:44,  2.68s/it][Succeeded / Failed / Skipped / Total] 185 / 251 / 32 / 468:  47%|████▋     | 469/1000 [20:55<23:41,  2.68s/it]Returns the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[foryourself]] ( SocketAddress socketAddress ) { final InetSocketAddress [[caffee]] = ( InetSocketAddress ) socketAddress ; if ( [[caffee]] != null ) { InetAddress [[deciduous]] = [[caffee]] . getAddress ( ) ; if ( null != [[deciduous]] ) { return [[deciduous]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 463 ---------------------------------------------
Returns the command line . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[flap]] ( CommandCode [[craziest]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[craziest]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 464 ---------------------------------------------
Sets the water watermark . --> Initializes the watermark . --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[lowWaterMark]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[lowWaterMark]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[lowWaterMark]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[lowWaterMark]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[lowWaterMark]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int [[akash]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[akash]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[akash]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[akash]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[akash]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 465 ---------------------------------------------
Register a custom serializer . --> Unregister a bean --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[orny]] ( CommandCode code , CustomSerializer [[azriel]] ) { CustomSerializer [[jellybean]] = commandCustomSerializer . putIfAbsent ( code , [[azriel]] ) ; if ( [[jellybean]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[jellybean]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 466 ---------------------------------------------
Sets the position . --> Validates a UTF - 8 . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[beltran]] , int mark ) throws InvalidDataException { try { [[beltran]] . position ( [[beltran]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[beltran]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[beltran]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 467 ---------------------------------------------
Send packet . --> Overridden . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[horsey]] , int realpacketsize ) throws IncompleteException { if ( [[horsey]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 468 ---------------------------------------------
Sends WebSocket event . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 251 / 32 / 469:  47%|████▋     | 469/1000 [20:55<23:41,  2.68s/it][Succeeded / Failed / Skipped / Total] 186 / 251 / 32 / 469:  47%|████▋     | 470/1000 [20:55<23:36,  2.67s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 32 / 470:  47%|████▋     | 470/1000 [20:55<23:36,  2.67s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 32 / 470:  47%|████▋     | 471/1000 [20:55<23:30,  2.67s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 33 / 471:  47%|████▋     | 471/1000 [20:55<23:30,  2.67s/it][Succeeded / Failed / Skipped / Total] 187 / 251 / 33 / 471:  47%|████▋     | 472/1000 [20:56<23:26,  2.66s/it][Succeeded / Failed / Skipped / Total] 187 / 252 / 33 / 472:  47%|████▋     | 472/1000 [20:56<23:26,  2.66s/it][Succeeded / Failed / Skipped / Total] 187 / 252 / 33 / 472:  47%|████▋     | 473/1000 [20:58<23:22,  2.66s/it][Succeeded / Failed / Skipped / Total] 188 / 252 / 33 / 473:  47%|████▋     | 473/1000 [20:58<23:22,  2.66s/it][Succeeded / Failed / Skipped / Total] 188 / 252 / 33 / 473:  47%|████▋     | 474/1000 [20:59<23:18,  2.66s/it][Succeeded / Failed / Skipped / Total] 189 / 252 / 33 / 474:  47%|████▋     | 474/1000 [20:59<23:18,  2.66s/it][Succeeded / Failed / Skipped / Total] 189 / 252 / 33 / 474:  48%|████▊     | 475/1000 [21:00<23:12,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 33 / 475:  48%|████▊     | 475/1000 [21:00<23:12,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 33 / 475:  48%|████▊     | 476/1000 [21:01<23:08,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 34 / 476:  48%|████▊     | 476/1000 [21:01<23:08,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 34 / 476:  48%|████▊     | 477/1000 [21:01<23:03,  2.65s/it]Calculates the size of the limited . --> Advances a byte array to a byte array . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[dagwood]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 470 ---------------------------------------------
Set code . --> A convenience method to obtain a String . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[ecstatically]] ( int [[jeon]] ) { this . code = [[jeon]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 471 ---------------------------------------------
Attempts to create a new response . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 472 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer [[durability]] ) { CustomSerializer [[nori]] = classCustomSerializer . putIfAbsent ( className , [[durability]] ) ; if ( [[nori]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[nori]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 473 ---------------------------------------------
Sends a web socket . --> Send web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[animation]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 474 ---------------------------------------------
Sends the web socket . --> Reads web socket . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[dagwood]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[dagwood]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 475 ---------------------------------------------
Generate a string representation of a string . --> Computes the SHA - 1 hash . --> Socre: 1.0

[[[[Adv]]]]: private String generateFinalKey ( String [[in]] ) { String seckey = [[in]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String generateFinalKey ( String [[promising]] ) { String seckey = [[promising]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 476 ---------------------------------------------
Creates a H2SSH2 . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 252 / 35 / 477:  48%|████▊     | 477/1000 [21:01<23:03,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 35 / 477:  48%|████▊     | 478/1000 [21:01<22:58,  2.64s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 36 / 478:  48%|████▊     | 478/1000 [21:01<22:58,  2.64s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 36 / 478:  48%|████▊     | 479/1000 [21:03<22:53,  2.64s/it][Succeeded / Failed / Skipped / Total] 191 / 252 / 36 / 479:  48%|████▊     | 479/1000 [21:03<22:53,  2.64s/it][Succeeded / Failed / Skipped / Total] 191 / 252 / 36 / 479:  48%|████▊     | 480/1000 [21:05<22:51,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 36 / 480:  48%|████▊     | 480/1000 [21:05<22:51,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 252 / 36 / 480:  48%|████▊     | 481/1000 [21:06<22:47,  2.63s/it][Succeeded / Failed / Skipped / Total] 193 / 252 / 36 / 481:  48%|████▊     | 481/1000 [21:06<22:47,  2.63s/it][Succeeded / Failed / Skipped / Total] 193 / 252 / 36 / 481:  48%|████▊     | 482/1000 [21:07<22:42,  2.63s/it][Succeeded / Failed / Skipped / Total] 194 / 252 / 36 / 482:  48%|████▊     | 482/1000 [21:07<22:42,  2.63s/it][Succeeded / Failed / Skipped / Total] 194 / 252 / 36 / 482:  48%|████▊     | 483/1000 [21:07<22:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 194 / 252 / 37 / 483:  48%|████▊     | 483/1000 [21:07<22:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 195 / 252 / 37 / 484:  48%|████▊     | 484/1000 [21:07<22:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 195 / 252 / 37 / 484:  48%|████▊     | 485/1000 [21:10<22:29,  2.62s/it]Convenience method to add a string to a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 478 ---------------------------------------------
Handle socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 479 ---------------------------------------------
Returns the protocol protocol . --> Returns a Handshakands . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String [[requestedProtocol]] ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String [[blinkin]] ) { for ( IProtocol [[layabout]] : knownProtocols ) { if ( [[layabout]] . acceptProvidedProtocol ( [[blinkin]] ) ) { protocol = [[layabout]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 480 ---------------------------------------------
Handles a frame . --> Called when an error occurs . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[judged]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[judged]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[judged]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 481 ---------------------------------------------
Allocate a buffer . --> Allocate a new limit . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[anatomically]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 482 ---------------------------------------------
Checks to see if we have a single frame --> Send a sequence of data . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[cgi]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[cgi]] ; addToBufferList ( [[cgi]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 483 ---------------------------------------------
Initialize the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Gets the total size of the buffer . --> Convert a byte buffer to a byte buffer --> Socre: 1.0

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[aymara]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[aymara]] += buffer . limit ( ) ; } } return [[aymara]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 196 / 252 / 37 / 485:  48%|████▊     | 485/1000 [21:10<22:29,  2.62s/it][Succeeded / Failed / Skipped / Total] 197 / 252 / 37 / 486:  49%|████▊     | 486/1000 [21:10<22:24,  2.61s/it][Succeeded / Failed / Skipped / Total] 197 / 252 / 37 / 486:  49%|████▊     | 487/1000 [21:14<22:22,  2.62s/it][Succeeded / Failed / Skipped / Total] 198 / 252 / 37 / 487:  49%|████▊     | 487/1000 [21:14<22:22,  2.62s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 37 / 488:  49%|████▉     | 488/1000 [21:14<22:17,  2.61s/it][Succeeded / Failed / Skipped / Total] 198 / 253 / 37 / 488:  49%|████▉     | 489/1000 [21:19<22:17,  2.62s/it][Succeeded / Failed / Skipped / Total] 199 / 253 / 37 / 489:  49%|████▉     | 489/1000 [21:19<22:17,  2.62s/it][Succeeded / Failed / Skipped / Total] 200 / 253 / 37 / 490:  49%|████▉     | 490/1000 [21:24<22:16,  2.62s/it][Succeeded / Failed / Skipped / Total] 200 / 253 / 37 / 490:  49%|████▉     | 491/1000 [21:28<22:15,  2.62s/it][Succeeded / Failed / Skipped / Total] 201 / 253 / 37 / 491:  49%|████▉     | 491/1000 [21:28<22:15,  2.62s/it]Set the error response . --> Flush exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[monk]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Writes the error response to the server . --> Sends a error message . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[asano]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[asano]] . getCloseCode ( ) , [[asano]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 487 ---------------------------------------------
Gets the scheme . --> Get scheme . --> Socre: 1.0

[[[[Adv]]]]: private int getPort ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int getPort ( ) { int [[benefited]] = uri . getPort ( ) ; if ( [[benefited]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[benefited]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 488 ---------------------------------------------
Sets the socket . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[cash]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Sends a request to the client . --> Sends a request . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int [[port]] = getPort ( ) ; String host = uri . getHost ( ) + ( ( [[port]] != WebSocketImpl . DEFAULT_PORT && [[port]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[port]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int [[bootlegger]] = getPort ( ) ; String host = uri . getHost ( ) + ( ( [[bootlegger]] != WebSocketImpl . DEFAULT_PORT && [[bootlegger]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[bootlegger]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 490 ---------------------------------------------
Sends a text . --> Create a new Role --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[renunciation]] ( String [[ibs]] ) { if ( [[ibs]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[renunciation]] ( draft . createFrames ( [[ibs]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Shuts down the connection . --> Shut down all connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[hurt]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 492 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 202 / 253 / 37 / 492:  49%|████▉     | 492/1000 [21:28<22:10,  2.62s/it][Succeeded / Failed / Skipped / Total] 202 / 253 / 37 / 492:  49%|████▉     | 493/1000 [21:29<22:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 254 / 37 / 493:  49%|████▉     | 493/1000 [21:29<22:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 255 / 37 / 494:  49%|████▉     | 494/1000 [21:29<22:01,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 255 / 37 / 494:  50%|████▉     | 495/1000 [21:29<21:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 256 / 37 / 495:  50%|████▉     | 495/1000 [21:29<21:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 203 / 256 / 37 / 496:  50%|████▉     | 496/1000 [21:36<21:57,  2.61s/it][Succeeded / Failed / Skipped / Total] 203 / 256 / 37 / 496:  50%|████▉     | 497/1000 [21:36<21:52,  2.61s/it][Succeeded / Failed / Skipped / Total] 203 / 256 / 38 / 497:  50%|████▉     | 497/1000 [21:36<21:52,  2.61s/it][Succeeded / Failed / Skipped / Total] 204 / 256 / 38 / 498:  50%|████▉     | 498/1000 [21:36<21:47,  2.60s/it][Succeeded / Failed / Skipped / Total] 204 / 256 / 38 / 498:  50%|████▉     | 499/1000 [21:39<21:45,  2.60s/it]Start the timer . --> Starts a new socket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[childbearing]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[mig]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 493 ---------------------------------------------
Generate the error code . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[mariposa]] ) { String errorCodeDescription ; switch ( [[mariposa]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 494 ---------------------------------------------
Converts a byte array to a byte buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[bienvenidos]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 495 ---------------------------------------------
Process a single frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( [[webSocketImpl]] , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[earnshaw]] ( WebSocketImpl [[cup]] , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( [[cup]] , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 496 ---------------------------------------------
Disconnect connection . --> Shuts down . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[adonai]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Adds a channel to the queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 498 ---------------------------------------------
Stop the server . --> Revokes a session . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[websocketRunning]] = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[defendor]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[viridian]] = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 256 / 38 / 499:  50%|████▉     | 499/1000 [21:39<21:45,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 256 / 39 / 500:  50%|█████     | 500/1000 [21:40<21:40,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 256 / 39 / 500:  50%|█████     | 501/1000 [21:40<21:35,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 257 / 39 / 501:  50%|█████     | 501/1000 [21:40<21:35,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 258 / 39 / 502:  50%|█████     | 502/1000 [21:43<21:32,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 258 / 39 / 502:  50%|█████     | 503/1000 [21:43<21:27,  2.59s/it][Succeeded / Failed / Skipped / Total] 205 / 258 / 40 / 503:  50%|█████     | 503/1000 [21:43<21:27,  2.59s/it][Succeeded / Failed / Skipped / Total] 206 / 258 / 40 / 504:  50%|█████     | 504/1000 [21:45<21:25,  2.59s/it][Succeeded / Failed / Skipped / Total] 206 / 258 / 40 / 504:  50%|█████     | 505/1000 [21:47<21:21,  2.59s/it][Succeeded / Failed / Skipped / Total] 207 / 258 / 40 / 505:  50%|█████     | 505/1000 [21:47<21:21,  2.59s/it]Creates a Handonk server . --> Construct a Handshaked server --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[conn]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[maze]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 500 ---------------------------------------------
Verifies that the key is valid . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
Sets the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 502 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int getPort ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int getPort ( ) { int [[delightfully]] = getAddress ( ) . getPort ( ) ; if ( [[delightfully]] == 0 && server != null ) { [[delightfully]] = server . socket ( ) . getLocalPort ( ) ; } return [[delightfully]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
Stops the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Handles a socket . --> Set the key . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel [[channel]] = server . accept ( ) ; if ( [[channel]] == null ) { return ; } [[channel]] . configureBlocking ( "False" != "False" ) ; Socket socket = [[channel]] . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( [[channel]] . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( [[channel]] , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel [[albi]] = server . accept ( ) ; if ( [[albi]] == null ) { return ; } [[albi]] . configureBlocking ( "False" != "False" ) ; Socket socket = [[albi]] . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( [[albi]] . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( [[albi]] , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 505 ---------------------------------------------
Reads a key . --> Reads the next key from the queue . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[key]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[key]] . cancel ( ) ; handleIOException ( [[key]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[cased]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[cased]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[cased]] . cancel ( ) ; handleIOException ( [[cased]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 506 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 258 / 40 / 506:  51%|█████     | 506/1000 [21:49<21:18,  2.59s/it][Succeeded / Failed / Skipped / Total] 208 / 258 / 40 / 506:  51%|█████     | 507/1000 [21:53<21:16,  2.59s/it][Succeeded / Failed / Skipped / Total] 208 / 259 / 40 / 507:  51%|█████     | 507/1000 [21:53<21:16,  2.59s/it][Succeeded / Failed / Skipped / Total] 209 / 259 / 40 / 508:  51%|█████     | 508/1000 [21:55<21:14,  2.59s/it][Succeeded / Failed / Skipped / Total] 209 / 259 / 40 / 508:  51%|█████     | 509/1000 [21:57<21:10,  2.59s/it][Succeeded / Failed / Skipped / Total] 210 / 259 / 40 / 509:  51%|█████     | 509/1000 [21:57<21:10,  2.59s/it][Succeeded / Failed / Skipped / Total] 211 / 259 / 40 / 510:  51%|█████     | 510/1000 [22:00<21:08,  2.59s/it][Succeeded / Failed / Skipped / Total] 211 / 259 / 40 / 510:  51%|█████     | 511/1000 [22:00<21:03,  2.58s/it][Succeeded / Failed / Skipped / Total] 212 / 259 / 40 / 511:  51%|█████     | 511/1000 [22:00<21:03,  2.58s/it][Succeeded / Failed / Skipped / Total] 213 / 259 / 40 / 512:  51%|█████     | 512/1000 [22:01<20:59,  2.58s/it][Succeeded / Failed / Skipped / Total] 213 / 259 / 40 / 512:  51%|█████▏    | 513/1000 [22:02<20:55,  2.58s/it]Returns the socket channel . --> Handle a channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[ite]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 507 ---------------------------------------------
Sends a status . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata f ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[printouts]] ( WebSocket [[pawnshop]] , Framedata f ) { [[pawnshop]] . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 508 ---------------------------------------------
Wrap a buffers . --> Flushes the data . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[abandoned]] ) { if ( data == null || [[abandoned]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[abandoned]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 509 ---------------------------------------------
Sends a broadcast . --> Verifies that the given unit exists . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[anthea]] , Collection < WebSocket > clients ) { if ( [[anthea]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[anthea]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Opens a connection . --> Stop WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[webSocket]] , long [[minimumPongTime]] ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[unstoppable]] , long [[burnside]] ) { if ( ! ( [[unstoppable]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[unstoppable]] ; if ( webSocketImpl . getLastPong ( ) < [[burnside]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 511 ---------------------------------------------
Sends a request to the server . --> Send a DataFrame --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[clients]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[addington]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[addington]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 512 ---------------------------------------------
Populates the data frame . --> Populates a frame . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[sData]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[sData]] != null ) { frames = draft . createFrames ( [[sData]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String [[acquired]] , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( [[acquired]] != null ) { frames = draft . createFrames ( [[acquired]] , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 513 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 213 / 260 / 40 / 513:  51%|█████▏    | 513/1000 [22:02<20:55,  2.58s/it][Succeeded / Failed / Skipped / Total] 214 / 260 / 40 / 514:  51%|█████▏    | 514/1000 [22:03<20:51,  2.58s/it][Succeeded / Failed / Skipped / Total] 214 / 260 / 40 / 514:  52%|█████▏    | 515/1000 [22:04<20:47,  2.57s/it][Succeeded / Failed / Skipped / Total] 215 / 260 / 40 / 515:  52%|█████▏    | 515/1000 [22:04<20:47,  2.57s/it][Succeeded / Failed / Skipped / Total] 215 / 261 / 40 / 516:  52%|█████▏    | 516/1000 [22:04<20:42,  2.57s/it][Succeeded / Failed / Skipped / Total] 215 / 261 / 40 / 516:  52%|█████▏    | 517/1000 [22:07<20:39,  2.57s/it][Succeeded / Failed / Skipped / Total] 215 / 262 / 40 / 517:  52%|█████▏    | 517/1000 [22:07<20:39,  2.57s/it][Succeeded / Failed / Skipped / Total] 216 / 262 / 40 / 518:  52%|█████▏    | 518/1000 [22:13<20:40,  2.57s/it][Succeeded / Failed / Skipped / Total] 216 / 262 / 40 / 518:  52%|█████▏    | 519/1000 [22:18<20:40,  2.58s/it][Succeeded / Failed / Skipped / Total] 216 / 263 / 40 / 519:  52%|█████▏    | 519/1000 [22:18<20:40,  2.58s/it][Succeeded / Failed / Skipped / Total] 216 / 263 / 40 / 519:  52%|█████▏    | 520/1000 [22:23<20:40,  2.58s/it][Succeeded / Failed / Skipped / Total] 216 / 264 / 40 / 520:  52%|█████▏    | 520/1000 [22:23<20:40,  2.58s/it][Succeeded / Failed / Skipped / Total] 216 / 264 / 40 / 520:  52%|█████▏    | 521/1000 [22:24<20:36,  2.58s/it]Returns true if the current thread is started . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[wolfgang]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 514 ---------------------------------------------
Convert a byte array to a destination . --> Converts a byte array into a destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[limit]] = Math . min ( fremain , toremain ) ; source . limit ( [[limit]] ) ; dest . put ( source ) ; return [[limit]] ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[anything]] = Math . min ( fremain , toremain ) ; source . limit ( [[anything]] ) ; dest . put ( source ) ; return [[anything]] ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 515 ---------------------------------------------
Start the server . --> Start a new socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[ex]] : decoders ) { [[ex]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[ex]] ) ; return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[assessed]] : decoders ) { [[assessed]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[assessed]] ) ; return "False" != "False" ; } return "[[Frankfurt]]" == "[[Frankfurt]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 516 ---------------------------------------------
Start persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[pescara]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
Sets the stopping . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[yyou]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[Tenderly]]" != "[[Tenderly]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 518 ---------------------------------------------
Converts a String to a map . --> Converts a map to a String --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[eastside]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[eastside]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 519 ---------------------------------------------
Unregister a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[vitally]] ( Consumer < EntityManager > block ) { [[vitally]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Returns a EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[regarding]] ) { EntityManagerFactory [[azmi]] = emfs . get ( [[regarding]] ) ; if ( [[azmi]] == null ) { return null ; } return [[azmi]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 265 / 40 / 521:  52%|█████▏    | 521/1000 [22:24<20:36,  2.58s/it][Succeeded / Failed / Skipped / Total] 216 / 265 / 40 / 521:  52%|█████▏    | 522/1000 [22:30<20:37,  2.59s/it][Succeeded / Failed / Skipped / Total] 217 / 265 / 40 / 522:  52%|█████▏    | 522/1000 [22:30<20:37,  2.59s/it][Succeeded / Failed / Skipped / Total] 217 / 265 / 40 / 522:  52%|█████▏    | 523/1000 [22:31<20:33,  2.58s/it][Succeeded / Failed / Skipped / Total] 218 / 265 / 40 / 523:  52%|█████▏    | 523/1000 [22:31<20:33,  2.58s/it][Succeeded / Failed / Skipped / Total] 218 / 265 / 40 / 523:  52%|█████▏    | 524/1000 [22:34<20:30,  2.59s/it][Succeeded / Failed / Skipped / Total] 218 / 266 / 40 / 524:  52%|█████▏    | 524/1000 [22:34<20:30,  2.59s/it][Succeeded / Failed / Skipped / Total] 218 / 266 / 40 / 524:  52%|█████▎    | 525/1000 [22:37<20:28,  2.59s/it][Succeeded / Failed / Skipped / Total] 218 / 267 / 40 / 525:  52%|█████▎    | 525/1000 [22:37<20:28,  2.59s/it][Succeeded / Failed / Skipped / Total] 218 / 267 / 40 / 525:  53%|█████▎    | 526/1000 [22:38<20:24,  2.58s/it][Succeeded / Failed / Skipped / Total] 219 / 267 / 40 / 526:  53%|█████▎    | 526/1000 [22:38<20:24,  2.58s/it][Succeeded / Failed / Skipped / Total] 219 / 267 / 40 / 526:  53%|█████▎    | 527/1000 [22:39<20:20,  2.58s/it][Succeeded / Failed / Skipped / Total] 220 / 267 / 40 / 527:  53%|█████▎    | 527/1000 [22:39<20:20,  2.58s/it][Succeeded / Failed / Skipped / Total] 220 / 267 / 40 / 527:  53%|█████▎    | 528/1000 [22:42<20:17,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 267 / 40 / 528:  53%|█████▎    | 528/1000 [22:42<20:17,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 267 / 40 / 528:  53%|█████▎    | 529/1000 [22:45<20:16,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 268 / 40 / 529:  53%|█████▎    | 529/1000 [22:45<20:16,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 268 / 40 / 529:  53%|█████▎    | 530/1000 [22:46<20:11,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 269 / 40 / 530:  53%|█████▎    | 530/1000 [22:46<20:11,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 269 / 40 / 530:  53%|█████▎    | 531/1000 [22:51<20:11,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 270 / 40 / 531:  53%|█████▎    | 531/1000 [22:51<20:11,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 270 / 40 / 531:  53%|█████▎    | 532/1000 [22:53<20:08,  2.58s/it]Converts a Java object to a java . --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[dictates]] ( final Object ... [[immaculata]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[immaculata]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 522 ---------------------------------------------
Creates a new bindings . --> Create a new Fragment --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[barre]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 523 ---------------------------------------------
Returns the play value for the given key . --> Return the smallest of the journal --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[rajeev]] ( play . api . i18n . Lang lang , String [[sickos]] ) { return messages . isDefinedAt ( [[sickos]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 524 ---------------------------------------------
Get a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[mahmoud]] ) { List < T > [[freebies]] ; if ( [[mahmoud]] != null && [[mahmoud]] . length == 1 && [[mahmoud]] [ 0 ] instanceof List ) { [[freebies]] = ( List < T > ) [[mahmoud]] [ 0 ] ; } else { [[freebies]] = Arrays . asList ( [[mahmoud]] ) ; } return [[freebies]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 525 ---------------------------------------------
Request a new Authorization . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[component]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[seizures]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[seizures]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the current instance . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[croaking]] ) { return bindings ( Guiceable . [[croaking]] ( [[croaking]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 527 ---------------------------------------------
Returns a previously allocated channel . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[MAGNIFICO]] ( play . api . inject . Binding < ? > ... [[MAGNIFICO]] ) { return [[MAGNIFICO]] ( Guiceable . bindings ( [[MAGNIFICO]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Returns the modules . --> Use this method to initialize a Module --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[lucca]] ) { return overrides ( Guiceable . [[lucca]] ( [[lucca]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Returns a completed completed completed . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[barbell]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[attendants]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[attendants]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 530 ---------------------------------------------
Returns a modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[muffler]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 531 ---------------------------------------------
Retrieves the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[args]] ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... [[kian]] ) { Seq < Object > [[paquette]] = convertArgsToScalaBuffer ( [[kian]] ) ; return messages . apply ( key , [[paquette]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 532 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 271 / 40 / 532:  53%|█████▎    | 532/1000 [22:53<20:08,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 271 / 40 / 532:  53%|█████▎    | 533/1000 [22:53<20:03,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 272 / 40 / 533:  53%|█████▎    | 533/1000 [22:53<20:03,  2.58s/it][Succeeded / Failed / Skipped / Total] 221 / 272 / 40 / 533:  53%|█████▎    | 534/1000 [22:53<19:59,  2.57s/it][Succeeded / Failed / Skipped / Total] 221 / 273 / 40 / 534:  53%|█████▎    | 534/1000 [22:53<19:59,  2.57s/it][Succeeded / Failed / Skipped / Total] 221 / 273 / 40 / 534:  54%|█████▎    | 535/1000 [22:54<19:54,  2.57s/it][Succeeded / Failed / Skipped / Total] 222 / 273 / 40 / 535:  54%|█████▎    | 535/1000 [22:54<19:54,  2.57s/it][Succeeded / Failed / Skipped / Total] 222 / 273 / 40 / 535:  54%|█████▎    | 536/1000 [22:57<19:52,  2.57s/it][Succeeded / Failed / Skipped / Total] 222 / 274 / 40 / 536:  54%|█████▎    | 536/1000 [22:57<19:52,  2.57s/it][Succeeded / Failed / Skipped / Total] 222 / 274 / 40 / 536:  54%|█████▎    | 537/1000 [22:58<19:48,  2.57s/it][Succeeded / Failed / Skipped / Total] 223 / 274 / 40 / 537:  54%|█████▎    | 537/1000 [22:58<19:48,  2.57s/it][Succeeded / Failed / Skipped / Total] 223 / 274 / 40 / 537:  54%|█████▍    | 538/1000 [22:58<19:43,  2.56s/it][Succeeded / Failed / Skipped / Total] 224 / 274 / 40 / 538:  54%|█████▍    | 538/1000 [22:58<19:43,  2.56s/it][Succeeded / Failed / Skipped / Total] 224 / 274 / 40 / 538:  54%|█████▍    | 539/1000 [23:02<19:42,  2.57s/it][Succeeded / Failed / Skipped / Total] 225 / 274 / 40 / 539:  54%|█████▍    | 539/1000 [23:02<19:42,  2.57s/it][Succeeded / Failed / Skipped / Total] 225 / 274 / 40 / 539:  54%|█████▍    | 540/1000 [23:04<19:39,  2.56s/it][Succeeded / Failed / Skipped / Total] 226 / 274 / 40 / 540:  54%|█████▍    | 540/1000 [23:04<19:39,  2.56s/it][Succeeded / Failed / Skipped / Total] 226 / 274 / 40 / 540:  54%|█████▍    | 541/1000 [23:10<19:39,  2.57s/it][Succeeded / Failed / Skipped / Total] 227 / 274 / 40 / 541:  54%|█████▍    | 541/1000 [23:10<19:39,  2.57s/it][Succeeded / Failed / Skipped / Total] 227 / 274 / 40 / 541:  54%|█████▍    | 542/1000 [23:12<19:37,  2.57s/it][Succeeded / Failed / Skipped / Total] 227 / 275 / 40 / 542:  54%|█████▍    | 542/1000 [23:12<19:37,  2.57s/it][Succeeded / Failed / Skipped / Total] 227 / 275 / 40 / 542:  54%|█████▍    | 543/1000 [23:13<19:32,  2.57s/it]Sets the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[biro]] ( Result result , Lang [[pettibone]] ) { return messages . setLang ( result . asScala ( ) , [[pettibone]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 533 ---------------------------------------------
Creates an instance of the class . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[onstage]] ( Class < ? > ... [[wannabe]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[wannabe]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 534 ---------------------------------------------
Replies the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[timo]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Stops the given bindings . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[dirigible]] ( play . api . inject . Binding < ? > ... [[kokoro]] ) { return [[dirigible]] ( Guiceable . [[kokoro]] ( [[kokoro]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 536 ---------------------------------------------
Get the file name of the file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[alcoholism]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[alcoholism]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 537 ---------------------------------------------
Asynchronously updates the current thread . --> Convenience method for retrieving requests --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[binges]] ( Request [[shitty]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 538 ---------------------------------------------
A convenience function to A . --> Unamp aicycle . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Unicycle]] < A , B > [[Unicycle]] ( A a , B b ) { return new [[Unicycle]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Creates a new JPA unit . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[urgent]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[urgent]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 540 ---------------------------------------------
Convert a tuple to a tuple . --> Estimates the supplied bond . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Jolson]] < A , B , C , D , E > [[Jolson]] ( A a , B b , C c , D d , E e ) { return new [[Jolson]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 541 ---------------------------------------------
Gets the constructor for the given constructor . --> Get the constructor for the given constructor --> Socre: 1.0

[[[[Adv]]]]: private < T [[extends]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T [[boulogne]] ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 542 ---------------------------------------------
Convert a string to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[anythin]] ( String [[wank]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[wank]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 276 / 40 / 543:  54%|█████▍    | 543/1000 [23:13<19:32,  2.57s/it][Succeeded / Failed / Skipped / Total] 227 / 276 / 40 / 543:  54%|█████▍    | 544/1000 [23:14<19:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 227 / 277 / 40 / 544:  54%|█████▍    | 544/1000 [23:14<19:29,  2.56s/it][Succeeded / Failed / Skipped / Total] 227 / 277 / 40 / 544:  55%|█████▍    | 545/1000 [23:16<19:25,  2.56s/it][Succeeded / Failed / Skipped / Total] 228 / 277 / 40 / 545:  55%|█████▍    | 545/1000 [23:16<19:25,  2.56s/it][Succeeded / Failed / Skipped / Total] 228 / 277 / 40 / 545:  55%|█████▍    | 546/1000 [23:25<19:29,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 277 / 40 / 546:  55%|█████▍    | 546/1000 [23:25<19:29,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 277 / 40 / 546:  55%|█████▍    | 547/1000 [23:30<19:28,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 278 / 40 / 547:  55%|█████▍    | 547/1000 [23:30<19:28,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 278 / 40 / 547:  55%|█████▍    | 548/1000 [23:34<19:26,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 279 / 40 / 548:  55%|█████▍    | 548/1000 [23:34<19:26,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 279 / 40 / 548:  55%|█████▍    | 549/1000 [23:36<19:23,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 280 / 40 / 549:  55%|█████▍    | 549/1000 [23:36<19:23,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 280 / 40 / 549:  55%|█████▌    | 550/1000 [23:36<19:19,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 281 / 40 / 550:  55%|█████▌    | 550/1000 [23:36<19:19,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 281 / 40 / 550:  55%|█████▌    | 551/1000 [23:42<19:19,  2.58s/it]Returns a JSON representation of the given JSON string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[hesitant]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[hesitant]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Execute a prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext [[nas]] = ec . prepare ( ) ; if ( [[nas]] instanceof Executor ) { return ( Executor ) [[nas]] ; } else { return [[nas]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 545 ---------------------------------------------
Add a Validator to the constraint . --> Add constraint to constraint --> Socre: 1.0

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[tera]] ConstraintValidator < ? , ? > > [[hume]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 546 ---------------------------------------------
Convenience method for testing . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String [[banners]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( [[banners]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[stewards]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[distributing]] : [[stewards]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[distributing]] . getKey ( ) , [[distributing]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader [[shephard]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[shephard]] . method ( ) , [[shephard]] . uri ( ) , message , [[shephard]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Sends a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[finding]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[drive]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 551 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 229 / 282 / 40 / 551:  55%|█████▌    | 551/1000 [23:42<19:19,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 282 / 40 / 551:  55%|█████▌    | 552/1000 [23:45<19:17,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 283 / 40 / 552:  55%|█████▌    | 552/1000 [23:45<19:17,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 283 / 40 / 552:  55%|█████▌    | 553/1000 [23:46<19:13,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 284 / 40 / 553:  55%|█████▌    | 553/1000 [23:46<19:13,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 284 / 40 / 553:  55%|█████▌    | 554/1000 [23:48<19:09,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 285 / 40 / 554:  55%|█████▌    | 554/1000 [23:48<19:09,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 285 / 40 / 554:  56%|█████▌    | 555/1000 [23:50<19:06,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 286 / 40 / 555:  56%|█████▌    | 555/1000 [23:50<19:06,  2.58s/it][Succeeded / Failed / Skipped / Total] 229 / 286 / 40 / 555:  56%|█████▌    | 556/1000 [23:57<19:07,  2.59s/it][Succeeded / Failed / Skipped / Total] 229 / 287 / 40 / 556:  56%|█████▌    | 556/1000 [23:57<19:07,  2.59s/it][Succeeded / Failed / Skipped / Total] 229 / 287 / 40 / 556:  56%|█████▌    | 557/1000 [23:58<19:04,  2.58s/it][Succeeded / Failed / Skipped / Total] 230 / 287 / 40 / 557:  56%|█████▌    | 557/1000 [23:58<19:04,  2.58s/it][Succeeded / Failed / Skipped / Total] 230 / 287 / 40 / 557:  56%|█████▌    | 558/1000 [24:02<19:02,  2.58s/it]Returns the method name of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[calls]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[georgia]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 553 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[fumbles]] ( RequestHeader [[taunts]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[taunts]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[taunts]] , usefulException ) ; default : return onDevServerError ( [[taunts]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 554 ---------------------------------------------
Send a request to the client . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[request]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[annulled]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[annulled]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[annulled]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[annulled]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[annulled]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 555 ---------------------------------------------
Unarg a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[hammers]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 556 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[waxman]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[waxman]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Returns a copy of the input stream . --> Convert a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[apocalyptic]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 288 / 40 / 558:  56%|█████▌    | 558/1000 [24:02<19:02,  2.58s/it][Succeeded / Failed / Skipped / Total] 230 / 288 / 40 / 558:  56%|█████▌    | 559/1000 [24:02<18:58,  2.58s/it][Succeeded / Failed / Skipped / Total] 230 / 289 / 40 / 559:  56%|█████▌    | 559/1000 [24:02<18:58,  2.58s/it][Succeeded / Failed / Skipped / Total] 230 / 289 / 40 / 559:  56%|█████▌    | 560/1000 [24:05<18:56,  2.58s/it][Succeeded / Failed / Skipped / Total] 231 / 289 / 40 / 560:  56%|█████▌    | 560/1000 [24:05<18:56,  2.58s/it][Succeeded / Failed / Skipped / Total] 231 / 289 / 40 / 560:  56%|█████▌    | 561/1000 [24:17<19:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 231 / 290 / 40 / 561:  56%|█████▌    | 561/1000 [24:17<19:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 231 / 290 / 40 / 561:  56%|█████▌    | 562/1000 [24:23<19:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 232 / 290 / 40 / 562:  56%|█████▌    | 562/1000 [24:23<19:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 232 / 290 / 40 / 562:  56%|█████▋    | 563/1000 [24:27<18:58,  2.61s/it][Succeeded / Failed / Skipped / Total] 233 / 290 / 40 / 563:  56%|█████▋    | 563/1000 [24:27<18:58,  2.61s/it][Succeeded / Failed / Skipped / Total] 233 / 290 / 40 / 563:  56%|█████▋    | 564/1000 [24:27<18:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 233 / 291 / 40 / 564:  56%|█████▋    | 564/1000 [24:27<18:54,  2.60s/it][Succeeded / Failed / Skipped / Total] 233 / 291 / 40 / 564:  56%|█████▋    | 565/1000 [24:28<18:50,  2.60s/it][Succeeded / Failed / Skipped / Total] 233 / 291 / 41 / 565:  56%|█████▋    | 565/1000 [24:28<18:50,  2.60s/it][Succeeded / Failed / Skipped / Total] 233 / 291 / 41 / 565:  57%|█████▋    | 566/1000 [24:30<18:47,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 291 / 41 / 566:  57%|█████▋    | 566/1000 [24:30<18:47,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 291 / 41 / 566:  57%|█████▋    | 567/1000 [24:37<18:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 234 / 292 / 41 / 567:  57%|█████▋    | 567/1000 [24:37<18:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 234 / 292 / 41 / 567:  57%|█████▋    | 568/1000 [24:38<18:44,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 293 / 41 / 568:  57%|█████▋    | 568/1000 [24:38<18:44,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 293 / 41 / 568:  57%|█████▋    | 569/1000 [24:40<18:41,  2.60s/it]Produces a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[baldur]] ( RequestHeader [[voicemail]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[voicemail]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File [[prado]] ) { FileRepository [[wil]] = new FilesystemRepository ( [[prado]] ) ; return new DocumentationHandler ( [[wil]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Set the content of the given string . --> Convert a request to a string --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[grasps]] , String charset ) { String body ; if ( [[grasps]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 561 ---------------------------------------------
Build a Jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String [[base]] ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[exotic]] ( JarFile [[itwill]] , String [[tests]] ) { FileRepository repo = new JarRepository ( [[itwill]] , Option . apply ( [[tests]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Generates a http content . --> Construct a new molecule --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[koran]] ( String [[trifling]] , String [[hemophiliac]] ) { return new Strict ( ByteString . fromString ( [[trifling]] , [[hemophiliac]] ) , Optional . of ( "text/plain; charset=" + [[hemophiliac]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 563 ---------------------------------------------
Convert the given directory to a directory . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile [[jarFile]] , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , [[jarFile]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[angier]] ( File [[enola]] , JarFile [[bogus]] , String base ) { return [[angier]] ( [[enola]] , [[bogus]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 564 ---------------------------------------------
Send a byte array to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[antagonism]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 565 ---------------------------------------------
Finds a user by name . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Sends a status code . --> Send status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[jacko]] , JsonEncoding [[deteriorating]] ) { if ( [[jacko]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[jacko]] , [[deteriorating]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 567 ---------------------------------------------
Return a JSON representation of the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[farrington]] , JsonNode [[weavers]] ) { return status ( status , [[weavers]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Stops this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 294 / 41 / 569:  57%|█████▋    | 569/1000 [24:40<18:41,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 294 / 41 / 569:  57%|█████▋    | 570/1000 [24:41<18:37,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 295 / 41 / 570:  57%|█████▋    | 570/1000 [24:41<18:37,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 295 / 41 / 570:  57%|█████▋    | 571/1000 [24:42<18:34,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 296 / 41 / 571:  57%|█████▋    | 571/1000 [24:42<18:34,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 296 / 41 / 571:  57%|█████▋    | 572/1000 [24:46<18:32,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 297 / 41 / 572:  57%|█████▋    | 572/1000 [24:46<18:32,  2.60s/it][Succeeded / Failed / Skipped / Total] 234 / 297 / 41 / 572:  57%|█████▋    | 573/1000 [24:47<18:28,  2.60s/it][Succeeded / Failed / Skipped / Total] 235 / 297 / 41 / 573:  57%|█████▋    | 573/1000 [24:47<18:28,  2.60s/it][Succeeded / Failed / Skipped / Total] 235 / 297 / 41 / 573:  57%|█████▋    | 574/1000 [24:50<18:26,  2.60s/it][Succeeded / Failed / Skipped / Total] 235 / 298 / 41 / 574:  57%|█████▋    | 574/1000 [24:50<18:26,  2.60s/it][Succeeded / Failed / Skipped / Total] 235 / 298 / 41 / 574:  57%|█████▊    | 575/1000 [24:52<18:22,  2.60s/it][Succeeded / Failed / Skipped / Total] 236 / 298 / 41 / 575:  57%|█████▊    | 575/1000 [24:52<18:22,  2.60s/it][Succeeded / Failed / Skipped / Total] 236 / 298 / 41 / 575:  58%|█████▊    | 576/1000 [24:52<18:18,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 298 / 41 / 576:  58%|█████▊    | 576/1000 [24:52<18:18,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 298 / 41 / 576:  58%|█████▊    | 577/1000 [24:54<18:15,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 299 / 41 / 577:  58%|█████▊    | 577/1000 [24:54<18:15,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 299 / 41 / 577:  58%|█████▊    | 578/1000 [24:56<18:12,  2.59s/it]Converts a string to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int [[baz]] , byte [ ] [[wester]] ) { if ( [[wester]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[wester]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 570 ---------------------------------------------
Converts the given directory into a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[files]] , String [ ] [[baseDirs]] ) throws IOException { assert ( [[files]] . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[i]] = 0 ; [[i]] < [[files]] . length ; [[i]] ++ ) { File file = [[files]] [ [[i]] ] ; String baseDir = [[baseDirs]] [ [[i]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[i]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[brunette]] , String [ ] [[anchor]] ) throws IOException { assert ( [[brunette]] . length == [[anchor]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[brunette]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[bombarded]] = 0 ; [[bombarded]] < [[brunette]] . length ; [[bombarded]] ++ ) { File file = [[brunette]] [ [[bombarded]] ] ; String baseDir = [[anchor]] [ [[bombarded]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[bombarded]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 571 ---------------------------------------------
Converts a jar file to a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[amarillo]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[overstepped]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[overstepped]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[overstepped]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a collection of all terms . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[bashful]] ( Collection < Lang > [[wiedersehen]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[wiedersehen]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 573 ---------------------------------------------
Send a stream to a stream . --> Download InputStream --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int [[seizes]] , InputStream content , long [[hanker]] ) { return status ( status ) . sendInputStream ( content , [[hanker]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 574 ---------------------------------------------
Upload a file into a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[constellations]] ( int [[ultimatums]] , File [[renovation]] ) { return [[constellations]] ( [[constellations]] , [[renovation]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Sets the request . --> Start a new request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[dragoon]] ( Http . Request [[appointing]] ) { return [[dragoon]] ( [[appointing]] . secure ( ) , [[appointing]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 576 ---------------------------------------------
Returns a new fragment . --> Calls asynchronously --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[tickle]] ( String [[amparo]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[amparo]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 577 ---------------------------------------------
Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[appartment]] ( Http . Request request ) { return [[appartment]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 300 / 41 / 578:  58%|█████▊    | 578/1000 [24:56<18:12,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 300 / 41 / 578:  58%|█████▊    | 579/1000 [24:58<18:09,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 301 / 41 / 579:  58%|█████▊    | 579/1000 [24:58<18:09,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 301 / 41 / 579:  58%|█████▊    | 580/1000 [25:02<18:07,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 302 / 41 / 580:  58%|█████▊    | 580/1000 [25:02<18:07,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 303 / 41 / 581:  58%|█████▊    | 581/1000 [25:02<18:03,  2.59s/it][Succeeded / Failed / Skipped / Total] 237 / 303 / 41 / 581:  58%|█████▊    | 582/1000 [25:04<18:00,  2.58s/it][Succeeded / Failed / Skipped / Total] 238 / 303 / 41 / 582:  58%|█████▊    | 582/1000 [25:04<18:00,  2.58s/it][Succeeded / Failed / Skipped / Total] 238 / 304 / 41 / 583:  58%|█████▊    | 583/1000 [25:06<17:57,  2.58s/it][Succeeded / Failed / Skipped / Total] 238 / 304 / 41 / 583:  58%|█████▊    | 584/1000 [25:07<17:53,  2.58s/it][Succeeded / Failed / Skipped / Total] 238 / 305 / 41 / 584:  58%|█████▊    | 584/1000 [25:07<17:53,  2.58s/it][Succeeded / Failed / Skipped / Total] 239 / 305 / 41 / 585:  58%|█████▊    | 585/1000 [25:13<17:53,  2.59s/it][Succeeded / Failed / Skipped / Total] 239 / 305 / 41 / 585:  59%|█████▊    | 586/1000 [25:14<17:49,  2.58s/it][Succeeded / Failed / Skipped / Total] 240 / 305 / 41 / 586:  59%|█████▊    | 586/1000 [25:14<17:49,  2.58s/it]Execute a connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[ariza]] ) { try { return block . call ( [[ariza]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Convert a JSON array to a JSON object . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[goodman]] > [[goodman]] fromJson ( JsonNode json , Class < [[goodman]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Returns a connection to a connection --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[rimrock]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[puncture]] ) { try { block . run ( [[puncture]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Convert a JsonNode to JSON representation --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[transmit]] ( final Object [[guri]] ) { try { return mapper ( ) . valueToTree ( [[guri]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Convenience method to remove a string from a String --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[vexation]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a json string . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[curios]] ) { try { return mapper ( ) . readTree ( [[curios]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Parse a json string . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[grogan]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Creates a new instance of the given mode . --> Build izokeeper --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[befell]] ( Mode [[cognizant]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[cognizant]] ( [[cognizant]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 586 ---------------------------------------------
Returns true if the given class is an array of class . --> Obtains a constructor for a given class --> Socre: 1.0

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( isAssignable ( classArray [ [[i]] ] , toClassArray [ [[i]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[kale]] = 0 ; [[kale]] < classArray . length ; [[kale]] ++ ) { if ( isAssignable ( classArray [ [[kale]] ] , toClassArray [ [[kale]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 587 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 240 / 306 / 41 / 587:  59%|█████▊    | 587/1000 [25:14<17:45,  2.58s/it][Succeeded / Failed / Skipped / Total] 240 / 306 / 41 / 587:  59%|█████▉    | 588/1000 [25:17<17:43,  2.58s/it][Succeeded / Failed / Skipped / Total] 241 / 306 / 41 / 588:  59%|█████▉    | 588/1000 [25:17<17:43,  2.58s/it][Succeeded / Failed / Skipped / Total] 241 / 307 / 41 / 589:  59%|█████▉    | 589/1000 [25:24<17:43,  2.59s/it][Succeeded / Failed / Skipped / Total] 241 / 307 / 41 / 589:  59%|█████▉    | 590/1000 [25:27<17:41,  2.59s/it][Succeeded / Failed / Skipped / Total] 241 / 308 / 41 / 590:  59%|█████▉    | 590/1000 [25:27<17:41,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 308 / 41 / 591:  59%|█████▉    | 591/1000 [25:28<17:37,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 308 / 41 / 591:  59%|█████▉    | 592/1000 [25:29<17:34,  2.58s/it][Succeeded / Failed / Skipped / Total] 242 / 309 / 41 / 592:  59%|█████▉    | 592/1000 [25:29<17:34,  2.58s/it][Succeeded / Failed / Skipped / Total] 242 / 310 / 41 / 593:  59%|█████▉    | 593/1000 [25:35<17:33,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 310 / 41 / 593:  59%|█████▉    | 594/1000 [25:39<17:32,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 311 / 41 / 594:  59%|█████▉    | 594/1000 [25:39<17:32,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 311 / 41 / 594:  60%|█████▉    | 595/1000 [25:43<17:30,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 312 / 41 / 595:  60%|█████▉    | 595/1000 [25:43<17:30,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 312 / 41 / 595:  60%|█████▉    | 596/1000 [25:46<17:28,  2.59s/it]Converts constraints to constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[englewood]] ) { return [[englewood]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 588 ---------------------------------------------
Gets an ISO 8601 day . --> Converts a string to a cron --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[amarillo]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[amarillo]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 589 ---------------------------------------------
Create a new Cron expression . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[agra]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 590 ---------------------------------------------
Build the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[incitement]] ) { return initialBuilder . in ( [[incitement]] . environment ( ) ) . loadConfig ( [[incitement]] . initialConfig ( ) ) . overrides ( overrides ( [[incitement]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 591 ---------------------------------------------
Convenience method for creating a list of constraint . --> Convenience method for example --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[beds]] ( ConstraintDescriptor < ? > [[deko]] ) { final Display [[catherine]] = [[deko]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[catherine]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[catherine]] . attributes ( ) ) . map ( attr -> [[deko]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 592 ---------------------------------------------
Renders the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[GROGAN]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Returns an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[convenes]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 594 ---------------------------------------------
A convenience method for creating an immutable annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[blas]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Put session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String [[value]] ) { [[session]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[lemon]] ( String key , String [[masturbation]] ) { [[lemon]] ( ) . put ( key , [[masturbation]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 596 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 313 / 41 / 596:  60%|█████▉    | 596/1000 [25:46<17:28,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 313 / 41 / 596:  60%|█████▉    | 597/1000 [25:47<17:24,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 314 / 41 / 597:  60%|█████▉    | 597/1000 [25:47<17:24,  2.59s/it][Succeeded / Failed / Skipped / Total] 242 / 314 / 41 / 597:  60%|█████▉    | 598/1000 [25:50<17:22,  2.59s/it][Succeeded / Failed / Skipped / Total] 243 / 314 / 41 / 598:  60%|█████▉    | 598/1000 [25:50<17:22,  2.59s/it][Succeeded / Failed / Skipped / Total] 243 / 314 / 41 / 598:  60%|█████▉    | 599/1000 [25:51<17:18,  2.59s/it][Succeeded / Failed / Skipped / Total] 244 / 314 / 41 / 599:  60%|█████▉    | 599/1000 [25:51<17:18,  2.59s/it][Succeeded / Failed / Skipped / Total] 244 / 314 / 41 / 599:  60%|██████    | 600/1000 [25:53<17:15,  2.59s/it][Succeeded / Failed / Skipped / Total] 244 / 315 / 41 / 600:  60%|██████    | 600/1000 [25:53<17:15,  2.59s/it][Succeeded / Failed / Skipped / Total] 244 / 315 / 41 / 600:  60%|██████    | 601/1000 [25:55<17:12,  2.59s/it][Succeeded / Failed / Skipped / Total] 245 / 315 / 41 / 601:  60%|██████    | 601/1000 [25:55<17:12,  2.59s/it][Succeeded / Failed / Skipped / Total] 245 / 315 / 41 / 601:  60%|██████    | 602/1000 [25:55<17:08,  2.58s/it][Succeeded / Failed / Skipped / Total] 245 / 316 / 41 / 602:  60%|██████    | 602/1000 [25:55<17:08,  2.58s/it][Succeeded / Failed / Skipped / Total] 245 / 316 / 41 / 602:  60%|██████    | 603/1000 [25:58<17:06,  2.59s/it][Succeeded / Failed / Skipped / Total] 246 / 316 / 41 / 603:  60%|██████    | 603/1000 [25:58<17:06,  2.59s/it][Succeeded / Failed / Skipped / Total] 246 / 316 / 41 / 603:  60%|██████    | 604/1000 [26:09<17:09,  2.60s/it][Succeeded / Failed / Skipped / Total] 246 / 317 / 41 / 604:  60%|██████    | 604/1000 [26:09<17:09,  2.60s/it][Succeeded / Failed / Skipped / Total] 246 / 317 / 41 / 604:  60%|██████    | 605/1000 [26:13<17:07,  2.60s/it]Returns a canonical canonical path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String [[castin]] ) { String [ ] urlPath = toSegments ( [[castin]] ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = [[castin]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[castin]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 597 ---------------------------------------------
Return the Java implementation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[bk]] ) { return underlying . to ( [[bk]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 598 ---------------------------------------------
Returns a new instance . --> Construct a Java object from a Java --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[bambino]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Returns the provider . --> Convenience method for creating a new one --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[gak]] ( final Provider < ? extends T > [[blah]] ) { return underlying . to ( [[blah]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 600 ---------------------------------------------
Put a default value . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[iate]] ( String [[makuta]] , String [[peng]] ) { [[iate]] ( ) . put ( [[makuta]] , [[peng]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 601 ---------------------------------------------
Returns a key . --> Convenience method for creating a Java object --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[bloodier]] ) { return underlying . to ( [[bloodier]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 602 ---------------------------------------------
Allocate a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[borin]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[borin]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[borin]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 603 ---------------------------------------------
Generates a application . --> Convenience method for creating applications --> Socre: 1.0

[[[[Adv]]]]: public static Lang preferred ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[heisenberg]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[heisenberg]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 604 ---------------------------------------------
Returns the provider for the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[sagging]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[kass]] ) { return underlying . toProvider ( [[kass]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 317 / 41 / 605:  60%|██████    | 605/1000 [26:13<17:07,  2.60s/it][Succeeded / Failed / Skipped / Total] 247 / 317 / 41 / 605:  61%|██████    | 606/1000 [26:15<17:04,  2.60s/it][Succeeded / Failed / Skipped / Total] 247 / 318 / 41 / 606:  61%|██████    | 606/1000 [26:15<17:04,  2.60s/it][Succeeded / Failed / Skipped / Total] 247 / 318 / 41 / 606:  61%|██████    | 607/1000 [26:23<17:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 247 / 319 / 41 / 607:  61%|██████    | 607/1000 [26:23<17:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 247 / 319 / 41 / 607:  61%|██████    | 608/1000 [26:23<17:01,  2.61s/it][Succeeded / Failed / Skipped / Total] 248 / 319 / 41 / 608:  61%|██████    | 608/1000 [26:23<17:01,  2.61s/it][Succeeded / Failed / Skipped / Total] 248 / 319 / 41 / 608:  61%|██████    | 609/1000 [26:27<16:59,  2.61s/it][Succeeded / Failed / Skipped / Total] 248 / 320 / 41 / 609:  61%|██████    | 609/1000 [26:27<16:59,  2.61s/it][Succeeded / Failed / Skipped / Total] 248 / 320 / 41 / 609:  61%|██████    | 610/1000 [26:28<16:55,  2.60s/it][Succeeded / Failed / Skipped / Total] 248 / 321 / 41 / 610:  61%|██████    | 610/1000 [26:28<16:55,  2.60s/it][Succeeded / Failed / Skipped / Total] 248 / 321 / 41 / 610:  61%|██████    | 611/1000 [26:32<16:54,  2.61s/it][Succeeded / Failed / Skipped / Total] 249 / 321 / 41 / 611:  61%|██████    | 611/1000 [26:32<16:54,  2.61s/it][Succeeded / Failed / Skipped / Total] 249 / 321 / 41 / 611:  61%|██████    | 612/1000 [26:33<16:50,  2.60s/it][Succeeded / Failed / Skipped / Total] 249 / 322 / 41 / 612:  61%|██████    | 612/1000 [26:33<16:50,  2.60s/it][Succeeded / Failed / Skipped / Total] 249 / 322 / 41 / 612:  61%|██████▏   | 613/1000 [26:37<16:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 249 / 323 / 41 / 613:  61%|██████▏   | 613/1000 [26:37<16:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 249 / 323 / 41 / 613:  61%|██████▏   | 614/1000 [26:38<16:44,  2.60s/it][Succeeded / Failed / Skipped / Total] 249 / 324 / 41 / 614:  61%|██████▏   | 614/1000 [26:38<16:44,  2.60s/it][Succeeded / Failed / Skipped / Total] 249 / 324 / 41 / 614:  62%|██████▏   | 615/1000 [26:42<16:42,  2.61s/it]Returns a list of applications . --> Helper method to create a Neighbour --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[langs]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[firework]] ( Application [[articulation]] ) { play . api . i18n . Langs [[uninhabited]] = [[articulation]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[uninhabited]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a environment . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[develops]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 607 ---------------------------------------------
Loads the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[eases]] ( GuiceableModule ... [[alta]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[alta]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 608 ---------------------------------------------
Save a database . --> Initialise a Surealeale with a sluree --> Socre: 1.0

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[database]] , boolean autocommit , String [[schema]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , [[schema]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[mangal]] , boolean autocommit , String [[disobeyed]] ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[mangal]] . asScala ( ) , [[disobeyed]] ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 609 ---------------------------------------------
load modules --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... modules ) { return load ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 610 ---------------------------------------------
Creates a default configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[hanne]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
Load modules . --> Unregisters nor --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[keitaro]] ( play . api . inject . Module ... [[worn]] ) { return [[keitaro]] ( Guiceable . [[worn]] ( [[worn]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 612 ---------------------------------------------
Converts a Euclidevolution to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[unpronounceable]] . EvolutionsReader [[menken]] ( Map < String , List < Evolution > > [[unpronounceable]] ) { return new SimpleEvolutionsReader ( [[unpronounceable]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 613 ---------------------------------------------
Loads bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[equilibrium]] ) { return load ( Guiceable . [[equilibrium]] ( [[equilibrium]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 614 ---------------------------------------------
Builds a builder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[ruslan]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 615 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 324 / 41 / 615:  62%|██████▏   | 615/1000 [26:42<16:42,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 324 / 41 / 615:  62%|██████▏   | 616/1000 [26:47<16:42,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 325 / 41 / 616:  62%|██████▏   | 616/1000 [26:47<16:42,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 325 / 41 / 616:  62%|██████▏   | 617/1000 [26:49<16:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 326 / 41 / 617:  62%|██████▏   | 617/1000 [26:49<16:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 326 / 41 / 617:  62%|██████▏   | 618/1000 [26:54<16:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 327 / 41 / 618:  62%|██████▏   | 618/1000 [26:54<16:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 327 / 41 / 618:  62%|██████▏   | 619/1000 [26:55<16:34,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 328 / 41 / 619:  62%|██████▏   | 619/1000 [26:55<16:34,  2.61s/it][Succeeded / Failed / Skipped / Total] 250 / 328 / 41 / 619:  62%|██████▏   | 620/1000 [27:02<16:34,  2.62s/it][Succeeded / Failed / Skipped / Total] 251 / 328 / 41 / 620:  62%|██████▏   | 620/1000 [27:02<16:34,  2.62s/it][Succeeded / Failed / Skipped / Total] 251 / 328 / 41 / 620:  62%|██████▏   | 621/1000 [27:04<16:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 252 / 328 / 41 / 621:  62%|██████▏   | 621/1000 [27:04<16:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 252 / 328 / 41 / 621:  62%|██████▏   | 622/1000 [27:06<16:28,  2.62s/it]Sets the related entity . -->  --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[blankly]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 616 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; encode ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[amendments]] = new StringBuilder ( ) ; encode ( [[amendments]] , cookie ) ; return stripTrailingSeparator ( [[amendments]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 617 ---------------------------------------------
Create a AESAAAAAck Client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[exertions]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[exertions]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 618 ---------------------------------------------
Executes a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[equilibrium]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Converts a list of Euclides to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[executing]] . EvolutionsReader forDefault ( Evolution ... [[executing]] ) { Map < String , List < Evolution > > [[spidey]] = new HashMap < String , List < Evolution > > ( ) ; [[spidey]] . put ( "default" , Arrays . asList ( [[executing]] ) ) ; return fromMap ( [[spidey]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 620 ---------------------------------------------
Returns a collection of errors . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[displays]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Adds a message to the map . --> Add a message to a map --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[dressing]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 622 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 328 / 41 / 622:  62%|██████▏   | 622/1000 [27:06<16:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 253 / 328 / 41 / 622:  62%|██████▏   | 623/1000 [27:09<16:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 253 / 329 / 41 / 623:  62%|██████▏   | 623/1000 [27:09<16:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 253 / 329 / 41 / 623:  62%|██████▏   | 624/1000 [27:12<16:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 329 / 41 / 624:  62%|██████▏   | 624/1000 [27:12<16:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 329 / 41 / 624:  62%|██████▎   | 625/1000 [27:14<16:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 330 / 41 / 625:  62%|██████▎   | 625/1000 [27:14<16:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 330 / 41 / 625:  63%|██████▎   | 626/1000 [27:16<16:17,  2.61s/it][Succeeded / Failed / Skipped / Total] 255 / 330 / 41 / 626:  63%|██████▎   | 626/1000 [27:16<16:17,  2.61s/it][Succeeded / Failed / Skipped / Total] 255 / 330 / 41 / 626:  63%|██████▎   | 627/1000 [27:17<16:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 330 / 41 / 627:  63%|██████▎   | 627/1000 [27:17<16:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 330 / 41 / 627:  63%|██████▎   | 628/1000 [27:17<16:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 330 / 42 / 628:  63%|██████▎   | 628/1000 [27:17<16:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 330 / 42 / 628:  63%|██████▎   | 629/1000 [27:17<16:05,  2.60s/it][Succeeded / Failed / Skipped / Total] 256 / 331 / 42 / 629:  63%|██████▎   | 629/1000 [27:17<16:05,  2.60s/it][Succeeded / Failed / Skipped / Total] 256 / 331 / 42 / 629:  63%|██████▎   | 630/1000 [27:20<16:03,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 331 / 42 / 630:  63%|██████▎   | 630/1000 [27:20<16:03,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 331 / 42 / 630:  63%|██████▎   | 631/1000 [27:21<16:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 332 / 42 / 631:  63%|██████▎   | 631/1000 [27:21<16:00,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 332 / 42 / 631:  63%|██████▎   | 632/1000 [27:24<15:57,  2.60s/it]Generates a new form with the given value . --> Obtain a new validator --> Socre: 1.0

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[beaulieu]] ( T [[hoeing]] ) { if ( [[hoeing]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[hoeing]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Returns a remote client . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[unclouded]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 624 ---------------------------------------------
Generates a form . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[blessings]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[blessings]] . rawData ( ) , [[blessings]] . files ( ) , [[blessings]] . errors ( ) , [[blessings]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 625 ---------------------------------------------
Converts text to text . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[capture]] > [[capture]] parse ( String text , Class < [[capture]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 626 ---------------------------------------------
Converts the given text to a field . --> Parse text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[coronado]] > [[coronado]] parse ( Field field , String text ) { return ( [[coronado]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 627 ---------------------------------------------
Returns the value associated with the given key . --> Returns a new key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[bruto]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 628 ---------------------------------------------
Registers the given type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 629 ---------------------------------------------
Return arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[mise]] ( Object [ ] [[fumigating]] ) { if ( [[fumigating]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[hulland]] = Arrays . stream ( [[fumigating]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[hulland]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 630 ---------------------------------------------
Converts a string to conversion --> Convert a conversion to a conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Motor]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Motor]] . class ) ) { return conversion . convert ( t , [[Motor]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Print a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Ludwig]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 333 / 42 / 632:  63%|██████▎   | 632/1000 [27:24<15:57,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 333 / 42 / 632:  63%|██████▎   | 633/1000 [27:25<15:53,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 334 / 42 / 633:  63%|██████▎   | 633/1000 [27:25<15:53,  2.60s/it][Succeeded / Failed / Skipped / Total] 257 / 334 / 42 / 633:  63%|██████▎   | 634/1000 [27:34<15:55,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 335 / 42 / 634:  63%|██████▎   | 634/1000 [27:34<15:55,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 335 / 42 / 634:  64%|██████▎   | 635/1000 [27:40<15:54,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 335 / 42 / 635:  64%|██████▎   | 635/1000 [27:40<15:54,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 335 / 42 / 635:  64%|██████▎   | 636/1000 [27:42<15:51,  2.61s/it][Succeeded / Failed / Skipped / Total] 258 / 336 / 42 / 636:  64%|██████▎   | 636/1000 [27:42<15:51,  2.61s/it][Succeeded / Failed / Skipped / Total] 258 / 336 / 42 / 636:  64%|██████▎   | 637/1000 [27:47<15:50,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 337 / 42 / 637:  64%|██████▎   | 637/1000 [27:47<15:50,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 337 / 42 / 637:  64%|██████▍   | 638/1000 [27:50<15:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 338 / 42 / 638:  64%|██████▍   | 638/1000 [27:50<15:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 258 / 338 / 42 / 638:  64%|██████▍   | 639/1000 [27:51<15:44,  2.62s/it]Converts a string to a conversion . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Cliff]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Cliff]] . class ) ) ) { return ( [[Cliff]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Cliff]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Cliff]] . class ) ) { return conversion . convert ( t , [[Cliff]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
Creates a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > bypassWith ( Function < In , F . Either < [[FlowIn]] , [[Out]] > > splitter , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[ascot]] , [[Requite]] > Flow < In , [[Requite]] , ? > bypassWith ( Function < In , F . Either < [[ascot]] , [[Requite]] > > splitter , Flow < [[ascot]] , [[Requite]] , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 634 ---------------------------------------------
Creates a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Flow < In , F . Either < FlowIn , Out > , ? > [[conquerors]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[conquerors]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 635 ---------------------------------------------
Selects a node with the given path . --> Convenience method for creating a new path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[honeywell]] ( String path , Object [[dolphin]] ) { return [[honeywell]] ( path , [[dolphin]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Convert an array to an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[boeing]] ( T [ ] [[attire]] ) { return [[boeing]] ( java . util . Arrays . asList ( [[attire]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 637 ---------------------------------------------
Parses a locale . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Valet]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Returns a new array with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[records]] ) { return toSeq ( [[records]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 639 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 338 / 42 / 639:  64%|██████▍   | 639/1000 [27:51<15:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 259 / 338 / 42 / 639:  64%|██████▍   | 640/1000 [27:52<15:41,  2.61s/it][Succeeded / Failed / Skipped / Total] 259 / 339 / 42 / 640:  64%|██████▍   | 640/1000 [27:52<15:41,  2.61s/it][Succeeded / Failed / Skipped / Total] 259 / 339 / 42 / 640:  64%|██████▍   | 641/1000 [27:54<15:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 339 / 42 / 641:  64%|██████▍   | 641/1000 [27:54<15:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 339 / 42 / 641:  64%|██████▍   | 642/1000 [27:58<15:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 261 / 339 / 42 / 642:  64%|██████▍   | 642/1000 [27:58<15:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 261 / 339 / 42 / 642:  64%|██████▍   | 643/1000 [28:05<15:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 261 / 340 / 42 / 643:  64%|██████▍   | 643/1000 [28:05<15:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 261 / 340 / 42 / 643:  64%|██████▍   | 644/1000 [28:06<15:32,  2.62s/it]Sends a message . --> Construct a Request message from a message --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[knowing]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[knowing]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 640 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[blackheads]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 641 ---------------------------------------------
Registers a converter . --> Register a Class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[trim]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[trim]] ) != null ) ; } public Object convert ( Object [[flatter]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( [[trim]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[flatter]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[flatter]] , ex ) ; } } public String toString ( ) { return "@" + [[trim]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[trim]] ) != null ) ; } public Object convert ( Object [[flatter]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[trim]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[flatter]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[flatter]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[trim]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 642 ---------------------------------------------
Returns true if the given class is enabled . --> Checks if a class is enabled --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[Floorboard]]" == "[[Floorboard]]" ) ; return "[[Floorboard]]" == "[[Floorboard]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 643 ---------------------------------------------
Creates a new java . util . util . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[reena]] ( java . util . List < T > [[arrests]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[arrests]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 341 / 42 / 644:  64%|██████▍   | 644/1000 [28:06<15:32,  2.62s/it][Succeeded / Failed / Skipped / Total] 261 / 341 / 42 / 644:  64%|██████▍   | 645/1000 [28:09<15:29,  2.62s/it][Succeeded / Failed / Skipped / Total] 262 / 341 / 42 / 645:  64%|██████▍   | 645/1000 [28:09<15:29,  2.62s/it][Succeeded / Failed / Skipped / Total] 262 / 341 / 42 / 645:  65%|██████▍   | 646/1000 [28:13<15:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 263 / 341 / 42 / 646:  65%|██████▍   | 646/1000 [28:13<15:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 263 / 341 / 42 / 646:  65%|██████▍   | 647/1000 [28:25<15:30,  2.64s/it][Succeeded / Failed / Skipped / Total] 264 / 341 / 42 / 647:  65%|██████▍   | 647/1000 [28:25<15:30,  2.64s/it][Succeeded / Failed / Skipped / Total] 264 / 341 / 42 / 647:  65%|██████▍   | 648/1000 [28:27<15:27,  2.64s/it][Succeeded / Failed / Skipped / Total] 264 / 342 / 42 / 648:  65%|██████▍   | 648/1000 [28:27<15:27,  2.64s/it][Succeeded / Failed / Skipped / Total] 264 / 342 / 42 / 648:  65%|██████▍   | 649/1000 [28:29<15:24,  2.63s/it][Succeeded / Failed / Skipped / Total] 265 / 342 / 42 / 649:  65%|██████▍   | 649/1000 [28:29<15:24,  2.63s/it][Succeeded / Failed / Skipped / Total] 265 / 342 / 42 / 649:  65%|██████▌   | 650/1000 [28:33<15:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 266 / 342 / 42 / 650:  65%|██████▌   | 650/1000 [28:33<15:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 266 / 342 / 42 / 650:  65%|██████▌   | 651/1000 [28:33<15:18,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 342 / 43 / 651:  65%|██████▌   | 651/1000 [28:33<15:18,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 342 / 43 / 651:  65%|██████▌   | 652/1000 [28:34<15:15,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 343 / 43 / 652:  65%|██████▌   | 652/1000 [28:34<15:15,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 343 / 43 / 652:  65%|██████▌   | 653/1000 [28:35<15:11,  2.63s/it]Produces a JSON message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Smokestacks]] , Out > MappedWebSocketAcceptor < [[Smokestacks]] , Out > [[approachable]] ( Class < [[Smokestacks]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Get a string . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[cracked]] ( String [[execute]] , Object ... args ) { return messagesApi . get ( lang , [[execute]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 646 ---------------------------------------------
Returns a list of messages . --> Return a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[darlene]] ( List < String > [[therapists]] , Object ... args ) { return messagesApi . get ( lang , [[therapists]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 647 ---------------------------------------------
Returns true if the class is a primitive type . --> Checks if a parameter is a getter --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[aix]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[dental]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Create a new gener --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[bib]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[bib]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 649 ---------------------------------------------
Sorts a single element . --> Sorts a comparator --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[karpov]] ( int index , int [[thunderstorm]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[thunderstorm]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 650 ---------------------------------------------
Returns a floating point . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > [[destClass]] ) { float cost = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[bandaging]] ( final Class < ? > [[matthews]] , final Class < ? > [[kahn]] ) { float cost = 0.0f ; Class < ? > cls = [[matthews]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 651 ---------------------------------------------
Visit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Create url . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String driver , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 653 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 344 / 43 / 653:  65%|██████▌   | 653/1000 [28:35<15:11,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 344 / 43 / 653:  65%|██████▌   | 654/1000 [28:37<15:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 267 / 344 / 43 / 654:  65%|██████▌   | 654/1000 [28:37<15:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 267 / 344 / 43 / 654:  66%|██████▌   | 655/1000 [28:49<15:10,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 345 / 43 / 655:  66%|██████▌   | 655/1000 [28:49<15:10,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 345 / 43 / 655:  66%|██████▌   | 656/1000 [28:50<15:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 346 / 43 / 656:  66%|██████▌   | 656/1000 [28:50<15:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 346 / 43 / 656:  66%|██████▌   | 657/1000 [28:51<15:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 347 / 43 / 657:  66%|██████▌   | 657/1000 [28:51<15:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 347 / 43 / 657:  66%|██████▌   | 658/1000 [28:55<15:02,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 348 / 43 / 658:  66%|██████▌   | 658/1000 [28:55<15:02,  2.64s/it][Succeeded / Failed / Skipped / Total] 267 / 348 / 43 / 658:  66%|██████▌   | 659/1000 [28:56<14:58,  2.64s/it]Create a new generator . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > actorRef ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Adversary]] , Out > Flow < [[Adversary]] , Out , ? > actorRef ( Function < ActorRef , Props > [[tino]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[Adversary]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[tino]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 654 ---------------------------------------------
Visits a visitor to visit a visitor . --> Visit a visitor . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[accuse]] ) { if ( from != [[accuse]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[accuse]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[accuse]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[accuse]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[accuse]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[accuse]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[accuse]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[accuse]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[accuse]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[accuse]] ) ; } } else { if ( [[accuse]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[accuse]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[accuse]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[accuse]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[accuse]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[accuse]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 655 ---------------------------------------------
Populates a type . --> [[[FAILED]]]

[[[[Adv]]]]: public void zero_or_null ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 656 ---------------------------------------------
Traverses a state . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[levin]] ) { load_local ( state . argumentTypes [ [[levin]] ] , state . localOffset + skipArgs ( [[levin]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 657 ---------------------------------------------
Sorts a sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void quickSort ( int index , int lo , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int lo , int hi , Comparator [[hospitalized]] ) { chooseComparer ( index , [[hospitalized]] ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 658 ---------------------------------------------
Invokes an object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[persecutions]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 659 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 348 / 43 / 659:  66%|██████▌   | 659/1000 [28:56<14:58,  2.64s/it][Succeeded / Failed / Skipped / Total] 268 / 348 / 43 / 659:  66%|██████▌   | 660/1000 [28:57<14:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 348 / 44 / 660:  66%|██████▌   | 660/1000 [28:57<14:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 348 / 44 / 660:  66%|██████▌   | 661/1000 [28:59<14:52,  2.63s/it][Succeeded / Failed / Skipped / Total] 269 / 348 / 44 / 661:  66%|██████▌   | 661/1000 [28:59<14:52,  2.63s/it][Succeeded / Failed / Skipped / Total] 269 / 348 / 44 / 661:  66%|██████▌   | 662/1000 [29:06<14:51,  2.64s/it][Succeeded / Failed / Skipped / Total] 270 / 348 / 44 / 662:  66%|██████▌   | 662/1000 [29:06<14:51,  2.64s/it][Succeeded / Failed / Skipped / Total] 270 / 348 / 44 / 662:  66%|██████▋   | 663/1000 [29:07<14:48,  2.64s/it][Succeeded / Failed / Skipped / Total] 271 / 348 / 44 / 663:  66%|██████▋   | 663/1000 [29:07<14:48,  2.64s/it][Succeeded / Failed / Skipped / Total] 271 / 348 / 44 / 663:  66%|██████▋   | 664/1000 [29:07<14:44,  2.63s/it][Succeeded / Failed / Skipped / Total] 271 / 348 / 45 / 664:  66%|██████▋   | 664/1000 [29:07<14:44,  2.63s/it][Succeeded / Failed / Skipped / Total] 271 / 348 / 45 / 664:  66%|██████▋   | 665/1000 [29:08<14:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 272 / 348 / 45 / 665:  66%|██████▋   | 665/1000 [29:08<14:40,  2.63s/it]Sets the label . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[anthropology]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[mutate]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[mutate]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[mutate]] ) ; e . goTo ( end ) ; e . mark ( [[mutate]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 660 ---------------------------------------------
Processes the given type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Resolves all classes in the given class . --> Return a copy of this class --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[superman]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[superman]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 662 ---------------------------------------------
constructor constructor . --> constructor constructor --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "[[Tinhorn]]" == "[[Tinhorn]]" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 663 ---------------------------------------------
Move the type . --> Unregister a type --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( [[end]] ) ; mark ( [[nonNull]] ) ; unbox ( [[type]] ) ; mark ( [[end]] ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[accelerating]] ( Type [[confining]] ) { if ( TypeUtils . isPrimitive ( [[confining]] ) ) { if ( [[confining]] != Type . VOID_TYPE ) { Label [[arjuna]] = make_label ( ) ; Label [[tuckered]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[arjuna]] ) ; pop ( ) ; zero_or_null ( [[confining]] ) ; goTo ( [[tuckered]] ) ; mark ( [[arjuna]] ) ; unbox ( [[confining]] ) ; mark ( [[tuckered]] ) ; } } else { checkcast ( [[confining]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 664 ---------------------------------------------
Build a map of methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Returns the value of the specified int . --> Return the bounding box --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[c]] = 0 ; while ( w != 0 ) { [[c]] += T [ w & 255 ] ; w >>= 8 ; } return [[c]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int [[deteriorating]] = 0 ; while ( w != 0 ) { [[deteriorating]] += T [ w & 255 ] ; w >>= 8 ; } return [[deteriorating]] ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
[Succeeded / Failed / Skipped / Total] 273 / 348 / 45 / 666:  67%|██████▋   | 666/1000 [29:08<14:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 273 / 348 / 45 / 666:  67%|██████▋   | 667/1000 [29:08<14:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 349 / 45 / 667:  67%|██████▋   | 667/1000 [29:08<14:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 350 / 45 / 668:  67%|██████▋   | 668/1000 [29:12<14:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 350 / 45 / 668:  67%|██████▋   | 669/1000 [29:15<14:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 350 / 45 / 669:  67%|██████▋   | 669/1000 [29:15<14:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 351 / 45 / 670:  67%|██████▋   | 670/1000 [29:23<14:28,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 351 / 45 / 670:  67%|██████▋   | 671/1000 [29:27<14:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 352 / 45 / 671:  67%|██████▋   | 671/1000 [29:27<14:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 352 / 45 / 671:  67%|██████▋   | 672/1000 [29:27<14:22,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 353 / 45 / 672:  67%|██████▋   | 672/1000 [29:27<14:22,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 353 / 45 / 672:  67%|██████▋   | 673/1000 [29:28<14:19,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 354 / 45 / 673:  67%|██████▋   | 673/1000 [29:28<14:19,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 354 / 45 / 673:  67%|██████▋   | 674/1000 [29:29<14:15,  2.63s/it]--------------------------------------------- Result 666 ---------------------------------------------
Sets the superclass . --> setter for superclass --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[superclass]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[excessive]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[luciano]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Computes the cost of a given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[mariano]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[mariano]] += 1.5f ; } return [[mariano]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 668 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[excommunicate]] ( Method [[euclid]] ) { [[excommunicate]] ( ReflectUtils . getSignature ( [[euclid]] ) , ReflectUtils . getExceptionTypes ( [[euclid]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 669 ---------------------------------------------
Read a String from a file . --> Read a file from a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[barkeep]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 670 ---------------------------------------------
Return a list of interfaces --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] interfaces , List methods ) { [[getMethods]] ( [[superclass]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[shittiest]] ( Class [[mcguinn]] , Class [ ] interfaces , List methods ) { [[shittiest]] ( [[mcguinn]] , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 671 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[heaters]] ( final String [[whaddaya]] ) { this . host = [[heaters]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[heaters]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 672 ---------------------------------------------
Creates a new HTTP POST request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[catholic]] ( final String [[belafonte]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[belafonte]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 673 ---------------------------------------------
Resolves a given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[providers]] ) { if ( StringUtil . startsWithChar ( [[providers]] , File . separatorChar ) ) { [[providers]] = [[providers]] . substring ( 1 ) ; } return base . resolve ( [[providers]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 674 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 355 / 45 / 674:  67%|██████▋   | 674/1000 [29:29<14:15,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 355 / 45 / 674:  68%|██████▊   | 675/1000 [29:29<14:12,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 356 / 45 / 675:  68%|██████▊   | 675/1000 [29:29<14:12,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 356 / 45 / 675:  68%|██████▊   | 676/1000 [29:30<14:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 357 / 45 / 676:  68%|██████▊   | 676/1000 [29:30<14:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 357 / 45 / 676:  68%|██████▊   | 677/1000 [29:38<14:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 358 / 45 / 677:  68%|██████▊   | 677/1000 [29:38<14:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 274 / 358 / 45 / 677:  68%|██████▊   | 678/1000 [29:42<14:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 275 / 358 / 45 / 678:  68%|██████▊   | 678/1000 [29:42<14:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 275 / 358 / 45 / 678:  68%|██████▊   | 679/1000 [29:43<14:02,  2.63s/it][Succeeded / Failed / Skipped / Total] 276 / 358 / 45 / 679:  68%|██████▊   | 679/1000 [29:43<14:02,  2.63s/it][Succeeded / Failed / Skipped / Total] 276 / 358 / 45 / 679:  68%|██████▊   | 680/1000 [29:43<13:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 358 / 45 / 680:  68%|██████▊   | 680/1000 [29:43<13:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 358 / 45 / 680:  68%|██████▊   | 681/1000 [29:43<13:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 359 / 45 / 681:  68%|██████▊   | 681/1000 [29:43<13:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 359 / 45 / 681:  68%|██████▊   | 682/1000 [29:44<13:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 360 / 45 / 682:  68%|██████▊   | 682/1000 [29:44<13:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 360 / 45 / 682:  68%|██████▊   | 683/1000 [29:45<13:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 278 / 360 / 45 / 683:  68%|██████▊   | 683/1000 [29:45<13:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 278 / 360 / 45 / 683:  68%|██████▊   | 684/1000 [29:49<13:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 361 / 45 / 684:  68%|██████▊   | 684/1000 [29:49<13:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 361 / 45 / 684:  68%|██████▊   | 685/1000 [29:53<13:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 362 / 45 / 685:  68%|██████▊   | 685/1000 [29:53<13:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 362 / 45 / 685:  69%|██████▊   | 686/1000 [29:53<13:40,  2.61s/it][Succeeded / Failed / Skipped / Total] 279 / 362 / 45 / 686:  69%|██████▊   | 686/1000 [29:53<13:40,  2.61s/it][Succeeded / Failed / Skipped / Total] 279 / 362 / 45 / 686:  69%|██████▊   | 687/1000 [29:55<13:37,  2.61s/it]Returns a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest get ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String [[goest]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[goest]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 675 ---------------------------------------------
Set the default policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[thwart]] ( NamingPolicy [[goest]] ) { if ( [[goest]] == null ) [[goest]] = DefaultNamingPolicy . INSTANCE ; this . [[alans]] = [[goest]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 676 ---------------------------------------------
Creates a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[anarkali]] ( final String [[cub]] , final String destination ) { return new HttpRequest ( ) . [[cub]] ( [[cub]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Create a new request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[poopie]] ( final String [[maverick]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[maverick]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[christy]] ( final String [[berliners]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[berliners]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 679 ---------------------------------------------
Creates a request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[incinerated]] ( final String [[buccaneers]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[buccaneers]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 680 ---------------------------------------------
Construct a request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[stuf]] ( final String [[knowing]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[knowing]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 681 ---------------------------------------------
Sets the HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest patch ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest patch ( final String [[dickheads]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[dickheads]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 682 ---------------------------------------------
Create a new HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[rahim]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 683 ---------------------------------------------
Create a new HTTP request . --> Http method to get the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[ostentation]] ( final String [[distresses]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[distresses]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 684 ---------------------------------------------
Build query . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[andrej]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[carvel]] ( String [[whimper]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Return the URL of the URL . --> Converts a protocol to a string --> Socre: 1.0

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[oxfam]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[oxfam]] . append ( protocol ) ; [[oxfam]] . append ( "://" ) ; } if ( host != null ) { [[oxfam]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[oxfam]] . append ( ' ' ) ; [[oxfam]] . append ( port ) ; } return [[oxfam]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
[Succeeded / Failed / Skipped / Total] 279 / 363 / 45 / 687:  69%|██████▊   | 687/1000 [29:55<13:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 279 / 363 / 45 / 687:  69%|██████▉   | 688/1000 [29:58<13:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 280 / 363 / 45 / 688:  69%|██████▉   | 688/1000 [29:58<13:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 280 / 363 / 45 / 688:  69%|██████▉   | 689/1000 [30:02<13:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 281 / 363 / 45 / 689:  69%|██████▉   | 689/1000 [30:02<13:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 281 / 363 / 45 / 689:  69%|██████▉   | 690/1000 [30:04<13:30,  2.62s/it][Succeeded / Failed / Skipped / Total] 282 / 363 / 45 / 690:  69%|██████▉   | 690/1000 [30:04<13:30,  2.62s/it][Succeeded / Failed / Skipped / Total] 282 / 363 / 45 / 690:  69%|██████▉   | 691/1000 [30:05<13:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 283 / 363 / 45 / 691:  69%|██████▉   | 691/1000 [30:05<13:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 283 / 363 / 45 / 691:  69%|██████▉   | 692/1000 [30:07<13:24,  2.61s/it][Succeeded / Failed / Skipped / Total] 283 / 364 / 45 / 692:  69%|██████▉   | 692/1000 [30:07<13:24,  2.61s/it][Succeeded / Failed / Skipped / Total] 283 / 364 / 45 / 692:  69%|██████▉   | 693/1000 [30:07<13:20,  2.61s/it][Succeeded / Failed / Skipped / Total] 284 / 364 / 45 / 693:  69%|██████▉   | 693/1000 [30:07<13:20,  2.61s/it][Succeeded / Failed / Skipped / Total] 284 / 364 / 45 / 693:  69%|██████▉   | 694/1000 [30:12<13:19,  2.61s/it][Succeeded / Failed / Skipped / Total] 285 / 364 / 45 / 694:  69%|██████▉   | 694/1000 [30:12<13:19,  2.61s/it][Succeeded / Failed / Skipped / Total] 285 / 364 / 45 / 694:  70%|██████▉   | 695/1000 [30:13<13:15,  2.61s/it]--------------------------------------------- Result 687 ---------------------------------------------
Processes the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label [[checkloop]] = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( [[checkloop]] ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( [[checkloop]] ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[sidle]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[departure]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label [[drooping]] = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[departure]] ) ; e . goTo ( [[drooping]] ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[departure]] ) ; e . array_load ( [[sidle]] ) ; callback . processElement ( [[sidle]] ) ; e . iinc ( [[departure]] , 1 ) ; e . mark ( [[drooping]] ) ; e . load_local ( [[departure]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 688 ---------------------------------------------
Encode a password . --> Write a request to a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String [[password]] ) { if ( username != null && [[password]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String [[cliff]] ) { if ( username != null && [[cliff]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[cliff]] ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 689 ---------------------------------------------
Send a response . --> Send a request to a response --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[foam]] > [[foam]] sendAndReceive ( final Function < HttpResponse , [[foam]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 690 ---------------------------------------------
Parse a query string . --> Load a HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[busload]] , final boolean [[poopie]] ) { this . [[cafés]] = HttpUtil . parseQuery ( queryString , [[poopie]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 691 ---------------------------------------------
Add a request . --> Add a request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[poom]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[poom]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[poom]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Adds a map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[fluorescent]] ( final Map < String , String > [[subculture]] ) { for ( Map . Entry < String , String > [[maldonado]] : [[subculture]] . entrySet ( ) ) { [[fluorescent]] . add ( [[maldonado]] . getKey ( ) , [[maldonado]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 693 ---------------------------------------------
Set the port header . --> Allocates a request to a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[alarming]] ( ) { String [[quickens]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[quickens]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[quickens]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Add filters to filter . --> Helper method to add a set of classes to this class --> Socre: 1.0

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[terminology]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[terminology]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
[Succeeded / Failed / Skipped / Total] 285 / 365 / 45 / 695:  70%|██████▉   | 695/1000 [30:13<13:15,  2.61s/it][Succeeded / Failed / Skipped / Total] 285 / 365 / 45 / 695:  70%|██████▉   | 696/1000 [30:13<13:12,  2.61s/it][Succeeded / Failed / Skipped / Total] 286 / 365 / 45 / 696:  70%|██████▉   | 696/1000 [30:13<13:12,  2.61s/it][Succeeded / Failed / Skipped / Total] 286 / 365 / 45 / 696:  70%|██████▉   | 697/1000 [30:19<13:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 286 / 366 / 45 / 697:  70%|██████▉   | 697/1000 [30:19<13:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 286 / 366 / 45 / 697:  70%|██████▉   | 698/1000 [30:22<13:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 366 / 45 / 698:  70%|██████▉   | 698/1000 [30:22<13:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 366 / 45 / 698:  70%|██████▉   | 699/1000 [30:25<13:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 367 / 45 / 699:  70%|██████▉   | 699/1000 [30:25<13:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 367 / 45 / 699:  70%|███████   | 700/1000 [30:26<13:02,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 368 / 45 / 700:  70%|███████   | 700/1000 [30:26<13:02,  2.61s/it][Succeeded / Failed / Skipped / Total] 287 / 368 / 45 / 700:  70%|███████   | 701/1000 [30:35<13:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 368 / 45 / 701:  70%|███████   | 701/1000 [30:35<13:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 368 / 45 / 701:  70%|███████   | 702/1000 [30:35<12:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 369 / 45 / 702:  70%|███████   | 702/1000 [30:35<12:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 369 / 45 / 702:  70%|███████   | 703/1000 [30:38<12:56,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 370 / 45 / 703:  70%|███████   | 703/1000 [30:38<12:56,  2.62s/it][Succeeded / Failed / Skipped / Total] 288 / 370 / 45 / 703:  70%|███████   | 704/1000 [30:38<12:53,  2.61s/it][Succeeded / Failed / Skipped / Total] 288 / 371 / 45 / 704:  70%|███████   | 704/1000 [30:38<12:53,  2.61s/it][Succeeded / Failed / Skipped / Total] 288 / 371 / 45 / 704:  70%|███████   | 705/1000 [30:47<12:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 371 / 45 / 705:  70%|███████   | 705/1000 [30:47<12:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 371 / 45 / 705:  71%|███████   | 706/1000 [30:48<12:49,  2.62s/it]--------------------------------------------- Result 695 ---------------------------------------------
 --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 696 ---------------------------------------------
Process actions . --> Execute the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[graciela]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 697 ---------------------------------------------
Adds all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[gayest]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 698 ---------------------------------------------
Processes the results . --> Recursively add a collection to the collection --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[magpie]] ( ) { final Collection < ActionResult > [[nhl]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[nhl]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 699 ---------------------------------------------
Gets property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[demonology]] > [[demonology]] getProperty ( final Object bean , final String name ) { BeanProperty [[confinement]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[confinement]] ) ; return ( [[demonology]] ) getIndexProperty ( [[confinement]] ) ; } else { try { resolveNestedProperties ( [[confinement]] ) ; return ( [[demonology]] ) getIndexProperty ( [[confinement]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 700 ---------------------------------------------
Get the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[lifesaving]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 701 ---------------------------------------------
Extract a string from a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[frets]] ( final String [[superheroes]] ) { int ndx = StringUtil . indexOfChars ( [[superheroes]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[superheroes]] ; } return [[superheroes]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the first handler . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[debilitating]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Gets a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[blurred]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 704 ---------------------------------------------
Set the setter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[bp]] , final Object value ) { Setter setter = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[phosphate]] , final Object value ) { Setter setter = [[phosphate]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 705 ---------------------------------------------
Adds a reference to the map . --> Put a map into a map --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[commandos]] ( final String [[rogelio]] , final Object [[nasher]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[rogelio]] , [[nasher]] ) ; }
[[[[Nl]]]]: Saves object reference .
[Succeeded / Failed / Skipped / Total] 289 / 372 / 45 / 706:  71%|███████   | 706/1000 [30:48<12:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 372 / 45 / 706:  71%|███████   | 707/1000 [30:49<12:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 373 / 45 / 707:  71%|███████   | 707/1000 [30:49<12:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 373 / 45 / 707:  71%|███████   | 708/1000 [30:57<12:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 289 / 374 / 45 / 708:  71%|███████   | 708/1000 [30:57<12:46,  2.62s/it][Succeeded / Failed / Skipped / Total] 290 / 374 / 45 / 709:  71%|███████   | 709/1000 [30:57<12:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 290 / 374 / 45 / 709:  71%|███████   | 710/1000 [30:57<12:38,  2.62s/it][Succeeded / Failed / Skipped / Total] 290 / 375 / 45 / 710:  71%|███████   | 710/1000 [30:57<12:38,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 375 / 45 / 711:  71%|███████   | 711/1000 [31:03<12:37,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 375 / 45 / 711:  71%|███████   | 712/1000 [31:03<12:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 376 / 45 / 712:  71%|███████   | 712/1000 [31:03<12:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 377 / 45 / 713:  71%|███████▏  | 713/1000 [31:06<12:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 377 / 45 / 713:  71%|███████▏  | 714/1000 [31:12<12:30,  2.62s/it]--------------------------------------------- Result 706 ---------------------------------------------
Returns the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "[[True]]" == "[[True]]" ; for ( Cookie [[cookie]] : REPLACEME0 ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[crowned]] = new StringBuilder ( ) ; boolean first = "[[Palanquin]]" == "[[Palanquin]]" ; for ( Cookie [[bengalis]] : REPLACEME0 ) { Integer maxAge = [[bengalis]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[crowned]] . append ( "; " ) ; } first = "False" != "False" ; [[crowned]] . append ( [[bengalis]] . getName ( ) ) ; [[crowned]] . append ( ' ' ) ; [[crowned]] . append ( [[bengalis]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[crowned]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 707 ---------------------------------------------
Returns the value of the specified object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object lookupObject ( final String [[ref]] ) { Object value = getObjectReference ( [[ref]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object lookupObject ( final String [[lashed]] ) { Object value = getObjectReference ( [[lashed]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[lashed]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[claes]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 709 ---------------------------------------------
Serializes a JSON object . --> Convenience method for creating a JSONObject --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[confrontational]] ) { if ( jsonContext . pushValue ( [[confrontational]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 710 ---------------------------------------------
Gets the table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[sequels]] ( final String [[cardassian]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[farmlands]] = tableRefs . get ( [[cardassian]] ) ; return [[farmlands]] == null ? null : [[farmlands]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Returns an unmodifiable query . --> Build a query descriptor --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String tableRef ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( tableRef ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[croup]] ( final String tableRef ) { DbEntityDescriptor [[reliance]] = getTableDescriptor ( tableRef ) ; if ( [[reliance]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return [[reliance]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 712 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[cluttered]] ( final String [[phosphate]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[phosphate]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 713 ---------------------------------------------
Finds the column of the given entity . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[barak]] ( final String [[coronado]] ) { for ( Map . Entry < String , TableRefData > [[ativan]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[ativan]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[coronado]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 714 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 291 / 378 / 45 / 714:  71%|███████▏  | 714/1000 [31:12<12:30,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 379 / 45 / 715:  72%|███████▏  | 715/1000 [31:15<12:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 291 / 379 / 45 / 715:  72%|███████▏  | 716/1000 [31:22<12:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 291 / 380 / 45 / 716:  72%|███████▏  | 716/1000 [31:22<12:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 292 / 380 / 45 / 717:  72%|███████▏  | 717/1000 [31:27<12:24,  2.63s/it][Succeeded / Failed / Skipped / Total] 292 / 380 / 45 / 717:  72%|███████▏  | 718/1000 [31:28<12:21,  2.63s/it][Succeeded / Failed / Skipped / Total] 292 / 381 / 45 / 718:  72%|███████▏  | 718/1000 [31:28<12:21,  2.63s/it][Succeeded / Failed / Skipped / Total] 292 / 382 / 45 / 719:  72%|███████▏  | 719/1000 [31:34<12:20,  2.64s/it][Succeeded / Failed / Skipped / Total] 292 / 382 / 45 / 719:  72%|███████▏  | 720/1000 [31:40<12:19,  2.64s/it][Succeeded / Failed / Skipped / Total] 292 / 383 / 45 / 720:  72%|███████▏  | 720/1000 [31:40<12:19,  2.64s/it][Succeeded / Failed / Skipped / Total] 292 / 383 / 45 / 720:  72%|███████▏  | 721/1000 [31:42<12:16,  2.64s/it]Construct a range from a range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label [[end]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , [[end]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[amber]] ( final Handler firstHandler , final Label start , final Label [[mex]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[amber]] ( firstHandler . nextHandler , start , [[mex]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[mex]] == null ? Integer . MAX_VALUE : [[mex]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 715 ---------------------------------------------
Registers a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[rea]] ( final String tableReference , final DbEntityDescriptor [[acquiesce]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[acquiesce]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Returns the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[lerner]] > [[lerner]] prepareGetValue ( final T t , final Class < [[lerner]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[lerner]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 717 ---------------------------------------------
Convert a name to a String . --> Returns a string representation of a string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder [[tableName]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[tableName]] . append ( [[convertedTableName]] ) ; } else { [[tableName]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[eagles]] ( final String propertyName ) { StringBuilder [[berliners]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[armenians]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[berliners]] . append ( [[armenians]] ) ; } else { [[berliners]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[berliners]] . toString ( ) ; } return uppercase ? toUppercase ( [[berliners]] ) . toString ( ) : toLowercase ( [[berliners]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a column to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[amber]] ( final String [[passing]] ) { String [[urvashi]] = convertColumnNameToPropertyName ( [[passing]] ) ; return convertPropertyNameToColumnName ( [[urvashi]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Create wrapper for wrapper wrapper --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[seaquest]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 720 ---------------------------------------------
Returns all the elements in this set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[gurgle]] ( ) { final Set < T > [[kiosk]] = new HashSet <> ( wrappers . size ( ) ) ; [[kiosk]] . addAll ( wrappers . values ( ) ) ; return [[kiosk]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 383 / 45 / 721:  72%|███████▏  | 721/1000 [31:42<12:16,  2.64s/it][Succeeded / Failed / Skipped / Total] 293 / 383 / 45 / 721:  72%|███████▏  | 722/1000 [31:47<12:14,  2.64s/it][Succeeded / Failed / Skipped / Total] 294 / 383 / 45 / 722:  72%|███████▏  | 722/1000 [31:47<12:14,  2.64s/it][Succeeded / Failed / Skipped / Total] 294 / 383 / 45 / 722:  72%|███████▏  | 723/1000 [31:49<12:11,  2.64s/it][Succeeded / Failed / Skipped / Total] 294 / 384 / 45 / 723:  72%|███████▏  | 723/1000 [31:49<12:11,  2.64s/it][Succeeded / Failed / Skipped / Total] 294 / 384 / 45 / 723:  72%|███████▏  | 724/1000 [31:55<12:10,  2.65s/it][Succeeded / Failed / Skipped / Total] 295 / 384 / 45 / 724:  72%|███████▏  | 724/1000 [31:55<12:10,  2.65s/it][Succeeded / Failed / Skipped / Total] 295 / 384 / 45 / 724:  72%|███████▎  | 725/1000 [31:57<12:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 296 / 384 / 45 / 725:  72%|███████▎  | 725/1000 [31:57<12:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 296 / 384 / 45 / 725:  73%|███████▎  | 726/1000 [32:02<12:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 296 / 385 / 45 / 726:  73%|███████▎  | 726/1000 [32:02<12:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 296 / 385 / 45 / 726:  73%|███████▎  | 727/1000 [32:07<12:03,  2.65s/it][Succeeded / Failed / Skipped / Total] 297 / 385 / 45 / 727:  73%|███████▎  | 727/1000 [32:07<12:03,  2.65s/it][Succeeded / Failed / Skipped / Total] 297 / 385 / 45 / 727:  73%|███████▎  | 728/1000 [32:07<12:00,  2.65s/it]Writes the request attribute . --> Writes the given object to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > [[attributeNames]] = [[servletRequest]] . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String [[attrName]] = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[shoah]] ( final HttpServletRequest [[attaches]] , final Targets targets ) { final Enumeration < String > [[greyhounds]] = [[attaches]] . getAttributeNames ( ) ; while ( [[greyhounds]] . hasMoreElements ( ) ) { final String [[hesse]] = [[greyhounds]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[hesse]] ) ; if ( name != null ) { final Object attrValue = [[attaches]] . getAttribute ( [[hesse]] ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 722 ---------------------------------------------
Initialize the wrapper class . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[politely]] ( final Class < ? extends T > wrapperClass ) { String [[disturb]] = wrapperClass . getName ( ) ; T [[horoscopes]] = lookup ( [[disturb]] ) ; if ( [[horoscopes]] == null ) { [[horoscopes]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[horoscopes]] ) ; wrappers . put ( [[disturb]] , [[horoscopes]] ) ; } return [[horoscopes]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 723 ---------------------------------------------
Returns the path of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[underneath]] ( final String [[stade]] ) { if ( [[stade]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[stade]] ) ; } else { return separatorsToUnix ( [[stade]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 724 ---------------------------------------------
Convert a file to a absolute path . --> Convert a File to a File --> Socre: 1.0

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String [[clueless]] ) { return new File ( [[clueless]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 725 ---------------------------------------------
Add a component to this component . --> Register a new component --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[apologized]] ) { Objects . requireNonNull ( [[apologized]] ) ; madvocComponents . add ( ClassConsumer . of ( [[apologized]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 726 ---------------------------------------------
Sets the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement [[st]] , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( [[st]] , index , [[t]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[banana]] ( final PreparedStatement [[conga]] , final int index , final Object [[rhinestones]] , final int dbSqlType ) throws SQLException { T [[aggrieved]] = TypeConverterManager . get ( ) . convertType ( [[rhinestones]] , sqlType ) ; set ( [[conga]] , index , [[aggrieved]] , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 727 ---------------------------------------------
Start the application . --> Gets the WebWebWebWebWebWebWebWebWebWebAppWebApp WebWebWebWebAppWebWebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[autographs]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 728 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 297 / 386 / 45 / 728:  73%|███████▎  | 728/1000 [32:07<12:00,  2.65s/it][Succeeded / Failed / Skipped / Total] 297 / 386 / 45 / 728:  73%|███████▎  | 729/1000 [32:08<11:57,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 386 / 45 / 729:  73%|███████▎  | 729/1000 [32:08<11:57,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 386 / 45 / 729:  73%|███████▎  | 730/1000 [32:14<11:55,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 387 / 45 / 730:  73%|███████▎  | 730/1000 [32:14<11:55,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 387 / 45 / 730:  73%|███████▎  | 731/1000 [32:15<11:52,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 388 / 45 / 731:  73%|███████▎  | 731/1000 [32:15<11:52,  2.65s/it][Succeeded / Failed / Skipped / Total] 298 / 388 / 45 / 731:  73%|███████▎  | 732/1000 [32:16<11:49,  2.65s/it][Succeeded / Failed / Skipped / Total] 299 / 388 / 45 / 732:  73%|███████▎  | 732/1000 [32:16<11:49,  2.65s/it][Succeeded / Failed / Skipped / Total] 299 / 388 / 45 / 732:  73%|███████▎  | 733/1000 [32:18<11:46,  2.64s/it]Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 729 ---------------------------------------------
Convenience method for creating a new Consumer action --> Adapts a Consumer --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[amber]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[maul]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 731 ---------------------------------------------
Register a manager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[greaves]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
Gets the excluder . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[missed]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
[Succeeded / Failed / Skipped / Total] 299 / 389 / 45 / 733:  73%|███████▎  | 733/1000 [32:18<11:46,  2.64s/it][Succeeded / Failed / Skipped / Total] 299 / 389 / 45 / 733:  73%|███████▎  | 734/1000 [32:24<11:44,  2.65s/it][Succeeded / Failed / Skipped / Total] 299 / 390 / 45 / 734:  73%|███████▎  | 734/1000 [32:24<11:44,  2.65s/it][Succeeded / Failed / Skipped / Total] 299 / 390 / 45 / 734:  74%|███████▎  | 735/1000 [32:26<11:41,  2.65s/it][Succeeded / Failed / Skipped / Total] 300 / 390 / 45 / 735:  74%|███████▎  | 735/1000 [32:26<11:41,  2.65s/it][Succeeded / Failed / Skipped / Total] 300 / 390 / 45 / 735:  74%|███████▎  | 736/1000 [32:29<11:39,  2.65s/it][Succeeded / Failed / Skipped / Total] 301 / 390 / 45 / 736:  74%|███████▎  | 736/1000 [32:29<11:39,  2.65s/it][Succeeded / Failed / Skipped / Total] 301 / 390 / 45 / 736:  74%|███████▎  | 737/1000 [32:32<11:36,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 390 / 45 / 737:  74%|███████▎  | 737/1000 [32:32<11:36,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 390 / 45 / 737:  74%|███████▍  | 738/1000 [32:36<11:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 391 / 45 / 738:  74%|███████▍  | 738/1000 [32:36<11:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 391 / 45 / 738:  74%|███████▍  | 739/1000 [32:37<11:31,  2.65s/it]--------------------------------------------- Result 733 ---------------------------------------------
Convert a name to a column --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder [[propertyName]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[i]] = 0 ; [[i]] < len ; [[i]] ++ ) { char c = columnName . charAt ( [[i]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( c ) ) ; } } return [[propertyName]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[pond]] ( final String columnName ) { StringBuilder [[jackal]] = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int [[vest]] = 0 ; [[vest]] < len ; [[vest]] ++ ) { char c = columnName . charAt ( [[vest]] ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[jackal]] . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { [[jackal]] . append ( Character . toLowerCase ( c ) ) ; } } return [[jackal]] . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 734 ---------------------------------------------
Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[j]] = 0 ; [[j]] < paramValues . length ; [[j]] ++ ) { final String p = paramValues [ [[j]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[j]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[extraterrestrials]] = 0 ; [[extraterrestrials]] < paramValues . length ; [[extraterrestrials]] ++ ) { final String p = paramValues [ [[extraterrestrials]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[extraterrestrials]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 735 ---------------------------------------------
Replies the regular expression . --> Convenience factory method for creating a cas --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[an]] ( final String ... includedJars ) { for ( final String [[cavalcade]] : includedJars ) { rulesJars . include ( [[cavalcade]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
Scans the given comparator . --> Convert a string representation to a string representation --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String includedEntry : [[includedEntries]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[priest]] ( final String ... [[oar]] ) { for ( final String includedEntry : [[oar]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 737 ---------------------------------------------
Hashes a byte array . --> Convert a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class type ) { final String [[blanche]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[blanche]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 738 ---------------------------------------------
Returns the filename of a file . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int [[separatorAdd]] ) { if ( [[filename]] == null ) { return null ; } int [[prefix]] = getPrefixLength ( [[filename]] ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = index + [[separatorAdd]] ; if ( [[prefix]] >= [[filename]] . length ( ) || index < 0 || [[prefix]] >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( [[prefix]] , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[lindell]] ( final String [[refining]] , final int [[deserves]] ) { if ( [[refining]] == null ) { return null ; } int [[cinematographic]] = getPrefixLength ( [[refining]] ) ; if ( [[cinematographic]] < 0 ) { return null ; } int index = indexOfLastSeparator ( [[refining]] ) ; int [[futuristic]] = index + [[deserves]] ; if ( [[cinematographic]] >= [[refining]] . length ( ) || index < 0 || [[cinematographic]] >= [[futuristic]] ) { return StringPool . EMPTY ; } return [[refining]] . substring ( [[cinematographic]] , [[futuristic]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 739 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 392 / 45 / 739:  74%|███████▍  | 739/1000 [32:37<11:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 392 / 45 / 739:  74%|███████▍  | 740/1000 [32:38<11:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 393 / 45 / 740:  74%|███████▍  | 740/1000 [32:38<11:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 393 / 45 / 740:  74%|███████▍  | 741/1000 [32:41<11:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 394 / 45 / 741:  74%|███████▍  | 741/1000 [32:41<11:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 394 / 45 / 741:  74%|███████▍  | 742/1000 [32:43<11:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 395 / 45 / 742:  74%|███████▍  | 742/1000 [32:43<11:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 395 / 45 / 742:  74%|███████▍  | 743/1000 [32:49<11:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 396 / 45 / 743:  74%|███████▍  | 743/1000 [32:49<11:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 302 / 396 / 45 / 743:  74%|███████▍  | 744/1000 [32:53<11:18,  2.65s/it][Succeeded / Failed / Skipped / Total] 303 / 396 / 45 / 744:  74%|███████▍  | 744/1000 [32:53<11:18,  2.65s/it][Succeeded / Failed / Skipped / Total] 303 / 396 / 45 / 744:  74%|███████▍  | 745/1000 [33:01<11:18,  2.66s/it]Returns the file extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[lastExtensionIndex]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[disciplining]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[cicadas]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[cicadas]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[cicadas]] ) ; extension = filename . substring ( [[cicadas]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[cicadas]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[cicadas]] ) ; extension = filename . substring ( [[cicadas]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 740 ---------------------------------------------
Get the excluded entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[beale]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 741 ---------------------------------------------
Scans a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
Get the scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[defending]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 743 ---------------------------------------------
Adds a path to a file . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[ordination]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
Scan a directory . --> Construct a file from a given file --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File [[root]] ) { String [[rootPath]] = [[root]] . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile [[ff]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = [[ff]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File [[zahra]] ) { String [[glorifying]] = [[zahra]] . getAbsolutePath ( ) ; if ( ! [[glorifying]] . endsWith ( File . separator ) ) { [[glorifying]] += File . separatorChar ; } final FindFile [[audacity]] = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[glorifying]] ) ; File file ; while ( ( file = [[audacity]] . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[glorifying]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[glorifying]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 745 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 397 / 45 / 745:  74%|███████▍  | 745/1000 [33:01<11:18,  2.66s/it][Succeeded / Failed / Skipped / Total] 303 / 397 / 45 / 745:  75%|███████▍  | 746/1000 [33:03<11:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 303 / 398 / 45 / 746:  75%|███████▍  | 746/1000 [33:03<11:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 303 / 398 / 45 / 746:  75%|███████▍  | 747/1000 [33:08<11:13,  2.66s/it][Succeeded / Failed / Skipped / Total] 304 / 398 / 45 / 747:  75%|███████▍  | 747/1000 [33:08<11:13,  2.66s/it][Succeeded / Failed / Skipped / Total] 304 / 398 / 45 / 747:  75%|███████▍  | 748/1000 [33:10<11:10,  2.66s/it][Succeeded / Failed / Skipped / Total] 305 / 398 / 45 / 748:  75%|███████▍  | 748/1000 [33:10<11:10,  2.66s/it][Succeeded / Failed / Skipped / Total] 305 / 398 / 45 / 748:  75%|███████▍  | 749/1000 [33:12<11:07,  2.66s/it][Succeeded / Failed / Skipped / Total] 305 / 399 / 45 / 749:  75%|███████▍  | 749/1000 [33:12<11:07,  2.66s/it][Succeeded / Failed / Skipped / Total] 305 / 399 / 45 / 749:  75%|███████▌  | 750/1000 [33:25<11:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 399 / 45 / 750:  75%|███████▌  | 750/1000 [33:25<11:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 399 / 45 / 750:  75%|███████▌  | 751/1000 [33:26<11:05,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 400 / 45 / 751:  75%|███████▌  | 751/1000 [33:26<11:05,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 400 / 45 / 751:  75%|███████▌  | 752/1000 [33:30<11:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 401 / 45 / 752:  75%|███████▌  | 752/1000 [33:30<11:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 401 / 45 / 752:  75%|███████▌  | 753/1000 [33:31<10:59,  2.67s/it]Gets the scope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[yoel]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[yoel]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 746 ---------------------------------------------
Creates a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object [[scope]] , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , [[scope]] , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[blurred]] ( final JtxTransactionMode tm , final Object [[brandish]] , final boolean [[frazier]] ) { return new DbJtxTransaction ( this , tm , [[brandish]] , [[frazier]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 747 ---------------------------------------------
Removes all sessions from the queue . --> Sets the size of along --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[iterator]] = tokenSet . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token [[token]] = [[iterator]] . next ( ) ; if ( [[token]] . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[baiano]] = tokenSet . iterator ( ) ; while ( [[baiano]] . hasNext ( ) ) { Token [[barrister]] = [[baiano]] . next ( ) ; if ( [[barrister]] . isExpired ( ) ) { [[baiano]] . remove ( ) ; continue ; } if ( [[barrister]] . validUntil < validUntilMin ) { validUntilMin = [[barrister]] . validUntil ; tokenToRemove = [[barrister]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 748 ---------------------------------------------
Copy a bean . --> Visit a Bean --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Canoodling]]" == "[[Canoodling]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 749 ---------------------------------------------
Sets the scope of the scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[allegra]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[allegra]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 750 ---------------------------------------------
Creates a new instance of the given bean . --> Returns the decoration for the given decoration --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy [[beanCopy]] = new BeanCopy ( source ) ; [[beanCopy]] . isSourceMap = source instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object source ) { BeanCopy [[decorations]] = new BeanCopy ( source ) ; [[decorations]] . isSourceMap = source instanceof Map ; return [[decorations]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 751 ---------------------------------------------
Register a new scope --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[acquiesce]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 752 ---------------------------------------------
Returns a set of tokens . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession [[session]] , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession [[chinks]] , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) [[chinks]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; [[chinks]] . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 306 / 402 / 45 / 753:  75%|███████▌  | 753/1000 [33:31<10:59,  2.67s/it][Succeeded / Failed / Skipped / Total] 306 / 402 / 45 / 753:  75%|███████▌  | 754/1000 [33:32<10:56,  2.67s/it][Succeeded / Failed / Skipped / Total] 307 / 402 / 45 / 754:  75%|███████▌  | 754/1000 [33:32<10:56,  2.67s/it][Succeeded / Failed / Skipped / Total] 307 / 402 / 45 / 754:  76%|███████▌  | 755/1000 [33:44<10:57,  2.68s/it][Succeeded / Failed / Skipped / Total] 307 / 403 / 45 / 755:  76%|███████▌  | 755/1000 [33:44<10:57,  2.68s/it][Succeeded / Failed / Skipped / Total] 307 / 403 / 45 / 755:  76%|███████▌  | 756/1000 [33:44<10:53,  2.68s/it][Succeeded / Failed / Skipped / Total] 307 / 404 / 45 / 756:  76%|███████▌  | 756/1000 [33:44<10:53,  2.68s/it][Succeeded / Failed / Skipped / Total] 307 / 404 / 45 / 756:  76%|███████▌  | 757/1000 [34:07<10:57,  2.71s/it][Succeeded / Failed / Skipped / Total] 308 / 404 / 45 / 757:  76%|███████▌  | 757/1000 [34:07<10:57,  2.71s/it][Succeeded / Failed / Skipped / Total] 308 / 404 / 45 / 757:  76%|███████▌  | 758/1000 [34:13<10:55,  2.71s/it]Loads a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "[[True]]" == "[[True]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File [[mansur]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[mansur]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[mansur]] . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "[[Benzi]]" == "[[Benzi]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 754 ---------------------------------------------
Resolve type . --> Resolve type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[pardons]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 755 ---------------------------------------------
Registers an entity . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[chumps]] ( final TemplateData [[isotope]] ) { super . init ( [[isotope]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[isotope]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[monthly]] = this . tableReference ; if ( [[monthly]] == null ) { [[monthly]] = tableAlias ; } if ( [[monthly]] == null ) { [[monthly]] = entityName ; } if ( [[monthly]] == null ) { [[monthly]] = ded . getEntityName ( ) ; } [[isotope]] . registerTableReference ( [[monthly]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 756 ---------------------------------------------
Removes a class from the class . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeBean ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void removeBean ( final Class [[meted]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 757 ---------------------------------------------
Visits a property . --> Synchronously initialize a bean --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object value ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[kero]] ( String [[strapped]] , final Object value ) { if ( isTargetMap ) { [[strapped]] = LEFT_SQ_BRACKET + [[strapped]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[strapped]] , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 405 / 45 / 758:  76%|███████▌  | 758/1000 [34:13<10:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 308 / 405 / 45 / 758:  76%|███████▌  | 759/1000 [34:18<10:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 308 / 406 / 45 / 759:  76%|███████▌  | 759/1000 [34:18<10:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 308 / 406 / 45 / 759:  76%|███████▌  | 760/1000 [34:24<10:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 309 / 406 / 45 / 760:  76%|███████▌  | 760/1000 [34:24<10:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 309 / 406 / 45 / 760:  76%|███████▌  | 761/1000 [34:25<10:48,  2.71s/it][Succeeded / Failed / Skipped / Total] 309 / 407 / 45 / 761:  76%|███████▌  | 761/1000 [34:25<10:48,  2.71s/it][Succeeded / Failed / Skipped / Total] 309 / 407 / 45 / 761:  76%|███████▌  | 762/1000 [34:26<10:45,  2.71s/it]Return true if the given set is set . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[weatherly]] ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[weatherly]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[weatherly]] == null ) ) { return "[[Hobbes]]" != "[[Hobbes]]" ; } boolean found = "[[Hobbes]]" != "[[Hobbes]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[weatherly]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 759 ---------------------------------------------
Resolve beans . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 760 ---------------------------------------------
Decode a byte array . --> Calculates how many --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int [[length]] = arr . length ; if ( [[length]] == 0 ) { return new byte [ 0 ] ; } int [[sndx]] = 0 , [[endx]] = [[length]] - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - [[sndx]] + 1 ; int sepCnt = [[length]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ [[sndx]] ++ ] ] << 18 | INV [ arr [ [[sndx]] ++ ] ] << 12 | INV [ arr [ [[sndx]] ++ ] ] << 6 | INV [ arr [ [[sndx]] ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[sndx]] += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; [[sndx]] <= [[endx]] - pad ; j ++ ) { i |= INV [ arr [ [[sndx]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[bear]] ( final char [ ] arr ) { int [[pazuzu]] = arr . length ; if ( [[pazuzu]] == 0 ) { return new byte [ 0 ] ; } int [[hobart]] = 0 , [[macmanus]] = [[pazuzu]] - 1 ; int pad = arr [ [[macmanus]] ] == ' ' ? ( arr [ [[macmanus]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[macmanus]] - [[hobart]] + 1 ; int sepCnt = [[pazuzu]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ [[hobart]] ++ ] ] << 18 | INV [ arr [ [[hobart]] ++ ] ] << 12 | INV [ arr [ [[hobart]] ++ ] ] << 6 | INV [ arr [ [[hobart]] ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[hobart]] += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; [[hobart]] <= [[macmanus]] - pad ; j ++ ) { i |= INV [ arr [ [[hobart]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 761 ---------------------------------------------
Resolves a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[maoris]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[stormy]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String beanName = entry . getKey ( ) ; [[stormy]] . add ( beanName ) ; } } if ( [[stormy]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[stormy]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 407 / 45 / 762:  76%|███████▌  | 762/1000 [34:26<10:45,  2.71s/it][Succeeded / Failed / Skipped / Total] 310 / 407 / 45 / 762:  76%|███████▋  | 763/1000 [34:41<10:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 310 / 408 / 45 / 763:  76%|███████▋  | 763/1000 [34:41<10:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 310 / 408 / 45 / 763:  76%|███████▋  | 764/1000 [34:42<10:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 311 / 408 / 45 / 764:  76%|███████▋  | 764/1000 [34:42<10:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 312 / 408 / 45 / 765:  76%|███████▋  | 765/1000 [34:42<10:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 312 / 408 / 45 / 765:  77%|███████▋  | 766/1000 [34:48<10:37,  2.73s/it]Destroy beans . --> Destroys a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < destroyMethodNames . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[i]] ] ) ; } destroyMethodPoints [ [[i]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int [[rogues]] ; for ( [[rogues]] = 0 ; [[rogues]] < destroyMethodNames . length ; [[rogues]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[rogues]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[rogues]] ] ) ; } destroyMethodPoints [ [[rogues]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 763 ---------------------------------------------
Adds a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[beanName]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[somebodies]] , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[somebodies]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Registers a bean definition . --> Register a dynamic methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , [[ref]] ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[snowboarders]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[snowboarders]] . type ) ; Method [[artem]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[snowboarders]] . type . getName ( ) + ' ' + methodName ) ; } [[artem]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[artem]] = md . getMethod ( ) ; } } if ( [[artem]] == null ) { throw new PetiteException ( "Method not found: " + [[snowboarders]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[acceptable]] = referencesResolver . resolveReferenceFromValues ( [[artem]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[artem]] , [[acceptable]] ) ; [[snowboarders]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 765 ---------------------------------------------
Register a bean type . --> Unbind a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[coop]] ( final Class [[conducting]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[conducting]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 766 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 409 / 45 / 766:  77%|███████▋  | 766/1000 [34:48<10:37,  2.73s/it][Succeeded / Failed / Skipped / Total] 313 / 409 / 45 / 767:  77%|███████▋  | 767/1000 [34:50<10:35,  2.73s/it][Succeeded / Failed / Skipped / Total] 313 / 409 / 45 / 767:  77%|███████▋  | 768/1000 [34:55<10:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 313 / 410 / 45 / 768:  77%|███████▋  | 768/1000 [34:55<10:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 314 / 410 / 45 / 769:  77%|███████▋  | 769/1000 [34:56<10:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 314 / 410 / 45 / 769:  77%|███████▋  | 770/1000 [34:57<10:26,  2.72s/it]Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[dotson]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 767 ---------------------------------------------
Call this method . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[perks]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 768 ---------------------------------------------
Adds a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[greenberg]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[colliding]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[colliding]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[colliding]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[colliding]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 769 ---------------------------------------------
Returns the Java version . --> Returns the number of times --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int version ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[kms]] ( final int version ) { final int [[booker]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[booker]] - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 410 / 45 / 770:  77%|███████▋  | 770/1000 [34:57<10:26,  2.72s/it][Succeeded / Failed / Skipped / Total] 316 / 410 / 45 / 771:  77%|███████▋  | 771/1000 [34:58<10:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 316 / 410 / 45 / 771:  77%|███████▋  | 772/1000 [34:59<10:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 317 / 410 / 45 / 772:  77%|███████▋  | 772/1000 [34:59<10:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 318 / 410 / 45 / 773:  77%|███████▋  | 773/1000 [35:00<10:16,  2.72s/it][Succeeded / Failed / Skipped / Total] 318 / 410 / 45 / 773:  77%|███████▋  | 774/1000 [35:06<10:14,  2.72s/it][Succeeded / Failed / Skipped / Total] 319 / 410 / 45 / 774:  77%|███████▋  | 774/1000 [35:06<10:14,  2.72s/it][Succeeded / Failed / Skipped / Total] 320 / 410 / 45 / 775:  78%|███████▊  | 775/1000 [35:10<10:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 320 / 410 / 45 / 775:  78%|███████▊  | 776/1000 [35:16<10:10,  2.73s/it]Initialize Method . --> Initializes the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[verdun]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[sandoval]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[sandoval]] == null ) { [[sandoval]] = StringPool . EMPTY_ARRAY ; } int total = [[sandoval]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[sandoval]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[sandoval]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[sandoval]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 771 ---------------------------------------------
overrides the visitor to get the value of the visitor --> overrides the visitor to create a string --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor [[mv]] , final int value ) { if ( value <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , value ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor [[winnin]] , final int value ) { if ( value <= 5 ) { [[winnin]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[winnin]] . visitIntInsn ( BIPUSH , value ) ; } else { [[winnin]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 772 ---------------------------------------------
Assert that index argument info . --> Thrown IllegalArgumentException --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[methodInfo]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[subdued]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[subdued]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Sets the parameter properties . --> Convenience method for creating a set of Maps --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[entry]] : properties . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[hande]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[desensitized]] : properties . entrySet ( ) ) { defineParameter ( [[desensitized]] . getKey ( ) . toString ( ) , [[desensitized]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 774 ---------------------------------------------
Return the name of a method name . --> Create a new protection --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[callback]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 775 ---------------------------------------------
overrides the visitor to load a method . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor [[augie]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[augie]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[augie]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[augie]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[augie]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[augie]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 321 / 410 / 45 / 776:  78%|███████▊  | 776/1000 [35:16<10:10,  2.73s/it][Succeeded / Failed / Skipped / Total] 321 / 410 / 45 / 776:  78%|███████▊  | 777/1000 [35:20<10:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 322 / 410 / 45 / 777:  78%|███████▊  | 777/1000 [35:20<10:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 322 / 410 / 45 / 777:  78%|███████▊  | 778/1000 [35:21<10:05,  2.73s/it][Succeeded / Failed / Skipped / Total] 323 / 410 / 45 / 778:  78%|███████▊  | 778/1000 [35:21<10:05,  2.73s/it][Succeeded / Failed / Skipped / Total] 323 / 410 / 45 / 778:  78%|███████▊  | 779/1000 [35:26<10:03,  2.73s/it][Succeeded / Failed / Skipped / Total] 324 / 410 / 45 / 779:  78%|███████▊  | 779/1000 [35:26<10:03,  2.73s/it][Succeeded / Failed / Skipped / Total] 324 / 410 / 45 / 779:  78%|███████▊  | 780/1000 [35:29<10:00,  2.73s/it][Succeeded / Failed / Skipped / Total] 324 / 411 / 45 / 780:  78%|███████▊  | 780/1000 [35:29<10:00,  2.73s/it][Succeeded / Failed / Skipped / Total] 325 / 411 / 45 / 781:  78%|███████▊  | 781/1000 [35:29<09:57,  2.73s/it][Succeeded / Failed / Skipped / Total] 325 / 411 / 45 / 781:  78%|███████▊  | 782/1000 [35:29<09:53,  2.72s/it][Succeeded / Failed / Skipped / Total] 325 / 411 / 46 / 782:  78%|███████▊  | 782/1000 [35:29<09:53,  2.72s/it]overrides the visitor to find the method . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[cet]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[cet]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 777 ---------------------------------------------
Register Method . --> overrides the visitor to look for methods --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class [[type]] , final String staticMethodName , final Class [ ] [[arguments]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( staticMethodName , [[arguments]] , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , [[md]] . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[marlborough]] ( final String [[dazs]] , final Class [[strident]] , final String staticMethodName , final Class [ ] [[theorists]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[strident]] ) ; MethodDescriptor [[revisiting]] = cd . getMethodDescriptor ( staticMethodName , [[theorists]] , "True" == "True" ) ; if ( [[revisiting]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[dazs]] , [[revisiting]] . getMethod ( ) ) ; providers . put ( [[dazs]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 778 ---------------------------------------------
Creates a named field name . --> Creates a &gt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int [[index]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[geir]] ( final String name , final int [[bri]] ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + [[bri]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 779 ---------------------------------------------
Creates a string representation of a method . --> Generate a string representation of a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[bloopers]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 780 ---------------------------------------------
load method --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Generate a method . --> implements the visitor to look for primitive types --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[henrik]] ( final MethodVisitor mv , final MethodInfo [[valorous]] , int varOffset ) { varOffset += [[valorous]] . getAllArgumentsSize ( ) ; switch ( [[valorous]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Gets the system property . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 325 / 412 / 46 / 783:  78%|███████▊  | 783/1000 [35:30<09:50,  2.72s/it][Succeeded / Failed / Skipped / Total] 325 / 412 / 46 / 783:  78%|███████▊  | 784/1000 [35:31<09:47,  2.72s/it][Succeeded / Failed / Skipped / Total] 325 / 413 / 46 / 784:  78%|███████▊  | 784/1000 [35:31<09:47,  2.72s/it][Succeeded / Failed / Skipped / Total] 326 / 413 / 46 / 785:  78%|███████▊  | 785/1000 [35:31<09:43,  2.72s/it][Succeeded / Failed / Skipped / Total] 326 / 413 / 46 / 785:  79%|███████▊  | 786/1000 [35:34<09:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 326 / 414 / 46 / 786:  79%|███████▊  | 786/1000 [35:34<09:41,  2.72s/it][Succeeded / Failed / Skipped / Total] 327 / 414 / 46 / 787:  79%|███████▊  | 787/1000 [35:36<09:38,  2.72s/it][Succeeded / Failed / Skipped / Total] 327 / 414 / 46 / 787:  79%|███████▉  | 788/1000 [35:41<09:36,  2.72s/it][Succeeded / Failed / Skipped / Total] 328 / 414 / 46 / 788:  79%|███████▉  | 788/1000 [35:41<09:36,  2.72s/it]Loads a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 0 ; [[i]] < [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[meself]] ( final MethodVisitor mv , final MethodInfo [[electrostatic]] ) { for ( int [[banded]] = 0 ; [[banded]] < [[electrostatic]] . getArgumentsCount ( ) ; [[banded]] ++ ) { loadMethodArgument ( mv , [[electrostatic]] , [[banded]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 784 ---------------------------------------------
overrides the visitor to find the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[panacea]] = 1 ; [[panacea]] <= methodInfo . getArgumentsCount ( ) ; [[panacea]] ++ ) { loadMethodArgument ( mv , methodInfo , [[panacea]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 785 ---------------------------------------------
Visits a class . --> Visit a primitive type --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[munde]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 786 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[ostentation]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 787 ---------------------------------------------
Send an HTTP response . --> Send an HTTP response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[hobbes]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Read a request from the request . --> Convenience method for creating a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[phenomenally]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 329 / 414 / 46 / 789:  79%|███████▉  | 789/1000 [35:44<09:33,  2.72s/it][Succeeded / Failed / Skipped / Total] 329 / 414 / 46 / 789:  79%|███████▉  | 790/1000 [35:56<09:33,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 415 / 46 / 790:  79%|███████▉  | 790/1000 [35:56<09:33,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 415 / 46 / 790:  79%|███████▉  | 791/1000 [35:58<09:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 416 / 46 / 791:  79%|███████▉  | 791/1000 [35:58<09:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 416 / 46 / 791:  79%|███████▉  | 792/1000 [36:00<09:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 330 / 416 / 46 / 792:  79%|███████▉  | 792/1000 [36:00<09:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 330 / 416 / 46 / 792:  79%|███████▉  | 793/1000 [36:07<09:25,  2.73s/it][Succeeded / Failed / Skipped / Total] 331 / 416 / 46 / 793:  79%|███████▉  | 793/1000 [36:07<09:25,  2.73s/it][Succeeded / Failed / Skipped / Total] 331 / 416 / 46 / 793:  79%|███████▉  | 794/1000 [36:11<09:23,  2.74s/it][Succeeded / Failed / Skipped / Total] 331 / 417 / 46 / 794:  79%|███████▉  | 794/1000 [36:11<09:23,  2.74s/it][Succeeded / Failed / Skipped / Total] 331 / 417 / 46 / 794:  80%|███████▉  | 795/1000 [36:12<09:20,  2.73s/it]implements the visitor to visit the visitor . --> implements the visitor to look for a given type --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[subconsciously]] ( final MethodVisitor [[pariahs]] , final Class componentType ) { if ( componentType == int . class ) { [[pariahs]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[pariahs]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[pariahs]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[pariahs]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[pariahs]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[pariahs]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[pariahs]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[pariahs]] . visitInsn ( CASTORE ) ; return ; } [[pariahs]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 790 ---------------------------------------------
Gets the default encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String [[defaultEncoding]] ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } encoding = [[defaultEncoding]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String [[bet]] ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( [[bet]] == null ) { [[bet]] = JoddCore . encoding ; } encoding = [[bet]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 791 ---------------------------------------------
Downloads a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[deccan]] ( final HttpServletResponse [[digital]] , final File [[furniture]] , final String mimeType ) { if ( ! [[furniture]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[furniture]] ) ; } if ( [[furniture]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[furniture]] ) ; } prepareResponse ( [[digital]] , [[furniture]] . getAbsolutePath ( ) , mimeType , ( int ) [[furniture]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Get the authentication header . --> Obtains a string from a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[gracious]] ( final HttpServletRequest [[alyssa]] ) { String [[boludo]] = [[alyssa]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[boludo]] == null ) { return null ; } int ndx = [[boludo]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[boludo]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 793 ---------------------------------------------
Set the servlet context . --> Convenience method to Criteria string --> Socre: 1.0

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext [[unpredictable]] , final String [[cambodian]] ) { String ctxPath = getContextPath ( [[unpredictable]] ) ; [[unpredictable]] . setAttribute ( [[cambodian]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 794 ---------------------------------------------
Sets the mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[ineffectual]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[transcripts]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[transcripts]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 331 / 418 / 46 / 795:  80%|███████▉  | 795/1000 [36:12<09:20,  2.73s/it][Succeeded / Failed / Skipped / Total] 331 / 418 / 46 / 795:  80%|███████▉  | 796/1000 [36:13<09:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 332 / 418 / 46 / 796:  80%|███████▉  | 796/1000 [36:13<09:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 332 / 418 / 46 / 796:  80%|███████▉  | 797/1000 [36:16<09:14,  2.73s/it][Succeeded / Failed / Skipped / Total] 333 / 418 / 46 / 797:  80%|███████▉  | 797/1000 [36:16<09:14,  2.73s/it][Succeeded / Failed / Skipped / Total] 333 / 418 / 46 / 797:  80%|███████▉  | 798/1000 [36:16<09:11,  2.73s/it][Succeeded / Failed / Skipped / Total] 334 / 418 / 46 / 798:  80%|███████▉  | 798/1000 [36:16<09:11,  2.73s/it][Succeeded / Failed / Skipped / Total] 334 / 418 / 46 / 798:  80%|███████▉  | 799/1000 [36:19<09:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 335 / 418 / 46 / 799:  80%|███████▉  | 799/1000 [36:19<09:08,  2.73s/it][Succeeded / Failed / Skipped / Total] 335 / 418 / 46 / 799:  80%|████████  | 800/1000 [36:20<09:05,  2.73s/it][Succeeded / Failed / Skipped / Total] 336 / 418 / 46 / 800:  80%|████████  | 800/1000 [36:20<09:05,  2.73s/it][Succeeded / Failed / Skipped / Total] 336 / 418 / 46 / 800:  80%|████████  | 801/1000 [36:22<09:02,  2.72s/it]Gets cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 796 ---------------------------------------------
Read a request from a stream . --> Get a reader from a reader --> Socre: 1.0

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest [[request]] ) throws IOException { String [[charEncoding]] = [[request]] . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest [[physiology]] ) throws IOException { String [[leash]] = [[physiology]] . getCharacterEncoding ( ) ; if ( [[leash]] == null ) { [[leash]] = JoddCore . encoding ; } CharArrayWriter [[avalanche]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[physiology]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[leash]] ) ) ; StreamUtil . copy ( bufferedReader , [[avalanche]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[avalanche]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 797 ---------------------------------------------
Returns a request parameter . --> Convert a parameter to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[salinas]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean [[crematoria]] ) { if ( treatEmptyParamsAsNull || [[crematoria]] ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( [[crematoria]] ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 798 ---------------------------------------------
Construct body from body body --> This method initializes the JsTag --> Socre: 1.0

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[earth]] ) throws JspException { if ( [[earth]] == null ) { return ; } try { [[earth]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
Initializes the strategy . --> Initializes the invocation --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[dystrophy]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 800 ---------------------------------------------
Renders a string . --> Generate a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[mopped]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 418 / 46 / 801:  80%|████████  | 801/1000 [36:22<09:02,  2.72s/it][Succeeded / Failed / Skipped / Total] 337 / 418 / 46 / 801:  80%|████████  | 802/1000 [36:23<08:58,  2.72s/it][Succeeded / Failed / Skipped / Total] 338 / 418 / 46 / 802:  80%|████████  | 802/1000 [36:23<08:58,  2.72s/it][Succeeded / Failed / Skipped / Total] 338 / 418 / 46 / 802:  80%|████████  | 803/1000 [36:27<08:56,  2.72s/it][Succeeded / Failed / Skipped / Total] 339 / 418 / 46 / 803:  80%|████████  | 803/1000 [36:27<08:56,  2.72s/it][Succeeded / Failed / Skipped / Total] 339 / 418 / 46 / 803:  80%|████████  | 804/1000 [36:28<08:53,  2.72s/it][Succeeded / Failed / Skipped / Total] 340 / 418 / 46 / 804:  80%|████████  | 804/1000 [36:28<08:53,  2.72s/it][Succeeded / Failed / Skipped / Total] 340 / 418 / 46 / 804:  80%|████████  | 805/1000 [36:37<08:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 341 / 418 / 46 / 805:  80%|████████  | 805/1000 [36:37<08:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 341 / 418 / 46 / 805:  81%|████████  | 806/1000 [36:37<08:48,  2.73s/it][Succeeded / Failed / Skipped / Total] 341 / 419 / 46 / 806:  81%|████████  | 806/1000 [36:37<08:48,  2.73s/it][Succeeded / Failed / Skipped / Total] 341 / 419 / 46 / 806:  81%|████████  | 807/1000 [36:43<08:47,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 419 / 46 / 807:  81%|████████  | 807/1000 [36:43<08:47,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 419 / 46 / 807:  81%|████████  | 808/1000 [36:48<08:44,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 420 / 46 / 808:  81%|████████  | 808/1000 [36:48<08:44,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 420 / 46 / 808:  81%|████████  | 809/1000 [36:49<08:41,  2.73s/it]Destroy a method . --> Unlock a method --> Socre: 1.0

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[snappy]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[snappy]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[snappy]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 802 ---------------------------------------------
Handles a request . --> Paints the given HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void storeContextPath ( final PageContext [[pageContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext [[hedwig]] , final String [[ece]] ) { String ctxPath = getContextPath ( [[hedwig]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[hedwig]] . getRequest ( ) ; request . setAttribute ( [[ece]] , ctxPath ) ; ServletContext [[greyhounds]] = [[hedwig]] . getServletContext ( ) ; [[greyhounds]] . setAttribute ( [[ece]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 803 ---------------------------------------------
Render the given body with the given body . --> Render a Fragment --> Socre: 1.0

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[shipman]] ) throws JspException { char [ ] [[anwar]] = renderBody ( [[shipman]] ) ; return new String ( [[anwar]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 804 ---------------------------------------------
Replies the request . --> Returns the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[miller]] , final String httpMethod ) { return [[miller]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 805 ---------------------------------------------
Appends a value to the given map . --> Append a value to a map --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[leones]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a new instance of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[barcode]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Adds a property to the base . --> Append a string to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String [[value]] , final boolean append ) { put ( null , baseProperties , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[guildford]] ( final String key , final String [[nas]] , final boolean append ) { put ( null , baseProperties , key , [[nas]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 808 ---------------------------------------------
Checks if a parameter is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[counsellor]] ( final ParamManager [[metallurgical]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 809 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 421 / 46 / 809:  81%|████████  | 809/1000 [36:49<08:41,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 421 / 46 / 809:  81%|████████  | 810/1000 [36:53<08:39,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 422 / 46 / 810:  81%|████████  | 810/1000 [36:53<08:39,  2.73s/it][Succeeded / Failed / Skipped / Total] 342 / 422 / 46 / 810:  81%|████████  | 811/1000 [36:58<08:37,  2.74s/it][Succeeded / Failed / Skipped / Total] 342 / 423 / 46 / 811:  81%|████████  | 811/1000 [36:58<08:37,  2.74s/it][Succeeded / Failed / Skipped / Total] 342 / 423 / 46 / 811:  81%|████████  | 812/1000 [37:00<08:34,  2.74s/it][Succeeded / Failed / Skipped / Total] 343 / 423 / 46 / 812:  81%|████████  | 812/1000 [37:00<08:34,  2.74s/it][Succeeded / Failed / Skipped / Total] 343 / 423 / 46 / 812:  81%|████████▏ | 813/1000 [37:09<08:32,  2.74s/it][Succeeded / Failed / Skipped / Total] 343 / 424 / 46 / 813:  81%|████████▏ | 813/1000 [37:09<08:32,  2.74s/it][Succeeded / Failed / Skipped / Total] 343 / 424 / 46 / 813:  81%|████████▏ | 814/1000 [37:13<08:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 344 / 424 / 46 / 814:  81%|████████▏ | 814/1000 [37:13<08:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 344 / 424 / 46 / 814:  82%|████████▏ | 815/1000 [37:20<08:28,  2.75s/it][Succeeded / Failed / Skipped / Total] 345 / 424 / 46 / 815:  82%|████████▏ | 815/1000 [37:20<08:28,  2.75s/it][Succeeded / Failed / Skipped / Total] 345 / 424 / 46 / 815:  82%|████████▏ | 816/1000 [37:32<08:27,  2.76s/it][Succeeded / Failed / Skipped / Total] 346 / 424 / 46 / 816:  82%|████████▏ | 816/1000 [37:32<08:27,  2.76s/it][Succeeded / Failed / Skipped / Total] 346 / 424 / 46 / 816:  82%|████████▏ | 817/1000 [37:34<08:24,  2.76s/it]Parse a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration [[danker]] = servletRequest . getParameterNames ( ) ; while ( [[danker]] . hasMoreElements ( ) ) { String paramName = ( String ) [[danker]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 810 ---------------------------------------------
Get the value of the request parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : nameValuePairs ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String [[interviewing]] : nameValuePairs ) { if ( [[interviewing]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 811 ---------------------------------------------
Adds a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( value ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > [[autobiography]] = super . getAll ( name ) ; if ( [[autobiography]] . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; [[autobiography]] . add ( value ) ; super . addAll ( name , [[autobiography]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[nas]] ( String [[gypo]] , final String ... [[holdin]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Gets the profile for the given profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[armory]] ( final String [[attacking]] , final String key ) { final Map < String , PropsEntry > [[coltan]] = profileProperties . get ( [[attacking]] ) ; if ( [[coltan]] == null ) { return null ; } return [[coltan]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Extracts a map from a string . --> Create a new proposition --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String [[prefix]] ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[procreate]] , final String [ ] profiles , final String [ ] [[archibald]] , String [[homebody]] ) { if ( [[procreate]] == null ) { [[procreate]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 815 ---------------------------------------------
Resolves annotation action . --> Get annotation type --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[sticker]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 816 ---------------------------------------------
Converts a byte array to a byte array . --> Looks for testing --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[offp]] ) { int i ; int word = 0 ; int [[off]] = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % data . length ; } [[offp]] [ 0 ] = [[off]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[freeloaders]] ) { int i ; int word = 0 ; int [[steele]] = [[freeloaders]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[steele]] ] & 0xff ) ; [[steele]] = ( [[steele]] + 1 ) % data . length ; } [[freeloaders]] [ 0 ] = [[steele]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 424 / 46 / 817:  82%|████████▏ | 817/1000 [37:34<08:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 424 / 46 / 817:  82%|████████▏ | 818/1000 [37:36<08:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 425 / 46 / 818:  82%|████████▏ | 818/1000 [37:36<08:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 425 / 46 / 818:  82%|████████▏ | 819/1000 [37:37<08:18,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 426 / 46 / 819:  82%|████████▏ | 819/1000 [37:37<08:18,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 426 / 46 / 819:  82%|████████▏ | 820/1000 [37:45<08:17,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 427 / 46 / 820:  82%|████████▏ | 820/1000 [37:45<08:17,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 427 / 46 / 820:  82%|████████▏ | 821/1000 [37:53<08:15,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 428 / 46 / 821:  82%|████████▏ | 821/1000 [37:53<08:15,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 428 / 46 / 821:  82%|████████▏ | 822/1000 [37:55<08:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 429 / 46 / 822:  82%|████████▏ | 822/1000 [37:55<08:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 429 / 46 / 822:  82%|████████▏ | 823/1000 [37:55<08:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 429 / 47 / 823:  82%|████████▏ | 823/1000 [37:55<08:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 429 / 47 / 823:  82%|████████▏ | 824/1000 [38:02<08:07,  2.77s/it]Convert a password to a salt . --> Converts salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , [[hashed]] ; char minor = ( char ) 0 ; int rounds , [[off]] ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { [[off]] = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[off]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[pouf]] , saltb , [[optical]] ; char minor = ( char ) 0 ; int rounds , [[druids]] ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { [[druids]] = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[druids]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 818 ---------------------------------------------
Copy byte to output stream --> [[[FAILED]]]

[[[[Adv]]]]: public int copyAll ( final OutputStream [[out]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream [[christopher]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[christopher]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Add a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[ceremonial]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 820 ---------------------------------------------
Resolve action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[actionDefinition]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition [[pansy]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 821 ---------------------------------------------
Register alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( [[annotationValues]] ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[rho]] , final ActionDefinition [[rustic]] ) { final String alias = parseMethodAlias ( [[rho]] ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( [[rustic]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 822 ---------------------------------------------
Write bytes to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[intensive]] = 0 ; while ( "True" == "True" ) { byte [[blabbing]] = readByte ( ) ; if ( isBoundary ( [[blabbing]] ) ) { break ; } out . write ( [[blabbing]] ) ; [[intensive]] ++ ; if ( [[intensive]] == maxBytes ) { return [[intensive]] ; } } return [[intensive]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 430 / 47 / 824:  82%|████████▏ | 824/1000 [38:02<08:07,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 430 / 47 / 824:  82%|████████▎ | 825/1000 [38:03<08:04,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 431 / 47 / 825:  82%|████████▎ | 825/1000 [38:03<08:04,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 431 / 47 / 825:  83%|████████▎ | 826/1000 [38:04<08:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 348 / 431 / 47 / 826:  83%|████████▎ | 826/1000 [38:04<08:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 348 / 431 / 47 / 826:  83%|████████▎ | 827/1000 [38:06<07:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 348 / 432 / 47 / 827:  83%|████████▎ | 827/1000 [38:06<07:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 349 / 432 / 47 / 828:  83%|████████▎ | 828/1000 [38:06<07:55,  2.76s/it][Succeeded / Failed / Skipped / Total] 349 / 432 / 47 / 828:  83%|████████▎ | 829/1000 [38:07<07:51,  2.76s/it][Succeeded / Failed / Skipped / Total] 349 / 433 / 47 / 829:  83%|████████▎ | 829/1000 [38:07<07:51,  2.76s/it][Succeeded / Failed / Skipped / Total] 350 / 433 / 47 / 830:  83%|████████▎ | 830/1000 [38:07<07:48,  2.76s/it][Succeeded / Failed / Skipped / Total] 350 / 433 / 47 / 830:  83%|████████▎ | 831/1000 [38:15<07:46,  2.76s/it][Succeeded / Failed / Skipped / Total] 351 / 433 / 47 / 831:  83%|████████▎ | 831/1000 [38:15<07:46,  2.76s/it][Succeeded / Failed / Skipped / Total] 352 / 433 / 47 / 832:  83%|████████▎ | 832/1000 [38:17<07:43,  2.76s/it][Succeeded / Failed / Skipped / Total] 352 / 433 / 47 / 832:  83%|████████▎ | 833/1000 [38:19<07:41,  2.76s/it]Returns the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[result]] = filteredBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[eyes]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[eyes]] = filteredBy . value ( ) ; if ( [[eyes]] . length == 0 ) { [[eyes]] = null ; } } return [[eyes]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 825 ---------------------------------------------
Get package name . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[vanish]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 826 ---------------------------------------------
Adapts the supplied class to the target class . --> A convenience method to get a favorable object --> Socre: 1.0

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[fauntleroy]] = cache . get ( targetClass ) ; if ( [[fauntleroy]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 827 ---------------------------------------------
Returns a string of the given string . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[False]]" != "[[False]]" ; } if ( hashed_bytes . length != try_bytes . length ) { return "[[False]]" != "[[False]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[bogs]] = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[bogs]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[Utilised]]" != "[[Utilised]]" ; } if ( hashed_bytes . length != try_bytes . length ) { return "[[Utilised]]" != "[[Utilised]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 828 ---------------------------------------------
Parse alias . --> Converts a conversion to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[dunga]] ( final ActionAnnotationValues [[gashes]] ) { String [[caucasian]] = null ; if ( [[gashes]] != null ) { [[caucasian]] = [[gashes]] . alias ( ) ; } return [[caucasian]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Read the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String [[criticism]] , final ActionAnnotationValues annotationValues , final ActionConfig [[ealing]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Gets the type of a class . --> Derivers the relimination of the rackers --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy [[interceptedBy]] = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { [[result]] = [[interceptedBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[condone]] ( final AnnotatedElement [[freely]] ) { Class < ? extends ActionInterceptor > [ ] [[crackers]] = null ; InterceptedBy [[unbeliever]] = [[freely]] . getAnnotation ( InterceptedBy . class ) ; if ( [[unbeliever]] != null ) { [[crackers]] = [[unbeliever]] . value ( ) ; if ( [[crackers]] . length == 0 ) { [[crackers]] = null ; } } return [[crackers]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 831 ---------------------------------------------
Visits the given annotation . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String descriptor , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[unruly]] ( final String descriptor , final boolean [[bean]] ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , [[bean]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 832 ---------------------------------------------
Sets the target object . --> Convenience method for creating a class --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[armless]] ( final Object [[gerard]] , final Object target ) { Class proxyClass = [[gerard]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[gerard]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
[Succeeded / Failed / Skipped / Total] 353 / 433 / 47 / 833:  83%|████████▎ | 833/1000 [38:19<07:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 354 / 433 / 47 / 834:  83%|████████▎ | 834/1000 [38:23<07:38,  2.76s/it][Succeeded / Failed / Skipped / Total] 354 / 433 / 47 / 834:  84%|████████▎ | 835/1000 [38:24<07:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 433 / 47 / 835:  84%|████████▎ | 835/1000 [38:24<07:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 434 / 47 / 836:  84%|████████▎ | 836/1000 [38:25<07:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 434 / 47 / 836:  84%|████████▎ | 837/1000 [38:28<07:29,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 435 / 47 / 837:  84%|████████▎ | 837/1000 [38:28<07:29,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 436 / 47 / 838:  84%|████████▍ | 838/1000 [38:30<07:26,  2.76s/it][Succeeded / Failed / Skipped / Total] 355 / 436 / 47 / 838:  84%|████████▍ | 839/1000 [38:30<07:23,  2.75s/it][Succeeded / Failed / Skipped / Total] 356 / 436 / 47 / 839:  84%|████████▍ | 839/1000 [38:30<07:23,  2.75s/it][Succeeded / Failed / Skipped / Total] 356 / 437 / 47 / 840:  84%|████████▍ | 840/1000 [38:40<07:21,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 437 / 47 / 840:  84%|████████▍ | 841/1000 [38:42<07:19,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 438 / 47 / 841:  84%|████████▍ | 841/1000 [38:42<07:19,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 438 / 47 / 841:  84%|████████▍ | 842/1000 [38:42<07:15,  2.76s/it]--------------------------------------------- Result 833 ---------------------------------------------
Resolve name . --> Returns the index of a given type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[remarkable]] ( final String [[piel]] ) { if ( jsonNames == null ) { return [[piel]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[piel]] ) ; if ( jsonIndex == - 1 ) { return [[piel]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
Returns the type for the given type . --> Extract the otype from a subtype --> Socre: 1.0

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[bartel]] ) { TypeData [[yowling]] = typeDataMap . get ( [[bartel]] ) ; if ( [[yowling]] == null ) { if ( serializationSubclassAware ) { [[yowling]] = findSubclassTypeData ( [[bartel]] ) ; } if ( [[yowling]] == null ) { [[yowling]] = scanClassForAnnotations ( [[bartel]] ) ; typeDataMap . put ( [[bartel]] , [[yowling]] ) ; } } return [[yowling]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 835 ---------------------------------------------
Resolve type . --> Resolve a type --> Socre: 1.0

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData [[phd]] = lookupTypeData ( type ) ; return [[phd]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 836 ---------------------------------------------
Gets the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[brakeman]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 837 ---------------------------------------------
Finds the annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[absorbers]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[absorbers]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the name of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[cleve]] ( final String [[attics]] ) { if ( realNames == null ) { return [[attics]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[attics]] ) ; if ( realIndex == - 1 ) { return [[attics]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 839 ---------------------------------------------
Returns the type for the given type . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[winnie]] ( final Class [[dearth]] ) { TypeData [[inordinate]] = typeDataMap . get ( [[dearth]] ) ; if ( [[inordinate]] == null ) { [[inordinate]] = scanClassForAnnotations ( [[dearth]] ) ; typeDataMap . put ( [[dearth]] , [[inordinate]] ) ; } return [[inordinate]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 840 ---------------------------------------------
Put a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[inventories]] ) { [[inventories]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 841 ---------------------------------------------
Adds the given bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[defrauding]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 842 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 356 / 439 / 47 / 842:  84%|████████▍ | 842/1000 [38:42<07:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 439 / 47 / 842:  84%|████████▍ | 843/1000 [38:45<07:13,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 440 / 47 / 843:  84%|████████▍ | 843/1000 [38:45<07:13,  2.76s/it][Succeeded / Failed / Skipped / Total] 356 / 440 / 47 / 843:  84%|████████▍ | 844/1000 [38:58<07:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 356 / 441 / 47 / 844:  84%|████████▍ | 844/1000 [38:58<07:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 356 / 441 / 47 / 844:  84%|████████▍ | 845/1000 [38:59<07:09,  2.77s/it][Succeeded / Failed / Skipped / Total] 356 / 442 / 47 / 845:  84%|████████▍ | 845/1000 [38:59<07:09,  2.77s/it][Succeeded / Failed / Skipped / Total] 356 / 442 / 47 / 845:  85%|████████▍ | 846/1000 [39:02<07:06,  2.77s/it][Succeeded / Failed / Skipped / Total] 357 / 442 / 47 / 846:  85%|████████▍ | 846/1000 [39:02<07:06,  2.77s/it][Succeeded / Failed / Skipped / Total] 357 / 442 / 47 / 846:  85%|████████▍ | 847/1000 [39:16<07:05,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 443 / 47 / 847:  85%|████████▍ | 847/1000 [39:16<07:05,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 443 / 47 / 847:  85%|████████▍ | 848/1000 [39:20<07:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 444 / 47 / 848:  85%|████████▍ | 848/1000 [39:20<07:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 444 / 47 / 848:  85%|████████▍ | 849/1000 [39:21<06:59,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 445 / 47 / 849:  85%|████████▍ | 849/1000 [39:21<06:59,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 445 / 47 / 849:  85%|████████▌ | 850/1000 [39:22<06:56,  2.78s/it]Resolves a type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[bridgehead]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 843 ---------------------------------------------
Copy a character from a reader . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[famished]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 844 ---------------------------------------------
Add a membership . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[accumulator]] ( final String owner , final String [[selby]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[selby]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a version . --> [[[FAILED]]]

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int [[majorVersion]] , final String [[className]] ) { this . majorVersion = [[majorVersion]] ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int [[maugham]] , final String [[disengage]] ) { this . majorVersion = [[maugham]] ; this . className = [[disengage]] ; return addConstantClass ( [[disengage]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a owner . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[index]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[abstraction]] ( final int [[devices]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[devices]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a abstract method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String descriptor , final boolean [[isInterface]] ) { int tag = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[directories]] ( final String [[haas]] , final String name , final String descriptor , final boolean [[marinated]] ) { int tag = [[marinated]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[haas]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Creates a new scope action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[flatware]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 849 ---------------------------------------------
Adds an entry to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int tag , final int [[kidstuff]] ) { add ( new Entry ( index , tag , [[kidstuff]] , hash ( tag , [[kidstuff]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 446 / 47 / 850:  85%|████████▌ | 850/1000 [39:22<06:56,  2.78s/it][Succeeded / Failed / Skipped / Total] 357 / 446 / 47 / 850:  85%|████████▌ | 851/1000 [39:32<06:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 357 / 447 / 47 / 851:  85%|████████▌ | 851/1000 [39:32<06:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 357 / 447 / 47 / 851:  85%|████████▌ | 852/1000 [39:36<06:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 357 / 448 / 47 / 852:  85%|████████▌ | 852/1000 [39:36<06:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 357 / 448 / 47 / 852:  85%|████████▌ | 853/1000 [39:44<06:50,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 449 / 47 / 853:  85%|████████▌ | 853/1000 [39:44<06:50,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 449 / 47 / 853:  85%|████████▌ | 854/1000 [39:50<06:48,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 450 / 47 / 854:  85%|████████▌ | 854/1000 [39:50<06:48,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 450 / 47 / 854:  86%|████████▌ | 855/1000 [39:51<06:45,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 451 / 47 / 855:  86%|████████▌ | 855/1000 [39:51<06:45,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 451 / 47 / 855:  86%|████████▌ | 856/1000 [39:52<06:42,  2.80s/it]Add a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int [[philistine]] = hash ( tag , value ) ; Entry entry = get ( [[philistine]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[philistine]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[philistine]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Add a long . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ee]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant hash code . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[pores]] ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[shtick]] = get ( hashCode ) ; while ( [[shtick]] != null ) { if ( [[shtick]] . tag == tag && [[shtick]] . hashCode == hashCode && [[shtick]] . owner . equals ( owner ) && [[shtick]] . name . equals ( name ) && [[shtick]] . value . equals ( descriptor ) ) { return [[shtick]] ; } [[shtick]] = [[shtick]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a string value to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[midol]] ( final int index , final String [[dozy]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[dozy]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[dozy]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant name . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , name , descriptor , hash ( [[tag]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[krusty]] ( final int index , final String name , final String descriptor ) { final int [[sticker]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[sticker]] , name , descriptor , hash ( [[sticker]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds an entry to the map . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[value]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[whore]] ( final int tag , final long [[brakeman]] ) { int hashCode = hash ( tag , [[brakeman]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[brakeman]] ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[brakeman]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[brakeman]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 452 / 47 / 856:  86%|████████▌ | 856/1000 [39:52<06:42,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 452 / 47 / 856:  86%|████████▌ | 857/1000 [39:57<06:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 453 / 47 / 857:  86%|████████▌ | 857/1000 [39:57<06:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 357 / 453 / 47 / 857:  86%|████████▌ | 858/1000 [40:07<06:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 454 / 47 / 858:  86%|████████▌ | 858/1000 [40:07<06:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 454 / 47 / 858:  86%|████████▌ | 859/1000 [40:14<06:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 454 / 47 / 859:  86%|████████▌ | 859/1000 [40:14<06:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 454 / 47 / 859:  86%|████████▌ | 860/1000 [40:17<06:33,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 455 / 47 / 860:  86%|████████▌ | 860/1000 [40:17<06:33,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 455 / 47 / 860:  86%|████████▌ | 861/1000 [40:26<06:31,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 456 / 47 / 861:  86%|████████▌ | 861/1000 [40:26<06:31,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 456 / 47 / 861:  86%|████████▌ | 862/1000 [40:28<06:28,  2.82s/it]Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[installation]] = hash ( tag , name , descriptor ) ; Entry [[hector]] = get ( [[installation]] ) ; while ( [[hector]] != null ) { if ( [[hector]] . tag == tag && [[hector]] . hashCode == [[installation]] && [[hector]] . name . equals ( name ) && [[hector]] . value . equals ( descriptor ) ) { return [[hector]] . index ; } [[hector]] = [[hector]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[installation]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Returns a hash code point . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[kawada]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[bergeron]] = get ( hashCode ) ; while ( [[bergeron]] != null ) { if ( [[bergeron]] . tag == Symbol . CONSTANT_UTF8_TAG && [[bergeron]] . hashCode == hashCode && [[bergeron]] . value . equals ( value ) ) { return [[bergeron]] . index ; } [[bergeron]] = [[bergeron]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds an entry to the list . -->  --> Socre: 0.9999999999999969

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int index , final int [[tag]] , final String [[value]] ) { add ( new Entry ( index , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int index , final int [[haka]] , final String [[abi]] ) { add ( new Entry ( index , [[haka]] , [[abi]] , hash ( [[haka]] , [[abi]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[agains]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[agains]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 358 / 457 / 47 / 862:  86%|████████▌ | 862/1000 [40:28<06:28,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 457 / 47 / 862:  86%|████████▋ | 863/1000 [40:33<06:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 458 / 47 / 863:  86%|████████▋ | 863/1000 [40:33<06:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 458 / 47 / 863:  86%|████████▋ | 864/1000 [40:35<06:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 459 / 47 / 864:  86%|████████▋ | 864/1000 [40:35<06:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 459 / 47 / 864:  86%|████████▋ | 865/1000 [40:35<06:20,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 460 / 47 / 865:  86%|████████▋ | 865/1000 [40:35<06:20,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 460 / 47 / 865:  87%|████████▋ | 866/1000 [40:41<06:17,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 461 / 47 / 866:  87%|████████▋ | 866/1000 [40:41<06:17,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 461 / 47 / 866:  87%|████████▋ | 867/1000 [40:44<06:14,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 462 / 47 / 867:  87%|████████▋ | 867/1000 [40:44<06:14,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 462 / 47 / 867:  87%|████████▋ | 868/1000 [40:48<06:12,  2.82s/it]Add a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String [[certification]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[certification]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a new entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[value]] ) { int [[hashCode]] = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String [[converters]] ) { int [[brakeman]] = hash ( tag , [[converters]] ) ; Entry [[find]] = get ( [[brakeman]] ) ; while ( [[find]] != null ) { if ( [[find]] . tag == tag && [[find]] . hashCode == [[brakeman]] && [[find]] . value . equals ( [[converters]] ) ) { return [[find]] ; } [[find]] = [[find]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[converters]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[converters]] , [[brakeman]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[keith]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[dra]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[dra]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Add a bootstrap Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[dormitories]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a primary index . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int [[strachan]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Get the map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[afflicting]] ( ) { for ( int [[citibank]] = 0 ; [[citibank]] < entries . length ; [[citibank]] ++ ) { entries [ [[citibank]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 358 / 463 / 47 / 868:  87%|████████▋ | 868/1000 [40:48<06:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 463 / 47 / 868:  87%|████████▋ | 869/1000 [40:50<06:09,  2.82s/it][Succeeded / Failed / Skipped / Total] 359 / 463 / 47 / 869:  87%|████████▋ | 869/1000 [40:50<06:09,  2.82s/it][Succeeded / Failed / Skipped / Total] 359 / 463 / 47 / 869:  87%|████████▋ | 870/1000 [40:55<06:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 463 / 47 / 870:  87%|████████▋ | 870/1000 [40:55<06:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 463 / 47 / 870:  87%|████████▋ | 871/1000 [41:00<06:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 464 / 47 / 871:  87%|████████▋ | 871/1000 [41:00<06:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 464 / 47 / 871:  87%|████████▋ | 872/1000 [41:00<06:01,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 465 / 47 / 872:  87%|████████▋ | 872/1000 [41:00<06:01,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 465 / 47 / 872:  87%|████████▋ | 873/1000 [41:01<05:58,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 466 / 47 / 873:  87%|████████▋ | 873/1000 [41:01<05:58,  2.82s/it][Succeeded / Failed / Skipped / Total] 360 / 466 / 47 / 873:  87%|████████▋ | 874/1000 [41:09<05:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 360 / 467 / 47 / 874:  87%|████████▋ | 874/1000 [41:09<05:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 360 / 467 / 47 / 874:  88%|████████▊ | 875/1000 [41:15<05:53,  2.83s/it][Succeeded / Failed / Skipped / Total] 361 / 467 / 47 / 875:  88%|████████▊ | 875/1000 [41:15<05:53,  2.83s/it][Succeeded / Failed / Skipped / Total] 361 / 467 / 47 / 875:  88%|████████▊ | 876/1000 [41:15<05:50,  2.83s/it]Adds a new bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[balkan]] ( final int tag , final String name , final String [[devoid]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[devoid]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[devoid]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[devoid]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[devoid]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 869 ---------------------------------------------
Visit annotation . --> Visit a annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[floozies]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 870 ---------------------------------------------
Create a proxy object . --> Creates and initializes the data --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[valenzuela]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 871 ---------------------------------------------
Removes all elements from the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[attagirl]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
Starts the chain . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[garam]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 873 ---------------------------------------------
Returns a list of all entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[inconstant]] ( ) { List < Map . Entry < String , V > > [[transfigured]] = new LinkedList <> ( ) ; MapEntry < V > [[christopher]] = head . after ; while ( [[christopher]] != head ) { [[transfigured]] . add ( [[christopher]] ) ; [[christopher]] = [[christopher]] . after ; } return [[transfigured]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 874 ---------------------------------------------
Returns the name of the given string . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int [[h]] = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char [[c]] = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[c]] >= ' ' && [[c]] <= ' ' ) { [[c]] += 32 ; } } [[h]] = 31 * [[h]] + [[c]] ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[dumbledore]] ( final String [[abi]] ) { int [[bow]] = 0 ; for ( int i = [[abi]] . length ( ) - 1 ; i >= 0 ; i -- ) { char [[hatfields]] = [[abi]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[hatfields]] >= ' ' && [[hatfields]] <= ' ' ) { [[hatfields]] += 32 ; } } [[bow]] = 31 * [[bow]] + [[hatfields]] ; } if ( [[bow]] > 0 ) { return [[bow]] ; } if ( [[bow]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[bow]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 875 ---------------------------------------------
Parse a path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[ramblers]] ( final String [[calculator]] ) { return [[calculator]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[calculator]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 362 / 467 / 47 / 876:  88%|████████▊ | 876/1000 [41:15<05:50,  2.83s/it][Succeeded / Failed / Skipped / Total] 362 / 467 / 47 / 876:  88%|████████▊ | 877/1000 [41:16<05:47,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 468 / 47 / 877:  88%|████████▊ | 877/1000 [41:16<05:47,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 468 / 47 / 877:  88%|████████▊ | 878/1000 [41:19<05:44,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 469 / 47 / 878:  88%|████████▊ | 878/1000 [41:19<05:44,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 469 / 47 / 878:  88%|████████▊ | 879/1000 [41:21<05:41,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 470 / 47 / 879:  88%|████████▊ | 879/1000 [41:21<05:41,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 470 / 47 / 879:  88%|████████▊ | 880/1000 [41:22<05:38,  2.82s/it][Succeeded / Failed / Skipped / Total] 363 / 470 / 47 / 880:  88%|████████▊ | 880/1000 [41:22<05:38,  2.82s/it][Succeeded / Failed / Skipped / Total] 363 / 470 / 47 / 880:  88%|████████▊ | 881/1000 [41:28<05:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 470 / 47 / 881:  88%|████████▊ | 881/1000 [41:28<05:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 470 / 47 / 881:  88%|████████▊ | 882/1000 [41:31<05:33,  2.82s/it][Succeeded / Failed / Skipped / Total] 365 / 470 / 47 / 882:  88%|████████▊ | 882/1000 [41:31<05:33,  2.82s/it][Succeeded / Failed / Skipped / Total] 365 / 470 / 47 / 882:  88%|████████▊ | 883/1000 [41:38<05:31,  2.83s/it][Succeeded / Failed / Skipped / Total] 366 / 470 / 47 / 883:  88%|████████▊ | 883/1000 [41:38<05:31,  2.83s/it][Succeeded / Failed / Skipped / Total] 366 / 470 / 47 / 883:  88%|████████▊ | 884/1000 [41:39<05:27,  2.83s/it]Appends the specified character to the specified sequence . --> Subroutine a given number of times --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int [[start]] , final int end ) { for ( int [[i]] = [[start]] ; [[i]] < end ; [[i]] ++ ) { [[append]] ( csq . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[chainsaw]] ( final CharSequence csq , final int [[veronika]] , final int end ) { for ( int [[graceless]] = [[veronika]] ; [[graceless]] < end ; [[graceless]] ++ ) { [[chainsaw]] ( csq . charAt ( [[graceless]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 877 ---------------------------------------------
Add a path to this path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[matures]] ( final CharSequence [[expanse]] ) { _push ( [[expanse]] ) ; if ( altPath != null ) { altPath . push ( [[expanse]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 878 ---------------------------------------------
Generates a instruction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[binoculars]] ) { methodVisitor . visitCode ( ) ; if ( [[binoculars]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[binoculars]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[binoculars]] . firstMethodName ( ) , [[binoculars]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[binoculars]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[binoculars]] . firstMethodName ( ) , [[binoculars]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[binoculars]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 879 ---------------------------------------------
Sets the capacity . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[bhaiyya]] ( final int minCapacity ) { final int [[goliath]] = buffer . length ; int newCapacity = [[goliath]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 880 ---------------------------------------------
Returns a map with the specified name . --> Convert a list of entries to a list of entries --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( [[name]] , [[e]] . key ) ) { values . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[smugly]] ( final String [[applaus]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[applaus]] ) ; int i = index ( h ) ; MapEntry < V > [[parrot]] = entries [ i ] ; while ( [[parrot]] != null ) { if ( [[parrot]] . hash == h && eq ( [[applaus]] , [[parrot]] . key ) ) { values . addFirst ( [[parrot]] . getValue ( ) ) ; } [[parrot]] = [[parrot]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 881 ---------------------------------------------
Copies all entries in this map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[aaahh]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 882 ---------------------------------------------
Add servlet servlet . --> Add a filter to the URL --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[biologic]] ( final ServletContext [[gigging]] ) { [[gigging]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[focuses]] = [[gigging]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[focuses]] . addMappingForUrlPatterns ( null , "[[Semis]]" == "[[Semis]]" , contextPath ) ; } final FilterRegistration [[focuses]] = [[gigging]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[focuses]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[Semis]]" == "[[Semis]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 883 ---------------------------------------------
Append the buffer to the buffer . --> Revokes the recovery --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[chitters]] ( final Buffer [[recover]] ) { if ( [[recover]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
[Succeeded / Failed / Skipped / Total] 366 / 471 / 47 / 884:  88%|████████▊ | 884/1000 [41:39<05:27,  2.83s/it][Succeeded / Failed / Skipped / Total] 366 / 471 / 47 / 884:  88%|████████▊ | 885/1000 [41:43<05:25,  2.83s/it][Succeeded / Failed / Skipped / Total] 367 / 471 / 47 / 885:  88%|████████▊ | 885/1000 [41:43<05:25,  2.83s/it][Succeeded / Failed / Skipped / Total] 367 / 471 / 47 / 885:  89%|████████▊ | 886/1000 [41:46<05:22,  2.83s/it][Succeeded / Failed / Skipped / Total] 367 / 472 / 47 / 886:  89%|████████▊ | 886/1000 [41:46<05:22,  2.83s/it][Succeeded / Failed / Skipped / Total] 367 / 472 / 47 / 886:  89%|████████▊ | 887/1000 [41:47<05:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 368 / 472 / 47 / 887:  89%|████████▊ | 887/1000 [41:47<05:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 368 / 472 / 47 / 887:  89%|████████▉ | 888/1000 [41:55<05:17,  2.83s/it][Succeeded / Failed / Skipped / Total] 368 / 473 / 47 / 888:  89%|████████▉ | 888/1000 [41:55<05:17,  2.83s/it][Succeeded / Failed / Skipped / Total] 368 / 473 / 47 / 888:  89%|████████▉ | 889/1000 [42:04<05:15,  2.84s/it][Succeeded / Failed / Skipped / Total] 368 / 474 / 47 / 889:  89%|████████▉ | 889/1000 [42:04<05:15,  2.84s/it][Succeeded / Failed / Skipped / Total] 368 / 474 / 47 / 889:  89%|████████▉ | 890/1000 [42:04<05:12,  2.84s/it][Succeeded / Failed / Skipped / Total] 368 / 475 / 47 / 890:  89%|████████▉ | 890/1000 [42:04<05:12,  2.84s/it][Succeeded / Failed / Skipped / Total] 368 / 475 / 47 / 890:  89%|████████▉ | 891/1000 [42:05<05:08,  2.83s/it]--------------------------------------------- Result 884 ---------------------------------------------
Invokes a method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object [[next]] = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( [[next]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object [[braved]] = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( [[braved]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 885 ---------------------------------------------
Create a new bean definition . --> A convenience method to create a new instance of a type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[omen]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[bruiser]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[omen]] , type , scope , wiringMode , [[bruiser]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[omen]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 886 ---------------------------------------------
Returns a getter for the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Writes the input stream to the output stream . --> Performs a Flandrooo4j file --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , out ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[spearheading]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[aleksandr]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[aleksandr]] , out ) ; } finally { StreamUtil . close ( [[aleksandr]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
Returns a FieldDescriptor for a given FieldDescriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[culpable]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[culpable]] ] = fieldDescriptor ; [[culpable]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Gets the key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[grazed]] ( final String [[presidium]] ) { CharSequence cs = ( CharSequence ) map . get ( [[presidium]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Gets the number . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getInteger ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String [[eyewitnesses]] ) { Number number = ( Number ) map . get ( [[eyewitnesses]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 369 / 475 / 47 / 891:  89%|████████▉ | 891/1000 [42:05<05:08,  2.83s/it][Succeeded / Failed / Skipped / Total] 369 / 475 / 47 / 891:  89%|████████▉ | 892/1000 [42:06<05:05,  2.83s/it][Succeeded / Failed / Skipped / Total] 369 / 476 / 47 / 892:  89%|████████▉ | 892/1000 [42:06<05:05,  2.83s/it][Succeeded / Failed / Skipped / Total] 369 / 476 / 47 / 892:  89%|████████▉ | 893/1000 [42:06<05:02,  2.83s/it][Succeeded / Failed / Skipped / Total] 369 / 477 / 47 / 893:  89%|████████▉ | 893/1000 [42:06<05:02,  2.83s/it][Succeeded / Failed / Skipped / Total] 369 / 477 / 47 / 893:  89%|████████▉ | 894/1000 [42:08<04:59,  2.83s/it][Succeeded / Failed / Skipped / Total] 370 / 477 / 47 / 894:  89%|████████▉ | 894/1000 [42:08<04:59,  2.83s/it][Succeeded / Failed / Skipped / Total] 370 / 477 / 47 / 894:  90%|████████▉ | 895/1000 [42:11<04:57,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 477 / 47 / 895:  90%|████████▉ | 895/1000 [42:11<04:57,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 477 / 47 / 895:  90%|████████▉ | 896/1000 [42:13<04:54,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 478 / 47 / 896:  90%|████████▉ | 896/1000 [42:13<04:54,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 478 / 47 / 896:  90%|████████▉ | 897/1000 [42:23<04:52,  2.84s/it][Succeeded / Failed / Skipped / Total] 371 / 479 / 47 / 897:  90%|████████▉ | 897/1000 [42:23<04:52,  2.84s/it][Succeeded / Failed / Skipped / Total] 371 / 479 / 47 / 897:  90%|████████▉ | 898/1000 [42:26<04:49,  2.84s/it]Write the input stream to a file . --> Allocate a file --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer [[geoengineering]] ) throws IOException { for ( Object [[aesop]] : list ) { if ( [[aesop]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[aesop]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[geoengineering]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[aesop]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[aesop]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[geoengineering]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 892 ---------------------------------------------
Get the value of the long . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[biologic]] ) { Number [[stranglers]] = ( Number ) map . get ( [[biologic]] ) ; if ( [[stranglers]] == null ) { return null ; } if ( [[stranglers]] instanceof Long ) { return ( Long ) [[stranglers]] ; } return [[stranglers]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Sends a stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream [[hounded]] , final HttpProgressListener [[girders]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 894 ---------------------------------------------
Get the number for the given key . --> Converts a number to a number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[aul]] ( final String [[demo]] ) { Number number = ( Number ) map . get ( [[demo]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Returns the value as a map . --> Converts a Map to a Map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[proxies]] > [[proxies]] getValue ( final String key ) { [[proxies]] val = ( [[proxies]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[proxies]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[proxies]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Gets a double . --> [[[FAILED]]]

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String key ) { Number [[tsurugi]] = ( Number ) map . get ( key ) ; if ( [[tsurugi]] == null ) { return null ; } if ( [[tsurugi]] instanceof Double ) { return ( Double ) [[tsurugi]] ; } return [[tsurugi]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Convert a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[garber]] ) { final int isolation ; switch ( [[garber]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[garber]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 898 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 480 / 47 / 898:  90%|████████▉ | 898/1000 [42:26<04:49,  2.84s/it][Succeeded / Failed / Skipped / Total] 371 / 480 / 47 / 898:  90%|████████▉ | 899/1000 [42:26<04:46,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 481 / 47 / 899:  90%|████████▉ | 899/1000 [42:26<04:46,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 481 / 47 / 899:  90%|█████████ | 900/1000 [42:30<04:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 482 / 47 / 900:  90%|█████████ | 900/1000 [42:30<04:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 371 / 482 / 47 / 900:  90%|█████████ | 901/1000 [42:31<04:40,  2.83s/it][Succeeded / Failed / Skipped / Total] 372 / 482 / 47 / 901:  90%|█████████ | 901/1000 [42:31<04:40,  2.83s/it][Succeeded / Failed / Skipped / Total] 372 / 482 / 47 / 901:  90%|█████████ | 902/1000 [42:35<04:37,  2.83s/it][Succeeded / Failed / Skipped / Total] 373 / 482 / 47 / 902:  90%|█████████ | 902/1000 [42:35<04:37,  2.83s/it][Succeeded / Failed / Skipped / Total] 373 / 482 / 47 / 902:  90%|█████████ | 903/1000 [42:44<04:35,  2.84s/it][Succeeded / Failed / Skipped / Total] 373 / 483 / 47 / 903:  90%|█████████ | 903/1000 [42:44<04:35,  2.84s/it][Succeeded / Failed / Skipped / Total] 373 / 483 / 47 / 903:  90%|█████████ | 904/1000 [42:44<04:32,  2.84s/it][Succeeded / Failed / Skipped / Total] 374 / 483 / 47 / 904:  90%|█████████ | 904/1000 [42:44<04:32,  2.84s/it][Succeeded / Failed / Skipped / Total] 374 / 483 / 47 / 904:  90%|█████████ | 905/1000 [42:46<04:29,  2.84s/it][Succeeded / Failed / Skipped / Total] 375 / 483 / 47 / 905:  90%|█████████ | 905/1000 [42:46<04:29,  2.84s/it][Succeeded / Failed / Skipped / Total] 375 / 483 / 47 / 905:  91%|█████████ | 906/1000 [42:49<04:26,  2.84s/it][Succeeded / Failed / Skipped / Total] 375 / 484 / 47 / 906:  91%|█████████ | 906/1000 [42:49<04:26,  2.84s/it][Succeeded / Failed / Skipped / Total] 375 / 484 / 47 / 906:  91%|█████████ | 907/1000 [42:49<04:23,  2.83s/it][Succeeded / Failed / Skipped / Total] 376 / 484 / 47 / 907:  91%|█████████ | 907/1000 [42:49<04:23,  2.83s/it][Succeeded / Failed / Skipped / Total] 376 / 484 / 47 / 907:  91%|█████████ | 908/1000 [42:50<04:20,  2.83s/it]Open a folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[chronically]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 899 ---------------------------------------------
Puts a key . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[throttle]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Closes the folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[andit]] ) { if ( [[andit]] != null ) { try { [[andit]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Returns a alias . --> Convert a pool to a string representation --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[apocalypse]] ( final String [[crag]] ) { return StringPool . LEFT_CHEV . concat ( [[crag]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 902 ---------------------------------------------
Get mime type . --> Sets the bucket . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[amplifier]] ) { if ( [[amplifier]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[amplifier]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[amplifier]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 903 ---------------------------------------------
Validate the Violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[caterer]] = vtor . getViolations ( ) ; return [[caterer]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 904 ---------------------------------------------
Return a named parameter with the given name . --> Does not guaranted? --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[yourwife]] ( final String [[panicking]] ) { DbQueryNamedParameter [[veggies]] = rootNP ; while ( [[veggies]] != null ) { if ( [[veggies]] . equalsName ( [[panicking]] ) ) { return [[veggies]] ; } [[veggies]] = [[veggies]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 905 ---------------------------------------------
Set the target class . --> Method to get the InputStream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[boulder]] ( final InputStream [[sì]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[sì]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 906 ---------------------------------------------
Add Violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[policía]] ( final String [[ashland]] , final Object [[protector]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[ashland]] , this , [[protector]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Get the target class name . --> Method to get the input stream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[infield]] ( final String [[ganz]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[ganz]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[ganz]] ) ; } targetClassName = [[ganz]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[ganz]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
[Succeeded / Failed / Skipped / Total] 376 / 485 / 47 / 908:  91%|█████████ | 908/1000 [42:50<04:20,  2.83s/it][Succeeded / Failed / Skipped / Total] 376 / 485 / 47 / 908:  91%|█████████ | 909/1000 [42:53<04:17,  2.83s/it][Succeeded / Failed / Skipped / Total] 376 / 486 / 47 / 909:  91%|█████████ | 909/1000 [42:53<04:17,  2.83s/it][Succeeded / Failed / Skipped / Total] 376 / 486 / 47 / 909:  91%|█████████ | 910/1000 [42:53<04:14,  2.83s/it][Succeeded / Failed / Skipped / Total] 377 / 486 / 47 / 910:  91%|█████████ | 910/1000 [42:53<04:14,  2.83s/it][Succeeded / Failed / Skipped / Total] 377 / 486 / 47 / 910:  91%|█████████ | 911/1000 [42:55<04:11,  2.83s/it][Succeeded / Failed / Skipped / Total] 377 / 487 / 47 / 911:  91%|█████████ | 911/1000 [42:55<04:11,  2.83s/it][Succeeded / Failed / Skipped / Total] 377 / 487 / 47 / 911:  91%|█████████ | 912/1000 [42:56<04:08,  2.83s/it][Succeeded / Failed / Skipped / Total] 378 / 487 / 47 / 912:  91%|█████████ | 912/1000 [42:56<04:08,  2.83s/it][Succeeded / Failed / Skipped / Total] 378 / 487 / 47 / 912:  91%|█████████▏| 913/1000 [43:00<04:05,  2.83s/it][Succeeded / Failed / Skipped / Total] 378 / 488 / 47 / 913:  91%|█████████▏| 913/1000 [43:00<04:05,  2.83s/it][Succeeded / Failed / Skipped / Total] 378 / 488 / 47 / 913:  91%|█████████▏| 914/1000 [43:02<04:02,  2.83s/it][Succeeded / Failed / Skipped / Total] 379 / 488 / 47 / 914:  91%|█████████▏| 914/1000 [43:02<04:02,  2.83s/it][Succeeded / Failed / Skipped / Total] 379 / 488 / 47 / 914:  92%|█████████▏| 915/1000 [43:04<04:00,  2.82s/it]--------------------------------------------- Result 908 ---------------------------------------------
Sets the email address . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[tinkles]] ( final ReceivedEmail [[jaworski]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[jaworski]] . messageNumber ( ) } , [[jaworski]] . flags ( ) , "[[Suburbia]]" == "[[Suburbia]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 909 ---------------------------------------------
Process the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[cpr]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Convert a string to a proxy . --> Convert a String to a String representation --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[searle]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 911 ---------------------------------------------
Get download download download . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[hyland]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 912 ---------------------------------------------
Instantiate a proxy class . --> Method to get the classloader --> Socre: 1.0

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[coelho]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[coelho]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[coelho]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 913 ---------------------------------------------
Returns the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[sightseeing]] ( final Class [[soonest]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[soonest]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[soonest]] . getName ( ) ) ; } targetClass = [[soonest]] ; targetClassName = [[soonest]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[soonest]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 914 ---------------------------------------------
Adds an address to this address . --> Sets the excluding --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[anorexic]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[anorexic]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 915 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 489 / 47 / 915:  92%|█████████▏| 915/1000 [43:04<04:00,  2.82s/it][Succeeded / Failed / Skipped / Total] 379 / 489 / 47 / 915:  92%|█████████▏| 916/1000 [43:05<03:57,  2.82s/it][Succeeded / Failed / Skipped / Total] 380 / 489 / 47 / 916:  92%|█████████▏| 916/1000 [43:05<03:57,  2.82s/it][Succeeded / Failed / Skipped / Total] 380 / 489 / 47 / 916:  92%|█████████▏| 917/1000 [43:08<03:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 381 / 489 / 47 / 917:  92%|█████████▏| 917/1000 [43:08<03:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 381 / 489 / 47 / 917:  92%|█████████▏| 918/1000 [43:11<03:51,  2.82s/it][Succeeded / Failed / Skipped / Total] 382 / 489 / 47 / 918:  92%|█████████▏| 918/1000 [43:11<03:51,  2.82s/it][Succeeded / Failed / Skipped / Total] 382 / 489 / 47 / 918:  92%|█████████▏| 919/1000 [43:15<03:48,  2.82s/it][Succeeded / Failed / Skipped / Total] 383 / 489 / 47 / 919:  92%|█████████▏| 919/1000 [43:15<03:48,  2.82s/it][Succeeded / Failed / Skipped / Total] 383 / 489 / 47 / 919:  92%|█████████▏| 920/1000 [43:15<03:45,  2.82s/it][Succeeded / Failed / Skipped / Total] 384 / 489 / 47 / 920:  92%|█████████▏| 920/1000 [43:15<03:45,  2.82s/it][Succeeded / Failed / Skipped / Total] 384 / 489 / 47 / 920:  92%|█████████▏| 921/1000 [43:22<03:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 385 / 489 / 47 / 921:  92%|█████████▏| 921/1000 [43:22<03:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 385 / 489 / 47 / 921:  92%|█████████▏| 922/1000 [43:26<03:40,  2.83s/it][Succeeded / Failed / Skipped / Total] 386 / 489 / 47 / 922:  92%|█████████▏| 922/1000 [43:26<03:40,  2.83s/it][Succeeded / Failed / Skipped / Total] 387 / 489 / 47 / 923:  92%|█████████▏| 923/1000 [43:26<03:37,  2.82s/it][Succeeded / Failed / Skipped / Total] 387 / 489 / 47 / 923:  92%|█████████▏| 924/1000 [43:27<03:34,  2.82s/it][Succeeded / Failed / Skipped / Total] 388 / 489 / 47 / 924:  92%|█████████▏| 924/1000 [43:27<03:34,  2.82s/it]Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[stickball]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Generates a class file . --> This method removes a byte array from a file --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( [[debugFolder]] , [[fileName]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File [[birger]] = proxetta . getDebugFolder ( ) ; if ( [[birger]] == null ) { return ; } if ( ! [[birger]] . exists ( ) || ! [[birger]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[birger]] ) ; } String [[bushwhacked]] = proxyClassName ; if ( [[bushwhacked]] == null ) { [[bushwhacked]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[bushwhacked]] += ".class" ; File file = new File ( [[birger]] , [[bushwhacked]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the value of a vector . --> Sets the value of the array --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... ccs ) { this . [[popovers]] = ArraysUtil . join ( this . [[popovers]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Create a new org . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String personalName , final String [[from]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String [[mousey]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 919 ---------------------------------------------
Create a new Address with the given name . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String [[to]] ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[shizuo]] ( final String personalName , final String [[cardiac]] ) { return [[shizuo]] ( new EmailAddress ( personalName , [[shizuo]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the reply . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[BROKE]] ( final EmailAddress ... [[BROKE]] ) { this . [[borgo]] = ArraysUtil . join ( this . [[borgo]] , valueOrEmptyArray ( [[BROKE]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Returns the value of an integer . --> Converts value to integer --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[kerr]] , final int defaultValue ) { String value = get ( [[kerr]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 922 ---------------------------------------------
Set a header value . --> Send a request --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[sends]] ( final String [[agronomist]] , final String [[attributes]] ) { headers . put ( [[agronomist]] , [[attributes]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 923 ---------------------------------------------
Creates a new text message . --> Method to get a MIME --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[devastatingly]] ( final String [[mirabeau]] , final String [[tutsis]] ) { return message ( new EmailMessage ( [[mirabeau]] , MimeTypes . MIME_TEXT_PLAIN , [[tutsis]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 924 ---------------------------------------------
Get a boolean value . --> Get a String value from a String --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[coincidentally]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "[[Scoops]]" == "[[Scoops]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
[Succeeded / Failed / Skipped / Total] 388 / 490 / 47 / 925:  92%|█████████▎| 925/1000 [43:28<03:31,  2.82s/it][Succeeded / Failed / Skipped / Total] 388 / 490 / 47 / 925:  93%|█████████▎| 926/1000 [43:29<03:28,  2.82s/it][Succeeded / Failed / Skipped / Total] 388 / 491 / 47 / 926:  93%|█████████▎| 926/1000 [43:29<03:28,  2.82s/it][Succeeded / Failed / Skipped / Total] 388 / 492 / 47 / 927:  93%|█████████▎| 927/1000 [43:30<03:25,  2.82s/it][Succeeded / Failed / Skipped / Total] 388 / 492 / 47 / 927:  93%|█████████▎| 928/1000 [43:30<03:22,  2.81s/it][Succeeded / Failed / Skipped / Total] 389 / 492 / 47 / 928:  93%|█████████▎| 928/1000 [43:30<03:22,  2.81s/it][Succeeded / Failed / Skipped / Total] 390 / 492 / 47 / 929:  93%|█████████▎| 929/1000 [43:39<03:20,  2.82s/it][Succeeded / Failed / Skipped / Total] 390 / 492 / 47 / 929:  93%|█████████▎| 930/1000 [43:41<03:17,  2.82s/it][Succeeded / Failed / Skipped / Total] 391 / 492 / 47 / 930:  93%|█████████▎| 930/1000 [43:41<03:17,  2.82s/it][Succeeded / Failed / Skipped / Total] 391 / 492 / 47 / 930:  93%|█████████▎| 931/1000 [43:41<03:14,  2.82s/it][Succeeded / Failed / Skipped / Total] 391 / 492 / 48 / 931:  93%|█████████▎| 931/1000 [43:41<03:14,  2.82s/it][Succeeded / Failed / Skipped / Total] 391 / 492 / 48 / 931:  93%|█████████▎| 932/1000 [43:42<03:11,  2.81s/it]--------------------------------------------- Result 925 ---------------------------------------------
Returns a method parameter . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[commentator]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 926 ---------------------------------------------
Generates a HTML message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[federated]] ( final String [[confectioner]] , final String [[majority]] ) { return message ( new EmailMessage ( [[confectioner]] , MimeTypes . MIME_TEXT_HTML , [[majority]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 927 ---------------------------------------------
Adds a folder to the filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[colette]] ( final EmailFilter [[menacing]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[menacing]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[menacing]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the value associated with the given name . --> Get a String from a String --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[phosphorescent]] , final String defaultValue ) { Objects . requireNonNull ( [[phosphorescent]] ) ; String [[bhaiyya]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[bhaiyya]] = System . getProperty ( [[phosphorescent]] ) ; } else { [[bhaiyya]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[phosphorescent]] ) ) ; } } catch ( Exception ignore ) { } if ( [[bhaiyya]] == null ) { return defaultValue ; } return [[bhaiyya]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the index of the given string . --> Returns a string representation of a given string --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int [[snowflake]] = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[snowflake]] ) ; if ( dotNdx == - 1 ) { if ( [[snowflake]] == - 1 ) { return - 1 ; } [[snowflake]] ++ ; if ( [[snowflake]] < str . length ( ) - 1 ) { dotNdx = [[snowflake]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 930 ---------------------------------------------
Obtains a string from a string . --> Helper method to generate a hooooomer --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String [[halloo]] ) { int slashNdx = [[halloo]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[halloo]] , ' ' , [[halloo]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 931 ---------------------------------------------
Returns the name of a given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 932 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 391 / 493 / 48 / 932:  93%|█████████▎| 932/1000 [43:42<03:11,  2.81s/it][Succeeded / Failed / Skipped / Total] 391 / 493 / 48 / 932:  93%|█████████▎| 933/1000 [43:44<03:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 392 / 493 / 48 / 933:  93%|█████████▎| 933/1000 [43:44<03:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 392 / 493 / 48 / 933:  93%|█████████▎| 934/1000 [43:52<03:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 393 / 493 / 48 / 934:  93%|█████████▎| 934/1000 [43:52<03:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 393 / 493 / 48 / 934:  94%|█████████▎| 935/1000 [43:53<03:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 394 / 493 / 48 / 935:  94%|█████████▎| 935/1000 [43:53<03:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 394 / 493 / 48 / 935:  94%|█████████▎| 936/1000 [43:55<03:00,  2.82s/it][Succeeded / Failed / Skipped / Total] 395 / 493 / 48 / 936:  94%|█████████▎| 936/1000 [43:55<03:00,  2.82s/it][Succeeded / Failed / Skipped / Total] 395 / 493 / 48 / 936:  94%|█████████▎| 937/1000 [43:58<02:57,  2.82s/it][Succeeded / Failed / Skipped / Total] 396 / 493 / 48 / 937:  94%|█████████▎| 937/1000 [43:58<02:57,  2.82s/it][Succeeded / Failed / Skipped / Total] 396 / 493 / 48 / 937:  94%|█████████▍| 938/1000 [44:03<02:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 397 / 493 / 48 / 938:  94%|█████████▍| 938/1000 [44:03<02:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 397 / 493 / 48 / 938:  94%|█████████▍| 939/1000 [44:04<02:51,  2.82s/it][Succeeded / Failed / Skipped / Total] 398 / 493 / 48 / 939:  94%|█████████▍| 939/1000 [44:04<02:51,  2.82s/it][Succeeded / Failed / Skipped / Total] 399 / 493 / 48 / 940:  94%|█████████▍| 940/1000 [44:04<02:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 399 / 493 / 48 / 940:  94%|█████████▍| 941/1000 [44:04<02:45,  2.81s/it]Get the value of a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[formy]] ( final String name , final long defaultValue ) { String [[rebounds]] = get ( name ) ; if ( [[rebounds]] == null ) { return defaultValue ; } [[rebounds]] = [[rebounds]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[rebounds]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a string . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ResultPath resolveResultPath ( String [[path]] , String [[value]] ) { boolean absolutePath = "False" != "False" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath resolveResultPath ( String [[reject]] , String [[marquise]] ) { boolean absolutePath = "False" != "False" ; if ( [[marquise]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Returns true if the given Entity is a valid column family . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[False]]" != "[[False]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[Legion]]" != "[[Legion]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 935 ---------------------------------------------
Initializes the long array . --> Truncate a new array --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[floozies]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the value of the alias . --> Get the fully qualified path --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { [[value]] = [[cfg]] . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[cpr]] ( final String alias ) { String [[packing]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[packing]] == null ) { ActionRuntime [[enrolling]] = actionsManager . lookup ( alias ) ; if ( [[enrolling]] != null ) { [[packing]] = [[enrolling]] . getActionPath ( ) ; } } return [[packing]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 937 ---------------------------------------------
Evaluates a JSON object . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object [[key]] , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { currentPath . push ( [[key]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[confectioner]] ( final JsonContext jsonContext , final Path currentPath , final Object [[pansies]] , final Object [[slogans]] , int count ) { if ( ( [[slogans]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[pansies]] != null ) { currentPath . push ( [[pansies]] . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 938 ---------------------------------------------
Swaps the elements . --> Littlepsures a diagonal --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int [[j]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int [[denning]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[denning]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 939 ---------------------------------------------
Sets the edge of the edge . --> Swap two arrays --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[atma]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Resolve a string value . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String [[value]] ) { final StringBuilder [[result]] = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int [[ndx]] = [[value]] . indexOf ( ' ' , i ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String [[tandem]] ) { final StringBuilder [[adex]] = new StringBuilder ( [[tandem]] . length ( ) ) ; int i = 0 ; int len = [[tandem]] . length ( ) ; while ( i < len ) { int [[aeronautics]] = [[tandem]] . indexOf ( ' ' , i ) ; if ( [[aeronautics]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 941 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 493 / 48 / 941:  94%|█████████▍| 941/1000 [44:04<02:45,  2.81s/it][Succeeded / Failed / Skipped / Total] 401 / 493 / 48 / 942:  94%|█████████▍| 942/1000 [44:12<02:43,  2.82s/it][Succeeded / Failed / Skipped / Total] 401 / 493 / 48 / 942:  94%|█████████▍| 943/1000 [44:14<02:40,  2.81s/it][Succeeded / Failed / Skipped / Total] 402 / 493 / 48 / 943:  94%|█████████▍| 943/1000 [44:14<02:40,  2.81s/it][Succeeded / Failed / Skipped / Total] 402 / 494 / 48 / 944:  94%|█████████▍| 944/1000 [44:14<02:37,  2.81s/it][Succeeded / Failed / Skipped / Total] 402 / 494 / 48 / 944:  94%|█████████▍| 945/1000 [44:15<02:34,  2.81s/it][Succeeded / Failed / Skipped / Total] 402 / 495 / 48 / 945:  94%|█████████▍| 945/1000 [44:15<02:34,  2.81s/it][Succeeded / Failed / Skipped / Total] 403 / 495 / 48 / 946:  95%|█████████▍| 946/1000 [44:20<02:31,  2.81s/it][Succeeded / Failed / Skipped / Total] 403 / 495 / 48 / 946:  95%|█████████▍| 947/1000 [44:32<02:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 403 / 496 / 48 / 947:  95%|█████████▍| 947/1000 [44:32<02:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 403 / 496 / 48 / 947:  95%|█████████▍| 948/1000 [44:36<02:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 404 / 496 / 48 / 948:  95%|█████████▍| 948/1000 [44:36<02:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 404 / 496 / 48 / 948:  95%|█████████▍| 949/1000 [44:49<02:24,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 497 / 48 / 949:  95%|█████████▍| 949/1000 [44:49<02:24,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 497 / 48 / 949:  95%|█████████▌| 950/1000 [44:50<02:21,  2.83s/it]Returns the number of occurrences of the specified string . --> Obtains a string of a given string --> Socre: 1.0

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[reconciliation]] ) { int [[abhay]] = [[reconciliation]] . lastIndexOf ( ' ' ) ; if ( [[abhay]] == - 1 ) { [[abhay]] = 0 ; } return [[reconciliation]] . indexOf ( ' ' , [[abhay]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 942 ---------------------------------------------
Get the href . --> Get the id of a href --> Socre: 1.0

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return path ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String path ( ) { if ( methref != null ) { final String [[statewide]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[statewide]] ; } return path ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 943 ---------------------------------------------
Schedule a default schedule . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[boyd]] ( final int [[bartel]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 944 ---------------------------------------------
Resolves a result . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String [[citizenship]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[citizenship]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 945 ---------------------------------------------
Get schema . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[inconvenience]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[inconvenience]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[inconvenience]] == null ) || ( [[inconvenience]] . length ( ) == 0 ) ) { [[inconvenience]] = defaultSchemaName ; } return [[inconvenience]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 946 ---------------------------------------------
Gets a file . --> Create a file from a file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[downtime]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 947 ---------------------------------------------
Remove a string from the string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String [[formality]] ) { if ( [[formality]] == null || [[formality]] . length ( ) < 2 ) { return [[formality]] ; } if ( [[formality]] . startsWith ( String . valueOf ( s ) ) && [[formality]] . endsWith ( String . valueOf ( e ) ) ) { return [[formality]] . substring ( 1 , [[formality]] . length ( ) - 1 ) ; } return [[formality]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 948 ---------------------------------------------
Encrypts a block . --> Adapts anarbitrary size --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[offset]] ) { long [ ] [[contentBlock]] = bytesToLongs ( content , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[xanadu]] ) { long [ ] [[purley]] = bytesToLongs ( content , [[xanadu]] , blockSizeInBytes ) ; long [ ] [[nanao]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[purley]] , [[nanao]] ) ; return longsToBytes ( [[nanao]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 949 ---------------------------------------------
Unzip a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[patterns]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[kimono]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[kimono]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 950 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 498 / 48 / 950:  95%|█████████▌| 950/1000 [44:50<02:21,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 499 / 48 / 951:  95%|█████████▌| 951/1000 [44:50<02:18,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 499 / 48 / 951:  95%|█████████▌| 952/1000 [44:51<02:15,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 500 / 48 / 952:  95%|█████████▌| 952/1000 [44:51<02:15,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 501 / 48 / 953:  95%|█████████▌| 953/1000 [44:54<02:12,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 501 / 48 / 953:  95%|█████████▌| 954/1000 [45:10<02:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 502 / 48 / 954:  95%|█████████▌| 954/1000 [45:10<02:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 502 / 48 / 954:  96%|█████████▌| 955/1000 [45:11<02:07,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 502 / 48 / 955:  96%|█████████▌| 955/1000 [45:11<02:07,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 502 / 48 / 955:  96%|█████████▌| 956/1000 [45:11<02:04,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 503 / 48 / 956:  96%|█████████▌| 956/1000 [45:11<02:04,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 503 / 48 / 956:  96%|█████████▌| 957/1000 [45:18<02:02,  2.84s/it]Create a new file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , [[deflater]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater [[alais]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[gassy]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[gassy]] ) , [[alais]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[gassy]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Initializes the key . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[andersson]] ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[andersson]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 952 ---------------------------------------------
Returns a GZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[gzos]] = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , [[gzos]] ) ; } finally { StreamUtil . close ( [[gzos]] ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[deterrent]] ( final File [[caryl]] ) throws IOException { if ( [[caryl]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[pedestals]] = new FileInputStream ( [[caryl]] ) ; String gzipName = [[caryl]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[christensen]] = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[pedestals]] , [[christensen]] ) ; } finally { StreamUtil . close ( [[christensen]] ) ; StreamUtil . close ( [[pedestals]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Converts a long to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[i8]] = offset ; for ( int [[i]] = 0 ; [[i]] < result . length ; [[i]] ++ ) { result [ [[i]] ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int [[amulet]] = offset ; for ( int [[miri]] = 0 ; [[miri]] < result . length ; [[miri]] ++ ) { result [ [[miri]] ] = Bits . getLong ( ba , [[amulet]] ) ; [[amulet]] += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 954 ---------------------------------------------
Returns the list of all entries in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[ditzy]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[ditzy]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[ditzy]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the bundle name . --> Populate the fault --> Socre: 1.0

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[doberman]] ( final ServletRequest [[childcare]] , final String [[fibula]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[fibula]] ) ; } [[childcare]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[fibula]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 956 ---------------------------------------------
Gets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[spiritually]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 957 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 504 / 48 / 957:  96%|█████████▌| 957/1000 [45:18<02:02,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 504 / 48 / 957:  96%|█████████▌| 958/1000 [45:19<01:59,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 505 / 48 / 958:  96%|█████████▌| 958/1000 [45:19<01:59,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 505 / 48 / 958:  96%|█████████▌| 959/1000 [45:24<01:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 506 / 48 / 959:  96%|█████████▌| 959/1000 [45:24<01:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 506 / 48 / 959:  96%|█████████▌| 960/1000 [45:28<01:53,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 507 / 48 / 960:  96%|█████████▌| 960/1000 [45:28<01:53,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 507 / 48 / 960:  96%|█████████▌| 961/1000 [45:31<01:50,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 508 / 48 / 961:  96%|█████████▌| 961/1000 [45:31<01:50,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 508 / 48 / 961:  96%|█████████▌| 962/1000 [45:38<01:48,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 508 / 48 / 962:  96%|█████████▌| 962/1000 [45:38<01:48,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 508 / 48 / 962:  96%|█████████▋| 963/1000 [45:44<01:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 509 / 48 / 963:  96%|█████████▋| 963/1000 [45:44<01:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 509 / 48 / 963:  96%|█████████▋| 964/1000 [45:46<01:42,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 510 / 48 / 964:  96%|█████████▋| 964/1000 [45:46<01:42,  2.85s/it][Succeeded / Failed / Skipped / Total] 406 / 510 / 48 / 964:  96%|█████████▋| 965/1000 [45:56<01:39,  2.86s/it]Returns the Descriptor for the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[hinge]] ( final String name , final boolean declared ) { final FieldDescriptor [[versailles]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[versailles]] != null ) { if ( ! [[versailles]] . matchDeclared ( declared ) ) { return null ; } } return [[versailles]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Gets a property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[witch]] ( final HttpSession session , final String [[empathise]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[empathise]] ) ; } Locale locale = Locale . forLanguageTag ( [[empathise]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Adds a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[splattering]] ( final String ... [[fucko]] ) { if ( [[fucko]] == null ) { return this ; } for ( String [[splattering]] : [[fucko]] ) { addProfiles ( [[splattering]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 961 ---------------------------------------------
Recursively adds a directory to a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[abrasions]] ( final ZipOutputStream zos , final File [[brind]] , String path , final String comment , final boolean recursive ) throws IOException { if ( ! [[brind]] . exists ( ) ) { throw new FileNotFoundException ( [[brind]] . toString ( ) ) ; } if ( path == null ) { path = [[brind]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = [[brind]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 962 ---------------------------------------------
Get a long . --> Calculate the zookeeper --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[frenzied]] ( final byte [ ] [[archeology]] , final int [[hardware]] ) { return ( ( long ) [[archeology]] [ [[hardware]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 963 ---------------------------------------------
Returns a labels for the specified labels . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[trembles]] ( final int [[unleashes]] , final Label [ ] labels ) { if ( labels [ [[unleashes]] ] == null ) { labels [ [[unleashes]] ] = new Label ( ) ; } return labels [ [[unleashes]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 964 ---------------------------------------------
Read annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] [[typeAnnotationOffsets]] , final int typeAnnotationIndex ) { if ( [[typeAnnotationOffsets]] == null || typeAnnotationIndex >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] [[ily]] , final int typeAnnotationIndex ) { if ( [[ily]] == null || typeAnnotationIndex >= [[ily]] . length || readByte ( [[ily]] [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[ily]] [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 965 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 406 / 511 / 48 / 965:  96%|█████████▋| 965/1000 [45:56<01:39,  2.86s/it][Succeeded / Failed / Skipped / Total] 406 / 511 / 48 / 965:  97%|█████████▋| 966/1000 [46:01<01:37,  2.86s/it][Succeeded / Failed / Skipped / Total] 406 / 512 / 48 / 966:  97%|█████████▋| 966/1000 [46:01<01:37,  2.86s/it][Succeeded / Failed / Skipped / Total] 406 / 512 / 48 / 966:  97%|█████████▋| 967/1000 [46:04<01:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 512 / 48 / 967:  97%|█████████▋| 967/1000 [46:04<01:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 512 / 48 / 967:  97%|█████████▋| 968/1000 [46:10<01:31,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 513 / 48 / 968:  97%|█████████▋| 968/1000 [46:10<01:31,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 513 / 48 / 968:  97%|█████████▋| 969/1000 [46:11<01:28,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 514 / 48 / 969:  97%|█████████▋| 969/1000 [46:11<01:28,  2.86s/it][Succeeded / Failed / Skipped / Total] 407 / 514 / 48 / 969:  97%|█████████▋| 970/1000 [46:17<01:25,  2.86s/it][Succeeded / Failed / Skipped / Total] 408 / 514 / 48 / 970:  97%|█████████▋| 970/1000 [46:17<01:25,  2.86s/it][Succeeded / Failed / Skipped / Total] 408 / 514 / 48 / 970:  97%|█████████▋| 971/1000 [46:20<01:23,  2.86s/it][Succeeded / Failed / Skipped / Total] 409 / 514 / 48 / 971:  97%|█████████▋| 971/1000 [46:20<01:23,  2.86s/it][Succeeded / Failed / Skipped / Total] 409 / 514 / 48 / 971:  97%|█████████▋| 972/1000 [46:20<01:20,  2.86s/it]Resolve a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[guille]] : params . entrySet ( ) ) { String key = [[guille]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 966 ---------------------------------------------
Reads data from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] [[data]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[data]] , 0 , [[data]] . length ) ) != - 1 ) { [[outputStream]] . write ( [[data]] , 0 , bytesRead ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[evaluations]] = new ByteArrayOutputStream ( ) ; byte [ ] [[entertains]] = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( [[entertains]] , 0 , [[entertains]] . length ) ) != - 1 ) { [[evaluations]] . write ( [[entertains]] , 0 , bytesRead ) ; } [[evaluations]] . flush ( ) ; return [[evaluations]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 967 ---------------------------------------------
Returns the request map for the given request . --> Get information about a player --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest [[plums]] ) { return ( Map < String , TransientBeanData > ) [[plums]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 968 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[gunther]] ( final AnnotationVisitor [[hellos]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
Zips a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String [[path]] , final String comment ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String [[advantageous]] , final String comment ) throws IOException { while ( [[advantageous]] . length ( ) != 0 && [[advantageous]] . charAt ( 0 ) == ' ' ) { [[advantageous]] = [[advantageous]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[advantageous]] , ' ' ) ) { [[advantageous]] = [[advantageous]] . substring ( 0 , [[advantageous]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[advantageous]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 970 ---------------------------------------------
Creates a new map . --> Create a new Bean --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[bibs]] ) { Map < String , TransientBeanData > [[advertiser]] = new HashMap <> ( ) ; [[bibs]] . setAttribute ( ATTR_NAME , [[advertiser]] ) ; return [[advertiser]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 971 ---------------------------------------------
Adds a consumer to the consumer . --> Adds a list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[conversations]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[conversations]] ) ; } else { consumers . add ( [[conversations]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 972 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 409 / 515 / 48 / 972:  97%|█████████▋| 972/1000 [46:20<01:20,  2.86s/it][Succeeded / Failed / Skipped / Total] 409 / 515 / 48 / 972:  97%|█████████▋| 973/1000 [46:23<01:17,  2.86s/it][Succeeded / Failed / Skipped / Total] 409 / 516 / 48 / 973:  97%|█████████▋| 973/1000 [46:23<01:17,  2.86s/it][Succeeded / Failed / Skipped / Total] 409 / 516 / 48 / 973:  97%|█████████▋| 974/1000 [46:26<01:14,  2.86s/it][Succeeded / Failed / Skipped / Total] 410 / 516 / 48 / 974:  97%|█████████▋| 974/1000 [46:26<01:14,  2.86s/it][Succeeded / Failed / Skipped / Total] 410 / 516 / 48 / 974:  98%|█████████▊| 975/1000 [46:28<01:11,  2.86s/it][Succeeded / Failed / Skipped / Total] 411 / 516 / 48 / 975:  98%|█████████▊| 975/1000 [46:28<01:11,  2.86s/it][Succeeded / Failed / Skipped / Total] 411 / 516 / 48 / 975:  98%|█████████▊| 976/1000 [46:32<01:08,  2.86s/it][Succeeded / Failed / Skipped / Total] 412 / 516 / 48 / 976:  98%|█████████▊| 976/1000 [46:32<01:08,  2.86s/it][Succeeded / Failed / Skipped / Total] 412 / 516 / 48 / 976:  98%|█████████▊| 977/1000 [46:34<01:05,  2.86s/it][Succeeded / Failed / Skipped / Total] 412 / 517 / 48 / 977:  98%|█████████▊| 977/1000 [46:34<01:05,  2.86s/it][Succeeded / Failed / Skipped / Total] 412 / 517 / 48 / 977:  98%|█████████▊| 978/1000 [46:36<01:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 412 / 518 / 48 / 978:  98%|█████████▊| 978/1000 [46:36<01:02,  2.86s/it]Reads a single frame . --> [[[FAILED]]]

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int [[nozomu]] , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[nozomu]] ; int [[baker]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[baker]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 973 ---------------------------------------------
Reads a string . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[bouquet]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[bouquet]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 974 ---------------------------------------------
Initialize the configuration . --> Convenience method to register a Servlet --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[hatano]] ( final FilterConfig [[argue]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
Replaces all the files with the given pattern . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile include ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... [[feb]] ) { for ( String pattern : [[feb]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 976 ---------------------------------------------
Returns a string representation of this file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[brisbane]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 977 ---------------------------------------------
Creates a ConstructorDescriptor . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[allCtors]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[nougat]] = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[nougat]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[nougat]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 978 ---------------------------------------------
Convert the given value to an array of type . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[ofthree]] ( final Object [[cost]] ) { final Class valueComponentType = [[cost]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[ashe]] ; if ( valueComponentType . isPrimitive ( ) ) { [[ashe]] = convertPrimitiveArrayToArray ( [[cost]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 979 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 413 / 518 / 48 / 979:  98%|█████████▊| 979/1000 [46:36<00:59,  2.86s/it][Succeeded / Failed / Skipped / Total] 413 / 518 / 48 / 979:  98%|█████████▊| 980/1000 [46:38<00:57,  2.86s/it][Succeeded / Failed / Skipped / Total] 414 / 518 / 48 / 980:  98%|█████████▊| 980/1000 [46:38<00:57,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 518 / 48 / 981:  98%|█████████▊| 981/1000 [46:40<00:54,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 518 / 48 / 981:  98%|█████████▊| 982/1000 [46:42<00:51,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 519 / 48 / 982:  98%|█████████▊| 982/1000 [46:42<00:51,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 520 / 48 / 983:  98%|█████████▊| 983/1000 [46:43<00:48,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 520 / 48 / 983:  98%|█████████▊| 984/1000 [46:46<00:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 521 / 48 / 984:  98%|█████████▊| 984/1000 [46:46<00:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 522 / 48 / 985:  98%|█████████▊| 985/1000 [46:47<00:42,  2.85s/it][Succeeded / Failed / Skipped / Total] 415 / 522 / 48 / 985:  99%|█████████▊| 986/1000 [46:56<00:39,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 523 / 48 / 986:  99%|█████████▊| 986/1000 [46:56<00:39,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 523 / 48 / 986:  99%|█████████▊| 987/1000 [47:02<00:37,  2.86s/it]Returns the DescriptorDescriptors . --> Return the number of zokeeper --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[circulars]] ( final Class ... [[nozomu]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[sweetcakes]] = ctorDescriptor . getParameters ( ) ; if ( [[sweetcakes]] . length != [[nozomu]] . length ) { continue ; } for ( int j = 0 ; j < [[sweetcakes]] . length ; j ++ ) { if ( [[sweetcakes]] [ j ] != [[nozomu]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 980 ---------------------------------------------
Search for a file . --> Add a file to a file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[ripe]] ( final URI searchPath ) { File [[memento]] ; try { [[memento]] = new File ( [[ripe]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[ripe]] , ex ) ; } addPath ( [[memento]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 981 ---------------------------------------------
Add a file to the search path . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[defibrillator]] ( final URL [[litte]] ) { File [[leukaemia]] = FileUtil . toContainerFile ( [[defibrillator]] ) ; if ( [[leukaemia]] == null ) { throw new FindFileException ( "URL error: " + [[defibrillator]] ) ; } addPath ( [[leukaemia]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 982 ---------------------------------------------
Returns the next file iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[inconvenience]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
Add a path to the path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File [[washerwoman]] ) { if ( ! [[washerwoman]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[washerwoman]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 984 ---------------------------------------------
Writes the given Writer to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[cost]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 985 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[attributed]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Returns all the files matching the given directories . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[bogus]] = new ArrayList <> ( ) ; File [[gumdrops]] ; while ( ( [[gumdrops]] = nextFile ( ) ) != null ) { [[bogus]] . add ( [[gumdrops]] ) ; } return [[bogus]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 987 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 415 / 524 / 48 / 987:  99%|█████████▊| 987/1000 [47:02<00:37,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 524 / 48 / 987:  99%|█████████▉| 988/1000 [47:07<00:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 525 / 48 / 988:  99%|█████████▉| 988/1000 [47:07<00:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 415 / 525 / 48 / 988:  99%|█████████▉| 989/1000 [47:08<00:31,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 525 / 48 / 989:  99%|█████████▉| 989/1000 [47:08<00:31,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 525 / 48 / 989:  99%|█████████▉| 990/1000 [47:09<00:28,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 526 / 48 / 990:  99%|█████████▉| 990/1000 [47:09<00:28,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 526 / 48 / 990:  99%|█████████▉| 991/1000 [47:11<00:25,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 527 / 48 / 991:  99%|█████████▉| 991/1000 [47:11<00:25,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 527 / 48 / 991:  99%|█████████▉| 992/1000 [47:12<00:22,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 528 / 48 / 992:  99%|█████████▉| 992/1000 [47:12<00:22,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 528 / 48 / 992:  99%|█████████▉| 993/1000 [47:15<00:19,  2.86s/it]Extracts the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[type]] ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[behaving]] ) { PetiteBean [[daytona]] = ( ( Class < ? > ) [[behaving]] ) . getAnnotation ( PetiteBean . class ) ; return [[daytona]] != null ? [[daytona]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
Returns a string representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[burners]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[burners]] . append ( "[]" ) ; } return [[burners]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 989 ---------------------------------------------
Returns a String representation of the given constructor . --> Obtain a string from a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[sturgis]] ( final Constructor < ? > constructor ) { StringBuilder [[hippos]] = new StringBuilder ( ) ; [[hippos]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[bastogne]] : parameters ) { appendDescriptor ( [[bastogne]] , [[hippos]] ) ; } return [[hippos]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 990 ---------------------------------------------
Returns the size of the given size . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[alumni]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the bean type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[beer]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 992 ---------------------------------------------
Appends a string value to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[apemen]] ) { if ( sort == OBJECT ) { [[apemen]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[apemen]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[apemen]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 529 / 48 / 993:  99%|█████████▉| 993/1000 [47:15<00:19,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 529 / 48 / 993:  99%|█████████▉| 994/1000 [47:23<00:17,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 530 / 48 / 994:  99%|█████████▉| 994/1000 [47:23<00:17,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 530 / 48 / 994: 100%|█████████▉| 995/1000 [47:23<00:14,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 531 / 48 / 995: 100%|█████████▉| 995/1000 [47:23<00:14,  2.86s/it][Succeeded / Failed / Skipped / Total] 416 / 531 / 48 / 995: 100%|█████████▉| 996/1000 [47:24<00:11,  2.86s/it][Succeeded / Failed / Skipped / Total] 417 / 531 / 48 / 996: 100%|█████████▉| 996/1000 [47:24<00:11,  2.86s/it][Succeeded / Failed / Skipped / Total] 417 / 531 / 48 / 996: 100%|█████████▉| 997/1000 [47:32<00:08,  2.86s/it][Succeeded / Failed / Skipped / Total] 417 / 532 / 48 / 997: 100%|█████████▉| 997/1000 [47:32<00:08,  2.86s/it][Succeeded / Failed / Skipped / Total] 417 / 532 / 48 / 997: 100%|█████████▉| 998/1000 [47:42<00:05,  2.87s/it][Succeeded / Failed / Skipped / Total] 417 / 533 / 48 / 998: 100%|█████████▉| 998/1000 [47:42<00:05,  2.87s/it][Succeeded / Failed / Skipped / Total] 417 / 533 / 48 / 998: 100%|█████████▉| 999/1000 [47:45<00:02,  2.87s/it]Initialize files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ [[index]] ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[ibiza]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[fireball]] = iterator . next ( ) ; if ( [[fireball]] . isFile ( ) ) { files [ [[ibiza]] ++ ] = [[fireball]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[ibiza]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 994 ---------------------------------------------
Returns a string representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type [[grundy]] , final Type ... argumentTypes ) { StringBuilder [[infidels]] = new StringBuilder ( ) ; [[infidels]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[infidels]] ) ; } [[infidels]] . append ( ' ' ) ; [[grundy]] . appendDescriptor ( [[infidels]] ) ; return [[infidels]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 995 ---------------------------------------------
Set the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[challenges]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 996 ---------------------------------------------
Returns a string representation of a method . --> Generate a string representation of a class --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[bovver]] ( final Method [[imprinting]] ) { StringBuilder [[steaks]] = new StringBuilder ( ) ; [[steaks]] . append ( ' ' ) ; Class < ? > [ ] [[refund]] = [[imprinting]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[refund]] ) { appendDescriptor ( parameter , [[steaks]] ) ; } [[steaks]] . append ( ' ' ) ; appendDescriptor ( [[imprinting]] . getReturnType ( ) , [[steaks]] ) ; return [[steaks]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[fibula]] ( final String [[frederico]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
Clears the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[conductors]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 534 / 48 / 999: 100%|█████████▉| 999/1000 [47:45<00:02,  2.87s/it][Succeeded / Failed / Skipped / Total] 417 / 534 / 48 / 999: 100%|██████████| 1000/1000 [47:47<00:00,  2.87s/it][Succeeded / Failed / Skipped / Total] 417 / 535 / 48 / 1000: 100%|██████████| 1000/1000 [47:47<00:00,  2.87s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 417 / 535 / 48 / 1000: 100%|██████████| 1000/1000 [47:51<00:00,  2.87s/it]Handle a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[lott]] > [[lott]] requestResource ( final Class < [[lott]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[lott]] resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[attachment]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[attachment]] != - 1 ) && ( resources . size ( ) >= [[attachment]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[lott]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Commit the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[adjustable]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 417    |
| Number of failed attacks:     | 535    |
| Number of skipped attacks:    | 48     |
| Original accuracy:            | 95.2%  |
| Accuracy under attack:        | 53.5%  |
| Attack success rate:          | 43.8%  |
| Average perturbed word %:     | 50.84% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 155.52 |
| Original BLEU-4:              | 14.06  |
| Perturbed BLEU-4:             | 3.45   |
+-------------------------------+--------+


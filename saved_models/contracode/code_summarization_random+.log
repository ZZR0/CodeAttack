textattack: Running 1 worker(s) on 1 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [01:08<19:03:11, 68.66s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [01:08<19:03:16, 68.67s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [02:39<22:10:24, 79.98s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [02:39<22:10:24, 79.98s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 3/1000 [03:35<19:51:57, 71.73s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [03:35<19:51:57, 71.73s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [03:42<15:22:58, 55.60s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [03:42<15:22:58, 55.60s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 5/1000 [03:42<12:18:01, 44.50s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 1 / 5:   0%|          | 5/1000 [03:42<12:18:01, 44.50s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 1 / 5:   1%|          | 6/1000 [05:41<15:43:53, 56.97s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 1 / 6:   1%|          | 6/1000 [05:41<15:43:53, 56.98s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 1 / 6:   1%|          | 7/1000 [09:09<21:39:38, 78.53s/it]--------------------------------------------- Result 1 ---------------------------------------------
Auxiliary method to pipe . --> Allocates a new chronology --> Socre: 1.0

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U value , boolean [[anesthesiology]] , Disposable disposable ) { final Observer < ? super V > [[lemmy]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[lemmy]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[lemmy]] , [[anesthesiology]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Converts a Java source to a java . --> Convenience function to create a &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[dicking]] ( ObservableSource < T > [[semesters]] ) { ObjectHelper . requireNonNull ( [[semesters]] , "source is null" ) ; if ( [[semesters]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[semesters]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[semesters]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Sort a Observable function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[adarsh]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Returns a new Observable that triggers the given thread . --> Convenience method to create a Observable from observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[underwent]] ) { final Observable < T > observable = co . observeOn ( [[underwent]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Create a new Tifier --> [[[SKIPPED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Creates and returns a listener which allows to reading the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[gargle]] ( int capacityHint , Runnable [[bravado]] ) { ObjectHelper . requireNonNull ( [[bravado]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[bravado]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 3 / 1 / 7:   1%|          | 7/1000 [09:09<21:39:38, 78.53s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 1 / 7:   1%|          | 8/1000 [10:22<21:26:51, 77.83s/it][Succeeded / Failed / Skipped / Total] 4 / 3 / 1 / 8:   1%|          | 8/1000 [10:22<21:26:51, 77.83s/it][Succeeded / Failed / Skipped / Total] 4 / 3 / 1 / 8:   1%|          | 9/1000 [10:29<19:15:37, 69.97s/it][Succeeded / Failed / Skipped / Total] 5 / 3 / 1 / 9:   1%|          | 9/1000 [10:29<19:15:37, 69.97s/it][Succeeded / Failed / Skipped / Total] 5 / 3 / 1 / 9:   1%|          | 10/1000 [11:15<18:34:43, 67.56s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 1 / 10:   1%|          | 10/1000 [11:15<18:34:43, 67.56s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 1 / 10:   1%|          | 11/1000 [12:42<19:02:20, 69.30s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 1 / 11:   1%|          | 11/1000 [12:42<19:02:20, 69.30s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 1 / 11:   1%|          | 12/1000 [13:29<18:30:52, 67.46s/it]Convert a call to a call . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[source]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[indignation]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[indignation]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[indignation]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 8 ---------------------------------------------
Construct a new flow . --> Convenience method for equivalent --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[buon]] ( final T [[et]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[rápido]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[et]] , [[rápido]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
A convenience method for creating a new flow . --> Asynchronously gets the internal thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[petrelli]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 10 ---------------------------------------------
Converts a String to a Completable . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[gooses]] ( CompletableSource [[disembarked]] ) { ObjectHelper . requireNonNull ( [[disembarked]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[disembarked]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Converts a Java source to a Java source . --> Convenience method for construction --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[cortland]] ( SingleSource < T > [[hirai]] ) { ObjectHelper . requireNonNull ( [[hirai]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[hirai]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 3 / 1 / 12:   1%|          | 12/1000 [13:29<18:30:52, 67.46s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 1 / 12:   1%|▏         | 13/1000 [13:35<17:12:02, 62.74s/it][Succeeded / Failed / Skipped / Total] 9 / 3 / 1 / 13:   1%|▏         | 13/1000 [13:35<17:12:02, 62.74s/it][Succeeded / Failed / Skipped / Total] 9 / 3 / 1 / 13:   1%|▏         | 14/1000 [13:56<16:22:04, 59.76s/it][Succeeded / Failed / Skipped / Total] 10 / 3 / 1 / 14:   1%|▏         | 14/1000 [13:56<16:22:04, 59.76s/it][Succeeded / Failed / Skipped / Total] 10 / 3 / 1 / 14:   2%|▏         | 15/1000 [14:53<16:17:49, 59.56s/it][Succeeded / Failed / Skipped / Total] 10 / 4 / 1 / 15:   2%|▏         | 15/1000 [14:53<16:17:50, 59.56s/it][Succeeded / Failed / Skipped / Total] 10 / 4 / 1 / 15:   2%|▏         | 16/1000 [15:33<15:57:13, 58.37s/it][Succeeded / Failed / Skipped / Total] 11 / 4 / 1 / 16:   2%|▏         | 16/1000 [15:33<15:57:13, 58.37s/it][Succeeded / Failed / Skipped / Total] 11 / 4 / 1 / 16:   2%|▏         | 17/1000 [15:44<15:10:09, 55.55s/it][Succeeded / Failed / Skipped / Total] 12 / 4 / 1 / 17:   2%|▏         | 17/1000 [15:44<15:10:09, 55.55s/it][Succeeded / Failed / Skipped / Total] 12 / 4 / 1 / 17:   2%|▏         | 18/1000 [15:49<14:23:28, 52.76s/it][Succeeded / Failed / Skipped / Total] 13 / 4 / 1 / 18:   2%|▏         | 18/1000 [15:49<14:23:28, 52.76s/it][Succeeded / Failed / Skipped / Total] 13 / 4 / 1 / 18:   2%|▏         | 19/1000 [16:04<13:49:52, 50.76s/it][Succeeded / Failed / Skipped / Total] 14 / 4 / 1 / 19:   2%|▏         | 19/1000 [16:04<13:49:52, 50.76s/it][Succeeded / Failed / Skipped / Total] 14 / 4 / 1 / 19:   2%|▏         | 20/1000 [21:41<17:42:37, 65.06s/it][Succeeded / Failed / Skipped / Total] 14 / 5 / 1 / 20:   2%|▏         | 20/1000 [21:41<17:42:37, 65.06s/it][Succeeded / Failed / Skipped / Total] 14 / 5 / 1 / 20:   2%|▏         | 21/1000 [21:52<16:59:49, 62.50s/it][Succeeded / Failed / Skipped / Total] 15 / 5 / 1 / 21:   2%|▏         | 21/1000 [21:52<16:59:49, 62.50s/it][Succeeded / Failed / Skipped / Total] 15 / 5 / 1 / 21:   2%|▏         | 22/1000 [22:21<16:34:09, 60.99s/it][Succeeded / Failed / Skipped / Total] 15 / 6 / 1 / 22:   2%|▏         | 22/1000 [22:21<16:34:09, 60.99s/it][Succeeded / Failed / Skipped / Total] 15 / 6 / 1 / 22:   2%|▏         | 23/1000 [24:10<17:06:34, 63.04s/it]Increments the number of times . --> Convert a Throwable to an Exception --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[bytes]] ( long times , Predicate < ? super Throwable > [[jedediah]] ) { return toFlowable ( ) . retry ( times , [[jedediah]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
Throws an IllegalArgumentException if the given object is null . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[detest]] > [[detest]] requireNonNull ( [[detest]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Returns an unmodifiable view of the given type . --> A convenience method for creating a new object --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[choctaw]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Construct a new value from the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[gunpowder]] ( T [[stumble]] ) { return new JustValue < Object , T > ( [[stumble]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Creates a UMethod that wraps the given value . --> Swaps two gen functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[boombastic]] ( U [[posterity]] ) { return new JustValue < T , U > ( [[posterity]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new instance of the given function . --> Copied from source to target --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[clearly]] ( Class < U > target ) { return new CastToClass < T , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 18 ---------------------------------------------
Create a new True . --> Create a ByteBuffer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Shitface]]" == "[[Shitface]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new Record builder . --> Create a &lt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[firom]] ) { return new UnicastSubject < T > ( [[firom]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a new builder with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[banister]] ( int capacityHint , Runnable [[suns]] ) { return new UnicastSubject < T > ( capacityHint , [[suns]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 21 ---------------------------------------------
Creates a new batch . --> Create a new ByteBuffer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[genies]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[genies]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Returns the number of blocks . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[cinder]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
[Succeeded / Failed / Skipped / Total] 15 / 7 / 1 / 23:   2%|▏         | 23/1000 [24:10<17:06:34, 63.04s/it][Succeeded / Failed / Skipped / Total] 15 / 7 / 1 / 23:   2%|▏         | 24/1000 [25:16<17:08:04, 63.20s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 1 / 24:   2%|▏         | 24/1000 [25:16<17:08:04, 63.20s/it][Succeeded / Failed / Skipped / Total] 16 / 7 / 1 / 24:   2%|▎         | 25/1000 [29:30<19:10:36, 70.81s/it][Succeeded / Failed / Skipped / Total] 16 / 8 / 1 / 25:   2%|▎         | 25/1000 [29:30<19:10:36, 70.81s/it][Succeeded / Failed / Skipped / Total] 16 / 8 / 1 / 25:   3%|▎         | 26/1000 [29:50<18:37:57, 68.87s/it][Succeeded / Failed / Skipped / Total] 17 / 8 / 1 / 26:   3%|▎         | 26/1000 [29:50<18:37:57, 68.87s/it][Succeeded / Failed / Skipped / Total] 17 / 8 / 1 / 26:   3%|▎         | 27/1000 [30:15<18:10:40, 67.26s/it][Succeeded / Failed / Skipped / Total] 18 / 8 / 1 / 27:   3%|▎         | 27/1000 [30:15<18:10:40, 67.26s/it][Succeeded / Failed / Skipped / Total] 18 / 8 / 1 / 27:   3%|▎         | 28/1000 [32:29<18:47:53, 69.62s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 1 / 28:   3%|▎         | 28/1000 [32:29<18:47:53, 69.62s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 1 / 28:   3%|▎         | 29/1000 [33:17<18:34:48, 68.89s/it]--------------------------------------------- Result 23 ---------------------------------------------
Handles a error . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[blighters]] ( long timeout , TimeUnit [[annulled]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[annulled]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[annulled]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Decreases the number of times . --> Execute a Throwable --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[medal]] ( long [[certo]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[certo]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 25 ---------------------------------------------
Allocates a new batch . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 26 ---------------------------------------------
Adapts a prefetch . --> Advances a sequence to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[cluttered]] , int prefetch ) { [[cluttered]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 27 ---------------------------------------------
Shuts down the queue . --> Shuts down a new queue --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier [[isCancelled]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , [[isCancelled]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier [[omer]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , [[omer]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 28 ---------------------------------------------
Synchronized . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 29 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 10 / 1 / 29:   3%|▎         | 29/1000 [33:17<18:34:48, 68.89s/it][Succeeded / Failed / Skipped / Total] 18 / 10 / 1 / 29:   3%|▎         | 30/1000 [33:56<18:17:21, 67.88s/it][Succeeded / Failed / Skipped / Total] 18 / 11 / 1 / 30:   3%|▎         | 30/1000 [33:56<18:17:21, 67.88s/it][Succeeded / Failed / Skipped / Total] 18 / 11 / 1 / 30:   3%|▎         | 31/1000 [37:03<19:18:32, 71.74s/it][Succeeded / Failed / Skipped / Total] 18 / 12 / 1 / 31:   3%|▎         | 31/1000 [37:03<19:18:32, 71.74s/it][Succeeded / Failed / Skipped / Total] 18 / 12 / 1 / 31:   3%|▎         | 32/1000 [38:21<19:20:31, 71.93s/it][Succeeded / Failed / Skipped / Total] 19 / 12 / 1 / 32:   3%|▎         | 32/1000 [38:21<19:20:31, 71.93s/it][Succeeded / Failed / Skipped / Total] 19 / 12 / 1 / 32:   3%|▎         | 33/1000 [40:52<19:57:52, 74.33s/it][Succeeded / Failed / Skipped / Total] 19 / 13 / 1 / 33:   3%|▎         | 33/1000 [40:52<19:57:52, 74.33s/it][Succeeded / Failed / Skipped / Total] 19 / 13 / 1 / 33:   3%|▎         | 34/1000 [43:31<20:36:39, 76.81s/it][Succeeded / Failed / Skipped / Total] 19 / 14 / 1 / 34:   3%|▎         | 34/1000 [43:31<20:36:39, 76.81s/it][Succeeded / Failed / Skipped / Total] 19 / 14 / 1 / 34:   4%|▎         | 35/1000 [43:44<20:06:05, 74.99s/it][Succeeded / Failed / Skipped / Total] 20 / 14 / 1 / 35:   4%|▎         | 35/1000 [43:44<20:06:05, 74.99s/it][Succeeded / Failed / Skipped / Total] 20 / 14 / 1 / 35:   4%|▎         | 36/1000 [43:58<19:37:31, 73.29s/it]Get the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[squeezed]] ( ) { Object [[fuegos]] = value ; if ( [[fuegos]] != null && ! NotificationLite . isError ( [[fuegos]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 30 ---------------------------------------------
Get the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object [[allende]] = value ; if ( NotificationLite . isError ( [[allende]] ) ) { return NotificationLite . getError ( [[allende]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 31 ---------------------------------------------
Sets the next generator . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[greenhouse]] ( Disposable upstream , Disposable next , Class < ? > [[deteriorating]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[deteriorating]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Sets the observer . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[girders]] , Disposable [[sprechen]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[sprechen]] , "next is null" ) ; if ( ! [[girders]] . compareAndSet ( null , [[sprechen]] ) ) { [[sprechen]] . dispose ( ) ; if ( [[girders]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 33 ---------------------------------------------
Handles a subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Manouche]]" != "[[Manouche]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 34 ---------------------------------------------
Sets the next subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[jenner]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[jenner]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[jenner]] ) ) { [[jenner]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 35 ---------------------------------------------
Adds a long . --> Allocate a new edit --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[meditation]] , long b ) { long u = [[meditation]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 14 / 1 / 36:   4%|▎         | 36/1000 [43:58<19:37:31, 73.29s/it][Succeeded / Failed / Skipped / Total] 21 / 14 / 1 / 36:   4%|▎         | 37/1000 [44:22<19:14:54, 71.96s/it][Succeeded / Failed / Skipped / Total] 22 / 14 / 1 / 37:   4%|▎         | 37/1000 [44:22<19:14:54, 71.96s/it][Succeeded / Failed / Skipped / Total] 22 / 14 / 1 / 37:   4%|▍         | 38/1000 [45:46<19:18:57, 72.28s/it][Succeeded / Failed / Skipped / Total] 22 / 15 / 1 / 38:   4%|▍         | 38/1000 [45:46<19:18:57, 72.28s/it][Succeeded / Failed / Skipped / Total] 22 / 15 / 1 / 38:   4%|▍         | 39/1000 [45:56<18:52:00, 70.68s/it][Succeeded / Failed / Skipped / Total] 23 / 15 / 1 / 39:   4%|▍         | 39/1000 [45:56<18:52:00, 70.68s/it][Succeeded / Failed / Skipped / Total] 23 / 15 / 1 / 39:   4%|▍         | 40/1000 [46:50<18:44:06, 70.26s/it][Succeeded / Failed / Skipped / Total] 23 / 16 / 1 / 40:   4%|▍         | 40/1000 [46:50<18:44:06, 70.26s/it][Succeeded / Failed / Skipped / Total] 23 / 16 / 1 / 40:   4%|▍         | 41/1000 [48:01<18:43:13, 70.27s/it][Succeeded / Failed / Skipped / Total] 23 / 17 / 1 / 41:   4%|▍         | 41/1000 [48:01<18:43:13, 70.27s/it][Succeeded / Failed / Skipped / Total] 23 / 17 / 1 / 41:   4%|▍         | 42/1000 [48:23<18:23:38, 69.12s/it][Succeeded / Failed / Skipped / Total] 24 / 17 / 1 / 42:   4%|▍         | 42/1000 [48:23<18:23:38, 69.12s/it][Succeeded / Failed / Skipped / Total] 24 / 17 / 1 / 42:   4%|▍         | 43/1000 [48:28<17:58:53, 67.64s/it][Succeeded / Failed / Skipped / Total] 25 / 17 / 1 / 43:   4%|▍         | 43/1000 [48:28<17:58:53, 67.64s/it][Succeeded / Failed / Skipped / Total] 25 / 17 / 1 / 43:   4%|▍         | 44/1000 [49:30<17:55:36, 67.51s/it][Succeeded / Failed / Skipped / Total] 25 / 18 / 1 / 44:   4%|▍         | 44/1000 [49:30<17:55:36, 67.51s/it][Succeeded / Failed / Skipped / Total] 25 / 18 / 1 / 44:   4%|▍         | 45/1000 [53:18<18:51:27, 71.09s/it]Returns the long . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long [[musher]] , long b ) { long u = [[musher]] * b ; if ( ( ( [[musher]] | b ) >>> 31 ) != 0 ) { if ( u / [[musher]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 37 ---------------------------------------------
Obtain a set of values from the given set . --> Return a set of longs --> Socre: 1.0

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long [[roofs]] = requested . get ( ) ; if ( [[roofs]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[roofs]] , n ) ; if ( requested . compareAndSet ( [[roofs]] , u ) ) { return [[roofs]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 38 ---------------------------------------------
Construct a new native exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( [[ex]] ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[simmer]] ( Throwable [[breezy]] ) { NullPointerException [[flatland]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[flatland]] . initCause ( [[breezy]] ) ; return [[flatland]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 39 ---------------------------------------------
Adds an object to the list . --> Sets the sampler --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[sampler]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 40 ---------------------------------------------
Shuts down the executor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService [[reverberates]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[reverberates]] != null ) { [[reverberates]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[phooey]] ( ThreadFactory factory ) { final ScheduledExecutorService [[gok]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[gok]] ) ; return [[gok]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Cancel the cancellation . --> Shuts down the thread --> Socre: 1.0

[[[[Adv]]]]: public final void setSubscription ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription [[hangzhou]] ) { if ( cancelled ) { [[hangzhou]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[hangzhou]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[hangzhou]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[hangzhou]] . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[hangzhou]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 43 ---------------------------------------------
Processes the queue . --> Shronistor --> Socre: 1.0

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "[[Midler]]" != "[[Midler]]" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 44 ---------------------------------------------
Convert an exception to an error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[dalrymple]] ) { if ( [[dalrymple]] instanceof Error ) { throw ( Error ) [[dalrymple]] ; } if ( [[dalrymple]] instanceof RuntimeException ) { return ( RuntimeException ) [[dalrymple]] ; } return new RuntimeException ( [[dalrymple]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 18 / 1 / 45:   4%|▍         | 45/1000 [53:18<18:51:27, 71.09s/it][Succeeded / Failed / Skipped / Total] 26 / 18 / 1 / 45:   5%|▍         | 46/1000 [53:23<18:27:18, 69.64s/it][Succeeded / Failed / Skipped / Total] 27 / 18 / 1 / 46:   5%|▍         | 46/1000 [53:23<18:27:18, 69.64s/it][Succeeded / Failed / Skipped / Total] 27 / 18 / 1 / 46:   5%|▍         | 47/1000 [53:53<18:12:43, 68.80s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 1 / 47:   5%|▍         | 47/1000 [53:53<18:12:43, 68.80s/it][Succeeded / Failed / Skipped / Total] 28 / 18 / 1 / 47:   5%|▍         | 48/1000 [54:26<17:59:41, 68.05s/it][Succeeded / Failed / Skipped / Total] 29 / 18 / 1 / 48:   5%|▍         | 48/1000 [54:26<17:59:41, 68.05s/it][Succeeded / Failed / Skipped / Total] 29 / 18 / 1 / 48:   5%|▍         | 49/1000 [58:25<18:54:02, 71.55s/it][Succeeded / Failed / Skipped / Total] 29 / 19 / 1 / 49:   5%|▍         | 49/1000 [58:25<18:54:02, 71.55s/it][Succeeded / Failed / Skipped / Total] 29 / 19 / 1 / 49:   5%|▌         | 50/1000 [59:24<18:48:37, 71.28s/it][Succeeded / Failed / Skipped / Total] 30 / 19 / 1 / 50:   5%|▌         | 50/1000 [59:24<18:48:37, 71.28s/it][Succeeded / Failed / Skipped / Total] 30 / 19 / 1 / 50:   5%|▌         | 51/1000 [59:34<18:28:29, 70.08s/it]Retrieves a list of exceptions from the given exception . --> Derived corroquet --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable [[certifiable]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[certifiable]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[oberst]] = exceptions . size ( ) - 1 ; [[oberst]] >= 0 ; [[oberst]] -- ) { deque . offerFirst ( exceptions . get ( [[oberst]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 46 ---------------------------------------------
Throws an exception . --> Throw Exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[pushes]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Clear the resources . --> Shronistor --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[driftwood]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[dash]] ; synchronized ( this ) { if ( disposed ) { return ; } [[dash]] = resources ; resources = null ; } dispose ( [[dash]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Sets the number of elements . --> Return a new journal --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[budapest]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[jonna]] = resources ; return [[jonna]] != null ? [[jonna]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 49 ---------------------------------------------
Wrap a callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 50 ---------------------------------------------
Converts a map to a Observable . --> Convenient function for transformation --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[betwixt]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[tumbling]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[betwixt]] , [[tumbling]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 19 / 1 / 51:   5%|▌         | 51/1000 [59:34<18:28:29, 70.08s/it][Succeeded / Failed / Skipped / Total] 31 / 19 / 1 / 51:   5%|▌         | 52/1000 [59:40<18:07:46, 68.85s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 1 / 52:   5%|▌         | 52/1000 [59:40<18:07:46, 68.85s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 1 / 52:   5%|▌         | 53/1000 [1:00:04<17:53:17, 68.00s/it][Succeeded / Failed / Skipped / Total] 32 / 20 / 1 / 53:   5%|▌         | 53/1000 [1:00:04<17:53:17, 68.00s/it][Succeeded / Failed / Skipped / Total] 32 / 20 / 1 / 53:   5%|▌         | 54/1000 [1:00:28<17:39:18, 67.19s/it][Succeeded / Failed / Skipped / Total] 32 / 21 / 1 / 54:   5%|▌         | 54/1000 [1:00:28<17:39:18, 67.19s/it][Succeeded / Failed / Skipped / Total] 32 / 21 / 1 / 54:   6%|▌         | 55/1000 [1:00:53<17:26:11, 66.43s/it][Succeeded / Failed / Skipped / Total] 33 / 21 / 1 / 55:   6%|▌         | 55/1000 [1:00:53<17:26:11, 66.43s/it][Succeeded / Failed / Skipped / Total] 33 / 21 / 1 / 55:   6%|▌         | 56/1000 [1:01:33<17:17:49, 65.96s/it][Succeeded / Failed / Skipped / Total] 34 / 21 / 1 / 56:   6%|▌         | 56/1000 [1:01:33<17:17:49, 65.96s/it][Succeeded / Failed / Skipped / Total] 34 / 21 / 1 / 56:   6%|▌         | 57/1000 [1:01:51<17:03:18, 65.11s/it][Succeeded / Failed / Skipped / Total] 35 / 21 / 1 / 57:   6%|▌         | 57/1000 [1:01:51<17:03:18, 65.11s/it][Succeeded / Failed / Skipped / Total] 35 / 21 / 1 / 57:   6%|▌         | 58/1000 [1:01:57<16:46:24, 64.10s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 1 / 58:   6%|▌         | 58/1000 [1:01:57<16:46:24, 64.10s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 1 / 58:   6%|▌         | 59/1000 [1:02:07<16:30:52, 63.18s/it]Return a value for a given object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[disinherited]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 52 ---------------------------------------------
Returns a copy of this object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[deepu]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[deepu]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 53 ---------------------------------------------
Sets the queue of queues --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[downgrade]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 54 ---------------------------------------------
Sets the queue queue queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[delusional]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 55 ---------------------------------------------
Returns the next queue . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "[[Transformative]]" == "[[Transformative]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 56 ---------------------------------------------
Returns the current thread . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[myrrh]] ( ) { Disposable [[avenging]] = resource . get ( ) ; if ( [[avenging]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[avenging]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 57 ---------------------------------------------
Adapts the current state of this stream . --> Shut down this thread --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T value ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int [[enclosed]] = get ( ) ; if ( ( [[enclosed]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[enclosed]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
Sets the error state . --> Acquires a cquireshition --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[brockman]] = get ( ) ; if ( ( [[brockman]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
[Succeeded / Failed / Skipped / Total] 37 / 21 / 1 / 59:   6%|▌         | 59/1000 [1:02:07<16:30:52, 63.18s/it][Succeeded / Failed / Skipped / Total] 37 / 21 / 1 / 59:   6%|▌         | 60/1000 [1:02:15<16:15:17, 62.25s/it][Succeeded / Failed / Skipped / Total] 38 / 21 / 1 / 60:   6%|▌         | 60/1000 [1:02:15<16:15:17, 62.25s/it][Succeeded / Failed / Skipped / Total] 38 / 21 / 1 / 60:   6%|▌         | 61/1000 [1:03:21<16:15:11, 62.31s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 1 / 61:   6%|▌         | 61/1000 [1:03:21<16:15:11, 62.31s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 1 / 61:   6%|▌         | 62/1000 [1:03:52<16:06:20, 61.81s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 1 / 62:   6%|▌         | 62/1000 [1:03:52<16:06:20, 61.81s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 1 / 62:   6%|▋         | 63/1000 [1:04:57<16:06:06, 61.86s/it][Succeeded / Failed / Skipped / Total] 39 / 23 / 1 / 63:   6%|▋         | 63/1000 [1:04:57<16:06:06, 61.86s/it][Succeeded / Failed / Skipped / Total] 39 / 23 / 1 / 63:   6%|▋         | 64/1000 [1:05:07<15:52:24, 61.05s/it][Succeeded / Failed / Skipped / Total] 40 / 23 / 1 / 64:   6%|▋         | 64/1000 [1:05:07<15:52:24, 61.05s/it][Succeeded / Failed / Skipped / Total] 40 / 23 / 1 / 64:   6%|▋         | 65/1000 [1:06:06<15:50:49, 61.02s/it][Succeeded / Failed / Skipped / Total] 41 / 23 / 1 / 65:   6%|▋         | 65/1000 [1:06:06<15:50:49, 61.02s/it][Succeeded / Failed / Skipped / Total] 41 / 23 / 1 / 65:   7%|▋         | 66/1000 [1:07:14<15:51:28, 61.12s/it]--------------------------------------------- Result 59 ---------------------------------------------
Shuts down the current state . --> Shuffle downstream --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[upwards]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 60 ---------------------------------------------
Auxiliary completion of a generator . --> Liefert die e die e der diche e efet dicht eineinen eineich efe egen einuch en eineich efeineineichen enen e e enen euruch eineich e en eich e en  --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return concatMapDelayError ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[washable]] ) { return concatMapDelayError ( [[washable]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 61 ---------------------------------------------
Returns an iterable for the given iterable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[entertaining]] ) { return concatMapIterable ( [[entertaining]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Sort a sortable . --> Liefert eineinen eneineigeben eineineicheken eneinen eineinen en t eineiche eineich e einkuen en eineneueuenenen eneichenen eufeururttcheineich ene --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > [[weissman]] ) { ObjectHelper . requireNonNull ( [[weissman]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[weissman]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 63 ---------------------------------------------
Gets the count of the number of items . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[days]] ( int [[summit]] ) { if ( [[summit]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[days]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 64 ---------------------------------------------
Sets the subscription . --> Recommunication --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[rennie]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
Returns a copy of this set . --> A convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED ) { return "False" != "False" ; } int n = [[a]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[a]] , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = ps ; if ( subscribers . compareAndSet ( [[a]] , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[rhe]] = subscribers . get ( ) ; if ( [[rhe]] == TERMINATED ) { return "False" != "False" ; } int n = [[rhe]] . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[mitcham]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( [[rhe]] , 0 , [[mitcham]] , 0 , n ) ; [[mitcham]] [ n ] = ps ; if ( subscribers . compareAndSet ( [[rhe]] , [[mitcham]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 23 / 1 / 66:   7%|▋         | 66/1000 [1:07:14<15:51:28, 61.12s/it][Succeeded / Failed / Skipped / Total] 42 / 23 / 1 / 66:   7%|▋         | 67/1000 [1:07:44<15:43:16, 60.66s/it][Succeeded / Failed / Skipped / Total] 43 / 23 / 1 / 67:   7%|▋         | 67/1000 [1:07:44<15:43:16, 60.66s/it][Succeeded / Failed / Skipped / Total] 43 / 23 / 1 / 67:   7%|▋         | 68/1000 [1:08:23<15:37:17, 60.34s/it][Succeeded / Failed / Skipped / Total] 44 / 23 / 1 / 68:   7%|▋         | 68/1000 [1:08:23<15:37:17, 60.34s/it][Succeeded / Failed / Skipped / Total] 44 / 23 / 1 / 68:   7%|▋         | 69/1000 [1:09:23<15:36:16, 60.34s/it][Succeeded / Failed / Skipped / Total] 45 / 23 / 1 / 69:   7%|▋         | 69/1000 [1:09:23<15:36:16, 60.34s/it][Succeeded / Failed / Skipped / Total] 45 / 23 / 1 / 69:   7%|▋         | 70/1000 [1:09:50<15:27:48, 59.86s/it][Succeeded / Failed / Skipped / Total] 46 / 23 / 1 / 70:   7%|▋         | 70/1000 [1:09:50<15:27:48, 59.86s/it][Succeeded / Failed / Skipped / Total] 46 / 23 / 1 / 70:   7%|▋         | 71/1000 [1:11:02<15:29:37, 60.04s/it][Succeeded / Failed / Skipped / Total] 46 / 24 / 1 / 71:   7%|▋         | 71/1000 [1:11:02<15:29:37, 60.04s/it][Succeeded / Failed / Skipped / Total] 46 / 24 / 1 / 71:   7%|▋         | 72/1000 [1:11:56<15:27:19, 59.96s/it]Removes a subscriber . --> Shuts down a followed by an instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int n = [[a]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[a]] [ i ] == [[ps]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[b]] ; if ( n == 1 ) { [[b]] = EMPTY ; } else { [[b]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[a]] , 0 , [[b]] , 0 , j ) ; System . arraycopy ( [[a]] , j + 1 , [[b]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , [[b]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[prehistoric]] ) { for ( ; ; ) { PublishDisposable < T > [ ] [[rogue]] = subscribers . get ( ) ; if ( [[rogue]] == TERMINATED || [[rogue]] == EMPTY ) { return ; } int n = [[rogue]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[rogue]] [ i ] == [[prehistoric]] ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] [[comeon]] ; if ( n == 1 ) { [[comeon]] = EMPTY ; } else { [[comeon]] = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[rogue]] , 0 , [[comeon]] , 0 , j ) ; System . arraycopy ( [[rogue]] , j + 1 , [[comeon]] , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[rogue]] , [[comeon]] ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 67 ---------------------------------------------
Creates a flow . --> Get flowable flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[shiver]] ( final ConnectableFlowable < T > cf , final Scheduler [[comets]] ) { final Flowable < T > flowable = cf . observeOn ( [[comets]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 68 ---------------------------------------------
Parses a method . --> Helper function for testing --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[pooch]] , ReturnT > HttpServiceMethod < [[pooch]] , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[accounts]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 69 ---------------------------------------------
Sets the amount of time . --> Add a new transaction --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[chitchat]] ( long [[petrified]] , TimeUnit [[daddies]] ) { if ( [[petrified]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[daddies]] . toMillis ( [[petrified]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 70 ---------------------------------------------
Factory method for creating a response . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[barbed]] ( ) { Response < ? > [[skimming]] ; try { [[skimming]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[skimming]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[skimming]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[skimming]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 71 ---------------------------------------------
Calculates the maximum units . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[yadda]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 24 / 1 / 72:   7%|▋         | 72/1000 [1:11:56<15:27:19, 59.96s/it][Succeeded / Failed / Skipped / Total] 47 / 24 / 1 / 72:   7%|▋         | 73/1000 [1:12:40<15:22:48, 59.73s/it][Succeeded / Failed / Skipped / Total] 47 / 25 / 1 / 73:   7%|▋         | 73/1000 [1:12:40<15:22:48, 59.73s/it][Succeeded / Failed / Skipped / Total] 47 / 25 / 1 / 73:   7%|▋         | 74/1000 [1:12:44<15:10:16, 58.98s/it][Succeeded / Failed / Skipped / Total] 48 / 25 / 1 / 74:   7%|▋         | 74/1000 [1:12:44<15:10:16, 58.98s/it][Succeeded / Failed / Skipped / Total] 48 / 25 / 1 / 74:   8%|▊         | 75/1000 [1:14:19<15:16:45, 59.47s/it][Succeeded / Failed / Skipped / Total] 48 / 26 / 1 / 75:   8%|▊         | 75/1000 [1:14:19<15:16:45, 59.47s/it][Succeeded / Failed / Skipped / Total] 48 / 26 / 1 / 75:   8%|▊         | 76/1000 [1:15:52<15:22:30, 59.90s/it][Succeeded / Failed / Skipped / Total] 48 / 27 / 1 / 76:   8%|▊         | 76/1000 [1:15:52<15:22:30, 59.90s/it][Succeeded / Failed / Skipped / Total] 48 / 27 / 1 / 76:   8%|▊         | 77/1000 [1:15:58<15:10:43, 59.20s/it][Succeeded / Failed / Skipped / Total] 49 / 27 / 1 / 77:   8%|▊         | 77/1000 [1:15:58<15:10:43, 59.20s/it][Succeeded / Failed / Skipped / Total] 49 / 27 / 1 / 77:   8%|▊         | 78/1000 [1:17:56<15:21:23, 59.96s/it][Succeeded / Failed / Skipped / Total] 49 / 28 / 1 / 78:   8%|▊         | 78/1000 [1:17:56<15:21:23, 59.96s/it][Succeeded / Failed / Skipped / Total] 49 / 28 / 1 / 78:   8%|▊         | 79/1000 [1:18:29<15:15:05, 59.62s/it][Succeeded / Failed / Skipped / Total] 50 / 28 / 1 / 79:   8%|▊         | 79/1000 [1:18:29<15:15:05, 59.62s/it][Succeeded / Failed / Skipped / Total] 50 / 28 / 1 / 79:   8%|▊         | 80/1000 [1:19:31<15:14:31, 59.64s/it]Create a new user . --> Create username --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String username , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String [[argos]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[pak]] = new UsernamePasswordAuthenticationToken ( username , [[argos]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
Returns a HttpMethod object . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[fulani]] ) { try { return HttpMethod . valueOf ( [[fulani]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 74 ---------------------------------------------
Get the search username . --> Searches for a given template . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[alicia]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 75 ---------------------------------------------
Encode a password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[beanie]] = PREFIX + this . [[concentrating]] . generateKey ( ) + SUFFIX ; return digest ( [[beanie]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Put password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 77 ---------------------------------------------
Check the versions of the versions of the given version . --> Delete a delegation . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[delfina]] ) { if ( [[delfina]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 78 ---------------------------------------------
Checks if the given string is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[violating]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[Mir]]" == "[[Mir]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 79 ---------------------------------------------
Obtains the Spring application properties --> Try to load a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[bboy]] ( ) { Properties [[zabel]] = new Properties ( ) ; try { [[zabel]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[zabel]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 80 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 28 / 1 / 80:   8%|▊         | 80/1000 [1:19:31<15:14:31, 59.64s/it][Succeeded / Failed / Skipped / Total] 51 / 28 / 1 / 80:   8%|▊         | 81/1000 [1:20:30<15:13:29, 59.64s/it][Succeeded / Failed / Skipped / Total] 51 / 29 / 1 / 81:   8%|▊         | 81/1000 [1:20:30<15:13:29, 59.64s/it][Succeeded / Failed / Skipped / Total] 51 / 29 / 1 / 81:   8%|▊         | 82/1000 [1:20:36<15:02:28, 58.98s/it][Succeeded / Failed / Skipped / Total] 52 / 29 / 1 / 82:   8%|▊         | 82/1000 [1:20:36<15:02:28, 58.98s/it][Succeeded / Failed / Skipped / Total] 52 / 29 / 1 / 82:   8%|▊         | 83/1000 [1:21:17<14:58:06, 58.76s/it][Succeeded / Failed / Skipped / Total] 52 / 30 / 1 / 83:   8%|▊         | 83/1000 [1:21:17<14:58:06, 58.76s/it][Succeeded / Failed / Skipped / Total] 52 / 30 / 1 / 83:   8%|▊         | 84/1000 [1:24:25<15:20:39, 60.30s/it][Succeeded / Failed / Skipped / Total] 52 / 31 / 1 / 84:   8%|▊         | 84/1000 [1:24:25<15:20:39, 60.30s/it][Succeeded / Failed / Skipped / Total] 52 / 31 / 1 / 84:   8%|▊         | 85/1000 [1:24:30<15:09:41, 59.65s/it][Succeeded / Failed / Skipped / Total] 53 / 31 / 1 / 85:   8%|▊         | 85/1000 [1:24:30<15:09:41, 59.65s/it][Succeeded / Failed / Skipped / Total] 53 / 31 / 1 / 85:   9%|▊         | 86/1000 [1:27:58<15:34:55, 61.37s/it]Sets the default attribute . --> Add a change --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[amo]] ( String [[afghans]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[afghans]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 81 ---------------------------------------------
Configures the client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[unchristian]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[unchristian]] ) ; return [[unchristian]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 82 ---------------------------------------------
Performs a HTTP request . --> Returns a new SecurityServer instance --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[harker]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[harker]] ) ; return [[harker]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 83 ---------------------------------------------
Gets the security context . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[goemon]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Runs the given search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 85 ---------------------------------------------
Executes the provided attributes . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[hargrave]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 32 / 1 / 86:   9%|▊         | 86/1000 [1:27:58<15:34:55, 61.37s/it][Succeeded / Failed / Skipped / Total] 53 / 32 / 1 / 86:   9%|▊         | 87/1000 [1:30:13<15:46:55, 62.23s/it][Succeeded / Failed / Skipped / Total] 53 / 33 / 1 / 87:   9%|▊         | 87/1000 [1:30:13<15:46:55, 62.23s/it][Succeeded / Failed / Skipped / Total] 53 / 33 / 1 / 87:   9%|▉         | 88/1000 [1:30:47<15:41:00, 61.91s/it][Succeeded / Failed / Skipped / Total] 54 / 33 / 1 / 88:   9%|▉         | 88/1000 [1:30:47<15:41:00, 61.91s/it][Succeeded / Failed / Skipped / Total] 54 / 33 / 1 / 88:   9%|▉         | 89/1000 [1:31:16<15:34:13, 61.53s/it][Succeeded / Failed / Skipped / Total] 55 / 33 / 1 / 89:   9%|▉         | 89/1000 [1:31:16<15:34:13, 61.53s/it][Succeeded / Failed / Skipped / Total] 55 / 33 / 1 / 89:   9%|▉         | 90/1000 [1:34:40<15:57:19, 63.12s/it]Get a list of values for the given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] [[attributeNames]] = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[values]] = map . get ( [[attributeName]] ) ; if ( [[values]] != null ) { result . addAll ( [[values]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String [[videotapes]] ) { String [ ] [[habe]] = new String [ ] { [[videotapes]] } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , [[habe]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > [[martino]] = map . get ( [[videotapes]] ) ; if ( [[martino]] != null ) { result . addAll ( [[martino]] ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 87 ---------------------------------------------
Sets all values for the given attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] [[attributeNames]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[walks]] ( final String base , final String filter , final Object [ ] params , final String [ ] [[karine]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 88 ---------------------------------------------
Searches for a single search . --> Searches for a given Dynamolecule --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[ctx]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[resultsEnum]] = [[ctx]] . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[resultsEnum]] . hasMore ( ) ) { SearchResult searchResult = [[resultsEnum]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[resultsEnum]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[patrimony]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[patrimony]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[cookhouse]] = [[patrimony]] . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[cookhouse]] . hasMore ( ) ) { SearchResult searchResult = [[cookhouse]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[cookhouse]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 89 ---------------------------------------------
Gets the search embed of a Controls . --> Get a list of loads --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[adout]] ( SearchControls [[rojas]] ) { return new SearchControls ( [[rojas]] . getSearchScope ( ) , [[rojas]] . getCountLimit ( ) , [[rojas]] . getTimeLimit ( ) , [[rojas]] . getReturningAttributes ( ) , RETURN_OBJECT , [[rojas]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 34 / 1 / 90:   9%|▉         | 90/1000 [1:34:40<15:57:19, 63.12s/it][Succeeded / Failed / Skipped / Total] 55 / 34 / 1 / 90:   9%|▉         | 91/1000 [1:37:45<16:16:30, 64.46s/it][Succeeded / Failed / Skipped / Total] 55 / 35 / 1 / 91:   9%|▉         | 91/1000 [1:37:45<16:16:30, 64.46s/it][Succeeded / Failed / Skipped / Total] 55 / 35 / 1 / 91:   9%|▉         | 92/1000 [1:38:09<16:08:50, 64.02s/it][Succeeded / Failed / Skipped / Total] 56 / 35 / 1 / 92:   9%|▉         | 92/1000 [1:38:09<16:08:50, 64.02s/it][Succeeded / Failed / Skipped / Total] 56 / 35 / 1 / 92:   9%|▉         | 93/1000 [1:38:13<15:57:59, 63.37s/it]Finds all SQL statement . --> [[[FAILED]]]

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 91 ---------------------------------------------
Builds the Guardamojeities . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[income]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[income]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[income]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 92 ---------------------------------------------
Create a bean definition . --> Helper method to create a bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String [[suffix]] = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( [[suffix]] ) ) { [[suffix]] = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + [[suffix]] ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( [[suffix]] ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String [[symbiotic]] = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( [[symbiotic]] ) ) { [[symbiotic]] = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + [[symbiotic]] ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( [[symbiotic]] ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 35 / 1 / 93:   9%|▉         | 93/1000 [1:38:13<15:57:59, 63.37s/it][Succeeded / Failed / Skipped / Total] 57 / 35 / 1 / 93:   9%|▉         | 94/1000 [1:38:25<15:48:39, 62.83s/it][Succeeded / Failed / Skipped / Total] 58 / 35 / 1 / 94:   9%|▉         | 94/1000 [1:38:25<15:48:39, 62.83s/it][Succeeded / Failed / Skipped / Total] 58 / 35 / 1 / 94:  10%|▉         | 95/1000 [1:39:08<15:44:26, 62.62s/it][Succeeded / Failed / Skipped / Total] 58 / 36 / 1 / 95:  10%|▉         | 95/1000 [1:39:08<15:44:26, 62.62s/it][Succeeded / Failed / Skipped / Total] 58 / 36 / 1 / 95:  10%|▉         | 96/1000 [1:39:12<15:34:12, 62.01s/it][Succeeded / Failed / Skipped / Total] 59 / 36 / 1 / 96:  10%|▉         | 96/1000 [1:39:12<15:34:12, 62.01s/it][Succeeded / Failed / Skipped / Total] 59 / 36 / 1 / 96:  10%|▉         | 97/1000 [1:39:19<15:24:35, 61.44s/it][Succeeded / Failed / Skipped / Total] 60 / 36 / 1 / 97:  10%|▉         | 97/1000 [1:39:19<15:24:35, 61.44s/it][Succeeded / Failed / Skipped / Total] 60 / 36 / 1 / 97:  10%|▉         | 98/1000 [1:40:07<15:21:36, 61.30s/it]Register servlet . --> Register ServletRequest . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference [[authenticationManager]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[authenticationManager]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference [[aspersions]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[aspersions]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 94 ---------------------------------------------
Initialize the Jajaves JAX . --> Utility method to create a JAX Hadoop . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[AGHAST]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( [[AGHAST]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 95 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[swindling]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[entrusted]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[entrusted]] = [[entrusted]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[entrusted]] = [[entrusted]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[entrusted]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 96 ---------------------------------------------
Obtains the servlet filter . --> Register a filter context . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[copacabana]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 97 ---------------------------------------------
Returns the number of timestamps for a given query . --> Method to get a transaction --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[partaken]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[partaken]] . getString ( 1 ) , [[partaken]] . getString ( 2 ) , [[partaken]] . getString ( 3 ) , [[partaken]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 36 / 1 / 98:  10%|▉         | 98/1000 [1:40:07<15:21:36, 61.30s/it][Succeeded / Failed / Skipped / Total] 61 / 36 / 1 / 98:  10%|▉         | 99/1000 [1:40:36<15:15:36, 60.97s/it][Succeeded / Failed / Skipped / Total] 62 / 36 / 1 / 99:  10%|▉         | 99/1000 [1:40:36<15:15:36, 60.97s/it][Succeeded / Failed / Skipped / Total] 62 / 36 / 1 / 99:  10%|█         | 100/1000 [1:40:44<15:06:41, 60.45s/it][Succeeded / Failed / Skipped / Total] 63 / 36 / 1 / 100:  10%|█         | 100/1000 [1:40:44<15:06:41, 60.45s/it][Succeeded / Failed / Skipped / Total] 63 / 36 / 1 / 100:  10%|█         | 101/1000 [1:42:29<15:12:17, 60.89s/it][Succeeded / Failed / Skipped / Total] 63 / 37 / 1 / 101:  10%|█         | 101/1000 [1:42:29<15:12:17, 60.89s/it][Succeeded / Failed / Skipped / Total] 63 / 37 / 1 / 101:  10%|█         | 102/1000 [1:45:18<15:27:06, 61.94s/it][Succeeded / Failed / Skipped / Total] 63 / 38 / 1 / 102:  10%|█         | 102/1000 [1:45:18<15:27:06, 61.94s/it][Succeeded / Failed / Skipped / Total] 63 / 38 / 1 / 102:  10%|█         | 103/1000 [1:47:49<15:38:59, 62.81s/it][Succeeded / Failed / Skipped / Total] 63 / 39 / 1 / 103:  10%|█         | 103/1000 [1:47:49<15:38:59, 62.81s/it][Succeeded / Failed / Skipped / Total] 63 / 39 / 1 / 103:  10%|█         | 104/1000 [1:52:34<16:09:50, 64.94s/it]Gets the list of cookie attribute . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[grabbers]] ( Collection < String > attributes ) { List < GrantedAuthority > [[investment]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[investment]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[investment]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 99 ---------------------------------------------
Encrypt a algorithm . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Cipher newCipher ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher newCipher ( String [[surpassed]] ) { try { return Cipher . getInstance ( [[surpassed]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 100 ---------------------------------------------
Sets the properties . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[gora]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 101 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[range]] , ServletResponse [[citroen]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[range]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[range]] , ( HttpServletResponse ) [[citroen]] ) ; } chain . doFilter ( [[range]] , [[citroen]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Checks if the principal is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[Byrd]]" == "[[Byrd]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 103 ---------------------------------------------
Authenticates the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication [[authResult]] ; Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( [[principal]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[principal]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[principal]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; [[authResult]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , [[authResult]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[pent]] , HttpServletResponse response ) throws IOException , ServletException { Authentication [[lukas]] ; Object [[adjutant]] = getPreAuthenticatedPrincipal ( [[pent]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[pent]] ) ; if ( [[adjutant]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[adjutant]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[adjutant]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[pent]] ) ) ; [[lukas]] = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[pent]] , response , [[lukas]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[pent]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
[Succeeded / Failed / Skipped / Total] 63 / 40 / 1 / 104:  10%|█         | 104/1000 [1:52:34<16:09:50, 64.94s/it][Succeeded / Failed / Skipped / Total] 63 / 40 / 1 / 104:  10%|█         | 105/1000 [1:54:22<16:14:58, 65.36s/it][Succeeded / Failed / Skipped / Total] 63 / 41 / 1 / 105:  10%|█         | 105/1000 [1:54:22<16:14:58, 65.36s/it][Succeeded / Failed / Skipped / Total] 63 / 41 / 1 / 105:  11%|█         | 106/1000 [1:54:26<16:05:12, 64.78s/it][Succeeded / Failed / Skipped / Total] 64 / 41 / 1 / 106:  11%|█         | 106/1000 [1:54:26<16:05:12, 64.78s/it][Succeeded / Failed / Skipped / Total] 64 / 41 / 1 / 106:  11%|█         | 107/1000 [1:54:51<15:58:37, 64.41s/it][Succeeded / Failed / Skipped / Total] 65 / 41 / 1 / 107:  11%|█         | 107/1000 [1:54:51<15:58:37, 64.41s/it][Succeeded / Failed / Skipped / Total] 65 / 41 / 1 / 107:  11%|█         | 108/1000 [1:54:57<15:49:27, 63.87s/it][Succeeded / Failed / Skipped / Total] 66 / 41 / 1 / 108:  11%|█         | 108/1000 [1:54:57<15:49:27, 63.87s/it][Succeeded / Failed / Skipped / Total] 66 / 41 / 1 / 108:  11%|█         | 109/1000 [1:55:17<15:42:23, 63.46s/it][Succeeded / Failed / Skipped / Total] 67 / 41 / 1 / 109:  11%|█         | 109/1000 [1:55:17<15:42:23, 63.46s/it][Succeeded / Failed / Skipped / Total] 67 / 41 / 1 / 109:  11%|█         | 110/1000 [1:56:31<15:42:50, 63.56s/it][Succeeded / Failed / Skipped / Total] 67 / 42 / 1 / 110:  11%|█         | 110/1000 [1:56:31<15:42:50, 63.56s/it][Succeeded / Failed / Skipped / Total] 67 / 42 / 1 / 110:  11%|█         | 111/1000 [1:56:40<15:34:30, 63.07s/it]--------------------------------------------- Result 104 ---------------------------------------------
Checks if the content of the buffer s content size . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[requiresFlush]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[neglect]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[follies]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[neglect]] || [[follies]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 105 ---------------------------------------------
Returns the authorities for the given authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[authorities]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[arbor]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[arbor]] . size ( ) ) ; for ( GrantedAuthority authority : [[arbor]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 106 ---------------------------------------------
Creates a Login . --> Create a Login --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[loginProcessingUrl]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[cctv]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 107 ---------------------------------------------
Update the logout . --> Unregister a logout --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[unraveled]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[macau]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[macau]] != null && ! [[macau]] . isCustomLogoutSuccess ( ) ) { [[macau]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 108 ---------------------------------------------
Updates the specified permanently . --> Update a permittive --> Socre: 1.0

[[[[Adv]]]]: protected final void updateAccessDefaults ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void updateAccessDefaults ( B [[shirt]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[shirt]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 109 ---------------------------------------------
Prepare a password . --> Puts a String into a String --> Socre: 1.0

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[crowed]] ) { if ( ! ( [[crowed]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Returns the cookie cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : cookies ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie [[montreal]] : cookies ) { if ( cookieName . equals ( [[montreal]] . getName ( ) ) ) { return [[montreal]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 42 / 1 / 111:  11%|█         | 111/1000 [1:56:40<15:34:30, 63.07s/it][Succeeded / Failed / Skipped / Total] 68 / 42 / 1 / 111:  11%|█         | 112/1000 [1:59:02<15:43:51, 63.77s/it][Succeeded / Failed / Skipped / Total] 68 / 43 / 1 / 112:  11%|█         | 112/1000 [1:59:02<15:43:51, 63.77s/it][Succeeded / Failed / Skipped / Total] 68 / 43 / 1 / 112:  11%|█▏        | 113/1000 [1:59:22<15:37:05, 63.39s/it][Succeeded / Failed / Skipped / Total] 69 / 43 / 1 / 113:  11%|█▏        | 113/1000 [1:59:22<15:37:05, 63.39s/it][Succeeded / Failed / Skipped / Total] 69 / 43 / 1 / 113:  11%|█▏        | 114/1000 [1:59:50<15:31:25, 63.08s/it][Succeeded / Failed / Skipped / Total] 70 / 43 / 1 / 114:  11%|█▏        | 114/1000 [1:59:50<15:31:25, 63.08s/it][Succeeded / Failed / Skipped / Total] 70 / 43 / 1 / 114:  12%|█▏        | 115/1000 [2:00:51<15:30:08, 63.06s/it][Succeeded / Failed / Skipped / Total] 70 / 44 / 1 / 115:  12%|█▏        | 115/1000 [2:00:51<15:30:08, 63.06s/it][Succeeded / Failed / Skipped / Total] 70 / 44 / 1 / 115:  12%|█▏        | 116/1000 [2:02:34<15:34:07, 63.40s/it]Encode a string . --> Method to get the cookie string --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[i]] = 0 ; [[i]] < cookieTokens . length ; [[i]] ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ [[i]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[i]] < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[assortment]] = 0 ; [[assortment]] < cookieTokens . length ; [[assortment]] ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ [[assortment]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[assortment]] < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 112 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , [[cookieValue]] ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[barfing]] = encodeCookie ( tokens ) ; Cookie [[figure]] = new Cookie ( cookieName , [[barfing]] ) ; [[figure]] . setMaxAge ( maxAge ) ; [[figure]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[figure]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[figure]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[figure]] . setSecure ( request . isSecure ( ) ) ; } else { [[figure]] . setSecure ( useSecureCookie ) ; } [[figure]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[figure]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 113 ---------------------------------------------
Resolve a security context . --> Resolves a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext [[figgy]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the query string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String query = [[request]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[prewar]] ( final HttpServletRequest [[conglomeration]] , final Pattern artifactPattern ) { final String query = [[conglomeration]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 115 ---------------------------------------------
Obtain the port URL for the given port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[flavors]] ) { int port = [[flavors]] . getPort ( ) ; if ( port == - 1 ) { port = [[flavors]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 45 / 1 / 116:  12%|█▏        | 116/1000 [2:02:34<15:34:07, 63.40s/it][Succeeded / Failed / Skipped / Total] 70 / 45 / 1 / 116:  12%|█▏        | 117/1000 [2:05:06<15:44:11, 64.16s/it][Succeeded / Failed / Skipped / Total] 70 / 46 / 1 / 117:  12%|█▏        | 117/1000 [2:05:06<15:44:11, 64.16s/it][Succeeded / Failed / Skipped / Total] 70 / 46 / 1 / 117:  12%|█▏        | 118/1000 [2:05:10<15:35:39, 63.65s/it][Succeeded / Failed / Skipped / Total] 71 / 46 / 1 / 118:  12%|█▏        | 118/1000 [2:05:10<15:35:39, 63.65s/it][Succeeded / Failed / Skipped / Total] 71 / 46 / 1 / 118:  12%|█▏        | 119/1000 [2:08:02<15:47:59, 64.56s/it][Succeeded / Failed / Skipped / Total] 71 / 47 / 1 / 119:  12%|█▏        | 119/1000 [2:08:02<15:47:59, 64.56s/it][Succeeded / Failed / Skipped / Total] 71 / 47 / 1 / 119:  12%|█▏        | 120/1000 [2:08:31<15:42:32, 64.26s/it][Succeeded / Failed / Skipped / Total] 72 / 47 / 1 / 120:  12%|█▏        | 120/1000 [2:08:31<15:42:32, 64.26s/it][Succeeded / Failed / Skipped / Total] 72 / 47 / 1 / 120:  12%|█▏        | 121/1000 [2:08:50<15:35:56, 63.89s/it][Succeeded / Failed / Skipped / Total] 72 / 48 / 1 / 121:  12%|█▏        | 121/1000 [2:08:50<15:35:56, 63.89s/it][Succeeded / Failed / Skipped / Total] 72 / 48 / 1 / 121:  12%|█▏        | 122/1000 [2:09:07<15:29:18, 63.51s/it]Gets authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 117 ---------------------------------------------
Sets the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[smoker]] = request . getSession ( "False" != "False" ) ; if ( [[smoker]] != null ) { logger . debug ( "Invalidating session: " + [[smoker]] . getId ( ) ) ; [[smoker]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 118 ---------------------------------------------
Authenticate authentication . --> Authenticated resource . --> Socre: 1.0

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[guided]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 119 ---------------------------------------------
Build a URL provider . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[volumes]] ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[sheathe]] = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[sheathe]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[sheathe]] . append ( "/" ) ; } [[sheathe]] . append ( trimmedBaseDn ) ; [[sheathe]] . append ( " " ) ; } return [[sheathe]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 120 ---------------------------------------------
Set the environment . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[anythng]] ( Map < String , Object > [[connolly]] ) { Assert . notEmpty ( [[connolly]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[connolly]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 121 ---------------------------------------------
Builds a URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[pope]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 48 / 1 / 122:  12%|█▏        | 122/1000 [2:09:07<15:29:18, 63.51s/it][Succeeded / Failed / Skipped / Total] 73 / 48 / 1 / 122:  12%|█▏        | 123/1000 [2:09:10<15:21:05, 63.02s/it][Succeeded / Failed / Skipped / Total] 74 / 48 / 1 / 123:  12%|█▏        | 123/1000 [2:09:10<15:21:05, 63.02s/it][Succeeded / Failed / Skipped / Total] 74 / 48 / 1 / 123:  12%|█▏        | 124/1000 [2:10:03<15:18:49, 62.93s/it][Succeeded / Failed / Skipped / Total] 74 / 49 / 1 / 124:  12%|█▏        | 124/1000 [2:10:03<15:18:49, 62.93s/it][Succeeded / Failed / Skipped / Total] 74 / 49 / 1 / 124:  12%|█▎        | 125/1000 [2:11:38<15:21:31, 63.19s/it][Succeeded / Failed / Skipped / Total] 75 / 49 / 1 / 125:  12%|█▎        | 125/1000 [2:11:38<15:21:31, 63.19s/it][Succeeded / Failed / Skipped / Total] 75 / 49 / 1 / 125:  13%|█▎        | 126/1000 [2:11:43<15:13:41, 62.72s/it][Succeeded / Failed / Skipped / Total] 76 / 49 / 1 / 126:  13%|█▎        | 126/1000 [2:11:43<15:13:41, 62.72s/it][Succeeded / Failed / Skipped / Total] 76 / 49 / 1 / 126:  13%|█▎        | 127/1000 [2:13:17<15:16:14, 62.97s/it][Succeeded / Failed / Skipped / Total] 76 / 50 / 1 / 127:  13%|█▎        | 127/1000 [2:13:17<15:16:14, 62.97s/it][Succeeded / Failed / Skipped / Total] 76 / 50 / 1 / 127:  13%|█▎        | 128/1000 [2:15:25<15:22:32, 63.48s/it]Method used to parse a tag . --> Method to get a UML file --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[moonpie]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 123 ---------------------------------------------
Initialize the users . --> Initialize UserDetails --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[vegan]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[vegan]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Obtains the security context . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[procession]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[procession]] . size ( ) == 0 ) { [[procession]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[procession]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[procession]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[procession]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 125 ---------------------------------------------
Generate code for parameters . --> Generates a PBPEP former --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String [[codeChallenge]] = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeChallenge]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[detainees]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[detainees]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String [[happier]] = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[happier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 126 ---------------------------------------------
Handles ticket . --> Check if the request is valid --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[response]] ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse [[natal]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[natal]] ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 127 ---------------------------------------------
Check if a request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[arrives]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[arrives]] ) ; } return [[arrives]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 51 / 1 / 128:  13%|█▎        | 128/1000 [2:15:25<15:22:32, 63.48s/it][Succeeded / Failed / Skipped / Total] 76 / 51 / 1 / 128:  13%|█▎        | 129/1000 [2:16:18<15:20:19, 63.40s/it][Succeeded / Failed / Skipped / Total] 76 / 52 / 1 / 129:  13%|█▎        | 129/1000 [2:16:18<15:20:19, 63.40s/it][Succeeded / Failed / Skipped / Total] 76 / 52 / 1 / 129:  13%|█▎        | 130/1000 [2:17:37<15:21:01, 63.52s/it][Succeeded / Failed / Skipped / Total] 76 / 53 / 1 / 130:  13%|█▎        | 130/1000 [2:17:37<15:21:01, 63.52s/it][Succeeded / Failed / Skipped / Total] 76 / 53 / 1 / 130:  13%|█▎        | 131/1000 [2:18:00<15:15:31, 63.21s/it][Succeeded / Failed / Skipped / Total] 77 / 53 / 1 / 131:  13%|█▎        | 131/1000 [2:18:00<15:15:31, 63.21s/it][Succeeded / Failed / Skipped / Total] 77 / 53 / 1 / 131:  13%|█▎        | 132/1000 [2:18:06<15:08:10, 62.78s/it][Succeeded / Failed / Skipped / Total] 78 / 53 / 1 / 132:  13%|█▎        | 132/1000 [2:18:06<15:08:10, 62.78s/it][Succeeded / Failed / Skipped / Total] 78 / 53 / 2 / 133:  13%|█▎        | 133/1000 [2:18:06<15:00:19, 62.31s/it][Succeeded / Failed / Skipped / Total] 78 / 53 / 2 / 133:  13%|█▎        | 134/1000 [2:19:29<15:01:27, 62.46s/it][Succeeded / Failed / Skipped / Total] 78 / 54 / 2 / 134:  13%|█▎        | 134/1000 [2:19:29<15:01:27, 62.46s/it][Succeeded / Failed / Skipped / Total] 78 / 54 / 2 / 134:  14%|█▎        | 135/1000 [2:19:33<14:54:10, 62.02s/it][Succeeded / Failed / Skipped / Total] 79 / 54 / 2 / 135:  14%|█▎        | 135/1000 [2:19:33<14:54:10, 62.02s/it][Succeeded / Failed / Skipped / Total] 79 / 54 / 2 / 135:  14%|█▎        | 136/1000 [2:20:44<14:54:10, 62.10s/it]Returns true if HttpServletRequest . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[tugg]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[Burner]]" != "[[Burner]]" ; } final boolean [[showers]] = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[showers]] ) ; } return [[showers]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 129 ---------------------------------------------
Is the authentication authentication --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[parental]] ( ) { Authentication [[rebeca]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[rebeca]] != null && [[rebeca]] . isAuthenticated ( ) && ! ( [[rebeca]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
Executes a request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
Create a new role . --> Create a new Role --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[trampling]] , MethodInvocation [[stuttgart]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[trampling]] ) ; root . setThis ( [[stuttgart]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 132 ---------------------------------------------
Return a JVM set . --> Returns a JMonoMBean --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[escalate]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
Prepare a String --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 134 ---------------------------------------------
Get the user groups for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[canadian]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[catrina]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[catrina]] ) ; } return [[catrina]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
Load authentication token . --> Load authentication token --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[clergymen]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[clergymen]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
[Succeeded / Failed / Skipped / Total] 79 / 55 / 2 / 136:  14%|█▎        | 136/1000 [2:20:44<14:54:10, 62.10s/it][Succeeded / Failed / Skipped / Total] 79 / 55 / 2 / 136:  14%|█▎        | 137/1000 [2:21:16<14:49:55, 61.87s/it][Succeeded / Failed / Skipped / Total] 80 / 55 / 2 / 137:  14%|█▎        | 137/1000 [2:21:16<14:49:55, 61.87s/it][Succeeded / Failed / Skipped / Total] 80 / 55 / 2 / 137:  14%|█▍        | 138/1000 [2:23:48<14:58:16, 62.52s/it][Succeeded / Failed / Skipped / Total] 80 / 56 / 2 / 138:  14%|█▍        | 138/1000 [2:23:48<14:58:16, 62.52s/it][Succeeded / Failed / Skipped / Total] 80 / 56 / 2 / 138:  14%|█▍        | 139/1000 [2:26:23<15:06:44, 63.19s/it][Succeeded / Failed / Skipped / Total] 80 / 57 / 2 / 139:  14%|█▍        | 139/1000 [2:26:23<15:06:44, 63.19s/it][Succeeded / Failed / Skipped / Total] 80 / 57 / 2 / 139:  14%|█▍        | 140/1000 [2:26:58<15:02:48, 62.99s/it][Succeeded / Failed / Skipped / Total] 81 / 57 / 2 / 140:  14%|█▍        | 140/1000 [2:26:58<15:02:48, 62.99s/it][Succeeded / Failed / Skipped / Total] 81 / 57 / 2 / 140:  14%|█▍        | 141/1000 [2:27:42<14:59:50, 62.85s/it][Succeeded / Failed / Skipped / Total] 82 / 57 / 2 / 141:  14%|█▍        | 141/1000 [2:27:42<14:59:50, 62.85s/it][Succeeded / Failed / Skipped / Total] 82 / 57 / 2 / 141:  14%|█▍        | 142/1000 [2:29:14<15:01:45, 63.06s/it]--------------------------------------------- Result 136 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[pendleton]] ( HttpServletRequest httpRequest ) { Object [[bell]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[bell]] ) ; } return [[bell]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenates two byte arrays . --> Create a sequence of sequences --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int [[length]] = 0 ; for ( byte [ ] [[array]] : arrays ) { [[length]] += [[array]] . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] [[array]] : arrays ) { System . arraycopy ( [[array]] , 0 , newArray , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int [[hobart]] = 0 ; for ( byte [ ] [[acceleration]] : arrays ) { [[hobart]] += [[acceleration]] . length ; } byte [ ] newArray = new byte [ [[hobart]] ] ; int destPos = 0 ; for ( byte [ ] [[acceleration]] : arrays ) { System . arraycopy ( [[acceleration]] , 0 , newArray , destPos , [[acceleration]] . length ) ; destPos += [[acceleration]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
Creates a subset of a subset . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] [[array]] , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( [[array]] , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] [[fne]] , int beginIndex , int endIndex ) { int [[quan]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[quan]] ] ; System . arraycopy ( [[fne]] , beginIndex , subarray , 0 , [[quan]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Returns a list of all gategates . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[consulted]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[squabble]] : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[squabble]] ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 140 ---------------------------------------------
Returns a copy of the map . --> Returns a list of violations . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[yeller]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[berserker]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[berserker]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[berserker]] . getKey ( ) , getGrantedAuthorityCollection ( [[berserker]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 141 ---------------------------------------------
Returns the value of the given granity . --> Advibilities . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[bringeth]] ( Object value ) { Collection < GrantedAuthority > [[administering]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[administering]] , value ) ; return [[administering]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 58 / 2 / 142:  14%|█▍        | 142/1000 [2:29:14<15:01:45, 63.06s/it][Succeeded / Failed / Skipped / Total] 82 / 58 / 2 / 142:  14%|█▍        | 143/1000 [2:30:25<15:01:29, 63.12s/it][Succeeded / Failed / Skipped / Total] 82 / 59 / 2 / 143:  14%|█▍        | 143/1000 [2:30:25<15:01:29, 63.12s/it][Succeeded / Failed / Skipped / Total] 82 / 59 / 2 / 143:  14%|█▍        | 144/1000 [2:30:30<14:54:42, 62.71s/it][Succeeded / Failed / Skipped / Total] 83 / 59 / 2 / 144:  14%|█▍        | 144/1000 [2:30:30<14:54:42, 62.71s/it][Succeeded / Failed / Skipped / Total] 83 / 59 / 2 / 144:  14%|█▍        | 145/1000 [2:32:23<14:58:34, 63.06s/it][Succeeded / Failed / Skipped / Total] 83 / 60 / 2 / 145:  14%|█▍        | 145/1000 [2:32:23<14:58:34, 63.06s/it][Succeeded / Failed / Skipped / Total] 83 / 60 / 2 / 145:  15%|█▍        | 146/1000 [2:32:28<14:51:51, 62.66s/it][Succeeded / Failed / Skipped / Total] 84 / 60 / 2 / 146:  15%|█▍        | 146/1000 [2:32:28<14:51:51, 62.66s/it][Succeeded / Failed / Skipped / Total] 84 / 60 / 2 / 146:  15%|█▍        | 147/1000 [2:33:24<14:50:09, 62.61s/it][Succeeded / Failed / Skipped / Total] 84 / 61 / 2 / 147:  15%|█▍        | 147/1000 [2:33:24<14:50:09, 62.61s/it][Succeeded / Failed / Skipped / Total] 84 / 61 / 2 / 147:  15%|█▍        | 148/1000 [2:34:04<14:46:57, 62.46s/it]Adds a value to the collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > result , Object [[cynic]] ) { if ( [[cynic]] == null ) { return ; } if ( [[cynic]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( result , ( Collection < ? > ) [[cynic]] ) ; } else if ( [[cynic]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( result , ( Object [ ] ) [[cynic]] ) ; } else if ( [[cynic]] instanceof String ) { addGrantedAuthorityCollection ( result , ( String ) [[cynic]] ) ; } else if ( [[cynic]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[cynic]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[cynic]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Get principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest [[arachnid]] ) { Object [[harald]] = [[arachnid]] . getUserPrincipal ( ) == null ? null : [[arachnid]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[harald]] ) ; } return [[harald]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the shared type . --> Obtains an instance of the given class type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[wrought]] > [[wrought]] getSharedObject ( Class < [[wrought]] > sharedType ) { return ( [[wrought]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 145 ---------------------------------------------
Build a URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer [[httpsPort]] = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( [[httpsPort]] != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( [[httpsPort]] . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[achtung]] ( HttpServletRequest request ) throws IOException , ServletException { int [[ionosphere]] = portResolver . getServerPort ( request ) ; Integer [[morality]] = portMapper . lookupHttpsPort ( Integer . valueOf ( [[ionosphere]] ) ) ; if ( [[morality]] != null ) { RedirectUrlBuilder [[twinkie]] = new RedirectUrlBuilder ( ) ; [[twinkie]] . setScheme ( "https" ) ; [[twinkie]] . setServerName ( request . getServerName ( ) ) ; [[twinkie]] . setPort ( [[morality]] . intValue ( ) ) ; [[twinkie]] . setContextPath ( request . getContextPath ( ) ) ; [[twinkie]] . setServletPath ( request . getServletPath ( ) ) ; [[twinkie]] . setPathInfo ( request . getPathInfo ( ) ) ; [[twinkie]] . setQuery ( request . getQueryString ( ) ) ; return [[twinkie]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 146 ---------------------------------------------
Invoked by invocation . --> Invocation of a token --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[krebs]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 147 ---------------------------------------------
Checks if the given role is a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[honours]] ( String [[plugged]] ) { Assert . isTrue ( ! [[plugged]] . startsWith ( "ROLE_" ) , ( ) -> [[plugged]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[plugged]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 61 / 2 / 148:  15%|█▍        | 148/1000 [2:34:04<14:46:57, 62.46s/it][Succeeded / Failed / Skipped / Total] 85 / 61 / 2 / 148:  15%|█▍        | 149/1000 [2:36:29<14:53:46, 63.02s/it][Succeeded / Failed / Skipped / Total] 85 / 62 / 2 / 149:  15%|█▍        | 149/1000 [2:36:29<14:53:46, 63.02s/it][Succeeded / Failed / Skipped / Total] 85 / 62 / 2 / 149:  15%|█▌        | 150/1000 [2:38:32<14:58:23, 63.42s/it][Succeeded / Failed / Skipped / Total] 85 / 63 / 2 / 150:  15%|█▌        | 150/1000 [2:38:32<14:58:23, 63.42s/it][Succeeded / Failed / Skipped / Total] 85 / 63 / 2 / 150:  15%|█▌        | 151/1000 [2:41:25<15:07:38, 64.14s/it][Succeeded / Failed / Skipped / Total] 85 / 64 / 2 / 151:  15%|█▌        | 151/1000 [2:41:25<15:07:38, 64.14s/it][Succeeded / Failed / Skipped / Total] 85 / 64 / 2 / 151:  15%|█▌        | 152/1000 [2:41:35<15:01:30, 63.79s/it][Succeeded / Failed / Skipped / Total] 86 / 64 / 2 / 152:  15%|█▌        | 152/1000 [2:41:35<15:01:30, 63.79s/it][Succeeded / Failed / Skipped / Total] 86 / 64 / 2 / 152:  15%|█▌        | 153/1000 [2:41:49<14:55:50, 63.46s/it][Succeeded / Failed / Skipped / Total] 87 / 64 / 2 / 153:  15%|█▌        | 153/1000 [2:41:49<14:55:50, 63.46s/it][Succeeded / Failed / Skipped / Total] 87 / 64 / 3 / 154:  15%|█▌        | 154/1000 [2:41:49<14:48:58, 63.05s/it][Succeeded / Failed / Skipped / Total] 87 / 64 / 3 / 154:  16%|█▌        | 155/1000 [2:41:54<14:42:38, 62.67s/it]Returns the roles for the given roles . --> Find the leader leader --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[platelets]] ( String ... [[ringleader]] ) { for ( int i = 0 ; i < [[ringleader]] . length ; i ++ ) { [[ringleader]] [ i ] = "ROLE_" + [[ringleader]] [ i ] ; } return [[ringleader]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Process cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[token]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[token]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[woodlawn]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[woodlawn]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 150 ---------------------------------------------
Generate authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[username]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[regard]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[regard]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[regard]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 151 ---------------------------------------------
Authenticates the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[siddique]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[siddique]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 152 ---------------------------------------------
Resolve authentication . --> Unregister a authentication --> Socre: 1.0

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[punisher]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 153 ---------------------------------------------
Sets the URL of the user . --> Create a new URLUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[bundle]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Method to display a view --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 155 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 64 / 3 / 155:  16%|█▌        | 155/1000 [2:41:54<14:42:38, 62.67s/it][Succeeded / Failed / Skipped / Total] 89 / 64 / 3 / 156:  16%|█▌        | 156/1000 [2:42:50<14:40:59, 62.63s/it][Succeeded / Failed / Skipped / Total] 89 / 64 / 3 / 156:  16%|█▌        | 157/1000 [2:44:48<14:44:54, 62.98s/it][Succeeded / Failed / Skipped / Total] 89 / 65 / 3 / 157:  16%|█▌        | 157/1000 [2:44:48<14:44:54, 62.98s/it][Succeeded / Failed / Skipped / Total] 89 / 65 / 3 / 157:  16%|█▌        | 158/1000 [2:46:03<14:44:57, 63.06s/it][Succeeded / Failed / Skipped / Total] 89 / 66 / 3 / 158:  16%|█▌        | 158/1000 [2:46:03<14:44:57, 63.06s/it][Succeeded / Failed / Skipped / Total] 89 / 66 / 3 / 158:  16%|█▌        | 159/1000 [2:46:08<14:38:48, 62.70s/it][Succeeded / Failed / Skipped / Total] 90 / 66 / 3 / 159:  16%|█▌        | 159/1000 [2:46:08<14:38:48, 62.70s/it][Succeeded / Failed / Skipped / Total] 90 / 66 / 3 / 159:  16%|█▌        | 160/1000 [2:46:13<14:32:42, 62.34s/it][Succeeded / Failed / Skipped / Total] 91 / 66 / 3 / 160:  16%|█▌        | 160/1000 [2:46:13<14:32:42, 62.34s/it][Succeeded / Failed / Skipped / Total] 91 / 66 / 3 / 160:  16%|█▌        | 161/1000 [2:46:30<14:27:41, 62.05s/it][Succeeded / Failed / Skipped / Total] 92 / 66 / 3 / 161:  16%|█▌        | 161/1000 [2:46:30<14:27:41, 62.05s/it][Succeeded / Failed / Skipped / Total] 92 / 66 / 3 / 161:  16%|█▌        | 162/1000 [2:47:20<14:25:37, 61.98s/it]Initializes the postr . --> Determines whether or not a given web application . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[arab]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 156 ---------------------------------------------
Parse JWT . --> Parse a JWTwt . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[sneered]] ( String token ) throws JwtException { JWT [[begining]] = parse ( token ) ; if ( [[begining]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[begining]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[begining]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 157 ---------------------------------------------
Return the default expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[kingsley]] = new IOException ( ) ; [[kingsley]] . initCause ( e ) ; throw [[kingsley]] ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 158 ---------------------------------------------
Checks if a user has been enabled . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[takuma]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
Returns the authority of the cookie . --> Returns a list of all Packages . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[acropolis]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 160 ---------------------------------------------
Generates a token . --> Sets the request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest request ) { return wrap ( request , this . [[commander]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 161 ---------------------------------------------
Returns a new contact . --> region Method --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[contradiction]] = new HashMap <> ( ) ; [[contradiction]] . put ( "contact" , contact ) ; [[contradiction]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[contradiction]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 162 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 66 / 3 / 162:  16%|█▌        | 162/1000 [2:47:20<14:25:37, 61.98s/it][Succeeded / Failed / Skipped / Total] 93 / 66 / 3 / 162:  16%|█▋        | 163/1000 [2:49:27<14:30:10, 62.38s/it][Succeeded / Failed / Skipped / Total] 93 / 67 / 3 / 163:  16%|█▋        | 163/1000 [2:49:27<14:30:10, 62.38s/it][Succeeded / Failed / Skipped / Total] 93 / 67 / 4 / 164:  16%|█▋        | 164/1000 [2:49:27<14:23:50, 62.00s/it][Succeeded / Failed / Skipped / Total] 93 / 67 / 4 / 164:  16%|█▋        | 165/1000 [2:50:27<14:22:38, 61.99s/it][Succeeded / Failed / Skipped / Total] 94 / 67 / 4 / 165:  16%|█▋        | 165/1000 [2:50:27<14:22:38, 61.99s/it][Succeeded / Failed / Skipped / Total] 94 / 67 / 4 / 165:  17%|█▋        | 166/1000 [2:51:39<14:22:27, 62.05s/it][Succeeded / Failed / Skipped / Total] 94 / 68 / 4 / 166:  17%|█▋        | 166/1000 [2:51:39<14:22:27, 62.05s/it][Succeeded / Failed / Skipped / Total] 94 / 68 / 4 / 166:  17%|█▋        | 167/1000 [2:51:52<14:17:18, 61.75s/it][Succeeded / Failed / Skipped / Total] 95 / 68 / 4 / 167:  17%|█▋        | 167/1000 [2:51:52<14:17:18, 61.75s/it][Succeeded / Failed / Skipped / Total] 95 / 68 / 4 / 167:  17%|█▋        | 168/1000 [2:52:37<14:14:54, 61.65s/it]Add a new Permission --> Get lazokeeper --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( [[contact]] ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[brazilians]] = contactManager . getById ( contactId ) ; AddPermission [[burly]] = new AddPermission ( ) ; [[burly]] . setContact ( [[brazilians]] ) ; Map < String , Object > [[salome]] = new HashMap <> ( ) ; [[salome]] . put ( "addPermission" , [[burly]] ) ; [[salome]] . put ( "recipients" , listRecipients ( ) ) ; [[salome]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[salome]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 163 ---------------------------------------------
Add a Permission to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission [[addPermission]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . [[addPermission]] ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission [[aboot]] , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( addPermission , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . [[aboot]] ( addPermission . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 164 ---------------------------------------------
Delete permissions . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 165 ---------------------------------------------
Returns the default prefix for the given prefix . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[clickety]] ( String [[enough]] , String [[truncheon]] ) { if ( [[truncheon]] == null ) { return [[truncheon]] ; } if ( [[enough]] == null || [[enough]] . length ( ) == 0 ) { return [[truncheon]] ; } if ( [[truncheon]] . startsWith ( [[enough]] ) ) { return [[truncheon]] ; } return [[enough]] + [[truncheon]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 166 ---------------------------------------------
Create a new resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource [[resource]] = new InMemoryResource ( [[users]] ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[kidded]] ( String [[tanz]] ) { InMemoryResource [[hotrod]] = new InMemoryResource ( [[tanz]] ) ; return fromResource ( [[hotrod]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 167 ---------------------------------------------
Gets the value of the attribute . --> Gets principal . --> Socre: 1.0

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( name ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[prattling]] = null ; if ( attributes != null ) { [[prattling]] = attributes . get ( name ) ; } if ( [[prattling]] == null ) { [[prattling]] = Collections . emptyList ( ) ; } return [[prattling]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 68 / 4 / 168:  17%|█▋        | 168/1000 [2:52:37<14:14:54, 61.65s/it][Succeeded / Failed / Skipped / Total] 96 / 68 / 4 / 168:  17%|█▋        | 169/1000 [2:52:47<14:09:36, 61.34s/it][Succeeded / Failed / Skipped / Total] 97 / 68 / 4 / 169:  17%|█▋        | 169/1000 [2:52:47<14:09:36, 61.34s/it][Succeeded / Failed / Skipped / Total] 97 / 68 / 4 / 169:  17%|█▋        | 170/1000 [2:53:32<14:07:15, 61.25s/it][Succeeded / Failed / Skipped / Total] 97 / 69 / 4 / 170:  17%|█▋        | 170/1000 [2:53:32<14:07:15, 61.25s/it][Succeeded / Failed / Skipped / Total] 97 / 69 / 4 / 170:  17%|█▋        | 171/1000 [2:56:19<14:14:50, 61.87s/it][Succeeded / Failed / Skipped / Total] 97 / 70 / 4 / 171:  17%|█▋        | 171/1000 [2:56:19<14:14:50, 61.87s/it][Succeeded / Failed / Skipped / Total] 97 / 70 / 4 / 171:  17%|█▋        | 172/1000 [2:57:43<14:15:34, 62.00s/it][Succeeded / Failed / Skipped / Total] 97 / 71 / 4 / 172:  17%|█▋        | 172/1000 [2:57:43<14:15:34, 62.00s/it][Succeeded / Failed / Skipped / Total] 97 / 71 / 4 / 172:  17%|█▋        | 173/1000 [2:58:53<14:15:10, 62.04s/it][Succeeded / Failed / Skipped / Total] 98 / 71 / 4 / 173:  17%|█▋        | 173/1000 [2:58:53<14:15:10, 62.04s/it][Succeeded / Failed / Skipped / Total] 98 / 71 / 4 / 173:  17%|█▋        | 174/1000 [2:59:18<14:11:14, 61.83s/it][Succeeded / Failed / Skipped / Total] 99 / 71 / 4 / 174:  17%|█▋        | 174/1000 [2:59:18<14:11:14, 61.83s/it][Succeeded / Failed / Skipped / Total] 99 / 71 / 4 / 174:  18%|█▊        | 175/1000 [2:59:44<14:07:19, 61.62s/it]Returns the value of the given attribute . --> Get attributes . --> Socre: 1.0

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[vex]] ) { List < String > [[ashore]] = getAttributeValues ( [[vex]] ) ; if ( [[ashore]] . isEmpty ( ) ) { return null ; } else { return [[ashore]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 169 ---------------------------------------------
Encodes a byte array . --> Encode a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[fallacy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[fallacy]] , 0 , bytes . limit ( ) ) ; return [[fallacy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] [[yogis]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[yogis]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 171 ---------------------------------------------
Returns a parameterized name . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 172 ---------------------------------------------
Adds a new mail . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[stickin]] , BindingResult result ) { validator . validate ( [[stickin]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[stickin]] . getName ( ) , [[stickin]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Finds the supplied on target class . --> Returns a collection of Bean --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[julianna]] ( Method method , Class < ? > [[edwin]] ) { if ( [[edwin]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[edwin]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 174 ---------------------------------------------
Add a configuration . --> Sets the zoookeeper --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[arid]] ( RegisteredMethod [[crozier]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[crozier]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[crozier]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[crozier]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 71 / 4 / 175:  18%|█▊        | 175/1000 [2:59:44<14:07:19, 61.62s/it][Succeeded / Failed / Skipped / Total] 100 / 71 / 4 / 175:  18%|█▊        | 176/1000 [3:01:05<14:07:51, 61.74s/it][Succeeded / Failed / Skipped / Total] 100 / 72 / 4 / 176:  18%|█▊        | 176/1000 [3:01:05<14:07:51, 61.74s/it][Succeeded / Failed / Skipped / Total] 100 / 72 / 4 / 176:  18%|█▊        | 177/1000 [3:01:10<14:02:22, 61.41s/it][Succeeded / Failed / Skipped / Total] 101 / 72 / 4 / 177:  18%|█▊        | 177/1000 [3:01:10<14:02:22, 61.41s/it][Succeeded / Failed / Skipped / Total] 101 / 72 / 4 / 177:  18%|█▊        | 178/1000 [3:01:14<13:57:00, 61.09s/it][Succeeded / Failed / Skipped / Total] 102 / 72 / 4 / 178:  18%|█▊        | 178/1000 [3:01:14<13:57:00, 61.09s/it][Succeeded / Failed / Skipped / Total] 102 / 72 / 4 / 178:  18%|█▊        | 179/1000 [3:03:21<14:00:57, 61.46s/it][Succeeded / Failed / Skipped / Total] 102 / 73 / 4 / 179:  18%|█▊        | 179/1000 [3:03:21<14:00:57, 61.46s/it][Succeeded / Failed / Skipped / Total] 102 / 73 / 4 / 179:  18%|█▊        | 180/1000 [3:04:04<13:58:32, 61.36s/it][Succeeded / Failed / Skipped / Total] 103 / 73 / 4 / 180:  18%|█▊        | 180/1000 [3:04:04<13:58:32, 61.36s/it][Succeeded / Failed / Skipped / Total] 103 / 73 / 4 / 180:  18%|█▊        | 181/1000 [3:05:08<13:57:42, 61.37s/it][Succeeded / Failed / Skipped / Total] 104 / 73 / 4 / 181:  18%|█▊        | 181/1000 [3:05:08<13:57:42, 61.37s/it][Succeeded / Failed / Skipped / Total] 104 / 73 / 4 / 181:  18%|█▊        | 182/1000 [3:06:51<13:59:51, 61.60s/it][Succeeded / Failed / Skipped / Total] 104 / 74 / 4 / 182:  18%|█▊        | 182/1000 [3:06:51<13:59:51, 61.60s/it][Succeeded / Failed / Skipped / Total] 104 / 74 / 4 / 182:  18%|█▊        | 183/1000 [3:06:55<13:54:31, 61.29s/it]Merge attributes . --> Return a list of all attribute values --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[navarro]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[navarro]] . addAll ( attributeList ) ; } return [[navarro]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 176 ---------------------------------------------
Returns true if the given string is a valid name . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[mezcal]] ( String [[breads]] , String [[shapely]] ) { return ( [[shapely]] . endsWith ( "*" ) && [[breads]] . startsWith ( [[shapely]] . substring ( 0 , [[shapely]] . length ( ) - 1 ) ) ) || ( [[shapely]] . startsWith ( "*" ) && [[breads]] . endsWith ( [[shapely]] . substring ( 1 , [[shapely]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 177 ---------------------------------------------
Configures the request . --> Configures the configurer --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[valance]] ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
Handles a binder . -->  --> Socre: 0.9999999999745633

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String [[malaka]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Returns the contact for the given contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[courteous]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 180 ---------------------------------------------
Clear the session . --> Remove a HTTP GET request --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession [[session]] = [[request]] . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[affluent]] ( HttpServletRequest [[lunar]] ) { HttpSession [[hamon]] = [[lunar]] . getSession ( "False" != "False" ) ; if ( [[hamon]] == null ) { return ; } [[hamon]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Get a field . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Field getField ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > [[waitressing]] , String [[rookie]] ) throws IllegalStateException { Assert . notNull ( [[waitressing]] , "Class required" ) ; Assert . hasText ( [[rookie]] , "Field name required" ) ; try { return [[waitressing]] . getDeclaredField ( [[rookie]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 182 ---------------------------------------------
Get service . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . [[serviceProperties]] . getService ( ) , null , this . [[serviceProperties]] . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . [[brickworks]] . getService ( ) , null , this . [[brickworks]] . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 74 / 4 / 183:  18%|█▊        | 183/1000 [3:06:55<13:54:31, 61.29s/it][Succeeded / Failed / Skipped / Total] 105 / 74 / 4 / 183:  18%|█▊        | 184/1000 [3:07:16<13:50:32, 61.07s/it][Succeeded / Failed / Skipped / Total] 106 / 74 / 4 / 184:  18%|█▊        | 184/1000 [3:07:16<13:50:32, 61.07s/it][Succeeded / Failed / Skipped / Total] 106 / 74 / 4 / 184:  18%|█▊        | 185/1000 [3:09:14<13:53:41, 61.38s/it][Succeeded / Failed / Skipped / Total] 106 / 75 / 4 / 185:  18%|█▊        | 185/1000 [3:09:14<13:53:41, 61.38s/it][Succeeded / Failed / Skipped / Total] 106 / 75 / 4 / 185:  19%|█▊        | 186/1000 [3:09:20<13:48:37, 61.08s/it][Succeeded / Failed / Skipped / Total] 107 / 75 / 4 / 186:  19%|█▊        | 186/1000 [3:09:20<13:48:37, 61.08s/it][Succeeded / Failed / Skipped / Total] 107 / 75 / 4 / 186:  19%|█▊        | 187/1000 [3:10:32<13:48:22, 61.13s/it][Succeeded / Failed / Skipped / Total] 107 / 76 / 4 / 187:  19%|█▊        | 187/1000 [3:10:32<13:48:22, 61.13s/it][Succeeded / Failed / Skipped / Total] 107 / 76 / 4 / 187:  19%|█▉        | 188/1000 [3:11:26<13:46:50, 61.10s/it][Succeeded / Failed / Skipped / Total] 108 / 76 / 4 / 188:  19%|█▉        | 188/1000 [3:11:26<13:46:50, 61.10s/it][Succeeded / Failed / Skipped / Total] 108 / 76 / 4 / 188:  19%|█▉        | 189/1000 [3:11:53<13:43:24, 60.92s/it]Create a new URL --> Create a new bean --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "[[Analyze]]" != "[[Analyze]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Extract a string from a string . --> Extracts a String from a String --> Socre: 1.0

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[foreclose]] ) { if ( ! [[foreclose]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[foreclose]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[foreclose]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 185 ---------------------------------------------
Send an HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[zhp]] , HttpServletResponse [[injuring]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[injuring]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 186 ---------------------------------------------
Checks that the given filters is valid . --> Verifies that a given annotation is valid . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[coogan]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[coogan]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[coogan]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[coogan]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[coogan]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[coogan]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[coogan]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[coogan]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[coogan]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 187 ---------------------------------------------
Gets a list of type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[writings]] ( ) { Set < Class < ? extends Throwable > > [[sheepskin]] = this . [[connections]] . keySet ( ) ; return [[sheepskin]] . toArray ( new Class [ [[sheepskin]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Extract the extractorable extractor . --> Does not call this method --> Socre: 1.0

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable [[suburbs]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[soundlessly]] = entry . getKey ( ) ; if ( [[soundlessly]] . isInstance ( [[suburbs]] ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( [[suburbs]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 189 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 76 / 4 / 189:  19%|█▉        | 189/1000 [3:11:53<13:43:24, 60.92s/it][Succeeded / Failed / Skipped / Total] 109 / 76 / 4 / 189:  19%|█▉        | 190/1000 [3:12:03<13:38:45, 60.65s/it][Succeeded / Failed / Skipped / Total] 110 / 76 / 4 / 190:  19%|█▉        | 190/1000 [3:12:03<13:38:45, 60.65s/it][Succeeded / Failed / Skipped / Total] 110 / 76 / 4 / 190:  19%|█▉        | 191/1000 [3:12:09<13:33:54, 60.36s/it][Succeeded / Failed / Skipped / Total] 111 / 76 / 4 / 191:  19%|█▉        | 191/1000 [3:12:09<13:33:54, 60.36s/it][Succeeded / Failed / Skipped / Total] 111 / 76 / 4 / 191:  19%|█▉        | 192/1000 [3:13:05<13:32:35, 60.34s/it][Succeeded / Failed / Skipped / Total] 112 / 76 / 4 / 192:  19%|█▉        | 192/1000 [3:13:05<13:32:35, 60.34s/it][Succeeded / Failed / Skipped / Total] 112 / 76 / 4 / 192:  19%|█▉        | 193/1000 [3:14:32<13:33:26, 60.48s/it][Succeeded / Failed / Skipped / Total] 112 / 77 / 4 / 193:  19%|█▉        | 193/1000 [3:14:32<13:33:26, 60.48s/it][Succeeded / Failed / Skipped / Total] 112 / 77 / 4 / 193:  19%|█▉        | 194/1000 [3:14:36<13:28:31, 60.19s/it][Succeeded / Failed / Skipped / Total] 113 / 77 / 4 / 194:  19%|█▉        | 194/1000 [3:14:36<13:28:31, 60.19s/it][Succeeded / Failed / Skipped / Total] 113 / 77 / 4 / 194:  20%|█▉        | 195/1000 [3:16:10<13:29:51, 60.36s/it]Adds a bean definition to the bean . --> Build a bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean [[jsr250Enabled]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[jsr250Enabled]] ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[pathologically]] ( ParserContext pc , boolean [[forgets]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[forgets]] ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 190 ---------------------------------------------
Returns the authorities for the given user . --> Get authority authority authority --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > [[brahman]] ) { Assert . notNull ( [[brahman]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[brahman]] . size ( ) ) ; for ( GrantedAuthority authority : [[brahman]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 191 ---------------------------------------------
Return true if the expected string is a valid number . --> Compares two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { result |= [[expected]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] [[corie]] , byte [ ] actual ) { if ( [[corie]] . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < [[corie]] . length ; i ++ ) { result |= [[corie]] [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 192 ---------------------------------------------
Sets the default url . --> Configure a Pyythonythony --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[injection]] ( String [[autobiography]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[autobiography]] ) , ( ) -> "'" + [[autobiography]] + "' is not a valid redirect URL" ) ; this . [[paddled]] = [[autobiography]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 193 ---------------------------------------------
Resolves a resolve request . --> [[[FAILED]]]

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . [[everyone]] = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 194 ---------------------------------------------
Build a POST request . --> Build a POST request --> Socre: 1.0

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[folies]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[folies]] . append ( servletPath ) ; if ( pathInfo != null ) { [[folies]] . append ( pathInfo ) ; } } else { [[folies]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[folies]] . append ( "?" ) . append ( queryString ) ; } return [[folies]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 195 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 78 / 4 / 195:  20%|█▉        | 195/1000 [3:16:10<13:29:51, 60.36s/it][Succeeded / Failed / Skipped / Total] 113 / 78 / 4 / 195:  20%|█▉        | 196/1000 [3:17:18<13:29:22, 60.40s/it][Succeeded / Failed / Skipped / Total] 113 / 79 / 4 / 196:  20%|█▉        | 196/1000 [3:17:18<13:29:22, 60.40s/it][Succeeded / Failed / Skipped / Total] 113 / 79 / 4 / 196:  20%|█▉        | 197/1000 [3:17:56<13:26:48, 60.28s/it][Succeeded / Failed / Skipped / Total] 114 / 79 / 4 / 197:  20%|█▉        | 197/1000 [3:17:56<13:26:48, 60.28s/it][Succeeded / Failed / Skipped / Total] 114 / 79 / 4 / 197:  20%|█▉        | 198/1000 [3:20:13<13:31:02, 60.68s/it][Succeeded / Failed / Skipped / Total] 114 / 80 / 4 / 198:  20%|█▉        | 198/1000 [3:20:13<13:31:02, 60.68s/it][Succeeded / Failed / Skipped / Total] 114 / 80 / 4 / 198:  20%|█▉        | 199/1000 [3:21:49<13:32:21, 60.85s/it][Succeeded / Failed / Skipped / Total] 115 / 80 / 4 / 199:  20%|█▉        | 199/1000 [3:21:49<13:32:21, 60.85s/it][Succeeded / Failed / Skipped / Total] 115 / 80 / 4 / 199:  20%|██        | 200/1000 [3:21:54<13:27:38, 60.57s/it]Returns true if the given URL contains a valid url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String [[url]] ) { if ( [[url]] == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String [[bookmaking]] ) { if ( [[bookmaking]] == null ) { return "[[Renminbi]]" != "[[Renminbi]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[bookmaking]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Gets the attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[disa]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[disa]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 197 ---------------------------------------------
Converts a string to a set . --> Unregisters a TypeId --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable identifier , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[katsumi]] ( Serializable identifier , ResultSet [[unhitch]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[unhitch]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[unhitch]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[unhitch]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 198 ---------------------------------------------
Create a new batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl [[acl]] ) { if ( [[acl]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[acl]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[acl]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[acl]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "[[True]]" == "[[True]]" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl [[unnamable]] ) { if ( [[unnamable]] . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return [[unnamable]] . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = [[unnamable]] . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) [[unnamable]] . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "[[Stumbles]]" == "[[Stumbles]]" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 199 ---------------------------------------------
Create a ObjectId . --> Create a persister --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[object]] , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "[[True]]" == "[[True]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , "[[True]]" == "[[True]]" , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[object]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[starliner]] , Sid [[corre]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[corre]] , "[[Froggie]]" == "[[Froggie]]" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[starliner]] . getType ( ) , "[[Froggie]]" == "[[Froggie]]" , [[starliner]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[starliner]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 116 / 80 / 4 / 200:  20%|██        | 200/1000 [3:21:54<13:27:38, 60.57s/it][Succeeded / Failed / Skipped / Total] 116 / 80 / 4 / 200:  20%|██        | 201/1000 [3:22:52<13:26:26, 60.56s/it][Succeeded / Failed / Skipped / Total] 117 / 80 / 4 / 201:  20%|██        | 201/1000 [3:22:52<13:26:26, 60.56s/it][Succeeded / Failed / Skipped / Total] 117 / 80 / 4 / 201:  20%|██        | 202/1000 [3:24:49<13:29:11, 60.84s/it][Succeeded / Failed / Skipped / Total] 117 / 81 / 4 / 202:  20%|██        | 202/1000 [3:24:49<13:29:11, 60.84s/it][Succeeded / Failed / Skipped / Total] 117 / 81 / 5 / 203:  20%|██        | 203/1000 [3:24:49<13:24:11, 60.54s/it][Succeeded / Failed / Skipped / Total] 117 / 81 / 5 / 203:  20%|██        | 204/1000 [3:26:12<13:24:35, 60.65s/it][Succeeded / Failed / Skipped / Total] 117 / 82 / 5 / 204:  20%|██        | 204/1000 [3:26:12<13:24:35, 60.65s/it][Succeeded / Failed / Skipped / Total] 117 / 82 / 5 / 204:  20%|██        | 205/1000 [3:26:48<13:22:00, 60.53s/it][Succeeded / Failed / Skipped / Total] 118 / 82 / 5 / 205:  20%|██        | 205/1000 [3:26:48<13:22:00, 60.53s/it][Succeeded / Failed / Skipped / Total] 118 / 82 / 5 / 205:  21%|██        | 206/1000 [3:28:08<13:22:16, 60.62s/it][Succeeded / Failed / Skipped / Total] 118 / 83 / 5 / 206:  21%|██        | 206/1000 [3:28:08<13:22:16, 60.62s/it][Succeeded / Failed / Skipped / Total] 118 / 83 / 5 / 206:  21%|██        | 207/1000 [3:30:00<13:24:33, 60.87s/it]Updates the specified object . --> Update a Miroid --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[massai]] ) { Long parentId = null ; if ( [[massai]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[massai]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[massai]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[massai]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[massai]] . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[massai]] . isEntriesInheriting ( ) ) , [[massai]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 201 ---------------------------------------------
Clears the request . --> Method to create a new lexicote --> Socre: 1.0

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "[[False]]" != "[[False]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[hesitant]] , HttpServletResponse [[disinherited]] ) { if ( requestMatcher . matches ( [[hesitant]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[hesitant]] , portResolver ) ; if ( createSessionAllowed || [[hesitant]] . getSession ( "[[Euripides]]" != "[[Euripides]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 202 ---------------------------------------------
Returns a set of servers . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[dissonance]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[bmw]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[bmw]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[bmw]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 203 ---------------------------------------------
Sets the default server . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 204 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[blonsky]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[blonsky]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Encrypt password . --> Encrypt the given char --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[eccentricity]] ( CharSequence [[coins]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( [[coins]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Encrypt a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[mado]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[mado]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 84 / 5 / 207:  21%|██        | 207/1000 [3:30:00<13:24:33, 60.87s/it][Succeeded / Failed / Skipped / Total] 118 / 84 / 6 / 208:  21%|██        | 208/1000 [3:30:01<13:19:40, 60.58s/it][Succeeded / Failed / Skipped / Total] 118 / 84 / 6 / 208:  21%|██        | 209/1000 [3:30:13<13:15:37, 60.35s/it][Succeeded / Failed / Skipped / Total] 119 / 84 / 6 / 209:  21%|██        | 209/1000 [3:30:13<13:15:37, 60.35s/it][Succeeded / Failed / Skipped / Total] 119 / 84 / 6 / 209:  21%|██        | 210/1000 [3:31:23<13:15:15, 60.40s/it][Succeeded / Failed / Skipped / Total] 119 / 85 / 6 / 210:  21%|██        | 210/1000 [3:31:23<13:15:15, 60.40s/it][Succeeded / Failed / Skipped / Total] 119 / 85 / 6 / 210:  21%|██        | 211/1000 [3:31:24<13:10:29, 60.11s/it][Succeeded / Failed / Skipped / Total] 119 / 85 / 7 / 211:  21%|██        | 211/1000 [3:31:24<13:10:29, 60.11s/it][Succeeded / Failed / Skipped / Total] 119 / 85 / 7 / 211:  21%|██        | 212/1000 [3:31:29<13:06:07, 59.86s/it][Succeeded / Failed / Skipped / Total] 120 / 85 / 7 / 212:  21%|██        | 212/1000 [3:31:29<13:06:07, 59.86s/it][Succeeded / Failed / Skipped / Total] 120 / 85 / 7 / 212:  21%|██▏       | 213/1000 [3:31:34<13:01:45, 59.60s/it][Succeeded / Failed / Skipped / Total] 121 / 85 / 7 / 213:  21%|██▏       | 213/1000 [3:31:34<13:01:45, 59.60s/it][Succeeded / Failed / Skipped / Total] 121 / 85 / 7 / 213:  21%|██▏       | 214/1000 [3:32:27<13:00:21, 59.57s/it]Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[accompany]] ( HttpServletRequest request , HttpServletResponse [[eventual]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[parakeets]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[parakeets]] ) ) { if ( ! [[eventual]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[eventual]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[parakeets]] != null ) { if ( ! [[eventual]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[eventual]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[parakeets]] ) ; } } } else { [[eventual]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 208 ---------------------------------------------
Perform a POST request . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 209 ---------------------------------------------
Returns the default default target url . --> Return default ServletServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[kido]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
Sets the target url . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[sellin]] ( String [[anto]] ) { if ( [[anto]] != null ) { Assert . hasText ( [[anto]] , "targetUrlParameter cannot be empty" ) ; } this . [[thinkit]] = [[anto]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 211 ---------------------------------------------
Get the row row ID . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 212 ---------------------------------------------
Add a new Dudne with the given name . --> Add a new Distribution --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[assing]] ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 213 ---------------------------------------------
Creates a new shared object . --> Create a new instance of a class . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[agha]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[agha]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[agha]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[agha]] . put ( ApplicationContext . class , context ) ; [[agha]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[agha]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[agha]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 214 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 85 / 7 / 214:  21%|██▏       | 214/1000 [3:32:27<13:00:21, 59.57s/it][Succeeded / Failed / Skipped / Total] 122 / 85 / 7 / 214:  22%|██▏       | 215/1000 [3:32:46<12:56:53, 59.38s/it][Succeeded / Failed / Skipped / Total] 123 / 85 / 7 / 215:  22%|██▏       | 215/1000 [3:32:46<12:56:53, 59.38s/it][Succeeded / Failed / Skipped / Total] 123 / 85 / 7 / 215:  22%|██▏       | 216/1000 [3:33:31<12:55:01, 59.31s/it][Succeeded / Failed / Skipped / Total] 124 / 85 / 7 / 216:  22%|██▏       | 216/1000 [3:33:31<12:55:01, 59.31s/it][Succeeded / Failed / Skipped / Total] 124 / 85 / 7 / 216:  22%|██▏       | 217/1000 [3:35:09<12:56:22, 59.49s/it][Succeeded / Failed / Skipped / Total] 125 / 85 / 7 / 217:  22%|██▏       | 217/1000 [3:35:09<12:56:22, 59.49s/it][Succeeded / Failed / Skipped / Total] 125 / 85 / 7 / 217:  22%|██▏       | 218/1000 [3:35:17<12:52:16, 59.25s/it][Succeeded / Failed / Skipped / Total] 126 / 85 / 7 / 218:  22%|██▏       | 218/1000 [3:35:17<12:52:16, 59.25s/it][Succeeded / Failed / Skipped / Total] 126 / 85 / 7 / 218:  22%|██▏       | 219/1000 [3:35:27<12:48:23, 59.03s/it][Succeeded / Failed / Skipped / Total] 127 / 85 / 7 / 219:  22%|██▏       | 219/1000 [3:35:27<12:48:23, 59.03s/it][Succeeded / Failed / Skipped / Total] 127 / 85 / 7 / 219:  22%|██▏       | 220/1000 [3:35:38<12:44:34, 58.81s/it][Succeeded / Failed / Skipped / Total] 128 / 85 / 7 / 220:  22%|██▏       | 220/1000 [3:35:38<12:44:34, 58.81s/it][Succeeded / Failed / Skipped / Total] 128 / 85 / 7 / 220:  22%|██▏       | 221/1000 [3:37:47<12:47:41, 59.13s/it]Sets the trusted configuration . -->  --> Socre: 1.0

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[prefix]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[prefix]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[prefix]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[absolutely]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String [[extraterrestrials]] = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( [[extraterrestrials]] + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = [[extraterrestrials]] + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 215 ---------------------------------------------
Formats a date . --> Convert a String to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static String getCurrentDate ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String getCurrentDate ( ) { long [[toymaker]] = System . currentTimeMillis ( ) ; if ( ( [[toymaker]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[toymaker]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[toymaker]] ; currentDate = format . format ( new Date ( [[toymaker]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 216 ---------------------------------------------
Parses a date . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[tanya]] ( String value , DateFormat [ ] formats ) { Date [[dundee]] = null ; for ( int [[batcave]] = 0 ; ( [[dundee]] == null ) && ( [[batcave]] < formats . length ) ; [[batcave]] ++ ) { try { [[dundee]] = formats [ [[batcave]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[dundee]] == null ) { return null ; } return new Long ( [[dundee]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 217 ---------------------------------------------
Clears the cache . --> Shut down the keys --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[retirement]] ( HashMap [[speedy]] , Object key , Object [[unpredictability]] ) { if ( [[unpredictability]] == null ) { return ; } if ( [[speedy]] . size ( ) > 1000 ) { [[speedy]] . clear ( ) ; } [[speedy]] . put ( key , [[unpredictability]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Sets the authentication user . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[chested]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[chested]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 219 ---------------------------------------------
Obtain the security security subject . --> Obtains a web debugging --> Socre: 1.0

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[oesophagus]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 220 ---------------------------------------------
Obtain the security context . --> Return a list of beans --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[fansubs]] ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 221 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 86 / 7 / 221:  22%|██▏       | 221/1000 [3:37:47<12:47:41, 59.13s/it][Succeeded / Failed / Skipped / Total] 128 / 86 / 7 / 221:  22%|██▏       | 222/1000 [3:39:32<12:49:22, 59.33s/it][Succeeded / Failed / Skipped / Total] 129 / 86 / 7 / 222:  22%|██▏       | 222/1000 [3:39:32<12:49:22, 59.33s/it][Succeeded / Failed / Skipped / Total] 129 / 86 / 7 / 222:  22%|██▏       | 223/1000 [3:41:41<12:52:25, 59.65s/it][Succeeded / Failed / Skipped / Total] 129 / 87 / 7 / 223:  22%|██▏       | 223/1000 [3:41:41<12:52:25, 59.65s/it][Succeeded / Failed / Skipped / Total] 129 / 87 / 7 / 223:  22%|██▏       | 224/1000 [3:43:07<12:52:58, 59.77s/it][Succeeded / Failed / Skipped / Total] 129 / 88 / 7 / 224:  22%|██▏       | 224/1000 [3:43:07<12:52:58, 59.77s/it][Succeeded / Failed / Skipped / Total] 129 / 88 / 7 / 224:  22%|██▎       | 225/1000 [3:44:23<12:52:53, 59.84s/it][Succeeded / Failed / Skipped / Total] 129 / 89 / 7 / 225:  22%|██▎       | 225/1000 [3:44:23<12:52:53, 59.84s/it][Succeeded / Failed / Skipped / Total] 129 / 89 / 7 / 225:  23%|██▎       | 226/1000 [3:44:28<12:48:46, 59.59s/it][Succeeded / Failed / Skipped / Total] 130 / 89 / 7 / 226:  23%|██▎       | 226/1000 [3:44:28<12:48:46, 59.59s/it][Succeeded / Failed / Skipped / Total] 130 / 89 / 7 / 226:  23%|██▎       | 227/1000 [3:45:28<12:47:48, 59.60s/it][Succeeded / Failed / Skipped / Total] 130 / 90 / 7 / 227:  23%|██▎       | 227/1000 [3:45:28<12:47:48, 59.60s/it][Succeeded / Failed / Skipped / Total] 130 / 90 / 7 / 227:  23%|██▎       | 228/1000 [3:45:48<12:44:33, 59.42s/it]Change the authentication password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[username]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[username]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[username]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String [[redesign]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[oddballs]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[oddballs]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[oddballs]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[redesign]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[redesign]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 222 ---------------------------------------------
Adds a named followed group . --> Retitute die e die e e die e e die e efe et efetefeich e e e efeiefet efeichte fe eie efte efe tefefefte et etcheie e efefefefetefe --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[unreality]] ( String [[infiltrates]] ) { DistinguishedName [[sketchbook]] = new DistinguishedName ( groupSearchBase ) ; [[sketchbook]] . add ( groupRoleAttributeName , [[infiltrates]] . toLowerCase ( ) ) ; return [[sketchbook]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 223 ---------------------------------------------
Called when a session has been received . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[deface]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 224 ---------------------------------------------
Handles a token . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[scream]] ( Authentication [[attack]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( [[attack]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Get the chain of chain chains . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( request ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[fossils]] : filterChains ) { if ( [[fossils]] . matches ( request ) ) { return [[fossils]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Gets a list of criteria . --> Gets a list of all criterias --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[thumbs]] ( String url ) { return [[thumbs]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 227 ---------------------------------------------
Returns the application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext [[shtick]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[shtick]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 90 / 7 / 228:  23%|██▎       | 228/1000 [3:45:48<12:44:33, 59.42s/it][Succeeded / Failed / Skipped / Total] 131 / 90 / 7 / 228:  23%|██▎       | 229/1000 [3:45:56<12:40:40, 59.20s/it][Succeeded / Failed / Skipped / Total] 132 / 90 / 7 / 229:  23%|██▎       | 229/1000 [3:45:56<12:40:40, 59.20s/it][Succeeded / Failed / Skipped / Total] 132 / 90 / 7 / 229:  23%|██▎       | 230/1000 [3:47:00<12:39:59, 59.22s/it][Succeeded / Failed / Skipped / Total] 133 / 90 / 7 / 230:  23%|██▎       | 230/1000 [3:47:00<12:39:59, 59.22s/it][Succeeded / Failed / Skipped / Total] 133 / 90 / 7 / 230:  23%|██▎       | 231/1000 [3:47:06<12:36:01, 58.99s/it][Succeeded / Failed / Skipped / Total] 134 / 90 / 7 / 231:  23%|██▎       | 231/1000 [3:47:06<12:36:01, 58.99s/it][Succeeded / Failed / Skipped / Total] 134 / 90 / 7 / 231:  23%|██▎       | 232/1000 [3:48:25<12:36:08, 59.07s/it][Succeeded / Failed / Skipped / Total] 134 / 91 / 7 / 232:  23%|██▎       | 232/1000 [3:48:25<12:36:08, 59.07s/it][Succeeded / Failed / Skipped / Total] 134 / 91 / 7 / 232:  23%|██▎       | 233/1000 [3:50:02<12:37:17, 59.24s/it][Succeeded / Failed / Skipped / Total] 135 / 91 / 7 / 233:  23%|██▎       | 233/1000 [3:50:02<12:37:17, 59.24s/it][Succeeded / Failed / Skipped / Total] 135 / 91 / 7 / 233:  23%|██▎       | 234/1000 [3:50:12<12:33:35, 59.03s/it][Succeeded / Failed / Skipped / Total] 136 / 91 / 7 / 234:  23%|██▎       | 234/1000 [3:50:12<12:33:35, 59.03s/it][Succeeded / Failed / Skipped / Total] 136 / 91 / 7 / 234:  24%|██▎       | 235/1000 [3:52:14<12:36:01, 59.30s/it][Succeeded / Failed / Skipped / Total] 136 / 92 / 7 / 235:  24%|██▎       | 235/1000 [3:52:14<12:36:01, 59.30s/it][Succeeded / Failed / Skipped / Total] 136 / 92 / 7 / 235:  24%|██▎       | 236/1000 [3:53:10<12:34:51, 59.28s/it]Returns a new DudeanName . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName [[appropriate]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[appropriate]] . contains ( baseDn ) ) { return [[appropriate]] ; } baseDn . append ( [[appropriate]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 229 ---------------------------------------------
Update the attributes of this session . --> Update information about a request --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[bountiful]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Method to set the preemptionAuther . --> Method to get auth pretemptionAuther --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[playlist]] ( String [[machlne]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[machlne]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Add a list of filters to a list of filters . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[tannis]] ( List < Filter > filters ) { Validate . notNull ( [[tannis]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[tannis]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Add a filter to the filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[cartography]] ( Filter [[understanding]] , Filter ... additionalFilters ) { Validate . notNull ( [[understanding]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[understanding]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Sets a scheme . --> Sets the zookeeper --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String [[password]] ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( [[password]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[merl]] ( String [[québec]] , String [[dazzles]] ) { final BasicAuthScheme [[nozomi]] = new BasicAuthScheme ( ) ; [[nozomi]] . setUserName ( [[québec]] ) ; [[nozomi]] . setPassword ( [[dazzles]] ) ; return [[nozomi]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
Set the scheme for the given scheme . --> Method to set the buumbPassword --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String domain ) { final NTLMAuthScheme [[cucumbers]] = new NTLMAuthScheme ( ) ; [[cucumbers]] . setUserName ( userName ) ; [[cucumbers]] . setPassword ( password ) ; [[cucumbers]] . setWorkstation ( workstation ) ; [[cucumbers]] . setDomain ( domain ) ; return [[cucumbers]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Sets the scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[userName]] , String password , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[exorbitant]] , String password , FormAuthConfig config ) { if ( [[exorbitant]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[wogs]] = new FormAuthScheme ( ) ; [[wogs]] . setUserName ( [[exorbitant]] ) ; [[wogs]] . setPassword ( password ) ; [[wogs]] . setConfig ( config ) ; return [[wogs]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
[Succeeded / Failed / Skipped / Total] 136 / 93 / 7 / 236:  24%|██▎       | 236/1000 [3:53:10<12:34:51, 59.28s/it][Succeeded / Failed / Skipped / Total] 136 / 93 / 7 / 236:  24%|██▎       | 237/1000 [3:53:15<12:30:57, 59.05s/it][Succeeded / Failed / Skipped / Total] 137 / 93 / 7 / 237:  24%|██▎       | 237/1000 [3:53:15<12:30:57, 59.05s/it][Succeeded / Failed / Skipped / Total] 137 / 93 / 7 / 237:  24%|██▍       | 238/1000 [3:53:20<12:27:03, 58.82s/it][Succeeded / Failed / Skipped / Total] 138 / 93 / 7 / 238:  24%|██▍       | 238/1000 [3:53:20<12:27:03, 58.82s/it][Succeeded / Failed / Skipped / Total] 138 / 93 / 7 / 238:  24%|██▍       | 239/1000 [3:53:38<12:23:56, 58.66s/it][Succeeded / Failed / Skipped / Total] 139 / 93 / 7 / 239:  24%|██▍       | 239/1000 [3:53:38<12:23:56, 58.66s/it][Succeeded / Failed / Skipped / Total] 139 / 93 / 7 / 239:  24%|██▍       | 240/1000 [3:53:44<12:20:09, 58.43s/it][Succeeded / Failed / Skipped / Total] 140 / 93 / 7 / 240:  24%|██▍       | 240/1000 [3:53:44<12:20:09, 58.43s/it][Succeeded / Failed / Skipped / Total] 140 / 93 / 7 / 240:  24%|██▍       | 241/1000 [3:55:11<12:20:43, 58.56s/it]--------------------------------------------- Result 236 ---------------------------------------------
Set the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[calling]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[calling]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 237 ---------------------------------------------
Sends a log message to the response . --> Formats a log message . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( responseBodyToAppend ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[bilson]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[bilson]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[bilson]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[bilson]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[bilson]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[bilson]] . append ( responseBodyToAppend ) ; } String response = [[bilson]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 238 ---------------------------------------------
Construct a ConfigConfig object . --> Construct ConfigConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[corto]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the charset charset . --> Sets a Content TypeEncoder . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[prentice]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 240 ---------------------------------------------
Creates and registers a new instance of this object . --> Factory method to create a new instance --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[creeped]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 94 / 7 / 241:  24%|██▍       | 241/1000 [3:55:11<12:20:43, 58.56s/it][Succeeded / Failed / Skipped / Total] 140 / 94 / 7 / 241:  24%|██▍       | 242/1000 [3:55:17<12:16:58, 58.34s/it][Succeeded / Failed / Skipped / Total] 141 / 94 / 7 / 242:  24%|██▍       | 242/1000 [3:55:17<12:16:58, 58.34s/it][Succeeded / Failed / Skipped / Total] 141 / 94 / 7 / 242:  24%|██▍       | 243/1000 [3:55:22<12:13:14, 58.12s/it][Succeeded / Failed / Skipped / Total] 142 / 94 / 7 / 243:  24%|██▍       | 243/1000 [3:55:22<12:13:14, 58.12s/it][Succeeded / Failed / Skipped / Total] 142 / 94 / 7 / 243:  24%|██▍       | 244/1000 [3:55:27<12:09:33, 57.90s/it][Succeeded / Failed / Skipped / Total] 143 / 94 / 7 / 244:  24%|██▍       | 244/1000 [3:55:27<12:09:33, 57.90s/it][Succeeded / Failed / Skipped / Total] 143 / 94 / 7 / 244:  24%|██▍       | 245/1000 [3:55:32<12:05:51, 57.68s/it][Succeeded / Failed / Skipped / Total] 144 / 94 / 7 / 245:  24%|██▍       | 245/1000 [3:55:32<12:05:51, 57.68s/it][Succeeded / Failed / Skipped / Total] 144 / 94 / 7 / 245:  25%|██▍       | 246/1000 [3:55:38<12:02:14, 57.47s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 7 / 246:  25%|██▍       | 246/1000 [3:55:38<12:02:14, 57.47s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 8 / 247:  25%|██▍       | 247/1000 [3:55:38<11:58:21, 57.24s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 8 / 247:  25%|██▍       | 248/1000 [3:55:38<11:54:31, 57.01s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 9 / 248:  25%|██▍       | 248/1000 [3:55:38<11:54:31, 57.01s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 10 / 249:  25%|██▍       | 249/1000 [3:55:38<11:50:42, 56.78s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 10 / 249:  25%|██▌       | 250/1000 [3:55:38<11:46:55, 56.55s/it]Creates a new Factory instance . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[remodeled]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[remodeled]] , johnzonObjectMapperFactory , "[[Practising]]" == "[[Practising]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 242 ---------------------------------------------
Creates a new ConfigConfigConfigConfigConfig instance . --> Factory method for creating a MutableConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[boniface]] ( LogConfig logConfig ) { notNull ( [[boniface]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[boniface]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 243 ---------------------------------------------
Creates a new ConfigConfigConfig instance . --> Factory method to create a ConfigConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[dukey]] ( SessionConfig sessionConfig ) { notNull ( [[dukey]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[dukey]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 244 ---------------------------------------------
Constructs a configuration from the given configuration . --> Construct a ConfigConfig from a ConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[busybody]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[busybody]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[busybody]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 245 ---------------------------------------------
Build a ConfigConfigConfig instance . --> Factory method to create a ConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[jsonConfig]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[relaxed]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 246 ---------------------------------------------
Creates a ConfigConfigConfigConfig from configuration . --> Helper method to create a MVM from a configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[catalepsy]] ( XmlConfig xmlConfig ) { notNull ( [[catalepsy]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[catalepsy]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
Build ConfigConfigConfigConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 248 ---------------------------------------------
Create a new ConfigConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 249 ---------------------------------------------
Builds a ConfigConfigConfigConfigConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 250 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 145 / 94 / 11 / 250:  25%|██▌       | 250/1000 [3:55:38<11:46:55, 56.55s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 12 / 251:  25%|██▌       | 251/1000 [3:55:38<11:43:11, 56.33s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 12 / 251:  25%|██▌       | 252/1000 [3:55:38<11:39:27, 56.11s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 13 / 252:  25%|██▌       | 252/1000 [3:55:38<11:39:27, 56.11s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 14 / 253:  25%|██▌       | 253/1000 [3:55:39<11:35:46, 55.89s/it][Succeeded / Failed / Skipped / Total] 145 / 94 / 14 / 253:  25%|██▌       | 254/1000 [3:55:43<11:32:20, 55.68s/it][Succeeded / Failed / Skipped / Total] 146 / 94 / 14 / 254:  25%|██▌       | 254/1000 [3:55:43<11:32:20, 55.68s/it][Succeeded / Failed / Skipped / Total] 147 / 94 / 14 / 255:  26%|██▌       | 255/1000 [3:55:58<11:29:26, 55.52s/it][Succeeded / Failed / Skipped / Total] 147 / 94 / 14 / 255:  26%|██▌       | 256/1000 [3:57:15<11:29:32, 55.61s/it][Succeeded / Failed / Skipped / Total] 148 / 94 / 14 / 256:  26%|██▌       | 256/1000 [3:57:15<11:29:32, 55.61s/it][Succeeded / Failed / Skipped / Total] 148 / 94 / 14 / 256:  26%|██▌       | 257/1000 [3:57:43<11:27:15, 55.50s/it][Succeeded / Failed / Skipped / Total] 149 / 94 / 14 / 257:  26%|██▌       | 257/1000 [3:57:43<11:27:15, 55.50s/it][Succeeded / Failed / Skipped / Total] 149 / 94 / 14 / 257:  26%|██▌       | 258/1000 [3:58:45<11:26:40, 55.53s/it][Succeeded / Failed / Skipped / Total] 150 / 94 / 14 / 258:  26%|██▌       | 258/1000 [3:58:45<11:26:40, 55.53s/it][Succeeded / Failed / Skipped / Total] 150 / 94 / 14 / 258:  26%|██▌       | 259/1000 [3:59:13<11:24:26, 55.42s/it]Creates a new MvrobusConfigConfig from a ConfigConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 251 ---------------------------------------------
Builds a ConfigPart configuration from a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 252 ---------------------------------------------
Build a ConfigConfig instance from a ConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 253 ---------------------------------------------
Constructs a ConfigConfig from a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 254 ---------------------------------------------
Creates a new SSL trust store . --> Create a new trusted connection --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[flatbed]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
Generate the default namespace . --> Create a new XMLFactory --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[hyu]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Creates a namespace URI . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String [[depeche]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[depeche]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[dapper]] = new HashMap < String , String > ( declaredNamespaces ) ; [[dapper]] . put ( prefix , [[depeche]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[dapper]] , properties , validating , "[[Tentative]]" == "[[Tentative]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 257 ---------------------------------------------
Replies the HTTP request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Object request ( String method , boolean [[hasBody]] , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[hasBody]] , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean [[snips]] , Closure [[volcanoes]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[snips]] , [[volcanoes]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 258 ---------------------------------------------
Sets the headers . --> Unsynchronized --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object [[key]] : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( [[key]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[companeros]] ( Map < ? , ? > [[hungry]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[hungry]] == null ) return ; for ( Object [[qua]] : [[hungry]] . keySet ( ) ) { Object val = [[hungry]] . get ( [[qua]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[qua]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 259 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 151 / 94 / 14 / 259:  26%|██▌       | 259/1000 [3:59:13<11:24:26, 55.42s/it][Succeeded / Failed / Skipped / Total] 151 / 94 / 14 / 259:  26%|██▌       | 260/1000 [4:00:08<11:23:29, 55.42s/it][Succeeded / Failed / Skipped / Total] 152 / 94 / 14 / 260:  26%|██▌       | 260/1000 [4:00:08<11:23:29, 55.42s/it][Succeeded / Failed / Skipped / Total] 152 / 94 / 14 / 260:  26%|██▌       | 261/1000 [4:01:31<11:23:50, 55.52s/it][Succeeded / Failed / Skipped / Total] 152 / 95 / 14 / 261:  26%|██▌       | 261/1000 [4:01:31<11:23:50, 55.52s/it][Succeeded / Failed / Skipped / Total] 152 / 95 / 14 / 261:  26%|██▌       | 262/1000 [4:02:18<11:22:32, 55.49s/it][Succeeded / Failed / Skipped / Total] 153 / 95 / 14 / 262:  26%|██▌       | 262/1000 [4:02:18<11:22:32, 55.49s/it][Succeeded / Failed / Skipped / Total] 153 / 95 / 14 / 262:  26%|██▋       | 263/1000 [4:02:53<11:20:39, 55.41s/it][Succeeded / Failed / Skipped / Total] 154 / 95 / 14 / 263:  26%|██▋       | 263/1000 [4:02:53<11:20:39, 55.41s/it][Succeeded / Failed / Skipped / Total] 154 / 95 / 14 / 263:  26%|██▋       | 264/1000 [4:04:24<11:21:24, 55.55s/it][Succeeded / Failed / Skipped / Total] 154 / 96 / 14 / 264:  26%|██▋       | 264/1000 [4:04:24<11:21:24, 55.55s/it][Succeeded / Failed / Skipped / Total] 154 / 96 / 14 / 264:  26%|██▋       | 265/1000 [4:04:43<11:18:44, 55.41s/it][Succeeded / Failed / Skipped / Total] 154 / 97 / 14 / 265:  26%|██▋       | 265/1000 [4:04:43<11:18:44, 55.41s/it][Succeeded / Failed / Skipped / Total] 154 / 97 / 14 / 265:  27%|██▋       | 266/1000 [4:04:47<11:15:27, 55.21s/it][Succeeded / Failed / Skipped / Total] 155 / 97 / 14 / 266:  27%|██▋       | 266/1000 [4:04:47<11:15:27, 55.21s/it][Succeeded / Failed / Skipped / Total] 155 / 97 / 14 / 266:  27%|██▋       | 267/1000 [4:05:07<11:12:57, 55.08s/it]Set HTTP request . --> Sets a Neighbour --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[irishmen]] ( String host , int port , String [[chateaubriand]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[chateaubriand]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 260 ---------------------------------------------
Sets the control name . --> Set a MBean --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[droop]] ( String controlName ) { Validate . notEmpty ( [[droop]] , "Control name cannot be empty" ) ; this . [[pushpa]] = [[droop]] ; this . isControlNameExplicit = "[[Mignon]]" == "[[Mignon]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 261 ---------------------------------------------
Add a header to the header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[jason]] ( String [[piled]] , String [[molesting]] ) { Validate . notEmpty ( [[piled]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[molesting]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 262 ---------------------------------------------
Set the credentials . --> Create a new Authed user --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String [[host]] , int [[port]] , String user , String [[pass]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new UsernamePasswordCredentials ( user , [[pass]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String [[bib]] , int [[commented]] , String user , String [[authorised]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[bib]] , [[commented]] ) , new UsernamePasswordCredentials ( user , [[authorised]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 263 ---------------------------------------------
Sets a new authorization . --> Turns a recommunication --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[soccer]] , int [[rereading]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[soccer]] , [[rereading]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 264 ---------------------------------------------
Creates a new list of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( [[headerList]] , [[additionalHeaders]] ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header [[navigate]] , Header ... [[vilely]] ) { notNull ( [[navigate]] , "Header" ) ; final List < Header > [[vincennes]] = new LinkedList < Header > ( ) ; [[vincennes]] . add ( [[navigate]] ) ; if ( [[vilely]] != null ) { Collections . addAll ( [[vincennes]] , [[vilely]] ) ; } return new Headers ( [[vincennes]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 265 ---------------------------------------------
Resets the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[lansdale]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 266 ---------------------------------------------
Adds a header to the response . --> Sets the response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[brahmins]] , String value ) { notNull ( [[brahmins]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[brahmins]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[brahmins]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 267 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 97 / 14 / 267:  27%|██▋       | 267/1000 [4:05:07<11:12:57, 55.08s/it][Succeeded / Failed / Skipped / Total] 156 / 97 / 14 / 267:  27%|██▋       | 268/1000 [4:05:23<11:10:14, 54.94s/it][Succeeded / Failed / Skipped / Total] 157 / 97 / 14 / 268:  27%|██▋       | 268/1000 [4:05:23<11:10:14, 54.94s/it][Succeeded / Failed / Skipped / Total] 157 / 97 / 14 / 268:  27%|██▋       | 269/1000 [4:05:40<11:07:35, 54.80s/it][Succeeded / Failed / Skipped / Total] 158 / 97 / 14 / 269:  27%|██▋       | 269/1000 [4:05:40<11:07:35, 54.80s/it][Succeeded / Failed / Skipped / Total] 158 / 97 / 14 / 269:  27%|██▋       | 270/1000 [4:05:46<11:04:29, 54.62s/it][Succeeded / Failed / Skipped / Total] 159 / 97 / 14 / 270:  27%|██▋       | 270/1000 [4:05:46<11:04:29, 54.62s/it][Succeeded / Failed / Skipped / Total] 159 / 97 / 14 / 270:  27%|██▋       | 271/1000 [4:05:56<11:01:35, 54.45s/it][Succeeded / Failed / Skipped / Total] 160 / 97 / 14 / 271:  27%|██▋       | 271/1000 [4:05:56<11:01:35, 54.45s/it][Succeeded / Failed / Skipped / Total] 160 / 97 / 14 / 271:  27%|██▋       | 272/1000 [4:06:19<10:59:16, 54.34s/it][Succeeded / Failed / Skipped / Total] 161 / 97 / 14 / 272:  27%|██▋       | 272/1000 [4:06:19<10:59:16, 54.34s/it][Succeeded / Failed / Skipped / Total] 161 / 97 / 14 / 272:  27%|██▋       | 273/1000 [4:06:42<10:56:59, 54.22s/it][Succeeded / Failed / Skipped / Total] 162 / 97 / 14 / 273:  27%|██▋       | 273/1000 [4:06:42<10:56:59, 54.22s/it][Succeeded / Failed / Skipped / Total] 162 / 97 / 14 / 273:  27%|██▋       | 274/1000 [4:06:54<10:54:12, 54.07s/it][Succeeded / Failed / Skipped / Total] 163 / 97 / 14 / 274:  27%|██▋       | 274/1000 [4:06:54<10:54:12, 54.07s/it][Succeeded / Failed / Skipped / Total] 163 / 97 / 14 / 274:  28%|██▊       | 275/1000 [4:07:01<10:51:13, 53.90s/it][Succeeded / Failed / Skipped / Total] 164 / 97 / 14 / 275:  28%|██▊       | 275/1000 [4:07:01<10:51:13, 53.90s/it][Succeeded / Failed / Skipped / Total] 164 / 97 / 14 / 275:  28%|██▊       | 276/1000 [4:07:49<10:50:04, 53.87s/it][Succeeded / Failed / Skipped / Total] 165 / 97 / 14 / 276:  28%|██▊       | 276/1000 [4:07:49<10:50:04, 53.87s/it][Succeeded / Failed / Skipped / Total] 165 / 97 / 14 / 276:  28%|██▊       | 277/1000 [4:08:04<10:47:29, 53.73s/it]Handles a response . --> Convenience method for testing . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[spotter]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 268 ---------------------------------------------
Sets the value of the given Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[unhappy]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a Matcher that matches the given matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[strategic]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[strategic]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a expiry String representation of the given cookie . --> Adapts a Calendar to a String --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[becomin]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns a set of domains for the given domain . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[sheena]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns the Matcher that matches the given MatcherMatcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[broadcasters]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[broadcasters]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a set of Matchers . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[goofy]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Gets the http http . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[rochefort]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[plotter]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[plotter]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Get a list of cookies from the given cookie . --> Does not call this method --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[enceladus]] ( Matcher < ? super Integer > [[comitted]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[comitted]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 166 / 97 / 14 / 277:  28%|██▊       | 277/1000 [4:08:04<10:47:29, 53.73s/it][Succeeded / Failed / Skipped / Total] 166 / 97 / 14 / 277:  28%|██▊       | 278/1000 [4:09:15<10:47:22, 53.80s/it][Succeeded / Failed / Skipped / Total] 166 / 98 / 14 / 278:  28%|██▊       | 278/1000 [4:09:15<10:47:22, 53.80s/it][Succeeded / Failed / Skipped / Total] 166 / 98 / 14 / 278:  28%|██▊       | 279/1000 [4:10:25<10:47:08, 53.85s/it][Succeeded / Failed / Skipped / Total] 166 / 99 / 14 / 279:  28%|██▊       | 279/1000 [4:10:25<10:47:08, 53.85s/it][Succeeded / Failed / Skipped / Total] 166 / 99 / 14 / 279:  28%|██▊       | 280/1000 [4:10:41<10:44:37, 53.72s/it][Succeeded / Failed / Skipped / Total] 167 / 99 / 14 / 280:  28%|██▊       | 280/1000 [4:10:41<10:44:37, 53.72s/it][Succeeded / Failed / Skipped / Total] 167 / 99 / 14 / 280:  28%|██▊       | 281/1000 [4:10:45<10:41:37, 53.54s/it][Succeeded / Failed / Skipped / Total] 168 / 99 / 14 / 281:  28%|██▊       | 281/1000 [4:10:45<10:41:37, 53.54s/it][Succeeded / Failed / Skipped / Total] 168 / 99 / 15 / 282:  28%|██▊       | 282/1000 [4:10:45<10:38:27, 53.35s/it][Succeeded / Failed / Skipped / Total] 168 / 99 / 15 / 282:  28%|██▊       | 283/1000 [4:10:57<10:35:49, 53.21s/it][Succeeded / Failed / Skipped / Total] 169 / 99 / 15 / 283:  28%|██▊       | 283/1000 [4:10:57<10:35:49, 53.21s/it][Succeeded / Failed / Skipped / Total] 169 / 99 / 15 / 283:  28%|██▊       | 284/1000 [4:11:03<10:32:57, 53.04s/it][Succeeded / Failed / Skipped / Total] 170 / 99 / 15 / 284:  28%|██▊       | 284/1000 [4:11:03<10:32:57, 53.04s/it][Succeeded / Failed / Skipped / Total] 170 / 99 / 15 / 284:  28%|██▊       | 285/1000 [4:13:31<10:36:02, 53.37s/it][Succeeded / Failed / Skipped / Total] 171 / 99 / 15 / 285:  28%|██▊       | 285/1000 [4:13:31<10:36:02, 53.37s/it][Succeeded / Failed / Skipped / Total] 171 / 99 / 15 / 285:  29%|██▊       | 286/1000 [4:14:09<10:34:30, 53.32s/it][Succeeded / Failed / Skipped / Total] 172 / 99 / 15 / 286:  29%|██▊       | 286/1000 [4:14:09<10:34:30, 53.32s/it][Succeeded / Failed / Skipped / Total] 172 / 99 / 15 / 286:  29%|██▊       | 287/1000 [4:14:17<10:31:43, 53.16s/it]--------------------------------------------- Result 277 ---------------------------------------------
Sets the allocate header . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[headerName]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[vowed]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[vowed]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Sets the response header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[detroit]] , String expectedValue ) { spec . header ( [[detroit]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String [[arbitrage]] , String [[bruto]] ) { spec . cookie ( [[arbitrage]] , [[bruto]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Creates a new proxy . --> Create a new Authorization --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[maleficent]] ( String host ) { return new ProxySpecification ( host , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
Creates a new JsonFactory . --> Create a new JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[apalachicola]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Create a new JsonParser --> [[[SKIPPED]]]

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Factory method for testing . --> Returns an unmodifiable &lt &gt ; --> Socre: 1.0

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "[[Permissive]]" == "[[Permissive]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[Permissive]]" == "[[Permissive]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 284 ---------------------------------------------
Creates a new log request . --> Creates a new log4j --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[aba]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Create a HTTP request . --> Create a HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean [[hasBody]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean [[interpretations]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[munster]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[krusty]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 286 ---------------------------------------------
Create a default multi - multi traversal . --> Create a new MultiPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "[[Chicanos]]" == "[[Chicanos]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 99 / 15 / 287:  29%|██▊       | 287/1000 [4:14:17<10:31:43, 53.16s/it][Succeeded / Failed / Skipped / Total] 173 / 99 / 15 / 287:  29%|██▉       | 288/1000 [4:14:41<10:29:40, 53.06s/it][Succeeded / Failed / Skipped / Total] 174 / 99 / 15 / 288:  29%|██▉       | 288/1000 [4:14:41<10:29:40, 53.06s/it][Succeeded / Failed / Skipped / Total] 174 / 99 / 15 / 288:  29%|██▉       | 289/1000 [4:16:43<10:31:36, 53.30s/it][Succeeded / Failed / Skipped / Total] 174 / 100 / 15 / 289:  29%|██▉       | 289/1000 [4:16:43<10:31:36, 53.30s/it][Succeeded / Failed / Skipped / Total] 174 / 100 / 15 / 289:  29%|██▉       | 290/1000 [4:16:49<10:28:45, 53.13s/it][Succeeded / Failed / Skipped / Total] 175 / 100 / 15 / 290:  29%|██▉       | 290/1000 [4:16:49<10:28:45, 53.13s/it][Succeeded / Failed / Skipped / Total] 175 / 100 / 15 / 290:  29%|██▉       | 291/1000 [4:17:57<10:28:29, 53.19s/it][Succeeded / Failed / Skipped / Total] 175 / 101 / 15 / 291:  29%|██▉       | 291/1000 [4:17:57<10:28:29, 53.19s/it][Succeeded / Failed / Skipped / Total] 175 / 101 / 15 / 291:  29%|██▉       | 292/1000 [4:18:16<10:26:12, 53.07s/it][Succeeded / Failed / Skipped / Total] 176 / 101 / 15 / 292:  29%|██▉       | 292/1000 [4:18:16<10:26:12, 53.07s/it][Succeeded / Failed / Skipped / Total] 176 / 101 / 15 / 292:  29%|██▉       | 293/1000 [4:18:27<10:23:38, 52.93s/it][Succeeded / Failed / Skipped / Total] 177 / 101 / 15 / 293:  29%|██▉       | 293/1000 [4:18:27<10:23:38, 52.93s/it][Succeeded / Failed / Skipped / Total] 177 / 101 / 15 / 293:  29%|██▉       | 294/1000 [4:18:56<10:21:48, 52.85s/it][Succeeded / Failed / Skipped / Total] 178 / 101 / 15 / 294:  29%|██▉       | 294/1000 [4:18:56<10:21:48, 52.85s/it][Succeeded / Failed / Skipped / Total] 178 / 101 / 15 / 294:  30%|██▉       | 295/1000 [4:19:01<10:19:00, 52.68s/it][Succeeded / Failed / Skipped / Total] 179 / 101 / 15 / 295:  30%|██▉       | 295/1000 [4:19:01<10:19:00, 52.68s/it][Succeeded / Failed / Skipped / Total] 179 / 101 / 15 / 295:  30%|██▉       | 296/1000 [4:19:11<10:16:27, 52.54s/it]Add attribute . --> Sets the correlation . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[attributeValue]] ) { spec . attribute ( attributeName , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object [[corby]] ) { spec . attribute ( attributeName , [[corby]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 288 ---------------------------------------------
Add a header . --> Specify an unmodifiable resource . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[chaney]] ( String [[unattended]] , String headerValue ) { spec . header ( [[unattended]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 289 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[billion]] , String contentBody , String mimeType ) { spec . multiPart ( [[billion]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 290 ---------------------------------------------
Adds a handler to the handler . --> Sets the number of columns . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[sampled]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[sampled]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 291 ---------------------------------------------
Construct a new HttpClient instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[counting]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[counting]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Cannibals]]" == "[[Cannibals]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
Build HttpClient . --> Build http client --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[newParams]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[peo]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[peo]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[peo]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 293 ---------------------------------------------
Creates HttpClient instance . --> Build HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[orlova]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 294 ---------------------------------------------
Creates a new HttpClient instance . --> Initialize HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[aka]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "[[Julep]]" == "[[Julep]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 295 ---------------------------------------------
Returns a JSON representation of the given JSON . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[basing]] > [[basing]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[basing]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 180 / 101 / 15 / 296:  30%|██▉       | 296/1000 [4:19:11<10:16:27, 52.54s/it][Succeeded / Failed / Skipped / Total] 180 / 101 / 15 / 296:  30%|██▉       | 297/1000 [4:19:16<10:13:42, 52.38s/it][Succeeded / Failed / Skipped / Total] 181 / 101 / 15 / 297:  30%|██▉       | 297/1000 [4:19:16<10:13:42, 52.38s/it][Succeeded / Failed / Skipped / Total] 181 / 101 / 15 / 297:  30%|██▉       | 298/1000 [4:19:26<10:11:10, 52.24s/it][Succeeded / Failed / Skipped / Total] 182 / 101 / 15 / 298:  30%|██▉       | 298/1000 [4:19:26<10:11:10, 52.24s/it][Succeeded / Failed / Skipped / Total] 182 / 101 / 15 / 298:  30%|██▉       | 299/1000 [4:20:14<10:10:07, 52.22s/it][Succeeded / Failed / Skipped / Total] 183 / 101 / 15 / 299:  30%|██▉       | 299/1000 [4:20:14<10:10:07, 52.22s/it][Succeeded / Failed / Skipped / Total] 183 / 101 / 15 / 299:  30%|███       | 300/1000 [4:21:15<10:09:36, 52.25s/it][Succeeded / Failed / Skipped / Total] 183 / 102 / 15 / 300:  30%|███       | 300/1000 [4:21:15<10:09:36, 52.25s/it][Succeeded / Failed / Skipped / Total] 183 / 102 / 15 / 300:  30%|███       | 301/1000 [4:21:44<10:07:49, 52.17s/it][Succeeded / Failed / Skipped / Total] 184 / 102 / 15 / 301:  30%|███       | 301/1000 [4:21:44<10:07:49, 52.17s/it][Succeeded / Failed / Skipped / Total] 184 / 102 / 15 / 301:  30%|███       | 302/1000 [4:24:28<10:11:17, 52.55s/it][Succeeded / Failed / Skipped / Total] 184 / 103 / 15 / 302:  30%|███       | 302/1000 [4:24:28<10:11:17, 52.55s/it][Succeeded / Failed / Skipped / Total] 184 / 103 / 15 / 302:  30%|███       | 303/1000 [4:25:47<10:11:24, 52.63s/it][Succeeded / Failed / Skipped / Total] 184 / 104 / 15 / 303:  30%|███       | 303/1000 [4:25:47<10:11:24, 52.63s/it][Succeeded / Failed / Skipped / Total] 184 / 104 / 15 / 303:  30%|███       | 304/1000 [4:26:45<10:10:45, 52.65s/it][Succeeded / Failed / Skipped / Total] 185 / 104 / 15 / 304:  30%|███       | 304/1000 [4:26:45<10:10:45, 52.65s/it][Succeeded / Failed / Skipped / Total] 185 / 104 / 15 / 304:  30%|███       | 305/1000 [4:26:50<10:08:03, 52.49s/it][Succeeded / Failed / Skipped / Total] 186 / 104 / 15 / 305:  30%|███       | 305/1000 [4:26:50<10:08:03, 52.49s/it][Succeeded / Failed / Skipped / Total] 186 / 104 / 15 / 305:  31%|███       | 306/1000 [4:28:16<10:08:27, 52.60s/it][Succeeded / Failed / Skipped / Total] 186 / 105 / 15 / 306:  31%|███       | 306/1000 [4:28:16<10:08:27, 52.60s/it][Succeeded / Failed / Skipped / Total] 186 / 105 / 15 / 306:  31%|███       | 307/1000 [4:29:24<10:08:08, 52.65s/it][Succeeded / Failed / Skipped / Total] 186 / 106 / 15 / 307:  31%|███       | 307/1000 [4:29:24<10:08:08, 52.65s/it][Succeeded / Failed / Skipped / Total] 186 / 106 / 15 / 307:  31%|███       | 308/1000 [4:30:19<10:07:22, 52.66s/it]Get the int value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[gigio]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 297 ---------------------------------------------
Return a byte . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[jungles]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the short short value for the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[kobe]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Gets the float . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[heatstroke]] ( String [[bleak]] ) { final Object [[fixtures]] = get ( [[bleak]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Converts Double value to double . --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String [[readily]] ) { final Object [[aggregate]] = get ( [[readily]] ) ; if ( [[aggregate]] instanceof Double ) { return ( Double ) [[aggregate]] ; } return ObjectConverter . convertObjectTo ( [[aggregate]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Get the long . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[banerjee]] ( String [[mongkok]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 302 ---------------------------------------------
Get the list of generic type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[yura]] ( String path , Class < T > [[hanne]] ) { if ( [[hanne]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[hanne]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 303 ---------------------------------------------
Get a map from a path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[expropriation]] , V > Map < [[expropriation]] , V > [[abdul]] ( String [[trays]] ) { return get ( [[trays]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Gets object from object type . --> Returns the determining depending on the given type --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[deserving]] > [[deserving]] getObject ( String path , Class < [[deserving]] > objectType ) { Object [[fogarty]] = getFromPath ( path , "[[Sore]]" != "[[Sore]]" ) ; return getObjectAsType ( [[fogarty]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Sets the body . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[rousseau]] ) { spec . body ( object , [[rousseau]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a new cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( [[key]] , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[showman]] ( String [[jannet]] , Object value , Object ... [[applegate]] ) { spec . cookie ( [[jannet]] , value , [[applegate]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Add a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[tureen]] ( String [[calcutta]] , Object ... [[guilders]] ) { spec . param ( [[calcutta]] , [[guilders]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 106 / 15 / 308:  31%|███       | 308/1000 [4:30:19<10:07:22, 52.66s/it][Succeeded / Failed / Skipped / Total] 187 / 106 / 15 / 308:  31%|███       | 309/1000 [4:30:33<10:05:01, 52.54s/it][Succeeded / Failed / Skipped / Total] 188 / 106 / 15 / 309:  31%|███       | 309/1000 [4:30:33<10:05:01, 52.54s/it][Succeeded / Failed / Skipped / Total] 188 / 106 / 15 / 309:  31%|███       | 310/1000 [4:30:43<10:02:35, 52.40s/it][Succeeded / Failed / Skipped / Total] 189 / 106 / 15 / 310:  31%|███       | 310/1000 [4:30:43<10:02:35, 52.40s/it][Succeeded / Failed / Skipped / Total] 189 / 106 / 15 / 310:  31%|███       | 311/1000 [4:32:20<10:03:21, 52.54s/it][Succeeded / Failed / Skipped / Total] 189 / 107 / 15 / 311:  31%|███       | 311/1000 [4:32:20<10:03:21, 52.54s/it][Succeeded / Failed / Skipped / Total] 189 / 107 / 15 / 311:  31%|███       | 312/1000 [4:33:54<10:04:00, 52.67s/it][Succeeded / Failed / Skipped / Total] 189 / 108 / 15 / 312:  31%|███       | 312/1000 [4:33:54<10:04:00, 52.67s/it][Succeeded / Failed / Skipped / Total] 189 / 108 / 15 / 312:  31%|███▏      | 313/1000 [4:35:45<10:05:15, 52.86s/it][Succeeded / Failed / Skipped / Total] 190 / 108 / 15 / 313:  31%|███▏      | 313/1000 [4:35:45<10:05:15, 52.86s/it][Succeeded / Failed / Skipped / Total] 190 / 108 / 15 / 313:  31%|███▏      | 314/1000 [4:37:15<10:05:44, 52.98s/it][Succeeded / Failed / Skipped / Total] 190 / 109 / 15 / 314:  31%|███▏      | 314/1000 [4:37:15<10:05:44, 52.98s/it][Succeeded / Failed / Skipped / Total] 190 / 109 / 15 / 314:  32%|███▏      | 315/1000 [4:41:31<10:12:11, 53.62s/it][Succeeded / Failed / Skipped / Total] 190 / 110 / 15 / 315:  32%|███▏      | 315/1000 [4:41:31<10:12:11, 53.62s/it][Succeeded / Failed / Skipped / Total] 190 / 110 / 15 / 315:  32%|███▏      | 316/1000 [4:42:35<10:11:42, 53.66s/it]Add parameter . --> Specify ticket --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[tickles]] ( String parameterName , Collection < ? > [[eeps]] ) { spec . param ( parameterName , [[eeps]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Update a Strategy --> Create a new updateUpdateStrategy --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[fraulein]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
Constructs a filter from the given stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[homeboy]] ( PrintStream stream , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( stream , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Returns a list of CookieCookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[knoxville]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 312 ---------------------------------------------
Removes all entries from the source . --> [[[FAILED]]]

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > [[tigre]] ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : [[tigre]] ) { Multiset < Object > set = backingMap . get ( keyAndSource . key ) ; if ( set != null ) { set . remove ( keyAndSource . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 313 ---------------------------------------------
Stores the given bindings in the given map . --> Notifies the multi - - multi - - multi - - - multi - - multi - - - - multi - - multi - - multi - - - - - multi - - - - multi - - - multi multi - - - - - - level multi - - - - - - - - multi - - - - --> Socre: 1.0

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[bui]] ( ) { for ( Binding < ? > [[multimillion]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[multimillion]] . getKey ( ) . getTypeLiteral ( ) , [[multimillion]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 314 ---------------------------------------------
Helper method to convert a key to a string . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[maura]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Returns a set of deprecations . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 316 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 111 / 15 / 316:  32%|███▏      | 316/1000 [4:42:35<10:11:42, 53.66s/it][Succeeded / Failed / Skipped / Total] 190 / 111 / 15 / 316:  32%|███▏      | 317/1000 [4:43:23<10:10:34, 53.64s/it][Succeeded / Failed / Skipped / Total] 190 / 112 / 15 / 317:  32%|███▏      | 317/1000 [4:43:23<10:10:34, 53.64s/it][Succeeded / Failed / Skipped / Total] 190 / 112 / 15 / 317:  32%|███▏      | 318/1000 [4:44:39<10:10:28, 53.71s/it][Succeeded / Failed / Skipped / Total] 190 / 113 / 15 / 318:  32%|███▏      | 318/1000 [4:44:39<10:10:28, 53.71s/it][Succeeded / Failed / Skipped / Total] 190 / 113 / 15 / 318:  32%|███▏      | 319/1000 [4:44:57<10:08:20, 53.60s/it][Succeeded / Failed / Skipped / Total] 191 / 113 / 15 / 319:  32%|███▏      | 319/1000 [4:44:57<10:08:20, 53.60s/it][Succeeded / Failed / Skipped / Total] 191 / 113 / 15 / 319:  32%|███▏      | 320/1000 [4:46:36<10:09:01, 53.74s/it][Succeeded / Failed / Skipped / Total] 191 / 114 / 15 / 320:  32%|███▏      | 320/1000 [4:46:36<10:09:01, 53.74s/it][Succeeded / Failed / Skipped / Total] 191 / 114 / 15 / 320:  32%|███▏      | 321/1000 [4:48:15<10:09:44, 53.88s/it][Succeeded / Failed / Skipped / Total] 191 / 115 / 15 / 321:  32%|███▏      | 321/1000 [4:48:15<10:09:44, 53.88s/it][Succeeded / Failed / Skipped / Total] 191 / 115 / 15 / 321:  32%|███▏      | 322/1000 [4:51:05<10:12:55, 54.24s/it][Succeeded / Failed / Skipped / Total] 191 / 116 / 15 / 322:  32%|███▏      | 322/1000 [4:51:05<10:12:55, 54.24s/it][Succeeded / Failed / Skipped / Total] 191 / 116 / 15 / 322:  32%|███▏      | 323/1000 [4:51:15<10:10:28, 54.10s/it]Remove a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint [[ip]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint [[delayed]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[delayed]] != null ) { constructors . remove ( [[delayed]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Returns the ModuleBinding for the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[pol]] ( BindingImpl < ? > [[ferrante]] ) { if ( [[ferrante]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[ferrante]] ) . getInternalDependencies ( ) ; } else if ( [[ferrante]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[ferrante]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 318 ---------------------------------------------
Create a type . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[staunch]] { Class < ? > [[mannerly]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[mannerly]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 319 ---------------------------------------------
Returns a new instance of the parameters . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int size = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[kms]] ) throws InternalProvisionException { if ( [[kms]] == null ) { return NO_ARGUMENTS ; } int size = [[kms]] . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 320 ---------------------------------------------
Create a new injector instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[backfiring]] = Key . get ( Injector . class ) ; InjectorFactory [[boundary]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[backfiring]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[backfiring]] , SourceProvider . UNKNOWN_SOURCE , [[boundary]] , Scoping . UNSCOPED , [[boundary]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 321 ---------------------------------------------
Create a binder . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl [[injector]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl [[yaks]] ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; [[yaks]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( [[yaks]] , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
Checks if a given string is present . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[wacked]] , Errors [[lukey]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[lukey]] , [[wacked]] , ( ( AnnotatedElement ) [[wacked]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[Recalls]]" != "[[Recalls]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 323 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 116 / 15 / 323:  32%|███▏      | 323/1000 [4:51:15<10:10:28, 54.10s/it][Succeeded / Failed / Skipped / Total] 192 / 116 / 15 / 323:  32%|███▏      | 324/1000 [4:51:42<10:08:37, 54.02s/it][Succeeded / Failed / Skipped / Total] 193 / 116 / 15 / 324:  32%|███▏      | 324/1000 [4:51:42<10:08:37, 54.02s/it][Succeeded / Failed / Skipped / Total] 193 / 116 / 15 / 324:  32%|███▎      | 325/1000 [4:52:07<10:06:42, 53.93s/it][Succeeded / Failed / Skipped / Total] 193 / 117 / 15 / 325:  32%|███▎      | 325/1000 [4:52:07<10:06:42, 53.93s/it][Succeeded / Failed / Skipped / Total] 193 / 117 / 15 / 325:  33%|███▎      | 326/1000 [4:52:16<10:04:17, 53.79s/it][Succeeded / Failed / Skipped / Total] 194 / 117 / 15 / 326:  33%|███▎      | 326/1000 [4:52:16<10:04:17, 53.79s/it][Succeeded / Failed / Skipped / Total] 194 / 117 / 15 / 326:  33%|███▎      | 327/1000 [4:54:24<10:05:55, 54.02s/it][Succeeded / Failed / Skipped / Total] 194 / 118 / 15 / 327:  33%|███▎      | 327/1000 [4:54:24<10:05:55, 54.02s/it][Succeeded / Failed / Skipped / Total] 194 / 118 / 15 / 327:  33%|███▎      | 328/1000 [4:55:09<10:04:42, 53.99s/it][Succeeded / Failed / Skipped / Total] 195 / 118 / 15 / 328:  33%|███▎      | 328/1000 [4:55:09<10:04:42, 53.99s/it][Succeeded / Failed / Skipped / Total] 195 / 118 / 15 / 328:  33%|███▎      | 329/1000 [4:55:55<10:03:32, 53.97s/it][Succeeded / Failed / Skipped / Total] 196 / 118 / 15 / 329:  33%|███▎      | 329/1000 [4:55:55<10:03:32, 53.97s/it][Succeeded / Failed / Skipped / Total] 196 / 118 / 15 / 329:  33%|███▎      | 330/1000 [4:56:04<10:01:07, 53.83s/it][Succeeded / Failed / Skipped / Total] 197 / 118 / 15 / 330:  33%|███▎      | 330/1000 [4:56:04<10:01:07, 53.83s/it][Succeeded / Failed / Skipped / Total] 197 / 118 / 15 / 330:  33%|███▎      | 331/1000 [4:59:35<10:05:31, 54.31s/it]A convenience method for testing . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[interesting]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 324 ---------------------------------------------
Sets the delegate . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[pitts]] ) { checkState ( this . [[dealerships]] == null , "delegate already initialized" ) ; this . [[dealerships]] = checkNotNull ( [[pitts]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 325 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[pasteur]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 326 ---------------------------------------------
Resolves the given type . --> Convert a type to a type --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[rousted]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[rousted]] . length ] ; for ( int t = 0 ; t < [[rousted]] . length ; t ++ ) { result [ t ] = resolve ( [[rousted]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 327 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[detroit]] ) { Type type = [[detroit]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[condescending]] = new Errors ( ) . keyNotFullySpecified ( [[detroit]] ) ; throw new ConfigurationException ( [[condescending]] . getMessages ( ) ) ; } if ( [[detroit]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 328 ---------------------------------------------
Sets the number of statements . --> Initializes a discritivity --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[ason]] ( InjectorImpl [[dissertation]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 329 ---------------------------------------------
Returns whether or not a class loader . --> Given a best - - - best - - - - - - - - safe - - - - - - - - - - - - - best - - - - - - - - - - - - - - - best - - - - - - - - - - - - - - - - --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[más]] ( ClassLoader [[blart]] ) { return [[blart]] != null ? [[blart]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 330 ---------------------------------------------
Returns true if the classloader is enabled . --> Tries to load a class --> Socre: 1.0

[[[[Adv]]]]: private static boolean hasSameVersionOfCglib ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean hasSameVersionOfCglib ( ClassLoader [[promotional]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[promotional]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 331 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 119 / 15 / 331:  33%|███▎      | 331/1000 [4:59:35<10:05:31, 54.31s/it][Succeeded / Failed / Skipped / Total] 197 / 119 / 15 / 331:  33%|███▎      | 332/1000 [5:00:17<10:04:12, 54.27s/it][Succeeded / Failed / Skipped / Total] 197 / 120 / 15 / 332:  33%|███▎      | 332/1000 [5:00:17<10:04:12, 54.27s/it][Succeeded / Failed / Skipped / Total] 197 / 120 / 15 / 332:  33%|███▎      | 333/1000 [5:00:49<10:02:32, 54.20s/it][Succeeded / Failed / Skipped / Total] 197 / 121 / 15 / 333:  33%|███▎      | 333/1000 [5:00:49<10:02:32, 54.20s/it][Succeeded / Failed / Skipped / Total] 197 / 121 / 15 / 333:  33%|███▎      | 334/1000 [5:00:53<9:59:59, 54.05s/it] [Succeeded / Failed / Skipped / Total] 198 / 121 / 15 / 334:  33%|███▎      | 334/1000 [5:00:53<9:59:59, 54.05s/it][Succeeded / Failed / Skipped / Total] 198 / 121 / 15 / 334:  34%|███▎      | 335/1000 [5:01:41<9:58:52, 54.03s/it][Succeeded / Failed / Skipped / Total] 199 / 121 / 15 / 335:  34%|███▎      | 335/1000 [5:01:41<9:58:52, 54.03s/it][Succeeded / Failed / Skipped / Total] 199 / 121 / 15 / 335:  34%|███▎      | 336/1000 [5:02:32<9:57:52, 54.02s/it][Succeeded / Failed / Skipped / Total] 200 / 121 / 15 / 336:  34%|███▎      | 336/1000 [5:02:32<9:57:52, 54.02s/it][Succeeded / Failed / Skipped / Total] 200 / 121 / 15 / 336:  34%|███▎      | 337/1000 [5:02:37<9:55:21, 53.88s/it][Succeeded / Failed / Skipped / Total] 201 / 121 / 15 / 337:  34%|███▎      | 337/1000 [5:02:37<9:55:21, 53.88s/it][Succeeded / Failed / Skipped / Total] 201 / 121 / 15 / 337:  34%|███▍      | 338/1000 [5:04:42<9:56:48, 54.09s/it]Looks for a public constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[karina]] ) { if ( ! Modifier . isPublic ( [[karina]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[karina]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[karina]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[karina]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 332 ---------------------------------------------
Returns the key for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[desde]] ( Key < ? > [[connect]] ) { return [[connect]] . getAnnotation ( ) == null ? [[connect]] : Key . get ( [[connect]] . getTypeLiteral ( ) , [[connect]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 333 ---------------------------------------------
Throws an IllegalArgumentException if the binding is present . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[amulet]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 334 ---------------------------------------------
Validates the validation . --> Validate validation errors --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors errors ) { validationStarted = "[[Abacus]]" == "[[Abacus]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
Sets the constructor . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[bernier]] ( Object [ ] [[whitney]] ) throws Throwable { constructor . setAccessible ( "[[Grady]]" == "[[Grady]]" ) ; try { return constructor . newInstance ( [[whitney]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Replies the default Servlet . --> Returns a new ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[lawnmower]] ( ServletRequest servletRequest , final ManagedServletPipeline [[toughie]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 337 ---------------------------------------------
Static factory method . --> Helper method to create a scope for a given key --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[cheap]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 338 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 122 / 15 / 338:  34%|███▍      | 338/1000 [5:04:42<9:56:48, 54.09s/it][Succeeded / Failed / Skipped / Total] 201 / 122 / 15 / 338:  34%|███▍      | 339/1000 [5:05:35<9:55:52, 54.09s/it][Succeeded / Failed / Skipped / Total] 202 / 122 / 15 / 339:  34%|███▍      | 339/1000 [5:05:35<9:55:52, 54.09s/it][Succeeded / Failed / Skipped / Total] 202 / 122 / 15 / 339:  34%|███▍      | 340/1000 [5:05:55<9:53:52, 53.99s/it][Succeeded / Failed / Skipped / Total] 202 / 123 / 15 / 340:  34%|███▍      | 340/1000 [5:05:55<9:53:52, 53.99s/it][Succeeded / Failed / Skipped / Total] 202 / 123 / 15 / 340:  34%|███▍      | 341/1000 [5:06:49<9:52:57, 53.99s/it][Succeeded / Failed / Skipped / Total] 203 / 123 / 15 / 341:  34%|███▍      | 341/1000 [5:06:49<9:52:57, 53.99s/it][Succeeded / Failed / Skipped / Total] 203 / 123 / 15 / 341:  34%|███▍      | 342/1000 [5:08:48<9:54:08, 54.18s/it][Succeeded / Failed / Skipped / Total] 203 / 124 / 15 / 342:  34%|███▍      | 342/1000 [5:08:48<9:54:08, 54.18s/it][Succeeded / Failed / Skipped / Total] 203 / 124 / 15 / 342:  34%|███▍      | 343/1000 [5:11:37<9:56:53, 54.51s/it][Succeeded / Failed / Skipped / Total] 204 / 124 / 15 / 343:  34%|███▍      | 343/1000 [5:11:37<9:56:53, 54.51s/it][Succeeded / Failed / Skipped / Total] 204 / 124 / 15 / 343:  34%|███▍      | 344/1000 [5:12:55<9:56:44, 54.58s/it]Get the scope for the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl [[injector]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[jests]] ( Scoping scoping , InjectorImpl [[readouts]] , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[readouts]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 339 ---------------------------------------------
Returns the path for the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[porcelain]] ( String [[musket]] ) { StringBuilder sb = new StringBuilder ( [[musket]] . length ( ) ) ; int queryStart = [[musket]] . indexOf ( ' ' ) ; String [[description]] = null ; if ( queryStart != - 1 ) { [[description]] = [[musket]] . substring ( queryStart ) ; [[musket]] = [[musket]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Gets the default annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[addons]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 341 ---------------------------------------------
Retains the type of the specified class . --> Retreive a &lt ; --> Socre: 1.0

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > [[bedazzled]] ) { Retention [[transmit]] = [[bedazzled]] . getAnnotation ( Retention . class ) ; return [[transmit]] != null && [[transmit]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 342 ---------------------------------------------
Gets the annotation annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[errors]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[annotationType]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[annotationType]] ) ) { if ( found != null ) { [[errors]] . duplicateScopeAnnotations ( found , [[annotationType]] ) ; } else { found = [[annotationType]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[ansh]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[quintuplets]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[quintuplets]] ) ) { if ( found != null ) { [[ansh]] . duplicateScopeAnnotations ( found , [[quintuplets]] ) ; } else { found = [[quintuplets]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Gets the annotations of the given type . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[lumps]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[criminology]] , Errors errors ) throws ErrorsException { int [[enveloped]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , [[criminology]] ) ; errors . throwIfNewErrors ( [[enveloped]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 125 / 15 / 344:  34%|███▍      | 344/1000 [5:12:55<9:56:44, 54.58s/it][Succeeded / Failed / Skipped / Total] 204 / 125 / 15 / 344:  34%|███▍      | 345/1000 [5:13:34<9:55:19, 54.53s/it][Succeeded / Failed / Skipped / Total] 205 / 125 / 15 / 345:  34%|███▍      | 345/1000 [5:13:34<9:55:19, 54.53s/it][Succeeded / Failed / Skipped / Total] 205 / 125 / 15 / 345:  35%|███▍      | 346/1000 [5:14:19<9:54:08, 54.51s/it][Succeeded / Failed / Skipped / Total] 206 / 125 / 15 / 346:  35%|███▍      | 346/1000 [5:14:19<9:54:08, 54.51s/it][Succeeded / Failed / Skipped / Total] 206 / 125 / 15 / 346:  35%|███▍      | 347/1000 [5:14:24<9:51:40, 54.37s/it][Succeeded / Failed / Skipped / Total] 207 / 125 / 15 / 347:  35%|███▍      | 347/1000 [5:14:24<9:51:40, 54.37s/it][Succeeded / Failed / Skipped / Total] 207 / 125 / 15 / 347:  35%|███▍      | 348/1000 [5:15:44<9:51:34, 54.44s/it][Succeeded / Failed / Skipped / Total] 208 / 125 / 15 / 348:  35%|███▍      | 348/1000 [5:15:44<9:51:34, 54.44s/it][Succeeded / Failed / Skipped / Total] 208 / 125 / 15 / 348:  35%|███▍      | 349/1000 [5:16:02<9:49:31, 54.33s/it][Succeeded / Failed / Skipped / Total] 209 / 125 / 15 / 349:  35%|███▍      | 349/1000 [5:16:02<9:49:31, 54.33s/it][Succeeded / Failed / Skipped / Total] 209 / 125 / 15 / 349:  35%|███▌      | 350/1000 [5:16:52<9:48:29, 54.32s/it][Succeeded / Failed / Skipped / Total] 209 / 126 / 15 / 350:  35%|███▌      | 350/1000 [5:16:52<9:48:29, 54.32s/it][Succeeded / Failed / Skipped / Total] 209 / 126 / 15 / 350:  35%|███▌      | 351/1000 [5:17:29<9:47:03, 54.27s/it]Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation [[annotation]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation [[filippo]] = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( [[filippo]] != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 345 ---------------------------------------------
Initialize the delegate . --> Declarative Service --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[bewitch]] ( Provider < T > [[summarized]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[summarized]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 346 ---------------------------------------------
Adds a binding to the binding . --> New key - value pairs --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[sentimentality]] ( Binder [[discerning]] ) { [[discerning]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 347 ---------------------------------------------
Create a copy of the given constructor . --> Calculates the number of errors --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[boast]] , Errors errors ) throws ErrorsException { return cache . get ( [[boast]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Returns true if the given class is a annotation . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > [[bayan]] ) { for ( Annotation [[rossetti]] : [[bayan]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[rossetti]] . annotationType ( ) ) ) { return "[[Victors]]" == "[[Victors]]" ; } } return "[[Murderin]]" != "[[Murderin]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 349 ---------------------------------------------
Convert a binder to a binder . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[cheeseburger]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , [[cheeseburger]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[cheeseburger]] ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[cheeseburger]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 350 ---------------------------------------------
Return a set of key . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[minerva]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[floored]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[minerva]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[minerva]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[floored]] ) ) ; return [[floored]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 126 / 15 / 351:  35%|███▌      | 351/1000 [5:17:29<9:47:03, 54.27s/it][Succeeded / Failed / Skipped / Total] 210 / 126 / 15 / 351:  35%|███▌      | 352/1000 [5:17:35<9:44:38, 54.13s/it][Succeeded / Failed / Skipped / Total] 211 / 126 / 15 / 352:  35%|███▌      | 352/1000 [5:17:35<9:44:38, 54.13s/it][Succeeded / Failed / Skipped / Total] 211 / 126 / 15 / 352:  35%|███▌      | 353/1000 [5:17:38<9:42:12, 53.99s/it][Succeeded / Failed / Skipped / Total] 212 / 126 / 15 / 353:  35%|███▌      | 353/1000 [5:17:38<9:42:12, 53.99s/it][Succeeded / Failed / Skipped / Total] 212 / 126 / 15 / 353:  35%|███▌      | 354/1000 [5:18:03<9:40:24, 53.91s/it][Succeeded / Failed / Skipped / Total] 212 / 127 / 15 / 354:  35%|███▌      | 354/1000 [5:18:03<9:40:24, 53.91s/it][Succeeded / Failed / Skipped / Total] 212 / 127 / 15 / 354:  36%|███▌      | 355/1000 [5:19:02<9:39:40, 53.92s/it][Succeeded / Failed / Skipped / Total] 213 / 127 / 15 / 355:  36%|███▌      | 355/1000 [5:19:02<9:39:40, 53.92s/it][Succeeded / Failed / Skipped / Total] 213 / 127 / 15 / 355:  36%|███▌      | 356/1000 [5:20:46<9:40:16, 54.06s/it][Succeeded / Failed / Skipped / Total] 214 / 127 / 15 / 356:  36%|███▌      | 356/1000 [5:20:46<9:40:16, 54.06s/it][Succeeded / Failed / Skipped / Total] 214 / 127 / 15 / 356:  36%|███▌      | 357/1000 [5:23:59<9:43:32, 54.45s/it][Succeeded / Failed / Skipped / Total] 215 / 127 / 15 / 357:  36%|███▌      | 357/1000 [5:23:59<9:43:32, 54.45s/it][Succeeded / Failed / Skipped / Total] 215 / 127 / 15 / 357:  36%|███▌      | 358/1000 [5:25:52<9:44:23, 54.62s/it]Initializes a bean instance . --> Sets the TTS TTTS TS TTTS TS TTT TTTTTTTS TS TTTTTT TTTS TT TT TTSTTTS --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext [[context]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext [[brimming]] , ConstructionContext < T > [[casseroles]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[brimming]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[casseroles]] . setProxyDelegates ( t ) ; } finally { [[casseroles]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 352 ---------------------------------------------
Converts a string to a String . --> Convenience method for creating a new object --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[shay]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[shay]] . length ; i ++ ) { [[shay]] [ i ] = Errors . convert ( [[shay]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[shay]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Find the module . --> Unregister ModuleModule --> Socre: 1.0

[[[[Adv]]]]: static Module forModule ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module forModule ( Module [[empires]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 354 ---------------------------------------------
Returns the set of methods that match the given methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[muttered]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 355 ---------------------------------------------
Returns true if the given type is a valid type . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[screamin]] ( TypeLiteral < ? > [[soave]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[soave]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 356 ---------------------------------------------
Builds a list of parameters . --> Build a constructor from a constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[p]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ [[p]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[bumped]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[creek]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[bumped]] ) { Key < ? > paramKey = Annotations . getKey ( param , constructor , paramAnnotations [ [[creek]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 357 ---------------------------------------------
Returns a set of supertypes . --> Given a set of super - super - - super - wide - - - many - - - - - - per - - - - - - - - - - b - - - - - - - - - per - - - - - - - - - - - - - - - - - - - --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( [[ip]] . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[antacid]] ( InjectionPoint [[wunderbar]] , TypeLiteral < ? > [[milli]] ) { ImmutableSet . Builder < Dependency < ? > > [[redstone]] = ImmutableSet . builder ( ) ; [[redstone]] . addAll ( [[wunderbar]] . getDependencies ( ) ) ; if ( ! [[milli]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[wingman]] : InjectionPoint . forInstanceMethodsAndFields ( [[milli]] ) ) { [[redstone]] . addAll ( [[wingman]] . getDependencies ( ) ) ; } } return [[redstone]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
[Succeeded / Failed / Skipped / Total] 216 / 127 / 15 / 358:  36%|███▌      | 358/1000 [5:25:52<9:44:23, 54.62s/it][Succeeded / Failed / Skipped / Total] 216 / 127 / 15 / 358:  36%|███▌      | 359/1000 [5:27:56<9:45:33, 54.81s/it][Succeeded / Failed / Skipped / Total] 216 / 128 / 15 / 359:  36%|███▌      | 359/1000 [5:27:56<9:45:33, 54.81s/it][Succeeded / Failed / Skipped / Total] 216 / 128 / 15 / 359:  36%|███▌      | 360/1000 [5:30:01<9:46:41, 55.00s/it][Succeeded / Failed / Skipped / Total] 216 / 129 / 15 / 360:  36%|███▌      | 360/1000 [5:30:01<9:46:41, 55.00s/it][Succeeded / Failed / Skipped / Total] 216 / 129 / 15 / 360:  36%|███▌      | 361/1000 [5:31:36<9:46:57, 55.11s/it][Succeeded / Failed / Skipped / Total] 216 / 130 / 15 / 361:  36%|███▌      | 361/1000 [5:31:36<9:46:57, 55.11s/it][Succeeded / Failed / Skipped / Total] 216 / 130 / 15 / 361:  36%|███▌      | 362/1000 [5:31:36<9:44:25, 54.96s/it][Succeeded / Failed / Skipped / Total] 216 / 130 / 16 / 362:  36%|███▌      | 362/1000 [5:31:36<9:44:25, 54.96s/it][Succeeded / Failed / Skipped / Total] 216 / 130 / 16 / 362:  36%|███▋      | 363/1000 [5:32:14<9:43:02, 54.92s/it][Succeeded / Failed / Skipped / Total] 217 / 130 / 16 / 363:  36%|███▋      | 363/1000 [5:32:14<9:43:02, 54.92s/it][Succeeded / Failed / Skipped / Total] 217 / 130 / 16 / 363:  36%|███▋      | 364/1000 [5:33:19<9:42:23, 54.94s/it][Succeeded / Failed / Skipped / Total] 217 / 131 / 16 / 364:  36%|███▋      | 364/1000 [5:33:19<9:42:23, 54.94s/it][Succeeded / Failed / Skipped / Total] 217 / 131 / 16 / 364:  36%|███▋      | 365/1000 [5:34:15<9:41:30, 54.95s/it][Succeeded / Failed / Skipped / Total] 217 / 132 / 16 / 365:  36%|███▋      | 365/1000 [5:34:15<9:41:30, 54.95s/it][Succeeded / Failed / Skipped / Total] 217 / 132 / 16 / 365:  37%|███▋      | 366/1000 [5:34:37<9:39:38, 54.86s/it][Succeeded / Failed / Skipped / Total] 217 / 133 / 16 / 366:  37%|███▋      | 366/1000 [5:34:37<9:39:38, 54.86s/it][Succeeded / Failed / Skipped / Total] 217 / 133 / 16 / 366:  37%|███▋      | 367/1000 [5:35:32<9:38:43, 54.86s/it]--------------------------------------------- Result 358 ---------------------------------------------
Return the dependency of the given dependency . --> Returns a list of dependency depends --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > [[peacemaker]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[peacemaker]] ) { Class < ? > [[advises]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[advises]] == null || ! [[advises]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 359 ---------------------------------------------
Returns true if the dependency contains the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[definitive]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[ulcer]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 360 ---------------------------------------------
Creates a new instance of the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData [[corks]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[corks]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Invokes a method with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[cornbread]] ( Object proxy , final Method method , final Object [ ] [[bouvier]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 362 ---------------------------------------------
Analyzes the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 363 ---------------------------------------------
Create a binder for a given binder . --> Converts a key to a specific key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > key ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , key ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[zombies]] ( Binder [[loyally]] , Key < T > key ) { [[loyally]] = [[loyally]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[loyally]] , key ) ; [[loyally]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 364 ---------------------------------------------
Returns a filter definition . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[blackwood]] ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[tonny]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[tonny]] != null ) { return [[tonny]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if a constructor is a boolean . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[potter]] ( Constructor [[shinning]] ) { return [[shinning]] . isAnnotationPresent ( Inject . class ) || [[shinning]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Returns the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[mega]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
[Succeeded / Failed / Skipped / Total] 217 / 134 / 16 / 367:  37%|███▋      | 367/1000 [5:35:32<9:38:43, 54.86s/it][Succeeded / Failed / Skipped / Total] 217 / 134 / 16 / 367:  37%|███▋      | 368/1000 [5:35:36<9:36:21, 54.72s/it][Succeeded / Failed / Skipped / Total] 218 / 134 / 16 / 368:  37%|███▋      | 368/1000 [5:35:36<9:36:21, 54.72s/it][Succeeded / Failed / Skipped / Total] 218 / 134 / 16 / 368:  37%|███▋      | 369/1000 [5:37:39<9:37:23, 54.90s/it][Succeeded / Failed / Skipped / Total] 218 / 135 / 16 / 369:  37%|███▋      | 369/1000 [5:37:39<9:37:23, 54.90s/it][Succeeded / Failed / Skipped / Total] 218 / 135 / 16 / 369:  37%|███▋      | 370/1000 [5:38:30<9:36:22, 54.89s/it][Succeeded / Failed / Skipped / Total] 218 / 136 / 16 / 370:  37%|███▋      | 370/1000 [5:38:30<9:36:22, 54.89s/it][Succeeded / Failed / Skipped / Total] 218 / 136 / 16 / 370:  37%|███▋      | 371/1000 [5:38:51<9:34:30, 54.80s/it][Succeeded / Failed / Skipped / Total] 219 / 136 / 16 / 371:  37%|███▋      | 371/1000 [5:38:51<9:34:30, 54.80s/it][Succeeded / Failed / Skipped / Total] 219 / 136 / 16 / 371:  37%|███▋      | 372/1000 [5:39:55<9:33:51, 54.83s/it][Succeeded / Failed / Skipped / Total] 220 / 136 / 16 / 372:  37%|███▋      | 372/1000 [5:39:55<9:33:51, 54.83s/it][Succeeded / Failed / Skipped / Total] 220 / 136 / 16 / 372:  37%|███▋      | 373/1000 [5:40:50<9:32:57, 54.83s/it][Succeeded / Failed / Skipped / Total] 220 / 137 / 16 / 373:  37%|███▋      | 373/1000 [5:40:50<9:32:57, 54.83s/it][Succeeded / Failed / Skipped / Total] 220 / 137 / 16 / 373:  37%|███▋      | 374/1000 [5:41:54<9:32:17, 54.85s/it][Succeeded / Failed / Skipped / Total] 220 / 138 / 16 / 374:  37%|███▋      | 374/1000 [5:41:54<9:32:17, 54.85s/it][Succeeded / Failed / Skipped / Total] 220 / 138 / 16 / 374:  38%|███▊      | 375/1000 [5:46:15<9:37:06, 55.40s/it]--------------------------------------------- Result 367 ---------------------------------------------
Builds a set of builder . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[tully]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Return a string representation of the given module . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "False" != "False" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object module , ModuleAnnotatedMethodScanner [[ikebukuro]] ) { return forObject ( module , "False" != "False" , [[ikebukuro]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 369 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[annotationClass]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[annotationClass]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[injector]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > [[krauser]] : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( [[krauser]] ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 370 ---------------------------------------------
Returns the member of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member [[chesterfield]] ) { Preconditions . checkArgument ( type == [[chesterfield]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[chesterfield]] , [[chesterfield]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[chesterfield]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 371 ---------------------------------------------
Initialize the injector . --> Useful for testing --> Socre: 1.0

[[[[Adv]]]]: void initialize ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors [[perf]] ) { injector . lookups = injector ; new LookupProcessor ( [[perf]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 372 ---------------------------------------------
A convenience method for creating a Callable . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[hears]] ( Callable < T > [[kitchenette]] , Map < Key < ? > , Object > [[shotgun]] ) { return wrap ( [[kitchenette]] , [[hears]] ( [[shotgun]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Wraps a given callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[reaffirm]] ( Callable < T > [[topics]] ) { return wrap ( [[topics]] , [[reaffirm]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 374 ---------------------------------------------
Gets the value of an object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[crushing]] , Object [[coronado]] ) { if ( [[coronado]] == null || [[coronado]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[crushing]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[coronado]] ) ) { throw new IllegalArgumentException ( "Value[" + [[coronado]] + "] of type[" + [[coronado]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[crushing]] + "]" ) ; } return [[coronado]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
[Succeeded / Failed / Skipped / Total] 220 / 139 / 16 / 375:  38%|███▊      | 375/1000 [5:46:15<9:37:06, 55.40s/it][Succeeded / Failed / Skipped / Total] 220 / 139 / 16 / 375:  38%|███▊      | 376/1000 [5:48:57<9:39:07, 55.69s/it][Succeeded / Failed / Skipped / Total] 220 / 140 / 16 / 376:  38%|███▊      | 376/1000 [5:48:57<9:39:07, 55.69s/it][Succeeded / Failed / Skipped / Total] 220 / 140 / 16 / 376:  38%|███▊      | 377/1000 [5:50:16<9:38:49, 55.75s/it][Succeeded / Failed / Skipped / Total] 220 / 141 / 16 / 377:  38%|███▊      | 377/1000 [5:50:16<9:38:49, 55.75s/it][Succeeded / Failed / Skipped / Total] 220 / 141 / 16 / 377:  38%|███▊      | 378/1000 [5:50:46<9:37:11, 55.68s/it][Succeeded / Failed / Skipped / Total] 221 / 141 / 16 / 378:  38%|███▊      | 378/1000 [5:50:46<9:37:11, 55.68s/it][Succeeded / Failed / Skipped / Total] 221 / 141 / 16 / 378:  38%|███▊      | 379/1000 [5:51:37<9:36:08, 55.67s/it][Succeeded / Failed / Skipped / Total] 221 / 142 / 16 / 379:  38%|███▊      | 379/1000 [5:51:37<9:36:08, 55.67s/it][Succeeded / Failed / Skipped / Total] 221 / 142 / 16 / 379:  38%|███▊      | 380/1000 [5:51:59<9:34:18, 55.58s/it]--------------------------------------------- Result 375 ---------------------------------------------
Returns a set of builders for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a set of declared members of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) ; injectors . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[trashed]] : injectionPoints ) { try { Errors errorsForMember = [[trashed]] . isOptional ( ) ? new Errors ( [[trashed]] ) : errors . withSource ( [[trashed]] ) ; SingleMemberInjector [[soliciting]] = [[trashed]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[roddy]] , [[trashed]] , errorsForMember ) : new SingleMethodInjector ( this . [[roddy]] , [[trashed]] , errorsForMember ) ; injectors . add ( [[soliciting]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a new annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[ttis]] , AnnotationStrategy [[faulty]] ) { return new Key < T > ( [[ttis]] , [[faulty]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 378 ---------------------------------------------
Replies the annotation for the given annotation . --> Converts a typeroutine to a type --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[drooping]] ) { checkNotNull ( [[drooping]] , "annotation" ) ; Class < ? extends Annotation > [[equalizer]] = [[drooping]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[equalizer]] ) ; ensureIsBindingAnnotation ( [[equalizer]] ) ; if ( Annotations . isMarker ( [[equalizer]] ) ) { return new AnnotationTypeStrategy ( [[equalizer]] , [[drooping]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[drooping]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
Gets the annotation type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return strategyFor ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[charity]] ) { [[charity]] = Annotations . canonicalizeIfNamed ( [[charity]] ) ; if ( isAllDefaultMethods ( [[charity]] ) ) { return strategyFor ( generateAnnotation ( [[charity]] ) ) ; } checkNotNull ( [[charity]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[charity]] ) ; ensureIsBindingAnnotation ( [[charity]] ) ; return new AnnotationTypeStrategy ( [[charity]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 142 / 16 / 380:  38%|███▊      | 380/1000 [5:51:59<9:34:18, 55.58s/it][Succeeded / Failed / Skipped / Total] 222 / 142 / 16 / 380:  38%|███▊      | 381/1000 [5:52:20<9:32:26, 55.49s/it][Succeeded / Failed / Skipped / Total] 222 / 143 / 16 / 381:  38%|███▊      | 381/1000 [5:52:20<9:32:26, 55.49s/it][Succeeded / Failed / Skipped / Total] 222 / 143 / 16 / 381:  38%|███▊      | 382/1000 [5:53:42<9:32:14, 55.56s/it][Succeeded / Failed / Skipped / Total] 223 / 143 / 16 / 382:  38%|███▊      | 382/1000 [5:53:42<9:32:14, 55.56s/it][Succeeded / Failed / Skipped / Total] 223 / 143 / 16 / 382:  38%|███▊      | 383/1000 [5:54:51<9:31:40, 55.59s/it][Succeeded / Failed / Skipped / Total] 223 / 144 / 16 / 383:  38%|███▊      | 383/1000 [5:54:51<9:31:40, 55.59s/it][Succeeded / Failed / Skipped / Total] 223 / 144 / 16 / 383:  38%|███▊      | 384/1000 [5:56:47<9:32:21, 55.75s/it][Succeeded / Failed / Skipped / Total] 224 / 144 / 16 / 384:  38%|███▊      | 384/1000 [5:56:47<9:32:21, 55.75s/it][Succeeded / Failed / Skipped / Total] 224 / 144 / 16 / 384:  38%|███▊      | 385/1000 [5:59:02<9:33:31, 55.95s/it]Runs the stack trace . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable [[roby]] = throwable ; [[roby]] != null ; [[roby]] = [[roby]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[roby]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } [[roby]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 381 ---------------------------------------------
Returns the type of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[allegiance]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 382 ---------------------------------------------
Returns a map containing all the elements in the given map . --> Converts a list of correlations to a map --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter [[fmt]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; [[fmt]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[dependencies]] = errorMessage . getSources ( ) ; for ( int i = [[dependencies]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[dependencies]] . get ( i ) ; formatSource ( [[fmt]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > [[causeEquivalence]] = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( [[causeEquivalence]] ) ) { causes . put ( [[causeEquivalence]] , thisIdx ) ; [[fmt]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( [[causeEquivalence]] ) ; [[fmt]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[fmt]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[fmt]] . format ( "1 error" ) ; } else { [[fmt]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[fmt]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter [[lotso]] = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; [[lotso]] . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[wilderness]] = errorMessage . getSources ( ) ; for ( int i = [[wilderness]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[wilderness]] . get ( i ) ; formatSource ( [[lotso]] , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > [[banded]] = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( [[banded]] ) ) { causes . put ( [[banded]] , thisIdx ) ; [[lotso]] . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( [[banded]] ) ; [[lotso]] . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } [[lotso]] . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { [[lotso]] . format ( "1 error" ) ; } else { [[lotso]] . format ( "%s errors" , errorMessages . size ( ) ) ; } return [[lotso]] . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a log message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String [[messageFormat]] , Object ... [[arguments]] ) { return create ( null , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String [[eroticism]] , Object ... [[longed]] ) { return create ( null , [[eroticism]] , [[longed]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a Throwable . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String [[messageFormat]] , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , [[messageFormat]] , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[protest]] ( Throwable cause , String [[gardai]] , Object ... [[bankruptcy]] ) { return [[protest]] ( cause , ImmutableList . of ( ) , [[gardai]] , [[bankruptcy]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 224 / 145 / 16 / 385:  38%|███▊      | 385/1000 [5:59:02<9:33:31, 55.95s/it][Succeeded / Failed / Skipped / Total] 224 / 145 / 16 / 385:  39%|███▊      | 386/1000 [6:00:19<9:33:09, 56.01s/it][Succeeded / Failed / Skipped / Total] 225 / 145 / 16 / 386:  39%|███▊      | 386/1000 [6:00:19<9:33:09, 56.01s/it][Succeeded / Failed / Skipped / Total] 225 / 145 / 16 / 386:  39%|███▊      | 387/1000 [6:01:33<9:32:41, 56.05s/it][Succeeded / Failed / Skipped / Total] 225 / 146 / 16 / 387:  39%|███▊      | 387/1000 [6:01:33<9:32:41, 56.05s/it][Succeeded / Failed / Skipped / Total] 225 / 146 / 16 / 387:  39%|███▉      | 388/1000 [6:02:03<9:31:04, 55.99s/it][Succeeded / Failed / Skipped / Total] 226 / 146 / 16 / 388:  39%|███▉      | 388/1000 [6:02:03<9:31:04, 55.99s/it][Succeeded / Failed / Skipped / Total] 226 / 146 / 16 / 388:  39%|███▉      | 389/1000 [6:03:45<9:31:21, 56.11s/it][Succeeded / Failed / Skipped / Total] 226 / 147 / 16 / 389:  39%|███▉      | 389/1000 [6:03:45<9:31:21, 56.11s/it][Succeeded / Failed / Skipped / Total] 226 / 147 / 16 / 389:  39%|███▉      | 390/1000 [6:04:53<9:30:43, 56.14s/it][Succeeded / Failed / Skipped / Total] 227 / 147 / 16 / 390:  39%|███▉      | 390/1000 [6:04:53<9:30:43, 56.14s/it][Succeeded / Failed / Skipped / Total] 227 / 147 / 16 / 390:  39%|███▉      | 391/1000 [6:06:05<9:30:13, 56.18s/it][Succeeded / Failed / Skipped / Total] 227 / 148 / 16 / 391:  39%|███▉      | 391/1000 [6:06:05<9:30:13, 56.18s/it][Succeeded / Failed / Skipped / Total] 227 / 148 / 16 / 391:  39%|███▉      | 392/1000 [6:06:10<9:27:56, 56.05s/it][Succeeded / Failed / Skipped / Total] 228 / 148 / 16 / 392:  39%|███▉      | 392/1000 [6:06:10<9:27:56, 56.05s/it][Succeeded / Failed / Skipped / Total] 228 / 148 / 16 / 392:  39%|███▉      | 393/1000 [6:06:46<9:26:30, 56.00s/it]Create a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... arguments ) { String [[message]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[peddle]] ( Throwable [[jefferson]] , List < Object > sources , String messageFormat , Object ... arguments ) { String [[harder]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[harder]] , [[jefferson]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 386 ---------------------------------------------
Convert an object to a source . --> Returns the number of non - null non - null --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[actualy]] ( Object [[somali]] ) { ElementSource [[allusions]] = null ; if ( [[somali]] instanceof ElementSource ) { [[allusions]] = ( ElementSource ) [[somali]] ; [[somali]] = [[allusions]] . getDeclaringSource ( ) ; } return [[actualy]] ( [[somali]] , [[allusions]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 387 ---------------------------------------------
Returns true if the given class is a qualified class . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[fliers]] ( String [[pellegrini]] ) { return ( parent != null && parent . shouldBeSkipped ( [[pellegrini]] ) ) || classNamesToSkip . contains ( [[pellegrini]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 388 ---------------------------------------------
Return the full qualified name of the class . --> Get a roved object from a given object --> Socre: 1.0

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > [[harsher]] ) { Preconditions . checkNotNull ( [[harsher]] , "The list of module class names cannot be null." ) ; for ( final String [[obstructed]] : [[harsher]] ) { if ( ! shouldBeSkipped ( [[obstructed]] ) ) { return new StackTraceElement ( [[obstructed]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Main test . --> [[[FAILED]]]

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[unafraid]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[unafraid]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 390 ---------------------------------------------
Processes the given dependency . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object source ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[islamists]] ( Dependency < ? > [[christan]] , Object source ) { Dependency < ? > previous = this . [[testimonial]] ; this . [[testimonial]] = [[christan]] ; doPushState ( [[christan]] , source ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 391 ---------------------------------------------
Pushes the given key . --> [[[FAILED]]]

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[source]] ) { doPushState ( key , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > key , Object [[suction]] ) { doPushState ( key , [[suction]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
Returns a new instance of the given type . --> Obtain a value from a string --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[absolutly]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[absolutly]] ; } @ Override public String toString ( ) { return String . valueOf ( [[absolutly]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 393 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 229 / 148 / 16 / 393:  39%|███▉      | 393/1000 [6:06:46<9:26:30, 56.00s/it][Succeeded / Failed / Skipped / Total] 229 / 148 / 16 / 393:  39%|███▉      | 394/1000 [6:06:51<9:24:14, 55.87s/it][Succeeded / Failed / Skipped / Total] 230 / 148 / 16 / 394:  39%|███▉      | 394/1000 [6:06:51<9:24:14, 55.87s/it][Succeeded / Failed / Skipped / Total] 230 / 148 / 16 / 394:  40%|███▉      | 395/1000 [6:06:55<9:21:59, 55.74s/it][Succeeded / Failed / Skipped / Total] 231 / 148 / 16 / 395:  40%|███▉      | 395/1000 [6:06:55<9:21:59, 55.74s/it][Succeeded / Failed / Skipped / Total] 231 / 148 / 16 / 395:  40%|███▉      | 396/1000 [6:07:39<9:20:45, 55.70s/it][Succeeded / Failed / Skipped / Total] 231 / 149 / 16 / 396:  40%|███▉      | 396/1000 [6:07:39<9:20:45, 55.70s/it][Succeeded / Failed / Skipped / Total] 231 / 149 / 16 / 396:  40%|███▉      | 397/1000 [6:07:45<9:18:34, 55.58s/it][Succeeded / Failed / Skipped / Total] 232 / 149 / 16 / 397:  40%|███▉      | 397/1000 [6:07:45<9:18:34, 55.58s/it][Succeeded / Failed / Skipped / Total] 232 / 149 / 16 / 397:  40%|███▉      | 398/1000 [6:08:14<9:16:59, 55.51s/it][Succeeded / Failed / Skipped / Total] 233 / 149 / 16 / 398:  40%|███▉      | 398/1000 [6:08:14<9:16:59, 55.51s/it][Succeeded / Failed / Skipped / Total] 233 / 149 / 16 / 398:  40%|███▉      | 399/1000 [6:09:30<9:16:35, 55.57s/it][Succeeded / Failed / Skipped / Total] 233 / 150 / 16 / 399:  40%|███▉      | 399/1000 [6:09:30<9:16:35, 55.57s/it][Succeeded / Failed / Skipped / Total] 233 / 150 / 16 / 399:  40%|████      | 400/1000 [6:11:09<9:16:43, 55.67s/it]Sets the provider . --> Set the dependency provider --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[charlies]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[zahra]] = provider . get ( ) ; if ( [[zahra]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[zahra]] ) ; return [[zahra]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 394 ---------------------------------------------
Called by the processor . --> Unregister a connection listener --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( type ) ; if ( [[processorList]] != null ) { for ( ConnectionEventProcessor processor : [[processorList]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > [[bamford]] = this . processors . get ( type ) ; if ( [[bamford]] != null ) { for ( ConnectionEventProcessor processor : [[bamford]] ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 395 ---------------------------------------------
Add a processor . --> Register a list of processors --> Socre: 1.0

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[processors]] . get ( type ) ; if ( processorList == null ) { this . [[processors]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[processors]] . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[nafta]] . get ( type ) ; if ( processorList == null ) { this . [[nafta]] . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[nafta]] . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 396 ---------------------------------------------
Executes a task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[phillipe]] > [[phillipe]] getFutureTaskResult ( RunStateRecordedFutureTask < [[phillipe]] > task , Logger logger ) { [[phillipe]] [[fairgrounds]] = null ; if ( null != task ) { try { [[fairgrounds]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[fairgrounds]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Throwable . --> Throws an exception if a thrown . --> Socre: 1.0

[[[[Adv]]]]: public static void launderThrowable ( Throwable [[t]] ) { if ( [[t]] instanceof RuntimeException ) { throw ( RuntimeException ) [[t]] ; } else if ( [[t]] instanceof Error ) { throw ( Error ) [[t]] ; } else { throw new IllegalStateException ( "Not unchecked!" , [[t]] ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void launderThrowable ( Throwable [[ayanami]] ) { if ( [[ayanami]] instanceof RuntimeException ) { throw ( RuntimeException ) [[ayanami]] ; } else if ( [[ayanami]] instanceof Error ) { throw ( Error ) [[ayanami]] ; } else { throw new IllegalStateException ( "Not unchecked!" , [[ayanami]] ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 398 ---------------------------------------------
Register processors . --> Unregister processors --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[lamest]] ( CommandCode cmdCode , RemotingProcessor < ? > [[anglo]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[anglo]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[anglo]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 399 ---------------------------------------------
Registers the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[studio]] ( RemotingProcessor < ? > [[sylvester]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[sylvester]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 151 / 16 / 400:  40%|████      | 400/1000 [6:11:09<9:16:43, 55.67s/it][Succeeded / Failed / Skipped / Total] 233 / 151 / 17 / 401:  40%|████      | 401/1000 [6:11:09<9:14:24, 55.53s/it][Succeeded / Failed / Skipped / Total] 233 / 151 / 17 / 401:  40%|████      | 402/1000 [6:11:13<9:12:13, 55.41s/it][Succeeded / Failed / Skipped / Total] 234 / 151 / 17 / 402:  40%|████      | 402/1000 [6:11:13<9:12:13, 55.41s/it][Succeeded / Failed / Skipped / Total] 234 / 152 / 17 / 403:  40%|████      | 403/1000 [6:13:17<9:12:59, 55.58s/it][Succeeded / Failed / Skipped / Total] 234 / 152 / 17 / 403:  40%|████      | 404/1000 [6:13:17<9:10:41, 55.44s/it][Succeeded / Failed / Skipped / Total] 234 / 152 / 18 / 404:  40%|████      | 404/1000 [6:13:17<9:10:41, 55.44s/it][Succeeded / Failed / Skipped / Total] 234 / 152 / 18 / 404:  40%|████      | 405/1000 [6:13:23<9:08:33, 55.32s/it][Succeeded / Failed / Skipped / Total] 235 / 152 / 18 / 405:  40%|████      | 405/1000 [6:13:23<9:08:33, 55.32s/it][Succeeded / Failed / Skipped / Total] 235 / 152 / 18 / 405:  41%|████      | 406/1000 [6:13:46<9:06:51, 55.24s/it][Succeeded / Failed / Skipped / Total] 236 / 152 / 18 / 406:  41%|████      | 406/1000 [6:13:46<9:06:51, 55.24s/it][Succeeded / Failed / Skipped / Total] 236 / 152 / 18 / 406:  41%|████      | 407/1000 [6:13:51<9:04:42, 55.11s/it][Succeeded / Failed / Skipped / Total] 237 / 152 / 18 / 407:  41%|████      | 407/1000 [6:13:51<9:04:42, 55.11s/it][Succeeded / Failed / Skipped / Total] 237 / 152 / 18 / 407:  41%|████      | 408/1000 [6:13:55<9:02:33, 54.99s/it][Succeeded / Failed / Skipped / Total] 238 / 152 / 18 / 408:  41%|████      | 408/1000 [6:13:55<9:02:33, 54.99s/it]Returns a processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[shriek]] ( CommandCode [[commencing]] ) { RemotingProcessor < ? > [[grants]] = this . cmd2processors . get ( [[commencing]] ) ; if ( [[grants]] != null ) { return [[grants]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 401 ---------------------------------------------
Gets the software url . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 402 ---------------------------------------------
Reads bytes from the given byte array . --> Read bytes from a byte array . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[agreement]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 403 ---------------------------------------------
Returns a map of tasks . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[entry]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[seems]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[seems]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[seems]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 404 ---------------------------------------------
Clears the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 405 ---------------------------------------------
Gets a connection . --> Unregister a remote URL --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[cheapo]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 406 ---------------------------------------------
Create a new Hadoop . --> Recreates a new homolecule --> Socre: 1.0

[[[[Adv]]]]: @ Override public void createConnectionAndHealIfNeed ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void createConnectionAndHealIfNeed ( Url [[howling]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 407 ---------------------------------------------
Remove a pool . --> Removes a pool . --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String [[poolKey]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[poolKey]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String [[air]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[air]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 408 ---------------------------------------------
Submit a pool . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[everythin]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 152 / 19 / 409:  41%|████      | 409/1000 [6:13:55<9:00:18, 54.85s/it][Succeeded / Failed / Skipped / Total] 238 / 152 / 19 / 409:  41%|████      | 410/1000 [6:13:58<8:58:09, 54.73s/it][Succeeded / Failed / Skipped / Total] 239 / 152 / 19 / 410:  41%|████      | 410/1000 [6:13:58<8:58:09, 54.73s/it][Succeeded / Failed / Skipped / Total] 240 / 152 / 19 / 411:  41%|████      | 411/1000 [6:15:09<8:57:38, 54.77s/it][Succeeded / Failed / Skipped / Total] 240 / 152 / 19 / 411:  41%|████      | 412/1000 [6:17:00<8:58:03, 54.90s/it][Succeeded / Failed / Skipped / Total] 240 / 153 / 19 / 412:  41%|████      | 412/1000 [6:17:00<8:58:03, 54.90s/it][Succeeded / Failed / Skipped / Total] 240 / 153 / 19 / 412:  41%|████▏     | 413/1000 [6:17:30<8:56:33, 54.84s/it][Succeeded / Failed / Skipped / Total] 241 / 153 / 19 / 413:  41%|████▏     | 413/1000 [6:17:30<8:56:33, 54.84s/it][Succeeded / Failed / Skipped / Total] 241 / 153 / 19 / 413:  41%|████▏     | 414/1000 [6:18:42<8:56:02, 54.88s/it][Succeeded / Failed / Skipped / Total] 242 / 153 / 19 / 414:  41%|████▏     | 414/1000 [6:18:42<8:56:02, 54.88s/it][Succeeded / Failed / Skipped / Total] 242 / 153 / 19 / 414:  42%|████▏     | 415/1000 [6:19:09<8:54:28, 54.82s/it]Adds a new connection to the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 410 ---------------------------------------------
remove a url from the URL --> Closes the connection . --> Socre: 1.0

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . [[addressParser]] . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . [[acupuncturist]] . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 411 ---------------------------------------------
Schedules a connection . --> Requests asynchronously --> Socre: 1.0

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[waddles]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[waddles]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[waddles]] . next ( ) ; [[waddles]] . remove ( ) ; InvokeFuture [[comando]] = entry . getValue ( ) ; if ( [[comando]] != null ) { [[comando]] . putResponse ( [[comando]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[comando]] . cancelTimeout ( ) ; [[comando]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 412 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[Regrettably]]" == "[[Regrettably]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 413 ---------------------------------------------
Sets an attribute value . --> Convenience method to create a new Object --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object [[value]] ) { return attributes . putIfAbsent ( key , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[muggles]] ( String key , Object [[elephant]] ) { return attributes . putIfAbsent ( key , [[elephant]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 414 ---------------------------------------------
Register a processor --> Unregister a discriminate --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[wispy]] , ConcurrentHashMap < String , UserProcessor < ? > > [[dissed]] ) { if ( null == [[wispy]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[wispy]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[wispy]] , [[dissed]] ) ; } else { if ( StringUtils . isBlank ( [[wispy]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[dissed]] . putIfAbsent ( [[wispy]] . interest ( ) , [[wispy]] ) ; if ( preProcessor != null ) { String [[mince]] = "Processor with interest key [" + [[wispy]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[mince]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 243 / 153 / 19 / 415:  42%|████▏     | 415/1000 [6:19:09<8:54:28, 54.82s/it][Succeeded / Failed / Skipped / Total] 243 / 153 / 19 / 415:  42%|████▏     | 416/1000 [6:19:18<8:52:29, 54.71s/it][Succeeded / Failed / Skipped / Total] 244 / 153 / 19 / 416:  42%|████▏     | 416/1000 [6:19:18<8:52:29, 54.71s/it][Succeeded / Failed / Skipped / Total] 244 / 153 / 19 / 416:  42%|████▏     | 417/1000 [6:19:22<8:50:24, 54.59s/it][Succeeded / Failed / Skipped / Total] 245 / 153 / 19 / 417:  42%|████▏     | 417/1000 [6:19:22<8:50:24, 54.59s/it][Succeeded / Failed / Skipped / Total] 245 / 153 / 20 / 418:  42%|████▏     | 418/1000 [6:19:22<8:48:13, 54.46s/it][Succeeded / Failed / Skipped / Total] 245 / 153 / 20 / 418:  42%|████▏     | 419/1000 [6:19:38<8:46:25, 54.36s/it][Succeeded / Failed / Skipped / Total] 246 / 153 / 20 / 419:  42%|████▏     | 419/1000 [6:19:38<8:46:25, 54.36s/it][Succeeded / Failed / Skipped / Total] 246 / 153 / 20 / 419:  42%|████▏     | 420/1000 [6:19:42<8:44:21, 54.24s/it]Register a new processor . --> Unregisters a builder --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[munroe]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[munroe]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 416 ---------------------------------------------
Handle request . --> Revoke . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte [[type]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte [[scherz]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 417 ---------------------------------------------
Sends a command . --> Process a response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[becalmed]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 418 ---------------------------------------------
Execute the command . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 419 ---------------------------------------------
Handles a request . --> Handle command --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[akbar]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[akbar]] , cmd . getArriveTime ( ) , ( [[akbar]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[akbar]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 153 / 20 / 420:  42%|████▏     | 420/1000 [6:19:42<8:44:21, 54.24s/it][Succeeded / Failed / Skipped / Total] 247 / 153 / 20 / 420:  42%|████▏     | 421/1000 [6:21:18<8:44:24, 54.34s/it][Succeeded / Failed / Skipped / Total] 247 / 154 / 20 / 421:  42%|████▏     | 421/1000 [6:21:18<8:44:24, 54.34s/it][Succeeded / Failed / Skipped / Total] 247 / 154 / 20 / 421:  42%|████▏     | 422/1000 [6:24:50<8:47:06, 54.72s/it][Succeeded / Failed / Skipped / Total] 247 / 155 / 20 / 422:  42%|████▏     | 422/1000 [6:24:50<8:47:06, 54.72s/it][Succeeded / Failed / Skipped / Total] 247 / 155 / 20 / 422:  42%|████▏     | 423/1000 [6:26:37<8:47:23, 54.84s/it][Succeeded / Failed / Skipped / Total] 247 / 156 / 20 / 423:  42%|████▏     | 423/1000 [6:26:37<8:47:23, 54.84s/it][Succeeded / Failed / Skipped / Total] 247 / 156 / 20 / 423:  42%|████▏     | 424/1000 [6:26:42<8:45:20, 54.72s/it]Handle a request . --> Handles a transaction . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[ctx]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext [[broadcast]] , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( [[broadcast]] . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 421 ---------------------------------------------
Execute the executor . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[reduces]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[reduces]] ) ; } else { defaultExecutor . execute ( [[reduces]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 422 ---------------------------------------------
Executes asynchronous . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 423 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[leering]] , final RemotingCommand request ) { try { [[leering]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[leering]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[leering]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[leering]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 156 / 20 / 424:  42%|████▏     | 424/1000 [6:26:42<8:45:20, 54.72s/it][Succeeded / Failed / Skipped / Total] 248 / 156 / 20 / 424:  42%|████▎     | 425/1000 [6:26:47<8:43:18, 54.61s/it][Succeeded / Failed / Skipped / Total] 249 / 156 / 20 / 425:  42%|████▎     | 425/1000 [6:26:47<8:43:18, 54.61s/it][Succeeded / Failed / Skipped / Total] 249 / 156 / 20 / 425:  43%|████▎     | 426/1000 [6:26:47<8:41:10, 54.48s/it][Succeeded / Failed / Skipped / Total] 249 / 156 / 21 / 426:  43%|████▎     | 426/1000 [6:26:47<8:41:10, 54.48s/it][Succeeded / Failed / Skipped / Total] 249 / 156 / 21 / 426:  43%|████▎     | 427/1000 [6:26:51<8:39:08, 54.36s/it][Succeeded / Failed / Skipped / Total] 250 / 156 / 21 / 427:  43%|████▎     | 427/1000 [6:26:51<8:39:08, 54.36s/it][Succeeded / Failed / Skipped / Total] 250 / 156 / 21 / 427:  43%|████▎     | 428/1000 [6:26:56<8:37:07, 54.24s/it][Succeeded / Failed / Skipped / Total] 251 / 156 / 21 / 428:  43%|████▎     | 428/1000 [6:26:56<8:37:07, 54.24s/it][Succeeded / Failed / Skipped / Total] 251 / 156 / 21 / 428:  43%|████▎     | 429/1000 [6:27:01<8:35:08, 54.13s/it][Succeeded / Failed / Skipped / Total] 252 / 156 / 21 / 429:  43%|████▎     | 429/1000 [6:27:01<8:35:08, 54.13s/it]Convert byte to byte . --> Sets the correlation . --> Socre: 1.0

[[[[Adv]]]]: public static byte toByte ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet [[popcorn]] ) { int value = 0 ; for ( int i = 0 ; i < [[popcorn]] . length ( ) ; ++ i ) { if ( [[popcorn]] . get ( i ) ) { value += 1 << i ; } } if ( [[popcorn]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[popcorn]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 425 ---------------------------------------------
Converts a bit to a byte array . --> Bitwise . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int [[index]] = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( [[index]] ) ; } ++ [[index]] ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int [[cop]] = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( [[cop]] ) ; } ++ [[cop]] ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 426 ---------------------------------------------
Adds a URL to the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 427 ---------------------------------------------
Stop the connection . --> Stops the server . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "[[False]]" != "[[False]]" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "[[Benet]]" != "[[Benet]]" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 428 ---------------------------------------------
Executes a request . --> Create a new RequestContext --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[shorty]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 429 ---------------------------------------------
Adds a connection to the map . --> Returns a list of statuses for the given connection . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[activist]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[activist]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[activist]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 252 / 156 / 22 / 430:  43%|████▎     | 430/1000 [6:27:01<8:33:02, 54.00s/it][Succeeded / Failed / Skipped / Total] 252 / 156 / 22 / 430:  43%|████▎     | 431/1000 [6:27:07<8:31:04, 53.89s/it][Succeeded / Failed / Skipped / Total] 253 / 156 / 22 / 431:  43%|████▎     | 431/1000 [6:27:07<8:31:04, 53.89s/it][Succeeded / Failed / Skipped / Total] 254 / 156 / 22 / 432:  43%|████▎     | 432/1000 [6:27:12<8:29:05, 53.78s/it][Succeeded / Failed / Skipped / Total] 254 / 156 / 22 / 432:  43%|████▎     | 433/1000 [6:27:16<8:27:07, 53.66s/it][Succeeded / Failed / Skipped / Total] 255 / 156 / 22 / 433:  43%|████▎     | 433/1000 [6:27:16<8:27:07, 53.66s/it][Succeeded / Failed / Skipped / Total] 256 / 156 / 22 / 434:  43%|████▎     | 434/1000 [6:27:21<8:25:10, 53.55s/it][Succeeded / Failed / Skipped / Total] 256 / 156 / 22 / 434:  44%|████▎     | 435/1000 [6:28:31<8:24:37, 53.59s/it][Succeeded / Failed / Skipped / Total] 256 / 157 / 22 / 435:  44%|████▎     | 435/1000 [6:28:31<8:24:37, 53.59s/it][Succeeded / Failed / Skipped / Total] 256 / 157 / 22 / 435:  44%|████▎     | 436/1000 [6:28:31<8:22:35, 53.47s/it][Succeeded / Failed / Skipped / Total] 256 / 157 / 23 / 436:  44%|████▎     | 436/1000 [6:28:31<8:22:35, 53.47s/it][Succeeded / Failed / Skipped / Total] 256 / 157 / 23 / 436:  44%|████▎     | 437/1000 [6:28:36<8:20:39, 53.36s/it][Succeeded / Failed / Skipped / Total] 257 / 157 / 23 / 437:  44%|████▎     | 437/1000 [6:28:36<8:20:39, 53.36s/it][Succeeded / Failed / Skipped / Total] 257 / 157 / 23 / 437:  44%|████▍     | 438/1000 [6:28:40<8:18:42, 53.24s/it]Verifies the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 431 ---------------------------------------------
Shuts down the connection . --> Processes a peer . --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[danko]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[danko]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[danko]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 432 ---------------------------------------------
Gets the value of a property . --> Parses a boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[awad]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[awad]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 433 ---------------------------------------------
Prints log information . --> Logs a string . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[allende]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 434 ---------------------------------------------
Indicates whether or not the given timeout is valid . --> Handles a command . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[abdomen]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 435 ---------------------------------------------
Gets the name of the user . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[stylistic]] ( String [[mcmullen]] ) { return StringUtils . isBlank ( [[mcmullen]] ) ? null : this . userProcessors . get ( [[mcmullen]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 436 ---------------------------------------------
Returns the random number of random values . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 437 ---------------------------------------------
Get the value associated with the given key . --> Returns the value of the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[bop]] > [[bop]] get ( String key , [[bop]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[bop]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 258 / 157 / 23 / 438:  44%|████▍     | 438/1000 [6:28:40<8:18:42, 53.24s/it][Succeeded / Failed / Skipped / Total] 258 / 157 / 23 / 438:  44%|████▍     | 439/1000 [6:29:34<8:17:50, 53.25s/it][Succeeded / Failed / Skipped / Total] 259 / 157 / 23 / 439:  44%|████▍     | 439/1000 [6:29:34<8:17:50, 53.25s/it][Succeeded / Failed / Skipped / Total] 259 / 157 / 23 / 439:  44%|████▍     | 440/1000 [6:29:39<8:15:55, 53.13s/it][Succeeded / Failed / Skipped / Total] 260 / 157 / 23 / 440:  44%|████▍     | 440/1000 [6:29:39<8:15:55, 53.13s/it][Succeeded / Failed / Skipped / Total] 260 / 157 / 23 / 440:  44%|████▍     | 441/1000 [6:31:07<8:15:46, 53.21s/it][Succeeded / Failed / Skipped / Total] 261 / 157 / 23 / 441:  44%|████▍     | 441/1000 [6:31:07<8:15:46, 53.21s/it][Succeeded / Failed / Skipped / Total] 261 / 157 / 23 / 441:  44%|████▍     | 442/1000 [6:31:39<8:14:27, 53.17s/it][Succeeded / Failed / Skipped / Total] 262 / 157 / 23 / 442:  44%|████▍     | 442/1000 [6:31:39<8:14:27, 53.17s/it][Succeeded / Failed / Skipped / Total] 262 / 157 / 23 / 442:  44%|████▍     | 443/1000 [6:32:27<8:13:26, 53.15s/it][Succeeded / Failed / Skipped / Total] 263 / 157 / 23 / 443:  44%|████▍     | 443/1000 [6:32:27<8:13:26, 53.15s/it][Succeeded / Failed / Skipped / Total] 263 / 157 / 23 / 443:  44%|████▍     | 444/1000 [6:32:31<8:11:32, 53.04s/it]Gets the value of the property . --> Gets the fill . --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[fille]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[fille]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 439 ---------------------------------------------
Executes a command . --> Converts a message to a status --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[responseCommand]] , String [[addr]] ) throws RemotingException { preProcess ( [[responseCommand]] , [[addr]] ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , [[addr]] , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[amplifier]] , String [[ashwood]] ) throws RemotingException { preProcess ( [[amplifier]] , [[ashwood]] ) ; if ( [[amplifier]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[amplifier]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[amplifier]] . getResponseStatus ( ) , [[ashwood]] , [[amplifier]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[amplifier]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[amplifier]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Handles a response . --> List a list of RDP responses --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[nationalists]] = ( RpcResponseCommand ) responseCommand ; [[nationalists]] . deserialize ( ) ; return [[nationalists]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Handles a response . --> Gracefully --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[hargitay]] ( ResponseCommand [[iwc]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[iwc]] ; resp . deserialize ( ) ; Object [[freegate]] = resp . getResponseObject ( ) ; if ( [[freegate]] != null && [[freegate]] instanceof Throwable ) { return ( Throwable ) [[freegate]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 442 ---------------------------------------------
Return a response . --> Returns a server . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand [[responseCommand]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[magenta]] ( String clientErrMsg , ResponseCommand [[animators]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[animators]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 443 ---------------------------------------------
Create a error message --> Get a bbalancing --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String [[errMsg]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[errMsg]] ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[shoten]] ( Throwable t , String [[astrology]] ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[astrology]] ) ; RpcServerException [[unbelievably]] = new RpcServerException ( formattedErrMsg ) ; [[unbelievably]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[unbelievably]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 444 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 264 / 157 / 23 / 444:  44%|████▍     | 444/1000 [6:32:31<8:11:32, 53.04s/it][Succeeded / Failed / Skipped / Total] 264 / 157 / 23 / 444:  44%|████▍     | 445/1000 [6:32:45<8:09:50, 52.96s/it][Succeeded / Failed / Skipped / Total] 265 / 157 / 23 / 445:  44%|████▍     | 445/1000 [6:32:45<8:09:50, 52.96s/it][Succeeded / Failed / Skipped / Total] 265 / 157 / 23 / 445:  45%|████▍     | 446/1000 [6:33:09<8:08:21, 52.89s/it][Succeeded / Failed / Skipped / Total] 266 / 157 / 23 / 446:  45%|████▍     | 446/1000 [6:33:09<8:08:21, 52.89s/it][Succeeded / Failed / Skipped / Total] 266 / 157 / 23 / 446:  45%|████▍     | 447/1000 [6:33:14<8:06:29, 52.78s/it][Succeeded / Failed / Skipped / Total] 267 / 157 / 23 / 447:  45%|████▍     | 447/1000 [6:33:14<8:06:29, 52.78s/it][Succeeded / Failed / Skipped / Total] 267 / 157 / 23 / 447:  45%|████▍     | 448/1000 [6:34:16<8:05:47, 52.80s/it][Succeeded / Failed / Skipped / Total] 267 / 158 / 23 / 448:  45%|████▍     | 448/1000 [6:34:16<8:05:47, 52.80s/it][Succeeded / Failed / Skipped / Total] 267 / 158 / 23 / 448:  45%|████▍     | 449/1000 [6:35:12<8:04:59, 52.81s/it][Succeeded / Failed / Skipped / Total] 267 / 159 / 23 / 449:  45%|████▍     | 449/1000 [6:35:12<8:04:59, 52.81s/it][Succeeded / Failed / Skipped / Total] 267 / 159 / 23 / 449:  45%|████▌     | 450/1000 [6:36:11<8:04:13, 52.83s/it][Succeeded / Failed / Skipped / Total] 267 / 160 / 23 / 450:  45%|████▌     | 450/1000 [6:36:11<8:04:13, 52.83s/it][Succeeded / Failed / Skipped / Total] 267 / 160 / 23 / 450:  45%|████▌     | 451/1000 [6:37:16<8:03:35, 52.85s/it][Succeeded / Failed / Skipped / Total] 267 / 161 / 23 / 451:  45%|████▌     | 451/1000 [6:37:16<8:03:35, 52.85s/it][Succeeded / Failed / Skipped / Total] 267 / 161 / 23 / 451:  45%|████▌     | 452/1000 [6:38:20<8:02:56, 52.88s/it]Invoke a log message . --> Invokes the logic . --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[targetIp]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[targetIp]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[accompanist]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[accompanist]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 445 ---------------------------------------------
Create a new thread group . --> Audite die neud eneudie eue eneueneudigeneue eudiche e eneneucheue eneneucheneurneueueueueueueneueuen eneneneueueueicheueueneueueue --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[euclid]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[euclid]] ) : new NioEventLoopGroup ( nThreads , [[euclid]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 446 ---------------------------------------------
Parses a remote channel . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = channel . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[tacoma]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[alfonso]] = channel . remoteAddress ( ) ; return doParse ( [[alfonso]] != null ? [[alfonso]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse a IP address . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = channel . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress [[beata]] = channel . localAddress ( ) ; return doParse ( [[beata]] != null ? [[beata]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Returns a IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[zurg]] ( final Channel [[depicted]] ) { if ( null == [[depicted]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[depicted]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[sena]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[treviso]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[treviso]] != null ) { return [[treviso]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Get the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[beattie]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[beattie]] != null ) { return [[beattie]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Returns the remote IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[muni]] ) { if ( null == [[muni]] ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) [[muni]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
[Succeeded / Failed / Skipped / Total] 267 / 162 / 23 / 452:  45%|████▌     | 452/1000 [6:38:20<8:02:56, 52.88s/it][Succeeded / Failed / Skipped / Total] 267 / 162 / 23 / 452:  45%|████▌     | 453/1000 [6:39:52<8:02:51, 52.96s/it][Succeeded / Failed / Skipped / Total] 267 / 163 / 23 / 453:  45%|████▌     | 453/1000 [6:39:52<8:02:51, 52.96s/it][Succeeded / Failed / Skipped / Total] 267 / 163 / 23 / 453:  45%|████▌     | 454/1000 [6:39:58<8:01:01, 52.86s/it][Succeeded / Failed / Skipped / Total] 268 / 163 / 23 / 454:  45%|████▌     | 454/1000 [6:39:58<8:01:01, 52.86s/it][Succeeded / Failed / Skipped / Total] 268 / 163 / 23 / 454:  46%|████▌     | 455/1000 [6:40:36<7:59:51, 52.83s/it][Succeeded / Failed / Skipped / Total] 269 / 163 / 23 / 455:  46%|████▌     | 455/1000 [6:40:36<7:59:51, 52.83s/it][Succeeded / Failed / Skipped / Total] 269 / 163 / 23 / 455:  46%|████▌     | 456/1000 [6:40:40<7:58:00, 52.72s/it][Succeeded / Failed / Skipped / Total] 270 / 163 / 23 / 456:  46%|████▌     | 456/1000 [6:40:40<7:58:00, 52.72s/it][Succeeded / Failed / Skipped / Total] 270 / 163 / 23 / 456:  46%|████▌     | 457/1000 [6:41:48<7:57:25, 52.75s/it][Succeeded / Failed / Skipped / Total] 271 / 163 / 23 / 457:  46%|████▌     | 457/1000 [6:41:48<7:57:25, 52.75s/it][Succeeded / Failed / Skipped / Total] 271 / 163 / 23 / 457:  46%|████▌     | 458/1000 [6:42:01<7:55:45, 52.67s/it][Succeeded / Failed / Skipped / Total] 272 / 163 / 23 / 458:  46%|████▌     | 458/1000 [6:42:01<7:55:45, 52.67s/it][Succeeded / Failed / Skipped / Total] 272 / 163 / 23 / 458:  46%|████▌     | 459/1000 [6:43:16<7:55:19, 52.72s/it][Succeeded / Failed / Skipped / Total] 273 / 163 / 23 / 459:  46%|████▌     | 459/1000 [6:43:16<7:55:19, 52.72s/it][Succeeded / Failed / Skipped / Total] 273 / 163 / 23 / 459:  46%|████▌     | 460/1000 [6:43:59<7:54:15, 52.69s/it][Succeeded / Failed / Skipped / Total] 273 / 164 / 23 / 460:  46%|████▌     | 460/1000 [6:43:59<7:54:15, 52.69s/it]--------------------------------------------- Result 452 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[dominus]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[dominus]] != null ) { return [[dominus]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Convert a IP address to an IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress [[adornment]] = ( InetSocketAddress ) socketAddress ; if ( [[adornment]] != null ) { InetAddress [[chattels]] = [[adornment]] . getAddress ( ) ; if ( null != [[chattels]] ) { return [[chattels]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 454 ---------------------------------------------
Add a connection . --> Adds an entry to the set . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[berry]] ) { markAccess ( ) ; if ( null == [[berry]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[berry]] ) ; if ( res ) { [[berry]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 455 ---------------------------------------------
Closes the connection . --> Closes this post . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[boog]] ( Connection [[apostrophe]] ) { if ( null == [[apostrophe]] ) { return ; } boolean res = this . [[babbles]] . remove ( [[apostrophe]] ) ; if ( res ) { [[apostrophe]] . decreaseRef ( ) ; } if ( [[apostrophe]] . noRef ( ) ) { [[apostrophe]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Returns a list of connections . --> Returns the connections . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[bailiffs]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 457 ---------------------------------------------
Registers a custom class . --> Registers a set of serializers --> Socre: 1.0

[[[[Adv]]]]: public static void registerCustomSerializer ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void registerCustomSerializer ( String [[pawpaw]] , CustomSerializer [[binds]] ) { CustomSerializer [[flings]] = classCustomSerializer . putIfAbsent ( [[pawpaw]] , [[binds]] ) ; if ( [[flings]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[pawpaw]] + ", the custom serializer is: " + [[flings]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Get the serializer . --> Obtains a string from a string --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[shone]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[shone]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 459 ---------------------------------------------
Register a custom command . --> A convenience method to create a Customer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[whistling]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[unearthly]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[unearthly]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[unearthly]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 460 ---------------------------------------------
Gets a single command . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[capricorn]] ( CommandCode [[tolerable]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[tolerable]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 164 / 24 / 461:  46%|████▌     | 461/1000 [6:43:59<7:52:20, 52.58s/it][Succeeded / Failed / Skipped / Total] 273 / 164 / 24 / 461:  46%|████▌     | 462/1000 [6:44:04<7:50:32, 52.48s/it][Succeeded / Failed / Skipped / Total] 274 / 164 / 24 / 462:  46%|████▌     | 462/1000 [6:44:04<7:50:32, 52.48s/it][Succeeded / Failed / Skipped / Total] 275 / 164 / 24 / 463:  46%|████▋     | 463/1000 [6:44:11<7:48:47, 52.38s/it][Succeeded / Failed / Skipped / Total] 275 / 164 / 24 / 463:  46%|████▋     | 464/1000 [6:44:11<7:46:54, 52.27s/it][Succeeded / Failed / Skipped / Total] 275 / 164 / 25 / 464:  46%|████▋     | 464/1000 [6:44:11<7:46:54, 52.27s/it][Succeeded / Failed / Skipped / Total] 276 / 164 / 25 / 465:  46%|████▋     | 465/1000 [6:44:16<7:45:08, 52.16s/it][Succeeded / Failed / Skipped / Total] 276 / 164 / 25 / 465:  47%|████▋     | 466/1000 [6:44:56<7:44:01, 52.14s/it][Succeeded / Failed / Skipped / Total] 277 / 164 / 25 / 466:  47%|████▋     | 466/1000 [6:44:56<7:44:01, 52.14s/it][Succeeded / Failed / Skipped / Total] 277 / 164 / 25 / 466:  47%|████▋     | 467/1000 [6:44:56<7:42:10, 52.03s/it][Succeeded / Failed / Skipped / Total] 277 / 164 / 26 / 467:  47%|████▋     | 467/1000 [6:44:56<7:42:10, 52.03s/it][Succeeded / Failed / Skipped / Total] 277 / 164 / 26 / 467:  47%|████▋     | 468/1000 [6:45:01<7:40:24, 51.93s/it][Succeeded / Failed / Skipped / Total] 278 / 164 / 26 / 468:  47%|████▋     | 468/1000 [6:45:01<7:40:24, 51.93s/it][Succeeded / Failed / Skipped / Total] 278 / 164 / 26 / 468:  47%|████▋     | 469/1000 [6:45:11<7:38:45, 51.84s/it][Succeeded / Failed / Skipped / Total] 279 / 164 / 26 / 469:  47%|████▋     | 469/1000 [6:45:11<7:38:45, 51.84s/it][Succeeded / Failed / Skipped / Total] 279 / 164 / 26 / 469:  47%|████▋     | 470/1000 [6:45:17<7:37:02, 51.74s/it]Starts monitoring . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 462 ---------------------------------------------
Check if a URL exists . --> Checks if the URL is valid . --> Socre: 1.0

[[[[Adv]]]]: public boolean isConnected ( String [[remoteAddr]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean isConnected ( String [[alchemists]] ) { Url url = this . rpcRemoting . addressParser . parse ( [[alchemists]] ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 463 ---------------------------------------------
Sets the water mark . --> Sets the watermark . --> Socre: 1.0

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . [[abductions]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 464 ---------------------------------------------
Returns the Framecode stack . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 465 ---------------------------------------------
Returns a buffered channel . --> Handle a channel . --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[buffer]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[buffer]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer [[amo]] = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( [[amo]] == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 466 ---------------------------------------------
Sets the code . --> Sets a coefficient . --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int [[coolest]] ) { this . [[shatter]] = [[coolest]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 467 ---------------------------------------------
Validates a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 468 ---------------------------------------------
Update a byte . --> Serializes a byte array . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[aesthetic]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 469 ---------------------------------------------
Returns the protocol . --> Obtains a Handshaketand . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[brandishing]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 470 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 280 / 164 / 26 / 470:  47%|████▋     | 470/1000 [6:45:17<7:37:02, 51.74s/it][Succeeded / Failed / Skipped / Total] 280 / 164 / 26 / 470:  47%|████▋     | 471/1000 [6:45:27<7:35:23, 51.65s/it][Succeeded / Failed / Skipped / Total] 281 / 164 / 26 / 471:  47%|████▋     | 471/1000 [6:45:27<7:35:23, 51.65s/it][Succeeded / Failed / Skipped / Total] 281 / 164 / 26 / 471:  47%|████▋     | 472/1000 [6:45:39<7:33:46, 51.57s/it][Succeeded / Failed / Skipped / Total] 282 / 164 / 26 / 472:  47%|████▋     | 472/1000 [6:45:39<7:33:46, 51.57s/it][Succeeded / Failed / Skipped / Total] 282 / 164 / 26 / 472:  47%|████▋     | 473/1000 [6:45:45<7:32:05, 51.47s/it][Succeeded / Failed / Skipped / Total] 283 / 164 / 26 / 473:  47%|████▋     | 473/1000 [6:45:45<7:32:05, 51.47s/it][Succeeded / Failed / Skipped / Total] 283 / 164 / 26 / 473:  47%|████▋     | 474/1000 [6:45:49<7:30:20, 51.37s/it][Succeeded / Failed / Skipped / Total] 284 / 164 / 26 / 474:  47%|████▋     | 474/1000 [6:45:49<7:30:20, 51.37s/it][Succeeded / Failed / Skipped / Total] 284 / 164 / 27 / 475:  48%|████▊     | 475/1000 [6:45:49<7:28:32, 51.26s/it][Succeeded / Failed / Skipped / Total] 284 / 164 / 27 / 475:  48%|████▊     | 476/1000 [6:45:54<7:26:50, 51.17s/it][Succeeded / Failed / Skipped / Total] 285 / 164 / 27 / 476:  48%|████▊     | 476/1000 [6:45:54<7:26:50, 51.17s/it]Verifies that the maximum number of bytes . --> Adapts a sizedvance . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[bracha]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 471 ---------------------------------------------
Send packet . --> Overridden . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[nape]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
Generate a string representation of a string . --> Calculates the SHA1 - 1 . --> Socre: 1.0

[[[[Adv]]]]: private String generateFinalKey ( String [[in]] ) { String seckey = [[in]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String generateFinalKey ( String [[copa]] ) { String seckey = [[copa]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 473 ---------------------------------------------
Process a single frame . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[praising]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[praising]] ) ; } else if ( [[praising]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[praising]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 474 ---------------------------------------------
Process web socket . --> Send web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[advocated]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 475 ---------------------------------------------
Sends web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 476 ---------------------------------------------
Sends a web socket . --> Sends WebSocket message . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl [[ear]] , Framedata frame ) throws InvalidDataException { try { [[ear]] . getWebSocketListener ( ) . onWebsocketMessage ( [[ear]] , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[ear]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 164 / 27 / 477:  48%|████▊     | 477/1000 [6:46:00<7:25:10, 51.07s/it][Succeeded / Failed / Skipped / Total] 286 / 164 / 27 / 477:  48%|████▊     | 478/1000 [6:46:01<7:23:23, 50.96s/it][Succeeded / Failed / Skipped / Total] 286 / 164 / 28 / 478:  48%|████▊     | 478/1000 [6:46:01<7:23:23, 50.96s/it][Succeeded / Failed / Skipped / Total] 287 / 164 / 28 / 479:  48%|████▊     | 479/1000 [6:46:13<7:21:50, 50.88s/it][Succeeded / Failed / Skipped / Total] 287 / 164 / 28 / 479:  48%|████▊     | 480/1000 [6:46:18<7:20:09, 50.79s/it][Succeeded / Failed / Skipped / Total] 288 / 164 / 28 / 480:  48%|████▊     | 480/1000 [6:46:18<7:20:09, 50.79s/it][Succeeded / Failed / Skipped / Total] 288 / 164 / 28 / 480:  48%|████▊     | 481/1000 [6:46:49<7:18:57, 50.75s/it][Succeeded / Failed / Skipped / Total] 289 / 164 / 28 / 481:  48%|████▊     | 481/1000 [6:46:49<7:18:57, 50.75s/it][Succeeded / Failed / Skipped / Total] 289 / 164 / 28 / 481:  48%|████▊     | 482/1000 [6:46:53<7:17:17, 50.65s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 28 / 482:  48%|████▊     | 482/1000 [6:46:53<7:17:17, 50.65s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 28 / 482:  48%|████▊     | 483/1000 [6:46:54<7:15:32, 50.55s/it]Populates a new frame . --> Handles a response . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[burried]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Handles a response . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Handles a socket . --> Helper method to close an error . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[barbecue]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[barbecue]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[barbecue]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 480 ---------------------------------------------
Acquire the maximum size . --> Adapts a limit . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[daydreams]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 481 ---------------------------------------------
Returns a list of bytes from the given buffer . --> Calculates how many bytes . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[mcdowell]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[shibuya]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[shibuya]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[shibuya]] . put ( buffer ) ; } } [[shibuya]] . flip ( ) ; return [[shibuya]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 482 ---------------------------------------------
Returns the total number of bytes in the buffer . --> Allocate a buffer . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[footmen]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 164 / 29 / 483:  48%|████▊     | 483/1000 [6:46:54<7:15:32, 50.55s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 29 / 483:  48%|████▊     | 484/1000 [6:46:54<7:13:48, 50.44s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 30 / 484:  48%|████▊     | 484/1000 [6:46:54<7:13:48, 50.44s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 31 / 485:  48%|████▊     | 485/1000 [6:46:54<7:12:04, 50.34s/it][Succeeded / Failed / Skipped / Total] 290 / 164 / 31 / 485:  49%|████▊     | 486/1000 [6:46:59<7:10:26, 50.25s/it][Succeeded / Failed / Skipped / Total] 291 / 164 / 31 / 486:  49%|████▊     | 486/1000 [6:46:59<7:10:26, 50.25s/it][Succeeded / Failed / Skipped / Total] 292 / 164 / 31 / 487:  49%|████▊     | 487/1000 [6:47:31<7:09:16, 50.21s/it][Succeeded / Failed / Skipped / Total] 292 / 164 / 31 / 487:  49%|████▉     | 488/1000 [6:47:45<7:07:48, 50.13s/it][Succeeded / Failed / Skipped / Total] 293 / 164 / 31 / 488:  49%|████▉     | 488/1000 [6:47:45<7:07:48, 50.13s/it][Succeeded / Failed / Skipped / Total] 293 / 164 / 31 / 488:  49%|████▉     | 489/1000 [6:47:50<7:06:11, 50.04s/it][Succeeded / Failed / Skipped / Total] 294 / 164 / 31 / 489:  49%|████▉     | 489/1000 [6:47:50<7:06:11, 50.04s/it][Succeeded / Failed / Skipped / Total] 294 / 164 / 32 / 490:  49%|████▉     | 490/1000 [6:47:50<7:04:29, 49.94s/it][Succeeded / Failed / Skipped / Total] 294 / 164 / 32 / 490:  49%|████▉     | 491/1000 [6:48:11<7:03:09, 49.88s/it][Succeeded / Failed / Skipped / Total] 294 / 165 / 32 / 491:  49%|████▉     | 491/1000 [6:48:11<7:03:09, 49.88s/it][Succeeded / Failed / Skipped / Total] 294 / 165 / 32 / 491:  49%|████▉     | 492/1000 [6:48:18<7:01:35, 49.79s/it]Serialize a Handshaka Handwidth . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 484 ---------------------------------------------
Verifies that a string is a Handwidth . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 485 ---------------------------------------------
Handle a request . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 486 ---------------------------------------------
Write a response to the output . --> Flushes a response . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException [[astrologers]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[astrologers]] . getCloseCode ( ) , [[astrologers]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 487 ---------------------------------------------
Sets the connection . --> Send failure . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[spinkle]] ( RuntimeException [[payload]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[payload]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 488 ---------------------------------------------
Generates the error code . --> Generates code . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int [[yuppies]] ) { String errorCodeDescription ; switch ( [[yuppies]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 489 ---------------------------------------------
Send a text . --> Create a new Role --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[laloo]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[laloo]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 490 ---------------------------------------------
Initializes the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 491 ---------------------------------------------
Starts the thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[akio]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 492 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 295 / 165 / 32 / 492:  49%|████▉     | 492/1000 [6:48:18<7:01:35, 49.79s/it][Succeeded / Failed / Skipped / Total] 295 / 165 / 32 / 492:  49%|████▉     | 493/1000 [6:48:24<7:00:00, 49.70s/it][Succeeded / Failed / Skipped / Total] 296 / 165 / 32 / 493:  49%|████▉     | 493/1000 [6:48:24<7:00:00, 49.70s/it][Succeeded / Failed / Skipped / Total] 296 / 165 / 32 / 493:  49%|████▉     | 494/1000 [6:48:54<6:58:50, 49.67s/it][Succeeded / Failed / Skipped / Total] 297 / 165 / 32 / 494:  49%|████▉     | 494/1000 [6:48:54<6:58:50, 49.67s/it][Succeeded / Failed / Skipped / Total] 297 / 165 / 32 / 494:  50%|████▉     | 495/1000 [6:49:08<6:57:24, 49.59s/it][Succeeded / Failed / Skipped / Total] 298 / 165 / 32 / 495:  50%|████▉     | 495/1000 [6:49:08<6:57:24, 49.59s/it][Succeeded / Failed / Skipped / Total] 298 / 165 / 32 / 495:  50%|████▉     | 496/1000 [6:49:44<6:56:21, 49.57s/it][Succeeded / Failed / Skipped / Total] 299 / 165 / 32 / 496:  50%|████▉     | 496/1000 [6:49:44<6:56:21, 49.57s/it][Succeeded / Failed / Skipped / Total] 299 / 165 / 32 / 496:  50%|████▉     | 497/1000 [6:49:53<6:54:50, 49.48s/it][Succeeded / Failed / Skipped / Total] 300 / 165 / 32 / 497:  50%|████▉     | 497/1000 [6:49:53<6:54:50, 49.48s/it][Succeeded / Failed / Skipped / Total] 300 / 165 / 32 / 497:  50%|████▉     | 498/1000 [6:51:42<6:55:01, 49.60s/it]Get the scheme of the scheme . --> Get scheme . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[euro]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Send a request to the client . --> Sends a request . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[host]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , [[host]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[robson]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , [[robson]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 494 ---------------------------------------------
Set the connection . --> Set timeout . --> Socre: 1.0

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[websocketRunning]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[deodorant]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
Stops the server . --> Cleans up resources . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[ridicules]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Starts the connection . --> Shronized . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[crawlspace]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[seal]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 497 ---------------------------------------------
Starts a new server . --> Shuts down all connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[decepticons]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 498 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 166 / 32 / 498:  50%|████▉     | 498/1000 [6:51:42<6:55:01, 49.60s/it][Succeeded / Failed / Skipped / Total] 300 / 166 / 32 / 498:  50%|████▉     | 499/1000 [6:51:52<6:53:31, 49.52s/it][Succeeded / Failed / Skipped / Total] 301 / 166 / 32 / 499:  50%|████▉     | 499/1000 [6:51:52<6:53:31, 49.52s/it][Succeeded / Failed / Skipped / Total] 301 / 166 / 32 / 499:  50%|█████     | 500/1000 [6:52:06<6:52:06, 49.45s/it][Succeeded / Failed / Skipped / Total] 302 / 166 / 32 / 500:  50%|█████     | 500/1000 [6:52:06<6:52:06, 49.45s/it][Succeeded / Failed / Skipped / Total] 302 / 166 / 32 / 500:  50%|█████     | 501/1000 [6:53:20<6:51:41, 49.50s/it][Succeeded / Failed / Skipped / Total] 302 / 167 / 32 / 501:  50%|█████     | 501/1000 [6:53:20<6:51:41, 49.50s/it][Succeeded / Failed / Skipped / Total] 302 / 167 / 32 / 501:  50%|█████     | 502/1000 [6:53:30<6:50:13, 49.42s/it][Succeeded / Failed / Skipped / Total] 303 / 167 / 32 / 502:  50%|█████     | 502/1000 [6:53:30<6:50:13, 49.42s/it][Succeeded / Failed / Skipped / Total] 303 / 167 / 32 / 502:  50%|█████     | 503/1000 [6:54:17<6:49:21, 49.42s/it][Succeeded / Failed / Skipped / Total] 303 / 168 / 32 / 503:  50%|█████     | 503/1000 [6:54:17<6:49:21, 49.42s/it][Succeeded / Failed / Skipped / Total] 303 / 168 / 32 / 503:  50%|█████     | 504/1000 [6:54:18<6:47:43, 49.32s/it][Succeeded / Failed / Skipped / Total] 303 / 168 / 33 / 504:  50%|█████     | 504/1000 [6:54:18<6:47:43, 49.32s/it][Succeeded / Failed / Skipped / Total] 303 / 168 / 34 / 505:  50%|█████     | 505/1000 [6:54:18<6:46:05, 49.22s/it][Succeeded / Failed / Skipped / Total] 303 / 168 / 34 / 505:  51%|█████     | 506/1000 [6:54:23<6:44:33, 49.14s/it]Connects to a connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[ltalian]] = ( WebSocketImpl ) webSocket ; if ( [[ltalian]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[ltalian]] ) ; [[ltalian]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[ltalian]] . isOpen ( ) ) { [[ltalian]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[ltalian]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 499 ---------------------------------------------
Shutdown this connection . --> Shuts down . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[cornflower]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 500 ---------------------------------------------
Creates a new Handshaker server . --> Create a Handshaker --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[transcoder]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Sends a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata [[f]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata [[imi]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[imi]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 502 ---------------------------------------------
Sets the current thread . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[terrorizes]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 503 ---------------------------------------------
Gets the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int getPort ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int getPort ( ) { int [[schoolbag]] = getAddress ( ) . getPort ( ) ; if ( [[schoolbag]] == 0 && server != null ) { [[schoolbag]] = server . socket ( ) . getLocalPort ( ) ; } return [[schoolbag]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
Adds a message to the queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 505 ---------------------------------------------
Sets the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 506 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 168 / 34 / 506:  51%|█████     | 506/1000 [6:54:23<6:44:33, 49.14s/it][Succeeded / Failed / Skipped / Total] 305 / 168 / 34 / 507:  51%|█████     | 507/1000 [6:54:28<6:43:01, 49.05s/it][Succeeded / Failed / Skipped / Total] 305 / 168 / 34 / 507:  51%|█████     | 508/1000 [6:54:39<6:41:35, 48.97s/it][Succeeded / Failed / Skipped / Total] 306 / 168 / 34 / 508:  51%|█████     | 508/1000 [6:54:39<6:41:35, 48.97s/it][Succeeded / Failed / Skipped / Total] 306 / 168 / 34 / 508:  51%|█████     | 509/1000 [6:54:52<6:40:12, 48.91s/it][Succeeded / Failed / Skipped / Total] 307 / 168 / 34 / 509:  51%|█████     | 509/1000 [6:54:52<6:40:12, 48.91s/it][Succeeded / Failed / Skipped / Total] 307 / 168 / 35 / 510:  51%|█████     | 510/1000 [6:54:53<6:38:36, 48.81s/it][Succeeded / Failed / Skipped / Total] 307 / 168 / 35 / 510:  51%|█████     | 511/1000 [6:54:56<6:37:04, 48.72s/it][Succeeded / Failed / Skipped / Total] 308 / 168 / 35 / 511:  51%|█████     | 511/1000 [6:54:56<6:37:04, 48.72s/it][Succeeded / Failed / Skipped / Total] 309 / 168 / 35 / 512:  51%|█████     | 512/1000 [6:55:02<6:35:35, 48.64s/it][Succeeded / Failed / Skipped / Total] 309 / 168 / 35 / 512:  51%|█████▏    | 513/1000 [6:55:08<6:34:06, 48.55s/it]Removes a key from the queue . --> Reads the next key from the channel . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[[False]]" != "[[False]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "[[Belafonte]]" != "[[Belafonte]]" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 507 ---------------------------------------------
Opens a key . --> Populates the key . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[alleys]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 508 ---------------------------------------------
Starts the server . --> Start a socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "[[Swiped]]" == "[[Swiped]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 509 ---------------------------------------------
Returns true if the current thread is started . --> Returns true if this node is a thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Economize]]" != "[[Economize]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 510 ---------------------------------------------
Close the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 511 ---------------------------------------------
Returns a socket channel . --> Creates a channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[hem]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[hem]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 512 ---------------------------------------------
Send a byte array to the server . --> Processes the given clients . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[ement]] , Collection < WebSocket > clients ) { if ( [[ement]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[ement]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 168 / 35 / 513:  51%|█████▏    | 513/1000 [6:55:08<6:34:06, 48.55s/it][Succeeded / Failed / Skipped / Total] 310 / 168 / 35 / 513:  51%|█████▏    | 514/1000 [6:55:14<6:32:36, 48.47s/it][Succeeded / Failed / Skipped / Total] 311 / 168 / 35 / 514:  51%|█████▏    | 514/1000 [6:55:14<6:32:36, 48.47s/it][Succeeded / Failed / Skipped / Total] 311 / 168 / 35 / 514:  52%|█████▏    | 515/1000 [6:55:14<6:31:02, 48.38s/it][Succeeded / Failed / Skipped / Total] 311 / 168 / 36 / 515:  52%|█████▏    | 515/1000 [6:55:14<6:31:02, 48.38s/it][Succeeded / Failed / Skipped / Total] 311 / 168 / 36 / 515:  52%|█████▏    | 516/1000 [6:55:18<6:29:33, 48.29s/it][Succeeded / Failed / Skipped / Total] 312 / 168 / 36 / 516:  52%|█████▏    | 516/1000 [6:55:18<6:29:33, 48.29s/it][Succeeded / Failed / Skipped / Total] 312 / 168 / 36 / 516:  52%|█████▏    | 517/1000 [6:55:40<6:28:20, 48.24s/it][Succeeded / Failed / Skipped / Total] 312 / 169 / 36 / 517:  52%|█████▏    | 517/1000 [6:55:40<6:28:20, 48.24s/it][Succeeded / Failed / Skipped / Total] 312 / 169 / 36 / 517:  52%|█████▏    | 518/1000 [6:56:28<6:27:31, 48.24s/it][Succeeded / Failed / Skipped / Total] 313 / 169 / 36 / 518:  52%|█████▏    | 518/1000 [6:56:28<6:27:31, 48.24s/it][Succeeded / Failed / Skipped / Total] 313 / 169 / 36 / 518:  52%|█████▏    | 519/1000 [6:56:59<6:26:27, 48.21s/it][Succeeded / Failed / Skipped / Total] 314 / 169 / 36 / 519:  52%|█████▏    | 519/1000 [6:56:59<6:26:27, 48.21s/it][Succeeded / Failed / Skipped / Total] 314 / 169 / 36 / 519:  52%|█████▏    | 520/1000 [6:57:54<6:25:45, 48.22s/it][Succeeded / Failed / Skipped / Total] 315 / 169 / 36 / 520:  52%|█████▏    | 520/1000 [6:57:54<6:25:45, 48.22s/it][Succeeded / Failed / Skipped / Total] 315 / 169 / 36 / 520:  52%|█████▏    | 521/1000 [6:59:18<6:25:30, 48.29s/it]A convenience method . --> Broadcasts the specified textual representation . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[disintegration]] ) { if ( text == null || [[disintegration]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[disintegration]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 514 ---------------------------------------------
Send a data to a map --> Sends a DAGPS message . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft [[draft]] = client . getDraft ( ) ; fillFrames ( [[draft]] , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( [[draft]] ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft [[highwaymen]] = client . getDraft ( ) ; fillFrames ( [[highwaymen]] , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( [[highwaymen]] ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 515 ---------------------------------------------
Given a frame . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 516 ---------------------------------------------
Converts a fix to a buffer . --> Converts a byte array into a byte array . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[fremain]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[fremain]] > toremain ) { int limit = Math . min ( [[fremain]] , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return [[fremain]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int [[bangers]] = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( [[bangers]] > toremain ) { int limit = Math . min ( [[bangers]] , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return [[bangers]] ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
Start persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[farthest]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 518 ---------------------------------------------
Returns the EntityManager . --> Retie die --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[kilbride]] ( String [[euclid]] ) { EntityManagerFactory [[prioritize]] = emfs . get ( [[euclid]] ) ; if ( [[prioritize]] == null ) { return null ; } return [[prioritize]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 519 ---------------------------------------------
Convenience method to execute a transaction . --> Simultaneously consumption --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[cotto]] ( Consumer < EntityManager > [[cardiac]] ) { [[cotto]] ( em -> { [[cardiac]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Convert a Java object to a java object . --> Swaps ar . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[qwerty]] ( final Object ... [[milder]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[milder]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 521 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 170 / 36 / 521:  52%|█████▏    | 521/1000 [6:59:18<6:25:30, 48.29s/it][Succeeded / Failed / Skipped / Total] 315 / 170 / 36 / 521:  52%|█████▏    | 522/1000 [7:00:24<6:24:58, 48.32s/it][Succeeded / Failed / Skipped / Total] 316 / 170 / 36 / 522:  52%|█████▏    | 522/1000 [7:00:24<6:24:58, 48.32s/it][Succeeded / Failed / Skipped / Total] 316 / 170 / 36 / 522:  52%|█████▏    | 523/1000 [7:00:29<6:23:30, 48.24s/it][Succeeded / Failed / Skipped / Total] 317 / 170 / 36 / 523:  52%|█████▏    | 523/1000 [7:00:29<6:23:30, 48.24s/it][Succeeded / Failed / Skipped / Total] 317 / 170 / 36 / 523:  52%|█████▏    | 524/1000 [7:00:40<6:22:08, 48.17s/it][Succeeded / Failed / Skipped / Total] 318 / 170 / 36 / 524:  52%|█████▏    | 524/1000 [7:00:40<6:22:08, 48.17s/it][Succeeded / Failed / Skipped / Total] 318 / 170 / 36 / 524:  52%|█████▎    | 525/1000 [7:02:28<6:22:14, 48.28s/it][Succeeded / Failed / Skipped / Total] 318 / 171 / 36 / 525:  52%|█████▎    | 525/1000 [7:02:28<6:22:14, 48.28s/it][Succeeded / Failed / Skipped / Total] 318 / 171 / 36 / 525:  53%|█████▎    | 526/1000 [7:03:43<6:21:50, 48.33s/it][Succeeded / Failed / Skipped / Total] 318 / 172 / 36 / 526:  53%|█████▎    | 526/1000 [7:03:43<6:21:50, 48.33s/it][Succeeded / Failed / Skipped / Total] 318 / 172 / 36 / 526:  53%|█████▎    | 527/1000 [7:05:04<6:21:31, 48.40s/it][Succeeded / Failed / Skipped / Total] 318 / 173 / 36 / 527:  53%|█████▎    | 527/1000 [7:05:04<6:21:31, 48.40s/it][Succeeded / Failed / Skipped / Total] 318 / 173 / 36 / 527:  53%|█████▎    | 528/1000 [7:05:04<6:19:59, 48.30s/it][Succeeded / Failed / Skipped / Total] 318 / 173 / 37 / 528:  53%|█████▎    | 528/1000 [7:05:04<6:19:59, 48.30s/it][Succeeded / Failed / Skipped / Total] 318 / 173 / 37 / 528:  53%|█████▎    | 529/1000 [7:05:09<6:18:32, 48.22s/it][Succeeded / Failed / Skipped / Total] 319 / 173 / 37 / 529:  53%|█████▎    | 529/1000 [7:05:09<6:18:32, 48.22s/it][Succeeded / Failed / Skipped / Total] 319 / 173 / 37 / 529:  53%|█████▎    | 530/1000 [7:05:36<6:17:25, 48.18s/it][Succeeded / Failed / Skipped / Total] 320 / 173 / 37 / 530:  53%|█████▎    | 530/1000 [7:05:36<6:17:25, 48.18s/it][Succeeded / Failed / Skipped / Total] 320 / 173 / 37 / 530:  53%|█████▎    | 531/1000 [7:05:58<6:16:13, 48.13s/it][Succeeded / Failed / Skipped / Total] 321 / 173 / 37 / 531:  53%|█████▎    | 531/1000 [7:05:58<6:16:13, 48.13s/it][Succeeded / Failed / Skipped / Total] 321 / 173 / 37 / 531:  53%|█████▎    | 532/1000 [7:06:02<6:14:47, 48.05s/it][Succeeded / Failed / Skipped / Total] 322 / 173 / 37 / 532:  53%|█████▎    | 532/1000 [7:06:02<6:14:47, 48.05s/it][Succeeded / Failed / Skipped / Total] 322 / 173 / 37 / 532:  53%|█████▎    | 533/1000 [7:06:51<6:13:59, 48.05s/it]Convert an array of arguments to a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[ticks]] ( final T ... [[departure]] ) { List < T > [[yesteryear]] ; if ( [[departure]] != null && [[departure]] . length == 1 && [[departure]] [ 0 ] instanceof List ) { [[yesteryear]] = ( List < T > ) [[departure]] [ 0 ] ; } else { [[yesteryear]] = Arrays . asList ( [[departure]] ) ; } return [[yesteryear]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Helper method to generate a random key . --> Based on the given key --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[mayans]] ( play . api . i18n . Lang [[caldwell]] , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , [[caldwell]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 523 ---------------------------------------------
Converts a String to a map . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... [[barkeeper]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[barkeeper]] ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 524 ---------------------------------------------
Puts the specified key . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[hereabout]] ) { return messages . isDefinedAt ( [[hereabout]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Broadcast a given hook . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[overblown]] = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( [[overblown]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 526 ---------------------------------------------
Return a request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader request ) { play . api . i18n . Messages [[orli]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[orli]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
Sets the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result [[tarmac]] , Lang [[roxanne]] ) { return messages . setLang ( [[tarmac]] . asScala ( ) , [[roxanne]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 528 ---------------------------------------------
Convenience method for testing --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 529 ---------------------------------------------
Returns the modules . --> Returns a new instance --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[housekeeping]] ) { return bindings ( Guiceable . [[housekeeping]] ( [[housekeeping]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the receiver . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[JOPPA]] ( play . api . inject . Binding < ? > ... [[JOPPA]] ) { return [[JOPPA]] ( Guiceable . bindings ( [[JOPPA]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 531 ---------------------------------------------
Construct a overrides . --> Sets the Alluxution --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[ashland]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[ashland]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Returns the modules . --> Shuts down the Module --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[hobo]] ) { return overrides ( Guiceable . [[hobo]] ( [[hobo]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
[Succeeded / Failed / Skipped / Total] 322 / 174 / 37 / 533:  53%|█████▎    | 533/1000 [7:06:51<6:13:59, 48.05s/it][Succeeded / Failed / Skipped / Total] 322 / 174 / 37 / 533:  53%|█████▎    | 534/1000 [7:07:09<6:12:45, 47.99s/it][Succeeded / Failed / Skipped / Total] 323 / 174 / 37 / 534:  53%|█████▎    | 534/1000 [7:07:09<6:12:45, 47.99s/it][Succeeded / Failed / Skipped / Total] 323 / 174 / 37 / 534:  54%|█████▎    | 535/1000 [7:07:14<6:11:20, 47.92s/it][Succeeded / Failed / Skipped / Total] 324 / 174 / 37 / 535:  54%|█████▎    | 535/1000 [7:07:14<6:11:20, 47.92s/it][Succeeded / Failed / Skipped / Total] 324 / 174 / 37 / 535:  54%|█████▎    | 536/1000 [7:07:57<6:10:28, 47.91s/it][Succeeded / Failed / Skipped / Total] 324 / 175 / 37 / 536:  54%|█████▎    | 536/1000 [7:07:57<6:10:28, 47.91s/it][Succeeded / Failed / Skipped / Total] 324 / 175 / 37 / 536:  54%|█████▎    | 537/1000 [7:08:02<6:09:03, 47.83s/it][Succeeded / Failed / Skipped / Total] 325 / 175 / 37 / 537:  54%|█████▎    | 537/1000 [7:08:02<6:09:03, 47.83s/it][Succeeded / Failed / Skipped / Total] 325 / 175 / 37 / 537:  54%|█████▍    | 538/1000 [7:08:15<6:07:45, 47.76s/it][Succeeded / Failed / Skipped / Total] 326 / 175 / 37 / 538:  54%|█████▍    | 538/1000 [7:08:15<6:07:45, 47.76s/it][Succeeded / Failed / Skipped / Total] 326 / 175 / 37 / 538:  54%|█████▍    | 539/1000 [7:08:21<6:06:21, 47.68s/it][Succeeded / Failed / Skipped / Total] 327 / 175 / 37 / 539:  54%|█████▍    | 539/1000 [7:08:21<6:06:21, 47.68s/it][Succeeded / Failed / Skipped / Total] 327 / 175 / 37 / 539:  54%|█████▍    | 540/1000 [7:09:32<6:05:54, 47.73s/it][Succeeded / Failed / Skipped / Total] 327 / 176 / 37 / 540:  54%|█████▍    | 540/1000 [7:09:32<6:05:54, 47.73s/it][Succeeded / Failed / Skipped / Total] 327 / 176 / 37 / 540:  54%|█████▍    | 541/1000 [7:09:37<6:04:30, 47.65s/it][Succeeded / Failed / Skipped / Total] 328 / 176 / 37 / 541:  54%|█████▍    | 541/1000 [7:09:37<6:04:30, 47.65s/it][Succeeded / Failed / Skipped / Total] 328 / 176 / 37 / 541:  54%|█████▍    | 542/1000 [7:09:56<6:03:18, 47.60s/it][Succeeded / Failed / Skipped / Total] 329 / 176 / 37 / 542:  54%|█████▍    | 542/1000 [7:09:56<6:03:18, 47.60s/it][Succeeded / Failed / Skipped / Total] 329 / 176 / 37 / 542:  54%|█████▍    | 543/1000 [7:10:30<6:02:19, 47.57s/it][Succeeded / Failed / Skipped / Total] 330 / 176 / 37 / 543:  54%|█████▍    | 543/1000 [7:10:30<6:02:19, 47.57s/it][Succeeded / Failed / Skipped / Total] 330 / 176 / 37 / 543:  54%|█████▍    | 544/1000 [7:11:10<6:01:25, 47.56s/it]--------------------------------------------- Result 533 ---------------------------------------------
Gets the bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[françoise]] ( play . api . inject . Binding < ? > ... [[ernie]] ) { return [[françoise]] ( Guiceable . [[ernie]] ( [[ernie]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Returns true if the delegate . --> Convenience method to create a new one --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[mack]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Asynchronously gets the current request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[georgette]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 536 ---------------------------------------------
Returns a file name . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[zoolander]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 537 ---------------------------------------------
Replies the type of the given type . --> Adapts a type to a type --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[railroad]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 538 ---------------------------------------------
Convert a tuple to a Tuple . --> Returns an ununmodifiable . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Punting]] < A , B > [[Punting]] ( A a , B b ) { return new [[Punting]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Convert a tuple to a tuple . --> Estimates two Tuples . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C [[c]] , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , [[c]] , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C [[mobility]] , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , [[mobility]] , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 540 ---------------------------------------------
prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new unit instance with the specified name . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[altruism]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Convenience function to create a new unit tests . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String [[acker]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[acker]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a persistence unit . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[nauseous]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[miky]] : map . entrySet ( ) ) { [[nauseous]] . add ( new JPAConfig . PersistenceUnit ( [[miky]] . getKey ( ) , [[miky]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[nauseous]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 544 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 331 / 176 / 37 / 544:  54%|█████▍    | 544/1000 [7:11:10<6:01:25, 47.56s/it][Succeeded / Failed / Skipped / Total] 331 / 176 / 37 / 544:  55%|█████▍    | 545/1000 [7:11:56<6:00:36, 47.55s/it][Succeeded / Failed / Skipped / Total] 331 / 177 / 37 / 545:  55%|█████▍    | 545/1000 [7:11:56<6:00:36, 47.55s/it][Succeeded / Failed / Skipped / Total] 331 / 177 / 37 / 545:  55%|█████▍    | 546/1000 [7:12:43<5:59:48, 47.55s/it][Succeeded / Failed / Skipped / Total] 332 / 177 / 37 / 546:  55%|█████▍    | 546/1000 [7:12:43<5:59:48, 47.55s/it][Succeeded / Failed / Skipped / Total] 332 / 177 / 37 / 546:  55%|█████▍    | 547/1000 [7:13:31<5:59:01, 47.55s/it][Succeeded / Failed / Skipped / Total] 332 / 178 / 37 / 547:  55%|█████▍    | 547/1000 [7:13:31<5:59:01, 47.55s/it][Succeeded / Failed / Skipped / Total] 332 / 178 / 37 / 547:  55%|█████▍    | 548/1000 [7:15:22<5:59:06, 47.67s/it][Succeeded / Failed / Skipped / Total] 332 / 179 / 37 / 548:  55%|█████▍    | 548/1000 [7:15:22<5:59:06, 47.67s/it][Succeeded / Failed / Skipped / Total] 332 / 179 / 37 / 548:  55%|█████▍    | 549/1000 [7:17:16<5:59:12, 47.79s/it][Succeeded / Failed / Skipped / Total] 332 / 180 / 37 / 549:  55%|█████▍    | 549/1000 [7:17:16<5:59:12, 47.79s/it][Succeeded / Failed / Skipped / Total] 332 / 180 / 37 / 549:  55%|█████▌    | 550/1000 [7:18:23<5:58:41, 47.82s/it][Succeeded / Failed / Skipped / Total] 332 / 181 / 37 / 550:  55%|█████▌    | 550/1000 [7:18:23<5:58:41, 47.82s/it][Succeeded / Failed / Skipped / Total] 332 / 181 / 37 / 550:  55%|█████▌    | 551/1000 [7:19:19<5:57:59, 47.84s/it]Convert string to string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[deputized]] ( String [[acc]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[acc]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 545 ---------------------------------------------
Convert a JSON string to a JSON string --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[benefactress]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[benefactress]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Add a constraint to the constraint . --> Add constraint to constraint --> Socre: 1.0

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[marries]] ConstraintValidator < ? , ? > > [[jacobi]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
Returns an instance of the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[machismo]] [[asthmatic]] ConstraintValidator < ? , ? > > [[machismo]] newInstance ( Class < [[machismo]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Gets the method of a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[glimpse]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 549 ---------------------------------------------
Send a request to the client . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[linz]] ( RequestHeader request , int statusCode , String [[middleton]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[middleton]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[middleton]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[middleton]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[middleton]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[middleton]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
Handle request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader request , String [[exclamations]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[exclamations]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 551 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 333 / 181 / 37 / 551:  55%|█████▌    | 551/1000 [7:19:19<5:57:59, 47.84s/it][Succeeded / Failed / Skipped / Total] 333 / 181 / 37 / 551:  55%|█████▌    | 552/1000 [7:20:29<5:57:30, 47.88s/it][Succeeded / Failed / Skipped / Total] 333 / 182 / 37 / 552:  55%|█████▌    | 552/1000 [7:20:29<5:57:30, 47.88s/it][Succeeded / Failed / Skipped / Total] 333 / 182 / 37 / 552:  55%|█████▌    | 553/1000 [7:22:18<5:57:31, 47.99s/it][Succeeded / Failed / Skipped / Total] 333 / 183 / 37 / 553:  55%|█████▌    | 553/1000 [7:22:18<5:57:31, 47.99s/it][Succeeded / Failed / Skipped / Total] 333 / 183 / 37 / 553:  55%|█████▌    | 554/1000 [7:23:07<5:56:44, 47.99s/it][Succeeded / Failed / Skipped / Total] 334 / 183 / 37 / 554:  55%|█████▌    | 554/1000 [7:23:07<5:56:44, 47.99s/it][Succeeded / Failed / Skipped / Total] 334 / 183 / 37 / 554:  56%|█████▌    | 555/1000 [7:23:36<5:55:41, 47.96s/it][Succeeded / Failed / Skipped / Total] 335 / 183 / 37 / 555:  56%|█████▌    | 555/1000 [7:23:36<5:55:41, 47.96s/it][Succeeded / Failed / Skipped / Total] 335 / 183 / 37 / 555:  56%|█████▌    | 556/1000 [7:24:44<5:55:09, 47.99s/it][Succeeded / Failed / Skipped / Total] 335 / 184 / 37 / 556:  56%|█████▌    | 556/1000 [7:24:44<5:55:09, 47.99s/it][Succeeded / Failed / Skipped / Total] 335 / 184 / 37 / 556:  56%|█████▌    | 557/1000 [7:25:53<5:54:38, 48.03s/it][Succeeded / Failed / Skipped / Total] 335 / 185 / 37 / 557:  56%|█████▌    | 557/1000 [7:25:53<5:54:38, 48.03s/it][Succeeded / Failed / Skipped / Total] 335 / 185 / 37 / 557:  56%|█████▌    | 558/1000 [7:28:56<5:55:36, 48.27s/it]Handles a request . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[settee]] , String [[glands]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[settee]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[neurons]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[neurons]] . method ( ) , [[neurons]] . uri ( ) , [[neurons]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[neurons]] . method ( ) , [[neurons]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[neurons]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[hakuna]] , Throwable [[punting]] ) { try { UsefulException [[unconquered]] = throwableToUsefulException ( [[punting]] ) ; logServerError ( [[hakuna]] , [[unconquered]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[hakuna]] , [[unconquered]] ) ; default : return onDevServerError ( [[hakuna]] , [[unconquered]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 554 ---------------------------------------------
Handles a request . --> Handle a request --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , request . method ( ) , request . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[adarsh]] ( RequestHeader request , UsefulException [[howser]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[howser]] . id , request . method ( ) , request . uri ( ) ) , [[howser]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 555 ---------------------------------------------
Ensures that the given exception is throwable . --> Convenience method for creating a throwableException --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[tardis]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 556 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader request , UsefulException [[aviators]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[aviators]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Handles an error request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader request , UsefulException [[pile]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[pile]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 186 / 37 / 558:  56%|█████▌    | 558/1000 [7:28:56<5:55:36, 48.27s/it][Succeeded / Failed / Skipped / Total] 335 / 186 / 37 / 558:  56%|█████▌    | 559/1000 [7:29:27<5:54:34, 48.24s/it][Succeeded / Failed / Skipped / Total] 336 / 186 / 37 / 559:  56%|█████▌    | 559/1000 [7:29:27<5:54:34, 48.24s/it][Succeeded / Failed / Skipped / Total] 336 / 186 / 37 / 559:  56%|█████▌    | 560/1000 [7:29:53<5:53:28, 48.20s/it][Succeeded / Failed / Skipped / Total] 337 / 186 / 37 / 560:  56%|█████▌    | 560/1000 [7:29:53<5:53:28, 48.20s/it][Succeeded / Failed / Skipped / Total] 337 / 186 / 37 / 560:  56%|█████▌    | 561/1000 [7:32:37<5:54:11, 48.41s/it][Succeeded / Failed / Skipped / Total] 337 / 187 / 37 / 561:  56%|█████▌    | 561/1000 [7:32:38<5:54:11, 48.41s/it][Succeeded / Failed / Skipped / Total] 337 / 187 / 37 / 561:  56%|█████▌    | 562/1000 [7:34:32<5:54:15, 48.53s/it][Succeeded / Failed / Skipped / Total] 337 / 188 / 37 / 562:  56%|█████▌    | 562/1000 [7:34:32<5:54:15, 48.53s/it][Succeeded / Failed / Skipped / Total] 337 / 188 / 37 / 562:  56%|█████▋    | 563/1000 [7:34:37<5:52:52, 48.45s/it][Succeeded / Failed / Skipped / Total] 338 / 188 / 37 / 563:  56%|█████▋    | 563/1000 [7:34:37<5:52:52, 48.45s/it][Succeeded / Failed / Skipped / Total] 338 / 188 / 37 / 563:  56%|█████▋    | 564/1000 [7:34:42<5:51:30, 48.37s/it][Succeeded / Failed / Skipped / Total] 339 / 188 / 37 / 564:  56%|█████▋    | 564/1000 [7:34:42<5:51:30, 48.37s/it][Succeeded / Failed / Skipped / Total] 339 / 188 / 37 / 564:  56%|█████▋    | 565/1000 [7:35:17<5:50:31, 48.35s/it][Succeeded / Failed / Skipped / Total] 340 / 188 / 37 / 565:  56%|█████▋    | 565/1000 [7:35:17<5:50:31, 48.35s/it][Succeeded / Failed / Skipped / Total] 340 / 188 / 37 / 565:  57%|█████▋    | 566/1000 [7:36:29<5:50:02, 48.39s/it]Iterates through the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[baseDirs]] ) throws IOException { assert ( files . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String [[baseDir]] = [[baseDirs]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[cropped]] ) throws IOException { assert ( files . length == [[cropped]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String [[carbo]] = [[cropped]] [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new directory . --> Get the repository --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[tucci]] ( File [[ashe]] ) { FileRepository repo = new FilesystemRepository ( [[ashe]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Convert a directory to a directory . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[skeleton]] ( File directory , JarFile jarFile , String base ) { return [[skeleton]] ( directory , jarFile , base , "[[Shushing]]" != "[[Shushing]]" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 561 ---------------------------------------------
Creates a new jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean [[fallbackToJar]] ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[fallbackToJar]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean [[toho]] ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[toho]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Create a new repository . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[jarFile]] , String [[base]] ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile [[jogger]] , String [[bluto]] ) { FileRepository repo = new JarRepository ( [[jogger]] , Option . apply ( [[bluto]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Convert a byte array to a byte array . --> Convert a String to a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[chapel]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[chapel]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 564 ---------------------------------------------
Helper method to parse content . --> Send a request to a string --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content content , String charset ) { String [[quattro]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Generates a charset . --> Convert text to charset --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[windowseat]] ( String [[demonology]] , String charset ) { return new Strict ( ByteString . fromString ( [[demonology]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 340 / 189 / 37 / 566:  57%|█████▋    | 566/1000 [7:36:29<5:50:02, 48.39s/it][Succeeded / Failed / Skipped / Total] 340 / 189 / 37 / 566:  57%|█████▋    | 567/1000 [7:37:41<5:49:31, 48.43s/it][Succeeded / Failed / Skipped / Total] 341 / 189 / 37 / 567:  57%|█████▋    | 567/1000 [7:37:41<5:49:31, 48.43s/it][Succeeded / Failed / Skipped / Total] 341 / 189 / 37 / 567:  57%|█████▋    | 568/1000 [7:39:10<5:49:13, 48.50s/it][Succeeded / Failed / Skipped / Total] 342 / 189 / 37 / 568:  57%|█████▋    | 568/1000 [7:39:10<5:49:13, 48.50s/it][Succeeded / Failed / Skipped / Total] 342 / 189 / 37 / 568:  57%|█████▋    | 569/1000 [7:40:19<5:48:41, 48.54s/it][Succeeded / Failed / Skipped / Total] 342 / 190 / 37 / 569:  57%|█████▋    | 569/1000 [7:40:19<5:48:41, 48.54s/it][Succeeded / Failed / Skipped / Total] 342 / 190 / 37 / 569:  57%|█████▋    | 570/1000 [7:40:24<5:47:19, 48.46s/it][Succeeded / Failed / Skipped / Total] 343 / 190 / 37 / 570:  57%|█████▋    | 570/1000 [7:40:24<5:47:19, 48.46s/it][Succeeded / Failed / Skipped / Total] 343 / 190 / 37 / 570:  57%|█████▋    | 571/1000 [7:42:03<5:47:09, 48.55s/it][Succeeded / Failed / Skipped / Total] 343 / 191 / 37 / 571:  57%|█████▋    | 571/1000 [7:42:03<5:47:09, 48.55s/it][Succeeded / Failed / Skipped / Total] 343 / 191 / 38 / 572:  57%|█████▋    | 572/1000 [7:42:03<5:45:44, 48.47s/it][Succeeded / Failed / Skipped / Total] 343 / 191 / 38 / 572:  57%|█████▋    | 573/1000 [7:42:41<5:44:47, 48.45s/it][Succeeded / Failed / Skipped / Total] 344 / 191 / 38 / 573:  57%|█████▋    | 573/1000 [7:42:41<5:44:47, 48.45s/it][Succeeded / Failed / Skipped / Total] 344 / 191 / 38 / 573:  57%|█████▋    | 574/1000 [7:43:03<5:43:39, 48.40s/it][Succeeded / Failed / Skipped / Total] 344 / 192 / 38 / 574:  57%|█████▋    | 574/1000 [7:43:03<5:43:39, 48.40s/it][Succeeded / Failed / Skipped / Total] 344 / 192 / 38 / 574:  57%|█████▊    | 575/1000 [7:43:48<5:42:48, 48.40s/it][Succeeded / Failed / Skipped / Total] 344 / 193 / 38 / 575:  57%|█████▊    | 575/1000 [7:43:48<5:42:48, 48.40s/it][Succeeded / Failed / Skipped / Total] 344 / 193 / 38 / 575:  58%|█████▊    | 576/1000 [7:44:03<5:41:35, 48.34s/it][Succeeded / Failed / Skipped / Total] 345 / 193 / 38 / 576:  58%|█████▊    | 576/1000 [7:44:03<5:41:35, 48.34s/it][Succeeded / Failed / Skipped / Total] 345 / 193 / 38 / 576:  58%|█████▊    | 577/1000 [7:44:28<5:40:30, 48.30s/it][Succeeded / Failed / Skipped / Total] 346 / 193 / 38 / 577:  58%|█████▊    | 577/1000 [7:44:28<5:40:30, 48.30s/it][Succeeded / Failed / Skipped / Total] 346 / 193 / 38 / 577:  58%|█████▊    | 578/1000 [7:45:41<5:40:00, 48.34s/it]Converts a map to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[blockbuster]] ( Source < ByteString , ? > [[fouls]] , Optional < String > contentType ) { return new Chunked ( [[fouls]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 567 ---------------------------------------------
Returns a JSON representation of a node . --> Convenient to UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[thessaloniki]] , JsonNode [[jaeger]] ) { return status ( status , [[jaeger]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Helper method to create a JSON response . --> Send status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[pawn]] , JsonNode [[dimitrios]] , JsonEncoding [[ljungberg]] ) { if ( [[dimitrios]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[dimitrios]] , [[ljungberg]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 569 ---------------------------------------------
Convert a string to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[readied]] ) { if ( [[readied]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[readied]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 570 ---------------------------------------------
Copies the content from a stream . --> Send an InputStream to an InputStream --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[fuera]] , long contentLength ) { return status ( status ) . sendInputStream ( [[fuera]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 571 ---------------------------------------------
Construct a file from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[piqued]] ( int [[cone]] , File [[carmichael]] ) { return [[piqued]] ( [[piqued]] , [[carmichael]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 572 ---------------------------------------------
Returns the user with the given id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 573 ---------------------------------------------
Generates a new Collection . --> Liefert die legegeben diebeneben --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[guevara]] ( Collection < Lang > [[amplify]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[amplify]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 574 ---------------------------------------------
Make a call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[instinct]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 575 ---------------------------------------------
Creates a new fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[lestat]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[lestat]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Replies the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[phenobarbital]] ( Http . Request request ) { return [[phenobarbital]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 577 ---------------------------------------------
Make a http request . --> Indicate that the Zookeeper --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[judicious]] ( Http . Request [[ashkenazi]] ) { return [[judicious]] ( [[ashkenazi]] . secure ( ) , [[ashkenazi]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 578 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 194 / 38 / 578:  58%|█████▊    | 578/1000 [7:45:41<5:40:00, 48.34s/it][Succeeded / Failed / Skipped / Total] 346 / 194 / 38 / 578:  58%|█████▊    | 579/1000 [7:46:21<5:39:05, 48.33s/it][Succeeded / Failed / Skipped / Total] 346 / 195 / 38 / 579:  58%|█████▊    | 579/1000 [7:46:21<5:39:05, 48.33s/it][Succeeded / Failed / Skipped / Total] 346 / 195 / 38 / 579:  58%|█████▊    | 580/1000 [7:48:22<5:39:10, 48.45s/it][Succeeded / Failed / Skipped / Total] 346 / 196 / 38 / 580:  58%|█████▊    | 580/1000 [7:48:22<5:39:10, 48.45s/it][Succeeded / Failed / Skipped / Total] 346 / 196 / 38 / 580:  58%|█████▊    | 581/1000 [7:48:48<5:38:05, 48.41s/it][Succeeded / Failed / Skipped / Total] 347 / 196 / 38 / 581:  58%|█████▊    | 581/1000 [7:48:48<5:38:05, 48.41s/it][Succeeded / Failed / Skipped / Total] 347 / 196 / 38 / 581:  58%|█████▊    | 582/1000 [7:48:58<5:36:49, 48.35s/it][Succeeded / Failed / Skipped / Total] 348 / 196 / 38 / 582:  58%|█████▊    | 582/1000 [7:48:58<5:36:49, 48.35s/it][Succeeded / Failed / Skipped / Total] 348 / 196 / 38 / 582:  58%|█████▊    | 583/1000 [7:49:32<5:35:51, 48.32s/it][Succeeded / Failed / Skipped / Total] 349 / 196 / 38 / 583:  58%|█████▊    | 583/1000 [7:49:32<5:35:51, 48.32s/it][Succeeded / Failed / Skipped / Total] 349 / 196 / 38 / 583:  58%|█████▊    | 584/1000 [7:50:20<5:35:02, 48.32s/it][Succeeded / Failed / Skipped / Total] 349 / 197 / 38 / 584:  58%|█████▊    | 584/1000 [7:50:20<5:35:02, 48.32s/it][Succeeded / Failed / Skipped / Total] 349 / 197 / 38 / 584:  58%|█████▊    | 585/1000 [7:51:40<5:34:36, 48.38s/it][Succeeded / Failed / Skipped / Total] 349 / 198 / 38 / 585:  58%|█████▊    | 585/1000 [7:51:40<5:34:36, 48.38s/it][Succeeded / Failed / Skipped / Total] 349 / 198 / 38 / 585:  59%|█████▊    | 586/1000 [7:53:27<5:34:29, 48.48s/it][Succeeded / Failed / Skipped / Total] 350 / 198 / 38 / 586:  59%|█████▊    | 586/1000 [7:53:27<5:34:29, 48.48s/it][Succeeded / Failed / Skipped / Total] 350 / 198 / 38 / 586:  59%|█████▊    | 587/1000 [7:54:16<5:33:41, 48.48s/it]Returns a new connection to a connection --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[durning]] ( final ConnectionRunnable [[tucked]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[tucked]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 579 ---------------------------------------------
Allocate a connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[cobra]] ) { try { return block . call ( [[cobra]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Construct a new instance of the given port . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server forRouter ( Mode [[mode]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server forRouter ( Mode [[hexagonal]] , int port , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . [[hexagonal]] ( [[hexagonal]] ) . http ( port ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 581 ---------------------------------------------
Convert an object to a JsonNode --> Convenience factory method for creating a JSONArray --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[chitchat]] ( final Object [[disparate]] ) { try { return mapper ( ) . valueToTree ( [[disparate]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Convert JsonNode to JsonNode --> json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[tentative]] > [[tentative]] fromJson ( JsonNode json , Class < [[tentative]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 583 ---------------------------------------------
Parse a string . --> Decode Node --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[bargain]] ( String [[seatbelts]] ) { try { return mapper ( ) . readTree ( [[seatbelts]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Parse the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[emptier]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns the relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[cornball]] ( String [[reflexes]] , String [[scurried]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Returns the canonical canonical path . --> Extracts the url of the given url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] [[urlPath]] = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String [[comp]] : [[urlPath]] ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( [[comp]] ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[prophets]] ( String url ) { String [ ] [[festivals]] = toSegments ( url ) ; Stack < String > [[prophets]] = new Stack <> ( ) ; for ( String [[sniffling]] : [[festivals]] ) { if ( [[sniffling]] . isEmpty ( ) || [[sniffling]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[sniffling]] . equals ( PARENT_DIR ) || ( ! [[prophets]] . empty ( ) && [[prophets]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[prophets]] . push ( [[sniffling]] ) ; else [[prophets]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[enhancement]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[prophets]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[enhancement]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 587 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 199 / 38 / 587:  59%|█████▊    | 587/1000 [7:54:16<5:33:41, 48.48s/it][Succeeded / Failed / Skipped / Total] 350 / 199 / 38 / 587:  59%|█████▉    | 588/1000 [7:55:04<5:32:52, 48.48s/it][Succeeded / Failed / Skipped / Total] 351 / 199 / 38 / 588:  59%|█████▉    | 588/1000 [7:55:04<5:32:52, 48.48s/it][Succeeded / Failed / Skipped / Total] 351 / 199 / 38 / 588:  59%|█████▉    | 589/1000 [7:55:16<5:31:38, 48.42s/it][Succeeded / Failed / Skipped / Total] 352 / 199 / 38 / 589:  59%|█████▉    | 589/1000 [7:55:16<5:31:38, 48.42s/it][Succeeded / Failed / Skipped / Total] 352 / 199 / 38 / 589:  59%|█████▉    | 590/1000 [7:55:57<5:30:45, 48.40s/it][Succeeded / Failed / Skipped / Total] 353 / 199 / 38 / 590:  59%|█████▉    | 590/1000 [7:55:57<5:30:45, 48.40s/it][Succeeded / Failed / Skipped / Total] 353 / 199 / 38 / 590:  59%|█████▉    | 591/1000 [7:56:30<5:29:46, 48.38s/it][Succeeded / Failed / Skipped / Total] 354 / 199 / 38 / 591:  59%|█████▉    | 591/1000 [7:56:30<5:29:46, 48.38s/it][Succeeded / Failed / Skipped / Total] 354 / 199 / 38 / 591:  59%|█████▉    | 592/1000 [7:56:41<5:28:32, 48.31s/it][Succeeded / Failed / Skipped / Total] 355 / 199 / 38 / 592:  59%|█████▉    | 592/1000 [7:56:41<5:28:32, 48.31s/it][Succeeded / Failed / Skipped / Total] 355 / 199 / 38 / 592:  59%|█████▉    | 593/1000 [8:00:32<5:29:48, 48.62s/it][Succeeded / Failed / Skipped / Total] 356 / 199 / 38 / 593:  59%|█████▉    | 593/1000 [8:00:32<5:29:48, 48.62s/it][Succeeded / Failed / Skipped / Total] 356 / 199 / 38 / 593:  59%|█████▉    | 594/1000 [8:01:06<5:28:50, 48.60s/it]Returns all constraints of the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[charger]] ( Set < ConstraintDescriptor < ? > > [[unleash]] ) { return [[unleash]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[charger]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 588 ---------------------------------------------
Convenience method for creating a List --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[deadbeats]] ( ConstraintDescriptor < ? > constraint ) { final Display [[sunken]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[sunken]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[sunken]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 589 ---------------------------------------------
Initiates a serial portion --> Convenience function to call asynchronously --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long [[jet]] , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[jet]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 590 ---------------------------------------------
Returns the array of primitives for a given class . --> Obtain a ClassArray from a constructor --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( [[isAssignable]] ( classArray [ [[i]] ] , toClassArray [ [[i]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[machete]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[vehicles]] = 0 ; [[vehicles]] < classArray . length ; [[vehicles]] ++ ) { if ( [[machete]] ( classArray [ [[vehicles]] ] , toClassArray [ [[vehicles]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 591 ---------------------------------------------
Create a Date from a string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[valparaiso]] ( String [[exaggerate]] ) { try { return new CronExpression ( [[exaggerate]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[exaggerate]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 592 ---------------------------------------------
Returns a date from a String . --> Get cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[bennet]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 593 ---------------------------------------------
Create a new AAmazon client . --> Initialize Acampaiguy cache --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[config]] , cache , [[materializer]] ) ; return new AhcWSClient ( client , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[femininity]] , AhcHttpCache cache , Materializer [[commons]] ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[femininity]] , cache , [[commons]] ) ; return new AhcWSClient ( client , [[commons]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 594 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 356 / 200 / 38 / 594:  59%|█████▉    | 594/1000 [8:01:06<5:28:50, 48.60s/it][Succeeded / Failed / Skipped / Total] 356 / 200 / 38 / 594:  60%|█████▉    | 595/1000 [8:01:52<5:27:59, 48.59s/it][Succeeded / Failed / Skipped / Total] 356 / 201 / 38 / 595:  60%|█████▉    | 595/1000 [8:01:52<5:27:59, 48.59s/it][Succeeded / Failed / Skipped / Total] 356 / 201 / 38 / 595:  60%|█████▉    | 596/1000 [8:02:35<5:27:07, 48.58s/it][Succeeded / Failed / Skipped / Total] 357 / 201 / 38 / 596:  60%|█████▉    | 596/1000 [8:02:35<5:27:07, 48.58s/it][Succeeded / Failed / Skipped / Total] 357 / 201 / 38 / 596:  60%|█████▉    | 597/1000 [8:03:49<5:26:36, 48.63s/it][Succeeded / Failed / Skipped / Total] 358 / 201 / 38 / 597:  60%|█████▉    | 597/1000 [8:03:49<5:26:36, 48.63s/it][Succeeded / Failed / Skipped / Total] 358 / 201 / 38 / 597:  60%|█████▉    | 598/1000 [8:04:23<5:25:37, 48.60s/it][Succeeded / Failed / Skipped / Total] 359 / 201 / 38 / 598:  60%|█████▉    | 598/1000 [8:04:23<5:25:37, 48.60s/it][Succeeded / Failed / Skipped / Total] 359 / 201 / 38 / 598:  60%|█████▉    | 599/1000 [8:04:44<5:24:30, 48.55s/it][Succeeded / Failed / Skipped / Total] 359 / 202 / 38 / 599:  60%|█████▉    | 599/1000 [8:04:44<5:24:30, 48.55s/it][Succeeded / Failed / Skipped / Total] 359 / 202 / 38 / 599:  60%|██████    | 600/1000 [8:05:06<5:23:24, 48.51s/it][Succeeded / Failed / Skipped / Total] 360 / 202 / 38 / 600:  60%|██████    | 600/1000 [8:05:06<5:23:24, 48.51s/it][Succeeded / Failed / Skipped / Total] 360 / 202 / 38 / 600:  60%|██████    | 601/1000 [8:05:18<5:22:11, 48.45s/it][Succeeded / Failed / Skipped / Total] 361 / 202 / 38 / 601:  60%|██████    | 601/1000 [8:05:18<5:22:11, 48.45s/it][Succeeded / Failed / Skipped / Total] 361 / 202 / 38 / 601:  60%|██████    | 602/1000 [8:05:24<5:20:55, 48.38s/it][Succeeded / Failed / Skipped / Total] 362 / 202 / 38 / 602:  60%|██████    | 602/1000 [8:05:24<5:20:55, 48.38s/it][Succeeded / Failed / Skipped / Total] 362 / 202 / 38 / 602:  60%|██████    | 603/1000 [8:06:05<5:20:02, 48.37s/it][Succeeded / Failed / Skipped / Total] 363 / 202 / 38 / 603:  60%|██████    | 603/1000 [8:06:05<5:20:02, 48.37s/it][Succeeded / Failed / Skipped / Total] 363 / 202 / 38 / 603:  60%|██████    | 604/1000 [8:07:07<5:19:22, 48.39s/it][Succeeded / Failed / Skipped / Total] 363 / 203 / 38 / 604:  60%|██████    | 604/1000 [8:07:07<5:19:22, 48.39s/it][Succeeded / Failed / Skipped / Total] 363 / 203 / 38 / 604:  60%|██████    | 605/1000 [8:07:16<5:18:08, 48.32s/it][Succeeded / Failed / Skipped / Total] 364 / 203 / 38 / 605:  60%|██████    | 605/1000 [8:07:16<5:18:08, 48.32s/it][Succeeded / Failed / Skipped / Total] 364 / 203 / 38 / 605:  61%|██████    | 606/1000 [8:08:27<5:17:34, 48.36s/it]Builds the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[viktor]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 595 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[TODO]] ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[COLLEGUES]] ( Request [[dissected]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[dissected]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 596 ---------------------------------------------
Put a value into the cache . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String value ) { [[session]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[anointest]] ( String [[gainsborough]] , String value ) { [[anointest]] ( ) . put ( [[gainsborough]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Adds a value to the map . --> Generate principal principal --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[saso]] ( String [[drooled]] , String [[principals]] ) { [[saso]] ( ) . put ( [[drooled]] , [[principals]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 598 ---------------------------------------------
A helper function to create a Java annotation . --> Unregisters a AmazonContext --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[whiplash]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Returns an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[shaun]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 600 ---------------------------------------------
Returns a Java implementation for the given type . --> Return a JavaBean --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[circulation]] ) { return underlying . to ( [[circulation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
Returns provider . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[protests]] ) { return underlying . to ( [[protests]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 602 ---------------------------------------------
Converts a Java JavaObjects to a Java object . --> Convenience method for creating a new Java Supplier --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[keying]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns the value associated with the given key . --> Convenience method for creating a new one --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[arbogast]] ( final BindingKey < ? extends T > [[restroom]] ) { return underlying . to ( [[restroom]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Gets the provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[kuala]] Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[tylko]] ) { return underlying . toProvider ( [[tylko]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of handlers . --> Return a list of applications --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[wuzzy]] ( Application app ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
[Succeeded / Failed / Skipped / Total] 365 / 203 / 38 / 606:  61%|██████    | 606/1000 [8:08:27<5:17:34, 48.36s/it][Succeeded / Failed / Skipped / Total] 365 / 203 / 38 / 606:  61%|██████    | 607/1000 [8:10:28<5:17:33, 48.48s/it][Succeeded / Failed / Skipped / Total] 365 / 204 / 38 / 607:  61%|██████    | 607/1000 [8:10:28<5:17:33, 48.48s/it][Succeeded / Failed / Skipped / Total] 365 / 204 / 38 / 607:  61%|██████    | 608/1000 [8:13:17<5:18:02, 48.68s/it][Succeeded / Failed / Skipped / Total] 365 / 205 / 38 / 608:  61%|██████    | 608/1000 [8:13:17<5:18:02, 48.68s/it][Succeeded / Failed / Skipped / Total] 365 / 205 / 38 / 608:  61%|██████    | 609/1000 [8:14:05<5:17:13, 48.68s/it][Succeeded / Failed / Skipped / Total] 366 / 205 / 38 / 609:  61%|██████    | 609/1000 [8:14:05<5:17:13, 48.68s/it][Succeeded / Failed / Skipped / Total] 366 / 205 / 38 / 609:  61%|██████    | 610/1000 [8:15:05<5:16:32, 48.70s/it][Succeeded / Failed / Skipped / Total] 366 / 206 / 38 / 610:  61%|██████    | 610/1000 [8:15:05<5:16:32, 48.70s/it][Succeeded / Failed / Skipped / Total] 366 / 206 / 38 / 610:  61%|██████    | 611/1000 [8:15:27<5:15:26, 48.65s/it][Succeeded / Failed / Skipped / Total] 367 / 206 / 38 / 611:  61%|██████    | 611/1000 [8:15:27<5:15:26, 48.65s/it][Succeeded / Failed / Skipped / Total] 367 / 206 / 38 / 611:  61%|██████    | 612/1000 [8:15:31<5:14:09, 48.58s/it][Succeeded / Failed / Skipped / Total] 368 / 206 / 38 / 612:  61%|██████    | 612/1000 [8:15:31<5:14:09, 48.58s/it][Succeeded / Failed / Skipped / Total] 368 / 206 / 38 / 612:  61%|██████▏   | 613/1000 [8:16:14<5:13:17, 48.57s/it][Succeeded / Failed / Skipped / Total] 369 / 206 / 38 / 613:  61%|██████▏   | 613/1000 [8:16:14<5:13:17, 48.57s/it][Succeeded / Failed / Skipped / Total] 369 / 206 / 38 / 613:  61%|██████▏   | 614/1000 [8:16:49<5:12:20, 48.55s/it][Succeeded / Failed / Skipped / Total] 370 / 206 / 38 / 614:  61%|██████▏   | 614/1000 [8:16:49<5:12:20, 48.55s/it][Succeeded / Failed / Skipped / Total] 370 / 206 / 38 / 614:  62%|██████▏   | 615/1000 [8:17:36<5:11:30, 48.55s/it]--------------------------------------------- Result 606 ---------------------------------------------
Returns a list of applications . --> Construct a list of applications --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[moha]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[hendricks]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[hendricks]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 607 ---------------------------------------------
Converts a Euclidevolue representation to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[allison]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Creates a new map with the given map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[swayed]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[molokai]] = new HashMap < String , List < Evolution > > ( ) ; [[molokai]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[molokai]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 609 ---------------------------------------------
Initializes the database . --> Overridden to create a region --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[bournemouth]] ( Database [[arsene]] , boolean autocommit , String schema ) { DatabaseEvolutions [[accelerates]] = new DatabaseEvolutions ( [[arsene]] . asScala ( ) , schema ) ; [[accelerates]] . evolve ( [[accelerates]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 610 ---------------------------------------------
Load a configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[tuya]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[tuya]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
Export a modules . --> Unload a configuration --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[galia]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[galia]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 612 ---------------------------------------------
Loads a modules . --> Returns a new Alluxilipsution --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[paducah]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[paducah]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 613 ---------------------------------------------
Load modules . --> Swarmfp resources --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[farming]] ( com . google . inject . Module ... [[whitlow]] ) { return [[farming]] ( Guiceable . [[whitlow]] ( [[whitlow]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 614 ---------------------------------------------
Returns the modules . --> Get unary unary unary --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[unwary]] ( play . api . inject . Module ... [[collie]] ) { return [[unwary]] ( Guiceable . [[collie]] ( [[collie]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
[Succeeded / Failed / Skipped / Total] 370 / 207 / 38 / 615:  62%|██████▏   | 615/1000 [8:17:36<5:11:30, 48.55s/it][Succeeded / Failed / Skipped / Total] 370 / 207 / 38 / 615:  62%|██████▏   | 616/1000 [8:18:02<5:10:27, 48.51s/it][Succeeded / Failed / Skipped / Total] 371 / 207 / 38 / 616:  62%|██████▏   | 616/1000 [8:18:02<5:10:27, 48.51s/it][Succeeded / Failed / Skipped / Total] 371 / 207 / 38 / 616:  62%|██████▏   | 617/1000 [8:18:47<5:09:37, 48.50s/it][Succeeded / Failed / Skipped / Total] 372 / 207 / 38 / 617:  62%|██████▏   | 617/1000 [8:18:47<5:09:37, 48.50s/it][Succeeded / Failed / Skipped / Total] 372 / 207 / 38 / 617:  62%|██████▏   | 618/1000 [8:19:20<5:08:39, 48.48s/it][Succeeded / Failed / Skipped / Total] 373 / 207 / 38 / 618:  62%|██████▏   | 618/1000 [8:19:20<5:08:39, 48.48s/it][Succeeded / Failed / Skipped / Total] 373 / 207 / 38 / 618:  62%|██████▏   | 619/1000 [8:20:29<5:08:03, 48.51s/it][Succeeded / Failed / Skipped / Total] 374 / 207 / 38 / 619:  62%|██████▏   | 619/1000 [8:20:29<5:08:03, 48.51s/it][Succeeded / Failed / Skipped / Total] 374 / 207 / 38 / 619:  62%|██████▏   | 620/1000 [8:22:08<5:07:45, 48.59s/it][Succeeded / Failed / Skipped / Total] 374 / 208 / 38 / 620:  62%|██████▏   | 620/1000 [8:22:08<5:07:45, 48.59s/it][Succeeded / Failed / Skipped / Total] 374 / 208 / 38 / 620:  62%|██████▏   | 621/1000 [8:23:33<5:07:19, 48.65s/it][Succeeded / Failed / Skipped / Total] 375 / 208 / 38 / 621:  62%|██████▏   | 621/1000 [8:23:33<5:07:19, 48.65s/it][Succeeded / Failed / Skipped / Total] 375 / 208 / 38 / 621:  62%|██████▏   | 622/1000 [8:27:08<5:08:11, 48.92s/it]--------------------------------------------- Result 615 ---------------------------------------------
Loads bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[whities]] ( play . api . inject . Binding < ? > ... [[oohhh]] ) { return [[whities]] ( Guiceable . [[oohhh]] ( [[oohhh]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Creates a new builder . --> Build a ApplicationContext --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[mcshane]] ( play . api . inject . guice . GuiceApplicationBuilder [[cyborg]] ) { return new GuiceApplicationBuilder ( [[cyborg]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Encodes the cookie . --> Convert string to string --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[overlook]] ( Cookie [[envision]] ) { if ( [[envision]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[bluto]] = new StringBuilder ( ) ; [[overlook]] ( [[bluto]] , [[envision]] ) ; return stripTrailingSeparator ( [[bluto]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
Executes the given entity . --> Obtain a new instance --> Socre: 1.0

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > [[surer]] = this . emStack ( "[[Groomer]]" == "[[Groomer]]" ) ; if ( [[surer]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[surer]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Checks whether the given entity is valid . --> Implementation of JMBean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[qaeda]] ( boolean [[blane]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[hayato]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[hayato]] ) ; return [[hayato]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 620 ---------------------------------------------
Sets the current entities . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > [[ems]] = this . emStack ( threadLocalFallback ) ; if ( em != null ) { [[ems]] . push ( em ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[maestra]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > [[brinks]] = this . emStack ( threadLocalFallback ) ; if ( em != null ) { [[brinks]] . push ( em ) ; } else { if ( [[brinks]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[brinks]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Creates a flow . --> Create a molecule --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > [[bypassWith]] ( Function < In , F . Either < [[FlowIn]] , [[Out]] > > splitter , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , [[machiavelli]] , [[Psychopath]] > Flow < In , [[Psychopath]] , ? > [[chipman]] ( Function < In , F . Either < [[machiavelli]] , [[Psychopath]] > > splitter , Flow < [[machiavelli]] , [[Psychopath]] , ? > flow ) { return [[chipman]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 209 / 38 / 622:  62%|██████▏   | 622/1000 [8:27:08<5:08:11, 48.92s/it][Succeeded / Failed / Skipped / Total] 375 / 209 / 38 / 622:  62%|██████▏   | 623/1000 [8:29:07<5:08:05, 49.03s/it][Succeeded / Failed / Skipped / Total] 376 / 209 / 38 / 623:  62%|██████▏   | 623/1000 [8:29:07<5:08:05, 49.03s/it][Succeeded / Failed / Skipped / Total] 376 / 209 / 38 / 623:  62%|██████▏   | 624/1000 [8:29:56<5:07:16, 49.03s/it][Succeeded / Failed / Skipped / Total] 377 / 209 / 38 / 624:  62%|██████▏   | 624/1000 [8:29:56<5:07:16, 49.03s/it][Succeeded / Failed / Skipped / Total] 377 / 209 / 38 / 624:  62%|██████▎   | 625/1000 [8:30:06<5:06:03, 48.97s/it][Succeeded / Failed / Skipped / Total] 378 / 209 / 38 / 625:  62%|██████▎   | 625/1000 [8:30:06<5:06:03, 48.97s/it][Succeeded / Failed / Skipped / Total] 378 / 209 / 38 / 625:  63%|██████▎   | 626/1000 [8:30:11<5:04:48, 48.90s/it][Succeeded / Failed / Skipped / Total] 379 / 209 / 38 / 626:  63%|██████▎   | 626/1000 [8:30:11<5:04:48, 48.90s/it][Succeeded / Failed / Skipped / Total] 379 / 209 / 38 / 626:  63%|██████▎   | 627/1000 [8:30:21<5:03:36, 48.84s/it][Succeeded / Failed / Skipped / Total] 380 / 209 / 38 / 627:  63%|██████▎   | 627/1000 [8:30:21<5:03:36, 48.84s/it][Succeeded / Failed / Skipped / Total] 380 / 209 / 38 / 627:  63%|██████▎   | 628/1000 [8:30:30<5:02:23, 48.77s/it][Succeeded / Failed / Skipped / Total] 381 / 209 / 38 / 628:  63%|██████▎   | 628/1000 [8:30:30<5:02:23, 48.77s/it][Succeeded / Failed / Skipped / Total] 381 / 209 / 38 / 628:  63%|██████▎   | 629/1000 [8:30:39<5:01:12, 48.71s/it]Creates a flow from a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , [[Out]] > Flow < [[In]] , [[Out]] , ? > bypassWith ( Flow < [[In]] , F . Either < FlowIn , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < FlowIn , [[Out]] , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Begins]] , FlowIn , [[Decisively]] > Flow < [[Begins]] , [[Decisively]] , ? > bypassWith ( Flow < [[Begins]] , F . Either < FlowIn , [[Decisively]] > , ? > splitter , Graph < UniformFanInShape < [[Decisively]] , [[Decisively]] > , ? > mergeStrategy , Flow < FlowIn , [[Decisively]] , ? > [[headman]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , [[Decisively]] > , [[Decisively]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 623 ---------------------------------------------
Create a new generator . --> Static factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[bufferSize]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[instinctive]] ( Function < ActorRef , Props > props , int [[detests]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[detests]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 624 ---------------------------------------------
Converts the given arguments to a list of arguments . --> Converts a list of objects to a List --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[gabe]] ( Object [ ] [[board]] ) { if ( [[board]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[board]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 625 ---------------------------------------------
Generates a new value for the given value . --> Method to initialize a new instance --> Socre: 1.0

[[[[Adv]]]]: public Form < T > [[fill]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[airports]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 626 ---------------------------------------------
Returns an unmodifiable collection of errors . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[quanah]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 627 ---------------------------------------------
Returns a list of messages . --> Return a list of error messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[lang]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang [[detonator]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[detonator]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[detonator]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[detonator]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 628 ---------------------------------------------
Get the value associated with this key . --> Returns a map of keys --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > value ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String [[concession]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[concession]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 629 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 382 / 209 / 38 / 629:  63%|██████▎   | 629/1000 [8:30:39<5:01:12, 48.71s/it][Succeeded / Failed / Skipped / Total] 382 / 209 / 38 / 629:  63%|██████▎   | 630/1000 [8:30:44<4:59:57, 48.64s/it][Succeeded / Failed / Skipped / Total] 383 / 209 / 38 / 630:  63%|██████▎   | 630/1000 [8:30:44<4:59:57, 48.64s/it][Succeeded / Failed / Skipped / Total] 383 / 209 / 38 / 630:  63%|██████▎   | 631/1000 [8:30:49<4:58:43, 48.57s/it][Succeeded / Failed / Skipped / Total] 384 / 209 / 38 / 631:  63%|██████▎   | 631/1000 [8:30:49<4:58:43, 48.57s/it][Succeeded / Failed / Skipped / Total] 384 / 209 / 38 / 631:  63%|██████▎   | 632/1000 [8:30:53<4:57:28, 48.50s/it][Succeeded / Failed / Skipped / Total] 385 / 209 / 38 / 632:  63%|██████▎   | 632/1000 [8:30:53<4:57:28, 48.50s/it][Succeeded / Failed / Skipped / Total] 385 / 209 / 38 / 632:  63%|██████▎   | 633/1000 [8:31:13<4:56:23, 48.46s/it][Succeeded / Failed / Skipped / Total] 385 / 210 / 38 / 633:  63%|██████▎   | 633/1000 [8:31:13<4:56:23, 48.46s/it][Succeeded / Failed / Skipped / Total] 385 / 210 / 38 / 633:  63%|██████▎   | 634/1000 [8:31:35<4:55:19, 48.42s/it][Succeeded / Failed / Skipped / Total] 385 / 211 / 38 / 634:  63%|██████▎   | 634/1000 [8:31:35<4:55:19, 48.42s/it][Succeeded / Failed / Skipped / Total] 385 / 211 / 39 / 635:  64%|██████▎   | 635/1000 [8:31:35<4:54:03, 48.34s/it][Succeeded / Failed / Skipped / Total] 385 / 211 / 39 / 635:  64%|██████▎   | 636/1000 [8:33:10<4:53:42, 48.41s/it][Succeeded / Failed / Skipped / Total] 385 / 212 / 39 / 636:  64%|██████▎   | 636/1000 [8:33:10<4:53:42, 48.41s/it][Succeeded / Failed / Skipped / Total] 385 / 212 / 39 / 636:  64%|██████▎   | 637/1000 [8:33:23<4:52:33, 48.36s/it]Returns the form of the form . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[piano]] ( Map < String , Object > value ) { Form < Dynamic > form = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 630 ---------------------------------------------
Converts text to text . --> Convert text to text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[file]] > [[file]] parse ( String text , Class < [[file]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 631 ---------------------------------------------
Returns a text field . --> Parse text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[horrified]] > [[horrified]] parse ( Field field , String text ) { return ( [[horrified]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 632 ---------------------------------------------
Convert a string to a string . --> Convert a class to a conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Michale]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Michale]] . class ) ) { return conversion . convert ( t , [[Michale]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 633 ---------------------------------------------
Print a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Funeral]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 634 ---------------------------------------------
Convert a conversion to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Lingo]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Lingo]] . class ) ) ) { return ( [[Lingo]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Lingo]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Lingo]] . class ) ) { return conversion . convert ( t , [[Lingo]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 635 ---------------------------------------------
Registers the given type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Converts a locale to a locale . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale [[locale]] ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , [[locale]] ) ; } public String print ( T t , Locale [[locale]] ) { return formatter . print ( t , [[locale]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[speculum]] , Locale [[menthols]] ) throws java . [[speculum]] . ParseException { return formatter . parse ( [[speculum]] , [[menthols]] ) ; } public String print ( T t , Locale [[menthols]] ) { return formatter . print ( t , [[menthols]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 637 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 212 / 39 / 637:  64%|██████▎   | 637/1000 [8:33:23<4:52:33, 48.36s/it][Succeeded / Failed / Skipped / Total] 386 / 212 / 39 / 637:  64%|██████▍   | 638/1000 [8:35:00<4:52:13, 48.43s/it][Succeeded / Failed / Skipped / Total] 386 / 213 / 39 / 638:  64%|██████▍   | 638/1000 [8:35:00<4:52:13, 48.43s/it][Succeeded / Failed / Skipped / Total] 386 / 213 / 39 / 638:  64%|██████▍   | 639/1000 [8:35:11<4:51:03, 48.37s/it][Succeeded / Failed / Skipped / Total] 387 / 213 / 39 / 639:  64%|██████▍   | 639/1000 [8:35:11<4:51:03, 48.37s/it][Succeeded / Failed / Skipped / Total] 387 / 213 / 39 / 639:  64%|██████▍   | 640/1000 [8:37:57<4:51:20, 48.56s/it]Returns a type descriptor for the specified type . --> Convert a converter to a converter --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[ribeiro]] = new HashSet <> ( ) ; [[ribeiro]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[ribeiro]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[ribeiro]] = new HashSet <> ( ) ; [[ribeiro]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[ribeiro]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String value = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[bobo]] ) { if ( [[bobo]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[bobo]] . name ( ) ; final String value = [[bobo]] . value ( ) != null ? [[bobo]] . value ( ) : "" ; validateCookie ( name , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[bobo]] . wrap ( ) ) { addQuoted ( buf , name , value ) ; } else { add ( buf , name , value ) ; } if ( [[bobo]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[bobo]] . maxAge ( ) ) ; Date expires = [[bobo]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 639 ---------------------------------------------
Return a node . --> Return a path for a given path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[node]] ) { return selectNodes ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[hatim]] ) { return selectNodes ( path , [[hatim]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 214 / 39 / 640:  64%|██████▍   | 640/1000 [8:37:57<4:51:20, 48.56s/it][Succeeded / Failed / Skipped / Total] 387 / 214 / 39 / 640:  64%|██████▍   | 641/1000 [8:38:40<4:50:29, 48.55s/it][Succeeded / Failed / Skipped / Total] 388 / 214 / 39 / 641:  64%|██████▍   | 641/1000 [8:38:40<4:50:29, 48.55s/it][Succeeded / Failed / Skipped / Total] 388 / 214 / 39 / 641:  64%|██████▍   | 642/1000 [8:39:16<4:49:33, 48.53s/it][Succeeded / Failed / Skipped / Total] 389 / 214 / 39 / 642:  64%|██████▍   | 642/1000 [8:39:16<4:49:33, 48.53s/it][Succeeded / Failed / Skipped / Total] 389 / 214 / 39 / 642:  64%|██████▍   | 643/1000 [8:40:29<4:48:58, 48.57s/it][Succeeded / Failed / Skipped / Total] 389 / 215 / 39 / 643:  64%|██████▍   | 643/1000 [8:40:29<4:48:58, 48.57s/it][Succeeded / Failed / Skipped / Total] 389 / 215 / 39 / 643:  64%|██████▍   | 644/1000 [8:41:00<4:48:00, 48.54s/it][Succeeded / Failed / Skipped / Total] 390 / 215 / 39 / 644:  64%|██████▍   | 644/1000 [8:41:00<4:48:00, 48.54s/it][Succeeded / Failed / Skipped / Total] 390 / 215 / 39 / 644:  64%|██████▍   | 645/1000 [8:41:11<4:46:51, 48.48s/it][Succeeded / Failed / Skipped / Total] 391 / 215 / 39 / 645:  64%|██████▍   | 645/1000 [8:41:11<4:46:51, 48.48s/it][Succeeded / Failed / Skipped / Total] 391 / 215 / 39 / 645:  65%|██████▍   | 646/1000 [8:43:14<4:46:43, 48.60s/it][Succeeded / Failed / Skipped / Total] 391 / 216 / 39 / 646:  65%|██████▍   | 646/1000 [8:43:14<4:46:43, 48.60s/it][Succeeded / Failed / Skipped / Total] 391 / 216 / 39 / 646:  65%|██████▍   | 647/1000 [8:43:25<4:45:34, 48.54s/it]Returns a list of java . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[intelligence]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[intelligence]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Convert a list to a List --> Swaps the dimension --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[zis]] ( T [ ] [[doggone]] ) { return [[zis]] ( java . util . Arrays . asList ( [[doggone]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Create a sequence of arguments . --> Returns the sequence of the given sequence --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[strait]] ( T ... [[mahogany]] ) { return toSeq ( [[mahogany]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 643 ---------------------------------------------
Sends a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Immutable]] , Out > MappedWebSocketAcceptor < [[Immutable]] , Out > [[entryway]] ( Class < [[Immutable]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Handle a message . --> Construct a Request message from a Request --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[splattering]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[splattering]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[seton]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[seton]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 645 ---------------------------------------------
Checks if a class is enabled . --> Returns true if the oom is enabled --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[truckin]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Returns the classes of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[destClass]] ) { float [[cost]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[bb]] ) { float [[ultra]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
[Succeeded / Failed / Skipped / Total] 392 / 216 / 39 / 647:  65%|██████▍   | 647/1000 [8:43:25<4:45:34, 48.54s/it][Succeeded / Failed / Skipped / Total] 392 / 216 / 39 / 647:  65%|██████▍   | 648/1000 [8:47:22<4:46:28, 48.83s/it][Succeeded / Failed / Skipped / Total] 392 / 217 / 39 / 648:  65%|██████▍   | 648/1000 [8:47:22<4:46:28, 48.83s/it][Succeeded / Failed / Skipped / Total] 392 / 217 / 39 / 648:  65%|██████▍   | 649/1000 [8:47:48<4:45:27, 48.80s/it][Succeeded / Failed / Skipped / Total] 393 / 217 / 39 / 649:  65%|██████▍   | 649/1000 [8:47:48<4:45:27, 48.80s/it][Succeeded / Failed / Skipped / Total] 393 / 217 / 39 / 649:  65%|██████▌   | 650/1000 [8:48:01<4:44:19, 48.74s/it][Succeeded / Failed / Skipped / Total] 394 / 217 / 39 / 650:  65%|██████▌   | 650/1000 [8:48:01<4:44:19, 48.74s/it][Succeeded / Failed / Skipped / Total] 394 / 217 / 39 / 650:  65%|██████▌   | 651/1000 [8:48:09<4:43:08, 48.68s/it][Succeeded / Failed / Skipped / Total] 395 / 217 / 39 / 651:  65%|██████▌   | 651/1000 [8:48:09<4:43:08, 48.68s/it][Succeeded / Failed / Skipped / Total] 395 / 217 / 39 / 651:  65%|██████▌   | 652/1000 [8:49:19<4:42:31, 48.71s/it][Succeeded / Failed / Skipped / Total] 395 / 218 / 39 / 652:  65%|██████▌   | 652/1000 [8:49:19<4:42:31, 48.71s/it][Succeeded / Failed / Skipped / Total] 395 / 218 / 39 / 652:  65%|██████▌   | 653/1000 [8:49:48<4:41:32, 48.68s/it][Succeeded / Failed / Skipped / Total] 396 / 218 / 39 / 653:  65%|██████▌   | 653/1000 [8:49:48<4:41:32, 48.68s/it][Succeeded / Failed / Skipped / Total] 396 / 218 / 39 / 653:  65%|██████▌   | 654/1000 [8:50:03<4:40:25, 48.63s/it][Succeeded / Failed / Skipped / Total] 397 / 218 / 39 / 654:  65%|██████▌   | 654/1000 [8:50:03<4:40:25, 48.63s/it][Succeeded / Failed / Skipped / Total] 397 / 218 / 39 / 654:  66%|██████▌   | 655/1000 [8:50:33<4:39:27, 48.60s/it][Succeeded / Failed / Skipped / Total] 398 / 218 / 39 / 655:  66%|██████▌   | 655/1000 [8:50:33<4:39:27, 48.60s/it][Succeeded / Failed / Skipped / Total] 398 / 218 / 39 / 655:  66%|██████▌   | 656/1000 [8:50:33<4:38:13, 48.53s/it]--------------------------------------------- Result 647 ---------------------------------------------
Helper method to determine if a given class is a executable . --> Helper method to determine if two classes are equal --> Socre: 1.0

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[rahul]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Returns the cost of a given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[destClass]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[destClass]] . equals ( srcClass ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[destClass]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > [[belafonte]] ) { if ( [[belafonte]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , [[belafonte]] ) ; } float cost = 0.0f ; while ( srcClass != null && ! [[belafonte]] . equals ( srcClass ) ) { if ( [[belafonte]] . isInterface ( ) && ClassUtils . isAssignable ( srcClass , [[belafonte]] ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 649 ---------------------------------------------
Returns a string representation of the given arguments . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... [[args]] ) { return messagesApi . get ( lang , key , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[form]] ( String key , Object ... [[shills]] ) { return messagesApi . get ( lang , key , [[shills]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
Returns a list of messages . --> Gets a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[haitians]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 651 ---------------------------------------------
Create a new URL . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[thunderstorms]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[thunderstorms]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Creates a set of generators . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[booster]] ) { Generator [[ferrets]] = new Generator ( ) ; [[ferrets]] . setArrays ( [[booster]] ) ; return [[ferrets]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 653 ---------------------------------------------
Sort a sort . --> Sorts sorting quick sorting --> Socre: 1.0

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[resurrecting]] , Comparator [[broadcasters]] ) { chooseComparer ( index , [[broadcasters]] ) ; super . quickSort ( lo , [[resurrecting]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 654 ---------------------------------------------
Sort a comparator . --> Sorts a given Comparisonison --> Socre: 1.0

[[[[Adv]]]]: public void mergeSort ( int index , int lo , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void mergeSort ( int index , int lo , int hi , Comparator [[pisa]] ) { chooseComparer ( index , [[pisa]] ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 655 ---------------------------------------------
Invokes an object . --> Invokes reflection --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object [[yaga]] , Object [ ] [[fremont]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[yaga]] , [[fremont]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 398 / 218 / 40 / 656:  66%|██████▌   | 656/1000 [8:50:33<4:38:13, 48.53s/it][Succeeded / Failed / Skipped / Total] 398 / 218 / 40 / 656:  66%|██████▌   | 657/1000 [8:51:34<4:37:31, 48.55s/it][Succeeded / Failed / Skipped / Total] 398 / 219 / 40 / 657:  66%|██████▌   | 657/1000 [8:51:34<4:37:31, 48.55s/it][Succeeded / Failed / Skipped / Total] 398 / 219 / 41 / 658:  66%|██████▌   | 658/1000 [8:51:34<4:36:17, 48.47s/it][Succeeded / Failed / Skipped / Total] 398 / 219 / 41 / 658:  66%|██████▌   | 659/1000 [8:52:19<4:35:27, 48.47s/it][Succeeded / Failed / Skipped / Total] 398 / 220 / 41 / 659:  66%|██████▌   | 659/1000 [8:52:19<4:35:27, 48.47s/it][Succeeded / Failed / Skipped / Total] 398 / 220 / 41 / 659:  66%|██████▌   | 660/1000 [8:52:37<4:34:23, 48.42s/it][Succeeded / Failed / Skipped / Total] 399 / 220 / 41 / 660:  66%|██████▌   | 660/1000 [8:52:37<4:34:23, 48.42s/it][Succeeded / Failed / Skipped / Total] 399 / 220 / 41 / 660:  66%|██████▌   | 661/1000 [8:55:59<4:34:53, 48.65s/it][Succeeded / Failed / Skipped / Total] 399 / 221 / 41 / 661:  66%|██████▌   | 661/1000 [8:55:59<4:34:53, 48.65s/it][Succeeded / Failed / Skipped / Total] 399 / 221 / 41 / 661:  66%|██████▌   | 662/1000 [8:56:10<4:33:45, 48.60s/it]Visit a visitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 657 ---------------------------------------------
Loads the specified statement . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[propel]] ) { load_local ( state . argumentTypes [ [[propel]] ] , state . localOffset + skipArgs ( [[propel]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
Visit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 659 ---------------------------------------------
Populates the type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[ark]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 660 ---------------------------------------------
Move the type . --> Convert a type to a type --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[dripping]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[dripping]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[dripping]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 661 ---------------------------------------------
Processes the type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[e]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label [[checkloop]] = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( [[checkloop]] ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( [[checkloop]] ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[recycler]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[recycler]] . make_local ( ) ; Local loopvar = [[recycler]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[recycler]] . make_label ( ) ; Label [[alameda]] = [[recycler]] . make_label ( ) ; [[recycler]] . store_local ( array ) ; [[recycler]] . push ( 0 ) ; [[recycler]] . store_local ( loopvar ) ; [[recycler]] . goTo ( [[alameda]] ) ; [[recycler]] . mark ( loopbody ) ; [[recycler]] . load_local ( array ) ; [[recycler]] . load_local ( loopvar ) ; [[recycler]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[recycler]] . iinc ( loopvar , 1 ) ; [[recycler]] . mark ( [[alameda]] ) ; [[recycler]] . load_local ( loopvar ) ; [[recycler]] . load_local ( array ) ; [[recycler]] . arraylength ( ) ; [[recycler]] . if_icmp ( [[recycler]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 221 / 41 / 662:  66%|██████▌   | 662/1000 [8:56:10<4:33:45, 48.60s/it][Succeeded / Failed / Skipped / Total] 400 / 221 / 41 / 662:  66%|██████▋   | 663/1000 [8:56:33<4:32:43, 48.56s/it][Succeeded / Failed / Skipped / Total] 401 / 221 / 41 / 663:  66%|██████▋   | 663/1000 [8:56:33<4:32:43, 48.56s/it][Succeeded / Failed / Skipped / Total] 401 / 221 / 41 / 663:  66%|██████▋   | 664/1000 [8:58:19<4:32:24, 48.64s/it][Succeeded / Failed / Skipped / Total] 401 / 222 / 41 / 664:  66%|██████▋   | 664/1000 [8:58:19<4:32:24, 48.64s/it][Succeeded / Failed / Skipped / Total] 401 / 222 / 41 / 664:  66%|██████▋   | 665/1000 [8:58:41<4:31:22, 48.60s/it][Succeeded / Failed / Skipped / Total] 402 / 222 / 41 / 665:  66%|██████▋   | 665/1000 [8:58:41<4:31:22, 48.60s/it][Succeeded / Failed / Skipped / Total] 402 / 222 / 41 / 665:  67%|██████▋   | 666/1000 [8:59:15<4:30:26, 48.58s/it][Succeeded / Failed / Skipped / Total] 403 / 222 / 41 / 666:  67%|██████▋   | 666/1000 [8:59:15<4:30:26, 48.58s/it][Succeeded / Failed / Skipped / Total] 403 / 222 / 42 / 667:  67%|██████▋   | 667/1000 [8:59:15<4:29:13, 48.51s/it][Succeeded / Failed / Skipped / Total] 403 / 222 / 42 / 667:  67%|██████▋   | 668/1000 [8:59:48<4:28:17, 48.49s/it]Marks the given label . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[butcher]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[butcher]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[butcher]] ) ; e . goTo ( end ) ; e . mark ( [[butcher]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 663 ---------------------------------------------
Deserializes a class . --> Converts a class to a map --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[workings]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[workings]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 664 ---------------------------------------------
Return the superclass of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] [[interfaces]] , List methods ) { getMethods ( superclass , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] [[underappreciated]] , List methods ) { getMethods ( superclass , [[underappreciated]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 665 ---------------------------------------------
constructor constructor . --> constructor constructor --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[cappie]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[cappie]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[cappie]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 666 ---------------------------------------------
Set the superclass . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[superclass]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[manipulates]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[doornail]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 667 ---------------------------------------------
Process a single type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 668 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 222 / 42 / 668:  67%|██████▋   | 668/1000 [8:59:48<4:28:17, 48.49s/it][Succeeded / Failed / Skipped / Total] 404 / 222 / 42 / 668:  67%|██████▋   | 669/1000 [8:59:53<4:27:07, 48.42s/it][Succeeded / Failed / Skipped / Total] 405 / 222 / 42 / 669:  67%|██████▋   | 669/1000 [8:59:53<4:27:07, 48.42s/it][Succeeded / Failed / Skipped / Total] 405 / 222 / 42 / 669:  67%|██████▋   | 670/1000 [9:01:09<4:26:32, 48.46s/it][Succeeded / Failed / Skipped / Total] 405 / 223 / 42 / 670:  67%|██████▋   | 670/1000 [9:01:09<4:26:32, 48.46s/it][Succeeded / Failed / Skipped / Total] 405 / 223 / 43 / 671:  67%|██████▋   | 671/1000 [9:01:09<4:25:20, 48.39s/it][Succeeded / Failed / Skipped / Total] 405 / 223 / 43 / 671:  67%|██████▋   | 672/1000 [9:02:01<4:24:33, 48.39s/it][Succeeded / Failed / Skipped / Total] 406 / 223 / 43 / 672:  67%|██████▋   | 672/1000 [9:02:01<4:24:33, 48.39s/it][Succeeded / Failed / Skipped / Total] 406 / 223 / 43 / 672:  67%|██████▋   | 673/1000 [9:02:05<4:23:23, 48.33s/it][Succeeded / Failed / Skipped / Total] 407 / 223 / 43 / 673:  67%|██████▋   | 673/1000 [9:02:05<4:23:23, 48.33s/it][Succeeded / Failed / Skipped / Total] 407 / 223 / 43 / 673:  67%|██████▋   | 674/1000 [9:03:13<4:22:44, 48.36s/it][Succeeded / Failed / Skipped / Total] 407 / 224 / 43 / 674:  67%|██████▋   | 674/1000 [9:03:13<4:22:44, 48.36s/it][Succeeded / Failed / Skipped / Total] 407 / 224 / 43 / 674:  68%|██████▊   | 675/1000 [9:04:02<4:21:56, 48.36s/it][Succeeded / Failed / Skipped / Total] 408 / 224 / 43 / 675:  68%|██████▊   | 675/1000 [9:04:02<4:21:56, 48.36s/it][Succeeded / Failed / Skipped / Total] 408 / 224 / 43 / 675:  68%|██████▊   | 676/1000 [9:04:47<4:21:06, 48.35s/it][Succeeded / Failed / Skipped / Total] 408 / 225 / 43 / 676:  68%|██████▊   | 676/1000 [9:04:47<4:21:06, 48.35s/it][Succeeded / Failed / Skipped / Total] 408 / 225 / 43 / 676:  68%|██████▊   | 677/1000 [9:04:51<4:19:57, 48.29s/it][Succeeded / Failed / Skipped / Total] 409 / 225 / 43 / 677:  68%|██████▊   | 677/1000 [9:04:51<4:19:57, 48.29s/it][Succeeded / Failed / Skipped / Total] 409 / 225 / 43 / 677:  68%|██████▊   | 678/1000 [9:05:25<4:19:02, 48.27s/it][Succeeded / Failed / Skipped / Total] 410 / 225 / 43 / 678:  68%|██████▊   | 678/1000 [9:05:25<4:19:02, 48.27s/it][Succeeded / Failed / Skipped / Total] 410 / 225 / 43 / 678:  68%|██████▊   | 679/1000 [9:05:29<4:17:52, 48.20s/it]Adds a method . --> Returns zookeeper --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[murph]] ( Method [[oozing]] ) { [[murph]] ( ReflectUtils . getSignature ( [[oozing]] ) , ReflectUtils . getExceptionTypes ( [[oozing]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 669 ---------------------------------------------
Returns a big - endian integer value . --> Returns the number of integraving --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[cicatrice]] = value ; int c = 0 ; while ( [[cicatrice]] != 0 ) { c += T [ [[cicatrice]] & 255 ] ; [[cicatrice]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
Set the default policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[merino]] ( NamingPolicy [[creeds]] ) { if ( [[creeds]] == null ) [[creeds]] = DefaultNamingPolicy . INSTANCE ; this . [[ght]] = [[creeds]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Finds a method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 672 ---------------------------------------------
Resolves the given path . --> Resolve leader --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[yelled]] ( final Path [[stagg]] , String [[cheerleader]] ) { if ( StringUtil . startsWithChar ( [[cheerleader]] , File . separatorChar ) ) { [[cheerleader]] = [[cheerleader]] . substring ( 1 ) ; } return [[stagg]] . resolve ( [[cheerleader]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 673 ---------------------------------------------
Read String . --> Convert a file to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[fauns]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the request header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[iced]] ( final String [[uncouple]] ) { this . [[burr]] = [[iced]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[iced]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 675 ---------------------------------------------
Sets the request . --> ynthetic HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String [[destination]] ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[este]] ( final String [[uncanny]] , final String [[eles]] ) { return new HttpRequest ( ) . [[uncanny]] ( [[uncanny]] . toUpperCase ( ) ) . set ( [[eles]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 676 ---------------------------------------------
Create a new HttpRequest with the given HttpRequest --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest connect ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String [[dogfish]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[dogfish]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
Sets the http request . --> Set HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[scribe]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the request . --> Set the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[nanking]] ( final String [[disaster]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[disaster]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 225 / 43 / 679:  68%|██████▊   | 679/1000 [9:05:29<4:17:52, 48.20s/it][Succeeded / Failed / Skipped / Total] 411 / 225 / 43 / 679:  68%|██████▊   | 680/1000 [9:05:33<4:16:44, 48.14s/it][Succeeded / Failed / Skipped / Total] 412 / 225 / 43 / 680:  68%|██████▊   | 680/1000 [9:05:33<4:16:44, 48.14s/it][Succeeded / Failed / Skipped / Total] 412 / 225 / 43 / 680:  68%|██████▊   | 681/1000 [9:05:51<4:15:41, 48.09s/it][Succeeded / Failed / Skipped / Total] 413 / 225 / 43 / 681:  68%|██████▊   | 681/1000 [9:05:51<4:15:41, 48.09s/it][Succeeded / Failed / Skipped / Total] 413 / 225 / 43 / 681:  68%|██████▊   | 682/1000 [9:06:16<4:14:42, 48.06s/it][Succeeded / Failed / Skipped / Total] 414 / 225 / 43 / 682:  68%|██████▊   | 682/1000 [9:06:16<4:14:42, 48.06s/it][Succeeded / Failed / Skipped / Total] 414 / 225 / 43 / 682:  68%|██████▊   | 683/1000 [9:06:34<4:13:40, 48.01s/it][Succeeded / Failed / Skipped / Total] 415 / 225 / 43 / 683:  68%|██████▊   | 683/1000 [9:06:34<4:13:40, 48.01s/it][Succeeded / Failed / Skipped / Total] 415 / 225 / 43 / 683:  68%|██████▊   | 684/1000 [9:07:04<4:12:44, 47.99s/it][Succeeded / Failed / Skipped / Total] 416 / 225 / 43 / 684:  68%|██████▊   | 684/1000 [9:07:04<4:12:44, 47.99s/it][Succeeded / Failed / Skipped / Total] 416 / 225 / 43 / 684:  68%|██████▊   | 685/1000 [9:07:25<4:11:44, 47.95s/it][Succeeded / Failed / Skipped / Total] 417 / 225 / 43 / 685:  68%|██████▊   | 685/1000 [9:07:25<4:11:44, 47.95s/it][Succeeded / Failed / Skipped / Total] 417 / 225 / 43 / 685:  69%|██████▊   | 686/1000 [9:08:39<4:11:08, 47.99s/it][Succeeded / Failed / Skipped / Total] 418 / 225 / 43 / 686:  69%|██████▊   | 686/1000 [9:08:39<4:11:08, 47.99s/it][Succeeded / Failed / Skipped / Total] 418 / 225 / 43 / 686:  69%|██████▊   | 687/1000 [9:09:22<4:10:17, 47.98s/it][Succeeded / Failed / Skipped / Total] 419 / 225 / 43 / 687:  69%|██████▊   | 687/1000 [9:09:22<4:10:17, 47.98s/it][Succeeded / Failed / Skipped / Total] 419 / 225 / 43 / 687:  69%|██████▉   | 688/1000 [9:10:36<4:09:41, 48.02s/it][Succeeded / Failed / Skipped / Total] 419 / 226 / 43 / 688:  69%|██████▉   | 688/1000 [9:10:36<4:09:41, 48.02s/it][Succeeded / Failed / Skipped / Total] 419 / 226 / 43 / 688:  69%|██████▉   | 689/1000 [9:10:56<4:08:41, 47.98s/it]Sets the HTTP request . --> Creates HttpRequest with HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest put ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String [[cheney]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[cheney]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Sets the HttpServletRequest . --> Returns the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest patch ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest patch ( final String [[thoroughbred]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[thoroughbred]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Deletes a HTTP request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[howthe]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Sets the HTTP request . --> Convenience method to get HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[toxicology]] ( final String [[banky]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[banky]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Creates a new HTTP request . --> Sets the destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[nunez]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the request . --> Creates a HttpRequest with the given HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[flume]] ( final String [[aaaaah]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[aaaaah]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Set the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[unsatisfying]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Returns the cookie . --> Build cookie cookie --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "[[False]]" != "[[False]]" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[wobble]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[wobble]] . append ( "; " ) ; } first = "[[Butts]]" != "[[Butts]]" ; [[wobble]] . append ( cookie . getName ( ) ) ; [[wobble]] . append ( ' ' ) ; [[wobble]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[wobble]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 687 ---------------------------------------------
Adds a query parameter . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String [[name1]] , final Object value1 , final Object ... parameters ) { query ( [[name1]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < parameters . length ; [[i]] += 2 ) { String name = parameters [ [[i]] ] . toString ( ) ; String value = parameters [ [[i]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String [[isp]] , final Object value1 , final Object ... parameters ) { query ( [[isp]] , value1 == null ? null : value1 . toString ( ) ) ; for ( int [[biology]] = 0 ; [[biology]] < parameters . length ; [[biology]] += 2 ) { String name = parameters [ [[biology]] ] . toString ( ) ; String value = parameters [ [[biology]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 688 ---------------------------------------------
Adds a map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[ashby]] ( final Map < String , String > [[undulating]] ) { for ( Map . Entry < String , String > [[intellectuals]] : [[undulating]] . entrySet ( ) ) { [[ashby]] . add ( [[intellectuals]] . getKey ( ) , [[intellectuals]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 420 / 226 / 43 / 689:  69%|██████▉   | 689/1000 [9:10:56<4:08:41, 47.98s/it][Succeeded / Failed / Skipped / Total] 420 / 226 / 43 / 689:  69%|██████▉   | 690/1000 [9:11:14<4:07:39, 47.93s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 43 / 690:  69%|██████▉   | 690/1000 [9:11:14<4:07:39, 47.93s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 43 / 690:  69%|██████▉   | 691/1000 [9:11:22<4:06:33, 47.88s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 43 / 691:  69%|██████▉   | 691/1000 [9:11:22<4:06:33, 47.88s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 43 / 691:  69%|██████▉   | 692/1000 [9:11:31<4:05:28, 47.82s/it][Succeeded / Failed / Skipped / Total] 422 / 227 / 43 / 692:  69%|██████▉   | 692/1000 [9:11:31<4:05:28, 47.82s/it][Succeeded / Failed / Skipped / Total] 422 / 227 / 43 / 692:  69%|██████▉   | 693/1000 [9:12:28<4:04:45, 47.83s/it][Succeeded / Failed / Skipped / Total] 422 / 228 / 43 / 693:  69%|██████▉   | 693/1000 [9:12:28<4:04:45, 47.83s/it][Succeeded / Failed / Skipped / Total] 422 / 228 / 43 / 693:  69%|██████▉   | 694/1000 [9:12:35<4:03:38, 47.77s/it][Succeeded / Failed / Skipped / Total] 423 / 228 / 43 / 694:  69%|██████▉   | 694/1000 [9:12:35<4:03:38, 47.77s/it][Succeeded / Failed / Skipped / Total] 423 / 228 / 43 / 694:  70%|██████▉   | 695/1000 [9:12:39<4:02:32, 47.71s/it][Succeeded / Failed / Skipped / Total] 424 / 228 / 43 / 695:  70%|██████▉   | 695/1000 [9:12:39<4:02:32, 47.71s/it][Succeeded / Failed / Skipped / Total] 424 / 228 / 43 / 695:  70%|██████▉   | 696/1000 [9:16:02<4:02:51, 47.93s/it][Succeeded / Failed / Skipped / Total] 424 / 229 / 43 / 696:  70%|██████▉   | 696/1000 [9:16:02<4:02:51, 47.93s/it][Succeeded / Failed / Skipped / Total] 424 / 229 / 43 / 696:  70%|██████▉   | 697/1000 [9:17:06<4:02:11, 47.96s/it][Succeeded / Failed / Skipped / Total] 425 / 229 / 43 / 697:  70%|██████▉   | 697/1000 [9:17:06<4:02:11, 47.96s/it][Succeeded / Failed / Skipped / Total] 425 / 229 / 43 / 697:  70%|██████▉   | 698/1000 [9:17:48<4:01:20, 47.95s/it][Succeeded / Failed / Skipped / Total] 425 / 230 / 43 / 698:  70%|██████▉   | 698/1000 [9:17:48<4:01:20, 47.95s/it][Succeeded / Failed / Skipped / Total] 425 / 230 / 43 / 698:  70%|██████▉   | 699/1000 [9:18:32<4:00:30, 47.94s/it]Parse query string . --> Parse the HTTP request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[decode]] ) { this . query = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[lighthouses]] ) { this . query = HttpUtil . parseQuery ( queryString , [[lighthouses]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Build a query --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[baron]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 691 ---------------------------------------------
Convert a URL to a URL . --> Convert a string to a protocol --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[wendy]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 692 ---------------------------------------------
Write password . --> Write a request to a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[augsburg]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[augsburg]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 693 ---------------------------------------------
Set the port header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . [[pixies]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Flushes the buffer . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[resonated]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Sends a response . --> A convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[contraceptives]] > [[contraceptives]] sendAndReceive ( final Function < HttpResponse , [[contraceptives]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 696 ---------------------------------------------
Return a range from the end . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = removeRange ( [[firstHandler]] . nextHandler , start , end ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int [[handlerEnd]] = [[firstHandler]] . endPc . bytecodeOffset ; int [[rangeStart]] = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler [[plague]] , final Label start , final Label end ) { if ( [[plague]] == null ) { return null ; } else { [[plague]] . nextHandler = removeRange ( [[plague]] . nextHandler , start , end ) ; } int handlerStart = [[plague]] . startPc . bytecodeOffset ; int [[kal]] = [[plague]] . endPc . bytecodeOffset ; int [[bmws]] = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 697 ---------------------------------------------
Returns the length of the handler . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int [[length]] = 0 ; Handler [[handler]] = firstHandler ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[kendall]] ( final Handler firstHandler ) { int [[nikkei]] = 0 ; Handler [[consolidated]] = firstHandler ; while ( [[consolidated]] != null ) { [[nikkei]] ++ ; [[consolidated]] = [[consolidated]] . nextHandler ; } return [[nikkei]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 698 ---------------------------------------------
Adds all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[mamá]] ( ) { final Collection < ? extends ActionInterceptor > [[worrier]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[worrier]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
[Succeeded / Failed / Skipped / Total] 425 / 231 / 43 / 699:  70%|██████▉   | 699/1000 [9:18:32<4:00:30, 47.94s/it][Succeeded / Failed / Skipped / Total] 425 / 231 / 43 / 699:  70%|███████   | 700/1000 [9:18:36<3:59:24, 47.88s/it][Succeeded / Failed / Skipped / Total] 426 / 231 / 43 / 700:  70%|███████   | 700/1000 [9:18:36<3:59:24, 47.88s/it][Succeeded / Failed / Skipped / Total] 426 / 231 / 43 / 700:  70%|███████   | 701/1000 [9:18:43<3:58:19, 47.82s/it][Succeeded / Failed / Skipped / Total] 427 / 231 / 43 / 701:  70%|███████   | 701/1000 [9:18:43<3:58:19, 47.82s/it][Succeeded / Failed / Skipped / Total] 427 / 231 / 43 / 701:  70%|███████   | 702/1000 [9:19:05<3:57:20, 47.79s/it][Succeeded / Failed / Skipped / Total] 428 / 231 / 43 / 702:  70%|███████   | 702/1000 [9:19:05<3:57:20, 47.79s/it][Succeeded / Failed / Skipped / Total] 428 / 231 / 43 / 702:  70%|███████   | 703/1000 [9:19:45<3:56:28, 47.77s/it][Succeeded / Failed / Skipped / Total] 428 / 232 / 43 / 703:  70%|███████   | 703/1000 [9:19:45<3:56:28, 47.77s/it][Succeeded / Failed / Skipped / Total] 428 / 232 / 43 / 703:  70%|███████   | 704/1000 [9:20:19<3:55:35, 47.76s/it][Succeeded / Failed / Skipped / Total] 429 / 232 / 43 / 704:  70%|███████   | 704/1000 [9:20:19<3:55:35, 47.76s/it][Succeeded / Failed / Skipped / Total] 429 / 232 / 43 / 704:  70%|███████   | 705/1000 [9:20:28<3:54:31, 47.70s/it][Succeeded / Failed / Skipped / Total] 430 / 232 / 43 / 705:  70%|███████   | 705/1000 [9:20:28<3:54:31, 47.70s/it][Succeeded / Failed / Skipped / Total] 430 / 232 / 43 / 705:  71%|███████   | 706/1000 [9:21:39<3:53:53, 47.73s/it][Succeeded / Failed / Skipped / Total] 430 / 233 / 43 / 706:  71%|███████   | 706/1000 [9:21:39<3:53:53, 47.73s/it][Succeeded / Failed / Skipped / Total] 430 / 233 / 43 / 706:  71%|███████   | 707/1000 [9:22:19<3:53:02, 47.72s/it][Succeeded / Failed / Skipped / Total] 430 / 234 / 43 / 707:  71%|███████   | 707/1000 [9:22:19<3:53:02, 47.72s/it][Succeeded / Failed / Skipped / Total] 430 / 234 / 43 / 707:  71%|███████   | 708/1000 [9:22:51<3:52:08, 47.70s/it][Succeeded / Failed / Skipped / Total] 431 / 234 / 43 / 708:  71%|███████   | 708/1000 [9:22:51<3:52:08, 47.70s/it][Succeeded / Failed / Skipped / Total] 431 / 234 / 43 / 708:  71%|███████   | 709/1000 [9:23:49<3:51:24, 47.71s/it]--------------------------------------------- Result 699 ---------------------------------------------
Adds a filter . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[tectonic]] ( ) { final Collection < ? extends ActionFilter > [[devastatingly]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[devastatingly]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 700 ---------------------------------------------
Add a collection of results . --> Add a collection to the list --> Socre: 1.0

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > [[myrna]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[myrna]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Executes the actions . --> Execute the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[jermaine]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 702 ---------------------------------------------
Sets the bean property . --> Set the bean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[bp]] , final Object value ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty [[aristophanes]] , final Object value ) { Setter [[alluded]] = [[aristophanes]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 703 ---------------------------------------------
Get a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( T ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( T ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty [[lapland]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[lapland]] ) ; return ( T ) getIndexProperty ( [[lapland]] ) ; } else { try { resolveNestedProperties ( [[lapland]] ) ; return ( T ) getIndexProperty ( [[lapland]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 704 ---------------------------------------------
Extracts a string from the given name . --> Converts a string to a font --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int [[ndx]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[fontana]] ( final String propertyName ) { int [[whippet]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[whippet]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[whippet]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 705 ---------------------------------------------
Get the writer . --> Print a PrintWriter --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[raman]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 706 ---------------------------------------------
Set a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[caddies]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Gets the object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getObjectReference ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object getObjectReference ( final String [[tasked]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[tasked]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Gets a reference . --> Convenience method to get a byte array --> Socre: 1.0

[[[[Adv]]]]: public Object lookupObject ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object lookupObject ( final String [[christians]] ) { Object [[prisoner]] = getObjectReference ( [[christians]] ) ; if ( [[prisoner]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[christians]] ) ; } return [[prisoner]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 431 / 235 / 43 / 709:  71%|███████   | 709/1000 [9:23:49<3:51:24, 47.71s/it][Succeeded / Failed / Skipped / Total] 431 / 235 / 43 / 709:  71%|███████   | 710/1000 [9:25:10<3:50:50, 47.76s/it][Succeeded / Failed / Skipped / Total] 431 / 236 / 43 / 710:  71%|███████   | 710/1000 [9:25:10<3:50:50, 47.76s/it][Succeeded / Failed / Skipped / Total] 431 / 236 / 43 / 710:  71%|███████   | 711/1000 [9:26:07<3:50:06, 47.77s/it][Succeeded / Failed / Skipped / Total] 431 / 237 / 43 / 711:  71%|███████   | 711/1000 [9:26:07<3:50:06, 47.77s/it][Succeeded / Failed / Skipped / Total] 431 / 237 / 43 / 711:  71%|███████   | 712/1000 [9:26:51<3:49:17, 47.77s/it][Succeeded / Failed / Skipped / Total] 432 / 237 / 43 / 712:  71%|███████   | 712/1000 [9:26:51<3:49:17, 47.77s/it][Succeeded / Failed / Skipped / Total] 432 / 237 / 43 / 712:  71%|███████▏  | 713/1000 [9:28:24<3:48:47, 47.83s/it][Succeeded / Failed / Skipped / Total] 432 / 238 / 43 / 713:  71%|███████▏  | 713/1000 [9:28:24<3:48:47, 47.83s/it][Succeeded / Failed / Skipped / Total] 432 / 238 / 43 / 713:  71%|███████▏  | 714/1000 [9:29:05<3:47:57, 47.82s/it][Succeeded / Failed / Skipped / Total] 433 / 238 / 43 / 714:  71%|███████▏  | 714/1000 [9:29:05<3:47:57, 47.82s/it][Succeeded / Failed / Skipped / Total] 433 / 238 / 43 / 714:  72%|███████▏  | 715/1000 [9:29:22<3:46:57, 47.78s/it][Succeeded / Failed / Skipped / Total] 434 / 238 / 43 / 715:  72%|███████▏  | 715/1000 [9:29:22<3:46:57, 47.78s/it][Succeeded / Failed / Skipped / Total] 434 / 238 / 43 / 715:  72%|███████▏  | 716/1000 [9:30:05<3:46:07, 47.77s/it][Succeeded / Failed / Skipped / Total] 435 / 238 / 43 / 716:  72%|███████▏  | 716/1000 [9:30:05<3:46:07, 47.77s/it][Succeeded / Failed / Skipped / Total] 435 / 238 / 43 / 716:  72%|███████▏  | 717/1000 [9:31:11<3:45:27, 47.80s/it]Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[mustnt]] = tableRefs . get ( tableRef ) ; return [[mustnt]] == null ? null : [[mustnt]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Find a column by its name . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[tayu]] = entry . getValue ( ) . desc ; if ( [[tayu]] . findByPropertyName ( columnRef ) != null ) { return [[tayu]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 711 ---------------------------------------------
Returns the alias of the table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[grumble]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[satchel]] = tableRefs . get ( tableRef ) ; return [[satchel]] == null ? null : [[satchel]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Register a reference . --> Convenience method to add a signer --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[strongly]] ( final String [[landmine]] , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( [[landmine]] , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[landmine]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 713 ---------------------------------------------
Returns an unmodifiable table . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[microns]] ( final String [[cowley]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[cowley]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[cowley]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Register a hint . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[calibration]] ( final String [[palestinians]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[palestinians]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 715 ---------------------------------------------
Serializes a JSON string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[picking]] , final T value ) { if ( [[picking]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 716 ---------------------------------------------
Sets the request attribute . --> Method to remove the servletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[attributeNames]] = servletRequest . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[drugs]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > [[waters]] = servletRequest . getAttributeNames ( ) ; while ( [[waters]] . hasMoreElements ( ) ) { final String attrName = [[waters]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "[[Leader]]" == "[[Leader]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 436 / 238 / 43 / 717:  72%|███████▏  | 717/1000 [9:31:11<3:45:27, 47.80s/it][Succeeded / Failed / Skipped / Total] 436 / 238 / 43 / 717:  72%|███████▏  | 718/1000 [9:33:37<3:45:17, 47.94s/it][Succeeded / Failed / Skipped / Total] 436 / 239 / 43 / 718:  72%|███████▏  | 718/1000 [9:33:37<3:45:17, 47.94s/it][Succeeded / Failed / Skipped / Total] 436 / 239 / 43 / 718:  72%|███████▏  | 719/1000 [9:34:04<3:44:21, 47.91s/it][Succeeded / Failed / Skipped / Total] 437 / 239 / 43 / 719:  72%|███████▏  | 719/1000 [9:34:04<3:44:21, 47.91s/it][Succeeded / Failed / Skipped / Total] 437 / 239 / 43 / 719:  72%|███████▏  | 720/1000 [9:34:35<3:43:27, 47.88s/it]Process a request . --> Checks to see if a servlet is active --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean [[encode]] = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[encode]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String [[p]] = paramValues [ j ] ; if ( [[p]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( [[p]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[jutt]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean [[meowing]] = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[disciplines]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[disciplines]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[disciplines]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[disciplines]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[meowing]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String [[chromosome]] = paramValues [ j ] ; if ( [[chromosome]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( [[chromosome]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 718 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[mountains]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[mountains]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[mountains]] ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( [[mountains]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 719 ---------------------------------------------
Convert a name to a string . --> Format upper case sensitive --> Socre: 1.0

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder [[tableName]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[tableName]] . append ( [[convertedTableName]] ) ; } else { [[tableName]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder [[militarily]] = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[milou]] = Format . fromCamelCase ( propertyName , separatorChar ) ; [[militarily]] . append ( [[milou]] ) ; } else { [[militarily]] . append ( propertyName ) ; } if ( ! changeCase ) { return [[militarily]] . toString ( ) ; } return uppercase ? toUppercase ( [[militarily]] ) . toString ( ) : toLowercase ( [[militarily]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 720 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 438 / 239 / 43 / 720:  72%|███████▏  | 720/1000 [9:34:35<3:43:27, 47.88s/it][Succeeded / Failed / Skipped / Total] 438 / 239 / 43 / 720:  72%|███████▏  | 721/1000 [9:35:39<3:42:45, 47.90s/it][Succeeded / Failed / Skipped / Total] 438 / 240 / 43 / 721:  72%|███████▏  | 721/1000 [9:35:39<3:42:45, 47.90s/it][Succeeded / Failed / Skipped / Total] 438 / 240 / 43 / 721:  72%|███████▏  | 722/1000 [9:37:18<3:42:17, 47.98s/it][Succeeded / Failed / Skipped / Total] 439 / 240 / 43 / 722:  72%|███████▏  | 722/1000 [9:37:18<3:42:17, 47.98s/it][Succeeded / Failed / Skipped / Total] 439 / 240 / 43 / 722:  72%|███████▏  | 723/1000 [9:37:39<3:41:19, 47.94s/it][Succeeded / Failed / Skipped / Total] 439 / 241 / 43 / 723:  72%|███████▏  | 723/1000 [9:37:39<3:41:19, 47.94s/it][Succeeded / Failed / Skipped / Total] 439 / 241 / 43 / 723:  72%|███████▏  | 724/1000 [9:38:33<3:40:33, 47.95s/it][Succeeded / Failed / Skipped / Total] 439 / 242 / 43 / 724:  72%|███████▏  | 724/1000 [9:38:33<3:40:33, 47.95s/it][Succeeded / Failed / Skipped / Total] 439 / 242 / 43 / 724:  72%|███████▎  | 725/1000 [9:39:03<3:39:38, 47.92s/it][Succeeded / Failed / Skipped / Total] 440 / 242 / 43 / 725:  72%|███████▎  | 725/1000 [9:39:03<3:39:38, 47.92s/it][Succeeded / Failed / Skipped / Total] 440 / 242 / 43 / 725:  73%|███████▎  | 726/1000 [9:39:21<3:38:39, 47.88s/it][Succeeded / Failed / Skipped / Total] 440 / 243 / 43 / 726:  73%|███████▎  | 726/1000 [9:39:22<3:38:39, 47.88s/it][Succeeded / Failed / Skipped / Total] 440 / 243 / 43 / 726:  73%|███████▎  | 727/1000 [9:39:36<3:37:39, 47.84s/it][Succeeded / Failed / Skipped / Total] 441 / 243 / 43 / 727:  73%|███████▎  | 727/1000 [9:39:36<3:37:39, 47.84s/it][Succeeded / Failed / Skipped / Total] 441 / 243 / 43 / 727:  73%|███████▎  | 728/1000 [9:40:33<3:36:54, 47.85s/it]Returns the name of a property . --> Returns the upper case of a given char --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[devoured]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[hercule]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[hercule]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 721 ---------------------------------------------
Converts a column to a name --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[nobles]] ( final String [[bubbs]] ) { String propertyName = convertColumnNameToPropertyName ( [[bubbs]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 722 ---------------------------------------------
Sets the value of the given type . --> Sets the principal --> Socre: 1.0

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int [[index]] , final Object [[value]] , final int [[dbSqlType]] ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , [[index]] , [[t]] , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int [[frump]] , final Object [[hoses]] , final int [[videogames]] ) throws SQLException { T [[overconfidence]] = TypeConverterManager . get ( ) . convertType ( [[hoses]] , sqlType ) ; set ( st , [[frump]] , [[overconfidence]] , [[videogames]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Returns the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[ypres]] > [[ypres]] prepareGetValue ( final T t , final Class < [[ypres]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[ypres]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 724 ---------------------------------------------
Returns an immutable set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[wednesday]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
Initialize the wrapper class . --> Create a class --> Socre: 1.0

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[jealousy]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[significance]] = lookup ( wrapperClassName ) ; if ( [[significance]] == null ) { [[significance]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[significance]] ) ; wrappers . put ( wrapperClassName , [[significance]] ) ; } return [[significance]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 726 ---------------------------------------------
Creates a new wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[avoidable]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 727 ---------------------------------------------
Returns the separator . --> Obtain a string for a given string --> Socre: 1.0

[[[[Adv]]]]: public static String separatorsToSystem ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String separatorsToSystem ( final String [[tutankhamen]] ) { if ( [[tutankhamen]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[tutankhamen]] ) ; } else { return separatorsToUnix ( [[tutankhamen]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 728 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 442 / 243 / 43 / 728:  73%|███████▎  | 728/1000 [9:40:33<3:36:54, 47.85s/it][Succeeded / Failed / Skipped / Total] 442 / 243 / 43 / 728:  73%|███████▎  | 729/1000 [9:41:31<3:36:10, 47.86s/it][Succeeded / Failed / Skipped / Total] 443 / 243 / 43 / 729:  73%|███████▎  | 729/1000 [9:41:31<3:36:10, 47.86s/it][Succeeded / Failed / Skipped / Total] 443 / 243 / 43 / 729:  73%|███████▎  | 730/1000 [9:41:35<3:35:06, 47.80s/it][Succeeded / Failed / Skipped / Total] 444 / 243 / 43 / 730:  73%|███████▎  | 730/1000 [9:41:35<3:35:06, 47.80s/it][Succeeded / Failed / Skipped / Total] 444 / 243 / 43 / 730:  73%|███████▎  | 731/1000 [9:41:59<3:34:09, 47.77s/it][Succeeded / Failed / Skipped / Total] 445 / 243 / 43 / 731:  73%|███████▎  | 731/1000 [9:41:59<3:34:09, 47.77s/it][Succeeded / Failed / Skipped / Total] 445 / 243 / 43 / 731:  73%|███████▎  | 732/1000 [9:42:06<3:33:07, 47.71s/it][Succeeded / Failed / Skipped / Total] 446 / 243 / 43 / 732:  73%|███████▎  | 732/1000 [9:42:06<3:33:07, 47.71s/it][Succeeded / Failed / Skipped / Total] 446 / 243 / 43 / 732:  73%|███████▎  | 733/1000 [9:42:14<3:32:04, 47.66s/it][Succeeded / Failed / Skipped / Total] 447 / 243 / 43 / 733:  73%|███████▎  | 733/1000 [9:42:14<3:32:04, 47.66s/it][Succeeded / Failed / Skipped / Total] 447 / 243 / 43 / 733:  73%|███████▎  | 734/1000 [9:42:18<3:31:01, 47.60s/it][Succeeded / Failed / Skipped / Total] 448 / 243 / 43 / 734:  73%|███████▎  | 734/1000 [9:42:18<3:31:01, 47.60s/it][Succeeded / Failed / Skipped / Total] 448 / 243 / 43 / 734:  74%|███████▎  | 735/1000 [9:42:36<3:30:03, 47.56s/it]Returns the prefix of the file . --> Given a prefix and a file name --> Socre: 1.0

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int [[separatorAdd]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int endIndex = [[index]] + [[separatorAdd]] ; if ( prefix >= filename . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int [[akers]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[fougasse]] = indexOfLastSeparator ( filename ) ; int endIndex = [[fougasse]] + [[akers]] ; if ( prefix >= filename . length ( ) || [[fougasse]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 729 ---------------------------------------------
Get the file extension . --> Method to get the file system --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String [[baseName]] ; String [[extension]] ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; [[extension]] = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = filename . substring ( prefix . length ( ) + path . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { [[baseName]] = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; [[extension]] = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , [[baseName]] , [[extension]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String [[promptness]] ; String [[prologues]] ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[promptness]] = filename . substring ( prefix . length ( ) ) ; [[prologues]] = StringPool . EMPTY ; } else { [[promptness]] = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; [[prologues]] = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[promptness]] = filename . substring ( prefix . length ( ) + path . length ( ) ) ; [[prologues]] = StringPool . EMPTY ; } else { [[promptness]] = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; [[prologues]] = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , [[promptness]] , [[prologues]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 730 ---------------------------------------------
Returns a string representation of the given path . --> Convert the given file to a File --> Socre: 1.0

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String [[aborting]] ) { return new File ( [[aborting]] ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 731 ---------------------------------------------
Add a component to this component . --> Register a new dasher --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[dashiki]] ) { Objects . requireNonNull ( [[dashiki]] ) ; madvocComponents . add ( ClassConsumer . of ( [[dashiki]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 732 ---------------------------------------------
Adapts an action to a Consumer --> Declarative Services method for prepared manager --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[asahi]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 733 ---------------------------------------------
Starts the app . --> Get WebWebWebWebWebWebWebAppWebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[act]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 734 ---------------------------------------------
Registers a component . --> Unregisters a component --> Socre: 1.0

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager [[puncher]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[puncher]] . registerAnnotation ( Action . class ) ; [[puncher]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 735 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 448 / 244 / 43 / 735:  74%|███████▎  | 735/1000 [9:42:36<3:30:03, 47.56s/it][Succeeded / Failed / Skipped / Total] 448 / 244 / 43 / 735:  74%|███████▎  | 736/1000 [9:42:58<3:29:06, 47.52s/it][Succeeded / Failed / Skipped / Total] 449 / 244 / 43 / 736:  74%|███████▎  | 736/1000 [9:42:58<3:29:06, 47.52s/it][Succeeded / Failed / Skipped / Total] 449 / 244 / 43 / 736:  74%|███████▎  | 737/1000 [9:43:03<3:28:03, 47.47s/it][Succeeded / Failed / Skipped / Total] 450 / 244 / 43 / 737:  74%|███████▎  | 737/1000 [9:43:03<3:28:03, 47.47s/it][Succeeded / Failed / Skipped / Total] 450 / 244 / 43 / 737:  74%|███████▍  | 738/1000 [9:43:58<3:27:19, 47.48s/it][Succeeded / Failed / Skipped / Total] 451 / 244 / 43 / 738:  74%|███████▍  | 738/1000 [9:43:58<3:27:19, 47.48s/it][Succeeded / Failed / Skipped / Total] 451 / 244 / 43 / 738:  74%|███████▍  | 739/1000 [9:44:03<3:26:16, 47.42s/it][Succeeded / Failed / Skipped / Total] 452 / 244 / 43 / 739:  74%|███████▍  | 739/1000 [9:44:03<3:26:16, 47.42s/it][Succeeded / Failed / Skipped / Total] 452 / 244 / 43 / 739:  74%|███████▍  | 740/1000 [9:46:56<3:26:13, 47.59s/it]Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[jule]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 736 ---------------------------------------------
Scans through the given excludedr . --> Convenience method for creating a Jar instance --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[seventh]] ) { for ( final String excludedJar : [[seventh]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Replies the regular expression . --> Return a JarJarString --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String includedJar : [[includedJars]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[terje]] ) { for ( final String includedJar : [[terje]] ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 738 ---------------------------------------------
Scans the specified string . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[forestry]] ( final String ... includedEntries ) { for ( final String [[wonka]] : includedEntries ) { rulesEntries . include ( [[wonka]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
Scans excluded patterns . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[excludedEntry]] : excludedEntries ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String [[congratulate]] : excludedEntries ) { rulesEntries . exclude ( [[congratulate]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 452 / 245 / 43 / 740:  74%|███████▍  | 740/1000 [9:46:56<3:26:13, 47.59s/it][Succeeded / Failed / Skipped / Total] 452 / 245 / 43 / 740:  74%|███████▍  | 741/1000 [9:47:13<3:25:14, 47.55s/it][Succeeded / Failed / Skipped / Total] 453 / 245 / 43 / 741:  74%|███████▍  | 741/1000 [9:47:13<3:25:14, 47.55s/it][Succeeded / Failed / Skipped / Total] 453 / 245 / 43 / 741:  74%|███████▍  | 742/1000 [9:47:17<3:24:12, 47.49s/it][Succeeded / Failed / Skipped / Total] 454 / 245 / 43 / 742:  74%|███████▍  | 742/1000 [9:47:17<3:24:12, 47.49s/it][Succeeded / Failed / Skipped / Total] 454 / 245 / 43 / 742:  74%|███████▍  | 743/1000 [9:47:26<3:23:11, 47.44s/it][Succeeded / Failed / Skipped / Total] 455 / 245 / 43 / 743:  74%|███████▍  | 743/1000 [9:47:26<3:23:11, 47.44s/it][Succeeded / Failed / Skipped / Total] 455 / 245 / 43 / 743:  74%|███████▍  | 744/1000 [9:48:03<3:22:20, 47.42s/it][Succeeded / Failed / Skipped / Total] 455 / 246 / 43 / 744:  74%|███████▍  | 744/1000 [9:48:03<3:22:20, 47.42s/it][Succeeded / Failed / Skipped / Total] 455 / 246 / 43 / 744:  74%|███████▍  | 745/1000 [9:49:28<3:21:46, 47.47s/it][Succeeded / Failed / Skipped / Total] 455 / 247 / 43 / 745:  74%|███████▍  | 745/1000 [9:49:28<3:21:46, 47.47s/it][Succeeded / Failed / Skipped / Total] 455 / 247 / 43 / 745:  75%|███████▍  | 746/1000 [9:49:48<3:20:49, 47.44s/it]Extracts entries from a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[zipEntry]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[zipEntry]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[[False]]" != "[[False]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[ola]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[ola]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[ola]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "[[Mcknight]]" != "[[Mcknight]]" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , [[ola]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 741 ---------------------------------------------
Scan a scan . --> Scan a file --> Socre: 1.0

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String [[ponce]] = root . getAbsolutePath ( ) ; if ( ! [[ponce]] . endsWith ( File . separator ) ) { [[ponce]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[ponce]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[ponce]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[ponce]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 742 ---------------------------------------------
Returns a string representation of the given type . --> Convert a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class [[juicer]] ) { final String name = ' ' + [[juicer]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 743 ---------------------------------------------
Add a file to the scan . --> Add a file to the classpath --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[too]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 744 ---------------------------------------------
Scan file . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[mishandled]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[shani]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[shani]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[zafar]] ( final JtxTransactionMode tm , final Object [[petticoat]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[petticoat]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 248 / 43 / 746:  75%|███████▍  | 746/1000 [9:49:48<3:20:49, 47.44s/it][Succeeded / Failed / Skipped / Total] 455 / 248 / 43 / 746:  75%|███████▍  | 747/1000 [9:51:02<3:20:10, 47.47s/it][Succeeded / Failed / Skipped / Total] 455 / 249 / 43 / 747:  75%|███████▍  | 747/1000 [9:51:02<3:20:10, 47.47s/it][Succeeded / Failed / Skipped / Total] 455 / 249 / 43 / 747:  75%|███████▍  | 748/1000 [9:51:30<3:19:16, 47.45s/it][Succeeded / Failed / Skipped / Total] 456 / 249 / 43 / 748:  75%|███████▍  | 748/1000 [9:51:30<3:19:16, 47.45s/it][Succeeded / Failed / Skipped / Total] 456 / 249 / 43 / 748:  75%|███████▍  | 749/1000 [9:54:54<3:19:21, 47.66s/it][Succeeded / Failed / Skipped / Total] 457 / 249 / 43 / 749:  75%|███████▍  | 749/1000 [9:54:54<3:19:21, 47.66s/it][Succeeded / Failed / Skipped / Total] 457 / 249 / 43 / 749:  75%|███████▌  | 750/1000 [9:57:10<3:19:03, 47.77s/it][Succeeded / Failed / Skipped / Total] 457 / 250 / 43 / 750:  75%|███████▌  | 750/1000 [9:57:10<3:19:03, 47.77s/it][Succeeded / Failed / Skipped / Total] 457 / 250 / 43 / 750:  75%|███████▌  | 751/1000 [9:58:50<3:18:32, 47.84s/it]Get the scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[coelho]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 747 ---------------------------------------------
Obtains the scope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[blitzkrieg]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[blitzkrieg]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 748 ---------------------------------------------
Sets the scope for the given scope . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > [[conscious]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( [[conscious]] ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Decodes a byte array . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int length = [[arr]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[sndx]] = 0 , endx = length - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[sndx]] + 1 ; int sepCnt = length > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int [[len]] = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[len]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[len]] / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ [[sndx]] ++ ] ] << 18 | INV [ [[arr]] [ [[sndx]] ++ ] ] << 12 | INV [ [[arr]] [ [[sndx]] ++ ] ] << 6 | INV [ [[arr]] [ [[sndx]] ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[sndx]] += 2 ; cc = 0 ; } } if ( d < [[len]] ) { int i = 0 ; for ( int j = 0 ; [[sndx]] <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ [[sndx]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[len]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[concentration]] ( final char [ ] [[obsesses]] ) { int length = [[obsesses]] . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[clarita]] = 0 , endx = length - 1 ; int pad = [[obsesses]] [ endx ] == ' ' ? ( [[obsesses]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[clarita]] + 1 ; int sepCnt = length > 76 ? ( [[obsesses]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int [[unintentionally]] = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ [[unintentionally]] ] ; int d = 0 ; for ( int cc = 0 , eLen = ( [[unintentionally]] / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[obsesses]] [ [[clarita]] ++ ] ] << 18 | INV [ [[obsesses]] [ [[clarita]] ++ ] ] << 12 | INV [ [[obsesses]] [ [[clarita]] ++ ] ] << 6 | INV [ [[obsesses]] [ [[clarita]] ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[clarita]] += 2 ; cc = 0 ; } } if ( d < [[unintentionally]] ) { int i = 0 ; for ( int j = 0 ; [[clarita]] <= endx - pad ; j ++ ) { i |= INV [ [[obsesses]] [ [[clarita]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < [[unintentionally]] ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 750 ---------------------------------------------
Returns the next token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int [[timeToLive]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , [[timeToLive]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int [[dehydrated]] ) { Set < Token > [[ritalin]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[ritalin]] == null ) { [[ritalin]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[ritalin]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[ritalin]] ) ; unique = [[ritalin]] . add ( new Token ( value , [[dehydrated]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 458 / 250 / 43 / 751:  75%|███████▌  | 751/1000 [9:58:50<3:18:32, 47.84s/it][Succeeded / Failed / Skipped / Total] 458 / 250 / 43 / 751:  75%|███████▌  | 752/1000 [10:01:58<3:18:31, 48.03s/it][Succeeded / Failed / Skipped / Total] 459 / 250 / 43 / 752:  75%|███████▌  | 752/1000 [10:01:58<3:18:31, 48.03s/it][Succeeded / Failed / Skipped / Total] 459 / 250 / 43 / 752:  75%|███████▌  | 753/1000 [10:03:13<3:17:52, 48.07s/it][Succeeded / Failed / Skipped / Total] 459 / 251 / 43 / 753:  75%|███████▌  | 753/1000 [10:03:13<3:17:52, 48.07s/it][Succeeded / Failed / Skipped / Total] 459 / 251 / 43 / 753:  75%|███████▌  | 754/1000 [10:03:16<3:16:49, 48.01s/it][Succeeded / Failed / Skipped / Total] 460 / 251 / 43 / 754:  75%|███████▌  | 754/1000 [10:03:16<3:16:49, 48.01s/it][Succeeded / Failed / Skipped / Total] 460 / 251 / 43 / 754:  76%|███████▌  | 755/1000 [10:04:56<3:16:18, 48.07s/it][Succeeded / Failed / Skipped / Total] 461 / 251 / 43 / 755:  76%|███████▌  | 755/1000 [10:04:56<3:16:18, 48.07s/it][Succeeded / Failed / Skipped / Total] 461 / 251 / 43 / 755:  76%|███████▌  | 756/1000 [10:05:12<3:15:19, 48.03s/it][Succeeded / Failed / Skipped / Total] 462 / 251 / 43 / 756:  76%|███████▌  | 756/1000 [10:05:12<3:15:19, 48.03s/it][Succeeded / Failed / Skipped / Total] 462 / 251 / 43 / 756:  76%|███████▌  | 757/1000 [10:05:53<3:14:29, 48.02s/it]Removes a token from the set . --> Explicitly closes the number of times --> Socre: 1.0

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; [[tokenToRemove]] = [[token]] ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[seduced]] ( final Set < Token > [[pastimes]] ) { if ( [[pastimes]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[catskills]] = null ; Iterator < Token > iterator = [[pastimes]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[caiman]] = iterator . next ( ) ; if ( [[caiman]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[caiman]] . validUntil < validUntilMin ) { validUntilMin = [[caiman]] . validUntil ; [[catskills]] = [[caiman]] ; } } if ( ( [[catskills]] != null ) && ( [[pastimes]] . size ( ) >= maxTokensPerSession ) ) { [[pastimes]] . remove ( [[catskills]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 752 ---------------------------------------------
Return true if the session has been set . --> Return a set of tokens in a set --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "[[False]]" != "[[False]]" ; } boolean [[found]] = "[[False]]" != "[[False]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; [[found]] = "[[True]]" == "[[True]]" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[ravaged]] , final String [[stealthily]] ) { Set < Token > tokenSet = ( Set < Token > ) [[ravaged]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[stealthily]] == null ) ) { return "[[Needin]]" == "[[Needin]]" ; } if ( ( tokenSet == null ) || ( [[stealthily]] == null ) ) { return "[[Imports]]" != "[[Imports]]" ; } boolean [[bullheaded]] = "[[Imports]]" != "[[Imports]]" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( [[stealthily]] ) ) { it . remove ( ) ; [[bullheaded]] = "[[Needin]]" == "[[Needin]]" ; } } return [[bullheaded]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 753 ---------------------------------------------
Creates a new Bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[construed]] ( final Object [[fertilization]] ) { BeanCopy [[gurgles]] = new BeanCopy ( [[fertilization]] ) ; [[gurgles]] . isSourceMap = [[fertilization]] instanceof Map ; return [[gurgles]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 754 ---------------------------------------------
Sets the bean . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[drivel]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 755 ---------------------------------------------
Sets the value of a property . --> Shut down a bean --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[ngos]] ( String [[vanishes]] , final Object [[stoppin]] ) { if ( isTargetMap ) { [[vanishes]] = LEFT_SQ_BRACKET + [[vanishes]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[vanishes]] , [[stoppin]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 756 ---------------------------------------------
Registers an entity . --> Register a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[purloined]] ) { super . init ( [[purloined]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[purloined]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } [[purloined]] . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 462 / 252 / 43 / 757:  76%|███████▌  | 757/1000 [10:05:53<3:14:29, 48.02s/it][Succeeded / Failed / Skipped / Total] 462 / 252 / 43 / 757:  76%|███████▌  | 758/1000 [10:06:01<3:13:28, 47.97s/it][Succeeded / Failed / Skipped / Total] 463 / 252 / 43 / 758:  76%|███████▌  | 758/1000 [10:06:01<3:13:28, 47.97s/it][Succeeded / Failed / Skipped / Total] 463 / 252 / 43 / 758:  76%|███████▌  | 759/1000 [10:08:22<3:13:10, 48.09s/it][Succeeded / Failed / Skipped / Total] 463 / 253 / 43 / 759:  76%|███████▌  | 759/1000 [10:08:22<3:13:10, 48.09s/it][Succeeded / Failed / Skipped / Total] 463 / 253 / 43 / 759:  76%|███████▌  | 760/1000 [10:08:42<3:12:13, 48.06s/it][Succeeded / Failed / Skipped / Total] 464 / 253 / 43 / 760:  76%|███████▌  | 760/1000 [10:08:42<3:12:13, 48.06s/it][Succeeded / Failed / Skipped / Total] 464 / 253 / 43 / 760:  76%|███████▌  | 761/1000 [10:10:04<3:11:36, 48.10s/it][Succeeded / Failed / Skipped / Total] 465 / 253 / 43 / 761:  76%|███████▌  | 761/1000 [10:10:04<3:11:36, 48.10s/it][Succeeded / Failed / Skipped / Total] 465 / 253 / 43 / 761:  76%|███████▌  | 762/1000 [10:12:50<3:11:24, 48.26s/it]Resolve type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[quicklime]] Scope > S resolveScope ( final Class < S > scopeType ) { S [[restarts]] = ( S ) scopes . get ( scopeType ) ; if ( [[restarts]] == null ) { try { [[restarts]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[restarts]] ) ; scopes . put ( scopeType , [[restarts]] ) ; } return [[restarts]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 758 ---------------------------------------------
Resolve type . --> Resolve type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[aarhus]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[aarhus]] == null ) { [[aarhus]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 759 ---------------------------------------------
Resolve bean bean . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[anInterface]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[hoc]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[evaporates]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[evaporates]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 760 ---------------------------------------------
Removes a class from the bean . -->  --> Socre: 0.9999999999965575

[[[[Adv]]]]: public void removeBean ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void removeBean ( final Class [[sprouting]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 761 ---------------------------------------------
Returns a list of bean names . --> Obtains a list of beans --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[timed]] ( final Class type ) { String [ ] [[joon]] = beanCollections . get ( type ) ; if ( [[joon]] != null ) { return [[joon]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[whaddya]] = entry . getKey ( ) ; list . add ( [[whaddya]] ) ; } } if ( list . isEmpty ( ) ) { [[joon]] = StringPool . EMPTY_ARRAY ; } else { [[joon]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[joon]] ) ; return [[joon]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 254 / 43 / 762:  76%|███████▌  | 762/1000 [10:12:50<3:11:24, 48.26s/it][Succeeded / Failed / Skipped / Total] 465 / 254 / 43 / 762:  76%|███████▋  | 763/1000 [10:15:26<3:11:09, 48.40s/it][Succeeded / Failed / Skipped / Total] 465 / 255 / 43 / 763:  76%|███████▋  | 763/1000 [10:15:26<3:11:09, 48.40s/it][Succeeded / Failed / Skipped / Total] 465 / 255 / 43 / 763:  76%|███████▋  | 764/1000 [10:17:50<3:10:51, 48.52s/it][Succeeded / Failed / Skipped / Total] 465 / 256 / 43 / 764:  76%|███████▋  | 764/1000 [10:17:50<3:10:51, 48.52s/it][Succeeded / Failed / Skipped / Total] 465 / 256 / 43 / 764:  76%|███████▋  | 765/1000 [10:18:06<3:09:52, 48.48s/it]Register beans . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Adds a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Add a bean property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( [[property]] , "[[True]]" == "[[True]]" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[grubbing]] ( final String [[unlocks]] , final String [[irreparably]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[unlocks]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[blessing]] = cd . getPropertyDescriptor ( [[irreparably]] , "[[Fritz]]" == "[[Fritz]]" ) ; if ( [[blessing]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[irreparably]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[blessing]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 466 / 256 / 43 / 765:  76%|███████▋  | 765/1000 [10:18:06<3:09:52, 48.48s/it][Succeeded / Failed / Skipped / Total] 466 / 256 / 43 / 765:  77%|███████▋  | 766/1000 [10:18:14<3:08:51, 48.43s/it][Succeeded / Failed / Skipped / Total] 467 / 256 / 43 / 766:  77%|███████▋  | 766/1000 [10:18:14<3:08:51, 48.43s/it][Succeeded / Failed / Skipped / Total] 467 / 256 / 43 / 766:  77%|███████▋  | 767/1000 [10:18:21<3:07:50, 48.37s/it][Succeeded / Failed / Skipped / Total] 468 / 256 / 43 / 767:  77%|███████▋  | 767/1000 [10:18:21<3:07:50, 48.37s/it][Succeeded / Failed / Skipped / Total] 468 / 256 / 43 / 767:  77%|███████▋  | 768/1000 [10:18:25<3:06:49, 48.31s/it]Registers a bean definition . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[doodie]] = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[doodie]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { [[doodie]] = md . getMethod ( ) ; } } if ( [[doodie]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[doodie]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[doodie]] , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 766 ---------------------------------------------
Initialize the bean . --> Initialize bean methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[boatyard]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[boatyard]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Destroy beans --> Create a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[distressing]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[distressing]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 469 / 256 / 43 / 768:  77%|███████▋  | 768/1000 [10:18:25<3:06:49, 48.31s/it][Succeeded / Failed / Skipped / Total] 469 / 256 / 43 / 768:  77%|███████▋  | 769/1000 [10:19:48<3:06:10, 48.36s/it][Succeeded / Failed / Skipped / Total] 470 / 256 / 43 / 769:  77%|███████▋  | 769/1000 [10:19:48<3:06:10, 48.36s/it][Succeeded / Failed / Skipped / Total] 470 / 256 / 43 / 769:  77%|███████▋  | 770/1000 [10:19:53<3:05:09, 48.30s/it][Succeeded / Failed / Skipped / Total] 471 / 256 / 43 / 770:  77%|███████▋  | 770/1000 [10:19:53<3:05:09, 48.30s/it][Succeeded / Failed / Skipped / Total] 471 / 256 / 43 / 770:  77%|███████▋  | 771/1000 [10:20:07<3:04:11, 48.26s/it][Succeeded / Failed / Skipped / Total] 472 / 256 / 43 / 771:  77%|███████▋  | 771/1000 [10:20:07<3:04:11, 48.26s/it][Succeeded / Failed / Skipped / Total] 472 / 256 / 43 / 771:  77%|███████▋  | 772/1000 [10:20:22<3:03:13, 48.22s/it][Succeeded / Failed / Skipped / Total] 473 / 256 / 43 / 772:  77%|███████▋  | 772/1000 [10:20:22<3:03:13, 48.22s/it][Succeeded / Failed / Skipped / Total] 473 / 256 / 43 / 772:  77%|███████▋  | 773/1000 [10:22:10<3:02:42, 48.29s/it][Succeeded / Failed / Skipped / Total] 473 / 257 / 43 / 773:  77%|███████▋  | 773/1000 [10:22:10<3:02:42, 48.29s/it][Succeeded / Failed / Skipped / Total] 473 / 257 / 43 / 773:  77%|███████▋  | 774/1000 [10:22:16<3:01:41, 48.24s/it][Succeeded / Failed / Skipped / Total] 474 / 257 / 43 / 774:  77%|███████▋  | 774/1000 [10:22:16<3:01:41, 48.24s/it][Succeeded / Failed / Skipped / Total] 474 / 257 / 43 / 774:  78%|███████▊  | 775/1000 [10:22:37<3:00:45, 48.20s/it]Register a bean definition . --> Register a bean --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[bakers]] = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[bakers]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Register provider . --> Register a class definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( [[staticMethodName]] , arguments , "[[True]]" == "[[True]]" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class type , final String [[medgar]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[regrettably]] = cd . getMethodDescriptor ( [[medgar]] , arguments , "[[Chaucer]]" == "[[Chaucer]]" ) ; if ( [[regrettably]] == null ) { throw new PetiteException ( "Provider method not found: " + [[medgar]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[regrettably]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 770 ---------------------------------------------
Processes the given bean type . --> Helper function to create a Bean --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class type , final Consumer < String > [[measurement]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[measurement]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 771 ---------------------------------------------
Sets the parameter . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[entry]] : properties . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[bleeders]] : properties . entrySet ( ) ) { defineParameter ( [[bleeders]] . getKey ( ) . toString ( ) , [[bleeders]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 772 ---------------------------------------------
Execute a request . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[baez]] = null ; try { [[baez]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[baez]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[baez]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[baez]] ) ; } return [[baez]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 773 ---------------------------------------------
Resolves the version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[moments]] ) { final int [[speeds]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[speeds]] - 8 + 52 ; return [[moments]] > platformVersion ? [[moments]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
overrides the visitor to visit the value . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[emmys]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 775 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 475 / 257 / 43 / 775:  78%|███████▊  | 775/1000 [10:22:37<3:00:45, 48.20s/it][Succeeded / Failed / Skipped / Total] 475 / 257 / 43 / 775:  78%|███████▊  | 776/1000 [10:23:29<2:59:58, 48.21s/it][Succeeded / Failed / Skipped / Total] 476 / 257 / 43 / 776:  78%|███████▊  | 776/1000 [10:23:29<2:59:58, 48.21s/it][Succeeded / Failed / Skipped / Total] 476 / 257 / 43 / 776:  78%|███████▊  | 777/1000 [10:23:35<2:58:58, 48.15s/it][Succeeded / Failed / Skipped / Total] 477 / 257 / 43 / 777:  78%|███████▊  | 777/1000 [10:23:35<2:58:58, 48.15s/it][Succeeded / Failed / Skipped / Total] 477 / 257 / 43 / 777:  78%|███████▊  | 778/1000 [10:24:35<2:58:13, 48.17s/it][Succeeded / Failed / Skipped / Total] 478 / 257 / 43 / 778:  78%|███████▊  | 778/1000 [10:24:35<2:58:13, 48.17s/it][Succeeded / Failed / Skipped / Total] 478 / 257 / 43 / 778:  78%|███████▊  | 779/1000 [10:26:11<2:57:39, 48.23s/it][Succeeded / Failed / Skipped / Total] 478 / 258 / 43 / 779:  78%|███████▊  | 779/1000 [10:26:11<2:57:39, 48.23s/it][Succeeded / Failed / Skipped / Total] 478 / 258 / 43 / 779:  78%|███████▊  | 780/1000 [10:27:57<2:57:06, 48.30s/it][Succeeded / Failed / Skipped / Total] 478 / 259 / 43 / 780:  78%|███████▊  | 780/1000 [10:27:57<2:57:06, 48.30s/it][Succeeded / Failed / Skipped / Total] 478 / 259 / 43 / 780:  78%|███████▊  | 781/1000 [10:28:02<2:56:06, 48.25s/it][Succeeded / Failed / Skipped / Total] 479 / 259 / 43 / 781:  78%|███████▊  | 781/1000 [10:28:02<2:56:06, 48.25s/it][Succeeded / Failed / Skipped / Total] 479 / 259 / 43 / 781:  78%|███████▊  | 782/1000 [10:28:08<2:55:06, 48.19s/it][Succeeded / Failed / Skipped / Total] 480 / 259 / 43 / 782:  78%|███████▊  | 782/1000 [10:28:08<2:55:06, 48.19s/it][Succeeded / Failed / Skipped / Total] 480 / 259 / 43 / 782:  78%|███████▊  | 783/1000 [10:28:36<2:54:12, 48.17s/it]Invokes a method argument . --> Throw IllegalArgumentException --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[methodInfo]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[lucrezia]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[lucrezia]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 776 ---------------------------------------------
Create a named field name . --> Returns a &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[erb]] ( final String [[damper]] , final int index ) { return ProxettaNames . fieldPrefix + [[damper]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 777 ---------------------------------------------
Create a named method name . --> Creates a & t ; --> Socre: 1.0

[[[[Adv]]]]: public static String adviceMethodName ( final String name , final int [[index]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String adviceMethodName ( final String name , final int [[resentful]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[resentful]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 778 ---------------------------------------------
Visits a method . --> Shuts down the Groovy --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[ravenwood]] ( final MethodVisitor mv , final MethodInfo [[bronte]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int [[shanghainese]] = 1 ; [[shanghainese]] <= [[bronte]] . getArgumentsCount ( ) ; [[shanghainese]] ++ ) { loadMethodArgument ( mv , [[bronte]] , [[shanghainese]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Load a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 0 ; i < [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo [[bain]] ) { for ( int i = 0 ; i < [[bain]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[bain]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Load method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo [[wright]] ) { for ( int i = 1 ; i <= [[wright]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[wright]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
overrides the visitor to load a method . --> overrides the visitor to create a string --> Socre: 1.0

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo [[lifts]] , final int index ) { int offset = [[lifts]] . getArgumentOffset ( index ) ; int type = [[lifts]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 782 ---------------------------------------------
Visits a method . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bakersfield]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 481 / 259 / 43 / 783:  78%|███████▊  | 783/1000 [10:28:36<2:54:12, 48.17s/it][Succeeded / Failed / Skipped / Total] 481 / 259 / 43 / 783:  78%|███████▊  | 784/1000 [10:28:41<2:53:12, 48.11s/it][Succeeded / Failed / Skipped / Total] 482 / 259 / 43 / 784:  78%|███████▊  | 784/1000 [10:28:41<2:53:12, 48.11s/it][Succeeded / Failed / Skipped / Total] 482 / 259 / 43 / 784:  78%|███████▊  | 785/1000 [10:28:47<2:52:13, 48.06s/it][Succeeded / Failed / Skipped / Total] 483 / 259 / 43 / 785:  78%|███████▊  | 785/1000 [10:28:47<2:52:13, 48.06s/it][Succeeded / Failed / Skipped / Total] 483 / 259 / 43 / 785:  79%|███████▊  | 786/1000 [10:29:01<2:51:15, 48.02s/it][Succeeded / Failed / Skipped / Total] 484 / 259 / 43 / 786:  79%|███████▊  | 786/1000 [10:29:01<2:51:15, 48.02s/it][Succeeded / Failed / Skipped / Total] 484 / 259 / 43 / 786:  79%|███████▊  | 787/1000 [10:30:29<2:50:38, 48.07s/it][Succeeded / Failed / Skipped / Total] 484 / 260 / 43 / 787:  79%|███████▊  | 787/1000 [10:30:29<2:50:38, 48.07s/it][Succeeded / Failed / Skipped / Total] 484 / 260 / 43 / 787:  79%|███████▉  | 788/1000 [10:30:34<2:49:38, 48.01s/it]implements the visitor to find the method . --> implements the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo [[vigilantes]] , int varOffset ) { varOffset += [[vigilantes]] . getAllArgumentsSize ( ) ; switch ( [[vigilantes]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 784 ---------------------------------------------
Creates a string representation of a class . --> Convert a string to a string representation --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[cheaply]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 785 ---------------------------------------------
Visit the given visit type . --> overrides the visitor to create a byte representation of the given class --> Socre: 1.0

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[uch]] ) { if ( [[uch]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[uch]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[uch]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[uch]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[uch]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[uch]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[uch]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[uch]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[uch]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 786 ---------------------------------------------
Visits the given primitive type . --> implements the visitor to look for cycles --> Socre: 1.0

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor [[stir]] , final Class componentType ) { if ( componentType == int . class ) { [[stir]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[stir]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[stir]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[stir]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[stir]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[stir]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[stir]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[stir]] . visitInsn ( CASTORE ) ; return ; } [[stir]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 787 ---------------------------------------------
Returns the default encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( contentType ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[bup]] ( final String contentType , String [[reconstructing]] ) { String [[melodrama]] = [[bup]] ( contentType ) ; if ( [[melodrama]] == null ) { if ( [[reconstructing]] == null ) { [[reconstructing]] = JoddCore . encoding ; } [[melodrama]] = [[reconstructing]] ; } return [[melodrama]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 485 / 260 / 43 / 788:  79%|███████▉  | 788/1000 [10:30:34<2:49:38, 48.01s/it][Succeeded / Failed / Skipped / Total] 485 / 260 / 43 / 788:  79%|███████▉  | 789/1000 [10:31:58<2:49:00, 48.06s/it][Succeeded / Failed / Skipped / Total] 485 / 261 / 43 / 789:  79%|███████▉  | 789/1000 [10:31:58<2:49:00, 48.06s/it][Succeeded / Failed / Skipped / Total] 485 / 261 / 43 / 789:  79%|███████▉  | 790/1000 [10:32:14<2:48:03, 48.02s/it][Succeeded / Failed / Skipped / Total] 486 / 261 / 43 / 790:  79%|███████▉  | 790/1000 [10:32:14<2:48:03, 48.02s/it][Succeeded / Failed / Skipped / Total] 486 / 261 / 43 / 790:  79%|███████▉  | 791/1000 [10:33:39<2:47:25, 48.06s/it][Succeeded / Failed / Skipped / Total] 486 / 262 / 43 / 791:  79%|███████▉  | 791/1000 [10:33:39<2:47:25, 48.06s/it][Succeeded / Failed / Skipped / Total] 486 / 262 / 43 / 791:  79%|███████▉  | 792/1000 [10:33:42<2:46:25, 48.01s/it][Succeeded / Failed / Skipped / Total] 487 / 262 / 43 / 792:  79%|███████▉  | 792/1000 [10:33:42<2:46:25, 48.01s/it][Succeeded / Failed / Skipped / Total] 487 / 262 / 43 / 792:  79%|███████▉  | 793/1000 [10:35:45<2:45:57, 48.10s/it][Succeeded / Failed / Skipped / Total] 487 / 263 / 43 / 793:  79%|███████▉  | 793/1000 [10:35:45<2:45:57, 48.10s/it][Succeeded / Failed / Skipped / Total] 487 / 263 / 43 / 793:  79%|███████▉  | 794/1000 [10:36:31<2:45:08, 48.10s/it][Succeeded / Failed / Skipped / Total] 488 / 263 / 43 / 794:  79%|███████▉  | 794/1000 [10:36:31<2:45:08, 48.10s/it][Succeeded / Failed / Skipped / Total] 488 / 263 / 43 / 794:  80%|███████▉  | 795/1000 [10:36:39<2:44:10, 48.05s/it]Get system flags . --> Gets the system . --> Socre: 1.0

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags flags ) { if ( flags == null ) return "[[Adachi]]" == "[[Adachi]]" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "[[Adachi]]" == "[[Adachi]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 789 ---------------------------------------------
Returns the HTTP header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[ndx]] = header . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return header . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[artemis]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int [[laurels]] = header . indexOf ( "Bearer " ) ; if ( [[laurels]] == - 1 ) { return null ; } return header . substring ( [[laurels]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
Send http response . --> Send http response --> Socre: 1.0

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[spastic]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[spastic]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 791 ---------------------------------------------
Downloads a file from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[jurassic]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Sets the response type . --> Set mime type --> Socre: 1.0

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String [[fileName]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[fileName]] != null ) ) { String extension = FileNameUtil . getExtension ( [[fileName]] ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String [[reindeer]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[reindeer]] != null ) ) { String extension = FileNameUtil . getExtension ( [[reindeer]] ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 793 ---------------------------------------------
Returns a list of Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest [[dorky]] , final String cookieName ) { Cookie [ ] cookies = [[dorky]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
Read request from request --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter [[out]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[out]] ) ; return [[out]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[jedediah]] ( final HttpServletRequest [[coombe]] ) throws IOException { BufferedReader buff = [[coombe]] . getReader ( ) ; StringWriter [[nawab]] = new StringWriter ( ) ; StreamUtil . copy ( buff , [[nawab]] ) ; return [[nawab]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 489 / 263 / 43 / 795:  80%|███████▉  | 795/1000 [10:36:39<2:44:10, 48.05s/it][Succeeded / Failed / Skipped / Total] 489 / 263 / 43 / 795:  80%|███████▉  | 796/1000 [10:38:50<2:43:43, 48.15s/it][Succeeded / Failed / Skipped / Total] 489 / 264 / 43 / 796:  80%|███████▉  | 796/1000 [10:38:50<2:43:43, 48.15s/it][Succeeded / Failed / Skipped / Total] 489 / 264 / 43 / 796:  80%|███████▉  | 797/1000 [10:39:41<2:42:55, 48.16s/it][Succeeded / Failed / Skipped / Total] 490 / 264 / 43 / 797:  80%|███████▉  | 797/1000 [10:39:41<2:42:55, 48.16s/it][Succeeded / Failed / Skipped / Total] 490 / 264 / 43 / 797:  80%|███████▉  | 798/1000 [10:40:34<2:42:09, 48.16s/it][Succeeded / Failed / Skipped / Total] 491 / 264 / 43 / 798:  80%|███████▉  | 798/1000 [10:40:34<2:42:09, 48.16s/it][Succeeded / Failed / Skipped / Total] 491 / 264 / 43 / 798:  80%|███████▉  | 799/1000 [10:40:55<2:41:14, 48.13s/it][Succeeded / Failed / Skipped / Total] 492 / 264 / 43 / 799:  80%|███████▉  | 799/1000 [10:40:55<2:41:14, 48.13s/it][Succeeded / Failed / Skipped / Total] 492 / 264 / 43 / 799:  80%|████████  | 800/1000 [10:43:31<2:40:52, 48.26s/it]Read a request from the request . --> Get a reader from a reader --> Socre: 1.0

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[philanthropy]] = request . getCharacterEncoding ( ) ; if ( [[philanthropy]] == null ) { [[philanthropy]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[philanthropy]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Set the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext [[sedated]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[sedated]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[sedated]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[sedated]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Build the servlet context . --> Converts a string to a JMBean --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[concludes]] ( final ServletContext [[deuteronomy]] , final String contextPathVariableName ) { String [[offi]] = getContextPath ( [[deuteronomy]] ) ; [[deuteronomy]] . setAttribute ( contextPathVariableName , [[offi]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Return the query parameter value . --> Obtain a string from a URL --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[mexicans]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[munro]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[munro]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 799 ---------------------------------------------
Extract a request from the request parameters . --> Check if the request parameter is valid --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { if ( [[treatEmptyParamsAsNull]] || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( [[treatEmptyParamsAsNull]] ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean [[willoughby]] , final boolean ignoreEmptyRequestParams ) { if ( [[willoughby]] || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( [[willoughby]] ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 800 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 492 / 265 / 43 / 800:  80%|████████  | 800/1000 [10:43:31<2:40:52, 48.26s/it][Succeeded / Failed / Skipped / Total] 492 / 265 / 43 / 800:  80%|████████  | 801/1000 [10:43:41<2:39:55, 48.22s/it][Succeeded / Failed / Skipped / Total] 493 / 265 / 43 / 801:  80%|████████  | 801/1000 [10:43:41<2:39:55, 48.22s/it][Succeeded / Failed / Skipped / Total] 493 / 265 / 43 / 801:  80%|████████  | 802/1000 [10:43:46<2:38:56, 48.16s/it][Succeeded / Failed / Skipped / Total] 494 / 265 / 43 / 802:  80%|████████  | 802/1000 [10:43:46<2:38:56, 48.16s/it][Succeeded / Failed / Skipped / Total] 494 / 265 / 43 / 802:  80%|████████  | 803/1000 [10:44:17<2:38:03, 48.14s/it][Succeeded / Failed / Skipped / Total] 495 / 265 / 43 / 803:  80%|████████  | 803/1000 [10:44:17<2:38:03, 48.14s/it][Succeeded / Failed / Skipped / Total] 495 / 265 / 43 / 803:  80%|████████  | 804/1000 [10:44:21<2:37:04, 48.09s/it][Succeeded / Failed / Skipped / Total] 496 / 265 / 43 / 804:  80%|████████  | 804/1000 [10:44:21<2:37:04, 48.09s/it][Succeeded / Failed / Skipped / Total] 496 / 265 / 43 / 804:  80%|████████  | 805/1000 [10:44:42<2:36:10, 48.05s/it][Succeeded / Failed / Skipped / Total] 497 / 265 / 43 / 805:  80%|████████  | 805/1000 [10:44:42<2:36:10, 48.05s/it][Succeeded / Failed / Skipped / Total] 497 / 265 / 43 / 805:  81%|████████  | 806/1000 [10:45:44<2:35:25, 48.07s/it][Succeeded / Failed / Skipped / Total] 497 / 266 / 43 / 806:  81%|████████  | 806/1000 [10:45:44<2:35:25, 48.07s/it][Succeeded / Failed / Skipped / Total] 497 / 266 / 43 / 806:  81%|████████  | 807/1000 [10:46:14<2:34:33, 48.05s/it][Succeeded / Failed / Skipped / Total] 498 / 266 / 43 / 807:  81%|████████  | 807/1000 [10:46:14<2:34:33, 48.05s/it][Succeeded / Failed / Skipped / Total] 498 / 266 / 43 / 807:  81%|████████  | 808/1000 [10:46:22<2:33:35, 48.00s/it][Succeeded / Failed / Skipped / Total] 499 / 266 / 43 / 808:  81%|████████  | 808/1000 [10:46:22<2:33:35, 48.00s/it][Succeeded / Failed / Skipped / Total] 499 / 266 / 43 / 808:  81%|████████  | 809/1000 [10:47:06<2:32:46, 47.99s/it]Sets the request parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[servletRequest]] , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[aught]] , final boolean [[electoral]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[aught]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[aught]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = [[aught]] . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , [[electoral]] , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[aught]] . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 801 ---------------------------------------------
Return a body of body . --> Helper method to initialize a Jsmer --> Socre: 1.0

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[calmer]] ) throws JspException { if ( [[calmer]] == null ) { return ; } try { [[calmer]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 802 ---------------------------------------------
Renders a Writer . --> Constructs a FastMethod from a FastFormat --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment body ) throws JspException { FastCharArrayWriter [[hummers]] = new FastCharArrayWriter ( ) ; invokeBody ( body , [[hummers]] ) ; return [[hummers]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 803 ---------------------------------------------
Render body . --> Render a pixel --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[fortifications]] ( final JspFragment [[pixels]] ) throws JspException { char [ ] result = renderBody ( [[pixels]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 804 ---------------------------------------------
Initialize strategy . --> Initialize the invocation --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[wnbc]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Destroy a point . --> Unregisters a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[divorcée]] ( ) { for ( final DestroyMethodPoint [[slay]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[slay]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[slay]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 806 ---------------------------------------------
Creates a bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[santoro]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paulina]] = beanDefinition . ctor . references . length ; Object [ ] [[pearlman]] = new Object [ [[paulina]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Resolves the given param . --> Check if a bean exists --> Socre: 1.0

[[[[Adv]]]]: public void injectParams ( final ParamManager [[paramManager]] , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void injectParams ( final ParamManager [[sipping]] , final boolean [[ul]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[ul]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Sets the HTTP request . --> Get a request for a given request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[chrysanthemum]] ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
[Succeeded / Failed / Skipped / Total] 500 / 266 / 43 / 809:  81%|████████  | 809/1000 [10:47:06<2:32:46, 47.99s/it][Succeeded / Failed / Skipped / Total] 500 / 266 / 43 / 809:  81%|████████  | 810/1000 [10:47:11<2:31:48, 47.94s/it][Succeeded / Failed / Skipped / Total] 501 / 266 / 43 / 810:  81%|████████  | 810/1000 [10:47:11<2:31:48, 47.94s/it][Succeeded / Failed / Skipped / Total] 501 / 266 / 43 / 810:  81%|████████  | 811/1000 [10:47:20<2:30:51, 47.89s/it][Succeeded / Failed / Skipped / Total] 502 / 266 / 43 / 811:  81%|████████  | 811/1000 [10:47:20<2:30:51, 47.89s/it][Succeeded / Failed / Skipped / Total] 502 / 266 / 43 / 811:  81%|████████  | 812/1000 [10:47:25<2:29:53, 47.84s/it][Succeeded / Failed / Skipped / Total] 503 / 266 / 43 / 812:  81%|████████  | 812/1000 [10:47:25<2:29:53, 47.84s/it][Succeeded / Failed / Skipped / Total] 503 / 266 / 43 / 812:  81%|████████▏ | 813/1000 [10:48:06<2:29:04, 47.83s/it][Succeeded / Failed / Skipped / Total] 504 / 266 / 43 / 813:  81%|████████▏ | 813/1000 [10:48:06<2:29:04, 47.83s/it][Succeeded / Failed / Skipped / Total] 504 / 266 / 43 / 813:  81%|████████▏ | 814/1000 [10:48:19<2:28:08, 47.79s/it][Succeeded / Failed / Skipped / Total] 505 / 266 / 43 / 814:  81%|████████▏ | 814/1000 [10:48:19<2:28:08, 47.79s/it][Succeeded / Failed / Skipped / Total] 505 / 266 / 43 / 814:  82%|████████▏ | 815/1000 [10:50:53<2:27:44, 47.92s/it][Succeeded / Failed / Skipped / Total] 505 / 267 / 43 / 815:  82%|████████▏ | 815/1000 [10:50:53<2:27:44, 47.92s/it][Succeeded / Failed / Skipped / Total] 505 / 267 / 43 / 815:  82%|████████▏ | 816/1000 [10:50:58<2:26:47, 47.87s/it][Succeeded / Failed / Skipped / Total] 506 / 267 / 43 / 816:  82%|████████▏ | 816/1000 [10:50:58<2:26:47, 47.87s/it][Succeeded / Failed / Skipped / Total] 506 / 267 / 43 / 816:  82%|████████▏ | 817/1000 [10:53:30<2:26:22, 47.99s/it]--------------------------------------------- Result 809 ---------------------------------------------
Adds a header value . --> Add a list of resources to a list --> Socre: 1.0

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[husker]] , final String [[brenda]] ) { List < String > valuesList = super . getAll ( [[husker]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[husker]] , [[brenda]] ) ; return ; } super . remove ( [[husker]] ) ; valuesList . add ( [[brenda]] ) ; super . addAll ( [[husker]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 810 ---------------------------------------------
Adds a value to the map . --> Adds a new entry . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry [[pv]] = map . get ( key ) ; if ( [[pv]] != null ) { realValue = [[pv]] . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry [[droplet]] = map . get ( key ) ; if ( [[droplet]] != null ) { realValue = [[droplet]] . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 811 ---------------------------------------------
Adds a property to the map . --> Add a string to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void putBaseProperty ( final String [[key]] , final String value , final boolean append ) { put ( null , baseProperties , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void putBaseProperty ( final String [[whiteside]] , final String value , final boolean append ) { put ( null , baseProperties , [[whiteside]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Put a profile . --> Put a value into a map --> Socre: 1.0

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void putProfileProperty ( final String key , final String value , final String [[rca]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[rca]] , k -> new HashMap <> ( ) ) ; put ( [[rca]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 813 ---------------------------------------------
Returns the profile for the given profile . --> Return a copy of the current thread --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( profile ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[crudely]] ( final String profile , final String key ) { final Map < String , PropsEntry > [[terrifyingly]] = profileProperties . get ( profile ) ; if ( [[terrifyingly]] == null ) { return null ; } return [[terrifyingly]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Resolves the given string . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[batten]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 815 ---------------------------------------------
Converts a map to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[kleptomaniac]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[kleptomaniac]] == null ) { [[kleptomaniac]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
Convert a byte array to a byte array --> Compares two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[off]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % data . length ; } offp [ 0 ] = [[off]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[dono]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[dono]] ] & 0xff ) ; [[dono]] = ( [[dono]] + 1 ) % data . length ; } offp [ 0 ] = [[dono]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 507 / 267 / 43 / 817:  82%|████████▏ | 817/1000 [10:53:30<2:26:22, 47.99s/it][Succeeded / Failed / Skipped / Total] 507 / 267 / 43 / 817:  82%|████████▏ | 818/1000 [10:54:17<2:25:34, 47.99s/it][Succeeded / Failed / Skipped / Total] 508 / 267 / 43 / 818:  82%|████████▏ | 818/1000 [10:54:17<2:25:34, 47.99s/it][Succeeded / Failed / Skipped / Total] 508 / 267 / 43 / 818:  82%|████████▏ | 819/1000 [10:54:57<2:24:44, 47.98s/it][Succeeded / Failed / Skipped / Total] 509 / 267 / 43 / 819:  82%|████████▏ | 819/1000 [10:54:57<2:24:44, 47.98s/it][Succeeded / Failed / Skipped / Total] 509 / 267 / 43 / 819:  82%|████████▏ | 820/1000 [10:57:15<2:24:16, 48.09s/it][Succeeded / Failed / Skipped / Total] 509 / 268 / 43 / 820:  82%|████████▏ | 820/1000 [10:57:15<2:24:16, 48.09s/it][Succeeded / Failed / Skipped / Total] 509 / 268 / 43 / 820:  82%|████████▏ | 821/1000 [10:59:03<2:23:41, 48.17s/it][Succeeded / Failed / Skipped / Total] 509 / 269 / 43 / 821:  82%|████████▏ | 821/1000 [10:59:03<2:23:41, 48.17s/it][Succeeded / Failed / Skipped / Total] 509 / 269 / 43 / 821:  82%|████████▏ | 822/1000 [10:59:43<2:22:51, 48.16s/it][Succeeded / Failed / Skipped / Total] 510 / 269 / 43 / 822:  82%|████████▏ | 822/1000 [10:59:43<2:22:51, 48.16s/it][Succeeded / Failed / Skipped / Total] 510 / 269 / 43 / 822:  82%|████████▏ | 823/1000 [11:00:59<2:22:09, 48.19s/it][Succeeded / Failed / Skipped / Total] 511 / 269 / 43 / 823:  82%|████████▏ | 823/1000 [11:00:59<2:22:09, 48.19s/it][Succeeded / Failed / Skipped / Total] 511 / 269 / 43 / 823:  82%|████████▏ | 824/1000 [11:01:51<2:21:21, 48.19s/it]Encrypt a password . --> Convert salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[hashed]] ; char [[minor]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[minor]] = salt . charAt ( 2 ) ; if ( [[minor]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[realize]] ; char [[stephane]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[stephane]] = salt . charAt ( 2 ) ; if ( [[stephane]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 818 ---------------------------------------------
Hashes the given string . --> Returns the number of UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] [[hashed_bytes]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; [[hashed_bytes]] = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[hashed_bytes]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[hashed_bytes]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[judgeship]] ) { byte [ ] [[lisboa]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[judgeship]] ) ; [[lisboa]] = [[judgeship]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( [[lisboa]] . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[lisboa]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 819 ---------------------------------------------
Writes number of bytes to the output stream . --> Convert a byte array into a byte array --> Socre: 1.0

[[[[Adv]]]]: public int copyAll ( final OutputStream [[out]] ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream [[croats]] ) throws IOException { int count = 0 ; while ( "[[Jeter]]" == "[[Jeter]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[croats]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 820 ---------------------------------------------
Writes the number of bytes to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "[[Slaughters]]" == "[[Slaughters]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 821 ---------------------------------------------
Parses the action action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[amar]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[mcadoo]] = resolveActionConfig ( [[amar]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Resolves annotation . --> Resolve a ActionAnnotation --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues [[firewall]] ) { final Class < ? extends Annotation > [[jigar]] ; if ( [[firewall]] == null ) { [[jigar]] = Action . class ; } else { [[jigar]] = [[firewall]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[jigar]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 823 ---------------------------------------------
Parses a alias definition . --> Unregister a MongoDB method --> Socre: 1.0

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[delivers]] = parseMethodAlias ( annotationValues ) ; if ( [[delivers]] != null ) { String [[sulphurous]] = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[delivers]] , [[sulphurous]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
[Succeeded / Failed / Skipped / Total] 512 / 269 / 43 / 824:  82%|████████▏ | 824/1000 [11:01:51<2:21:21, 48.19s/it][Succeeded / Failed / Skipped / Total] 512 / 269 / 43 / 824:  82%|████████▎ | 825/1000 [11:02:39<2:20:33, 48.19s/it][Succeeded / Failed / Skipped / Total] 513 / 269 / 43 / 825:  82%|████████▎ | 825/1000 [11:02:39<2:20:33, 48.19s/it][Succeeded / Failed / Skipped / Total] 513 / 269 / 43 / 825:  83%|████████▎ | 826/1000 [11:03:58<2:19:52, 48.23s/it][Succeeded / Failed / Skipped / Total] 513 / 270 / 43 / 826:  83%|████████▎ | 826/1000 [11:03:58<2:19:52, 48.23s/it][Succeeded / Failed / Skipped / Total] 513 / 270 / 43 / 826:  83%|████████▎ | 827/1000 [11:04:55<2:19:05, 48.24s/it][Succeeded / Failed / Skipped / Total] 514 / 270 / 43 / 827:  83%|████████▎ | 827/1000 [11:04:55<2:19:05, 48.24s/it][Succeeded / Failed / Skipped / Total] 514 / 270 / 43 / 827:  83%|████████▎ | 828/1000 [11:05:27<2:18:14, 48.22s/it][Succeeded / Failed / Skipped / Total] 515 / 270 / 43 / 828:  83%|████████▎ | 828/1000 [11:05:27<2:18:14, 48.22s/it][Succeeded / Failed / Skipped / Total] 515 / 270 / 43 / 828:  83%|████████▎ | 829/1000 [11:08:06<2:17:48, 48.36s/it][Succeeded / Failed / Skipped / Total] 515 / 271 / 43 / 829:  83%|████████▎ | 829/1000 [11:08:06<2:17:48, 48.36s/it][Succeeded / Failed / Skipped / Total] 515 / 271 / 44 / 830:  83%|████████▎ | 830/1000 [11:08:06<2:16:50, 48.30s/it][Succeeded / Failed / Skipped / Total] 515 / 271 / 44 / 830:  83%|████████▎ | 831/1000 [11:08:38<2:15:58, 48.28s/it][Succeeded / Failed / Skipped / Total] 516 / 271 / 44 / 831:  83%|████████▎ | 831/1000 [11:08:38<2:15:58, 48.28s/it][Succeeded / Failed / Skipped / Total] 516 / 271 / 44 / 831:  83%|████████▎ | 832/1000 [11:09:03<2:15:05, 48.25s/it]--------------------------------------------- Result 824 ---------------------------------------------
Gets the type of the method . --> Obtains the observation of a bservation --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[matsumoto]] ) { Class < ? extends ActionInterceptor > [ ] [[jeebies]] = null ; InterceptedBy interceptedBy = [[matsumoto]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[jeebies]] = interceptedBy . value ( ) ; if ( [[jeebies]] . length == 0 ) { [[jeebies]] = null ; } } return [[jeebies]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 825 ---------------------------------------------
Gets the annotation . --> Returns the filter filtered by the filter --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[goingto]] ( final AnnotatedElement [[bandersnatch]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[bandersnatch]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 826 ---------------------------------------------
Read a package name . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package [[actionPackage]] = actionClass . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[alom]] ( final Class actionClass ) { Package [[plans]] = actionClass . getPackage ( ) ; final String actionPackageName = [[plans]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Populates an action action . --> Sets a annotation --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues [[annotationValues]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[raccoon]] ( final String methodName , final ActionAnnotationValues [[feasts]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 828 ---------------------------------------------
Returns a annotation . --> Return the dumping dumping --> Socre: 1.0

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues [[burgeoning]] ) { String [[dumps]] = null ; if ( [[burgeoning]] != null ) { [[dumps]] = [[burgeoning]] . alias ( ) ; } return [[dumps]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Create a new scope action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[defaultActionResult]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition [[actionDefinition]] , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , [[actionDefinition]] , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > [[destination]] , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition [[sì]] , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , [[sì]] , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 830 ---------------------------------------------
Sets the limit . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 831 ---------------------------------------------
Gets the target class . --> A convenience method for creating a ClassLoader --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[allen]] > [[allen]] applyAdvice ( final Class < [[allen]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 832 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 517 / 271 / 44 / 832:  83%|████████▎ | 832/1000 [11:09:03<2:15:05, 48.25s/it][Succeeded / Failed / Skipped / Total] 517 / 271 / 44 / 832:  83%|████████▎ | 833/1000 [11:09:47<2:14:16, 48.24s/it][Succeeded / Failed / Skipped / Total] 518 / 271 / 44 / 833:  83%|████████▎ | 833/1000 [11:09:47<2:14:16, 48.24s/it][Succeeded / Failed / Skipped / Total] 518 / 271 / 44 / 833:  83%|████████▎ | 834/1000 [11:10:27<2:13:26, 48.23s/it][Succeeded / Failed / Skipped / Total] 519 / 271 / 44 / 834:  83%|████████▎ | 834/1000 [11:10:27<2:13:26, 48.23s/it][Succeeded / Failed / Skipped / Total] 519 / 271 / 44 / 834:  84%|████████▎ | 835/1000 [11:11:18<2:12:39, 48.24s/it][Succeeded / Failed / Skipped / Total] 520 / 271 / 44 / 835:  84%|████████▎ | 835/1000 [11:11:18<2:12:39, 48.24s/it][Succeeded / Failed / Skipped / Total] 520 / 271 / 44 / 835:  84%|████████▎ | 836/1000 [11:12:30<2:11:55, 48.27s/it][Succeeded / Failed / Skipped / Total] 520 / 272 / 44 / 836:  84%|████████▎ | 836/1000 [11:12:30<2:11:55, 48.27s/it][Succeeded / Failed / Skipped / Total] 520 / 272 / 44 / 836:  84%|████████▎ | 837/1000 [11:13:33<2:11:10, 48.28s/it][Succeeded / Failed / Skipped / Total] 520 / 273 / 44 / 837:  84%|████████▎ | 837/1000 [11:13:33<2:11:10, 48.28s/it][Succeeded / Failed / Skipped / Total] 520 / 273 / 44 / 837:  84%|████████▍ | 838/1000 [11:14:20<2:10:21, 48.28s/it][Succeeded / Failed / Skipped / Total] 521 / 273 / 44 / 838:  84%|████████▍ | 838/1000 [11:14:20<2:10:21, 48.28s/it][Succeeded / Failed / Skipped / Total] 521 / 273 / 44 / 838:  84%|████████▍ | 839/1000 [11:15:42<2:09:39, 48.32s/it][Succeeded / Failed / Skipped / Total] 522 / 273 / 44 / 839:  84%|████████▍ | 839/1000 [11:15:42<2:09:39, 48.32s/it][Succeeded / Failed / Skipped / Total] 522 / 273 / 44 / 839:  84%|████████▍ | 840/1000 [11:15:51<2:08:44, 48.28s/it][Succeeded / Failed / Skipped / Total] 523 / 273 / 44 / 840:  84%|████████▍ | 840/1000 [11:15:51<2:08:44, 48.28s/it][Succeeded / Failed / Skipped / Total] 523 / 273 / 44 / 840:  84%|████████▍ | 841/1000 [11:16:08<2:07:49, 48.24s/it][Succeeded / Failed / Skipped / Total] 523 / 274 / 44 / 841:  84%|████████▍ | 841/1000 [11:16:08<2:07:49, 48.24s/it][Succeeded / Failed / Skipped / Total] 523 / 274 / 44 / 841:  84%|████████▍ | 842/1000 [11:16:29<2:06:56, 48.21s/it]Sets the proxy . --> Set the value of a class --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[ahah]] ( final Object [[pctures]] , final Object target ) { Class proxyClass = [[pctures]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[pctures]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 833 ---------------------------------------------
Visit a annotation . --> Static factory method to create a KerAnnotation --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[scorpio]] ( final String [[skirmishers]] , final boolean [[wade]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[skirmishers]] , [[wade]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves a named locale . --> Return the names of a node --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[jargon]] ( final String [[emanations]] ) { if ( jsonNames == null ) { return [[emanations]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[emanations]] ) ; if ( jsonIndex == - 1 ) { return [[emanations]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 835 ---------------------------------------------
Returns the real index of the given name . --> Converts a String to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[carl]] ( final String [[amendment]] ) { if ( realNames == null ) { return [[amendment]] ; } int [[paralytic]] = ArraysUtil . indexOf ( realNames , [[amendment]] ) ; if ( [[paralytic]] == - 1 ) { return [[amendment]] ; } return jsonNames [ [[paralytic]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 836 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[skelly]] ) { TypeData [[vishnu]] = typeDataMap . get ( [[skelly]] ) ; if ( [[vishnu]] == null ) { if ( serializationSubclassAware ) { [[vishnu]] = findSubclassTypeData ( [[skelly]] ) ; } if ( [[vishnu]] == null ) { [[vishnu]] = scanClassForAnnotations ( [[skelly]] ) ; typeDataMap . put ( [[skelly]] , [[vishnu]] ) ; } } return [[vishnu]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Returns the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[mers]] ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the default type . --> Find the annotation for the given annotation --> Socre: 1.0

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( [[type]] . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[akio]] ) { final Class < ? extends Annotation > [[pode]] = jsonAnnotation ; if ( [[akio]] . getAnnotation ( [[pode]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 839 ---------------------------------------------
Resolve a named type . --> Resolve type --> Socre: 1.0

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[name]] ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[brier]] ) { TypeData [[pocahontas]] = lookupTypeData ( type ) ; return [[pocahontas]] . resolveJsonName ( [[brier]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 840 ---------------------------------------------
Resolve type . --> Resolve a named type --> Socre: 1.0

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class type , final String jsonName ) { TypeData [[dinotopia]] = lookupTypeData ( type ) ; return [[dinotopia]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 841 ---------------------------------------------
Get the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[fallin]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 842 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 524 / 274 / 44 / 842:  84%|████████▍ | 842/1000 [11:16:29<2:06:56, 48.21s/it][Succeeded / Failed / Skipped / Total] 524 / 274 / 44 / 842:  84%|████████▍ | 843/1000 [11:18:13<2:06:18, 48.27s/it][Succeeded / Failed / Skipped / Total] 524 / 275 / 44 / 843:  84%|████████▍ | 843/1000 [11:18:13<2:06:18, 48.27s/it][Succeeded / Failed / Skipped / Total] 524 / 275 / 44 / 843:  84%|████████▍ | 844/1000 [11:18:54<2:05:29, 48.26s/it][Succeeded / Failed / Skipped / Total] 524 / 276 / 44 / 844:  84%|████████▍ | 844/1000 [11:18:54<2:05:29, 48.26s/it][Succeeded / Failed / Skipped / Total] 524 / 276 / 44 / 844:  84%|████████▍ | 845/1000 [11:19:03<2:04:33, 48.22s/it][Succeeded / Failed / Skipped / Total] 525 / 276 / 44 / 845:  84%|████████▍ | 845/1000 [11:19:03<2:04:33, 48.22s/it][Succeeded / Failed / Skipped / Total] 525 / 276 / 44 / 845:  85%|████████▍ | 846/1000 [11:20:35<2:03:53, 48.27s/it][Succeeded / Failed / Skipped / Total] 525 / 277 / 44 / 846:  85%|████████▍ | 846/1000 [11:20:35<2:03:53, 48.27s/it][Succeeded / Failed / Skipped / Total] 525 / 277 / 44 / 846:  85%|████████▍ | 847/1000 [11:22:46<2:03:20, 48.37s/it][Succeeded / Failed / Skipped / Total] 526 / 277 / 44 / 847:  85%|████████▍ | 847/1000 [11:22:46<2:03:20, 48.37s/it][Succeeded / Failed / Skipped / Total] 526 / 277 / 44 / 847:  85%|████████▍ | 848/1000 [11:25:48<2:02:55, 48.52s/it][Succeeded / Failed / Skipped / Total] 526 / 278 / 44 / 848:  85%|████████▍ | 848/1000 [11:25:48<2:02:55, 48.52s/it][Succeeded / Failed / Skipped / Total] 526 / 278 / 44 / 848:  85%|████████▍ | 849/1000 [11:26:15<2:02:03, 48.50s/it]Copied to reader . --> A convenience method for creating a char --> Socre: 1.0

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader [[classReader]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader [[hadrian]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 843 ---------------------------------------------
Adds a class . --> [[[FAILED]]]

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int majorVersion , final String [[className]] ) { this . majorVersion = majorVersion ; this . className = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int majorVersion , final String [[concealing]] ) { this . majorVersion = majorVersion ; this . className = [[concealing]] ; return addConstantClass ( [[concealing]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 844 ---------------------------------------------
Put a pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[francais]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 845 ---------------------------------------------
Add a bootstrap bootstrap . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[founding]] ) { if ( bootstrapMethods != null ) { [[founding]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a field . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[ope]] ( final String [[worshipers]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[worshipers]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Add a Method . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[descriptor]] , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String name , final String [[tiko]] , final boolean isInterface ) { int [[clogs]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[clogs]] , owner , name , [[tiko]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[tag]] , final String owner , final String name , final String [[descriptor]] ) { int hashCode = hash ( [[tag]] , owner , name , [[descriptor]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , owner , name , [[descriptor]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[katara]] , final String owner , final String name , final String [[rodman]] ) { int hashCode = hash ( [[katara]] , owner , name , [[rodman]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[katara]] && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[rodman]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[katara]] , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[rodman]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[katara]] , owner , name , [[rodman]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 278 / 44 / 849:  85%|████████▍ | 849/1000 [11:26:15<2:02:03, 48.50s/it][Succeeded / Failed / Skipped / Total] 527 / 278 / 44 / 849:  85%|████████▌ | 850/1000 [11:28:16<2:01:27, 48.58s/it][Succeeded / Failed / Skipped / Total] 527 / 279 / 44 / 850:  85%|████████▌ | 850/1000 [11:28:16<2:01:27, 48.58s/it][Succeeded / Failed / Skipped / Total] 527 / 279 / 44 / 850:  85%|████████▌ | 851/1000 [11:29:53<2:00:47, 48.64s/it][Succeeded / Failed / Skipped / Total] 527 / 280 / 44 / 851:  85%|████████▌ | 851/1000 [11:29:53<2:00:47, 48.64s/it][Succeeded / Failed / Skipped / Total] 527 / 280 / 44 / 851:  85%|████████▌ | 852/1000 [11:30:33<1:59:57, 48.63s/it][Succeeded / Failed / Skipped / Total] 528 / 280 / 44 / 852:  85%|████████▌ | 852/1000 [11:30:33<1:59:57, 48.63s/it][Succeeded / Failed / Skipped / Total] 528 / 280 / 44 / 852:  85%|████████▌ | 853/1000 [11:32:19<1:59:18, 48.70s/it][Succeeded / Failed / Skipped / Total] 528 / 281 / 44 / 853:  85%|████████▌ | 853/1000 [11:32:19<1:59:18, 48.70s/it][Succeeded / Failed / Skipped / Total] 528 / 281 / 44 / 853:  85%|████████▌ | 854/1000 [11:34:33<1:58:44, 48.80s/it][Succeeded / Failed / Skipped / Total] 528 / 282 / 44 / 854:  85%|████████▌ | 854/1000 [11:34:33<1:58:44, 48.80s/it][Succeeded / Failed / Skipped / Total] 528 / 282 / 44 / 854:  86%|████████▌ | 855/1000 [11:36:11<1:58:04, 48.86s/it][Succeeded / Failed / Skipped / Total] 528 / 283 / 44 / 855:  86%|████████▌ | 855/1000 [11:36:11<1:58:04, 48.86s/it][Succeeded / Failed / Skipped / Total] 528 / 283 / 44 / 855:  86%|████████▌ | 856/1000 [11:37:56<1:57:24, 48.92s/it]Adds a name . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int [[tag]] , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , [[tag]] , owner , name , descriptor , 0 , hash ( [[tag]] , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[botox]] ( final int index , final int [[eunice]] , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , [[eunice]] , owner , name , descriptor , 0 , hash ( [[eunice]] , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds an entry to the map . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int [[essex]] = hash ( tag , value ) ; Entry entry = get ( [[essex]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[essex]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[essex]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Add a floating point . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int [[tag]] , final int value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int index , final int [[ploppy]] , final int value ) { add ( new Entry ( index , [[ploppy]] , value , hash ( [[ploppy]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a pool entry . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[dinsmore]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[hieroglyphs]] = get ( hashCode ) ; while ( [[hieroglyphs]] != null ) { if ( [[hieroglyphs]] . tag == tag && [[hieroglyphs]] . hashCode == hashCode && [[hieroglyphs]] . data == value ) { return [[hieroglyphs]] ; } [[hieroglyphs]] = [[hieroglyphs]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a long . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[deceit]] ( final int index , final int tag , final long [[hypodermic]] ) { add ( new Entry ( index , tag , [[hypodermic]] , hash ( tag , [[hypodermic]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Add a constant . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[der]] = hash ( tag , name , descriptor ) ; Entry [[buckley]] = get ( [[der]] ) ; while ( [[buckley]] != null ) { if ( [[buckley]] . tag == tag && [[buckley]] . hashCode == [[der]] && [[buckley]] . name . equals ( name ) && [[buckley]] . value . equals ( descriptor ) ) { return [[buckley]] . index ; } [[buckley]] = [[buckley]] . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[der]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Add a constant name . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int [[index]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[aqui]] ( final int [[extensive]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[extensive]] , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
[Succeeded / Failed / Skipped / Total] 528 / 284 / 44 / 856:  86%|████████▌ | 856/1000 [11:37:56<1:57:24, 48.92s/it][Succeeded / Failed / Skipped / Total] 528 / 284 / 44 / 856:  86%|████████▌ | 857/1000 [11:39:06<1:56:39, 48.95s/it][Succeeded / Failed / Skipped / Total] 528 / 285 / 44 / 857:  86%|████████▌ | 857/1000 [11:39:06<1:56:39, 48.95s/it][Succeeded / Failed / Skipped / Total] 528 / 285 / 44 / 857:  86%|████████▌ | 858/1000 [11:39:54<1:55:50, 48.94s/it][Succeeded / Failed / Skipped / Total] 529 / 285 / 44 / 858:  86%|████████▌ | 858/1000 [11:39:54<1:55:50, 48.94s/it][Succeeded / Failed / Skipped / Total] 529 / 285 / 44 / 858:  86%|████████▌ | 859/1000 [11:42:40<1:55:20, 49.08s/it][Succeeded / Failed / Skipped / Total] 529 / 286 / 44 / 859:  86%|████████▌ | 859/1000 [11:42:40<1:55:20, 49.08s/it][Succeeded / Failed / Skipped / Total] 529 / 286 / 44 / 859:  86%|████████▌ | 860/1000 [11:44:45<1:54:43, 49.17s/it][Succeeded / Failed / Skipped / Total] 529 / 287 / 44 / 860:  86%|████████▌ | 860/1000 [11:44:45<1:54:43, 49.17s/it][Succeeded / Failed / Skipped / Total] 529 / 287 / 44 / 860:  86%|████████▌ | 861/1000 [11:46:51<1:54:06, 49.26s/it][Succeeded / Failed / Skipped / Total] 529 / 288 / 44 / 861:  86%|████████▌ | 861/1000 [11:46:51<1:54:06, 49.26s/it][Succeeded / Failed / Skipped / Total] 529 / 288 / 44 / 861:  86%|████████▌ | 862/1000 [11:49:35<1:53:36, 49.39s/it]--------------------------------------------- Result 856 ---------------------------------------------
Returns the constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int [[cabbages]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[portals]] = get ( [[cabbages]] ) ; while ( [[portals]] != null ) { if ( [[portals]] . tag == Symbol . CONSTANT_UTF8_TAG && [[portals]] . hashCode == [[cabbages]] && [[portals]] . value . equals ( value ) ) { return [[portals]] . index ; } [[portals]] = [[portals]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[cabbages]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Add a value to the hash table . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[chels]] ( final int [[sunsets]] , final String value ) { add ( new Entry ( [[sunsets]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add Method . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[komori]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , [[name]] , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , [[name]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String [[cpr]] , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , [[cpr]] , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , [[cpr]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[carsick]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[carsick]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 529 / 289 / 44 / 862:  86%|████████▌ | 862/1000 [11:49:35<1:53:36, 49.39s/it][Succeeded / Failed / Skipped / Total] 529 / 289 / 44 / 862:  86%|████████▋ | 863/1000 [11:52:03<1:53:02, 49.51s/it][Succeeded / Failed / Skipped / Total] 529 / 290 / 44 / 863:  86%|████████▋ | 863/1000 [11:52:03<1:53:02, 49.51s/it][Succeeded / Failed / Skipped / Total] 529 / 290 / 44 / 863:  86%|████████▋ | 864/1000 [11:54:21<1:52:26, 49.61s/it][Succeeded / Failed / Skipped / Total] 529 / 291 / 44 / 864:  86%|████████▋ | 864/1000 [11:54:21<1:52:26, 49.61s/it][Succeeded / Failed / Skipped / Total] 529 / 291 / 44 / 864:  86%|████████▋ | 865/1000 [11:54:25<1:51:30, 49.56s/it][Succeeded / Failed / Skipped / Total] 530 / 291 / 44 / 865:  86%|████████▋ | 865/1000 [11:54:25<1:51:30, 49.56s/it][Succeeded / Failed / Skipped / Total] 530 / 291 / 44 / 865:  87%|████████▋ | 866/1000 [11:55:48<1:50:45, 49.59s/it][Succeeded / Failed / Skipped / Total] 530 / 292 / 44 / 866:  87%|████████▋ | 866/1000 [11:55:48<1:50:45, 49.59s/it][Succeeded / Failed / Skipped / Total] 530 / 292 / 44 / 866:  87%|████████▋ | 867/1000 [11:57:23<1:50:02, 49.65s/it][Succeeded / Failed / Skipped / Total] 530 / 293 / 44 / 867:  87%|████████▋ | 867/1000 [11:57:23<1:50:02, 49.65s/it][Succeeded / Failed / Skipped / Total] 530 / 293 / 44 / 867:  87%|████████▋ | 868/1000 [11:59:12<1:49:22, 49.72s/it]Adds a bootstrap code . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[clang]] ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int [[index]] , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; add ( new Entry ( [[index]] , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int [[egyptologist]] , final String name , final String [[dont]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[dont]] , bootstrapMethodIndex ) ; add ( new Entry ( [[egyptologist]] , tag , null , name , [[dont]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int [[tag]] , final String value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int [[yerba]] , final String value ) { int hashCode = hash ( [[yerba]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[yerba]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[yerba]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[yerba]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a string . -->  --> Socre: 0.9999999999999969

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[muchacho]] , final int tag , final String value ) { add ( new Entry ( [[muchacho]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 866 ---------------------------------------------
Add a bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[invade]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a primary type to the table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[deniro]] ( final int [[though]] , final int [[chatsworth]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 868 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 531 / 293 / 44 / 868:  87%|████████▋ | 868/1000 [11:59:12<1:49:22, 49.72s/it][Succeeded / Failed / Skipped / Total] 531 / 293 / 44 / 868:  87%|████████▋ | 869/1000 [12:00:03<1:48:32, 49.72s/it][Succeeded / Failed / Skipped / Total] 531 / 294 / 44 / 869:  87%|████████▋ | 869/1000 [12:00:03<1:48:32, 49.72s/it][Succeeded / Failed / Skipped / Total] 531 / 294 / 44 / 869:  87%|████████▋ | 870/1000 [12:02:45<1:47:59, 49.84s/it][Succeeded / Failed / Skipped / Total] 532 / 294 / 44 / 870:  87%|████████▋ | 870/1000 [12:02:45<1:47:59, 49.84s/it][Succeeded / Failed / Skipped / Total] 532 / 294 / 44 / 870:  87%|████████▋ | 871/1000 [12:03:15<1:47:07, 49.82s/it][Succeeded / Failed / Skipped / Total] 533 / 294 / 44 / 871:  87%|████████▋ | 871/1000 [12:03:15<1:47:07, 49.82s/it][Succeeded / Failed / Skipped / Total] 533 / 294 / 44 / 871:  87%|████████▋ | 872/1000 [12:04:22<1:46:19, 49.84s/it][Succeeded / Failed / Skipped / Total] 534 / 294 / 44 / 872:  87%|████████▋ | 872/1000 [12:04:22<1:46:19, 49.84s/it][Succeeded / Failed / Skipped / Total] 534 / 294 / 44 / 872:  87%|████████▋ | 873/1000 [12:06:08<1:45:38, 49.91s/it][Succeeded / Failed / Skipped / Total] 534 / 295 / 44 / 873:  87%|████████▋ | 873/1000 [12:06:08<1:45:38, 49.91s/it][Succeeded / Failed / Skipped / Total] 534 / 295 / 44 / 873:  87%|████████▋ | 874/1000 [12:06:20<1:44:42, 49.86s/it][Succeeded / Failed / Skipped / Total] 535 / 295 / 44 / 874:  87%|████████▋ | 874/1000 [12:06:20<1:44:42, 49.86s/it][Succeeded / Failed / Skipped / Total] 535 / 295 / 44 / 874:  88%|████████▊ | 875/1000 [12:06:24<1:43:46, 49.81s/it][Succeeded / Failed / Skipped / Total] 536 / 295 / 44 / 875:  88%|████████▊ | 875/1000 [12:06:24<1:43:46, 49.81s/it][Succeeded / Failed / Skipped / Total] 536 / 295 / 44 / 875:  88%|████████▊ | 876/1000 [12:06:40<1:42:51, 49.77s/it]Returns the name for the given name . --> Checks if a facet is reachable --> Socre: 1.0

[[[[Adv]]]]: private int hash ( final String [[name]] ) { int [[h]] = 0 ; for ( int [[i]] = [[name]] . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = [[name]] . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String [[coeur]] ) { int [[supercalifragilisticexpialidocious]] = 0 ; for ( int [[boatman]] = [[coeur]] . length ( ) - 1 ; [[boatman]] >= 0 ; [[boatman]] -- ) { char c = [[coeur]] . charAt ( [[boatman]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[supercalifragilisticexpialidocious]] = 31 * [[supercalifragilisticexpialidocious]] + c ; } if ( [[supercalifragilisticexpialidocious]] > 0 ) { return [[supercalifragilisticexpialidocious]] ; } if ( [[supercalifragilisticexpialidocious]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[supercalifragilisticexpialidocious]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 869 ---------------------------------------------
Clear the map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[jubilant]] ( ) { for ( int [[idiosyncrasies]] = 0 ; [[idiosyncrasies]] < entries . length ; [[idiosyncrasies]] ++ ) { entries [ [[idiosyncrasies]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 870 ---------------------------------------------
Returns a list with the specified name . --> Return a favitute of a favorite --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int i = index ( h ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( name , [[e]] . key ) ) { values . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[chambers]] ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int i = index ( h ) ; MapEntry < V > [[farragut]] = entries [ i ] ; while ( [[farragut]] != null ) { if ( [[farragut]] . hash == h && eq ( name , [[farragut]] . key ) ) { values . addFirst ( [[farragut]] . getValue ( ) ) ; } [[farragut]] = [[farragut]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 871 ---------------------------------------------
Convenience method to remove an entry from the map . --> Remove the elements from the map --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] [[ashur]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[ashur]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[ashur]] [ 0 ] ; [[ashur]] [ 0 ] = [[ashur]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 872 ---------------------------------------------
Returns a list of all entries . --> Convenient method for testing --> Socre: 1.0

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > [[kingpin]] = new LinkedList <> ( ) ; MapEntry < V > [[barin]] = head . after ; while ( [[barin]] != head ) { [[kingpin]] . add ( [[barin]] ) ; [[barin]] = [[barin]] . after ; } return [[kingpin]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 873 ---------------------------------------------
Move the buffer to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void grow ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void grow ( final int [[artistic]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[artistic]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
Appends a character to the buffer . --> Decrements a range of codes --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int start , final int end ) { for ( int [[i]] = start ; [[i]] < end ; [[i]] ++ ) { append ( csq . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int start , final int end ) { for ( int [[seventies]] = start ; [[seventies]] < end ; [[seventies]] ++ ) { append ( csq . charAt ( [[seventies]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 875 ---------------------------------------------
Visit annotation . --> Visit a annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean [[visible]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean [[aortic]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , [[aortic]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 537 / 295 / 44 / 876:  88%|████████▊ | 876/1000 [12:06:40<1:42:51, 49.77s/it][Succeeded / Failed / Skipped / Total] 537 / 295 / 44 / 876:  88%|████████▊ | 877/1000 [12:06:46<1:41:55, 49.72s/it][Succeeded / Failed / Skipped / Total] 538 / 295 / 44 / 877:  88%|████████▊ | 877/1000 [12:06:46<1:41:55, 49.72s/it][Succeeded / Failed / Skipped / Total] 538 / 295 / 44 / 877:  88%|████████▊ | 878/1000 [12:07:55<1:41:08, 49.74s/it][Succeeded / Failed / Skipped / Total] 538 / 296 / 44 / 878:  88%|████████▊ | 878/1000 [12:07:55<1:41:08, 49.74s/it][Succeeded / Failed / Skipped / Total] 538 / 296 / 44 / 878:  88%|████████▊ | 879/1000 [12:08:29<1:40:16, 49.73s/it][Succeeded / Failed / Skipped / Total] 539 / 296 / 44 / 879:  88%|████████▊ | 879/1000 [12:08:29<1:40:16, 49.73s/it][Succeeded / Failed / Skipped / Total] 539 / 296 / 44 / 879:  88%|████████▊ | 880/1000 [12:09:15<1:39:26, 49.72s/it][Succeeded / Failed / Skipped / Total] 539 / 297 / 44 / 880:  88%|████████▊ | 880/1000 [12:09:15<1:39:26, 49.72s/it][Succeeded / Failed / Skipped / Total] 539 / 297 / 44 / 880:  88%|████████▊ | 881/1000 [12:10:26<1:38:39, 49.75s/it][Succeeded / Failed / Skipped / Total] 540 / 297 / 44 / 881:  88%|████████▊ | 881/1000 [12:10:26<1:38:39, 49.75s/it][Succeeded / Failed / Skipped / Total] 540 / 297 / 44 / 881:  88%|████████▊ | 882/1000 [12:11:38<1:37:53, 49.77s/it][Succeeded / Failed / Skipped / Total] 541 / 297 / 44 / 882:  88%|████████▊ | 882/1000 [12:11:38<1:37:53, 49.77s/it][Succeeded / Failed / Skipped / Total] 541 / 297 / 44 / 882:  88%|████████▊ | 883/1000 [12:13:38<1:37:12, 49.85s/it]This method creates a MethodContainer . --> Initializes the sketch --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[seaplane]] = 0 ; [[seaplane]] < tmd . proxyData . length ; [[seaplane]] ++ ) { tmd . selectCurrentProxy ( [[seaplane]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 877 ---------------------------------------------
Start a new chain . --> Specifies the training --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[straining]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 878 ---------------------------------------------
Generates a Method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData [[spoiling]] ) { methodVisitor . visitCode ( ) ; if ( [[spoiling]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[spoiling]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[spoiling]] . firstMethodName ( ) , [[spoiling]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[spoiling]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[spoiling]] . firstMethodName ( ) , [[spoiling]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[spoiling]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 879 ---------------------------------------------
Parse the given path . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[antagonistic]] ( final String [[protestants]] ) { return [[protestants]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[protestants]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 880 ---------------------------------------------
Adds a path to this path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[frostbitten]] ( final CharSequence [[poulsen]] ) { _push ( [[poulsen]] ) ; if ( altPath != null ) { altPath . push ( [[poulsen]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
Add a new servlet context . --> Add a filter to the filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[boka]] ( final ServletContext [[aoc]] ) { [[aoc]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[aoc]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[Dunaway]]" == "[[Dunaway]]" , contextPath ) ; } final FilterRegistration filter = [[aoc]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[Dunaway]]" == "[[Dunaway]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
Execute a proxy . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String [[methodName]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object [[next]] = pathref . continueWith ( this , [[methodName]] , returnType ) ; return ProxyTarget . returnValue ( [[next]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String [[invoke]] = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object [[hypertime]] = pathref . continueWith ( this , [[invoke]] , returnType ) ; return ProxyTarget . returnValue ( [[hypertime]] ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 883 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 298 / 44 / 883:  88%|████████▊ | 883/1000 [12:13:38<1:37:12, 49.85s/it][Succeeded / Failed / Skipped / Total] 541 / 298 / 44 / 883:  88%|████████▊ | 884/1000 [12:13:48<1:36:17, 49.81s/it][Succeeded / Failed / Skipped / Total] 542 / 298 / 44 / 884:  88%|████████▊ | 884/1000 [12:13:48<1:36:17, 49.81s/it][Succeeded / Failed / Skipped / Total] 542 / 298 / 44 / 884:  88%|████████▊ | 885/1000 [12:16:23<1:35:41, 49.92s/it][Succeeded / Failed / Skipped / Total] 542 / 299 / 44 / 885:  88%|████████▊ | 885/1000 [12:16:23<1:35:41, 49.92s/it][Succeeded / Failed / Skipped / Total] 542 / 299 / 44 / 885:  89%|████████▊ | 886/1000 [12:17:10<1:34:51, 49.92s/it][Succeeded / Failed / Skipped / Total] 543 / 299 / 44 / 886:  89%|████████▊ | 886/1000 [12:17:10<1:34:51, 49.92s/it][Succeeded / Failed / Skipped / Total] 543 / 299 / 44 / 886:  89%|████████▊ | 887/1000 [12:17:14<1:33:55, 49.87s/it][Succeeded / Failed / Skipped / Total] 544 / 299 / 44 / 887:  89%|████████▊ | 887/1000 [12:17:14<1:33:55, 49.87s/it][Succeeded / Failed / Skipped / Total] 544 / 299 / 44 / 887:  89%|████████▉ | 888/1000 [12:17:20<1:32:59, 49.82s/it][Succeeded / Failed / Skipped / Total] 545 / 299 / 44 / 888:  89%|████████▉ | 888/1000 [12:17:20<1:32:59, 49.82s/it][Succeeded / Failed / Skipped / Total] 545 / 299 / 44 / 888:  89%|████████▉ | 889/1000 [12:17:47<1:32:07, 49.79s/it]Returns the FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[fieldDescriptor]] : fieldsMap . values ( ) ) { allFields [ index ] = [[fieldDescriptor]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[cheapness]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[authenticated]] : fieldsMap . values ( ) ) { allFields [ index ] = [[authenticated]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
Create a scope . --> Creates a new Inititation --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( type ) ; type = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory [[capitalism]] = proxetta . proxy ( ) ; [[capitalism]] . setTarget ( type ) ; type = [[capitalism]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 885 ---------------------------------------------
Returns the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int [[isolation]] ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[hospitals]] ) { final int [[conjures]] ; switch ( [[hospitals]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[conjures]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[conjures]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[conjures]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[conjures]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[conjures]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[conjures]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[conjures]] , [[hospitals]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 886 ---------------------------------------------
Get the value of a property . --> Read a JsonBean --> Socre: 1.0

[[[[Adv]]]]: private Object readProperty ( final Object [[source]] , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object [[atlantean]] , final PropertyDescriptor [[ravana]] ) { Getter getter = [[ravana]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[atlantean]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Adds all keys to this map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[clatter]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 888 ---------------------------------------------
Appends the buffer to the buffer . --> Return a new appender --> Socre: 1.0

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[undergrad]] ) { if ( [[undergrad]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 889 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 546 / 299 / 44 / 889:  89%|████████▉ | 889/1000 [12:17:47<1:32:07, 49.79s/it][Succeeded / Failed / Skipped / Total] 546 / 299 / 44 / 889:  89%|████████▉ | 890/1000 [12:19:55<1:31:27, 49.88s/it][Succeeded / Failed / Skipped / Total] 546 / 300 / 44 / 890:  89%|████████▉ | 890/1000 [12:19:55<1:31:27, 49.88s/it][Succeeded / Failed / Skipped / Total] 546 / 300 / 44 / 890:  89%|████████▉ | 891/1000 [12:20:00<1:30:31, 49.83s/it][Succeeded / Failed / Skipped / Total] 547 / 300 / 44 / 891:  89%|████████▉ | 891/1000 [12:20:00<1:30:31, 49.83s/it][Succeeded / Failed / Skipped / Total] 547 / 300 / 44 / 891:  89%|████████▉ | 892/1000 [12:20:52<1:29:42, 49.83s/it][Succeeded / Failed / Skipped / Total] 548 / 300 / 44 / 892:  89%|████████▉ | 892/1000 [12:20:52<1:29:42, 49.83s/it][Succeeded / Failed / Skipped / Total] 548 / 300 / 44 / 892:  89%|████████▉ | 893/1000 [12:20:57<1:28:46, 49.78s/it][Succeeded / Failed / Skipped / Total] 549 / 300 / 44 / 893:  89%|████████▉ | 893/1000 [12:20:57<1:28:46, 49.78s/it][Succeeded / Failed / Skipped / Total] 549 / 300 / 44 / 893:  89%|████████▉ | 894/1000 [12:22:00<1:27:58, 49.80s/it][Succeeded / Failed / Skipped / Total] 549 / 301 / 44 / 894:  89%|████████▉ | 894/1000 [12:22:00<1:27:58, 49.80s/it][Succeeded / Failed / Skipped / Total] 549 / 301 / 44 / 894:  90%|████████▉ | 895/1000 [12:22:31<1:27:06, 49.78s/it][Succeeded / Failed / Skipped / Total] 550 / 301 / 44 / 895:  90%|████████▉ | 895/1000 [12:22:31<1:27:06, 49.78s/it][Succeeded / Failed / Skipped / Total] 550 / 301 / 44 / 895:  90%|████████▉ | 896/1000 [12:22:35<1:26:11, 49.73s/it][Succeeded / Failed / Skipped / Total] 551 / 301 / 44 / 896:  90%|████████▉ | 896/1000 [12:22:35<1:26:11, 49.73s/it][Succeeded / Failed / Skipped / Total] 551 / 301 / 44 / 896:  90%|████████▉ | 897/1000 [12:22:39<1:25:16, 49.68s/it]Save the input stream to a file . --> Allocate a file --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[gripe]] ( final Writer [[exterminators]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[exterminators]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[exterminators]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 890 ---------------------------------------------
Write the input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream [[adelle]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[adelle]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[adelle]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 891 ---------------------------------------------
Writes a progress to the output stream . --> region OutputStream --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream [[peen]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 892 ---------------------------------------------
Gets the key . --> Get deletion deletion --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[snores]] ( final String [[greenery]] ) { CharSequence [[delphine]] = ( CharSequence ) map . get ( [[greenery]] ) ; return [[delphine]] == null ? null : [[delphine]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Gets the number . --> Get a Number as a Number --> Socre: 1.0

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String key ) { Number [[informational]] = ( Number ) map . get ( key ) ; if ( [[informational]] == null ) { return null ; } if ( [[informational]] instanceof Integer ) { return ( Integer ) [[informational]] ; } return [[informational]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String key ) { Number [[team]] = ( Number ) map . get ( key ) ; if ( [[team]] == null ) { return null ; } if ( [[team]] instanceof Long ) { return ( Long ) [[team]] ; } return [[team]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Get the double value . --> Convert a number to a Number --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[hemant]] ( final String [[everyplace]] ) { Number number = ( Number ) map . get ( [[everyplace]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Get the key . --> Get a number from a number --> Socre: 1.0

[[[[Adv]]]]: public Float getFloat ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float getFloat ( final String [[brianna]] ) { Number number = ( Number ) map . get ( [[brianna]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 552 / 301 / 44 / 897:  90%|████████▉ | 897/1000 [12:22:39<1:25:16, 49.68s/it][Succeeded / Failed / Skipped / Total] 552 / 301 / 44 / 897:  90%|████████▉ | 898/1000 [12:23:47<1:24:29, 49.70s/it][Succeeded / Failed / Skipped / Total] 552 / 302 / 44 / 898:  90%|████████▉ | 898/1000 [12:23:47<1:24:29, 49.70s/it][Succeeded / Failed / Skipped / Total] 552 / 302 / 44 / 898:  90%|████████▉ | 899/1000 [12:24:26<1:23:38, 49.68s/it][Succeeded / Failed / Skipped / Total] 553 / 302 / 44 / 899:  90%|████████▉ | 899/1000 [12:24:26<1:23:38, 49.68s/it][Succeeded / Failed / Skipped / Total] 553 / 302 / 44 / 899:  90%|█████████ | 900/1000 [12:25:37<1:22:50, 49.71s/it][Succeeded / Failed / Skipped / Total] 554 / 302 / 44 / 900:  90%|█████████ | 900/1000 [12:25:37<1:22:50, 49.71s/it][Succeeded / Failed / Skipped / Total] 554 / 302 / 44 / 900:  90%|█████████ | 901/1000 [12:26:54<1:22:04, 49.74s/it][Succeeded / Failed / Skipped / Total] 554 / 303 / 44 / 901:  90%|█████████ | 901/1000 [12:26:54<1:22:04, 49.74s/it][Succeeded / Failed / Skipped / Total] 554 / 303 / 44 / 901:  90%|█████████ | 902/1000 [12:27:20<1:21:11, 49.71s/it][Succeeded / Failed / Skipped / Total] 555 / 303 / 44 / 902:  90%|█████████ | 902/1000 [12:27:20<1:21:11, 49.71s/it][Succeeded / Failed / Skipped / Total] 555 / 303 / 44 / 902:  90%|█████████ | 903/1000 [12:28:21<1:20:23, 49.72s/it][Succeeded / Failed / Skipped / Total] 556 / 303 / 44 / 903:  90%|█████████ | 903/1000 [12:28:21<1:20:23, 49.72s/it][Succeeded / Failed / Skipped / Total] 556 / 303 / 44 / 903:  90%|█████████ | 904/1000 [12:28:36<1:19:29, 49.69s/it][Succeeded / Failed / Skipped / Total] 557 / 303 / 44 / 904:  90%|█████████ | 904/1000 [12:28:36<1:19:29, 49.69s/it][Succeeded / Failed / Skipped / Total] 557 / 303 / 44 / 904:  90%|█████████ | 905/1000 [12:28:45<1:18:35, 49.64s/it]Returns a list of objects . --> Get a Map from a Map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[disagreeing]] > [[disagreeing]] getValue ( final String key ) { [[disagreeing]] val = ( [[disagreeing]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[disagreeing]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[disagreeing]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 898 ---------------------------------------------
Adds a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String value ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[napster]] , final String value ) { Objects . requireNonNull ( [[napster]] ) ; map . put ( [[napster]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Open a folder . --> Open a edit edit --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[authenticity]] ( final String [[sedition]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[sedition]] ; this . [[swing]] = getService ( ) . getFolder ( [[sedition]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[sedition]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 900 ---------------------------------------------
Add a filter to the profile . --> Searches for a Message --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags [[flagsToSet]] , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags [[mahony]] , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > [[konishi]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 901 ---------------------------------------------
Set the email . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[peak]] ( final ReceivedEmail [[experiencing]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[experiencing]] . messageNumber ( ) } , [[experiencing]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Closes the folder . --> Close the folders --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[ubiquitous]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[Deceivers]]" == "[[Deceivers]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
Returns the named parameter . --> Helper function to get the name of a legral node --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[racketeering]] ( final String [[lisping]] ) { DbQueryNamedParameter [[homeopathy]] = rootNP ; while ( [[homeopathy]] != null ) { if ( [[homeopathy]] . equalsName ( [[lisping]] ) ) { return [[homeopathy]] ; } [[homeopathy]] = [[homeopathy]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Returns a string representation of this pool . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected String alias ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String [[sleeved]] ) { return StringPool . LEFT_CHEV . concat ( [[sleeved]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 905 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 558 / 303 / 44 / 905:  90%|█████████ | 905/1000 [12:28:45<1:18:35, 49.64s/it][Succeeded / Failed / Skipped / Total] 558 / 303 / 44 / 905:  91%|█████████ | 906/1000 [12:29:21<1:17:44, 49.63s/it][Succeeded / Failed / Skipped / Total] 559 / 303 / 44 / 906:  91%|█████████ | 906/1000 [12:29:21<1:17:44, 49.63s/it][Succeeded / Failed / Skipped / Total] 559 / 303 / 44 / 906:  91%|█████████ | 907/1000 [12:29:25<1:16:50, 49.58s/it][Succeeded / Failed / Skipped / Total] 560 / 303 / 44 / 907:  91%|█████████ | 907/1000 [12:29:25<1:16:50, 49.58s/it][Succeeded / Failed / Skipped / Total] 560 / 303 / 44 / 907:  91%|█████████ | 908/1000 [12:30:39<1:16:03, 49.60s/it][Succeeded / Failed / Skipped / Total] 560 / 304 / 44 / 908:  91%|█████████ | 908/1000 [12:30:39<1:16:03, 49.60s/it][Succeeded / Failed / Skipped / Total] 560 / 304 / 44 / 908:  91%|█████████ | 909/1000 [12:31:21<1:15:13, 49.60s/it][Succeeded / Failed / Skipped / Total] 560 / 305 / 44 / 909:  91%|█████████ | 909/1000 [12:31:21<1:15:13, 49.60s/it][Succeeded / Failed / Skipped / Total] 560 / 305 / 44 / 909:  91%|█████████ | 910/1000 [12:31:37<1:14:20, 49.56s/it][Succeeded / Failed / Skipped / Total] 561 / 305 / 44 / 910:  91%|█████████ | 910/1000 [12:31:37<1:14:20, 49.56s/it][Succeeded / Failed / Skipped / Total] 561 / 305 / 44 / 910:  91%|█████████ | 911/1000 [12:32:01<1:13:28, 49.53s/it][Succeeded / Failed / Skipped / Total] 562 / 305 / 44 / 911:  91%|█████████ | 911/1000 [12:32:01<1:13:28, 49.53s/it][Succeeded / Failed / Skipped / Total] 562 / 305 / 44 / 911:  91%|█████████ | 912/1000 [12:32:12<1:12:34, 49.49s/it][Succeeded / Failed / Skipped / Total] 563 / 305 / 44 / 912:  91%|█████████ | 912/1000 [12:32:12<1:12:34, 49.49s/it][Succeeded / Failed / Skipped / Total] 563 / 305 / 45 / 913:  91%|█████████▏| 913/1000 [12:32:12<1:11:40, 49.43s/it][Succeeded / Failed / Skipped / Total] 563 / 305 / 45 / 913:  91%|█████████▏| 914/1000 [12:32:45<1:10:49, 49.42s/it]Validates the profile . --> Validate violation --> Socre: 1.0

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[turnstiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[turnstiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
Adds a new Violation . --> add violationd --> Socre: 1.0

[[[[Adv]]]]: protected void addViolation ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String [[storyboarded]] , final Object [[brewed]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[storyboarded]] , this , [[brewed]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Set the mime type . --> Returns the mimetype . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[acidic]] = mimeOrExtension ; } else { this . [[acidic]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 908 ---------------------------------------------
Gets the download . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . [[misfire]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 909 ---------------------------------------------
Set the target class . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[aim]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Get a target class . --> Method to get the input stream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[lycra]] ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 911 ---------------------------------------------
Get the target class . --> Method to get the InputStream --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[misbehave]] ( final Class [[youngblood]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[youngblood]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[youngblood]] . getName ( ) ) ; } targetClass = [[youngblood]] ; targetClassName = [[youngblood]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[youngblood]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
Processes the input stream . --> Used to remove a bean --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[dejected]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 913 ---------------------------------------------
Create a proxy object --> [[[SKIPPED]]]

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 564 / 305 / 45 / 914:  91%|█████████▏| 914/1000 [12:32:45<1:10:49, 49.42s/it][Succeeded / Failed / Skipped / Total] 564 / 305 / 45 / 914:  92%|█████████▏| 915/1000 [12:33:14<1:09:58, 49.39s/it][Succeeded / Failed / Skipped / Total] 565 / 305 / 45 / 915:  92%|█████████▏| 915/1000 [12:33:14<1:09:58, 49.39s/it][Succeeded / Failed / Skipped / Total] 565 / 305 / 45 / 915:  92%|█████████▏| 916/1000 [12:33:54<1:09:08, 49.38s/it][Succeeded / Failed / Skipped / Total] 566 / 305 / 45 / 916:  92%|█████████▏| 916/1000 [12:33:54<1:09:08, 49.38s/it][Succeeded / Failed / Skipped / Total] 566 / 305 / 45 / 916:  92%|█████████▏| 917/1000 [12:34:23<1:08:16, 49.36s/it][Succeeded / Failed / Skipped / Total] 567 / 305 / 45 / 917:  92%|█████████▏| 917/1000 [12:34:23<1:08:16, 49.36s/it][Succeeded / Failed / Skipped / Total] 567 / 305 / 45 / 917:  92%|█████████▏| 918/1000 [12:34:33<1:07:24, 49.32s/it][Succeeded / Failed / Skipped / Total] 568 / 305 / 45 / 918:  92%|█████████▏| 918/1000 [12:34:33<1:07:24, 49.32s/it][Succeeded / Failed / Skipped / Total] 568 / 305 / 45 / 918:  92%|█████████▏| 919/1000 [12:34:38<1:06:30, 49.27s/it][Succeeded / Failed / Skipped / Total] 569 / 305 / 45 / 919:  92%|█████████▏| 919/1000 [12:34:38<1:06:30, 49.27s/it][Succeeded / Failed / Skipped / Total] 569 / 305 / 45 / 919:  92%|█████████▏| 920/1000 [12:34:50<1:05:38, 49.23s/it][Succeeded / Failed / Skipped / Total] 570 / 305 / 45 / 920:  92%|█████████▏| 920/1000 [12:34:50<1:05:38, 49.23s/it][Succeeded / Failed / Skipped / Total] 570 / 305 / 45 / 920:  92%|█████████▏| 921/1000 [12:34:58<1:04:45, 49.18s/it][Succeeded / Failed / Skipped / Total] 571 / 305 / 45 / 921:  92%|█████████▏| 921/1000 [12:34:58<1:04:45, 49.18s/it][Succeeded / Failed / Skipped / Total] 571 / 305 / 45 / 921:  92%|█████████▏| 922/1000 [12:35:25<1:03:54, 49.16s/it]Load the proxy class . --> Attempt to create a ProxyClassLoader --> Socre: 1.0

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[spee]] = proxetta . getClassLoader ( ) ; if ( [[spee]] == null ) { [[spee]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[spee]] == null ) && ( targetClass != null ) ) { [[spee]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[imports]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[imports]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[imports]] , [[spee]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 915 ---------------------------------------------
Create a new instance of a class . --> Create a Proteers object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[vulva]] ( ) { Class [[plasters]] = define ( ) ; try { return ClassUtil . newInstance ( [[plasters]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
Copy a file to a file --> Copy a file from a file --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[cooled]] ( final byte [ ] [[engraved]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , [[engraved]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 917 ---------------------------------------------
Create a new person with the given name . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String personalName , final String [[from]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String [[braised]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 918 ---------------------------------------------
Adds a new address . --> Set the value of this RtfAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . [[deficit]] = ArraysUtil . append ( this . [[deficit]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 919 ---------------------------------------------
Converts a name to a signature . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String personalName , final String [[to]] ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String personalName , final String [[hangovers]] ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the email address . --> A convenience method for creating a new one --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[moonbeam]] = ArraysUtil . join ( this . [[moonbeam]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the value of the given address . --> Obtain a value of a given type --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[skyrocketing]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 305 / 45 / 922:  92%|█████████▏| 922/1000 [12:35:25<1:03:54, 49.16s/it][Succeeded / Failed / Skipped / Total] 572 / 305 / 45 / 922:  92%|█████████▏| 923/1000 [12:35:44<1:03:02, 49.13s/it][Succeeded / Failed / Skipped / Total] 573 / 305 / 45 / 923:  92%|█████████▏| 923/1000 [12:35:44<1:03:02, 49.13s/it][Succeeded / Failed / Skipped / Total] 573 / 305 / 45 / 923:  92%|█████████▏| 924/1000 [12:36:15<1:02:12, 49.11s/it][Succeeded / Failed / Skipped / Total] 574 / 305 / 45 / 924:  92%|█████████▏| 924/1000 [12:36:15<1:02:12, 49.11s/it][Succeeded / Failed / Skipped / Total] 574 / 305 / 45 / 924:  92%|█████████▎| 925/1000 [12:37:48<1:01:26, 49.15s/it][Succeeded / Failed / Skipped / Total] 574 / 306 / 45 / 925:  92%|█████████▎| 925/1000 [12:37:48<1:01:26, 49.15s/it][Succeeded / Failed / Skipped / Total] 574 / 306 / 45 / 925:  93%|█████████▎| 926/1000 [12:38:19<1:00:36, 49.14s/it][Succeeded / Failed / Skipped / Total] 575 / 306 / 45 / 926:  93%|█████████▎| 926/1000 [12:38:19<1:00:36, 49.14s/it][Succeeded / Failed / Skipped / Total] 575 / 306 / 45 / 926:  93%|█████████▎| 927/1000 [12:38:23<59:43, 49.09s/it]  [Succeeded / Failed / Skipped / Total] 576 / 306 / 45 / 927:  93%|█████████▎| 927/1000 [12:38:23<59:43, 49.09s/it][Succeeded / Failed / Skipped / Total] 576 / 306 / 45 / 927:  93%|█████████▎| 928/1000 [12:39:49<58:57, 49.13s/it][Succeeded / Failed / Skipped / Total] 576 / 307 / 45 / 928:  93%|█████████▎| 928/1000 [12:39:49<58:57, 49.13s/it][Succeeded / Failed / Skipped / Total] 576 / 307 / 45 / 928:  93%|█████████▎| 929/1000 [12:40:07<58:05, 49.09s/it][Succeeded / Failed / Skipped / Total] 576 / 308 / 45 / 929:  93%|█████████▎| 929/1000 [12:40:07<58:05, 49.09s/it][Succeeded / Failed / Skipped / Total] 576 / 308 / 45 / 929:  93%|█████████▎| 930/1000 [12:41:08<57:17, 49.11s/it]Creates a text . --> Method to create a MessageType --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[montego]] ( final String [[intrinsic]] , final String encoding ) { return message ( new EmailMessage ( [[intrinsic]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Generates a HTML message . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[euphemisms]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 924 ---------------------------------------------
Set a header . --> Convenience method to add a string to a string --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[stubb]] ( final String [[jaunty]] , final String value ) { headers . put ( [[jaunty]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Get the value of a property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[deforestation]] ( final String [[sew]] , final String defaultValue ) { Objects . requireNonNull ( [[sew]] ) ; String [[apple]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[apple]] = System . getProperty ( [[sew]] ) ; } else { [[apple]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[sew]] ) ) ; } } catch ( Exception ignore ) { } if ( [[apple]] == null ) { return defaultValue ; } return [[apple]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the value of a property . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[elsa]] , final boolean [[cufflinks]] ) { String value = get ( [[elsa]] ) ; if ( value == null ) { return [[cufflinks]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[cufflinks]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 927 ---------------------------------------------
Get long value . --> Convert a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int defaultValue ) { String [[jacobson]] = get ( name ) ; if ( [[jacobson]] == null ) { return defaultValue ; } [[jacobson]] = [[jacobson]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[jacobson]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Get the long as a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[var]] ( final String name , final long defaultValue ) { String [[adoption]] = get ( name ) ; if ( [[adoption]] == null ) { return defaultValue ; } [[adoption]] = [[adoption]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[adoption]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 929 ---------------------------------------------
Gets the method parameter . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[rearm]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 577 / 308 / 45 / 930:  93%|█████████▎| 930/1000 [12:41:08<57:17, 49.11s/it][Succeeded / Failed / Skipped / Total] 577 / 308 / 45 / 930:  93%|█████████▎| 931/1000 [12:41:34<56:26, 49.08s/it][Succeeded / Failed / Skipped / Total] 578 / 308 / 45 / 931:  93%|█████████▎| 931/1000 [12:41:34<56:26, 49.08s/it][Succeeded / Failed / Skipped / Total] 578 / 308 / 45 / 931:  93%|█████████▎| 932/1000 [12:43:07<55:40, 49.13s/it][Succeeded / Failed / Skipped / Total] 579 / 308 / 45 / 932:  93%|█████████▎| 932/1000 [12:43:07<55:40, 49.13s/it][Succeeded / Failed / Skipped / Total] 579 / 308 / 45 / 932:  93%|█████████▎| 933/1000 [12:43:35<54:50, 49.11s/it][Succeeded / Failed / Skipped / Total] 580 / 308 / 45 / 933:  93%|█████████▎| 933/1000 [12:43:35<54:50, 49.11s/it][Succeeded / Failed / Skipped / Total] 580 / 308 / 45 / 933:  93%|█████████▎| 934/1000 [12:45:12<54:04, 49.16s/it][Succeeded / Failed / Skipped / Total] 580 / 309 / 45 / 934:  93%|█████████▎| 934/1000 [12:45:12<54:04, 49.16s/it][Succeeded / Failed / Skipped / Total] 580 / 309 / 45 / 934:  94%|█████████▎| 935/1000 [12:45:18<53:12, 49.11s/it][Succeeded / Failed / Skipped / Total] 581 / 309 / 45 / 935:  94%|█████████▎| 935/1000 [12:45:18<53:12, 49.11s/it][Succeeded / Failed / Skipped / Total] 581 / 309 / 45 / 935:  94%|█████████▎| 936/1000 [12:45:24<52:20, 49.06s/it][Succeeded / Failed / Skipped / Total] 582 / 309 / 45 / 936:  94%|█████████▎| 936/1000 [12:45:24<52:20, 49.06s/it][Succeeded / Failed / Skipped / Total] 582 / 309 / 45 / 936:  94%|█████████▎| 937/1000 [12:45:34<51:28, 49.02s/it][Succeeded / Failed / Skipped / Total] 583 / 309 / 45 / 937:  94%|█████████▎| 937/1000 [12:45:34<51:28, 49.02s/it][Succeeded / Failed / Skipped / Total] 583 / 309 / 45 / 937:  94%|█████████▍| 938/1000 [12:45:34<50:36, 48.97s/it][Succeeded / Failed / Skipped / Total] 583 / 309 / 46 / 938:  94%|█████████▍| 938/1000 [12:45:34<50:36, 48.97s/it][Succeeded / Failed / Skipped / Total] 583 / 309 / 46 / 938:  94%|█████████▍| 939/1000 [12:47:10<49:50, 49.02s/it]Serializes a JSON object . --> Synchronously get the current object --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[jsonContext]] , final Path currentPath , final Object key , final Object [[value]] , int [[count]] ) { if ( ( [[value]] == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return [[count]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext [[lasse]] , final Path currentPath , final Object key , final Object [[nadir]] , int [[discos]] ) { if ( ( [[nadir]] == null ) && [[lasse]] . isExcludeNulls ( ) ) { return [[discos]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 931 ---------------------------------------------
Get the value of the property . --> Obtain the HMBean --> Socre: 1.0

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( [[alias]] ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[hijab]] ) { String value = actionsManager . lookupPathAlias ( [[hijab]] ) ; if ( value == null ) { ActionRuntime [[rosencrantz]] = actionsManager . lookup ( [[hijab]] ) ; if ( [[rosencrantz]] != null ) { value = [[rosencrantz]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Resolves a string . --> Resolve a media media --> Socre: 1.0

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[len]] = value . length ( ) ; while ( i < [[len]] ) { int [[ndx]] = value . indexOf ( ' ' , i ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int [[remedial]] = value . length ( ) ; while ( i < [[remedial]] ) { int [[rabbi]] = value . indexOf ( ' ' , i ) ; if ( [[rabbi]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a absolute path . --> Method to get the mediatumbiolation --> Socre: 1.0

[[[[Adv]]]]: public ResultPath resolveResultPath ( String path , String [[value]] ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath resolveResultPath ( String path , String [[flibbertigibbet]] ) { boolean absolutePath = "[[Khartoum]]" != "[[Khartoum]]" ; if ( [[flibbertigibbet]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Resolve a string value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String [[result]] = resultPath . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String [[loco]] = resultPath . pathValue ( ) ; return resolveAlias ( [[loco]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 935 ---------------------------------------------
Return the index of the given string . --> Obtains a string from a string --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String [[leuco]] ) { int slashNdx = [[leuco]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[leuco]] , ' ' , [[leuco]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[leuco]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the number of occurrence . --> A convenience method for a Netuction --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String [[duster]] ) { int slashNdx = [[duster]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[duster]] , ' ' , [[duster]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Returns the string representation of the given string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[hayek]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the name of the given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 939 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 583 / 310 / 46 / 939:  94%|█████████▍| 939/1000 [12:47:10<49:50, 49.02s/it][Succeeded / Failed / Skipped / Total] 583 / 310 / 46 / 939:  94%|█████████▍| 940/1000 [12:48:30<49:03, 49.05s/it][Succeeded / Failed / Skipped / Total] 584 / 310 / 46 / 940:  94%|█████████▍| 940/1000 [12:48:30<49:03, 49.05s/it][Succeeded / Failed / Skipped / Total] 584 / 310 / 46 / 940:  94%|█████████▍| 941/1000 [12:48:35<48:11, 49.01s/it][Succeeded / Failed / Skipped / Total] 585 / 310 / 46 / 941:  94%|█████████▍| 941/1000 [12:48:35<48:11, 49.01s/it][Succeeded / Failed / Skipped / Total] 585 / 310 / 46 / 941:  94%|█████████▍| 942/1000 [12:48:42<47:19, 48.96s/it][Succeeded / Failed / Skipped / Total] 586 / 310 / 46 / 942:  94%|█████████▍| 942/1000 [12:48:42<47:19, 48.96s/it][Succeeded / Failed / Skipped / Total] 586 / 310 / 46 / 942:  94%|█████████▍| 943/1000 [12:48:48<46:28, 48.92s/it][Succeeded / Failed / Skipped / Total] 587 / 310 / 46 / 943:  94%|█████████▍| 943/1000 [12:48:48<46:28, 48.92s/it][Succeeded / Failed / Skipped / Total] 587 / 310 / 46 / 943:  94%|█████████▍| 944/1000 [12:48:54<45:36, 48.87s/it][Succeeded / Failed / Skipped / Total] 588 / 310 / 46 / 944:  94%|█████████▍| 944/1000 [12:48:54<45:36, 48.87s/it][Succeeded / Failed / Skipped / Total] 588 / 310 / 46 / 944:  94%|█████████▍| 945/1000 [12:49:59<44:48, 48.89s/it][Succeeded / Failed / Skipped / Total] 589 / 310 / 46 / 945:  94%|█████████▍| 945/1000 [12:49:59<44:48, 48.89s/it][Succeeded / Failed / Skipped / Total] 589 / 310 / 46 / 945:  95%|█████████▍| 946/1000 [12:51:57<44:03, 48.96s/it][Succeeded / Failed / Skipped / Total] 589 / 311 / 46 / 946:  95%|█████████▍| 946/1000 [12:51:57<44:03, 48.96s/it][Succeeded / Failed / Skipped / Total] 589 / 311 / 46 / 946:  95%|█████████▍| 947/1000 [12:53:06<43:16, 48.98s/it][Succeeded / Failed / Skipped / Total] 590 / 311 / 46 / 947:  95%|█████████▍| 947/1000 [12:53:06<43:16, 48.98s/it][Succeeded / Failed / Skipped / Total] 590 / 311 / 46 / 947:  95%|█████████▍| 948/1000 [12:53:39<42:26, 48.97s/it]Gets the schema . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[reread]] ( final Class < ? > [[loki]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[loki]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 940 ---------------------------------------------
Return true if the given column is a valid column . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean [[isId]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[delight]] = null ; boolean [[aka]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 941 ---------------------------------------------
Initializes the long with the given key . --> Obtains a new zketch --> Socre: 1.0

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[kenzo]] , final long [ ] tweak ) { final int newNw = [[kenzo]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 942 ---------------------------------------------
Swaps the elements --> Swaps two arrays --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[buckskin]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Sets the edge size . --> Swaps two elements --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[habits]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 944 ---------------------------------------------
A convenience method for retrieving . --> Does a key? --> Socre: 1.0

[[[[Adv]]]]: private void keySchedule ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void keySchedule ( final int [[gath]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 945 ---------------------------------------------
Initializes the message . --> Copies the data from the poch --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[key]] , 0 , [[key]] . length < keyData . length ? [[key]] . length : keyData . length ) ; init ( bytesToLongs ( [[key]] ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long [[demise]] , final long tweak2 ) { long [ ] [[appalled]] = new long [ ] { [[demise]] , tweak2 } ; byte [ ] [[polar]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[polar]] , 0 , [[polar]] . length < keyData . length ? [[polar]] . length : keyData . length ) ; init ( bytesToLongs ( [[polar]] ) , [[appalled]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 946 ---------------------------------------------
Convert a byte array to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[content]] , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( [[content]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[saz]] , final int offset ) { long [ ] [[affords]] = bytesToLongs ( [[saz]] , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[affords]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 947 ---------------------------------------------
Converts a long into a long . --> Construct a Mon from a Mono --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int [[offset]] , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int [[i8]] = [[offset]] ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int [[enchantée]] , final int size ) { long [ ] [[room]] = new long [ size >> 3 ] ; int [[abandon]] = [[enchantée]] ; for ( int i = 0 ; i < [[room]] . length ; i ++ ) { [[room]] [ i ] = Bits . getLong ( ba , [[abandon]] ) ; [[abandon]] += 8 ; } return [[room]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 591 / 311 / 46 / 948:  95%|█████████▍| 948/1000 [12:53:39<42:26, 48.97s/it][Succeeded / Failed / Skipped / Total] 591 / 311 / 46 / 948:  95%|█████████▍| 949/1000 [12:54:22<41:36, 48.96s/it][Succeeded / Failed / Skipped / Total] 591 / 312 / 46 / 949:  95%|█████████▍| 949/1000 [12:54:22<41:36, 48.96s/it][Succeeded / Failed / Skipped / Total] 591 / 312 / 46 / 949:  95%|█████████▌| 950/1000 [12:56:15<40:51, 49.03s/it][Succeeded / Failed / Skipped / Total] 591 / 313 / 46 / 950:  95%|█████████▌| 950/1000 [12:56:15<40:51, 49.03s/it][Succeeded / Failed / Skipped / Total] 591 / 313 / 46 / 950:  95%|█████████▌| 951/1000 [12:57:34<40:03, 49.06s/it][Succeeded / Failed / Skipped / Total] 592 / 313 / 46 / 951:  95%|█████████▌| 951/1000 [12:57:34<40:03, 49.06s/it][Succeeded / Failed / Skipped / Total] 592 / 313 / 46 / 951:  95%|█████████▌| 952/1000 [12:57:37<39:12, 49.01s/it][Succeeded / Failed / Skipped / Total] 593 / 313 / 46 / 952:  95%|█████████▌| 952/1000 [12:57:37<39:12, 49.01s/it][Succeeded / Failed / Skipped / Total] 593 / 313 / 46 / 952:  95%|█████████▌| 953/1000 [12:57:42<38:21, 48.96s/it][Succeeded / Failed / Skipped / Total] 594 / 313 / 46 / 953:  95%|█████████▌| 953/1000 [12:57:42<38:21, 48.96s/it][Succeeded / Failed / Skipped / Total] 594 / 313 / 46 / 953:  95%|█████████▌| 954/1000 [12:58:29<37:32, 48.96s/it][Succeeded / Failed / Skipped / Total] 595 / 313 / 46 / 954:  95%|█████████▌| 954/1000 [12:58:29<37:32, 48.96s/it][Succeeded / Failed / Skipped / Total] 595 / 313 / 46 / 954:  96%|█████████▌| 955/1000 [13:00:07<36:45, 49.01s/it]Remove a string from a string . --> Generate a wake wake --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[shower]] ( final char s , final char e , final String [[hawkes]] ) { if ( [[hawkes]] == null || [[hawkes]] . length ( ) < 2 ) { return [[hawkes]] ; } if ( [[hawkes]] . startsWith ( String . valueOf ( s ) ) && [[hawkes]] . endsWith ( String . valueOf ( e ) ) ) { return [[hawkes]] . substring ( 1 , [[hawkes]] . length ( ) - 1 ) ; } return [[hawkes]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 949 ---------------------------------------------
Returns the name of the href . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[chrissy]] ( ) { if ( methref != null ) { final String [[giri]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[giri]] ; } return [[chrissy]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 950 ---------------------------------------------
Create a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[contractors]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[contractors]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[contractors]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Opens a GZIP file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[gzos]] = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , [[gzos]] ) ; } finally { StreamUtil . close ( [[gzos]] ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[dads]] ( final File [[examining]] ) throws IOException { if ( [[examining]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[folkestone]] = new FileInputStream ( [[examining]] ) ; String gzipName = [[examining]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream [[succor]] = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[folkestone]] , [[succor]] ) ; } finally { StreamUtil . close ( [[succor]] ) ; StreamUtil . close ( [[folkestone]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Returns a file . --> Create a file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[cornflowers]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Returns a list of all entries in the given directory . --> Returns a list of entries in a directory --> Socre: 1.0

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[krauts]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[krauts]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[krauts]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 954 ---------------------------------------------
Unzip file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[beauvais]] ( final String [[chunks]] , final String destDir , final String ... patterns ) throws IOException { [[beauvais]] ( new File ( [[chunks]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 955 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 596 / 313 / 46 / 955:  96%|█████████▌| 955/1000 [13:00:07<36:45, 49.01s/it][Succeeded / Failed / Skipped / Total] 596 / 313 / 46 / 955:  96%|█████████▌| 956/1000 [13:03:00<36:02, 49.14s/it][Succeeded / Failed / Skipped / Total] 596 / 314 / 46 / 956:  96%|█████████▌| 956/1000 [13:03:00<36:02, 49.14s/it][Succeeded / Failed / Skipped / Total] 596 / 314 / 46 / 956:  96%|█████████▌| 957/1000 [13:04:44<35:15, 49.20s/it][Succeeded / Failed / Skipped / Total] 596 / 315 / 46 / 957:  96%|█████████▌| 957/1000 [13:04:44<35:15, 49.20s/it][Succeeded / Failed / Skipped / Total] 596 / 315 / 46 / 957:  96%|█████████▌| 958/1000 [13:06:26<34:28, 49.26s/it][Succeeded / Failed / Skipped / Total] 596 / 316 / 46 / 958:  96%|█████████▌| 958/1000 [13:06:26<34:28, 49.26s/it][Succeeded / Failed / Skipped / Total] 596 / 316 / 46 / 958:  96%|█████████▌| 959/1000 [13:07:24<33:39, 49.26s/it][Succeeded / Failed / Skipped / Total] 597 / 316 / 46 / 959:  96%|█████████▌| 959/1000 [13:07:24<33:39, 49.26s/it][Succeeded / Failed / Skipped / Total] 597 / 316 / 46 / 959:  96%|█████████▌| 960/1000 [13:08:47<32:51, 49.30s/it][Succeeded / Failed / Skipped / Total] 598 / 316 / 46 / 960:  96%|█████████▌| 960/1000 [13:08:47<32:51, 49.30s/it][Succeeded / Failed / Skipped / Total] 598 / 316 / 46 / 960:  96%|█████████▌| 961/1000 [13:09:44<32:03, 49.31s/it][Succeeded / Failed / Skipped / Total] 599 / 316 / 46 / 961:  96%|█████████▌| 961/1000 [13:09:44<32:03, 49.31s/it][Succeeded / Failed / Skipped / Total] 599 / 316 / 46 / 961:  96%|█████████▌| 962/1000 [13:10:51<31:14, 49.33s/it]Checks if the given file exists . --> Copied from a file --> Socre: 1.0

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[zos]] , final File file , String path , final String comment , final boolean [[recursive]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[prompter]] , final File file , String path , final String comment , final boolean [[bei]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 956 ---------------------------------------------
Sets the ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[comment]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { zipEntry . setComment ( [[comment]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[is]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[is]] , zos ) ; } finally { StreamUtil . close ( [[is]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] content , String path , final String [[orchestral]] ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[orchestral]] != null ) { zipEntry . setComment ( [[orchestral]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[logistic]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[logistic]] , zos ) ; } finally { StreamUtil . close ( [[logistic]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the name of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[ind]] ( final String [[egged]] , final boolean [[finishing]] ) { final FieldDescriptor [[huzzah]] = getFields ( ) . getFieldDescriptor ( [[egged]] ) ; if ( [[huzzah]] != null ) { if ( ! [[huzzah]] . matchDeclared ( [[finishing]] ) ) { return null ; } } return [[huzzah]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Returns a property value . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor [[cosmological]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[cosmological]] != null ) && [[cosmological]] . matchDeclared ( declared ) ) { return [[cosmological]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Sets the request bundle . --> Unrovial unrovy --> Socre: 1.0

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[tube]] ( final ServletRequest [[croak]] , final String [[unfiltered]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[unfiltered]] ) ; } [[croak]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[unfiltered]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 960 ---------------------------------------------
Sets the locale . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[misspelled]] ( final HttpSession session , final String [[breitbart]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[breitbart]] ) ; } Locale [[carney]] = Locale . forLanguageTag ( [[breitbart]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[carney]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 961 ---------------------------------------------
Returns the locale . --> Get the fingerprint of a Jtab --> Socre: 1.0

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[namaste]] ( final HttpSession [[crisscross]] ) { Locale [[bartering]] = ( Locale ) [[crisscross]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[bartering]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[bartering]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 600 / 316 / 46 / 962:  96%|█████████▌| 962/1000 [13:10:51<31:14, 49.33s/it][Succeeded / Failed / Skipped / Total] 600 / 316 / 46 / 962:  96%|█████████▋| 963/1000 [13:11:41<30:25, 49.33s/it][Succeeded / Failed / Skipped / Total] 600 / 317 / 46 / 963:  96%|█████████▋| 963/1000 [13:11:41<30:25, 49.33s/it][Succeeded / Failed / Skipped / Total] 600 / 317 / 46 / 963:  96%|█████████▋| 964/1000 [13:13:04<29:37, 49.36s/it][Succeeded / Failed / Skipped / Total] 600 / 318 / 46 / 964:  96%|█████████▋| 964/1000 [13:13:04<29:37, 49.36s/it][Succeeded / Failed / Skipped / Total] 600 / 318 / 46 / 964:  96%|█████████▋| 965/1000 [13:15:11<28:50, 49.44s/it][Succeeded / Failed / Skipped / Total] 600 / 319 / 46 / 965:  96%|█████████▋| 965/1000 [13:15:11<28:50, 49.44s/it][Succeeded / Failed / Skipped / Total] 600 / 319 / 46 / 965:  97%|█████████▋| 966/1000 [13:16:08<28:01, 49.45s/it][Succeeded / Failed / Skipped / Total] 601 / 319 / 46 / 966:  97%|█████████▋| 966/1000 [13:16:08<28:01, 49.45s/it][Succeeded / Failed / Skipped / Total] 601 / 319 / 46 / 966:  97%|█████████▋| 967/1000 [13:17:10<27:12, 49.46s/it][Succeeded / Failed / Skipped / Total] 601 / 320 / 46 / 967:  97%|█████████▋| 967/1000 [13:17:10<27:12, 49.46s/it][Succeeded / Failed / Skipped / Total] 601 / 320 / 46 / 967:  97%|█████████▋| 968/1000 [13:19:31<26:25, 49.56s/it][Succeeded / Failed / Skipped / Total] 601 / 321 / 46 / 968:  97%|█████████▋| 968/1000 [13:19:31<26:25, 49.56s/it][Succeeded / Failed / Skipped / Total] 601 / 321 / 46 / 968:  97%|█████████▋| 969/1000 [13:21:29<25:38, 49.63s/it]Resolve bean . --> Resolve regarding --> Socre: 1.0

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String [[regretting]] , final boolean resolveReferenceParams ) { [[regretting]] = [[regretting]] + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[neurosis]] : params . entrySet ( ) ) { String key = [[neurosis]] . getKey ( ) ; if ( ! key . startsWith ( [[regretting]] ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 963 ---------------------------------------------
Add a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[guarantee]] ( final String ... [[shunned]] ) { if ( [[shunned]] == null ) { return this ; } for ( String [[guarantee]] : [[shunned]] ) { addProfiles ( [[guarantee]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 964 ---------------------------------------------
Convert a long to a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[shopkeepers]] ( final byte [ ] [[henchman]] , final int [[vouch]] ) { return ( ( long ) [[henchman]] [ [[vouch]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Read a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream [[longbottom]] , final boolean close ) throws IOException { if ( [[longbottom]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[longbottom]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[longbottom]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Reads a label . --> Rename affir --> Socre: 1.0

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] [[labels]] ) { if ( [[labels]] [ [[bytecodeOffset]] ] == null ) { [[labels]] [ [[bytecodeOffset]] ] = new Label ( ) ; } return [[labels]] [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[shell]] ( final int [[brahman]] , final Label [ ] [[affirmative]] ) { if ( [[affirmative]] [ [[brahman]] ] == null ) { [[affirmative]] [ [[brahman]] ] = new Label ( ) ; } return [[affirmative]] [ [[brahman]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 967 ---------------------------------------------
Read an annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[localize]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 968 ---------------------------------------------
Read an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int currentOffset = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[unripe]] ( final AnnotationVisitor annotationVisitor , final int [[broadcasters]] , final boolean named , final char [ ] charBuffer ) { int currentOffset = [[broadcasters]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 602 / 321 / 46 / 969:  97%|█████████▋| 969/1000 [13:21:29<25:38, 49.63s/it][Succeeded / Failed / Skipped / Total] 602 / 321 / 46 / 969:  97%|█████████▋| 970/1000 [13:23:43<24:51, 49.71s/it][Succeeded / Failed / Skipped / Total] 602 / 322 / 46 / 970:  97%|█████████▋| 970/1000 [13:23:43<24:51, 49.71s/it][Succeeded / Failed / Skipped / Total] 602 / 322 / 46 / 970:  97%|█████████▋| 971/1000 [13:26:24<24:05, 49.83s/it][Succeeded / Failed / Skipped / Total] 602 / 323 / 46 / 971:  97%|█████████▋| 971/1000 [13:26:24<24:05, 49.83s/it][Succeeded / Failed / Skipped / Total] 602 / 323 / 46 / 971:  97%|█████████▋| 972/1000 [13:26:53<23:14, 49.81s/it][Succeeded / Failed / Skipped / Total] 603 / 323 / 46 / 972:  97%|█████████▋| 972/1000 [13:26:53<23:14, 49.81s/it][Succeeded / Failed / Skipped / Total] 603 / 323 / 46 / 972:  97%|█████████▋| 973/1000 [13:27:13<22:24, 49.78s/it][Succeeded / Failed / Skipped / Total] 604 / 323 / 46 / 973:  97%|█████████▋| 973/1000 [13:27:13<22:24, 49.78s/it][Succeeded / Failed / Skipped / Total] 604 / 323 / 46 / 973:  97%|█████████▋| 974/1000 [13:27:18<21:33, 49.73s/it][Succeeded / Failed / Skipped / Total] 605 / 323 / 46 / 974:  97%|█████████▋| 974/1000 [13:27:18<21:33, 49.73s/it][Succeeded / Failed / Skipped / Total] 605 / 323 / 46 / 974:  98%|█████████▊| 975/1000 [13:28:10<20:43, 49.73s/it]Reads frame . --> get frame frame --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = verificationTypeInfoOffset ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[zé]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] [[nimble]] ) { int currentOffset = verificationTypeInfoOffset ; int [[hittin]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[hittin]] ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , [[nimble]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 970 ---------------------------------------------
Read attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int [[maxStringLength]] ) { char [ ] charBuffer = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int [[mali]] ) { char [ ] charBuffer = new char [ [[mali]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 971 ---------------------------------------------
Initializes the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor ctor = ctors [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[architecture]] = 0 ; [[architecture]] < ctors . length ; [[architecture]] ++ ) { Constructor ctor = ctors [ [[architecture]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[architecture]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 972 ---------------------------------------------
Returns the number of arguments . --> Return the number of arguments --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int [[j]] = 0 ; [[j]] < arg . length ; [[j]] ++ ) { if ( arg [ [[j]] ] != args [ [[j]] ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor [[hitmen]] : allCtors ) { Class [ ] arg = [[hitmen]] . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int [[slm]] = 0 ; [[slm]] < arg . length ; [[slm]] ++ ) { if ( arg [ [[slm]] ] != args [ [[slm]] ] ) { continue ctors ; } } return [[hitmen]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 973 ---------------------------------------------
Returns a map of request parameters . --> Retrieve a bean for the given bean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest [[veterinary]] ) { return ( Map < String , TransientBeanData > ) [[veterinary]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 974 ---------------------------------------------
Creates a map for a map . --> Create a Bean --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[enormously]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[enormously]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 606 / 323 / 46 / 975:  98%|█████████▊| 975/1000 [13:28:10<20:43, 49.73s/it][Succeeded / Failed / Skipped / Total] 606 / 323 / 46 / 975:  98%|█████████▊| 976/1000 [13:28:18<19:52, 49.69s/it][Succeeded / Failed / Skipped / Total] 607 / 323 / 46 / 976:  98%|█████████▊| 976/1000 [13:28:18<19:52, 49.69s/it][Succeeded / Failed / Skipped / Total] 607 / 323 / 46 / 976:  98%|█████████▊| 977/1000 [13:28:24<19:01, 49.65s/it][Succeeded / Failed / Skipped / Total] 608 / 323 / 46 / 977:  98%|█████████▊| 977/1000 [13:28:24<19:01, 49.65s/it][Succeeded / Failed / Skipped / Total] 608 / 323 / 46 / 977:  98%|█████████▊| 978/1000 [13:28:36<18:11, 49.61s/it][Succeeded / Failed / Skipped / Total] 609 / 323 / 46 / 978:  98%|█████████▊| 978/1000 [13:28:36<18:11, 49.61s/it][Succeeded / Failed / Skipped / Total] 609 / 323 / 46 / 978:  98%|█████████▊| 979/1000 [13:28:40<17:20, 49.56s/it][Succeeded / Failed / Skipped / Total] 610 / 323 / 46 / 979:  98%|█████████▊| 979/1000 [13:28:40<17:20, 49.56s/it][Succeeded / Failed / Skipped / Total] 610 / 323 / 46 / 979:  98%|█████████▊| 980/1000 [13:28:45<16:30, 49.52s/it][Succeeded / Failed / Skipped / Total] 611 / 323 / 46 / 980:  98%|█████████▊| 980/1000 [13:28:45<16:30, 49.52s/it][Succeeded / Failed / Skipped / Total] 611 / 323 / 46 / 980:  98%|█████████▊| 981/1000 [13:28:50<15:39, 49.47s/it][Succeeded / Failed / Skipped / Total] 612 / 323 / 46 / 981:  98%|█████████▊| 981/1000 [13:28:50<15:39, 49.47s/it][Succeeded / Failed / Skipped / Total] 612 / 323 / 46 / 981:  98%|█████████▊| 982/1000 [13:29:34<14:50, 49.46s/it][Succeeded / Failed / Skipped / Total] 612 / 324 / 46 / 982:  98%|█████████▊| 982/1000 [13:29:34<14:50, 49.46s/it][Succeeded / Failed / Skipped / Total] 612 / 324 / 46 / 982:  98%|█████████▊| 983/1000 [13:30:56<14:01, 49.50s/it][Succeeded / Failed / Skipped / Total] 613 / 324 / 46 / 983:  98%|█████████▊| 983/1000 [13:30:56<14:01, 49.50s/it][Succeeded / Failed / Skipped / Total] 613 / 324 / 46 / 983:  98%|█████████▊| 984/1000 [13:32:44<13:12, 49.56s/it]Convert an array value to a primitive array . --> Returns the number of arguments for the given type --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[confirmation]] ( final Object [[cyclic]] ) { final Class [[conspires]] = [[cyclic]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[conspires]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[cyclic]] , [[conspires]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 976 ---------------------------------------------
Initialize the configuration . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[testified]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 977 ---------------------------------------------
Adds a file to the consumer . --> Adds a heap to the heap . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[cheapskates]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[cheapskates]] ) ; } else { consumers . add ( [[cheapskates]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 978 ---------------------------------------------
Search for a file . --> Convenience method to add a file --> Socre: 1.0

[[[[Adv]]]]: public FindFile searchPath ( final URI [[searchPath]] ) { File file ; try { file = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URI [[tabard]] ) { File file ; try { file = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Search for a file . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[loomed]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[loomed]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[loomed]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Returns a string that matches the given pattern . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile include ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... [[enact]] ) { for ( String pattern : [[enact]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Returns the exclude patterns . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[bray]] : patterns ) { rules . exclude ( [[bray]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Adds a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[nucleic]] ( final File [[keycard]] ) { if ( ! [[keycard]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[keycard]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Returns all the files in the given directory . --> Searches for testing --> Socre: 1.0

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[anointest]] = new ArrayList <> ( ) ; File [[assassins]] ; while ( ( [[assassins]] = nextFile ( ) ) != null ) { [[anointest]] . add ( [[assassins]] ) ; } return [[anointest]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 614 / 324 / 46 / 984:  98%|█████████▊| 984/1000 [13:32:44<13:12, 49.56s/it][Succeeded / Failed / Skipped / Total] 614 / 324 / 46 / 984:  98%|█████████▊| 985/1000 [13:33:05<12:22, 49.53s/it][Succeeded / Failed / Skipped / Total] 614 / 325 / 46 / 985:  98%|█████████▊| 985/1000 [13:33:05<12:22, 49.53s/it][Succeeded / Failed / Skipped / Total] 614 / 325 / 46 / 985:  99%|█████████▊| 986/1000 [13:33:20<11:32, 49.49s/it][Succeeded / Failed / Skipped / Total] 615 / 325 / 46 / 986:  99%|█████████▊| 986/1000 [13:33:20<11:32, 49.49s/it][Succeeded / Failed / Skipped / Total] 615 / 325 / 46 / 986:  99%|█████████▊| 987/1000 [13:34:20<10:43, 49.50s/it][Succeeded / Failed / Skipped / Total] 616 / 325 / 46 / 987:  99%|█████████▊| 987/1000 [13:34:20<10:43, 49.50s/it][Succeeded / Failed / Skipped / Total] 616 / 325 / 46 / 987:  99%|█████████▉| 988/1000 [13:34:29<09:53, 49.46s/it][Succeeded / Failed / Skipped / Total] 617 / 325 / 46 / 988:  99%|█████████▉| 988/1000 [13:34:29<09:53, 49.46s/it][Succeeded / Failed / Skipped / Total] 617 / 325 / 46 / 988:  99%|█████████▉| 989/1000 [13:34:49<09:03, 49.43s/it][Succeeded / Failed / Skipped / Total] 617 / 326 / 46 / 989:  99%|█████████▉| 989/1000 [13:34:49<09:03, 49.43s/it][Succeeded / Failed / Skipped / Total] 617 / 326 / 46 / 989:  99%|█████████▉| 990/1000 [13:36:01<08:14, 49.46s/it]Renames all files . --> Removes all entries in a given path --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ index ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[objections]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[abdicate]] = iterator . next ( ) ; if ( [[abdicate]] . isFile ( ) ) { files [ index ++ ] = [[abdicate]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the next iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[eachother]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 986 ---------------------------------------------
Gets the bean type . --> Looks for a WikiBean --> Socre: 1.0

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean [[norwood]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[norwood]] != null ? [[norwood]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the type of the given type . --> Prints a Print --> Socre: 1.0

[[[[Adv]]]]: public String resolveBeanName ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class [[northumberland]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[northumberland]] ) . getAnnotation ( PetiteBean . class ) ; String [[printers]] = null ; if ( petiteBean != null ) { [[printers]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[printers]] == null ) || ( [[printers]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[printers]] = [[northumberland]] . getName ( ) ; } else { [[printers]] = StringUtil . uncapitalize ( [[northumberland]] . getSimpleName ( ) ) ; } } return [[printers]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 988 ---------------------------------------------
Close the stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[sickbed]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 989 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[ku]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 617 / 327 / 46 / 990:  99%|█████████▉| 990/1000 [13:36:01<08:14, 49.46s/it][Succeeded / Failed / Skipped / Total] 617 / 327 / 46 / 990:  99%|█████████▉| 991/1000 [13:36:41<07:25, 49.45s/it][Succeeded / Failed / Skipped / Total] 618 / 327 / 46 / 991:  99%|█████████▉| 991/1000 [13:36:41<07:25, 49.45s/it][Succeeded / Failed / Skipped / Total] 618 / 327 / 46 / 991:  99%|█████████▉| 992/1000 [13:38:26<06:36, 49.50s/it][Succeeded / Failed / Skipped / Total] 619 / 327 / 46 / 992:  99%|█████████▉| 992/1000 [13:38:26<06:36, 49.50s/it][Succeeded / Failed / Skipped / Total] 619 / 327 / 46 / 992:  99%|█████████▉| 993/1000 [13:38:54<05:46, 49.48s/it][Succeeded / Failed / Skipped / Total] 620 / 327 / 46 / 993:  99%|█████████▉| 993/1000 [13:38:54<05:46, 49.48s/it][Succeeded / Failed / Skipped / Total] 620 / 327 / 46 / 993:  99%|█████████▉| 994/1000 [13:39:43<04:56, 49.48s/it][Succeeded / Failed / Skipped / Total] 620 / 328 / 46 / 994:  99%|█████████▉| 994/1000 [13:39:43<04:56, 49.48s/it][Succeeded / Failed / Skipped / Total] 620 / 328 / 46 / 994: 100%|█████████▉| 995/1000 [13:40:08<04:07, 49.46s/it][Succeeded / Failed / Skipped / Total] 620 / 329 / 46 / 995: 100%|█████████▉| 995/1000 [13:40:08<04:07, 49.46s/it][Succeeded / Failed / Skipped / Total] 620 / 329 / 46 / 995: 100%|█████████▉| 996/1000 [13:40:43<03:17, 49.44s/it]Returns a String representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[itwould]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[itwould]] . append ( "[]" ) ; } return [[itwould]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Creates a constructor for the given constructor . --> Create a string representation of a class --> Socre: 1.0

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : [[parameters]] ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[larvae]] = constructor . getParameterTypes ( ) ; for ( Class < ? > [[zoar]] : [[larvae]] ) { appendDescriptor ( [[zoar]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 992 ---------------------------------------------
Returns a string representation of the given type . --> Convenience function for debugging --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type [[argumentType]] : [[argumentTypes]] ) { [[argumentType]] . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[leveled]] ( final Type [[concorde]] , final Type ... [[dressin]] ) { StringBuilder [[oysters]] = new StringBuilder ( ) ; [[oysters]] . append ( ' ' ) ; for ( Type [[prouder]] : [[dressin]] ) { [[prouder]] . appendDescriptor ( [[oysters]] ) ; } [[oysters]] . append ( ' ' ) ; [[concorde]] . appendDescriptor ( [[oysters]] ) ; return [[oysters]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 993 ---------------------------------------------
Returns a string representation of this method . --> Generate a string representation of a parameter --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[doar]] ( final Method [[chompers]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[chompers]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[chompers]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 994 ---------------------------------------------
Appends a string to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[blinders]] ) { if ( sort == OBJECT ) { [[blinders]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[blinders]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[blinders]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 995 ---------------------------------------------
Returns the size of the given size . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[deliveryman]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 996 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 621 / 329 / 46 / 996: 100%|█████████▉| 996/1000 [13:40:43<03:17, 49.44s/it][Succeeded / Failed / Skipped / Total] 621 / 329 / 46 / 996: 100%|█████████▉| 997/1000 [13:41:28<02:28, 49.44s/it][Succeeded / Failed / Skipped / Total] 621 / 330 / 46 / 997: 100%|█████████▉| 997/1000 [13:41:28<02:28, 49.44s/it][Succeeded / Failed / Skipped / Total] 621 / 330 / 46 / 997: 100%|█████████▉| 998/1000 [13:43:17<01:38, 49.50s/it][Succeeded / Failed / Skipped / Total] 621 / 331 / 46 / 998: 100%|█████████▉| 998/1000 [13:43:17<01:38, 49.50s/it][Succeeded / Failed / Skipped / Total] 621 / 331 / 46 / 998: 100%|█████████▉| 999/1000 [13:44:53<00:49, 49.54s/it][Succeeded / Failed / Skipped / Total] 621 / 332 / 46 / 999: 100%|█████████▉| 999/1000 [13:44:53<00:49, 49.54s/it][Succeeded / Failed / Skipped / Total] 621 / 332 / 46 / 999: 100%|██████████| 1000/1000 [13:46:28<00:00, 49.59s/it][Succeeded / Failed / Skipped / Total] 621 / 333 / 46 / 1000: 100%|██████████| 1000/1000 [13:46:28<00:00, 49.59s/it]Attack(
  (search_method): RandomSearch(
    (trials):  5
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 621 / 333 / 46 / 1000: 100%|██████████| 1000/1000 [13:46:29<00:00, 49.59s/it]Returns the number of arguments . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[inventive]] ( final String methodDescriptor ) { int [[fuckup]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Set the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[ehrlich]] ( final Throwable [[honey]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[honey]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 998 ---------------------------------------------
Rollback the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[False]]" != "[[False]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "[[False]]" != "[[False]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[snuffling]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[Hurl]]" != "[[Hurl]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "[[Hurl]]" != "[[Hurl]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Removes the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource resource = [[it]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[shenzhen]] = resources . iterator ( ) ; while ( [[shenzhen]] . hasNext ( ) ) { JtxResource resource = [[shenzhen]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[shenzhen]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Checks if a resource exists . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[slunk]] = lookupResource ( resourceType ) ; if ( [[slunk]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[slunk]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[slunk]] ) ) ; } return [[slunk]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 621    |
| Number of failed attacks:     | 333    |
| Number of skipped attacks:    | 46     |
| Original accuracy:            | 95.4%  |
| Accuracy under attack:        | 33.3%  |
| Attack success rate:          | 65.09% |
| Average perturbed word %:     | 49.99% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 526.09 |
| Original BLEU-4:              | 13.87  |
| Perturbed BLEU-4:             | 1.69   |
+-------------------------------+--------+


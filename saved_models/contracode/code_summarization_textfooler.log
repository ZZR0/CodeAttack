textattack: Running 8 worker(s) on 8 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 921.22it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1080.17it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1190.44it/s][Succeeded / Failed / Skipped / Total] 1 / 3 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1370.80it/s][Succeeded / Failed / Skipped / Total] 2 / 3 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1547.71it/s][Succeeded / Failed / Skipped / Total] 2 / 4 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1688.19it/s][Succeeded / Failed / Skipped / Total] 2 / 5 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1809.45it/s]--------------------------------------------- Result 1 ---------------------------------------------
Adds a observer to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[appraisal]] , boolean [[imply]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[appraisal]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[appraisal]] ) ; } } else { q . offer ( [[appraisal]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[imply]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Sorts the given function . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[cataloged]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Converts a Java source into a java object . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[suited]] ( ObservableSource < T > [[ancestral]] ) { ObjectHelper . requireNonNull ( [[ancestral]] , "source is null" ) ; if ( [[ancestral]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[ancestral]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[ancestral]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 4 ---------------------------------------------
A convenience method for creating a Observable . --> Asynchronously initializes asynchronously --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[observable]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[egregious]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[egregious]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a new builder . --> Create a new Bean --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[sambas]] ) { return new UnicastProcessor < T > ( [[sambas]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Convert an equivalent to a Stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[bees]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a new instance of a given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[constructs]] ( int capacityHint , Runnable [[trouper]] ) { ObjectHelper . requireNonNull ( [[trouper]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[trouper]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 6 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1712.40it/s][Succeeded / Failed / Skipped / Total] 2 / 7 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1725.18it/s][Succeeded / Failed / Skipped / Total] 2 / 8 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 1667.78it/s][Succeeded / Failed / Skipped / Total] 2 / 9 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 1727.99it/s][Succeeded / Failed / Skipped / Total] 2 / 10 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 1794.10it/s]Sets the internal state . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Misleading]]" != "[[Misleading]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Creates a CompletableSource from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[perrier]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Performs a callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > [[source]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[boorish]] ( Publisher < T > [[resource]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[resource]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[resource]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 11 ---------------------------------------------
Throws an IllegalArgumentException if the object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[quantity]] > [[quantity]] requireNonNull ( [[quantity]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Converts a predicate to a predicate . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[schedule]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[schedule]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 2 / 11 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 1760.66it/s][Succeeded / Failed / Skipped / Total] 3 / 11 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 1819.15it/s][Succeeded / Failed / Skipped / Total] 4 / 11 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 1859.84it/s][Succeeded / Failed / Skipped / Total] 5 / 11 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 1916.30it/s][Succeeded / Failed / Skipped / Total] 5 / 12 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 1949.13it/s][Succeeded / Failed / Skipped / Total] 6 / 12 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 1993.02it/s][Succeeded / Failed / Skipped / Total] 6 / 13 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2038.62it/s][Succeeded / Failed / Skipped / Total] 6 / 14 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2083.14it/s][Succeeded / Failed / Skipped / Total] 7 / 14 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2120.68it/s][Succeeded / Failed / Skipped / Total] 8 / 14 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2158.62it/s][Succeeded / Failed / Skipped / Total] 8 / 15 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:00, 2187.11it/s]Convenience method to create a Java source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[swastika]] ( SingleSource < T > [[dullard]] ) { ObjectHelper . requireNonNull ( [[dullard]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[dullard]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 14 ---------------------------------------------
Convenience factory method to create an object . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[ts]] > Function < [[ts]] , [[ts]] > [[subjectivity]] ( ) { return ( Function < [[ts]] , [[ts]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Creates a new Subject . --> Create a new Bean subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 16 ---------------------------------------------
Convenience factory method for creating a new value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[plants]] ( T [[appreciates]] ) { return new JustValue < Object , T > ( [[appreciates]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
A convenience method to wrap a function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[brownings]] ( Class < U > [[fated]] ) { return new CastToClass < T , U > ( [[fated]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 18 ---------------------------------------------
Returns a function that evaluates to a given value . --> Create evaluation for evaluation --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[et]] , U > Function < [[et]] , U > [[trouper]] ( U [[evaluation]] ) { return new JustValue < [[et]] , U > ( [[evaluation]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 19 ---------------------------------------------
Creates a new binary value with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[doorbell]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[doorbell]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 20 ---------------------------------------------
Returns the number of error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[conversing]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a new Recorder . --> Construct a &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[unapproachable]] ) { return new UnicastSubject < T > ( [[unapproachable]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 22 ---------------------------------------------
Advances a prefetch . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[inquired]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 23 ---------------------------------------------
Create a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[kanagawa]] , Runnable [[distrust]] ) { return new UnicastSubject < T > ( [[kanagawa]] , [[distrust]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
[Succeeded / Failed / Skipped / Total] 8 / 16 / 0 / 24:   2%|▏         | 24/1000 [00:00<00:00, 2214.67it/s][Succeeded / Failed / Skipped / Total] 8 / 17 / 0 / 25:   2%|▎         | 25/1000 [00:00<00:00, 2231.01it/s][Succeeded / Failed / Skipped / Total] 8 / 18 / 0 / 26:   3%|▎         | 26/1000 [00:00<00:00, 2258.83it/s][Succeeded / Failed / Skipped / Total] 8 / 19 / 0 / 27:   3%|▎         | 27/1000 [00:00<00:00, 2290.90it/s][Succeeded / Failed / Skipped / Total] 9 / 19 / 0 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2304.79it/s][Succeeded / Failed / Skipped / Total] 9 / 20 / 0 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2325.58it/s][Succeeded / Failed / Skipped / Total] 10 / 20 / 0 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2335.75it/s]--------------------------------------------- Result 24 ---------------------------------------------
Executes the given call . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[addictions]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[addictions]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[addictions]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Waits until a block . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[callback]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[callback]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[remarried]] ) ; } } Throwable [[remarried]] = error ; if ( [[remarried]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[remarried]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[dingle]] ( ) { Object [[australian]] = value ; if ( [[australian]] != null && ! NotificationLite . isError ( [[australian]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Adds an object to this object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[cumulative]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 28 ---------------------------------------------
Verifies whether the given stream is valid . --> Convenient method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[attest]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[Forgery]]" != "[[Forgery]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 29 ---------------------------------------------
Adds a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[weber]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 30 ---------------------------------------------
Shuts down this queue . --> Shuts down a queue --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[atchison]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[status]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[status]] . get ( ) , actual , queue , [[status]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[status]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 21 / 0 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2339.73it/s][Succeeded / Failed / Skipped / Total] 11 / 21 / 0 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2332.48it/s][Succeeded / Failed / Skipped / Total] 11 / 22 / 0 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2358.96it/s][Succeeded / Failed / Skipped / Total] 12 / 22 / 0 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2367.54it/s][Succeeded / Failed / Skipped / Total] 13 / 22 / 0 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2380.31it/s][Succeeded / Failed / Skipped / Total] 13 / 22 / 0 / 35:   4%|▎         | 36/1000 [00:02<01:16, 12.57it/s]  [Succeeded / Failed / Skipped / Total] 13 / 23 / 0 / 36:   4%|▎         | 36/1000 [00:02<01:16, 12.57it/s][Succeeded / Failed / Skipped / Total] 13 / 24 / 0 / 37:   4%|▎         | 37/1000 [00:03<01:20, 11.94it/s]Synchronized . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long [[percentages]] = produced ; if ( [[percentages]] != 0 ) { BackpressureHelper . produced ( this , [[percentages]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 32 ---------------------------------------------
Decreases the queue . --> Convenience function to execute asynchronously --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[qd]] ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[qd]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = [[qd]] . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[stirrup]] ) { int [[faulted]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[stirrup]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[stirrup]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[stirrup]] . requested ( ) ; if ( r != 0L ) { if ( [[stirrup]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[stirrup]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[faulted]] = [[stirrup]] . leave ( - [[faulted]] ) ; if ( [[faulted]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 33 ---------------------------------------------
Get error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 34 ---------------------------------------------
Generate a set of listeners . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[ancestor]] , Disposable [[looming]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[looming]] , "next is null" ) ; if ( ! [[ancestor]] . compareAndSet ( null , [[looming]] ) ) { [[looming]] . dispose ( ) ; if ( [[ancestor]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 35 ---------------------------------------------
Returns the number of ranges . --> Obtains a set of values for a given set --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[incorporated]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 36 ---------------------------------------------
Shutdown the executor . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[latches]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 37 ---------------------------------------------
Returns the amount of . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[multiplyCap]] ( long [[a]] , long b ) { long u = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( u / [[a]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[beryl]] ( long [[others]] , long b ) { long u = [[others]] * b ; if ( ( ( [[others]] | b ) >>> 31 ) != 0 ) { if ( u / [[others]] != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
[Succeeded / Failed / Skipped / Total] 13 / 25 / 0 / 38:   4%|▍         | 38/1000 [00:03<01:32, 10.37it/s][Succeeded / Failed / Skipped / Total] 13 / 26 / 0 / 39:   4%|▍         | 39/1000 [00:08<03:25,  4.68it/s][Succeeded / Failed / Skipped / Total] 14 / 26 / 0 / 40:   4%|▍         | 40/1000 [00:14<05:45,  2.78it/s][Succeeded / Failed / Skipped / Total] 14 / 27 / 0 / 41:   4%|▍         | 41/1000 [00:15<05:58,  2.67it/s][Succeeded / Failed / Skipped / Total] 14 / 28 / 0 / 42:   4%|▍         | 42/1000 [00:19<07:15,  2.20it/s][Succeeded / Failed / Skipped / Total] 14 / 29 / 0 / 43:   4%|▍         | 43/1000 [00:21<07:50,  2.04it/s][Succeeded / Failed / Skipped / Total] 15 / 29 / 0 / 44:   4%|▍         | 44/1000 [00:22<08:03,  1.98it/s]--------------------------------------------- Result 38 ---------------------------------------------
Initializes the exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException [[exclamation]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[exclamation]] . initCause ( ex ) ; return [[exclamation]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 39 ---------------------------------------------
Implementation of subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[incoming]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[incoming]] , "next is null" ) ; if ( upstream != null ) { [[incoming]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[Trusty]]" == "[[Trusty]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 40 ---------------------------------------------
Create a new executor service . --> Convenience method to create ExecutorServices --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory factory ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[begets]] ( ThreadFactory factory ) { final ScheduledExecutorService [[executes]] = Executors . newScheduledThreadPool ( 1 , factory ) ; tryPutIntoPool ( PURGE_ENABLED , [[executes]] ) ; return [[executes]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 41 ---------------------------------------------
Sets the next subscriptions . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[after]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[after]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[after]] ) ) { [[after]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Falsify]]" != "[[Falsify]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 42 ---------------------------------------------
Throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E [[broadening]] Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 43 ---------------------------------------------
Wrap a Throwable error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[afire]] ( Throwable [[defective]] ) { if ( [[defective]] instanceof Error ) { throw ( Error ) [[defective]] ; } if ( [[defective]] instanceof RuntimeException ) { return ( RuntimeException ) [[defective]] ; } return new RuntimeException ( [[defective]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
Shuts down the queue . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[dango]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[correspondents]] ; synchronized ( this ) { [[correspondents]] = queue ; if ( [[correspondents]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[correspondents]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 30 / 0 / 45:   4%|▍         | 45/1000 [00:25<09:00,  1.77it/s][Succeeded / Failed / Skipped / Total] 16 / 30 / 0 / 46:   5%|▍         | 46/1000 [00:26<09:01,  1.76it/s][Succeeded / Failed / Skipped / Total] 17 / 30 / 0 / 47:   5%|▍         | 47/1000 [00:31<10:28,  1.52it/s][Succeeded / Failed / Skipped / Total] 17 / 31 / 0 / 48:   5%|▍         | 48/1000 [00:31<10:23,  1.53it/s][Succeeded / Failed / Skipped / Total] 17 / 32 / 0 / 49:   5%|▍         | 49/1000 [00:31<10:12,  1.55it/s][Succeeded / Failed / Skipped / Total] 18 / 32 / 0 / 50:   5%|▌         | 50/1000 [00:31<10:07,  1.56it/s][Succeeded / Failed / Skipped / Total] 18 / 33 / 0 / 51:   5%|▌         | 51/1000 [00:33<10:22,  1.52it/s]Sets the resources . --> [[[FAILED]]]

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[created]] ; synchronized ( this ) { if ( disposed ) { return ; } [[created]] = resources ; resources = null ; } dispose ( [[created]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Returns a list of exceptions . --> Thrown when an exception is thrown --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int [[i]] = [[exceptions]] . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( [[exceptions]] . get ( [[i]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > [[defences]] = ce . getExceptions ( ) ; for ( int [[je]] = [[defences]] . size ( ) - 1 ; [[je]] >= 0 ; [[je]] -- ) { deque . offerFirst ( [[defences]] . get ( [[je]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 47 ---------------------------------------------
Returns a copy of the given object . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , subscriber ) ) { return "[[Loyal]]" == "[[Loyal]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 48 ---------------------------------------------
Sets the number of threads . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[sizes]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[establish]] = resources ; return [[establish]] != null ? [[establish]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 49 ---------------------------------------------
Cancel all resources . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[fascinates]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[mejor]] = actual ; if ( [[mejor]] != null && cancelOnReplace ) { [[mejor]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[mejor]] = missedSubscription . getAndSet ( s ) ; if ( [[mejor]] != null && cancelOnReplace ) { [[mejor]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 50 ---------------------------------------------
Return a copy of the observer . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[Deceptive]]" != "[[Deceptive]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 51 ---------------------------------------------
Starts the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 34 / 0 / 52:   5%|▌         | 52/1000 [00:34<10:20,  1.53it/s][Succeeded / Failed / Skipped / Total] 19 / 34 / 0 / 53:   5%|▌         | 53/1000 [00:43<12:50,  1.23it/s][Succeeded / Failed / Skipped / Total] 19 / 35 / 0 / 54:   5%|▌         | 54/1000 [00:44<13:02,  1.21it/s][Succeeded / Failed / Skipped / Total] 19 / 36 / 0 / 55:   6%|▌         | 55/1000 [00:51<14:39,  1.07it/s][Succeeded / Failed / Skipped / Total] 20 / 36 / 0 / 56:   6%|▌         | 56/1000 [00:56<15:54,  1.01s/it][Succeeded / Failed / Skipped / Total] 20 / 37 / 0 / 57:   6%|▌         | 57/1000 [00:58<16:06,  1.02s/it][Succeeded / Failed / Skipped / Total] 20 / 38 / 0 / 58:   6%|▌         | 58/1000 [01:03<17:15,  1.10s/it][Succeeded / Failed / Skipped / Total] 20 / 39 / 0 / 59:   6%|▌         | 59/1000 [01:08<18:15,  1.16s/it]Initializes the queue queue --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[dad]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Process the topic . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void error ( Throwable t ) { int [[statehood]] = get ( ) ; if ( ( [[statehood]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 54 ---------------------------------------------
Gets the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[ter]] = resource . get ( ) ; if ( [[ter]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[ter]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 55 ---------------------------------------------
Sets the current state . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[completion]] ( ) { int [[estado]] = get ( ) ; if ( ( [[estado]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 56 ---------------------------------------------
Advances the given values to the Iterable . --> Liefert die egebeneben eineineich eiche e die e eineiche e ene eiche e e enene eugeich e en eneuche eneich eueneneich e eich e eg eneneneich e --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[concatMapIterable]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[siege]] ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return [[siege]] ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 57 ---------------------------------------------
Creates a Observable that returns a Observable that corresponds to the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[schnauzer]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 58 ---------------------------------------------
Sorts a sortable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > sorted ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 59 ---------------------------------------------
A convenience method for creating a error . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return concatMapDelayError ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > [[cave]] ) { return concatMapDelayError ( [[cave]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 60 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 40 / 0 / 60:   6%|▌         | 60/1000 [01:11<18:43,  1.20s/it][Succeeded / Failed / Skipped / Total] 20 / 41 / 0 / 61:   6%|▌         | 61/1000 [01:12<18:35,  1.19s/it][Succeeded / Failed / Skipped / Total] 20 / 42 / 0 / 62:   6%|▌         | 62/1000 [01:16<19:12,  1.23s/it][Succeeded / Failed / Skipped / Total] 21 / 42 / 0 / 63:   6%|▋         | 63/1000 [01:28<21:49,  1.40s/it][Succeeded / Failed / Skipped / Total] 21 / 43 / 0 / 64:   6%|▋         | 64/1000 [01:28<21:36,  1.38s/it][Succeeded / Failed / Skipped / Total] 22 / 43 / 0 / 65:   6%|▋         | 65/1000 [01:29<21:25,  1.38s/it][Succeeded / Failed / Skipped / Total] 22 / 44 / 0 / 66:   7%|▋         | 66/1000 [01:31<21:33,  1.38s/it]Return the number of threads in the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T t ) { if ( once . get ( ) ) { return "[[Falsified]]" != "[[Falsified]]" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "[[Falsified]]" != "[[Falsified]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 61 ---------------------------------------------
Count the number of times . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[sufferance]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[sufferance]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 62 ---------------------------------------------
Sets the current state . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[value]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . [[emphasis]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a new flowable . --> Create a new flow faciliation --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[flowable]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[flowable]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[balked]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > [[troop]] = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , [[troop]] ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 64 ---------------------------------------------
Called when a subscription . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[into]] = this . upstream ; if ( [[into]] != null ) { [[into]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
Re - - safe - . --> Snecessarily creates a new one --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[n]] ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[n]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[removing]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[nope]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[nope]] ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[nope]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[nope]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[nope]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 66 ---------------------------------------------
Handles a response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[silesia]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 67 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 44 / 0 / 67:   7%|▋         | 67/1000 [01:38<22:58,  1.48s/it][Succeeded / Failed / Skipped / Total] 23 / 45 / 0 / 68:   7%|▋         | 68/1000 [01:43<23:44,  1.53s/it][Succeeded / Failed / Skipped / Total] 23 / 46 / 0 / 69:   7%|▋         | 69/1000 [01:44<23:23,  1.51s/it][Succeeded / Failed / Skipped / Total] 23 / 47 / 0 / 70:   7%|▋         | 70/1000 [01:52<25:00,  1.61s/it][Succeeded / Failed / Skipped / Total] 24 / 47 / 0 / 71:   7%|▋         | 71/1000 [01:53<24:46,  1.60s/it][Succeeded / Failed / Skipped / Total] 24 / 47 / 0 / 71:   7%|▋         | 72/1000 [01:55<24:47,  1.60s/it][Succeeded / Failed / Skipped / Total] 24 / 48 / 0 / 72:   7%|▋         | 72/1000 [01:55<24:47,  1.60s/it][Succeeded / Failed / Skipped / Total] 24 / 48 / 0 / 72:   7%|▋         | 73/1000 [02:01<25:39,  1.66s/it]Returns a new search for the given search . --> Returns a new search search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[begging]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 68 ---------------------------------------------
Sets the amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[plugging]] ( long amount , TimeUnit unit ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = unit . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
Returns a string representation of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[jaden]] ( String [[approach]] ) { try { return HttpMethod . valueOf ( [[approach]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 70 ---------------------------------------------
Sets the maximum time . --> [[[FAILED]]]

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[disk]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Checks to see if the given version exists . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[dismantled]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 72 ---------------------------------------------
Create a new username --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String [[username]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[lumumba]] ( String [[client]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[client]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[client]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 49 / 0 / 73:   7%|▋         | 73/1000 [02:01<25:40,  1.66s/it][Succeeded / Failed / Skipped / Total] 24 / 49 / 0 / 73:   7%|▋         | 74/1000 [02:07<26:40,  1.73s/it][Succeeded / Failed / Skipped / Total] 24 / 50 / 0 / 74:   7%|▋         | 74/1000 [02:07<26:40,  1.73s/it][Succeeded / Failed / Skipped / Total] 24 / 50 / 0 / 74:   8%|▊         | 75/1000 [02:09<26:35,  1.72s/it][Succeeded / Failed / Skipped / Total] 24 / 51 / 0 / 75:   8%|▊         | 75/1000 [02:09<26:35,  1.72s/it][Succeeded / Failed / Skipped / Total] 24 / 51 / 0 / 75:   8%|▊         | 76/1000 [02:11<26:34,  1.73s/it][Succeeded / Failed / Skipped / Total] 25 / 51 / 0 / 76:   8%|▊         | 76/1000 [02:11<26:34,  1.73s/it][Succeeded / Failed / Skipped / Total] 25 / 51 / 0 / 76:   8%|▊         | 77/1000 [02:14<26:56,  1.75s/it][Succeeded / Failed / Skipped / Total] 25 / 52 / 0 / 77:   8%|▊         | 77/1000 [02:14<26:56,  1.75s/it][Succeeded / Failed / Skipped / Total] 25 / 52 / 0 / 77:   8%|▊         | 78/1000 [02:18<27:19,  1.78s/it][Succeeded / Failed / Skipped / Total] 25 / 53 / 0 / 78:   8%|▊         | 78/1000 [02:18<27:19,  1.78s/it][Succeeded / Failed / Skipped / Total] 25 / 53 / 0 / 78:   8%|▊         | 79/1000 [02:22<27:42,  1.81s/it]Wraps the given observer . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[t]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[sg]] ; try { [[sg]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[sg]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[sg]] ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "[[Counterfeit]]" != "[[Counterfeit]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 74 ---------------------------------------------
Hashes a password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[decoder]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[chernobyl]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 75 ---------------------------------------------
Gets the version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[feces]] ( ) { Properties [[goods]] = new Properties ( ) ; try { [[goods]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[goods]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 76 ---------------------------------------------
Returns a copy of this cluster . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: boolean add ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > [[aoc]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[Disingenuous]]" != "[[Disingenuous]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[aoc]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 77 ---------------------------------------------
Put password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 78 ---------------------------------------------
Get the OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[kidnaps]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 54 / 0 / 79:   8%|▊         | 79/1000 [02:22<27:42,  1.81s/it][Succeeded / Failed / Skipped / Total] 25 / 54 / 0 / 79:   8%|▊         | 80/1000 [02:23<27:28,  1.79s/it][Succeeded / Failed / Skipped / Total] 25 / 55 / 0 / 80:   8%|▊         | 80/1000 [02:23<27:28,  1.79s/it][Succeeded / Failed / Skipped / Total] 25 / 55 / 0 / 80:   8%|▊         | 81/1000 [02:30<28:23,  1.85s/it][Succeeded / Failed / Skipped / Total] 26 / 55 / 0 / 81:   8%|▊         | 81/1000 [02:30<28:23,  1.85s/it][Succeeded / Failed / Skipped / Total] 26 / 55 / 0 / 81:   8%|▊         | 82/1000 [02:30<28:02,  1.83s/it][Succeeded / Failed / Skipped / Total] 26 / 56 / 0 / 82:   8%|▊         | 82/1000 [02:30<28:02,  1.83s/it][Succeeded / Failed / Skipped / Total] 26 / 56 / 0 / 82:   8%|▊         | 83/1000 [02:30<27:48,  1.82s/it][Succeeded / Failed / Skipped / Total] 27 / 56 / 0 / 83:   8%|▊         | 83/1000 [02:30<27:48,  1.82s/it][Succeeded / Failed / Skipped / Total] 27 / 56 / 0 / 83:   8%|▊         | 84/1000 [02:34<28:05,  1.84s/it][Succeeded / Failed / Skipped / Total] 28 / 56 / 0 / 84:   8%|▊         | 84/1000 [02:34<28:05,  1.84s/it][Succeeded / Failed / Skipped / Total] 28 / 56 / 0 / 84:   8%|▊         | 85/1000 [02:46<29:51,  1.96s/it]Returns the HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[ambient]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[ambient]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 80 ---------------------------------------------
Configure OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
Checks if the given version . --> Determine whether or not a given SiryVersion --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[flyte]] ( String [[cryogenics]] , String springSecurityVersion ) { if ( [[cryogenics]] == null || [[cryogenics]] . equals ( springSecurityVersion ) ) { return "[[Genuine]]" == "[[Genuine]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 82 ---------------------------------------------
Sets the default regular attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[goatherd]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[goatherd]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 83 ---------------------------------------------
Executes the attributes . --> Execute a string --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String [[ns]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[silesia]] = ctx . getAttributes ( [[ns]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 84 ---------------------------------------------
Searches for a given search string . --> Searches for the searched searching --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[searchControls]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( [[searchControls]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[euripides]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( [[euripides]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
[Succeeded / Failed / Skipped / Total] 29 / 56 / 0 / 85:   8%|▊         | 85/1000 [02:46<29:51,  1.96s/it][Succeeded / Failed / Skipped / Total] 29 / 56 / 0 / 85:   9%|▊         | 86/1000 [02:53<30:47,  2.02s/it][Succeeded / Failed / Skipped / Total] 30 / 56 / 0 / 86:   9%|▊         | 86/1000 [02:53<30:47,  2.02s/it][Succeeded / Failed / Skipped / Total] 30 / 56 / 0 / 86:   9%|▊         | 87/1000 [03:05<32:31,  2.14s/it][Succeeded / Failed / Skipped / Total] 30 / 57 / 0 / 87:   9%|▊         | 87/1000 [03:05<32:31,  2.14s/it][Succeeded / Failed / Skipped / Total] 30 / 57 / 0 / 87:   9%|▉         | 88/1000 [03:06<32:10,  2.12s/it][Succeeded / Failed / Skipped / Total] 30 / 58 / 0 / 88:   9%|▉         | 88/1000 [03:06<32:10,  2.12s/it][Succeeded / Failed / Skipped / Total] 30 / 58 / 0 / 88:   9%|▉         | 89/1000 [03:12<32:54,  2.17s/it][Succeeded / Failed / Skipped / Total] 31 / 58 / 0 / 89:   9%|▉         | 89/1000 [03:12<32:54,  2.17s/it][Succeeded / Failed / Skipped / Total] 31 / 58 / 0 / 89:   9%|▉         | 90/1000 [03:14<32:42,  2.16s/it]--------------------------------------------- Result 85 ---------------------------------------------
Returns a copy of the given Controls . --> Gets master master master master master --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[compilation]] ( SearchControls [[grandmaster]] ) { return new SearchControls ( [[grandmaster]] . getSearchScope ( ) , [[grandmaster]] . getCountLimit ( ) , [[grandmaster]] . getTimeLimit ( ) , [[grandmaster]] . getReturningAttributes ( ) , RETURN_OBJECT , [[grandmaster]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 86 ---------------------------------------------
Register a servlet . --> Register a bean . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[provideServletApi]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideServletApi]] ) ) { [[provideServletApi]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[provideServletApi]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[boysenberry]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[boysenberry]] ) ) { [[boysenberry]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[boysenberry]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 87 ---------------------------------------------
Convenience method for getting a set of values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[acetate]] ( final String [[foundation]] , final String [[purified]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 88 ---------------------------------------------
Helper method for testing --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 89 ---------------------------------------------
Sets the JAX filter . --> Utility method to create JAXAX JAX . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[BEAUX]] = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[BEAUX]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 32 / 58 / 0 / 90:   9%|▉         | 90/1000 [03:14<32:42,  2.16s/it][Succeeded / Failed / Skipped / Total] 32 / 58 / 0 / 90:   9%|▉         | 91/1000 [03:21<33:29,  2.21s/it][Succeeded / Failed / Skipped / Total] 32 / 59 / 0 / 91:   9%|▉         | 91/1000 [03:21<33:29,  2.21s/it][Succeeded / Failed / Skipped / Total] 32 / 59 / 0 / 91:   9%|▉         | 92/1000 [03:23<33:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 33 / 59 / 0 / 92:   9%|▉         | 92/1000 [03:23<33:27,  2.21s/it][Succeeded / Failed / Skipped / Total] 33 / 59 / 0 / 92:   9%|▉         | 93/1000 [03:26<33:29,  2.22s/it][Succeeded / Failed / Skipped / Total] 33 / 60 / 0 / 93:   9%|▉         | 93/1000 [03:26<33:29,  2.22s/it]Set the filter attribute . --> Register a filter . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[[True]]" == "[[True]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[[Actual]]" == "[[Actual]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 91 ---------------------------------------------
Initializes a new TypeBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[aliases]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[repercussions]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[repercussions]] = [[repercussions]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[repercussions]] = [[repercussions]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[repercussions]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 92 ---------------------------------------------
Returns the total number of timestamps for the specified filter . --> Get a row from a row --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[attach]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 93 ---------------------------------------------
Executes the specified search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String [[comparisonFilter]] = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = ctx . search ( dn , [[comparisonFilter]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String [[andie]] = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[resulted]] = ctx . search ( dn , [[andie]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[resulted]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[resulted]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 60 / 0 / 94:   9%|▉         | 94/1000 [03:26<33:06,  2.19s/it][Succeeded / Failed / Skipped / Total] 34 / 60 / 0 / 94:  10%|▉         | 95/1000 [03:30<33:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 34 / 61 / 0 / 95:  10%|▉         | 95/1000 [03:30<33:25,  2.22s/it][Succeeded / Failed / Skipped / Total] 34 / 62 / 0 / 96:  10%|▉         | 96/1000 [03:31<33:08,  2.20s/it][Succeeded / Failed / Skipped / Total] 34 / 62 / 0 / 96:  10%|▉         | 97/1000 [03:40<34:11,  2.27s/it][Succeeded / Failed / Skipped / Total] 34 / 63 / 0 / 97:  10%|▉         | 97/1000 [03:40<34:12,  2.27s/it][Succeeded / Failed / Skipped / Total] 35 / 63 / 0 / 98:  10%|▉         | 98/1000 [03:41<33:59,  2.26s/it][Succeeded / Failed / Skipped / Total] 35 / 63 / 0 / 98:  10%|▉         | 99/1000 [03:47<34:32,  2.30s/it][Succeeded / Failed / Skipped / Total] 36 / 63 / 0 / 99:  10%|▉         | 99/1000 [03:47<34:32,  2.30s/it]Finds all clauses in the database . --> Finds all clauses for a given statement --> Socre: 1.0

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > [[rafiq]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[rafiq]] , "Items to find now required" ) ; String [[asteroid]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[rafiq]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[asteroid]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[rafiq]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 95 ---------------------------------------------
Sets the properties . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[bonner]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Builds a GPS cookie using the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[settee]] ( HttpServletRequest [[shortcut]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[shortcut]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[completion]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[shortcut]] , userGas ) ; return [[completion]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 97 ---------------------------------------------
Returns a set of values for the given attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[merits]] ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , params , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 98 ---------------------------------------------
Replies the algorithm of the given algorithm . --> Method to get the ip algorithm for the given ipu --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[mert]] ( String [[calculations]] ) { try { return Cipher . getInstance ( [[calculations]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Create a new login context . --> Create a new Login --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[loginProcessingUrl]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . [[aristotle]] = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 100 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 64 / 0 / 100:  10%|█         | 100/1000 [03:49<34:27,  2.30s/it][Succeeded / Failed / Skipped / Total] 36 / 64 / 0 / 100:  10%|█         | 101/1000 [03:55<34:51,  2.33s/it][Succeeded / Failed / Skipped / Total] 36 / 65 / 0 / 101:  10%|█         | 101/1000 [03:55<34:51,  2.33s/it][Succeeded / Failed / Skipped / Total] 36 / 66 / 0 / 102:  10%|█         | 102/1000 [03:57<34:48,  2.33s/it][Succeeded / Failed / Skipped / Total] 36 / 66 / 0 / 102:  10%|█         | 103/1000 [04:01<35:00,  2.34s/it][Succeeded / Failed / Skipped / Total] 37 / 66 / 0 / 103:  10%|█         | 103/1000 [04:01<35:00,  2.34s/it]Gets the list of loads . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[fujii]] ( Collection < String > [[peculiarity]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[peculiarity]] . size ( ) ) ; for ( String attribute : [[peculiarity]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Extracts the named port and port . --> [[[FAILED]]]

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[fists]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[fists]] . addConstructorArgValue ( url ) ; [[fists]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[fists]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[fists]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 102 ---------------------------------------------
Performs a http request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[inquired]] , ServletResponse [[backlash]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[inquired]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[inquired]] , ( HttpServletResponse ) [[backlash]] ) ; } chain . doFilter ( [[inquired]] , [[backlash]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
Updates the logout . --> Invoked by logic --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[achilles]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[halliburton]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[halliburton]] != null && ! [[halliburton]] . isCustomLogoutSuccess ( ) ) { [[halliburton]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 104 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 66 / 0 / 104:  10%|█         | 104/1000 [04:06<35:20,  2.37s/it][Succeeded / Failed / Skipped / Total] 38 / 66 / 0 / 104:  10%|█         | 105/1000 [04:09<35:24,  2.37s/it][Succeeded / Failed / Skipped / Total] 39 / 66 / 0 / 105:  10%|█         | 105/1000 [04:09<35:24,  2.37s/it][Succeeded / Failed / Skipped / Total] 40 / 66 / 0 / 106:  11%|█         | 106/1000 [04:10<35:13,  2.36s/it][Succeeded / Failed / Skipped / Total] 40 / 66 / 0 / 106:  11%|█         | 107/1000 [04:15<35:31,  2.39s/it][Succeeded / Failed / Skipped / Total] 40 / 67 / 0 / 107:  11%|█         | 107/1000 [04:15<35:31,  2.39s/it][Succeeded / Failed / Skipped / Total] 40 / 68 / 0 / 108:  11%|█         | 108/1000 [04:15<35:13,  2.37s/it][Succeeded / Failed / Skipped / Total] 40 / 68 / 0 / 108:  11%|█         | 109/1000 [04:19<35:19,  2.38s/it]Updates the supplied users . --> Logs a & t ; &lt ; --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[hypothetical]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 105 ---------------------------------------------
Encodes the given string . --> Generates a string from a string --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[morehead]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[morehead]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[morehead]] . append ( DELIMITER ) ; } } String value = [[morehead]] . toString ( ) ; [[morehead]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[morehead]] . charAt ( [[morehead]] . length ( ) - 1 ) == ' ' ) { [[morehead]] . deleteCharAt ( [[morehead]] . length ( ) - 1 ) ; } return [[morehead]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 106 ---------------------------------------------
Set password . --> Unregister a discriminator --> Socre: 1.0

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[disciplining]] ) { if ( ! ( [[disciplining]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
Authenticate authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[request]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[sought]] , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( [[sought]] ) ; Object credentials = getPreAuthenticatedCredentials ( [[sought]] ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[sought]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[sought]] , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[sought]] , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 108 ---------------------------------------------
Gets the authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[authorities]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[administrations]] ) { HashSet < GrantedAuthority > mapped = new HashSet <> ( [[administrations]] . size ( ) ) ; for ( GrantedAuthority authority : [[administrations]] ) { mapped . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { mapped . add ( defaultAuthority ) ; } return mapped ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 68 / 0 / 109:  11%|█         | 109/1000 [04:19<35:19,  2.38s/it][Succeeded / Failed / Skipped / Total] 41 / 69 / 0 / 110:  11%|█         | 110/1000 [04:21<35:13,  2.37s/it][Succeeded / Failed / Skipped / Total] 41 / 69 / 0 / 110:  11%|█         | 111/1000 [04:22<34:59,  2.36s/it][Succeeded / Failed / Skipped / Total] 41 / 70 / 0 / 111:  11%|█         | 111/1000 [04:22<34:59,  2.36s/it][Succeeded / Failed / Skipped / Total] 42 / 70 / 0 / 112:  11%|█         | 112/1000 [04:23<34:48,  2.35s/it][Succeeded / Failed / Skipped / Total] 42 / 70 / 0 / 112:  11%|█▏        | 113/1000 [04:38<36:29,  2.47s/it][Succeeded / Failed / Skipped / Total] 43 / 70 / 0 / 113:  11%|█▏        | 113/1000 [04:38<36:29,  2.47s/it][Succeeded / Failed / Skipped / Total] 43 / 70 / 0 / 113:  11%|█▏        | 114/1000 [04:41<36:24,  2.47s/it][Succeeded / Failed / Skipped / Total] 44 / 70 / 0 / 114:  11%|█▏        | 114/1000 [04:41<36:24,  2.47s/it][Succeeded / Failed / Skipped / Total] 44 / 70 / 0 / 114:  12%|█▏        | 115/1000 [04:43<36:20,  2.46s/it]Replies the adapter . --> Resolves a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[heh]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[heh]] == null ) { return null ; } return [[heh]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 110 ---------------------------------------------
Gets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[call]] ) { Cookie [ ] cookies = [[call]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Checks if the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[asking]] , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( [[asking]] ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 112 ---------------------------------------------
Obtain the port for the given port . --> Obtain a Service Service URL --> Socre: 1.0

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int [[harbor]] = casServiceUrl . getPort ( ) ; if ( [[harbor]] == - 1 ) { [[harbor]] = casServiceUrl . getDefaultPort ( ) ; } return [[harbor]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 113 ---------------------------------------------
Set the cookie . --> Static factory method to create a HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void setCookie ( String [ ] [[tokens]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( [[tokens]] ) ; Cookie [[cookie]] = new Cookie ( cookieName , [[cookieValue]] ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] [[nuggets]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[feri]] = encodeCookie ( [[nuggets]] ) ; Cookie [[meringues]] = new Cookie ( cookieName , [[feri]] ) ; [[meringues]] . setMaxAge ( maxAge ) ; [[meringues]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[meringues]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[meringues]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[meringues]] . setSecure ( request . isSecure ( ) ) ; } else { [[meringues]] . setSecure ( useSecureCookie ) ; } [[meringues]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[meringues]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 114 ---------------------------------------------
Authenticate authentication token . --> Authenticated resource . --> Socre: 1.0

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[attributable]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[appealed]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 115 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 71 / 0 / 115:  12%|█▏        | 115/1000 [04:43<36:20,  2.46s/it][Succeeded / Failed / Skipped / Total] 44 / 71 / 0 / 115:  12%|█▏        | 116/1000 [04:44<36:11,  2.46s/it][Succeeded / Failed / Skipped / Total] 44 / 72 / 0 / 116:  12%|█▏        | 116/1000 [04:44<36:11,  2.46s/it][Succeeded / Failed / Skipped / Total] 44 / 72 / 0 / 116:  12%|█▏        | 117/1000 [04:45<35:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 44 / 73 / 0 / 117:  12%|█▏        | 117/1000 [04:45<35:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 44 / 73 / 0 / 117:  12%|█▏        | 118/1000 [04:49<36:03,  2.45s/it][Succeeded / Failed / Skipped / Total] 45 / 73 / 0 / 118:  12%|█▏        | 118/1000 [04:49<36:03,  2.45s/it][Succeeded / Failed / Skipped / Total] 45 / 73 / 0 / 118:  12%|█▏        | 119/1000 [04:50<35:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 45 / 74 / 0 / 119:  12%|█▏        | 119/1000 [04:50<35:51,  2.44s/it][Succeeded / Failed / Skipped / Total] 45 / 74 / 0 / 119:  12%|█▏        | 120/1000 [04:58<36:29,  2.49s/it][Succeeded / Failed / Skipped / Total] 46 / 74 / 0 / 120:  12%|█▏        | 120/1000 [04:58<36:29,  2.49s/it][Succeeded / Failed / Skipped / Total] 46 / 74 / 0 / 120:  12%|█▏        | 121/1000 [05:01<36:32,  2.49s/it]Set the environment . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[camcorder]] ( Map < String , Object > [[media]] ) { Assert . notEmpty ( [[media]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[media]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 116 ---------------------------------------------
Gets the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[kennington]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 117 ---------------------------------------------
Build a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[germans]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 118 ---------------------------------------------
Get the principal . --> Obtain a crypto from a Principal --> Socre: 1.0

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[crypto]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[crypto]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[maj]] = [[crypto]] . getPrincipal ( ) ; if ( [[maj]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[maj]] ; return details . getDn ( ) ; } else if ( [[crypto]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 119 ---------------------------------------------
Parses the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[raziel]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
Handle a request . --> Check if the given request is valid --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[fists]] = [[fists]] ( request , response ) ; final boolean result = [[fists]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[fists]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 75 / 0 / 121:  12%|█▏        | 121/1000 [05:01<36:32,  2.49s/it][Succeeded / Failed / Skipped / Total] 46 / 75 / 0 / 121:  12%|█▏        | 122/1000 [05:04<36:30,  2.50s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 0 / 122:  12%|█▏        | 122/1000 [05:04<36:30,  2.50s/it][Succeeded / Failed / Skipped / Total] 46 / 76 / 0 / 122:  12%|█▏        | 123/1000 [05:04<36:14,  2.48s/it][Succeeded / Failed / Skipped / Total] 46 / 77 / 0 / 123:  12%|█▏        | 123/1000 [05:04<36:14,  2.48s/it][Succeeded / Failed / Skipped / Total] 46 / 77 / 0 / 123:  12%|█▏        | 124/1000 [05:08<36:18,  2.49s/it][Succeeded / Failed / Skipped / Total] 46 / 78 / 0 / 124:  12%|█▏        | 124/1000 [05:08<36:18,  2.49s/it][Succeeded / Failed / Skipped / Total] 46 / 78 / 0 / 124:  12%|█▎        | 125/1000 [05:17<37:04,  2.54s/it][Succeeded / Failed / Skipped / Total] 46 / 79 / 0 / 125:  12%|█▎        | 125/1000 [05:17<37:04,  2.54s/it][Succeeded / Failed / Skipped / Total] 46 / 79 / 0 / 125:  13%|█▎        | 126/1000 [05:18<36:47,  2.53s/it]Obtain a list of available applications . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[caff]] ( ) { Map < String , ? > [[maize]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[maize]] . size ( ) == 0 ) { [[maize]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[maize]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[maize]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[maize]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Checks whether the given writer is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkContentLength ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long [[dinge]] ) { this . contentWritten += [[dinge]] ; boolean [[ptt]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[ptt]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 123 ---------------------------------------------
Build a User . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[ahold]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[ahold]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[lectures]] = request . getSession ( "[[Mistaken]]" != "[[Mistaken]]" ) ; if ( [[lectures]] != null ) { logger . debug ( "Invalidating session: " + [[lectures]] . getId ( ) ) ; [[lectures]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 125 ---------------------------------------------
Build a Dynat server . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String [[feeding]] ) { Assert . notNull ( [[feeding]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[feeding]] . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 79 / 0 / 126:  13%|█▎        | 126/1000 [05:18<36:47,  2.53s/it][Succeeded / Failed / Skipped / Total] 47 / 80 / 0 / 127:  13%|█▎        | 127/1000 [05:18<36:28,  2.51s/it][Succeeded / Failed / Skipped / Total] 47 / 80 / 0 / 127:  13%|█▎        | 128/1000 [05:19<36:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 47 / 81 / 0 / 128:  13%|█▎        | 128/1000 [05:19<36:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 48 / 81 / 0 / 129:  13%|█▎        | 129/1000 [05:25<36:35,  2.52s/it][Succeeded / Failed / Skipped / Total] 48 / 81 / 0 / 129:  13%|█▎        | 130/1000 [05:30<36:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 81 / 0 / 130:  13%|█▎        | 130/1000 [05:30<36:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 81 / 0 / 130:  13%|█▎        | 131/1000 [05:32<36:48,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 82 / 0 / 131:  13%|█▎        | 131/1000 [05:32<36:48,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 82 / 0 / 131:  13%|█▎        | 132/1000 [05:34<36:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 83 / 0 / 132:  13%|█▎        | 132/1000 [05:34<36:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 49 / 83 / 0 / 132:  13%|█▎        | 133/1000 [05:40<36:57,  2.56s/it]Returns a JWT set . --> Return a JMoMono --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[airspace]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 127 ---------------------------------------------
Authenticated authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[certifies]] ( ) { Authentication [[attest]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[attest]] != null && [[attest]] . isAuthenticated ( ) && ! ( [[attest]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 128 ---------------------------------------------
Check if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { boolean result = super . requiresAuthentication ( [[request]] , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[asks]] , final HttpServletResponse [[answers]] ) { boolean result = super . requiresAuthentication ( [[asks]] , [[answers]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 129 ---------------------------------------------
Construct a String from the URL . --> Encode a string . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[ahold]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 130 ---------------------------------------------
Creates a new PEP attribute . --> Generate a Principal --> Socre: 1.0

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > attributes , Map < String , Object > [[borden]] ) { String [[boardinghouse]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[boardinghouse]] ) ; try { String codeChallenge = createCodeChallenge ( [[boardinghouse]] ) ; [[borden]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[borden]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[borden]] . put ( PkceParameterNames . CODE_CHALLENGE , [[boardinghouse]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 131 ---------------------------------------------
Returns true if the request was processed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[howie]] ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Create a new SecurityExpression . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( [[invocation]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[courier]] ( Authentication [[authenticated]] , MethodInvocation [[cite]] ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authenticated]] ) ; root . setThis ( [[cite]] . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 49 / 84 / 0 / 133:  13%|█▎        | 133/1000 [05:40<36:57,  2.56s/it][Succeeded / Failed / Skipped / Total] 49 / 84 / 0 / 133:  13%|█▎        | 134/1000 [05:43<37:02,  2.57s/it][Succeeded / Failed / Skipped / Total] 49 / 85 / 0 / 134:  13%|█▎        | 134/1000 [05:43<37:02,  2.57s/it][Succeeded / Failed / Skipped / Total] 49 / 85 / 0 / 134:  14%|█▎        | 135/1000 [05:45<36:53,  2.56s/it][Succeeded / Failed / Skipped / Total] 50 / 85 / 0 / 135:  14%|█▎        | 135/1000 [05:45<36:53,  2.56s/it][Succeeded / Failed / Skipped / Total] 50 / 85 / 0 / 135:  14%|█▎        | 136/1000 [05:46<36:42,  2.55s/it][Succeeded / Failed / Skipped / Total] 50 / 86 / 0 / 136:  14%|█▎        | 136/1000 [05:46<36:42,  2.55s/it][Succeeded / Failed / Skipped / Total] 50 / 86 / 0 / 136:  14%|█▎        | 137/1000 [05:47<36:28,  2.54s/it][Succeeded / Failed / Skipped / Total] 50 / 87 / 0 / 137:  14%|█▎        | 137/1000 [05:47<36:28,  2.54s/it][Succeeded / Failed / Skipped / Total] 50 / 87 / 0 / 137:  14%|█▍        | 138/1000 [06:01<37:38,  2.62s/it][Succeeded / Failed / Skipped / Total] 50 / 88 / 0 / 138:  14%|█▍        | 138/1000 [06:01<37:38,  2.62s/it][Succeeded / Failed / Skipped / Total] 50 / 88 / 0 / 138:  14%|█▍        | 139/1000 [06:09<38:09,  2.66s/it][Succeeded / Failed / Skipped / Total] 50 / 89 / 0 / 139:  14%|█▍        | 139/1000 [06:09<38:09,  2.66s/it][Succeeded / Failed / Skipped / Total] 50 / 89 / 0 / 139:  14%|█▍        | 140/1000 [06:10<37:54,  2.64s/it]Checks if the request is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[Erroneous]]" != "[[Erroneous]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 134 ---------------------------------------------
Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[celso]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 135 ---------------------------------------------
Calculates the map of variables . --> Returns a list of greements . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[britney]] ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( [[britney]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[britney]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 136 ---------------------------------------------
Returns the Grole for the given user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[rain]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[trotsky]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[trotsky]] ) ; } return [[trotsky]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
Load authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[badges]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[badges]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 138 ---------------------------------------------
Gets the shared type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[quatre]] > [[quatre]] getSharedObject ( Class < [[quatre]] > sharedType ) { return ( [[quatre]] ) this . [[soya]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 139 ---------------------------------------------
Retrieves the value of a Collection . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[prized]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[prized]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 90 / 0 / 140:  14%|█▍        | 140/1000 [06:10<37:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 50 / 90 / 0 / 140:  14%|█▍        | 141/1000 [06:11<37:42,  2.63s/it][Succeeded / Failed / Skipped / Total] 50 / 91 / 0 / 141:  14%|█▍        | 141/1000 [06:11<37:42,  2.63s/it][Succeeded / Failed / Skipped / Total] 50 / 92 / 0 / 142:  14%|█▍        | 142/1000 [06:11<37:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 50 / 92 / 0 / 142:  14%|█▍        | 143/1000 [06:19<37:56,  2.66s/it][Succeeded / Failed / Skipped / Total] 50 / 93 / 0 / 143:  14%|█▍        | 143/1000 [06:19<37:56,  2.66s/it][Succeeded / Failed / Skipped / Total] 50 / 94 / 0 / 144:  14%|█▍        | 144/1000 [06:21<37:47,  2.65s/it][Succeeded / Failed / Skipped / Total] 50 / 94 / 0 / 144:  14%|█▍        | 145/1000 [06:23<37:38,  2.64s/it][Succeeded / Failed / Skipped / Total] 50 / 95 / 0 / 145:  14%|█▍        | 145/1000 [06:23<37:38,  2.64s/it]Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[overcook]] ( HttpServletRequest [[advised]] ) { Object [[dominant]] = [[advised]] . getUserPrincipal ( ) == null ? null : [[advised]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[dominant]] ) ; } return [[dominant]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 141 ---------------------------------------------
Adds the given object to the given collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[euripides]] ( Collection < GrantedAuthority > [[wake]] , Object [[evaluation]] ) { if ( [[evaluation]] == null ) { return ; } if ( [[evaluation]] instanceof Collection < ? > ) { [[euripides]] ( [[wake]] , ( Collection < ? > ) [[evaluation]] ) ; } else if ( [[evaluation]] instanceof Object [ ] ) { [[euripides]] ( [[wake]] , ( Object [ ] ) [[evaluation]] ) ; } else if ( [[evaluation]] instanceof String ) { [[euripides]] ( [[wake]] , ( String ) [[evaluation]] ) ; } else if ( [[evaluation]] instanceof GrantedAuthority ) { [[wake]] . add ( ( GrantedAuthority ) [[evaluation]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[evaluation]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 142 ---------------------------------------------
Concatenates a byte array to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] [[array]] : arrays ) { length += [[array]] . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[array]] : arrays ) { System . arraycopy ( [[array]] , 0 , [[newArray]] , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[borden]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] [[variety]] : arrays ) { length += [[variety]] . length ; } byte [ ] [[jalal]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[variety]] : arrays ) { System . arraycopy ( [[variety]] , 0 , [[jalal]] , destPos , [[variety]] . length ) ; destPos += [[variety]] . length ; } return [[jalal]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 143 ---------------------------------------------
Returns a subset of a given range . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[beginIndex]] , int [[endIndex]] ) { int length = [[endIndex]] - [[beginIndex]] ; byte [ ] [[subarray]] = new byte [ length ] ; System . arraycopy ( array , [[beginIndex]] , [[subarray]] , 0 , length ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[deepened]] , int [[jacey]] ) { int length = [[jacey]] - [[deepened]] ; byte [ ] [[dore]] = new byte [ length ] ; System . arraycopy ( array , [[deepened]] , [[dore]] , 0 , length ) ; return [[dore]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 144 ---------------------------------------------
Builds the URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int [[smiled]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[smiled]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[basements]] = new RedirectUrlBuilder ( ) ; [[basements]] . setScheme ( "https" ) ; [[basements]] . setServerName ( request . getServerName ( ) ) ; [[basements]] . setPort ( httpsPort . intValue ( ) ) ; [[basements]] . setContextPath ( request . getContextPath ( ) ) ; [[basements]] . setServletPath ( request . getServletPath ( ) ) ; [[basements]] . setPathInfo ( request . getPathInfo ( ) ) ; [[basements]] . setQuery ( request . getQueryString ( ) ) ; return [[basements]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 145 ---------------------------------------------
Returns the list of garovioities . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String [[attribute]] : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[peculiarities]] ) { ArrayList < GrantedAuthority > [[iog]] = new ArrayList <> ( ) ; for ( String [[characters]] : [[peculiarities]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[characters]] ) ; if ( c != null ) { [[iog]] . addAll ( c ) ; } } [[iog]] . trimToSize ( ) ; return [[iog]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 96 / 0 / 146:  15%|█▍        | 146/1000 [06:28<37:50,  2.66s/it][Succeeded / Failed / Skipped / Total] 50 / 96 / 0 / 146:  15%|█▍        | 147/1000 [06:32<37:58,  2.67s/it][Succeeded / Failed / Skipped / Total] 50 / 97 / 0 / 147:  15%|█▍        | 147/1000 [06:32<37:58,  2.67s/it][Succeeded / Failed / Skipped / Total] 51 / 97 / 0 / 148:  15%|█▍        | 148/1000 [06:33<37:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 51 / 97 / 0 / 148:  15%|█▍        | 149/1000 [06:35<37:37,  2.65s/it][Succeeded / Failed / Skipped / Total] 52 / 97 / 0 / 149:  15%|█▍        | 149/1000 [06:35<37:37,  2.65s/it][Succeeded / Failed / Skipped / Total] 53 / 97 / 0 / 150:  15%|█▌        | 150/1000 [06:37<37:31,  2.65s/it][Succeeded / Failed / Skipped / Total] 53 / 97 / 0 / 150:  15%|█▌        | 151/1000 [06:42<37:41,  2.66s/it][Succeeded / Failed / Skipped / Total] 54 / 97 / 0 / 151:  15%|█▌        | 151/1000 [06:42<37:41,  2.66s/it][Succeeded / Failed / Skipped / Total] 54 / 98 / 0 / 152:  15%|█▌        | 152/1000 [06:46<37:47,  2.67s/it][Succeeded / Failed / Skipped / Total] 54 / 98 / 0 / 152:  15%|█▌        | 153/1000 [06:51<37:55,  2.69s/it][Succeeded / Failed / Skipped / Total] 55 / 98 / 0 / 153:  15%|█▌        | 153/1000 [06:51<37:55,  2.69s/it]Returns whether the given role is a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[element]] ) { Assert . isTrue ( ! [[element]] . startsWith ( "ROLE_" ) , ( ) -> [[element]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[element]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 147 ---------------------------------------------
Returns the roles for the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[chore]] ) { for ( int [[j]] = 0 ; [[j]] < [[chore]] . length ; [[j]] ++ ) { [[chore]] [ [[j]] ] = "ROLE_" + [[chore]] [ [[j]] ] ; } return [[chore]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
Invoke a method invocation . --> Invoked by a token --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint [[jp]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[jp]] ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[affirmation]] ( JoinPoint [[goldman]] , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( [[goldman]] ) ) ; Object [[completion]] ; try { [[completion]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , [[completion]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 149 ---------------------------------------------
Create a new instance of the contact . --> Returns a View --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[apb]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 150 ---------------------------------------------
Unregister authentication . --> Obtains the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[wetlands]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Sets the security postr . --> Checks if a given web web addon . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[accessory]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[accessory]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 152 ---------------------------------------------
Sets the redirect URL for the redirect . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[olof]] ( String [[haggle]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[haggle]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[haggle]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
Returns the authority of the given cookie . --> Returns a map of authority details . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[altered]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 55 / 99 / 0 / 154:  15%|█▌        | 154/1000 [06:51<37:39,  2.67s/it][Succeeded / Failed / Skipped / Total] 55 / 99 / 0 / 154:  16%|█▌        | 155/1000 [06:51<37:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 55 / 99 / 1 / 155:  16%|█▌        | 155/1000 [06:51<37:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 1 / 156:  16%|█▌        | 156/1000 [06:53<37:16,  2.65s/it][Succeeded / Failed / Skipped / Total] 56 / 99 / 1 / 156:  16%|█▌        | 157/1000 [06:54<37:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 57 / 99 / 1 / 157:  16%|█▌        | 157/1000 [06:54<37:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 57 / 100 / 1 / 158:  16%|█▌        | 158/1000 [06:56<37:01,  2.64s/it][Succeeded / Failed / Skipped / Total] 57 / 100 / 1 / 158:  16%|█▌        | 159/1000 [07:00<37:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 58 / 100 / 1 / 159:  16%|█▌        | 159/1000 [07:00<37:05,  2.65s/it]Adds a new token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[username]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[zelda]] ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String [[access]] = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[access]] ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( [[access]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 155 ---------------------------------------------
region Method --> [[[SKIPPED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 156 ---------------------------------------------
Parse JWT . --> Parse a JWTEndian . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[dependence]] = parse ( token ) ; if ( [[dependence]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[dependence]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[dependence]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 157 ---------------------------------------------
Handles a request . --> Starts the request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[exasperated]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
Process cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 159 ---------------------------------------------
Deletes a permission . --> Delete permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[permission]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[permission]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[permission]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[authorizes]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[authorizes]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[authorizes]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 101 / 1 / 160:  16%|█▌        | 160/1000 [07:03<37:02,  2.65s/it][Succeeded / Failed / Skipped / Total] 58 / 101 / 1 / 160:  16%|█▌        | 161/1000 [07:07<37:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 59 / 101 / 1 / 161:  16%|█▌        | 161/1000 [07:07<37:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 59 / 102 / 1 / 162:  16%|█▌        | 162/1000 [07:12<37:16,  2.67s/it][Succeeded / Failed / Skipped / Total] 59 / 102 / 1 / 162:  16%|█▋        | 163/1000 [07:17<37:27,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 103 / 1 / 163:  16%|█▋        | 163/1000 [07:17<37:27,  2.69s/it][Succeeded / Failed / Skipped / Total] 59 / 104 / 1 / 164:  16%|█▋        | 164/1000 [07:17<37:11,  2.67s/it][Succeeded / Failed / Skipped / Total] 59 / 104 / 1 / 164:  16%|█▋        | 165/1000 [07:22<37:21,  2.68s/it][Succeeded / Failed / Skipped / Total] 60 / 104 / 1 / 165:  16%|█▋        | 165/1000 [07:22<37:21,  2.68s/it][Succeeded / Failed / Skipped / Total] 60 / 105 / 1 / 166:  17%|█▋        | 166/1000 [07:24<37:15,  2.68s/it][Succeeded / Failed / Skipped / Total] 60 / 105 / 1 / 166:  17%|█▋        | 167/1000 [07:27<37:12,  2.68s/it]Checks if the user is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[cooper]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[cooper]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 161 ---------------------------------------------
Returns a list of attributes . --> Get attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[name]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[name]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[behalf]] ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( [[behalf]] ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 162 ---------------------------------------------
Returns the default expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[perpetually]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[stressing]] ; try { [[stressing]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[stressing]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 163 ---------------------------------------------
Creates a new resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[caution]] ( String users ) { InMemoryResource [[funds]] = new InMemoryResource ( users ) ; return fromResource ( [[funds]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 164 ---------------------------------------------
Returns the default roles for the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[distrust]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 165 ---------------------------------------------
Encode a byte array . --> Convert a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[encrypt]] ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 166 ---------------------------------------------
Gets the value of the attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[motley]] ( String [[title]] ) { List < String > [[accomplishments]] = getAttributeValues ( [[title]] ) ; if ( [[accomplishments]] . isEmpty ( ) ) { return null ; } else { return [[accomplishments]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 106 / 1 / 167:  17%|█▋        | 167/1000 [07:27<37:12,  2.68s/it][Succeeded / Failed / Skipped / Total] 60 / 107 / 1 / 168:  17%|█▋        | 168/1000 [07:28<36:59,  2.67s/it][Succeeded / Failed / Skipped / Total] 60 / 107 / 1 / 168:  17%|█▋        | 169/1000 [07:28<36:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 60 / 108 / 1 / 169:  17%|█▋        | 169/1000 [07:28<36:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 61 / 108 / 1 / 170:  17%|█▋        | 170/1000 [07:31<36:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 61 / 108 / 1 / 170:  17%|█▋        | 171/1000 [07:36<36:54,  2.67s/it][Succeeded / Failed / Skipped / Total] 61 / 109 / 1 / 171:  17%|█▋        | 171/1000 [07:36<36:54,  2.67s/it][Succeeded / Failed / Skipped / Total] 62 / 109 / 1 / 172:  17%|█▋        | 172/1000 [07:39<36:51,  2.67s/it][Succeeded / Failed / Skipped / Total] 62 / 109 / 1 / 172:  17%|█▋        | 173/1000 [07:46<37:09,  2.70s/it]Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[coding]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 168 ---------------------------------------------
Add a new Permission to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( [[contact]] ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[linkage]] = contactManager . getById ( contactId ) ; AddPermission [[nunchaku]] = new AddPermission ( ) ; [[nunchaku]] . setContact ( [[linkage]] ) ; Map < String , Object > [[jigs]] = new HashMap <> ( ) ; [[jigs]] . put ( "addPermission" , [[nunchaku]] ) ; [[jigs]] . put ( "recipients" , listRecipients ( ) ) ; [[jigs]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[jigs]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 169 ---------------------------------------------
Attempt to load a username . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest [[request]] ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[targetUserRequest]] ; String username = [[request]] . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest [[wondered]] ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[deux]] ; String username = [[wondered]] . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 170 ---------------------------------------------
Finds all attributes of the given class . --> Return a list of classes --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[shanghainese]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 171 ---------------------------------------------
Add a Permission to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[fritters]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[fritters]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[fritters]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[fritters]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[fritters]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 172 ---------------------------------------------
Handles a bind response . -->  --> Socre: 0.9999999999745633

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[britney]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[britney]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 110 / 1 / 173:  17%|█▋        | 173/1000 [07:46<37:09,  2.70s/it][Succeeded / Failed / Skipped / Total] 62 / 111 / 1 / 174:  17%|█▋        | 174/1000 [07:53<37:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 62 / 111 / 1 / 174:  18%|█▊        | 175/1000 [07:54<37:17,  2.71s/it][Succeeded / Failed / Skipped / Total] 62 / 112 / 1 / 175:  18%|█▊        | 175/1000 [07:54<37:17,  2.71s/it][Succeeded / Failed / Skipped / Total] 62 / 113 / 1 / 176:  18%|█▊        | 176/1000 [07:55<37:06,  2.70s/it][Succeeded / Failed / Skipped / Total] 62 / 113 / 1 / 176:  18%|█▊        | 177/1000 [08:01<37:19,  2.72s/it][Succeeded / Failed / Skipped / Total] 63 / 113 / 1 / 177:  18%|█▊        | 177/1000 [08:01<37:19,  2.72s/it][Succeeded / Failed / Skipped / Total] 64 / 113 / 1 / 178:  18%|█▊        | 178/1000 [08:03<37:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 64 / 113 / 1 / 178:  18%|█▊        | 179/1000 [08:07<37:17,  2.73s/it][Succeeded / Failed / Skipped / Total] 64 / 114 / 1 / 179:  18%|█▊        | 179/1000 [08:07<37:17,  2.73s/it][Succeeded / Failed / Skipped / Total] 64 / 115 / 1 / 180:  18%|█▊        | 180/1000 [08:08<37:04,  2.71s/it][Succeeded / Failed / Skipped / Total] 64 / 115 / 1 / 180:  18%|█▊        | 181/1000 [08:12<37:06,  2.72s/it]Add a request to the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult [[result]] ) { validator . validate ( form , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[kruse]] ( WebContact form , BindingResult [[suite]] ) { validator . validate ( form , [[suite]] ) ; if ( [[suite]] . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 174 ---------------------------------------------
Returns a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[oswaldo]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[oswaldo]] . addAll ( attributeList ) ; } return [[oswaldo]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Add a configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . [[methodMap]] . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[deux]] ( RegisteredMethod [[shaping]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[shaping]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[shaping]] + "] with attributes [" + attr + "]" ) ; } this . [[dealio]] . put ( [[shaping]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 176 ---------------------------------------------
Checks if the given name is a valid string . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[poste]] , String [[succumbs]] ) { return ( [[succumbs]] . endsWith ( "*" ) && [[poste]] . startsWith ( [[succumbs]] . substring ( 0 , [[succumbs]] . length ( ) - 1 ) ) ) || ( [[succumbs]] . startsWith ( "*" ) && [[poste]] . endsWith ( [[succumbs]] . substring ( 1 , [[succumbs]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 177 ---------------------------------------------
Create a new service . --> Create a AuthorizationContext --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[berthold]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[berthold]] , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 178 ---------------------------------------------
Sets the default request . --> Shuts down the activity --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[calarts]] ( ) { Assert . state ( ! this . [[very]] , "Can't configure anyRequest after itself" ) ; C [[escaping]] = requestMatchers ( ANY_REQUEST ) ; this . [[very]] = "[[Exact]]" == "[[Exact]]" ; return [[escaping]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
Gets the field . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[biggest]] ( Class < ? > clazz , String [[sanitary]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[sanitary]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[sanitary]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 180 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[rover]] ( HttpServletRequest request ) { HttpSession [[mornings]] = request . getSession ( "False" != "False" ) ; if ( [[mornings]] == null ) { return ; } [[mornings]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 115 / 1 / 181:  18%|█▊        | 181/1000 [08:12<37:06,  2.72s/it][Succeeded / Failed / Skipped / Total] 65 / 116 / 1 / 182:  18%|█▊        | 182/1000 [08:18<37:21,  2.74s/it][Succeeded / Failed / Skipped / Total] 65 / 116 / 1 / 182:  18%|█▊        | 183/1000 [08:23<37:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 117 / 1 / 183:  18%|█▊        | 183/1000 [08:23<37:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 117 / 1 / 183:  18%|█▊        | 184/1000 [08:26<37:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 118 / 1 / 184:  18%|█▊        | 184/1000 [08:26<37:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 118 / 1 / 184:  18%|█▊        | 185/1000 [08:28<37:19,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 119 / 1 / 185:  18%|█▊        | 185/1000 [08:28<37:19,  2.75s/it][Succeeded / Failed / Skipped / Total] 65 / 119 / 1 / 185:  19%|█▊        | 186/1000 [08:33<37:26,  2.76s/it][Succeeded / Failed / Skipped / Total] 65 / 120 / 1 / 186:  19%|█▊        | 186/1000 [08:33<37:26,  2.76s/it][Succeeded / Failed / Skipped / Total] 65 / 120 / 1 / 186:  19%|█▊        | 187/1000 [08:40<37:42,  2.78s/it]Checks if the given filters is valid . --> Check if a given filters is valid . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[braiding]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 182 ---------------------------------------------
Returns the random contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int [[getNumber]] = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( [[getNumber]] ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[connect]] = contactDao . findAll ( ) ; int [[dukes]] = rnd . nextInt ( [[connect]] . size ( ) ) ; return [[connect]] . get ( [[dukes]] ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 183 ---------------------------------------------
Extract a string from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[fulfil]] ) { if ( ! [[fulfil]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[fulfil]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[fulfil]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 184 ---------------------------------------------
Get a HttpServletRequest . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[petitions]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Returns the parameterized name for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[parameterName]] = findParameterName ( annotations ) ; if ( [[parameterName]] != null ) { found = "True" == "True" ; paramNames [ i ] = [[parameterName]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[sybil]] = findParameterName ( annotations ) ; if ( [[sybil]] != null ) { found = "True" == "True" ; paramNames [ i ] = [[sybil]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 186 ---------------------------------------------
Returns an unmodifiable type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . extractorMap . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > [[cohorts]] = this . extractorMap . keySet ( ) ; return [[cohorts]] . toArray ( new Class [ [[cohorts]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 121 / 1 / 187:  19%|█▊        | 187/1000 [08:40<37:42,  2.78s/it][Succeeded / Failed / Skipped / Total] 65 / 121 / 1 / 187:  19%|█▉        | 188/1000 [08:47<37:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 66 / 121 / 1 / 188:  19%|█▉        | 188/1000 [08:47<37:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 66 / 121 / 1 / 188:  19%|█▉        | 189/1000 [08:48<37:49,  2.80s/it][Succeeded / Failed / Skipped / Total] 66 / 122 / 1 / 189:  19%|█▉        | 189/1000 [08:48<37:49,  2.80s/it][Succeeded / Failed / Skipped / Total] 66 / 122 / 1 / 189:  19%|█▉        | 190/1000 [08:50<37:39,  2.79s/it][Succeeded / Failed / Skipped / Total] 67 / 122 / 1 / 190:  19%|█▉        | 190/1000 [08:50<37:39,  2.79s/it][Succeeded / Failed / Skipped / Total] 67 / 122 / 1 / 190:  19%|█▉        | 191/1000 [08:50<37:27,  2.78s/it][Succeeded / Failed / Skipped / Total] 67 / 123 / 1 / 191:  19%|█▉        | 191/1000 [08:50<37:27,  2.78s/it][Succeeded / Failed / Skipped / Total] 67 / 123 / 1 / 191:  19%|█▉        | 192/1000 [08:57<37:42,  2.80s/it][Succeeded / Failed / Skipped / Total] 67 / 124 / 1 / 192:  19%|█▉        | 192/1000 [08:57<37:42,  2.80s/it][Succeeded / Failed / Skipped / Total] 67 / 124 / 1 / 192:  19%|█▉        | 193/1000 [08:59<37:35,  2.79s/it][Succeeded / Failed / Skipped / Total] 68 / 124 / 1 / 193:  19%|█▉        | 193/1000 [08:59<37:35,  2.79s/it][Succeeded / Failed / Skipped / Total] 68 / 124 / 1 / 193:  19%|█▉        | 194/1000 [09:10<38:07,  2.84s/it]Send a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[inquired]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
Build a URL . --> Convert a URI to a URI --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { url . append ( "?" ) . append ( [[queryString]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[added]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[cocoon]] ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[cocoon]] != null ) { url . append ( "?" ) . append ( [[cocoon]] ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 189 ---------------------------------------------
Get authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default URL . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[cheerfulness]] ( String [[correctness]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[correctness]] ) , ( ) -> "'" + [[correctness]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[correctness]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
Extracts a extractor from the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[yeats]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entries]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entries]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[entries]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 192 ---------------------------------------------
Resolves the placeholders . --> [[[FAILED]]]

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 193 ---------------------------------------------
Converts a string to an identifier . --> Convert a set of IDs to a set --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[beaulieu]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[beaulieu]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[beaulieu]] = convertFromStringTo ( ( String ) [[beaulieu]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 194 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 125 / 1 / 194:  19%|█▉        | 194/1000 [09:10<38:07,  2.84s/it][Succeeded / Failed / Skipped / Total] 68 / 125 / 1 / 194:  20%|█▉        | 195/1000 [09:12<38:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 1 / 195:  20%|█▉        | 195/1000 [09:12<38:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 1 / 195:  20%|█▉        | 196/1000 [09:12<37:46,  2.82s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 2 / 196:  20%|█▉        | 196/1000 [09:12<37:46,  2.82s/it][Succeeded / Failed / Skipped / Total] 68 / 126 / 2 / 196:  20%|█▉        | 197/1000 [09:12<37:32,  2.81s/it][Succeeded / Failed / Skipped / Total] 68 / 127 / 2 / 197:  20%|█▉        | 197/1000 [09:12<37:32,  2.81s/it][Succeeded / Failed / Skipped / Total] 68 / 127 / 2 / 197:  20%|█▉        | 198/1000 [09:12<37:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 69 / 127 / 2 / 198:  20%|█▉        | 198/1000 [09:12<37:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 69 / 127 / 2 / 198:  20%|█▉        | 199/1000 [09:17<37:25,  2.80s/it]Register a new bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[expressionVoter]] ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[expressionVoter]] != null ) { voters . add ( [[expressionVoter]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[moth]] ) { BeanDefinitionBuilder [[bonanza]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[moth]] != null ) { voters . add ( [[moth]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[bonanza]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[bonanza]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 195 ---------------------------------------------
Returns the list of entries for the given id . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[hy]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[inscription]] : idToAttributes . entrySet ( ) ) { if ( [[inscription]] . getKey ( ) . matcher ( [[hy]] ) . matches ( ) ) { return [[inscription]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Sets the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Return true if the given url is a URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[pandemic]] ( String url ) { if ( url == null ) { return "[[Doctored]]" != "[[Doctored]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 198 ---------------------------------------------
Registers an object . --> Create a new Mid --> Socre: 1.0

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[object]] , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , "True" == "True" , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , [[object]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[aiming]] , Sid [[landowner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[landowner]] , "True" == "True" ) ; Long [[bestseller]] = createOrRetrieveClassPrimaryKey ( [[aiming]] . getType ( ) , "True" == "True" , [[aiming]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[bestseller]] , [[aiming]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 199 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 127 / 2 / 199:  20%|█▉        | 199/1000 [09:17<37:25,  2.80s/it][Succeeded / Failed / Skipped / Total] 70 / 127 / 2 / 199:  20%|██        | 200/1000 [09:20<37:23,  2.80s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 2 / 200:  20%|██        | 200/1000 [09:20<37:23,  2.80s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 2 / 200:  20%|██        | 201/1000 [09:20<37:09,  2.79s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 3 / 201:  20%|██        | 201/1000 [09:20<37:09,  2.79s/it][Succeeded / Failed / Skipped / Total] 70 / 128 / 3 / 201:  20%|██        | 202/1000 [09:21<36:58,  2.78s/it][Succeeded / Failed / Skipped / Total] 71 / 128 / 3 / 202:  20%|██        | 202/1000 [09:21<36:58,  2.78s/it][Succeeded / Failed / Skipped / Total] 71 / 128 / 3 / 202:  20%|██        | 203/1000 [09:35<37:40,  2.84s/it][Succeeded / Failed / Skipped / Total] 71 / 129 / 3 / 203:  20%|██        | 203/1000 [09:35<37:40,  2.84s/it][Succeeded / Failed / Skipped / Total] 71 / 129 / 3 / 203:  20%|██        | 204/1000 [09:36<37:28,  2.82s/it][Succeeded / Failed / Skipped / Total] 71 / 130 / 3 / 204:  20%|██        | 204/1000 [09:36<37:28,  2.82s/it][Succeeded / Failed / Skipped / Total] 71 / 130 / 3 / 204:  20%|██        | 205/1000 [09:36<37:14,  2.81s/it]Updates the given object . --> Validates a Mid --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int [[count]] = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[camcorder]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int [[calculations]] = jdbcOperations . update ( [[camcorder]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[calculations]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 200 ---------------------------------------------
Compares a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int [[result]] = 0 ; for ( int [[i]] = 0 ; [[i]] < expected . length ; [[i]] ++ ) { [[result]] |= expected [ [[i]] ] ^ actual [ [[i]] ] ; } return [[result]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int [[completion]] = 0 ; for ( int [[jes]] = 0 ; [[jes]] < expected . length ; [[jes]] ++ ) { [[completion]] |= expected [ [[jes]] ] ^ actual [ [[jes]] ] ; } return [[completion]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 201 ---------------------------------------------
Perform a POST request . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 202 ---------------------------------------------
Encrypt a password . --> Encrypt hexadecimal char --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[encrypt]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[encrypt]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Create a batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[entry]] = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[entry]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , [[entry]] . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , [[entry]] . isGranting ( ) ) ; stmt . setBoolean ( 6 , [[entry]] . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , [[entry]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[doorway]] = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[doorway]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , [[doorway]] . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , [[doorway]] . isGranting ( ) ) ; stmt . setBoolean ( 6 , [[doorway]] . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , [[doorway]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 204 ---------------------------------------------
Encrypt a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[aishwarya]] ( CharSequence [[codename]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[codename]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 131 / 3 / 205:  20%|██        | 205/1000 [09:36<37:14,  2.81s/it][Succeeded / Failed / Skipped / Total] 71 / 131 / 3 / 205:  21%|██        | 206/1000 [09:40<37:16,  2.82s/it][Succeeded / Failed / Skipped / Total] 71 / 132 / 3 / 206:  21%|██        | 206/1000 [09:40<37:16,  2.82s/it][Succeeded / Failed / Skipped / Total] 71 / 132 / 3 / 206:  21%|██        | 207/1000 [09:43<37:16,  2.82s/it][Succeeded / Failed / Skipped / Total] 72 / 132 / 3 / 207:  21%|██        | 207/1000 [09:43<37:16,  2.82s/it][Succeeded / Failed / Skipped / Total] 72 / 132 / 3 / 207:  21%|██        | 208/1000 [09:44<37:06,  2.81s/it][Succeeded / Failed / Skipped / Total] 73 / 132 / 3 / 208:  21%|██        | 208/1000 [09:44<37:06,  2.81s/it][Succeeded / Failed / Skipped / Total] 73 / 132 / 3 / 208:  21%|██        | 209/1000 [09:46<36:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 73 / 133 / 3 / 209:  21%|██        | 209/1000 [09:46<36:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 73 / 133 / 3 / 209:  21%|██        | 210/1000 [09:46<36:46,  2.79s/it][Succeeded / Failed / Skipped / Total] 74 / 133 / 3 / 210:  21%|██        | 210/1000 [09:46<36:46,  2.79s/it][Succeeded / Failed / Skipped / Total] 74 / 133 / 3 / 210:  21%|██        | 211/1000 [09:49<36:43,  2.79s/it][Succeeded / Failed / Skipped / Total] 74 / 134 / 3 / 211:  21%|██        | 211/1000 [09:49<36:43,  2.79s/it][Succeeded / Failed / Skipped / Total] 74 / 134 / 3 / 211:  21%|██        | 212/1000 [09:52<36:43,  2.80s/it]Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[call]] , HttpServletResponse [[interference]] ) { if ( requestMatcher . matches ( [[call]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[call]] , portResolver ) ; if ( createSessionAllowed || [[call]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 207 ---------------------------------------------
Return a new row in the database . --> Returns the row ID for the given project . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[certify]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 208 ---------------------------------------------
Creates a new shared object . --> Create a nonce . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[accurately]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[accurately]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[accurately]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[accurately]] . put ( ApplicationContext . class , context ) ; [[accurately]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[accurately]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[accurately]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 209 ---------------------------------------------
Sets target parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String [[blabbermouth]] ) { if ( [[blabbermouth]] != null ) { Assert . hasText ( [[blabbermouth]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[blabbermouth]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 210 ---------------------------------------------
Get the default Servlet request . --> Get default Servlet response --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[zooey]] ( HttpServletRequest [[inviting]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
Create a new server . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[semana]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 135 / 3 / 212:  21%|██        | 212/1000 [09:52<36:43,  2.80s/it][Succeeded / Failed / Skipped / Total] 74 / 135 / 3 / 212:  21%|██▏       | 213/1000 [09:57<36:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 74 / 136 / 3 / 213:  21%|██▏       | 213/1000 [09:57<36:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 74 / 136 / 3 / 213:  21%|██▏       | 214/1000 [09:58<36:36,  2.80s/it][Succeeded / Failed / Skipped / Total] 75 / 136 / 3 / 214:  21%|██▏       | 214/1000 [09:58<36:36,  2.80s/it][Succeeded / Failed / Skipped / Total] 75 / 136 / 3 / 214:  22%|██▏       | 215/1000 [10:04<36:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 76 / 136 / 3 / 215:  22%|██▏       | 215/1000 [10:04<36:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 76 / 136 / 3 / 215:  22%|██▏       | 216/1000 [10:04<36:35,  2.80s/it][Succeeded / Failed / Skipped / Total] 77 / 136 / 3 / 216:  22%|██▏       | 216/1000 [10:04<36:35,  2.80s/it][Succeeded / Failed / Skipped / Total] 77 / 137 / 3 / 217:  22%|██▏       | 217/1000 [10:04<36:22,  2.79s/it][Succeeded / Failed / Skipped / Total] 77 / 137 / 3 / 217:  22%|██▏       | 218/1000 [10:08<36:24,  2.79s/it][Succeeded / Failed / Skipped / Total] 78 / 137 / 3 / 218:  22%|██▏       | 218/1000 [10:08<36:24,  2.79s/it]Set the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[issued]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[issued]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[issued]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[issued]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 213 ---------------------------------------------
Converts a date to a date format . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[lethal]] ( ) { long [[langer]] = System . currentTimeMillis ( ) ; if ( ( [[langer]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[langer]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[langer]] ; currentDate = format . format ( new Date ( [[langer]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Adds a username to the DNS . --> Add a Distribution --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[username]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[according]] ( String [[access]] ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , [[access]] ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 215 ---------------------------------------------
login login . -->  --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[False]]" != "[[False]]" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[existing]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[key]] = prefix + n ; log . debug ( "Setting security property [" + [[key]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[key]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "[[Falsified]]" != "[[Falsified]]" ; int n = 1 ; final String prefix = "login.config.url." ; String [[quo]] ; while ( ( [[quo]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[quo]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[principal]] = prefix + n ; log . debug ( "Setting security property [" + [[principal]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[principal]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 216 ---------------------------------------------
Parse a date . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int [[i]] = 0 ; ( [[date]] == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { [[date]] = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[soho]] ( String value , DateFormat [ ] formats ) { Date [[chronology]] = null ; for ( int [[it]] = 0 ; ( [[chronology]] == null ) && ( [[it]] < formats . length ) ; [[it]] ++ ) { try { [[chronology]] = formats [ [[it]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[chronology]] == null ) { return null ; } return new Long ( [[chronology]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 217 ---------------------------------------------
Sets user authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[nk]] ( HttpServletRequest [[prays]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[prays]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 218 ---------------------------------------------
Updates the cache . --> Put a value to the map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[ahman]] ( HashMap [[mendacity]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[mendacity]] . size ( ) > 1000 ) { [[mendacity]] . clear ( ) ; } [[mendacity]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 137 / 3 / 219:  22%|██▏       | 219/1000 [10:10<36:16,  2.79s/it][Succeeded / Failed / Skipped / Total] 79 / 137 / 3 / 219:  22%|██▏       | 220/1000 [10:17<36:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 80 / 137 / 3 / 220:  22%|██▏       | 220/1000 [10:17<36:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 80 / 138 / 3 / 221:  22%|██▏       | 221/1000 [10:25<36:43,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 138 / 3 / 221:  22%|██▏       | 222/1000 [10:29<36:44,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 139 / 3 / 222:  22%|██▏       | 222/1000 [10:29<36:44,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 139 / 3 / 222:  22%|██▏       | 223/1000 [10:29<36:35,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 140 / 3 / 223:  22%|██▏       | 223/1000 [10:29<36:35,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 140 / 3 / 223:  22%|██▏       | 224/1000 [10:30<36:25,  2.82s/it][Succeeded / Failed / Skipped / Total] 80 / 141 / 3 / 224:  22%|██▏       | 224/1000 [10:30<36:25,  2.82s/it][Succeeded / Failed / Skipped / Total] 80 / 141 / 3 / 224:  22%|██▎       | 225/1000 [10:37<36:34,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 142 / 3 / 225:  22%|██▎       | 225/1000 [10:37<36:34,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 142 / 3 / 225:  23%|██▎       | 226/1000 [10:38<36:28,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 143 / 3 / 226:  23%|██▎       | 226/1000 [10:38<36:28,  2.83s/it][Succeeded / Failed / Skipped / Total] 80 / 143 / 3 / 226:  23%|██▎       | 227/1000 [10:39<36:18,  2.82s/it]Retrieves the name of the application . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String [[anaemic]] ) { Context [[iyo]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
Returns all criteria matching the given criteria . --> Gets the score of a specific filter --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[barclay]] ( String url ) { return [[barclay]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 221 ---------------------------------------------
Get the subject for the given security name . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSecurityName ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String getSecurityName ( final Subject [[affair]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[affair]] ) ; } String [[maddest]] = null ; if ( [[affair]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 222 ---------------------------------------------
Returns the list of chain chains . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( request ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[chains]] : filterChains ) { if ( [[chains]] . matches ( request ) ) { return [[chains]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 223 ---------------------------------------------
Get the current ApplicationContext . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[controllers]] ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 224 ---------------------------------------------
Builds a list of unique groups . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[kunti]] ( String group ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 225 ---------------------------------------------
Sets the current token . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) [[dest]] ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[antipathy]] ( Authentication source , Authentication [[prominently]] ) { if ( ( [[prominently]] instanceof AbstractAuthenticationToken ) && ( [[prominently]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[icons]] = ( AbstractAuthenticationToken ) [[prominently]] ; [[icons]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 226 ---------------------------------------------
Change password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[tenner]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 143 / 3 / 227:  23%|██▎       | 227/1000 [10:39<36:18,  2.82s/it][Succeeded / Failed / Skipped / Total] 81 / 143 / 3 / 227:  23%|██▎       | 228/1000 [10:47<36:33,  2.84s/it][Succeeded / Failed / Skipped / Total] 81 / 144 / 3 / 228:  23%|██▎       | 228/1000 [10:47<36:33,  2.84s/it][Succeeded / Failed / Skipped / Total] 81 / 144 / 3 / 228:  23%|██▎       | 229/1000 [10:48<36:24,  2.83s/it][Succeeded / Failed / Skipped / Total] 81 / 145 / 3 / 229:  23%|██▎       | 229/1000 [10:48<36:24,  2.83s/it][Succeeded / Failed / Skipped / Total] 81 / 145 / 3 / 229:  23%|██▎       | 230/1000 [10:55<36:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 81 / 146 / 3 / 230:  23%|██▎       | 230/1000 [10:55<36:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 81 / 146 / 3 / 230:  23%|██▎       | 231/1000 [10:57<36:29,  2.85s/it][Succeeded / Failed / Skipped / Total] 82 / 146 / 3 / 231:  23%|██▎       | 231/1000 [10:57<36:29,  2.85s/it][Succeeded / Failed / Skipped / Total] 82 / 146 / 3 / 231:  23%|██▎       | 232/1000 [11:03<36:34,  2.86s/it]Update session attributes . --> Update the MBean --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[hanssen]] ( Map < String , Object > [[ballsy]] ) { notNull ( [[ballsy]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[ballsy]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 228 ---------------------------------------------
Check to see if the session is enabled . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[allowableSessions]] , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > sessions , int [[decorum]] , SessionRegistry [[docket]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[decorum]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 229 ---------------------------------------------
Add a list of filters to a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[trap]] ( List < Filter > filters ) { Validate . notNull ( [[trap]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[trap]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Adds a filters to a filter . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter [[purifier]] , Filter ... [[dis]] ) { Validate . notNull ( [[purifier]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[purifier]] ) ; if ( [[dis]] != null ) { Collections . addAll ( RestAssured . filters , [[dis]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Constructs a response from the response . --> Format a log message . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( responseBodyToAppend ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder [[programmers]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[programmers]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[programmers]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[programmers]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { [[programmers]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[programmers]] . append ( responseBodyToAppend ) ; } String response = [[programmers]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 232 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 146 / 3 / 232:  23%|██▎       | 232/1000 [11:03<36:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 83 / 146 / 3 / 232:  23%|██▎       | 233/1000 [11:03<36:25,  2.85s/it][Succeeded / Failed / Skipped / Total] 84 / 146 / 3 / 233:  23%|██▎       | 233/1000 [11:03<36:25,  2.85s/it][Succeeded / Failed / Skipped / Total] 84 / 146 / 3 / 233:  23%|██▎       | 234/1000 [11:09<36:32,  2.86s/it][Succeeded / Failed / Skipped / Total] 84 / 147 / 3 / 234:  23%|██▎       | 234/1000 [11:09<36:32,  2.86s/it][Succeeded / Failed / Skipped / Total] 84 / 147 / 3 / 234:  24%|██▎       | 235/1000 [11:10<36:24,  2.85s/it][Succeeded / Failed / Skipped / Total] 84 / 148 / 3 / 235:  24%|██▎       | 235/1000 [11:10<36:24,  2.85s/it][Succeeded / Failed / Skipped / Total] 84 / 148 / 3 / 235:  24%|██▎       | 236/1000 [11:11<36:12,  2.84s/it][Succeeded / Failed / Skipped / Total] 84 / 148 / 4 / 236:  24%|██▎       | 236/1000 [11:11<36:12,  2.84s/it][Succeeded / Failed / Skipped / Total] 84 / 148 / 4 / 236:  24%|██▎       | 237/1000 [11:11<36:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 84 / 149 / 4 / 237:  24%|██▎       | 237/1000 [11:11<36:00,  2.83s/it][Succeeded / Failed / Skipped / Total] 84 / 149 / 4 / 237:  24%|██▍       | 238/1000 [11:12<35:52,  2.83s/it][Succeeded / Failed / Skipped / Total] 85 / 149 / 4 / 238:  24%|██▍       | 238/1000 [11:12<35:52,  2.83s/it][Succeeded / Failed / Skipped / Total] 85 / 149 / 4 / 238:  24%|██▍       | 239/1000 [11:14<35:47,  2.82s/it]Creates a new ConfigConfig object . --> Helper method to create a configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[mnh]] ) { notNull ( [[mnh]] , "Redirect config" ) ; return new RestAssuredConfig ( [[mnh]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 233 ---------------------------------------------
Sets the username . --> Register a new UserContext --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String password , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[format]] ( String [[registering]] , String password , FormAuthConfig config ) { if ( [[registering]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[outline]] = new FormAuthScheme ( ) ; [[outline]] . setUserName ( [[registering]] ) ; [[outline]] . setPassword ( password ) ; [[outline]] . setConfig ( config ) ; return [[outline]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 234 ---------------------------------------------
Convenience method to create a proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[puppet]] ( URI [[kelvin]] ) { if ( [[kelvin]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[puppet]] ( new ProxySpecification ( [[kelvin]] . getHost ( ) , [[kelvin]] . getPort ( ) , [[kelvin]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Creates a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[diagram]] = new BasicAuthScheme ( ) ; [[diagram]] . setUserName ( userName ) ; [[diagram]] . setPassword ( password ) ; return [[diagram]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 236 ---------------------------------------------
Helper method to create a ConfigConfigConfigConfig --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig sessionConfig ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 237 ---------------------------------------------
Adapts a authAuther . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 238 ---------------------------------------------
Creates a new instance of JackType . --> Factory method to create a new instance --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[soho]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 149 / 4 / 239:  24%|██▍       | 239/1000 [11:14<35:47,  2.82s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 4 / 239:  24%|██▍       | 240/1000 [11:14<35:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 5 / 240:  24%|██▍       | 240/1000 [11:14<35:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 5 / 240:  24%|██▍       | 241/1000 [11:14<35:25,  2.80s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 6 / 241:  24%|██▍       | 241/1000 [11:14<35:25,  2.80s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 6 / 241:  24%|██▍       | 242/1000 [11:14<35:14,  2.79s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 7 / 242:  24%|██▍       | 242/1000 [11:14<35:14,  2.79s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 7 / 242:  24%|██▍       | 243/1000 [11:15<35:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 8 / 243:  24%|██▍       | 243/1000 [11:15<35:03,  2.78s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 8 / 243:  24%|██▍       | 244/1000 [11:15<34:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 9 / 244:  24%|██▍       | 244/1000 [11:15<34:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 9 / 244:  24%|██▍       | 245/1000 [11:15<34:42,  2.76s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 10 / 245:  24%|██▍       | 245/1000 [11:15<34:42,  2.76s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 10 / 245:  25%|██▍       | 246/1000 [11:15<34:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 11 / 246:  25%|██▍       | 246/1000 [11:15<34:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 86 / 149 / 11 / 246:  25%|██▍       | 247/1000 [11:17<34:26,  2.74s/it][Succeeded / Failed / Skipped / Total] 87 / 149 / 11 / 247:  25%|██▍       | 247/1000 [11:17<34:26,  2.74s/it][Succeeded / Failed / Skipped / Total] 87 / 149 / 11 / 247:  25%|██▍       | 248/1000 [11:18<34:17,  2.74s/it][Succeeded / Failed / Skipped / Total] 87 / 150 / 11 / 248:  25%|██▍       | 248/1000 [11:18<34:17,  2.74s/it][Succeeded / Failed / Skipped / Total] 87 / 150 / 11 / 248:  25%|██▍       | 249/1000 [11:19<34:09,  2.73s/it]Set the scheme for the given scheme . --> Method to get the sign of the given user --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[cipher]] , String workstation , String [[domino]] ) { final NTLMAuthScheme [[curriculum]] = new NTLMAuthScheme ( ) ; [[curriculum]] . setUserName ( userName ) ; [[curriculum]] . setPassword ( [[cipher]] ) ; [[curriculum]] . setWorkstation ( workstation ) ; [[curriculum]] . setDomain ( [[domino]] ) ; return [[curriculum]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 240 ---------------------------------------------
Creates a ConfigConfigConfig from a ConfigConfigConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 241 ---------------------------------------------
Creates a ConfigConfigConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 242 ---------------------------------------------
Creates a ConfigConfig from a ConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 243 ---------------------------------------------
Creates a MBeanConfigurationConfig based on configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 244 ---------------------------------------------
Creates a MultiConfig from a ConfigBuilderConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 245 ---------------------------------------------
Build a ConfigConfig from a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 246 ---------------------------------------------
Construct a ConfigConfig from a configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 247 ---------------------------------------------
Create a new ConfigConfigConfig instance . --> Build a ConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[abrahams]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 248 ---------------------------------------------
Returns the dddDuisheded to use . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[benard]] ( DistinguishedName [[sm]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[sm]] . contains ( baseDn ) ) { return [[sm]] ; } baseDn . append ( [[sm]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 249 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 150 / 11 / 249:  25%|██▍       | 249/1000 [11:19<34:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 88 / 150 / 11 / 249:  25%|██▌       | 250/1000 [11:19<33:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 89 / 150 / 11 / 250:  25%|██▌       | 250/1000 [11:19<33:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 89 / 150 / 11 / 250:  25%|██▌       | 251/1000 [11:22<33:55,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 150 / 11 / 251:  25%|██▌       | 251/1000 [11:22<33:55,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 150 / 11 / 251:  25%|██▌       | 252/1000 [11:24<33:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 151 / 11 / 252:  25%|██▌       | 252/1000 [11:24<33:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 151 / 11 / 252:  25%|██▌       | 253/1000 [11:26<33:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 90 / 152 / 11 / 253:  25%|██▌       | 253/1000 [11:26<33:47,  2.71s/it][Succeeded / Failed / Skipped / Total] 90 / 152 / 11 / 253:  25%|██▌       | 254/1000 [11:30<33:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 153 / 11 / 254:  25%|██▌       | 254/1000 [11:30<33:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 90 / 153 / 11 / 254:  26%|██▌       | 255/1000 [11:34<33:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 91 / 153 / 11 / 255:  26%|██▌       | 255/1000 [11:34<33:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 91 / 153 / 11 / 255:  26%|██▌       | 256/1000 [11:43<34:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 92 / 153 / 11 / 256:  26%|██▌       | 256/1000 [11:43<34:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 92 / 153 / 11 / 256:  26%|██▌       | 257/1000 [11:49<34:11,  2.76s/it][Succeeded / Failed / Skipped / Total] 92 / 154 / 11 / 257:  26%|██▌       | 257/1000 [11:49<34:11,  2.76s/it][Succeeded / Failed / Skipped / Total] 92 / 154 / 11 / 257:  26%|██▌       | 258/1000 [11:53<34:13,  2.77s/it]Build a configuration . --> Construct a ConfigConfig instance from a configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[coughing]] ( JsonConfig jsonConfig ) { notNull ( [[coughing]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[coughing]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 250 ---------------------------------------------
Factory method to create a configuration object from a configuration . --> Factory method to create a ConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[detain]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[detain]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[detain]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 251 ---------------------------------------------
Factory method to create a configuration . --> Build ConfigConfigConfigConfigConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ethos]] ( XmlConfig xmlConfig ) { notNull ( [[ethos]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[ethos]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 252 ---------------------------------------------
Creates a new certificate . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[edvard]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 253 ---------------------------------------------
Sets the default charset . --> [[[FAILED]]]

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[certify]] ( String [[beeline]] ) { return new EncoderConfig ( defaultContentCharset , [[beeline]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 254 ---------------------------------------------
Creates a new Factory . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[Actual]]" == "[[Actual]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 255 ---------------------------------------------
Creates a default namespace . --> Method to register a default configuration --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[corrupts]] ( Map < String , String > [[h]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[h]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Sets credentials . --> Open a new username --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int port , String user , String [[pass]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , [[pass]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int port , String user , String [[adopts]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , [[adopts]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[barks]] ( String [[benefited]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[benefited]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
[Succeeded / Failed / Skipped / Total] 92 / 155 / 11 / 258:  26%|██▌       | 258/1000 [11:53<34:13,  2.77s/it][Succeeded / Failed / Skipped / Total] 92 / 155 / 11 / 258:  26%|██▌       | 259/1000 [11:55<34:07,  2.76s/it][Succeeded / Failed / Skipped / Total] 92 / 156 / 11 / 259:  26%|██▌       | 259/1000 [11:55<34:07,  2.76s/it][Succeeded / Failed / Skipped / Total] 92 / 156 / 11 / 259:  26%|██▌       | 260/1000 [11:55<33:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 93 / 156 / 11 / 260:  26%|██▌       | 260/1000 [11:55<33:57,  2.75s/it][Succeeded / Failed / Skipped / Total] 93 / 156 / 11 / 260:  26%|██▌       | 261/1000 [11:56<33:47,  2.74s/it][Succeeded / Failed / Skipped / Total] 93 / 157 / 11 / 261:  26%|██▌       | 261/1000 [11:56<33:47,  2.74s/it][Succeeded / Failed / Skipped / Total] 93 / 157 / 11 / 261:  26%|██▌       | 262/1000 [11:58<33:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 94 / 157 / 11 / 262:  26%|██▌       | 262/1000 [11:58<33:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 94 / 157 / 11 / 262:  26%|██▋       | 263/1000 [12:03<33:46,  2.75s/it][Succeeded / Failed / Skipped / Total] 94 / 158 / 11 / 263:  26%|██▋       | 263/1000 [12:03<33:46,  2.75s/it][Succeeded / Failed / Skipped / Total] 94 / 158 / 11 / 263:  26%|██▋       | 264/1000 [12:05<33:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 95 / 158 / 11 / 264:  26%|██▋       | 264/1000 [12:05<33:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 95 / 158 / 11 / 264:  26%|██▋       | 265/1000 [12:06<33:36,  2.74s/it]--------------------------------------------- Result 258 ---------------------------------------------
Register a namespace prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[bren]] ( String [[bytes]] , String [[boing]] ) { Validate . notEmpty ( [[bytes]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[boing]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( [[bytes]] , [[boing]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Set the headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[cuff]] ( Map < ? , ? > headers ) { this . [[aspire]] . clear ( ) ; if ( headers == null ) return ; for ( Object [[principal]] : headers . keySet ( ) ) { Object val = headers . get ( [[principal]] ) ; if ( val == null ) continue ; this . [[aspire]] . put ( [[principal]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 260 ---------------------------------------------
Set the header of the given header . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[titles]] ( String [[nominate]] , String [[merit]] ) { Validate . notEmpty ( [[nominate]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[merit]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Clears the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[booted]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 262 ---------------------------------------------
Set the name of this control . --> Set a unique identifier --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[jagger]] ( String [[mets]] ) { Validate . notEmpty ( [[jagger]] , "Control name cannot be empty" ) ; this . controlName = [[jagger]] ; this . [[dis]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 263 ---------------------------------------------
Replies the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[request]] ( String method , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[demanded]] ( String method , boolean [[corsets]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[corsets]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 264 ---------------------------------------------
Advances a response from the given response . --> Convenience method for testing . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[formation]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 265 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 158 / 11 / 265:  26%|██▋       | 265/1000 [12:06<33:36,  2.74s/it][Succeeded / Failed / Skipped / Total] 96 / 158 / 11 / 265:  27%|██▋       | 266/1000 [12:09<33:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 96 / 159 / 11 / 266:  27%|██▋       | 266/1000 [12:09<33:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 96 / 159 / 11 / 266:  27%|██▋       | 267/1000 [12:15<33:38,  2.75s/it][Succeeded / Failed / Skipped / Total] 96 / 160 / 11 / 267:  27%|██▋       | 267/1000 [12:15<33:38,  2.75s/it][Succeeded / Failed / Skipped / Total] 96 / 160 / 11 / 267:  27%|██▋       | 268/1000 [12:17<33:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 97 / 160 / 11 / 268:  27%|██▋       | 268/1000 [12:17<33:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 97 / 160 / 11 / 268:  27%|██▋       | 269/1000 [12:19<33:30,  2.75s/it][Succeeded / Failed / Skipped / Total] 98 / 160 / 11 / 269:  27%|██▋       | 269/1000 [12:19<33:30,  2.75s/it][Succeeded / Failed / Skipped / Total] 98 / 160 / 11 / 269:  27%|██▋       | 270/1000 [12:19<33:20,  2.74s/it][Succeeded / Failed / Skipped / Total] 98 / 161 / 11 / 270:  27%|██▋       | 270/1000 [12:19<33:20,  2.74s/it][Succeeded / Failed / Skipped / Total] 98 / 161 / 11 / 270:  27%|██▋       | 271/1000 [12:21<33:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 98 / 162 / 11 / 271:  27%|██▋       | 271/1000 [12:21<33:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 98 / 162 / 11 / 271:  27%|██▋       | 272/1000 [12:23<33:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 98 / 163 / 11 / 272:  27%|██▋       | 272/1000 [12:23<33:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 98 / 163 / 11 / 272:  27%|██▋       | 273/1000 [12:23<32:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 98 / 164 / 11 / 273:  27%|██▋       | 273/1000 [12:23<32:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 98 / 164 / 11 / 273:  27%|██▋       | 274/1000 [12:31<33:10,  2.74s/it]Adds a header to the response . --> Sets the response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[newHeaders]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[newHeaders]] . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[newHeaders]] ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > [[sensory]] = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; [[sensory]] . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( [[sensory]] ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Returns a list of headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[headerList]] = new LinkedList < Header > ( ) ; [[headerList]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[headerList]] , additionalHeaders ) ; } return new Headers ( [[headerList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[header]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > [[naik]] = new LinkedList < Header > ( ) ; [[naik]] . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( [[naik]] , additionalHeaders ) ; } return new Headers ( [[naik]] ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[watching]] ( Matcher < ? super String > [[detain]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[detain]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a Matcher that matches the given CookieMatcher . --> Returns a specific proto - case - insensitive --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > [[eversince]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[eversince]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Gets the http evaluator . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[pitiable]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Returns a string representation of the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[nigel]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[nigel]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Returns a Matcher that can be used to wait for a given date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[anaphylactic]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Sets credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String [[pass]] , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , [[pass]] , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int port , String user , String [[endorsement]] , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , [[endorsement]] , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a Matcher that matches the given MatcherMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[menus]] ( Matcher < ? super String > [[ofhim]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[ofhim]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 164 / 11 / 274:  27%|██▋       | 274/1000 [12:31<33:10,  2.74s/it][Succeeded / Failed / Skipped / Total] 99 / 164 / 11 / 274:  28%|██▊       | 275/1000 [12:35<33:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 99 / 165 / 11 / 275:  28%|██▊       | 275/1000 [12:35<33:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 99 / 165 / 11 / 275:  28%|██▊       | 276/1000 [12:39<33:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 100 / 165 / 11 / 276:  28%|██▊       | 276/1000 [12:39<33:11,  2.75s/it][Succeeded / Failed / Skipped / Total] 100 / 165 / 11 / 276:  28%|██▊       | 277/1000 [12:39<33:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 100 / 165 / 12 / 277:  28%|██▊       | 277/1000 [12:39<33:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 101 / 165 / 12 / 278:  28%|██▊       | 278/1000 [12:39<32:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 101 / 165 / 12 / 278:  28%|██▊       | 279/1000 [12:40<32:45,  2.73s/it][Succeeded / Failed / Skipped / Total] 102 / 165 / 12 / 279:  28%|██▊       | 279/1000 [12:40<32:45,  2.73s/it][Succeeded / Failed / Skipped / Total] 103 / 165 / 12 / 280:  28%|██▊       | 280/1000 [12:40<32:35,  2.72s/it][Succeeded / Failed / Skipped / Total] 103 / 165 / 12 / 280:  28%|██▊       | 281/1000 [12:41<32:28,  2.71s/it][Succeeded / Failed / Skipped / Total] 103 / 166 / 12 / 281:  28%|██▊       | 281/1000 [12:41<32:28,  2.71s/it][Succeeded / Failed / Skipped / Total] 103 / 167 / 12 / 282:  28%|██▊       | 282/1000 [12:43<32:22,  2.71s/it][Succeeded / Failed / Skipped / Total] 103 / 167 / 12 / 282:  28%|██▊       | 283/1000 [12:43<32:14,  2.70s/it][Succeeded / Failed / Skipped / Total] 103 / 168 / 12 / 283:  28%|██▊       | 283/1000 [12:43<32:14,  2.70s/it][Succeeded / Failed / Skipped / Total] 104 / 168 / 12 / 284:  28%|██▊       | 284/1000 [12:51<32:25,  2.72s/it][Succeeded / Failed / Skipped / Total] 104 / 168 / 12 / 284:  28%|██▊       | 285/1000 [13:03<32:45,  2.75s/it]Creates a new JsonParser . --> Construct a JsonFactory --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[concussion]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[concussion]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 275 ---------------------------------------------
Get a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[forma]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Creates a new JsonParser instance . --> Factory method to create JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[changeable]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[changeable]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 277 ---------------------------------------------
Creates a new log4jo . --> [[[SKIPPED]]]

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 278 ---------------------------------------------
Looks for a Cookie . --> Adapts a string to a String --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[barbaric]] ( Matcher < ? super Integer > [[jock]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[jock]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Returns a new proxy . --> Create a new Principal --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[fanciest]] ( String [[arranged]] ) { return new ProxySpecification ( [[arranged]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 280 ---------------------------------------------
Return a domainMatcher for the given domain . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[dominance]] ( Matcher < ? super String > [[horsehair]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[horsehair]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 281 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > [[cutler]] ) { spec . header ( headerName , [[cutler]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[richard]] ( String [[kristine]] , String [[atwood]] ) { spec . header ( [[kristine]] , [[atwood]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Set the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[almighty]] ) { spec . cookie ( cookieName , [[almighty]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 284 ---------------------------------------------
Add a handler to the handler . --> Sets the channel length . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resembling]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resembling]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 285 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 168 / 12 / 285:  28%|██▊       | 285/1000 [13:03<32:45,  2.75s/it][Succeeded / Failed / Skipped / Total] 105 / 168 / 12 / 285:  29%|██▊       | 286/1000 [13:04<32:37,  2.74s/it][Succeeded / Failed / Skipped / Total] 106 / 168 / 12 / 286:  29%|██▊       | 286/1000 [13:04<32:37,  2.74s/it][Succeeded / Failed / Skipped / Total] 106 / 168 / 12 / 286:  29%|██▊       | 287/1000 [13:04<32:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 107 / 168 / 12 / 287:  29%|██▊       | 287/1000 [13:04<32:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 107 / 168 / 12 / 287:  29%|██▉       | 288/1000 [13:07<32:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 107 / 169 / 12 / 288:  29%|██▉       | 288/1000 [13:07<32:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 107 / 169 / 12 / 288:  29%|██▉       | 289/1000 [13:09<32:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 108 / 169 / 12 / 289:  29%|██▉       | 289/1000 [13:09<32:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 108 / 169 / 12 / 289:  29%|██▉       | 290/1000 [13:10<32:15,  2.73s/it][Succeeded / Failed / Skipped / Total] 109 / 169 / 12 / 290:  29%|██▉       | 290/1000 [13:10<32:15,  2.73s/it][Succeeded / Failed / Skipped / Total] 109 / 169 / 12 / 290:  29%|██▉       | 291/1000 [13:13<32:12,  2.73s/it][Succeeded / Failed / Skipped / Total] 110 / 169 / 12 / 291:  29%|██▉       | 291/1000 [13:13<32:12,  2.73s/it][Succeeded / Failed / Skipped / Total] 110 / 169 / 12 / 291:  29%|██▉       | 292/1000 [13:18<32:15,  2.73s/it][Succeeded / Failed / Skipped / Total] 111 / 169 / 12 / 292:  29%|██▉       | 292/1000 [13:18<32:15,  2.73s/it][Succeeded / Failed / Skipped / Total] 111 / 169 / 12 / 292:  29%|██▉       | 293/1000 [13:18<32:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 111 / 170 / 12 / 293:  29%|██▉       | 293/1000 [13:18<32:06,  2.73s/it][Succeeded / Failed / Skipped / Total] 111 / 170 / 12 / 293:  29%|██▉       | 294/1000 [13:19<31:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 112 / 170 / 12 / 294:  29%|██▉       | 294/1000 [13:19<31:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 112 / 170 / 12 / 294:  30%|██▉       | 295/1000 [13:23<32:00,  2.72s/it]Add attribute . --> Set a single object . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[oarsmen]] ( String [[fasten]] , Object [[ade]] ) { spec . attribute ( [[fasten]] , [[ade]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 286 ---------------------------------------------
Adds a header to the request . --> Specify an existing mail . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[lot]] ( String [[added]] , String [[blackmailed]] ) { spec . header ( [[added]] , [[blackmailed]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 287 ---------------------------------------------
Sets the HTTP client . --> Build http client --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; [[newParams]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[baling]] = new HashMap < String , Object > ( this . [[benard]] ) ; [[baling]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[baling]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 288 ---------------------------------------------
Sets the HttpClient parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[dynamited]] = new HashMap < String , Object > ( httpClientParams ) ; [[dynamited]] . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , [[dynamited]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Decent]]" == "[[Decent]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 289 ---------------------------------------------
Create a multi - traversal . --> Create a new MultiPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[encryption]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[encryption]] , defaultCharset , "[[Appropriate]]" == "[[Appropriate]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 290 ---------------------------------------------
Returns a new log stream . --> Build logic for logic --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[bouffon]] ( PrintStream [[uninitiated]] ) { return new LogConfig ( [[uninitiated]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 291 ---------------------------------------------
Returns a JSON object . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[tones]] > [[tones]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[tones]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 292 ---------------------------------------------
Convert byte array to byte array . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[atone]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 293 ---------------------------------------------
Adds a multi part to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String [[contentBody]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[benzedrine]] ( String controlName , String [[redbrick]] , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 294 ---------------------------------------------
Returns the shortest path . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[barad]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 295 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 170 / 12 / 295:  30%|██▉       | 295/1000 [13:23<32:00,  2.72s/it][Succeeded / Failed / Skipped / Total] 113 / 170 / 12 / 295:  30%|██▉       | 296/1000 [13:24<31:52,  2.72s/it][Succeeded / Failed / Skipped / Total] 114 / 170 / 12 / 296:  30%|██▉       | 296/1000 [13:24<31:52,  2.72s/it][Succeeded / Failed / Skipped / Total] 114 / 170 / 12 / 296:  30%|██▉       | 297/1000 [13:24<31:45,  2.71s/it][Succeeded / Failed / Skipped / Total] 114 / 171 / 12 / 297:  30%|██▉       | 297/1000 [13:24<31:45,  2.71s/it][Succeeded / Failed / Skipped / Total] 114 / 171 / 12 / 297:  30%|██▉       | 298/1000 [13:27<31:41,  2.71s/it][Succeeded / Failed / Skipped / Total] 115 / 171 / 12 / 298:  30%|██▉       | 298/1000 [13:27<31:41,  2.71s/it][Succeeded / Failed / Skipped / Total] 115 / 171 / 12 / 298:  30%|██▉       | 299/1000 [13:28<31:34,  2.70s/it][Succeeded / Failed / Skipped / Total] 116 / 171 / 12 / 299:  30%|██▉       | 299/1000 [13:28<31:34,  2.70s/it][Succeeded / Failed / Skipped / Total] 116 / 171 / 12 / 299:  30%|███       | 300/1000 [13:32<31:36,  2.71s/it][Succeeded / Failed / Skipped / Total] 116 / 172 / 12 / 300:  30%|███       | 300/1000 [13:32<31:36,  2.71s/it][Succeeded / Failed / Skipped / Total] 116 / 172 / 12 / 300:  30%|███       | 301/1000 [13:33<31:29,  2.70s/it][Succeeded / Failed / Skipped / Total] 117 / 172 / 12 / 301:  30%|███       | 301/1000 [13:33<31:29,  2.70s/it][Succeeded / Failed / Skipped / Total] 117 / 172 / 12 / 301:  30%|███       | 302/1000 [13:41<31:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 117 / 173 / 12 / 302:  30%|███       | 302/1000 [13:41<31:39,  2.72s/it][Succeeded / Failed / Skipped / Total] 117 / 173 / 12 / 302:  30%|███       | 303/1000 [13:44<31:36,  2.72s/it][Succeeded / Failed / Skipped / Total] 117 / 174 / 12 / 303:  30%|███       | 303/1000 [13:44<31:36,  2.72s/it][Succeeded / Failed / Skipped / Total] 117 / 174 / 12 / 303:  30%|███       | 304/1000 [13:50<31:40,  2.73s/it][Succeeded / Failed / Skipped / Total] 117 / 175 / 12 / 304:  30%|███       | 304/1000 [13:50<31:40,  2.73s/it][Succeeded / Failed / Skipped / Total] 117 / 175 / 12 / 304:  30%|███       | 305/1000 [13:50<31:33,  2.72s/it][Succeeded / Failed / Skipped / Total] 118 / 175 / 12 / 305:  30%|███       | 305/1000 [13:50<31:33,  2.72s/it][Succeeded / Failed / Skipped / Total] 118 / 175 / 12 / 305:  31%|███       | 306/1000 [13:51<31:26,  2.72s/it]Build HttpClient instance . --> Build HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[browns]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[browns]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Befitting]]" == "[[Befitting]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 296 ---------------------------------------------
Build HttpClientHttpClient instance . --> Return a new instance of HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[ching]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[ching]] , shouldReuseHttpClientInstance , httpClient , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 297 ---------------------------------------------
Get the integer . --> [[[FAILED]]]

[[[[Adv]]]]: public int getInt ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int getInt ( String [[itinerary]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 298 ---------------------------------------------
Gets the float . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[escaping]] ( String [[ways]] ) { final Object value = get ( [[ways]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 299 ---------------------------------------------
Returns the long long . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[frat]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Creates a HTTP GET request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[forms]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[nature]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[forms]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 301 ---------------------------------------------
Sets an object to a mapper . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[simultaneous]] ) { spec . body ( object , [[simultaneous]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 302 ---------------------------------------------
Get the value of the Double property . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[hanssen]] ( String path ) { final Object [[appreciates]] = get ( path ) ; if ( [[appreciates]] instanceof Double ) { return ( Double ) [[appreciates]] ; } return ObjectConverter . convertObjectTo ( [[appreciates]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 303 ---------------------------------------------
Get object type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[shitloads]] > [[shitloads]] getObject ( String path , Class < [[shitloads]] > objectType ) { Object [[aiming]] = getFromPath ( path , "[[Phonies]]" != "[[Phonies]]" ) ; return getObjectAsType ( [[aiming]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[eden]] ( String [[heffalump]] , Object ... [[unmask]] ) { spec . param ( [[heffalump]] , [[unmask]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 305 ---------------------------------------------
Constructs a response from the given stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[drainage]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[drainage]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
[Succeeded / Failed / Skipped / Total] 118 / 176 / 12 / 306:  31%|███       | 306/1000 [13:51<31:26,  2.72s/it][Succeeded / Failed / Skipped / Total] 118 / 176 / 12 / 306:  31%|███       | 307/1000 [13:53<31:20,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 177 / 12 / 307:  31%|███       | 307/1000 [13:53<31:20,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 177 / 12 / 307:  31%|███       | 308/1000 [13:56<31:18,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 178 / 12 / 308:  31%|███       | 308/1000 [13:56<31:18,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 178 / 12 / 308:  31%|███       | 309/1000 [13:58<31:15,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 179 / 12 / 309:  31%|███       | 309/1000 [13:58<31:15,  2.71s/it][Succeeded / Failed / Skipped / Total] 118 / 179 / 12 / 309:  31%|███       | 310/1000 [14:07<31:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 118 / 180 / 12 / 310:  31%|███       | 310/1000 [14:07<31:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 118 / 180 / 12 / 310:  31%|███       | 311/1000 [14:11<31:27,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 180 / 12 / 311:  31%|███       | 311/1000 [14:11<31:27,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 180 / 12 / 311:  31%|███       | 312/1000 [14:14<31:24,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 181 / 12 / 312:  31%|███       | 312/1000 [14:14<31:24,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 181 / 12 / 312:  31%|███▏      | 313/1000 [14:16<31:19,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 182 / 12 / 313:  31%|███▏      | 313/1000 [14:16<31:19,  2.74s/it][Succeeded / Failed / Skipped / Total] 119 / 183 / 12 / 314:  31%|███▏      | 314/1000 [14:16<31:10,  2.73s/it][Succeeded / Failed / Skipped / Total] 119 / 183 / 12 / 314:  32%|███▏      | 315/1000 [14:17<31:04,  2.72s/it]--------------------------------------------- Result 306 ---------------------------------------------
Returns a map with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > getMap ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[pg]] , V > Map < [[pg]] , V > getMap ( String [[trajectory]] ) { return get ( [[trajectory]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a new cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String key , Object [[interest]] , Object ... cookieNameValuePairs ) { spec . cookie ( key , [[interest]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Add a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String [[ballsy]] , Collection < ? > parameterValues ) { spec . param ( [[ballsy]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Creates a new update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[ramallah]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[Authentic]]" == "[[Authentic]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 310 ---------------------------------------------
Puts the given binding into the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[inventories]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 311 ---------------------------------------------
Verifies that the given key is not valid . --> Implementation of validation errors --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[series]] ( Key < T > [[central]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 312 ---------------------------------------------
Returns the binding for the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[baritone]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 313 ---------------------------------------------
Returns a list of Cookies for the given Cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[breads]] ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 314 ---------------------------------------------
Returns the list of generic types . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[runways]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[runways]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[al]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 315 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 184 / 12 / 315:  32%|███▏      | 315/1000 [14:17<31:04,  2.72s/it][Succeeded / Failed / Skipped / Total] 119 / 185 / 12 / 316:  32%|███▏      | 316/1000 [14:21<31:04,  2.73s/it][Succeeded / Failed / Skipped / Total] 119 / 185 / 12 / 316:  32%|███▏      | 317/1000 [14:23<30:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 120 / 185 / 12 / 317:  32%|███▏      | 317/1000 [14:23<30:59,  2.72s/it][Succeeded / Failed / Skipped / Total] 120 / 186 / 12 / 318:  32%|███▏      | 318/1000 [14:31<31:09,  2.74s/it][Succeeded / Failed / Skipped / Total] 120 / 186 / 12 / 318:  32%|███▏      | 319/1000 [14:31<31:00,  2.73s/it][Succeeded / Failed / Skipped / Total] 120 / 187 / 12 / 319:  32%|███▏      | 319/1000 [14:31<31:00,  2.73s/it][Succeeded / Failed / Skipped / Total] 120 / 188 / 12 / 320:  32%|███▏      | 320/1000 [14:42<31:14,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 188 / 12 / 320:  32%|███▏      | 321/1000 [14:46<31:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 189 / 12 / 321:  32%|███▏      | 321/1000 [14:46<31:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 189 / 12 / 321:  32%|███▏      | 322/1000 [14:48<31:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 190 / 12 / 322:  32%|███▏      | 322/1000 [14:48<31:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 190 / 12 / 322:  32%|███▏      | 323/1000 [14:51<31:09,  2.76s/it]Removes a binding from the chain . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint [[ip]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > binding , InjectionPoint [[iap]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[iap]] != null ) { constructors . remove ( [[iap]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 316 ---------------------------------------------
Removes entries from the source map . --> [[[FAILED]]]

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[tuning]] = backingMap . get ( keyAndSource . key ) ; if ( [[tuning]] != null ) { [[tuning]] . remove ( keyAndSource . source ) ; if ( [[tuning]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 317 ---------------------------------------------
Replies the given parameters . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[amount]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[amount]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 318 ---------------------------------------------
Sets the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[accidentally]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 319 ---------------------------------------------
Create an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the given method is static . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method [[the]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Set the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[emissary]] ) { checkState ( this . [[members]] == null , "delegate already initialized" ) ; this . [[members]] = checkNotNull ( [[emissary]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 322 ---------------------------------------------
Create a new injector instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[figgy]] ( InjectorImpl [[sprinkler]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[sprinkler]] ) ; [[sprinkler]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[sprinkler]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 323 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 191 / 12 / 323:  32%|███▏      | 323/1000 [14:51<31:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 120 / 191 / 12 / 323:  32%|███▏      | 324/1000 [14:57<31:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 191 / 12 / 324:  32%|███▏      | 324/1000 [14:57<31:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 191 / 12 / 324:  32%|███▎      | 325/1000 [15:00<31:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 192 / 12 / 325:  32%|███▎      | 325/1000 [15:00<31:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 192 / 12 / 325:  33%|███▎      | 326/1000 [15:02<31:05,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 193 / 12 / 326:  33%|███▎      | 326/1000 [15:02<31:05,  2.77s/it][Succeeded / Failed / Skipped / Total] 121 / 193 / 12 / 326:  33%|███▎      | 327/1000 [15:08<31:09,  2.78s/it][Succeeded / Failed / Skipped / Total] 121 / 194 / 12 / 327:  33%|███▎      | 327/1000 [15:08<31:09,  2.78s/it][Succeeded / Failed / Skipped / Total] 121 / 194 / 12 / 327:  33%|███▎      | 328/1000 [15:08<31:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 122 / 194 / 12 / 328:  33%|███▎      | 328/1000 [15:08<31:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 122 / 194 / 12 / 328:  33%|███▎      | 329/1000 [15:09<30:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 123 / 194 / 12 / 329:  33%|███▎      | 329/1000 [15:09<30:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 123 / 194 / 12 / 329:  33%|███▎      | 330/1000 [15:10<30:48,  2.76s/it][Succeeded / Failed / Skipped / Total] 123 / 195 / 12 / 330:  33%|███▎      | 330/1000 [15:10<30:48,  2.76s/it][Succeeded / Failed / Skipped / Total] 123 / 195 / 12 / 330:  33%|███▎      | 331/1000 [15:11<30:41,  2.75s/it]Create a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[citizenry]] ( InjectorImpl injector ) { Key < Logger > [[imperative]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[imperative]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[imperative]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 324 ---------------------------------------------
Indicates the constructor . --> Allocate a new injector --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[berate]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 325 ---------------------------------------------
Resolve type . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] types ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ types . length ] ; for ( int t = 0 ; t < types . length ; t ++ ) { result [ t ] = resolve ( types [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 326 ---------------------------------------------
Determines whether the given class is a class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[squallor]] ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 327 ---------------------------------------------
Check if the given annotation is present . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[internet]] ( Member [[mps]] , Errors errors ) { Annotation [[stig]] = Annotations . findBindingAnnotation ( errors , [[mps]] , ( ( AnnotatedElement ) [[mps]] ) . getAnnotations ( ) ) ; if ( [[stig]] == null ) { return "[[Phony]]" != "[[Phony]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 328 ---------------------------------------------
Instantiates a class . --> Helper method to load a class --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[faulk]] ( ClassLoader classLoader ) { Class < ? > [[barcelona]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[barcelona]] . getName ( ) ) == [[barcelona]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 329 ---------------------------------------------
Validate validation . --> Merge validation errors --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[duvall]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 330 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[cheese]] ) { Type type = [[cheese]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[abnormalities]] = new Errors ( ) . keyNotFullySpecified ( [[cheese]] ) ; throw new ConfigurationException ( [[abnormalities]] . getMessages ( ) ) ; } if ( [[cheese]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 331 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 196 / 12 / 331:  33%|███▎      | 331/1000 [15:11<30:41,  2.75s/it][Succeeded / Failed / Skipped / Total] 123 / 196 / 12 / 331:  33%|███▎      | 332/1000 [15:12<30:35,  2.75s/it][Succeeded / Failed / Skipped / Total] 123 / 197 / 12 / 332:  33%|███▎      | 332/1000 [15:12<30:35,  2.75s/it][Succeeded / Failed / Skipped / Total] 123 / 197 / 12 / 332:  33%|███▎      | 333/1000 [15:18<30:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 197 / 12 / 333:  33%|███▎      | 333/1000 [15:18<30:39,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 197 / 12 / 333:  33%|███▎      | 334/1000 [15:18<30:32,  2.75s/it][Succeeded / Failed / Skipped / Total] 124 / 198 / 12 / 334:  33%|███▎      | 334/1000 [15:18<30:32,  2.75s/it][Succeeded / Failed / Skipped / Total] 124 / 198 / 12 / 334:  34%|███▎      | 335/1000 [15:23<30:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 199 / 12 / 335:  34%|███▎      | 335/1000 [15:23<30:32,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 199 / 12 / 335:  34%|███▎      | 336/1000 [15:27<30:33,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 200 / 12 / 336:  34%|███▎      | 336/1000 [15:27<30:33,  2.76s/it][Succeeded / Failed / Skipped / Total] 124 / 200 / 12 / 336:  34%|███▎      | 337/1000 [15:31<30:33,  2.76s/it][Succeeded / Failed / Skipped / Total] 125 / 200 / 12 / 337:  34%|███▎      | 337/1000 [15:31<30:33,  2.76s/it][Succeeded / Failed / Skipped / Total] 125 / 200 / 12 / 337:  34%|███▍      | 338/1000 [15:38<30:37,  2.78s/it]Gets the annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[hazelnuts]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Throws a IllegalStateException . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[berate]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 333 ---------------------------------------------
Returns a factory for the given scope . --> Get the scope of the given object --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[atomizer]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 334 ---------------------------------------------
Gets the default annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[enlarge]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 335 ---------------------------------------------
Returns a set of dependency on the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[tantalizing]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 336 ---------------------------------------------
Set the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[amadé]] ( Object [ ] [[amigo]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[amigo]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 337 ---------------------------------------------
Returns the scope of the given scope . --> Static factory method for testing --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[forgery]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[vastness]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[vastness]] != null ) { return forInstance ( [[vastness]] . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 338 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 201 / 12 / 338:  34%|███▍      | 338/1000 [15:38<30:37,  2.78s/it][Succeeded / Failed / Skipped / Total] 125 / 201 / 12 / 338:  34%|███▍      | 339/1000 [15:47<30:47,  2.79s/it][Succeeded / Failed / Skipped / Total] 125 / 202 / 12 / 339:  34%|███▍      | 339/1000 [15:47<30:47,  2.79s/it][Succeeded / Failed / Skipped / Total] 125 / 202 / 12 / 339:  34%|███▍      | 340/1000 [15:51<30:47,  2.80s/it][Succeeded / Failed / Skipped / Total] 125 / 203 / 12 / 340:  34%|███▍      | 340/1000 [15:51<30:47,  2.80s/it][Succeeded / Failed / Skipped / Total] 125 / 203 / 12 / 340:  34%|███▍      | 341/1000 [15:51<30:39,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 203 / 12 / 341:  34%|███▍      | 341/1000 [15:51<30:39,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 203 / 12 / 341:  34%|███▍      | 342/1000 [15:53<30:34,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 204 / 12 / 342:  34%|███▍      | 342/1000 [15:53<30:34,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 204 / 12 / 342:  34%|███▍      | 343/1000 [15:56<30:32,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 205 / 12 / 343:  34%|███▍      | 343/1000 [15:56<30:32,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 205 / 12 / 343:  34%|███▍      | 344/1000 [15:58<30:27,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 206 / 12 / 344:  34%|███▍      | 344/1000 [15:58<30:27,  2.79s/it][Succeeded / Failed / Skipped / Total] 126 / 206 / 12 / 344:  34%|███▍      | 345/1000 [15:59<30:21,  2.78s/it]Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[roca]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 339 ---------------------------------------------
Replies the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[highest]] ( Class < ? extends Annotation > [[mojito]] ) { Retention retention = [[mojito]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
Initialize the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[caddie]] ( Provider < T > [[consigned]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[consigned]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 341 ---------------------------------------------
Returns a string representation of the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[router]] ) { StringBuilder sb = new StringBuilder ( [[router]] . length ( ) ) ; int queryStart = [[router]] . indexOf ( ' ' ) ; String [[consultant]] = null ; if ( queryStart != - 1 ) { [[consultant]] = [[router]] . substring ( queryStart ) ; [[router]] = [[router]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 342 ---------------------------------------------
Get the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation [[annotation]] = key . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = key . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( [[annotationType]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String nameOf ( Key < ? > key ) { Annotation [[shrieking]] = key . getAnnotation ( ) ; Class < ? extends Annotation > [[chaining]] = key . getAnnotationType ( ) ; if ( [[shrieking]] != null && ! isMarker ( [[chaining]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Add a binder binder . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[notoriety]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Returns true if the given public is a public constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method [[method]] = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( [[method]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[method]] . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[commissar]] ) { if ( ! Modifier . isPublic ( [[commissar]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[commissar]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[commissar]] ) . getParameterTypes ( ) ; } else { Method [[process]] = ( Method ) [[commissar]] ; if ( ! Modifier . isPublic ( [[process]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[process]] . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[Concrete]]" == "[[Concrete]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 345 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 207 / 12 / 345:  34%|███▍      | 345/1000 [15:59<30:21,  2.78s/it][Succeeded / Failed / Skipped / Total] 126 / 207 / 12 / 345:  35%|███▍      | 346/1000 [16:04<30:23,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 207 / 12 / 346:  35%|███▍      | 346/1000 [16:04<30:23,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 207 / 12 / 346:  35%|███▍      | 347/1000 [16:10<30:26,  2.80s/it][Succeeded / Failed / Skipped / Total] 127 / 208 / 12 / 347:  35%|███▍      | 347/1000 [16:10<30:26,  2.80s/it][Succeeded / Failed / Skipped / Total] 127 / 208 / 12 / 347:  35%|███▍      | 348/1000 [16:11<30:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 209 / 12 / 348:  35%|███▍      | 348/1000 [16:11<30:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 209 / 12 / 348:  35%|███▍      | 349/1000 [16:12<30:14,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 210 / 12 / 349:  35%|███▍      | 349/1000 [16:12<30:14,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 210 / 12 / 349:  35%|███▌      | 350/1000 [16:15<30:11,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 211 / 12 / 350:  35%|███▌      | 350/1000 [16:15<30:11,  2.79s/it][Succeeded / Failed / Skipped / Total] 127 / 211 / 12 / 350:  35%|███▌      | 351/1000 [16:23<30:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 127 / 212 / 12 / 351:  35%|███▌      | 351/1000 [16:23<30:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 127 / 212 / 12 / 351:  35%|███▌      | 352/1000 [16:26<30:16,  2.80s/it][Succeeded / Failed / Skipped / Total] 128 / 212 / 12 / 352:  35%|███▌      | 352/1000 [16:26<30:16,  2.80s/it][Succeeded / Failed / Skipped / Total] 128 / 212 / 12 / 352:  35%|███▌      | 353/1000 [16:31<30:17,  2.81s/it]Find annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 346 ---------------------------------------------
Get the constructor for the specified constructor . --> Helper method for testing purposes --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[obtains]] ( InjectionPoint [[cues]] , Errors errors ) throws ErrorsException { return cache . get ( [[cues]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Populate key binding . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[becuase]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[becuase]] ) ) ; return [[becuase]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Return the module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[kaka]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 349 ---------------------------------------------
Returns all methods that match the given methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[misinformation]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 350 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation [[found]] = findBindingAnnotation ( errors , member , [[annotations]] ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return [[found]] == null ? Key . get ( type ) : Key . get ( type , [[found]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] [[faceless]] , Errors errors ) throws ErrorsException { int [[eversince]] = errors . size ( ) ; Annotation [[detects]] = findBindingAnnotation ( errors , member , [[faceless]] ) ; errors . throwIfNewErrors ( [[eversince]] ) ; return [[detects]] == null ? Key . get ( type ) : Key . get ( type , [[detects]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 351 ---------------------------------------------
Converts the given string representation to a string . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[postpartum]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 352 ---------------------------------------------
Constructs a new instance of the given object . --> Sets the TSonyp --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext [[context]] , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext [[vein]] , ConstructionContext < T > [[witherspoon]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[vein]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[witherspoon]] . setProxyDelegates ( t ) ; } finally { [[witherspoon]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 353 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 212 / 12 / 353:  35%|███▌      | 353/1000 [16:31<30:17,  2.81s/it][Succeeded / Failed / Skipped / Total] 129 / 212 / 12 / 353:  35%|███▌      | 354/1000 [16:35<30:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 129 / 213 / 12 / 354:  35%|███▌      | 354/1000 [16:35<30:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 129 / 213 / 12 / 354:  36%|███▌      | 355/1000 [16:35<30:08,  2.80s/it][Succeeded / Failed / Skipped / Total] 129 / 213 / 13 / 355:  36%|███▌      | 355/1000 [16:35<30:08,  2.80s/it][Succeeded / Failed / Skipped / Total] 129 / 213 / 13 / 355:  36%|███▌      | 356/1000 [16:47<30:21,  2.83s/it][Succeeded / Failed / Skipped / Total] 130 / 213 / 13 / 356:  36%|███▌      | 356/1000 [16:47<30:21,  2.83s/it][Succeeded / Failed / Skipped / Total] 130 / 213 / 13 / 356:  36%|███▌      | 357/1000 [16:53<30:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 213 / 13 / 357:  36%|███▌      | 357/1000 [16:53<30:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 213 / 13 / 357:  36%|███▌      | 358/1000 [16:58<30:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 214 / 13 / 358:  36%|███▌      | 358/1000 [16:58<30:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 214 / 13 / 358:  36%|███▌      | 359/1000 [17:02<30:26,  2.85s/it]Obtains a list of parameters . --> Build a constructor from a constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : params ) { Key < ? > [[paramKey]] = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[astonished]] : params ) { Key < ? > [[palatable]] = Annotations . getKey ( [[astonished]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( [[palatable]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 354 ---------------------------------------------
Returns true if the given class is a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[uploaded]] ( Class < ? extends Interceptor > [[teardrops]] ) { for ( Annotation annotation : [[teardrops]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[Right]]" == "[[Right]]" ; } } return "[[Phoney]]" != "[[Phoney]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 355 ---------------------------------------------
Returns a String representation of the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Creates a new binder for a binder . --> A convenience method to create a binder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[canoe]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 357 ---------------------------------------------
Create a binder for the given key . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > [[keyType]] , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , [[keyType]] , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( [[keyType]] , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[keyType]] , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[paper]] , TypeLiteral < K > [[execute]] , Key < V > valueTypeAndAnnotation ) { [[paper]] = [[paper]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[aforementioned]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[paper]] , [[execute]] , [[aforementioned]] , valueTypeAndAnnotation . ofType ( mapOf ( [[execute]] , [[aforementioned]] ) ) , RealMultibinder . newRealSetBinder ( [[paper]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[execute]] , [[aforementioned]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 358 ---------------------------------------------
Returns the type of the given message . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException [[ce]] ) { Collection < Message > [[messages]] = [[ce]] . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException [[such]] ) { Collection < Message > [[emails]] = [[such]] . getErrorMessages ( ) ; if ( [[emails]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[emails]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 359 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 215 / 13 / 359:  36%|███▌      | 359/1000 [17:02<30:26,  2.85s/it][Succeeded / Failed / Skipped / Total] 131 / 215 / 13 / 359:  36%|███▌      | 360/1000 [17:03<30:18,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 216 / 13 / 360:  36%|███▌      | 360/1000 [17:03<30:18,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 216 / 13 / 360:  36%|███▌      | 361/1000 [17:05<30:15,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 217 / 13 / 361:  36%|███▌      | 361/1000 [17:05<30:15,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 217 / 13 / 361:  36%|███▌      | 362/1000 [17:07<30:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 218 / 13 / 362:  36%|███▌      | 362/1000 [17:07<30:10,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 218 / 13 / 362:  36%|███▋      | 363/1000 [17:08<30:04,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 219 / 13 / 363:  36%|███▋      | 363/1000 [17:08<30:04,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 219 / 13 / 363:  36%|███▋      | 364/1000 [17:08<29:57,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 220 / 13 / 364:  36%|███▋      | 364/1000 [17:08<29:57,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 220 / 13 / 364:  36%|███▋      | 365/1000 [17:12<29:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 221 / 13 / 365:  36%|███▋      | 365/1000 [17:12<29:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 131 / 221 / 13 / 365:  37%|███▋      | 366/1000 [17:13<29:50,  2.82s/it][Succeeded / Failed / Skipped / Total] 131 / 222 / 13 / 366:  37%|███▋      | 366/1000 [17:13<29:50,  2.82s/it][Succeeded / Failed / Skipped / Total] 131 / 222 / 13 / 366:  37%|███▋      | 367/1000 [17:21<29:56,  2.84s/it]Builds a set of variables . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[brigitte]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > [[designer]] = ImmutableSet . builder ( ) ; [[designer]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { [[designer]] . addAll ( ip . getDependencies ( ) ) ; } } return [[designer]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 360 ---------------------------------------------
Invoke a method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[complain]] ( Object proxy , final Method [[procedures]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 361 ---------------------------------------------
Returns the constructor of the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[liras]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 362 ---------------------------------------------
Returns a set of deprecations . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[promoter]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[ind]] : deps ) { Class < ? > annotationType = [[ind]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[promoter]] . add ( [[ind]] ) ; } } return [[promoter]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 363 ---------------------------------------------
Gets a filter definition . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[screening]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[screening]] != null ) { return [[screening]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 364 ---------------------------------------------
Creates a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[eustace]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 365 ---------------------------------------------
Returns true if the given dependency represents the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[cala]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[condominium]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 366 ---------------------------------------------
Checks if a constructor is present . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor [[armand]] ) { return [[armand]] . isAnnotationPresent ( Inject . class ) || [[armand]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 367 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 223 / 13 / 367:  37%|███▋      | 367/1000 [17:21<29:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 223 / 13 / 367:  37%|███▋      | 368/1000 [17:24<29:54,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 224 / 13 / 368:  37%|███▋      | 368/1000 [17:24<29:54,  2.84s/it][Succeeded / Failed / Skipped / Total] 131 / 224 / 13 / 368:  37%|███▋      | 369/1000 [17:26<29:48,  2.83s/it][Succeeded / Failed / Skipped / Total] 132 / 224 / 13 / 369:  37%|███▋      | 369/1000 [17:26<29:48,  2.83s/it][Succeeded / Failed / Skipped / Total] 132 / 224 / 13 / 369:  37%|███▋      | 370/1000 [17:32<29:51,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 225 / 13 / 370:  37%|███▋      | 370/1000 [17:32<29:51,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 225 / 13 / 370:  37%|███▋      | 371/1000 [17:32<29:45,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 226 / 13 / 371:  37%|███▋      | 371/1000 [17:32<29:45,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 226 / 13 / 371:  37%|███▋      | 372/1000 [17:35<29:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 227 / 13 / 372:  37%|███▋      | 372/1000 [17:35<29:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 227 / 13 / 372:  37%|███▋      | 373/1000 [17:37<29:37,  2.83s/it][Succeeded / Failed / Skipped / Total] 132 / 228 / 13 / 373:  37%|███▋      | 373/1000 [17:37<29:37,  2.83s/it][Succeeded / Failed / Skipped / Total] 132 / 228 / 13 / 373:  37%|███▋      | 374/1000 [17:44<29:41,  2.85s/it][Succeeded / Failed / Skipped / Total] 132 / 229 / 13 / 374:  37%|███▋      | 374/1000 [17:44<29:41,  2.85s/it][Succeeded / Failed / Skipped / Total] 132 / 229 / 13 / 374:  38%|███▊      | 375/1000 [17:47<29:38,  2.85s/it]Returns a set of annotated dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[sieg]] ( ) { ImmutableSet . Builder < InjectionPoint > [[manufacturing]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[manufacturing]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the member of the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[nostra]] ( Member [[participant]] ) { Preconditions . checkArgument ( type == [[participant]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[participant]] , [[participant]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[participant]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initialize the resources . --> Helper method to create a new Producer --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[demers]] ( Errors [[failed]] ) { injector . lookups = injector ; new LookupProcessor ( [[failed]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Wraps a CallableFuture . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[heffalump]] ( Callable < T > [[dublin]] ) { return wrap ( [[dublin]] , [[heffalump]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 371 ---------------------------------------------
Returns the value of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[scammed]] ( Key < ? > key , Object [[goals]] ) { if ( [[goals]] == null || [[goals]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[goals]] ) ) { throw new IllegalArgumentException ( "Value[" + [[goals]] + "] of type[" + [[goals]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[goals]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 372 ---------------------------------------------
Decorate a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "False" != "False" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[wonton]] ( Object module , ModuleAnnotatedMethodScanner [[detecting]] ) { return forObject ( module , "False" != "False" , [[detecting]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 373 ---------------------------------------------
Handles a callable function . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , continueRequest ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > [[arguments]] , Map < Key < ? > , Object > [[peco]] ) { return wrap ( [[arguments]] , continueRequest ( [[peco]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Returns the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[ios]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 375 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 230 / 13 / 375:  38%|███▊      | 375/1000 [17:47<29:38,  2.85s/it][Succeeded / Failed / Skipped / Total] 132 / 230 / 13 / 375:  38%|███▊      | 376/1000 [17:47<29:31,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 231 / 13 / 376:  38%|███▊      | 376/1000 [17:47<29:31,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 231 / 13 / 376:  38%|███▊      | 377/1000 [17:49<29:27,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 232 / 13 / 377:  38%|███▊      | 377/1000 [17:49<29:27,  2.84s/it][Succeeded / Failed / Skipped / Total] 132 / 232 / 13 / 377:  38%|███▊      | 378/1000 [17:58<29:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 132 / 233 / 13 / 378:  38%|███▊      | 378/1000 [17:58<29:34,  2.85s/it][Succeeded / Failed / Skipped / Total] 132 / 233 / 13 / 378:  38%|███▊      | 379/1000 [18:06<29:39,  2.87s/it][Succeeded / Failed / Skipped / Total] 133 / 233 / 13 / 379:  38%|███▊      | 379/1000 [18:06<29:39,  2.87s/it][Succeeded / Failed / Skipped / Total] 133 / 233 / 13 / 379:  38%|███▊      | 380/1000 [18:08<29:35,  2.86s/it]Returns the annotation for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[processes]] ) { if ( [[processes]] . isBridge ( ) || [[processes]] . isSynthetic ( ) ) { return null ; } Annotation [[kaka]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[processes]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[kaka]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[processes]] ) ; return null ; } [[kaka]] = foundAnnotation ; } } return [[kaka]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 376 ---------------------------------------------
Creates a new annotation for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( [[type]] , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[gets]] ( Class < T > [[tipo]] , AnnotationStrategy [[celt]] ) { return new Key < T > ( [[tipo]] , [[celt]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Gets the annotation annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[gender]] ( Class < ? extends Annotation > [[throwin]] ) { [[throwin]] = Annotations . canonicalizeIfNamed ( [[throwin]] ) ; if ( isAllDefaultMethods ( [[throwin]] ) ) { return [[gender]] ( generateAnnotation ( [[throwin]] ) ) ; } checkNotNull ( [[throwin]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[throwin]] ) ; ensureIsBindingAnnotation ( [[throwin]] ) ; return new AnnotationTypeStrategy ( [[throwin]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Gets the annotation annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[zooming]] ) { checkNotNull ( [[zooming]] , "annotation" ) ; Class < ? extends Annotation > [[warlock]] = [[zooming]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[warlock]] ) ; ensureIsBindingAnnotation ( [[warlock]] ) ; if ( Annotations . isMarker ( [[warlock]] ) ) { return new AnnotationTypeStrategy ( [[warlock]] , [[zooming]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[zooming]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
Generates a map of messages . --> Generates a map of usages to a map --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[cause]] = errorMessage . getCause ( ) ; if ( displayCauses && [[cause]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[cause]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[cause]] ) ) ; } else { int [[causeIdx]] = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[cause]] . getClass ( ) . getName ( ) , [[causeIdx]] ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[engender]] = errorMessage . getCause ( ) ; if ( displayCauses && [[engender]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[engender]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[engender]] ) ) ; } else { int [[juanito]] = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[engender]] . getClass ( ) . getName ( ) , [[juanito]] ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
[Succeeded / Failed / Skipped / Total] 133 / 234 / 13 / 380:  38%|███▊      | 380/1000 [18:08<29:35,  2.86s/it][Succeeded / Failed / Skipped / Total] 133 / 234 / 13 / 380:  38%|███▊      | 381/1000 [18:17<29:42,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 235 / 13 / 381:  38%|███▊      | 381/1000 [18:17<29:42,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 235 / 13 / 381:  38%|███▊      | 382/1000 [18:21<29:41,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 236 / 13 / 382:  38%|███▊      | 382/1000 [18:21<29:41,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 236 / 13 / 382:  38%|███▊      | 383/1000 [18:25<29:40,  2.89s/it][Succeeded / Failed / Skipped / Total] 133 / 237 / 13 / 383:  38%|███▊      | 383/1000 [18:25<29:40,  2.89s/it][Succeeded / Failed / Skipped / Total] 133 / 237 / 13 / 383:  38%|███▊      | 384/1000 [18:26<29:34,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 238 / 13 / 384:  38%|███▊      | 384/1000 [18:26<29:34,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 238 / 13 / 384:  38%|███▊      | 385/1000 [18:32<29:37,  2.89s/it][Succeeded / Failed / Skipped / Total] 133 / 239 / 13 / 385:  38%|███▊      | 385/1000 [18:32<29:37,  2.89s/it][Succeeded / Failed / Skipped / Total] 133 / 239 / 13 / 385:  39%|███▊      | 386/1000 [18:32<29:30,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 240 / 13 / 386:  39%|███▊      | 386/1000 [18:32<29:30,  2.88s/it][Succeeded / Failed / Skipped / Total] 133 / 240 / 13 / 386:  39%|███▊      | 387/1000 [18:34<29:24,  2.88s/it][Succeeded / Failed / Skipped / Total] 134 / 240 / 13 / 387:  39%|███▊      | 387/1000 [18:34<29:24,  2.88s/it][Succeeded / Failed / Skipped / Total] 134 / 240 / 13 / 387:  39%|███▉      | 388/1000 [18:40<29:27,  2.89s/it]--------------------------------------------- Result 380 ---------------------------------------------
Creates a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[arguments]] ) { return create ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[rationale]] ) { return create ( null , messageFormat , [[rationale]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Replies the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[injector]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , errorsForMember ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[atomizer]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector [[aerosol]] = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[jets]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[jets]] , injectionPoint , errorsForMember ) ; [[atomizer]] . add ( [[aerosol]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 382 ---------------------------------------------
Convert an object to an object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource source = null ; if ( [[o]] instanceof ElementSource ) { source = ( ElementSource ) [[o]] ; [[o]] = source . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[conversions]] ( Object [[either]] ) { ElementSource source = null ; if ( [[either]] instanceof ElementSource ) { source = ( ElementSource ) [[either]] ; [[either]] = source . getDeclaringSource ( ) ; } return [[conversions]] ( [[either]] , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 383 ---------------------------------------------
Checks if the class contains a class . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[tiny]] ( String [[dak]] ) { return ( parent != null && parent . shouldBeSkipped ( [[dak]] ) ) || classNamesToSkip . contains ( [[dak]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 384 ---------------------------------------------
Create a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[generated]] ( Throwable [[wreak]] , String [[heffalump]] , Object ... arguments ) { return [[generated]] ( [[wreak]] , ImmutableList . of ( ) , [[heffalump]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 385 ---------------------------------------------
Returns the fully qualified name of the module . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[layabouts]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[spaced]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[spaced]] ) ) { return new StackTraceElement ( [[spaced]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , List < Object > [[sources]] , String messageFormat , Object ... [[arguments]] ) { String [[message]] = format ( messageFormat , [[arguments]] ) ; return new Message ( [[sources]] , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable [[triggering]] , List < Object > [[background]] , String messageFormat , Object ... [[lawsuits]] ) { String [[information]] = format ( messageFormat , [[lawsuits]] ) ; return new Message ( [[background]] , [[information]] , [[triggering]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Returns a new instance of the given type . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[occasion]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[occasion]] ; } @ Override public String toString ( ) { return String . valueOf ( [[occasion]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 240 / 13 / 388:  39%|███▉      | 388/1000 [18:40<29:27,  2.89s/it][Succeeded / Failed / Skipped / Total] 135 / 240 / 13 / 388:  39%|███▉      | 389/1000 [18:44<29:25,  2.89s/it][Succeeded / Failed / Skipped / Total] 135 / 241 / 13 / 389:  39%|███▉      | 389/1000 [18:44<29:25,  2.89s/it][Succeeded / Failed / Skipped / Total] 135 / 241 / 13 / 389:  39%|███▉      | 390/1000 [18:44<29:18,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 241 / 14 / 390:  39%|███▉      | 390/1000 [18:44<29:18,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 241 / 14 / 390:  39%|███▉      | 391/1000 [18:45<29:13,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 242 / 14 / 391:  39%|███▉      | 391/1000 [18:45<29:13,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 242 / 14 / 391:  39%|███▉      | 392/1000 [18:49<29:11,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 243 / 14 / 392:  39%|███▉      | 392/1000 [18:49<29:11,  2.88s/it][Succeeded / Failed / Skipped / Total] 135 / 243 / 14 / 392:  39%|███▉      | 393/1000 [18:50<29:06,  2.88s/it][Succeeded / Failed / Skipped / Total] 136 / 243 / 14 / 393:  39%|███▉      | 393/1000 [18:50<29:06,  2.88s/it][Succeeded / Failed / Skipped / Total] 136 / 243 / 14 / 393:  39%|███▉      | 394/1000 [18:50<28:59,  2.87s/it][Succeeded / Failed / Skipped / Total] 136 / 243 / 15 / 394:  39%|███▉      | 394/1000 [18:50<28:59,  2.87s/it][Succeeded / Failed / Skipped / Total] 136 / 243 / 15 / 394:  40%|███▉      | 395/1000 [18:53<28:55,  2.87s/it][Succeeded / Failed / Skipped / Total] 136 / 244 / 15 / 395:  40%|███▉      | 395/1000 [18:53<28:55,  2.87s/it][Succeeded / Failed / Skipped / Total] 136 / 244 / 15 / 395:  40%|███▉      | 396/1000 [18:56<28:52,  2.87s/it]Replies the processor . --> Unregister processor --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[remoteAddr]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[remoteAddr]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[archers]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[archers]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 389 ---------------------------------------------
Adds the stack trace to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] [[abuela]] = t . getStackTrace ( ) ; List < StackTraceElement > [[bobtail]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[abuela]] ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[bobtail]] . add ( element ) ; } } t . setStackTrace ( [[bobtail]] . toArray ( new StackTraceElement [ [[bobtail]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 390 ---------------------------------------------
Throw exception . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Main test . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[baseline]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 392 ---------------------------------------------
Pushes a state . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[uri]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 393 ---------------------------------------------
Register processor . --> Unregister processors --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[tomorrow]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 394 ---------------------------------------------
Returns a reference to a reference . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Executes the given task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[shitloads]] > [[shitloads]] getFutureTaskResult ( RunStateRecordedFutureTask < [[shitloads]] > task , Logger logger ) { [[shitloads]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 245 / 15 / 396:  40%|███▉      | 396/1000 [18:56<28:52,  2.87s/it][Succeeded / Failed / Skipped / Total] 136 / 245 / 15 / 396:  40%|███▉      | 397/1000 [18:56<28:45,  2.86s/it][Succeeded / Failed / Skipped / Total] 136 / 245 / 16 / 397:  40%|███▉      | 397/1000 [18:56<28:45,  2.86s/it][Succeeded / Failed / Skipped / Total] 136 / 245 / 16 / 397:  40%|███▉      | 398/1000 [18:58<28:41,  2.86s/it][Succeeded / Failed / Skipped / Total] 137 / 245 / 16 / 398:  40%|███▉      | 398/1000 [18:58<28:41,  2.86s/it][Succeeded / Failed / Skipped / Total] 137 / 245 / 16 / 398:  40%|███▉      | 399/1000 [19:03<28:41,  2.86s/it][Succeeded / Failed / Skipped / Total] 138 / 245 / 16 / 399:  40%|███▉      | 399/1000 [19:03<28:41,  2.86s/it][Succeeded / Failed / Skipped / Total] 138 / 245 / 16 / 399:  40%|████      | 400/1000 [19:03<28:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 138 / 245 / 17 / 400:  40%|████      | 400/1000 [19:03<28:34,  2.86s/it][Succeeded / Failed / Skipped / Total] 138 / 245 / 17 / 400:  40%|████      | 401/1000 [19:04<28:30,  2.85s/it][Succeeded / Failed / Skipped / Total] 138 / 246 / 17 / 401:  40%|████      | 401/1000 [19:04<28:30,  2.85s/it][Succeeded / Failed / Skipped / Total] 138 / 246 / 17 / 401:  40%|████      | 402/1000 [19:04<28:23,  2.85s/it][Succeeded / Failed / Skipped / Total] 138 / 246 / 18 / 402:  40%|████      | 402/1000 [19:04<28:23,  2.85s/it][Succeeded / Failed / Skipped / Total] 138 / 246 / 18 / 402:  40%|████      | 403/1000 [19:06<28:17,  2.84s/it][Succeeded / Failed / Skipped / Total] 139 / 246 / 18 / 403:  40%|████      | 403/1000 [19:06<28:17,  2.84s/it][Succeeded / Failed / Skipped / Total] 139 / 246 / 18 / 403:  40%|████      | 404/1000 [19:10<28:17,  2.85s/it][Succeeded / Failed / Skipped / Total] 140 / 246 / 18 / 404:  40%|████      | 404/1000 [19:10<28:17,  2.85s/it][Succeeded / Failed / Skipped / Total] 140 / 246 / 18 / 404:  40%|████      | 405/1000 [19:11<28:11,  2.84s/it][Succeeded / Failed / Skipped / Total] 141 / 246 / 18 / 405:  40%|████      | 405/1000 [19:11<28:11,  2.84s/it][Succeeded / Failed / Skipped / Total] 141 / 246 / 18 / 405:  41%|████      | 406/1000 [19:12<28:06,  2.84s/it]Add a new dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[previous]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[another]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[another]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 397 ---------------------------------------------
Closes the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Decodes the byte array . --> Decodes bytes from byte array . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf [[about]] ) { if ( [[about]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[about]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 399 ---------------------------------------------
Add a processor processor . --> Register a list of processors --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( [[type]] ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[shaven]] ( ConnectionEventType [[sexes]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[fai]] = this . processors . get ( [[sexes]] ) ; if ( [[fai]] == null ) { this . processors . putIfAbsent ( [[sexes]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[fai]] = this . processors . get ( [[sexes]] ) ; } [[fai]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 400 ---------------------------------------------
Removes a pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
Register the default processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[newbie]] ( RemotingProcessor < ? > processor ) { if ( this . [[destroyers]] == null ) { this . [[destroyers]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[destroyers]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 402 ---------------------------------------------
Adds a connection to the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 403 ---------------------------------------------
Gets a URL . --> Attempt to get an Artal for a given URL --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[acrobat]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Submit a pool . --> Get a pooled key . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[ephemeral]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 405 ---------------------------------------------
Removes a connection . --> removes the URL . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[aahhh]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 247 / 18 / 406:  41%|████      | 406/1000 [19:12<28:06,  2.84s/it][Succeeded / Failed / Skipped / Total] 141 / 247 / 18 / 406:  41%|████      | 407/1000 [19:14<28:02,  2.84s/it][Succeeded / Failed / Skipped / Total] 142 / 247 / 18 / 407:  41%|████      | 407/1000 [19:14<28:02,  2.84s/it][Succeeded / Failed / Skipped / Total] 142 / 247 / 18 / 407:  41%|████      | 408/1000 [19:17<27:59,  2.84s/it][Succeeded / Failed / Skipped / Total] 142 / 248 / 18 / 408:  41%|████      | 408/1000 [19:17<27:59,  2.84s/it][Succeeded / Failed / Skipped / Total] 142 / 248 / 18 / 408:  41%|████      | 409/1000 [19:17<27:53,  2.83s/it][Succeeded / Failed / Skipped / Total] 142 / 249 / 18 / 409:  41%|████      | 409/1000 [19:17<27:53,  2.83s/it][Succeeded / Failed / Skipped / Total] 142 / 249 / 18 / 409:  41%|████      | 410/1000 [19:20<27:49,  2.83s/it][Succeeded / Failed / Skipped / Total] 142 / 250 / 18 / 410:  41%|████      | 410/1000 [19:20<27:49,  2.83s/it][Succeeded / Failed / Skipped / Total] 142 / 250 / 18 / 410:  41%|████      | 411/1000 [19:20<27:43,  2.82s/it][Succeeded / Failed / Skipped / Total] 142 / 250 / 19 / 411:  41%|████      | 411/1000 [19:20<27:43,  2.82s/it][Succeeded / Failed / Skipped / Total] 142 / 250 / 19 / 411:  41%|████      | 412/1000 [19:20<27:36,  2.82s/it]Sets the provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[provider]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[marketers]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[marketers]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 407 ---------------------------------------------
Completes the future . --> Unregister a future --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[incendiaries]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 408 ---------------------------------------------
Given a set of type checkpoints . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int [[numErrorsBefore]] = [[errors]] . size ( ) ; Set < InjectionPoint > [[injectionPoints]] ; try { [[injectionPoints]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; [[injectionPoints]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[injectors]] = getInjectors ( [[injectionPoints]] , [[errors]] ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , [[injectors]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > type , Errors [[imperfections]] ) throws ErrorsException { int [[colombiana]] = [[imperfections]] . size ( ) ; Set < InjectionPoint > [[entre]] ; try { [[entre]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[imperfections]] . merge ( e . getErrorMessages ( ) ) ; [[entre]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[syringe]] = getInjectors ( [[entre]] , [[imperfections]] ) ; [[imperfections]] . throwIfNewErrors ( [[colombiana]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[imperfections]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[imperfections]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[imperfections]] . throwIfNewErrors ( [[colombiana]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , [[syringe]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 409 ---------------------------------------------
Create a new URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[hager]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 410 ---------------------------------------------
Get processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[squallor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 411 ---------------------------------------------
Executes the transaction command . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 412 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 250 / 19 / 412:  41%|████      | 412/1000 [19:20<27:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 143 / 250 / 19 / 412:  41%|████▏     | 413/1000 [19:23<27:33,  2.82s/it][Succeeded / Failed / Skipped / Total] 144 / 250 / 19 / 413:  41%|████▏     | 413/1000 [19:23<27:33,  2.82s/it][Succeeded / Failed / Skipped / Total] 144 / 250 / 19 / 413:  41%|████▏     | 414/1000 [19:24<27:28,  2.81s/it][Succeeded / Failed / Skipped / Total] 145 / 250 / 19 / 414:  41%|████▏     | 414/1000 [19:24<27:28,  2.81s/it][Succeeded / Failed / Skipped / Total] 145 / 250 / 19 / 414:  42%|████▏     | 415/1000 [19:26<27:24,  2.81s/it][Succeeded / Failed / Skipped / Total] 146 / 250 / 19 / 415:  42%|████▏     | 415/1000 [19:26<27:24,  2.81s/it][Succeeded / Failed / Skipped / Total] 146 / 250 / 19 / 415:  42%|████▏     | 416/1000 [19:28<27:19,  2.81s/it][Succeeded / Failed / Skipped / Total] 147 / 250 / 19 / 416:  42%|████▏     | 416/1000 [19:28<27:19,  2.81s/it][Succeeded / Failed / Skipped / Total] 147 / 250 / 19 / 416:  42%|████▏     | 417/1000 [19:31<27:17,  2.81s/it]Set a value for the given key . --> Convenience factory to create a string representation --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[croatians]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
Register a processor --> Registers a &lt ; --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > [[transistors]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[transistors]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[transistors]] instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) [[transistors]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[transistors]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[transistors]] . interest ( ) , [[transistors]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[transistors]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
Register a new processor . --> Unregisters a receiver --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[clocked]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[clocked]] . multiInterest ( ) || [[clocked]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[clocked]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[clocked]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Handles a command . --> Processes a response . --> Socre: 1.0

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[False]]" != "[[False]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[False]]" != "[[False]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "[[Counterfeit]]" != "[[Counterfeit]]" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "[[Counterfeit]]" != "[[Counterfeit]]" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 416 ---------------------------------------------
Handle a request . --> Handle a transaction . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[cmd]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand [[bx]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[bx]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[bx]] . getId ( ) , currentTimestamp , [[bx]] . getArriveTime ( ) , ( currentTimestamp - [[bx]] . getArriveTime ( ) ) , [[bx]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 250 / 19 / 417:  42%|████▏     | 417/1000 [19:31<27:17,  2.81s/it][Succeeded / Failed / Skipped / Total] 148 / 250 / 19 / 417:  42%|████▏     | 418/1000 [19:34<27:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 149 / 250 / 19 / 418:  42%|████▏     | 418/1000 [19:34<27:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 149 / 250 / 19 / 418:  42%|████▏     | 419/1000 [19:35<27:09,  2.81s/it][Succeeded / Failed / Skipped / Total] 149 / 251 / 19 / 419:  42%|████▏     | 419/1000 [19:35<27:09,  2.81s/it][Succeeded / Failed / Skipped / Total] 149 / 251 / 19 / 419:  42%|████▏     | 420/1000 [19:35<27:03,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 251 / 20 / 420:  42%|████▏     | 420/1000 [19:35<27:03,  2.80s/it][Succeeded / Failed / Skipped / Total] 149 / 251 / 20 / 420:  42%|████▏     | 421/1000 [19:36<26:57,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 251 / 20 / 421:  42%|████▏     | 421/1000 [19:36<26:57,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 251 / 20 / 421:  42%|████▏     | 422/1000 [19:36<26:51,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 251 / 21 / 422:  42%|████▏     | 422/1000 [19:36<26:51,  2.79s/it][Succeeded / Failed / Skipped / Total] 150 / 251 / 21 / 422:  42%|████▏     | 423/1000 [19:36<26:44,  2.78s/it]Handles a request . --> Handle context . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[transmitter]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 418 ---------------------------------------------
Handles the request . --> Handles a command --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[channelCtx]] = ctx . getChannelContext ( ) ; Channel channel = [[channelCtx]] . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long [[labelle]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[labelle]] , cmd . getArriveTime ( ) , ( [[labelle]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[consigned]] = ctx . getChannelContext ( ) ; Channel channel = [[consigned]] . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[labelle]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 419 ---------------------------------------------
Returns a map of pools . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > [[mccain]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[mccain]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[mccain]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 420 ---------------------------------------------
Stops the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Convert byte array to byte . --> Returns an unsigned integer value . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[conjured]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 422 ---------------------------------------------
Returns a list of connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 251 / 22 / 423:  42%|████▏     | 423/1000 [19:36<26:44,  2.78s/it][Succeeded / Failed / Skipped / Total] 150 / 251 / 22 / 423:  42%|████▏     | 424/1000 [19:40<26:44,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 251 / 22 / 424:  42%|████▏     | 424/1000 [19:40<26:44,  2.78s/it][Succeeded / Failed / Skipped / Total] 151 / 251 / 22 / 424:  42%|████▎     | 425/1000 [19:42<26:40,  2.78s/it][Succeeded / Failed / Skipped / Total] 152 / 251 / 22 / 425:  42%|████▎     | 425/1000 [19:42<26:40,  2.78s/it][Succeeded / Failed / Skipped / Total] 152 / 251 / 22 / 425:  43%|████▎     | 426/1000 [19:45<26:37,  2.78s/it][Succeeded / Failed / Skipped / Total] 152 / 252 / 22 / 426:  43%|████▎     | 426/1000 [19:45<26:37,  2.78s/it][Succeeded / Failed / Skipped / Total] 152 / 252 / 22 / 426:  43%|████▎     | 427/1000 [19:46<26:31,  2.78s/it][Succeeded / Failed / Skipped / Total] 153 / 252 / 22 / 427:  43%|████▎     | 427/1000 [19:46<26:31,  2.78s/it][Succeeded / Failed / Skipped / Total] 153 / 252 / 22 / 427:  43%|████▎     | 428/1000 [19:48<26:27,  2.78s/it][Succeeded / Failed / Skipped / Total] 154 / 252 / 22 / 428:  43%|████▎     | 428/1000 [19:48<26:27,  2.78s/it][Succeeded / Failed / Skipped / Total] 154 / 252 / 22 / 428:  43%|████▎     | 429/1000 [19:48<26:21,  2.77s/it]Executes the given pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 424 ---------------------------------------------
Converts a value to a byte array . --> Computes the evaluation . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int [[value]] ) { if ( [[value]] > Byte . MAX_VALUE || [[value]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[value]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[value]] != 0 ) { if ( [[value]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[value]] = ( byte ) ( [[value]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int [[evaluation]] ) { if ( [[evaluation]] > Byte . MAX_VALUE || [[evaluation]] < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + [[evaluation]] + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( [[evaluation]] != 0 ) { if ( [[evaluation]] % 2 != 0 ) { bs . set ( index ) ; } ++ index ; [[evaluation]] = ( byte ) ( [[evaluation]] >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 425 ---------------------------------------------
Adds a Task . --> Adds a connect to the server . --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[chore]] = new ReconnectTask ( ) ; [[chore]] . url = url ; tasks . add ( [[chore]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[coming]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[coming]] . isSuccess ( ) , [[coming]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 427 ---------------------------------------------
Shut down the connection . --> Reads a single segment . --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > [[dallas]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[dallas]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[dallas]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 428 ---------------------------------------------
Get the value of a property . --> Parse a boolean value . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[advisedly]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 429 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 154 / 252 / 23 / 429:  43%|████▎     | 429/1000 [19:48<26:21,  2.77s/it][Succeeded / Failed / Skipped / Total] 154 / 252 / 23 / 429:  43%|████▎     | 430/1000 [19:48<26:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 154 / 252 / 24 / 430:  43%|████▎     | 430/1000 [19:48<26:15,  2.76s/it][Succeeded / Failed / Skipped / Total] 154 / 252 / 24 / 430:  43%|████▎     | 431/1000 [19:49<26:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 155 / 252 / 24 / 431:  43%|████▎     | 431/1000 [19:49<26:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 155 / 252 / 24 / 431:  43%|████▎     | 432/1000 [19:53<26:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 156 / 252 / 24 / 432:  43%|████▎     | 432/1000 [19:53<26:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 156 / 252 / 24 / 432:  43%|████▎     | 433/1000 [19:54<26:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 157 / 252 / 24 / 433:  43%|████▎     | 433/1000 [19:54<26:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 157 / 252 / 24 / 433:  43%|████▎     | 434/1000 [19:56<26:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 252 / 24 / 434:  43%|████▎     | 434/1000 [19:56<26:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 252 / 24 / 434:  44%|████▎     | 435/1000 [20:01<26:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 253 / 24 / 435:  44%|████▎     | 435/1000 [20:01<26:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 158 / 253 / 24 / 435:  44%|████▎     | 436/1000 [20:03<25:56,  2.76s/it][Succeeded / Failed / Skipped / Total] 159 / 253 / 24 / 436:  44%|████▎     | 436/1000 [20:03<25:56,  2.76s/it][Succeeded / Failed / Skipped / Total] 159 / 253 / 24 / 436:  44%|████▎     | 437/1000 [20:10<25:59,  2.77s/it][Succeeded / Failed / Skipped / Total] 159 / 254 / 24 / 437:  44%|████▎     | 437/1000 [20:10<25:59,  2.77s/it][Succeeded / Failed / Skipped / Total] 159 / 254 / 24 / 437:  44%|████▍     | 438/1000 [20:12<25:55,  2.77s/it]Returns the random number of connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 430 ---------------------------------------------
Gets the value associated with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 431 ---------------------------------------------
Log a message . --> Formats a string . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[additions]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 432 ---------------------------------------------
Execute the executor . --> Execute a task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[lawsuits]] ( RemotingContext ctx , T msg , ExecutorService [[mla]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[mla]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 433 ---------------------------------------------
Get the value of a property . --> Returns a string representation of the specified properties . --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[transcendent]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[transcendent]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 434 ---------------------------------------------
Checks if a timeout . --> Checks to see if the command is enabled --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[b]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 435 ---------------------------------------------
Sends a connection . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[fairfield]] , final RemotingCommand request ) { try { [[fairfield]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[fairfield]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[fairfield]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[fairfield]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 436 ---------------------------------------------
Returns the error command . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[hoodoo]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 437 ---------------------------------------------
Returns true if the user has the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[brahmins]] ) { return StringUtils . isBlank ( [[brahmins]] ) ? null : this . [[brandishing]] . get ( [[brahmins]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 438 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 254 / 24 / 438:  44%|████▍     | 438/1000 [20:12<25:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 160 / 254 / 24 / 438:  44%|████▍     | 439/1000 [20:16<25:54,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 254 / 24 / 439:  44%|████▍     | 439/1000 [20:16<25:54,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 254 / 24 / 439:  44%|████▍     | 440/1000 [20:17<25:49,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 255 / 24 / 440:  44%|████▍     | 440/1000 [20:17<25:49,  2.77s/it][Succeeded / Failed / Skipped / Total] 161 / 255 / 24 / 440:  44%|████▍     | 441/1000 [20:24<25:51,  2.78s/it][Succeeded / Failed / Skipped / Total] 162 / 255 / 24 / 441:  44%|████▍     | 441/1000 [20:24<25:51,  2.78s/it][Succeeded / Failed / Skipped / Total] 162 / 255 / 24 / 441:  44%|████▍     | 442/1000 [20:24<25:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 162 / 256 / 24 / 442:  44%|████▍     | 442/1000 [20:24<25:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 162 / 256 / 24 / 442:  44%|████▍     | 443/1000 [20:28<25:44,  2.77s/it][Succeeded / Failed / Skipped / Total] 162 / 257 / 24 / 443:  44%|████▍     | 443/1000 [20:28<25:44,  2.77s/it][Succeeded / Failed / Skipped / Total] 162 / 257 / 24 / 443:  44%|████▍     | 444/1000 [20:29<25:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 257 / 24 / 444:  44%|████▍     | 444/1000 [20:29<25:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 257 / 24 / 444:  44%|████▍     | 445/1000 [20:30<25:34,  2.76s/it]Logs a log message . --> Invokes the invoker . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[alva]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 439 ---------------------------------------------
get response from response --> Enqueue a transaction --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[bolted]] ( ResponseCommand [[indecisive]] ) throws CodecException { RpcResponseCommand [[feedback]] = ( RpcResponseCommand ) [[indecisive]] ; [[feedback]] . deserialize ( ) ; return [[feedback]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
Handles a response . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[bubblegum]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
Parses the given address . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[brodeur]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 442 ---------------------------------------------
Execute a command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[effervescent]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 443 ---------------------------------------------
Parse response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[pesto]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[pesto]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 444 ---------------------------------------------
Create a new thread group . --> Return a new instance of a balancing --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[banking]] ( int [[bawling]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[bawling]] , threadFactory ) : new NioEventLoopGroup ( [[bawling]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 258 / 24 / 445:  44%|████▍     | 445/1000 [20:30<25:34,  2.76s/it][Succeeded / Failed / Skipped / Total] 163 / 258 / 24 / 445:  45%|████▍     | 446/1000 [20:37<25:37,  2.78s/it][Succeeded / Failed / Skipped / Total] 163 / 259 / 24 / 446:  45%|████▍     | 446/1000 [20:37<25:37,  2.78s/it][Succeeded / Failed / Skipped / Total] 163 / 259 / 24 / 446:  45%|████▍     | 447/1000 [20:38<25:32,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 260 / 24 / 447:  45%|████▍     | 447/1000 [20:38<25:32,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 260 / 24 / 447:  45%|████▍     | 448/1000 [20:43<25:32,  2.78s/it][Succeeded / Failed / Skipped / Total] 163 / 261 / 24 / 448:  45%|████▍     | 448/1000 [20:43<25:32,  2.78s/it][Succeeded / Failed / Skipped / Total] 163 / 261 / 24 / 448:  45%|████▍     | 449/1000 [20:43<25:26,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 261 / 25 / 449:  45%|████▍     | 449/1000 [20:43<25:26,  2.77s/it][Succeeded / Failed / Skipped / Total] 163 / 261 / 25 / 449:  45%|████▌     | 450/1000 [20:43<25:20,  2.76s/it][Succeeded / Failed / Skipped / Total] 163 / 262 / 25 / 450:  45%|████▌     | 450/1000 [20:43<25:20,  2.76s/it][Succeeded / Failed / Skipped / Total] 163 / 262 / 25 / 450:  45%|████▌     | 451/1000 [20:46<25:17,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 262 / 25 / 451:  45%|████▌     | 451/1000 [20:46<25:17,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 262 / 25 / 451:  45%|████▌     | 452/1000 [20:49<25:14,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 263 / 25 / 452:  45%|████▌     | 452/1000 [20:49<25:14,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 263 / 25 / 452:  45%|████▌     | 453/1000 [20:50<25:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 264 / 25 / 453:  45%|████▌     | 453/1000 [20:50<25:10,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 264 / 25 / 453:  45%|████▌     | 454/1000 [20:55<25:10,  2.77s/it]Create a exception . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String [[errMsg]] ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[errMsg]] ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[reminiscent]] ( Throwable t , String [[hollers]] ) { String [[buffet]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , [[hollers]] ) ; RpcServerException e = new RpcServerException ( [[buffet]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 446 ---------------------------------------------
Parses a remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel [[piping]] ) { if ( null == [[piping]] ) { return StringUtils . EMPTY ; } final SocketAddress [[unattainable]] = [[piping]] . remoteAddress ( ) ; return doParse ( [[unattainable]] != null ? [[unattainable]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Get IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[armchair]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[journeying]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[journeying]] != null ) { return [[journeying]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Gets the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[backpacks]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 450 ---------------------------------------------
Extracts the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[aditya]] ( final Channel [[waterways]] ) { if ( null == [[waterways]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[insulated]] = ( InetSocketAddress ) [[waterways]] . remoteAddress ( ) ; if ( [[insulated]] != null ) { return [[insulated]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Add a connection . --> Adds an arbitrary . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[regard]] ) { markAccess ( ) ; if ( null == [[regard]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[regard]] ) ; if ( res ) { [[regard]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 452 ---------------------------------------------
Returns a socket channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[canals]] ) { if ( null == [[canals]] ) { return - 1 ; } final InetSocketAddress [[unaccompanied]] = ( InetSocketAddress ) [[canals]] . remoteAddress ( ) ; if ( [[unaccompanied]] != null ) { return [[unaccompanied]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Get a local address . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[demers]] ( final Channel [[chaining]] ) { if ( null == [[chaining]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[chaining]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 265 / 25 / 454:  45%|████▌     | 454/1000 [20:55<25:10,  2.77s/it][Succeeded / Failed / Skipped / Total] 164 / 265 / 25 / 454:  46%|████▌     | 455/1000 [20:56<25:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 265 / 26 / 455:  46%|████▌     | 455/1000 [20:56<25:04,  2.76s/it][Succeeded / Failed / Skipped / Total] 164 / 265 / 26 / 455:  46%|████▌     | 456/1000 [20:57<25:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 165 / 265 / 26 / 456:  46%|████▌     | 456/1000 [20:57<25:00,  2.76s/it][Succeeded / Failed / Skipped / Total] 165 / 265 / 26 / 456:  46%|████▌     | 457/1000 [20:57<24:54,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 265 / 26 / 457:  46%|████▌     | 457/1000 [20:57<24:54,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 265 / 26 / 457:  46%|████▌     | 458/1000 [20:58<24:48,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 265 / 27 / 458:  46%|████▌     | 458/1000 [20:58<24:48,  2.75s/it][Succeeded / Failed / Skipped / Total] 166 / 265 / 27 / 458:  46%|████▌     | 459/1000 [20:58<24:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 166 / 266 / 27 / 459:  46%|████▌     | 459/1000 [20:58<24:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 166 / 266 / 27 / 459:  46%|████▌     | 460/1000 [20:59<24:38,  2.74s/it]Create a new task . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[timeout]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[downtime]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 455 ---------------------------------------------
Does this URL . --> [[[SKIPPED]]]

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 456 ---------------------------------------------
Start the monitor . --> Starts the timer . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long [[period]] = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , [[period]] , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long [[chronology]] = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , [[chronology]] , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 457 ---------------------------------------------
Close the connection . --> Removes afficalan . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[affair]] ) { if ( null == [[affair]] ) { return ; } boolean [[genuine]] = this . conns . remove ( [[affair]] ) ; if ( [[genuine]] ) { [[affair]] . decreaseRef ( ) ; } if ( [[affair]] . noRef ( ) ) { [[affair]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 458 ---------------------------------------------
Open a channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
Returns a description of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[highest]] ( String [[compound]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[compound]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 460 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 266 / 28 / 460:  46%|████▌     | 460/1000 [20:59<24:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 166 / 266 / 28 / 460:  46%|████▌     | 461/1000 [20:59<24:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 266 / 29 / 461:  46%|████▌     | 461/1000 [20:59<24:32,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 266 / 29 / 461:  46%|████▌     | 462/1000 [21:03<24:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 267 / 29 / 462:  46%|████▌     | 462/1000 [21:03<24:30,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 267 / 29 / 462:  46%|████▋     | 463/1000 [21:03<24:25,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 268 / 29 / 463:  46%|████▋     | 463/1000 [21:03<24:25,  2.73s/it][Succeeded / Failed / Skipped / Total] 166 / 268 / 29 / 463:  46%|████▋     | 464/1000 [21:06<24:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 167 / 268 / 29 / 464:  46%|████▋     | 464/1000 [21:06<24:23,  2.73s/it][Succeeded / Failed / Skipped / Total] 167 / 268 / 29 / 464:  46%|████▋     | 465/1000 [21:08<24:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 168 / 268 / 29 / 465:  46%|████▋     | 465/1000 [21:08<24:19,  2.73s/it][Succeeded / Failed / Skipped / Total] 168 / 268 / 29 / 465:  47%|████▋     | 466/1000 [21:09<24:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 169 / 268 / 29 / 466:  47%|████▋     | 466/1000 [21:09<24:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 169 / 268 / 29 / 466:  47%|████▋     | 467/1000 [21:11<24:10,  2.72s/it][Succeeded / Failed / Skipped / Total] 170 / 268 / 29 / 467:  47%|████▋     | 467/1000 [21:11<24:10,  2.72s/it][Succeeded / Failed / Skipped / Total] 170 / 268 / 29 / 467:  47%|████▋     | 468/1000 [21:11<24:05,  2.72s/it][Succeeded / Failed / Skipped / Total] 170 / 268 / 30 / 468:  47%|████▋     | 468/1000 [21:11<24:05,  2.72s/it][Succeeded / Failed / Skipped / Total] 170 / 268 / 30 / 468:  47%|████▋     | 469/1000 [21:11<23:59,  2.71s/it]Parse a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 461 ---------------------------------------------
Allocate a byte buffer . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 462 ---------------------------------------------
Returns the IP address for the given IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[socketAddress]] ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) [[socketAddress]] ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[cursory]] ) { final InetSocketAddress [[gregoire]] = ( InetSocketAddress ) [[cursory]] ; if ( [[gregoire]] != null ) { InetAddress [[danda]] = [[gregoire]] . getAddress ( ) ; if ( null != [[danda]] ) { return [[danda]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 463 ---------------------------------------------
Get a Js command line . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[centigrade]] ( CommandCode [[deciphering]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[deciphering]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 464 ---------------------------------------------
Sets the code . --> A convenience method . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[frankie]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 465 ---------------------------------------------
Get the protocol . --> Obtains a Handshaket . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol [[dt]] : knownProtocols ) { if ( [[dt]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[dt]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 466 ---------------------------------------------
Sets the water watermark . --> Marks watermark watermark . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[abattoir]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 467 ---------------------------------------------
Returns the Frame frame for the given frame . --> Returns the number of times . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[dynamics]] ) { if ( [[dynamics]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[dynamics]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 468 ---------------------------------------------
Sends a web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 268 / 31 / 469:  47%|████▋     | 469/1000 [21:11<23:59,  2.71s/it][Succeeded / Failed / Skipped / Total] 170 / 268 / 31 / 469:  47%|████▋     | 470/1000 [21:11<23:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 171 / 268 / 31 / 470:  47%|████▋     | 470/1000 [21:11<23:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 171 / 268 / 31 / 470:  47%|████▋     | 471/1000 [21:12<23:48,  2.70s/it][Succeeded / Failed / Skipped / Total] 172 / 268 / 31 / 471:  47%|████▋     | 471/1000 [21:12<23:48,  2.70s/it][Succeeded / Failed / Skipped / Total] 172 / 268 / 31 / 471:  47%|████▋     | 472/1000 [21:14<23:45,  2.70s/it][Succeeded / Failed / Skipped / Total] 173 / 268 / 31 / 472:  47%|████▋     | 472/1000 [21:14<23:45,  2.70s/it][Succeeded / Failed / Skipped / Total] 173 / 268 / 31 / 472:  47%|████▋     | 473/1000 [21:15<23:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 174 / 268 / 31 / 473:  47%|████▋     | 473/1000 [21:15<23:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 174 / 268 / 31 / 473:  47%|████▋     | 474/1000 [21:16<23:36,  2.69s/it][Succeeded / Failed / Skipped / Total] 175 / 268 / 31 / 474:  47%|████▋     | 474/1000 [21:16<23:36,  2.69s/it][Succeeded / Failed / Skipped / Total] 175 / 268 / 31 / 474:  48%|████▊     | 475/1000 [21:17<23:32,  2.69s/it][Succeeded / Failed / Skipped / Total] 176 / 268 / 31 / 475:  48%|████▊     | 475/1000 [21:17<23:32,  2.69s/it][Succeeded / Failed / Skipped / Total] 176 / 268 / 31 / 475:  48%|████▊     | 476/1000 [21:22<23:31,  2.69s/it][Succeeded / Failed / Skipped / Total] 177 / 268 / 31 / 476:  48%|████▊     | 476/1000 [21:22<23:31,  2.69s/it][Succeeded / Failed / Skipped / Total] 177 / 268 / 31 / 476:  48%|████▊     | 477/1000 [21:23<23:27,  2.69s/it]Send web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 470 ---------------------------------------------
Register a custom command . --> Unregisters a Phruid --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[trotskyite]] ( CommandCode code , CustomSerializer [[wahab]] ) { CustomSerializer [[perpetuate]] = commandCustomSerializer . putIfAbsent ( code , [[wahab]] ) ; if ( [[perpetuate]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[perpetuate]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 471 ---------------------------------------------
Send packet . --> Sets a new memory . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[levi]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
Helper method to set the size of bytes . --> Advance a new Limited payload . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[gre]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 473 ---------------------------------------------
Register a custom serializer . --> Adapts a Customer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[siena]] ( String [[hideo]] , CustomSerializer [[blackout]] ) { CustomSerializer [[brigitte]] = classCustomSerializer . putIfAbsent ( [[hideo]] , [[blackout]] ) ; if ( [[brigitte]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[hideo]] + ", the custom serializer is: " + [[brigitte]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 474 ---------------------------------------------
Process web socket . --> Connect to web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[amazons]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 475 ---------------------------------------------
Generates a SHA1 - 1 hash . --> Calculates the SHA1 . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[malaya]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 476 ---------------------------------------------
Closes a frame . --> Attempt to close . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[edifice]] ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( [[edifice]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[edifice]] ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
[Succeeded / Failed / Skipped / Total] 178 / 268 / 31 / 477:  48%|████▊     | 477/1000 [21:23<23:27,  2.69s/it][Succeeded / Failed / Skipped / Total] 179 / 268 / 31 / 478:  48%|████▊     | 478/1000 [21:23<23:21,  2.69s/it][Succeeded / Failed / Skipped / Total] 179 / 268 / 31 / 478:  48%|████▊     | 479/1000 [21:23<23:16,  2.68s/it][Succeeded / Failed / Skipped / Total] 179 / 268 / 32 / 479:  48%|████▊     | 479/1000 [21:23<23:16,  2.68s/it][Succeeded / Failed / Skipped / Total] 179 / 268 / 33 / 480:  48%|████▊     | 480/1000 [21:23<23:10,  2.67s/it][Succeeded / Failed / Skipped / Total] 179 / 268 / 33 / 480:  48%|████▊     | 481/1000 [21:24<23:05,  2.67s/it][Succeeded / Failed / Skipped / Total] 180 / 268 / 33 / 481:  48%|████▊     | 481/1000 [21:24<23:05,  2.67s/it][Succeeded / Failed / Skipped / Total] 181 / 268 / 33 / 482:  48%|████▊     | 482/1000 [21:24<23:00,  2.66s/it][Succeeded / Failed / Skipped / Total] 181 / 268 / 33 / 482:  48%|████▊     | 483/1000 [21:24<22:54,  2.66s/it][Succeeded / Failed / Skipped / Total] 181 / 268 / 34 / 483:  48%|████▊     | 483/1000 [21:24<22:54,  2.66s/it][Succeeded / Failed / Skipped / Total] 182 / 268 / 34 / 484:  48%|████▊     | 484/1000 [21:30<22:55,  2.67s/it][Succeeded / Failed / Skipped / Total] 182 / 268 / 34 / 484:  48%|████▊     | 485/1000 [21:30<22:50,  2.66s/it]--------------------------------------------- Result 477 ---------------------------------------------
Calculates the size of the buffer . --> Acquires a limit . --> Socre: 1.0

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[delusion]] = getByteBufferListSize ( ) ; if ( [[delusion]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[delusion]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 478 ---------------------------------------------
Read data from a frame . --> Processes a single thread . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[architecture]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[architecture]] ; addToBufferList ( [[architecture]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Handle socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 480 ---------------------------------------------
Build a Handrandshak2 . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 481 ---------------------------------------------
Returns a new ByteBuffer . --> Returns an unmodifiable byte buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[lysergic]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[lysergic]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[lysergic]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 482 ---------------------------------------------
Returns the total size of the buffer . --> Allocate a buffer . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[beeped]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 483 ---------------------------------------------
Initializes the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Handles the error response . --> Write error response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[caln]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 268 / 34 / 485:  48%|████▊     | 485/1000 [21:30<22:50,  2.66s/it][Succeeded / Failed / Skipped / Total] 184 / 268 / 34 / 486:  49%|████▊     | 486/1000 [21:31<22:45,  2.66s/it][Succeeded / Failed / Skipped / Total] 184 / 268 / 34 / 486:  49%|████▊     | 487/1000 [21:31<22:40,  2.65s/it][Succeeded / Failed / Skipped / Total] 184 / 269 / 34 / 487:  49%|████▊     | 487/1000 [21:31<22:40,  2.65s/it][Succeeded / Failed / Skipped / Total] 185 / 269 / 34 / 488:  49%|████▉     | 488/1000 [21:32<22:35,  2.65s/it][Succeeded / Failed / Skipped / Total] 185 / 269 / 34 / 488:  49%|████▉     | 489/1000 [21:40<22:38,  2.66s/it]Populates a single frame . --> Reads a data from a byte array . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[ac]] ( WebSocketImpl [[spaced]] , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[spaced]] . getWebSocketListener ( ) . onWebsocketMessage ( [[spaced]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[spaced]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[spaced]] . getWebSocketListener ( ) . onWebsocketMessage ( [[spaced]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[spaced]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 486 ---------------------------------------------
Populate the server . --> Flush response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[blushes]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Starts a new thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[attach]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 488 ---------------------------------------------
Generates a HTTP response . --> Generates code . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String [[hermit]] ; switch ( errorCode ) { case 404 : [[hermit]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[hermit]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[hermit]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[hermit]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[hermit]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 489 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 269 / 34 / 489:  49%|████▉     | 489/1000 [21:40<22:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 186 / 270 / 34 / 490:  49%|████▉     | 490/1000 [21:42<22:35,  2.66s/it][Succeeded / Failed / Skipped / Total] 186 / 270 / 34 / 490:  49%|████▉     | 491/1000 [21:44<22:32,  2.66s/it][Succeeded / Failed / Skipped / Total] 187 / 270 / 34 / 491:  49%|████▉     | 491/1000 [21:44<22:32,  2.66s/it][Succeeded / Failed / Skipped / Total] 188 / 270 / 34 / 492:  49%|████▉     | 492/1000 [21:46<22:28,  2.66s/it][Succeeded / Failed / Skipped / Total] 188 / 270 / 34 / 492:  49%|████▉     | 493/1000 [21:48<22:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 189 / 270 / 34 / 493:  49%|████▉     | 493/1000 [21:48<22:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 270 / 34 / 494:  49%|████▉     | 494/1000 [21:49<22:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 190 / 270 / 34 / 494:  50%|████▉     | 495/1000 [21:51<22:17,  2.65s/it]Sends a request to the server . --> Performs a HTTP request . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[authority]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 490 ---------------------------------------------
Sends a text . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[consignment]] ( String [[phrase]] ) { if ( [[phrase]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[consignment]] ( draft . createFrames ( [[phrase]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Start the timer . --> Destroy a cluster . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[vis]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[amritsar]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 492 ---------------------------------------------
Stop a connection . --> Shuts down . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[websocketRunning]] = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[pipis]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[shitface]] = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 493 ---------------------------------------------
Connect to the server . --> Starts all connections . --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[furnishes]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[furnishes]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 494 ---------------------------------------------
Process a single frame . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[behaving]] ( WebSocketImpl webSocketImpl , Framedata [[constructs]] , Opcode [[bounce]] ) throws InvalidDataException { if ( [[bounce]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[constructs]] ) ; } else if ( [[constructs]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[constructs]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 495 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 190 / 271 / 34 / 495:  50%|████▉     | 495/1000 [21:51<22:17,  2.65s/it][Succeeded / Failed / Skipped / Total] 191 / 271 / 34 / 496:  50%|████▉     | 496/1000 [21:53<22:14,  2.65s/it][Succeeded / Failed / Skipped / Total] 191 / 271 / 34 / 496:  50%|████▉     | 497/1000 [21:53<22:09,  2.64s/it][Succeeded / Failed / Skipped / Total] 191 / 271 / 35 / 497:  50%|████▉     | 497/1000 [21:53<22:09,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 271 / 35 / 498:  50%|████▉     | 498/1000 [21:57<22:08,  2.65s/it][Succeeded / Failed / Skipped / Total] 192 / 271 / 35 / 498:  50%|████▉     | 499/1000 [21:58<22:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 271 / 36 / 499:  50%|████▉     | 499/1000 [21:58<22:03,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 272 / 36 / 500:  50%|█████     | 500/1000 [21:59<21:59,  2.64s/it][Succeeded / Failed / Skipped / Total] 192 / 272 / 36 / 500:  50%|█████     | 501/1000 [22:01<21:56,  2.64s/it][Succeeded / Failed / Skipped / Total] 193 / 272 / 36 / 501:  50%|█████     | 501/1000 [22:01<21:56,  2.64s/it]Get the scheme . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[cristi]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String [[regimen]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[regimen]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[regimen]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[regimen]] ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 496 ---------------------------------------------
Shuts down the connection . --> Clean up resources . --> Socre: 1.0

[[[[Adv]]]]: private void cancelConnectionLostTimer ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[[False]]" != "[[False]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void cancelConnectionLostTimer ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[[Doctored]]" != "[[Doctored]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Adds a channel to the queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 498 ---------------------------------------------
Sends a Handshakes Handwidth to the server . --> Create a Handsmodmolecule --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[dante]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 499 ---------------------------------------------
Handles the key . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 500 ---------------------------------------------
Sets the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 501 ---------------------------------------------
Handles a socket . --> Sets the key . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[belike]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 502 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 272 / 36 / 502:  50%|█████     | 502/1000 [22:04<21:53,  2.64s/it][Succeeded / Failed / Skipped / Total] 194 / 272 / 36 / 502:  50%|█████     | 503/1000 [22:04<21:48,  2.63s/it][Succeeded / Failed / Skipped / Total] 194 / 272 / 37 / 503:  50%|█████     | 503/1000 [22:04<21:48,  2.63s/it][Succeeded / Failed / Skipped / Total] 195 / 272 / 37 / 504:  50%|█████     | 504/1000 [22:05<21:44,  2.63s/it][Succeeded / Failed / Skipped / Total] 195 / 272 / 37 / 504:  50%|█████     | 505/1000 [22:06<21:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 196 / 272 / 37 / 505:  50%|█████     | 505/1000 [22:06<21:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 197 / 272 / 37 / 506:  51%|█████     | 506/1000 [22:07<21:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 197 / 272 / 37 / 506:  51%|█████     | 507/1000 [22:07<21:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 198 / 272 / 37 / 507:  51%|█████     | 507/1000 [22:07<21:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 199 / 272 / 37 / 508:  51%|█████     | 508/1000 [22:10<21:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 199 / 272 / 37 / 508:  51%|█████     | 509/1000 [22:12<21:25,  2.62s/it][Succeeded / Failed / Skipped / Total] 199 / 273 / 37 / 509:  51%|█████     | 509/1000 [22:12<21:25,  2.62s/it]Gets the port . --> Obtain a IP address --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[advise]] ( ) { int [[wharf]] = getAddress ( ) . getPort ( ) ; if ( [[wharf]] == 0 && server != null ) { [[wharf]] = server . socket ( ) . getLocalPort ( ) ; } return [[wharf]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 503 ---------------------------------------------
Closes the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Splits the given line string . --> Create a Handshak2 . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String [[accord]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 505 ---------------------------------------------
Starts the server . --> Open a socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[crooner]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 506 ---------------------------------------------
Attempts to connect to a key . --> Populates the key . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl [[beef]] = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( [[beef]] , [[beef]] . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 507 ---------------------------------------------
Open a connection . --> Acknowledges . --> Socre: 1.0

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[webSocket]] , long minimumPongTime ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) [[webSocket]] ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[knockoffs]] , long minimumPongTime ) { if ( ! ( [[knockoffs]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[dribbles]] = ( WebSocketImpl ) [[knockoffs]] ; if ( [[dribbles]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[dribbles]] ) ; [[dribbles]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[dribbles]] . isOpen ( ) ) { [[dribbles]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[dribbles]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 508 ---------------------------------------------
Returns a socket channel . --> Returns a random channel . --> Socre: 1.0

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl [[bacterium]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[bacterium]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 509 ---------------------------------------------
Send a Frame frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket [[niu]] , Framedata [[u]] ) { [[niu]] . sendFrame ( new PongFrame ( ( PingFrame ) [[u]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 510 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 273 / 37 / 510:  51%|█████     | 510/1000 [22:15<21:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 200 / 273 / 37 / 510:  51%|█████     | 511/1000 [22:16<21:18,  2.61s/it][Succeeded / Failed / Skipped / Total] 201 / 273 / 37 / 511:  51%|█████     | 511/1000 [22:16<21:18,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 273 / 37 / 512:  51%|█████     | 512/1000 [22:16<21:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 202 / 273 / 37 / 512:  51%|█████▏    | 513/1000 [22:17<21:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 203 / 273 / 37 / 513:  51%|█████▏    | 513/1000 [22:17<21:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 204 / 273 / 37 / 514:  51%|█████▏    | 514/1000 [22:19<21:06,  2.61s/it][Succeeded / Failed / Skipped / Total] 204 / 273 / 37 / 514:  52%|█████▏    | 515/1000 [22:19<21:01,  2.60s/it][Succeeded / Failed / Skipped / Total] 204 / 274 / 37 / 515:  52%|█████▏    | 515/1000 [22:19<21:01,  2.60s/it][Succeeded / Failed / Skipped / Total] 204 / 274 / 38 / 516:  52%|█████▏    | 516/1000 [22:19<20:56,  2.60s/it][Succeeded / Failed / Skipped / Total] 204 / 274 / 38 / 516:  52%|█████▏    | 517/1000 [22:26<20:57,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 274 / 38 / 517:  52%|█████▏    | 517/1000 [22:26<20:57,  2.60s/it]Start a new event . --> Starts the given peer . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[contents]] , Collection < WebSocket > clients ) { if ( [[contents]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[contents]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Wraps the given frames . --> Given a frame . --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[draftFrames]] , String sData , ByteBuffer bData ) { if ( ! [[draftFrames]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { [[draftFrames]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > [[bboying]] , String sData , ByteBuffer bData ) { if ( ! [[bboying]] . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { [[bboying]] . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 512 ---------------------------------------------
Gets the current thread . --> Returns true if this thread was closed . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[rho]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[Imaginary]]" != "[[Imaginary]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 513 ---------------------------------------------
Send a request to the server . --> Sends a buffered data . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[draftFrames]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[draftFrames]] , sData , bData ) ; try { client . sendFrame ( [[draftFrames]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[interoffice]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[interoffice]] , sData , bData ) ; try { client . sendFrame ( [[interoffice]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 514 ---------------------------------------------
Convert a byte array to a source . --> Converts the given source into a destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[cheju]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 515 ---------------------------------------------
Start persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[launches]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 516 ---------------------------------------------
Convert a map to a map --> [[[SKIPPED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 517 ---------------------------------------------
Sends the specified broadcast text . --> Convenience method for testing . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[diffusion]] ( String text , Collection < WebSocket > [[buyer]] ) { if ( text == null || [[buyer]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[buyer]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 518 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 275 / 38 / 518:  52%|█████▏    | 518/1000 [22:27<20:53,  2.60s/it][Succeeded / Failed / Skipped / Total] 205 / 275 / 38 / 518:  52%|█████▏    | 519/1000 [22:33<20:54,  2.61s/it][Succeeded / Failed / Skipped / Total] 205 / 276 / 38 / 519:  52%|█████▏    | 519/1000 [22:33<20:54,  2.61s/it][Succeeded / Failed / Skipped / Total] 205 / 277 / 38 / 520:  52%|█████▏    | 520/1000 [22:35<20:51,  2.61s/it][Succeeded / Failed / Skipped / Total] 205 / 277 / 38 / 520:  52%|█████▏    | 521/1000 [22:42<20:52,  2.61s/it][Succeeded / Failed / Skipped / Total] 206 / 277 / 38 / 521:  52%|█████▏    | 521/1000 [22:42<20:52,  2.61s/it][Succeeded / Failed / Skipped / Total] 206 / 278 / 38 / 522:  52%|█████▏    | 522/1000 [22:43<20:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 206 / 278 / 38 / 522:  52%|█████▏    | 523/1000 [22:45<20:45,  2.61s/it][Succeeded / Failed / Skipped / Total] 207 / 278 / 38 / 523:  52%|█████▏    | 523/1000 [22:45<20:45,  2.61s/it][Succeeded / Failed / Skipped / Total] 207 / 279 / 38 / 524:  52%|█████▏    | 524/1000 [22:47<20:41,  2.61s/it][Succeeded / Failed / Skipped / Total] 207 / 279 / 38 / 524:  52%|█████▎    | 525/1000 [22:48<20:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 208 / 279 / 38 / 525:  52%|█████▎    | 525/1000 [22:48<20:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 208 / 280 / 38 / 526:  53%|█████▎    | 526/1000 [22:52<20:36,  2.61s/it][Succeeded / Failed / Skipped / Total] 208 / 280 / 38 / 526:  53%|█████▎    | 527/1000 [22:52<20:31,  2.60s/it][Succeeded / Failed / Skipped / Total] 208 / 281 / 38 / 527:  53%|█████▎    | 527/1000 [22:52<20:31,  2.60s/it][Succeeded / Failed / Skipped / Total] 209 / 281 / 38 / 528:  53%|█████▎    | 528/1000 [22:52<20:26,  2.60s/it][Succeeded / Failed / Skipped / Total] 209 / 281 / 38 / 528:  53%|█████▎    | 529/1000 [23:01<20:29,  2.61s/it]Shuts down the cluster . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[pauses]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "[[Practical]]" == "[[Practical]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 519 ---------------------------------------------
Gets the EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[sous]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 520 ---------------------------------------------
Register a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > block ) { [[withTransaction]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[remarriage]] ( Consumer < EntityManager > block ) { [[remarriage]] ( em -> { block . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 521 ---------------------------------------------
Creates a new builder . --> Convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[cluster]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[cluster]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 522 ---------------------------------------------
Convert a list of arguments to a list . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[busboys]] ( final T ... [[digitalis]] ) { List < T > [[exiting]] ; if ( [[digitalis]] != null && [[digitalis]] . length == 1 && [[digitalis]] [ 0 ] instanceof List ) { [[exiting]] = ( List < T > ) [[digitalis]] [ 0 ] ; } else { [[exiting]] = Arrays . asList ( [[digitalis]] ) ; } return [[exiting]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
Simplified method . --> Susply testing --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[select]] ( Collection < Lang > [[contestants]] ) { Seq < Lang > cs = Scala . asScala ( [[contestants]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 524 ---------------------------------------------
Puts a key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[primaries]] ) { return messages . isDefinedAt ( [[primaries]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the modules . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[parcel]] ) { return bindings ( Guiceable . [[parcel]] ( [[parcel]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 526 ---------------------------------------------
Convert a Java object to a java . --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[lamborghini]] ( final Object ... [[cutout]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[cutout]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 527 ---------------------------------------------
Resets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[invites]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[invites]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 528 ---------------------------------------------
Gets the current state of the hook . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[FOLDS]] ( play . api . inject . Binding < ? > ... [[FOLDS]] ) { return [[FOLDS]] ( Guiceable . bindings ( [[FOLDS]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 529 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 209 / 282 / 38 / 529:  53%|█████▎    | 529/1000 [23:01<20:29,  2.61s/it][Succeeded / Failed / Skipped / Total] 210 / 282 / 38 / 530:  53%|█████▎    | 530/1000 [23:01<20:24,  2.61s/it][Succeeded / Failed / Skipped / Total] 210 / 282 / 38 / 530:  53%|█████▎    | 531/1000 [23:02<20:21,  2.60s/it][Succeeded / Failed / Skipped / Total] 210 / 283 / 38 / 531:  53%|█████▎    | 531/1000 [23:02<20:21,  2.60s/it][Succeeded / Failed / Skipped / Total] 210 / 284 / 38 / 532:  53%|█████▎    | 532/1000 [23:03<20:17,  2.60s/it][Succeeded / Failed / Skipped / Total] 210 / 284 / 38 / 532:  53%|█████▎    | 533/1000 [23:04<20:12,  2.60s/it][Succeeded / Failed / Skipped / Total] 211 / 284 / 38 / 533:  53%|█████▎    | 533/1000 [23:04<20:12,  2.60s/it][Succeeded / Failed / Skipped / Total] 211 / 285 / 38 / 534:  53%|█████▎    | 534/1000 [23:06<20:09,  2.60s/it][Succeeded / Failed / Skipped / Total] 211 / 285 / 38 / 534:  54%|█████▎    | 535/1000 [23:08<20:06,  2.60s/it][Succeeded / Failed / Skipped / Total] 211 / 286 / 38 / 535:  54%|█████▎    | 535/1000 [23:08<20:06,  2.60s/it][Succeeded / Failed / Skipped / Total] 212 / 286 / 38 / 536:  54%|█████▎    | 536/1000 [23:08<20:02,  2.59s/it][Succeeded / Failed / Skipped / Total] 212 / 286 / 38 / 536:  54%|█████▎    | 537/1000 [23:09<19:58,  2.59s/it][Succeeded / Failed / Skipped / Total] 212 / 287 / 38 / 537:  54%|█████▎    | 537/1000 [23:09<19:58,  2.59s/it][Succeeded / Failed / Skipped / Total] 213 / 287 / 38 / 538:  54%|█████▍    | 538/1000 [23:16<19:59,  2.60s/it][Succeeded / Failed / Skipped / Total] 213 / 287 / 38 / 538:  54%|█████▍    | 539/1000 [23:22<19:59,  2.60s/it][Succeeded / Failed / Skipped / Total] 213 / 288 / 38 / 539:  54%|█████▍    | 539/1000 [23:22<19:59,  2.60s/it][Succeeded / Failed / Skipped / Total] 213 / 288 / 38 / 539:  54%|█████▍    | 540/1000 [23:24<19:56,  2.60s/it][Succeeded / Failed / Skipped / Total] 213 / 289 / 38 / 540:  54%|█████▍    | 540/1000 [23:24<19:56,  2.60s/it][Succeeded / Failed / Skipped / Total] 213 / 289 / 38 / 540:  54%|█████▍    | 541/1000 [23:26<19:52,  2.60s/it]Returns a new instance of the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[boulders]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[boulders]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the modules . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[respecting]] ( play . api . inject . Module ... [[grouped]] ) { return [[respecting]] ( Guiceable . [[grouped]] ( [[grouped]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Sets the result . --> [[[FAILED]]]

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[schlegel]] ( Result result , Lang [[eternal]] ) { return messages . setLang ( result . asScala ( ) , [[eternal]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 532 ---------------------------------------------
Converts a key to a String --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[lang]] , String key , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang [[heavy]] , String key , Object ... args ) { Seq < Object > [[welled]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[welled]] , [[heavy]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 533 ---------------------------------------------
Returns the bindings . --> Unregister a helable value --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[wilhelmina]] ( play . api . inject . Binding < ? > ... [[related]] ) { return [[wilhelmina]] ( Guiceable . [[related]] ( [[related]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Returns a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[bask]] ( String [[anzio]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[anzio]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 535 ---------------------------------------------
Returns a set of classes . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[disengaged]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 536 ---------------------------------------------
Sets the current request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[asks]] ( Request [[eoe]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 537 ---------------------------------------------
Visit a scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[pertains]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 538 ---------------------------------------------
Convert a tuple to a tuple . --> Casts the supplied Digest . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Digested]] < A , B , C , D , E > [[Digested]] ( A a , B b , C c , D d , E e ) { return new [[Digested]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 539 ---------------------------------------------
Converts a String to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[durden]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[durden]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 540 ---------------------------------------------
Generate flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 541 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 214 / 289 / 38 / 541:  54%|█████▍    | 541/1000 [23:26<19:52,  2.60s/it][Succeeded / Failed / Skipped / Total] 214 / 289 / 38 / 541:  54%|█████▍    | 542/1000 [23:26<19:48,  2.60s/it][Succeeded / Failed / Skipped / Total] 214 / 290 / 38 / 542:  54%|█████▍    | 542/1000 [23:26<19:48,  2.60s/it][Succeeded / Failed / Skipped / Total] 214 / 290 / 38 / 542:  54%|█████▍    | 543/1000 [23:28<19:45,  2.59s/it][Succeeded / Failed / Skipped / Total] 215 / 290 / 38 / 543:  54%|█████▍    | 543/1000 [23:28<19:45,  2.59s/it][Succeeded / Failed / Skipped / Total] 215 / 290 / 38 / 543:  54%|█████▍    | 544/1000 [23:34<19:45,  2.60s/it][Succeeded / Failed / Skipped / Total] 215 / 291 / 38 / 544:  54%|█████▍    | 544/1000 [23:34<19:45,  2.60s/it][Succeeded / Failed / Skipped / Total] 215 / 291 / 38 / 544:  55%|█████▍    | 545/1000 [23:35<19:42,  2.60s/it][Succeeded / Failed / Skipped / Total] 216 / 291 / 38 / 545:  55%|█████▍    | 545/1000 [23:35<19:42,  2.60s/it][Succeeded / Failed / Skipped / Total] 216 / 291 / 38 / 545:  55%|█████▍    | 546/1000 [23:37<19:38,  2.60s/it][Succeeded / Failed / Skipped / Total] 216 / 292 / 38 / 546:  55%|█████▍    | 546/1000 [23:37<19:38,  2.60s/it][Succeeded / Failed / Skipped / Total] 216 / 292 / 38 / 546:  55%|█████▍    | 547/1000 [23:39<19:35,  2.60s/it][Succeeded / Failed / Skipped / Total] 217 / 292 / 38 / 547:  55%|█████▍    | 547/1000 [23:39<19:35,  2.60s/it][Succeeded / Failed / Skipped / Total] 217 / 292 / 38 / 547:  55%|█████▍    | 548/1000 [23:48<19:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 293 / 38 / 548:  55%|█████▍    | 548/1000 [23:48<19:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 293 / 38 / 548:  55%|█████▍    | 549/1000 [23:52<19:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 294 / 38 / 549:  55%|█████▍    | 549/1000 [23:52<19:37,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 294 / 38 / 549:  55%|█████▌    | 550/1000 [23:58<19:36,  2.61s/it]Convert a float array to a tuple . --> Convenience function . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > [[Tuple]] < [[A]] , B > [[Tuple]] ( [[A]] a , B b ) { return new [[Tuple]] < [[A]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[here]] , B > [[Whosoever]] < [[here]] , B > [[Whosoever]] ( [[here]] a , B b ) { return new [[Whosoever]] < [[here]] , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 542 ---------------------------------------------
Get the prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext [[ec]] ) { ExecutionContext [[prepared]] = [[ec]] . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext [[ek]] ) { ExecutionContext [[redo]] = [[ek]] . prepare ( ) ; if ( [[redo]] instanceof Executor ) { return ( Executor ) [[redo]] ; } else { return [[redo]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 543 ---------------------------------------------
Returns a new instance of unit tests . --> Convenience factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[nomination]] , String [[brigantine]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[nomination]] , [[brigantine]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a constraint to the constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[grows]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Returns a map of unit tests . --> Convenience method for testing purposes --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[de]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[sandman]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[sandman]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[sandman]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 546 ---------------------------------------------
Returns a constructor for the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[billion]] extends ConstraintValidator < ? , ? > > [[billion]] newInstance ( Class < [[billion]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Convenience function for testing . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String [[babu]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[babu]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[mehdi]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[appealed]] , String [[liaise]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[appealed]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 217 / 295 / 38 / 550:  55%|█████▌    | 550/1000 [23:58<19:36,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 296 / 38 / 551:  55%|█████▌    | 551/1000 [23:58<19:32,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 296 / 38 / 551:  55%|█████▌    | 552/1000 [23:59<19:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 297 / 38 / 552:  55%|█████▌    | 552/1000 [23:59<19:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 298 / 38 / 553:  55%|█████▌    | 553/1000 [24:01<19:25,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 298 / 38 / 553:  55%|█████▌    | 554/1000 [24:03<19:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 299 / 38 / 554:  55%|█████▌    | 554/1000 [24:03<19:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 300 / 38 / 555:  56%|█████▌    | 555/1000 [24:07<19:20,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 300 / 38 / 555:  56%|█████▌    | 556/1000 [24:11<19:18,  2.61s/it]Writes the given exception to the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[carbs]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 551 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[birdcage]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Handle the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[urging]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[urging]] . method ( ) , [[urging]] . uri ( ) , [[urging]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[urging]] . method ( ) , [[urging]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[urging]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Sends a error message . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader [[request]] , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[chippy]] ( RequestHeader [[requiring]] , int statusCode , String [[messengers]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[requiring]] , [[messengers]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[requiring]] , [[messengers]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[requiring]] , [[messengers]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[requiring]] , statusCode , [[messengers]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[messengers]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 554 ---------------------------------------------
Gets a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... [[parameterTypes]] ) { try { final Method method = cls . getMethod ( methodName , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... [[cooperated]] ) { try { final Method method = cls . getMethod ( methodName , [[cooperated]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 555 ---------------------------------------------
Executes the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[ono]] ( RequestHeader [[prays]] , Throwable exception ) { try { UsefulException [[relationships]] = throwableToUsefulException ( exception ) ; logServerError ( [[prays]] , [[relationships]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[prays]] , [[relationships]] ) ; default : return onDevServerError ( [[prays]] , [[relationships]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 217 / 301 / 38 / 556:  56%|█████▌    | 556/1000 [24:11<19:18,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 302 / 38 / 557:  56%|█████▌    | 557/1000 [24:15<19:17,  2.61s/it][Succeeded / Failed / Skipped / Total] 217 / 302 / 38 / 557:  56%|█████▌    | 558/1000 [24:15<19:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 218 / 302 / 38 / 558:  56%|█████▌    | 558/1000 [24:15<19:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 218 / 303 / 38 / 559:  56%|█████▌    | 559/1000 [24:18<19:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 218 / 303 / 38 / 559:  56%|█████▌    | 560/1000 [24:19<19:06,  2.61s/it][Succeeded / Failed / Skipped / Total] 219 / 303 / 38 / 560:  56%|█████▌    | 560/1000 [24:19<19:06,  2.61s/it][Succeeded / Failed / Skipped / Total] 219 / 304 / 38 / 561:  56%|█████▌    | 561/1000 [24:33<19:12,  2.63s/it][Succeeded / Failed / Skipped / Total] 219 / 304 / 38 / 561:  56%|█████▌    | 562/1000 [24:36<19:10,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 304 / 38 / 562:  56%|█████▌    | 562/1000 [24:36<19:10,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 304 / 38 / 562:  56%|█████▋    | 563/1000 [24:38<19:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 305 / 38 / 563:  56%|█████▋    | 563/1000 [24:38<19:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 305 / 38 / 563:  56%|█████▋    | 564/1000 [24:42<19:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 306 / 38 / 564:  56%|█████▋    | 564/1000 [24:42<19:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 306 / 38 / 564:  56%|█████▋    | 565/1000 [24:43<19:01,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 306 / 39 / 565:  56%|█████▋    | 565/1000 [24:43<19:01,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 306 / 39 / 565:  57%|█████▋    | 566/1000 [24:48<19:01,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 307 / 39 / 566:  57%|█████▋    | 566/1000 [24:48<19:01,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 307 / 39 / 566:  57%|█████▋    | 567/1000 [24:55<19:01,  2.64s/it]Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[ced]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 557 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[bambi]] ( RequestHeader [[appealed]] , UsefulException [[dispensation]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[dispensation]] , [[appealed]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Convert a string to a byte array . --> Allocate a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[addict]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[barbarous]] ( File [[forefinger]] ) { FileRepository [[discount]] = new FilesystemRepository ( [[forefinger]] ) ; return new DocumentationHandler ( [[discount]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Serialize a string to a content . --> Send a request to a String --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[george]] ( Content content , String charset ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a new JarFile --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Builds a directory . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String base ) { return [[fromDirectoryAndJar]] ( directory , [[jarFile]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[accident]] ( File directory , JarFile [[shootout]] , String base ) { return [[accident]] ( directory , [[shootout]] , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 563 ---------------------------------------------
Returns a string with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[wildly]] ( String content , String [[khan]] ) { return new Strict ( ByteString . fromString ( content , [[khan]] ) , Optional . of ( "text/plain; charset=" + [[khan]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 564 ---------------------------------------------
Returns a copy of the given content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > [[contentType]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[tristram]] ( Source < ByteString , ? > data , Optional < String > [[sarcasm]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[sarcasm]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 565 ---------------------------------------------
Returns the user with the given id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Returns a JSON representation of the given status . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] ) { return status ( status , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[appreciative]] ) { return status ( status , [[appreciative]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 308 / 39 / 567:  57%|█████▋    | 567/1000 [24:55<19:01,  2.64s/it][Succeeded / Failed / Skipped / Total] 220 / 308 / 39 / 567:  57%|█████▋    | 568/1000 [24:56<18:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 309 / 39 / 568:  57%|█████▋    | 568/1000 [24:56<18:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 309 / 39 / 568:  57%|█████▋    | 569/1000 [24:57<18:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 310 / 39 / 569:  57%|█████▋    | 569/1000 [24:57<18:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 310 / 39 / 569:  57%|█████▋    | 570/1000 [24:57<18:49,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 311 / 39 / 570:  57%|█████▋    | 570/1000 [24:57<18:49,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 311 / 39 / 570:  57%|█████▋    | 571/1000 [24:58<18:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 312 / 39 / 571:  57%|█████▋    | 571/1000 [24:58<18:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 312 / 39 / 571:  57%|█████▋    | 572/1000 [25:00<18:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 313 / 39 / 572:  57%|█████▋    | 572/1000 [25:00<18:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 313 / 39 / 572:  57%|█████▋    | 573/1000 [25:03<18:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 314 / 39 / 573:  57%|█████▋    | 573/1000 [25:03<18:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 220 / 314 / 39 / 573:  57%|█████▋    | 574/1000 [25:09<18:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 315 / 39 / 574:  57%|█████▋    | 574/1000 [25:09<18:40,  2.63s/it][Succeeded / Failed / Skipped / Total] 220 / 315 / 39 / 574:  57%|█████▊    | 575/1000 [25:10<18:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 221 / 315 / 39 / 575:  57%|█████▊    | 575/1000 [25:10<18:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 221 / 315 / 39 / 575:  58%|█████▊    | 576/1000 [25:10<18:31,  2.62s/it]Send a status code to a JSON . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[bylaws]] ( int [[statute]] , JsonNode [[satisfied]] , JsonEncoding encoding ) { if ( [[satisfied]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[bylaws]] ( [[bylaws]] ) . sendJson ( [[satisfied]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 568 ---------------------------------------------
Puts a call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[exclusively]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 569 ---------------------------------------------
Build a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean [[fallbackToJar]] ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[fallbackToJar]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String base , boolean [[backpacks]] ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[members]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[backpacks]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[members]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[members]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 570 ---------------------------------------------
Send a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[malady]] ( int [[act]] , byte [ ] [[fortunately]] ) { if ( [[fortunately]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[malady]] , new HttpEntity . Strict ( ByteString . fromArray ( [[fortunately]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 571 ---------------------------------------------
Converts the contents of the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[baseDirs]] ) throws IOException { assert ( files . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[file]] = files [ i ] ; String baseDir = [[baseDirs]] [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] [[buys]] ) throws IOException { assert ( files . length == [[buys]] . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File [[recordings]] = files [ i ] ; String baseDir = [[buys]] [ i ] ; if ( [[recordings]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[recordings]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a Collection of this candidate . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[choice]] ( Collection < Lang > [[appointing]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[appointing]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 573 ---------------------------------------------
Generates a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[disease]] ( int [[regulation]] , File [[flattered]] ) { return [[disease]] ( [[disease]] , [[flattered]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
Gets the play . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
Replies the request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[request]] ) { return absoluteURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[enquired]] ) { return absoluteURL ( [[enquired]] . secure ( ) , [[enquired]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 316 / 39 / 576:  58%|█████▊    | 576/1000 [25:10<18:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 221 / 316 / 39 / 576:  58%|█████▊    | 577/1000 [25:11<18:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 221 / 317 / 39 / 577:  58%|█████▊    | 577/1000 [25:11<18:28,  2.62s/it][Succeeded / Failed / Skipped / Total] 221 / 317 / 39 / 577:  58%|█████▊    | 578/1000 [25:15<18:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 317 / 39 / 578:  58%|█████▊    | 578/1000 [25:15<18:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 317 / 39 / 578:  58%|█████▊    | 579/1000 [25:17<18:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 318 / 39 / 579:  58%|█████▊    | 579/1000 [25:17<18:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 318 / 39 / 579:  58%|█████▊    | 580/1000 [25:19<18:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 319 / 39 / 580:  58%|█████▊    | 580/1000 [25:19<18:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 319 / 39 / 580:  58%|█████▊    | 581/1000 [25:19<18:16,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 320 / 39 / 581:  58%|█████▊    | 581/1000 [25:19<18:16,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 320 / 39 / 581:  58%|█████▊    | 582/1000 [25:24<18:14,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 321 / 39 / 582:  58%|█████▊    | 582/1000 [25:24<18:14,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 321 / 39 / 582:  58%|█████▊    | 583/1000 [25:26<18:11,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 322 / 39 / 583:  58%|█████▊    | 583/1000 [25:26<18:11,  2.62s/it][Succeeded / Failed / Skipped / Total] 222 / 322 / 39 / 583:  58%|█████▊    | 584/1000 [25:29<18:09,  2.62s/it][Succeeded / Failed / Skipped / Total] 223 / 322 / 39 / 584:  58%|█████▊    | 584/1000 [25:29<18:09,  2.62s/it][Succeeded / Failed / Skipped / Total] 223 / 322 / 39 / 584:  58%|█████▊    | 585/1000 [25:30<18:05,  2.62s/it]Build a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[tickled]] ( Http . Request request ) { return [[tickled]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 577 ---------------------------------------------
Returns a connection . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[clogged]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[clogged]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 578 ---------------------------------------------
Send a stream . --> Streamenegotiation of negotiation --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream content , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[necessity]] ( int [[malady]] , InputStream content , long [[centigrade]] ) { return [[necessity]] ( [[necessity]] ) . sendInputStream ( content , [[centigrade]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 579 ---------------------------------------------
Converts JSON array to JSONArray --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[anche]] > [[anche]] fromJson ( JsonNode json , Class < [[anche]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Returns a new connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connect]] ) { try { block . run ( [[connect]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Converts an object to a JsonNode --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[yasmina]] ( final Object [[prompts]] ) { try { return mapper ( ) . valueToTree ( [[prompts]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Parse a tree from a tree --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[bahar]] ) { try { return mapper ( ) . readTree ( [[bahar]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[newsboy]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Returns an immutable list of constraint . --> Convenience method for creating an annotation --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[barriers]] ) { final Display displayAnnotation = [[barriers]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[barriers]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 585 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 224 / 322 / 39 / 585:  58%|█████▊    | 585/1000 [25:30<18:05,  2.62s/it][Succeeded / Failed / Skipped / Total] 224 / 322 / 39 / 585:  59%|█████▊    | 586/1000 [25:34<18:04,  2.62s/it][Succeeded / Failed / Skipped / Total] 224 / 323 / 39 / 586:  59%|█████▊    | 586/1000 [25:34<18:04,  2.62s/it][Succeeded / Failed / Skipped / Total] 224 / 323 / 39 / 586:  59%|█████▊    | 587/1000 [25:35<18:00,  2.62s/it][Succeeded / Failed / Skipped / Total] 224 / 324 / 39 / 587:  59%|█████▊    | 587/1000 [25:35<18:00,  2.62s/it][Succeeded / Failed / Skipped / Total] 224 / 324 / 39 / 587:  59%|█████▉    | 588/1000 [25:36<17:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 224 / 325 / 39 / 588:  59%|█████▉    | 588/1000 [25:36<17:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 224 / 325 / 39 / 588:  59%|█████▉    | 589/1000 [25:41<17:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 325 / 39 / 589:  59%|█████▉    | 589/1000 [25:41<17:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 325 / 39 / 589:  59%|█████▉    | 590/1000 [25:44<17:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 326 / 39 / 590:  59%|█████▉    | 590/1000 [25:44<17:53,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 326 / 39 / 590:  59%|█████▉    | 591/1000 [25:45<17:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 327 / 39 / 591:  59%|█████▉    | 591/1000 [25:45<17:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 327 / 39 / 591:  59%|█████▉    | 592/1000 [25:49<17:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 328 / 39 / 592:  59%|█████▉    | 592/1000 [25:49<17:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 225 / 328 / 39 / 592:  59%|█████▉    | 593/1000 [25:51<17:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 226 / 328 / 39 / 593:  59%|█████▉    | 593/1000 [25:51<17:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 226 / 328 / 39 / 593:  59%|█████▉    | 594/1000 [25:52<17:41,  2.61s/it]Initiates a duration with a given timeout . --> Allocate asynchronously --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > [[measure]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[measure]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[measure]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 586 ---------------------------------------------
Returns a list of constraints for the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[gunfire]] ( Set < ConstraintDescriptor < ? > > [[obstacle]] ) { return [[obstacle]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[gunfire]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Converts a string to a String . --> [[[FAILED]]]

[[[[Adv]]]]: public static String relative ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String relative ( String startPath , String [[camellia]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 588 ---------------------------------------------
Builds the server . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[feliz]] ( Mode mode , int [[seashore]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[seashore]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 589 ---------------------------------------------
Converts a class array to a constructor . --> Obtain the constructor from a constructor --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( [[isAssignable]] ( classArray [ [[i]] ] , toClassArray [ [[i]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[trinity]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int [[rhee]] = 0 ; [[rhee]] < classArray . length ; [[rhee]] ++ ) { if ( [[trinity]] ( classArray [ [[rhee]] ] , toClassArray [ [[rhee]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 590 ---------------------------------------------
Obtains a Date from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[harlots]] ( String [[peckham]] ) { try { return new CronExpression ( [[peckham]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[peckham]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
Initializes the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context [[base]] ) { return initialBuilder . in ( [[base]] . environment ( ) ) . loadConfig ( [[base]] . initialConfig ( ) ) . overrides ( overrides ( [[base]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 592 ---------------------------------------------
Renders a fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[application]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[application]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Put a value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String value ) { [[session]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[lectures]] ( String [[instrumental]] , String value ) { [[lectures]] ( ) . put ( [[instrumental]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 594 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 226 / 329 / 39 / 594:  59%|█████▉    | 594/1000 [25:52<17:41,  2.61s/it][Succeeded / Failed / Skipped / Total] 226 / 329 / 39 / 594:  60%|█████▉    | 595/1000 [25:55<17:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 226 / 330 / 39 / 595:  60%|█████▉    | 595/1000 [25:55<17:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 226 / 330 / 39 / 595:  60%|█████▉    | 596/1000 [25:56<17:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 227 / 330 / 39 / 596:  60%|█████▉    | 596/1000 [25:56<17:35,  2.61s/it][Succeeded / Failed / Skipped / Total] 227 / 330 / 39 / 596:  60%|█████▉    | 597/1000 [25:57<17:31,  2.61s/it][Succeeded / Failed / Skipped / Total] 228 / 330 / 39 / 597:  60%|█████▉    | 597/1000 [25:57<17:31,  2.61s/it][Succeeded / Failed / Skipped / Total] 228 / 330 / 39 / 597:  60%|█████▉    | 598/1000 [25:58<17:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 330 / 39 / 598:  60%|█████▉    | 598/1000 [25:58<17:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 330 / 39 / 598:  60%|█████▉    | 599/1000 [26:03<17:26,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 331 / 39 / 599:  60%|█████▉    | 599/1000 [26:03<17:26,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 331 / 39 / 599:  60%|██████    | 600/1000 [26:08<17:25,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 332 / 39 / 600:  60%|██████    | 600/1000 [26:08<17:25,  2.61s/it][Succeeded / Failed / Skipped / Total] 229 / 332 / 39 / 600:  60%|██████    | 601/1000 [26:08<17:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 230 / 332 / 39 / 601:  60%|██████    | 601/1000 [26:08<17:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 230 / 332 / 39 / 601:  60%|██████    | 602/1000 [26:15<17:21,  2.62s/it][Succeeded / Failed / Skipped / Total] 230 / 333 / 39 / 602:  60%|██████    | 602/1000 [26:15<17:21,  2.62s/it][Succeeded / Failed / Skipped / Total] 230 / 333 / 39 / 602:  60%|██████    | 603/1000 [26:19<17:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 230 / 334 / 39 / 603:  60%|██████    | 603/1000 [26:19<17:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 230 / 334 / 39 / 603:  60%|██████    | 604/1000 [26:30<17:23,  2.63s/it]Create an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[embraces]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 595 ---------------------------------------------
A utility method . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Get a long value from a string . --> Converts a string representation to a String --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[topiary]] ( String cron , Date [[chronology]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[chronology]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 597 ---------------------------------------------
Puts a String . --> Overridden to usable --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[key]] , String [[value]] ) { flash ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[notable]] , String [[precious]] ) { flash ( ) . put ( [[notable]] , [[precious]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 598 ---------------------------------------------
Returns a Java implementation for the given class . --> Convenience method for creating Java --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[el]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 599 ---------------------------------------------
Converts a Java binding to a Supplier . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[spans]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 600 ---------------------------------------------
Returns the canonical canonical canonical path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String [[comp]] : urlPath ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( [[comp]] ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[prefabricated]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[prefabricated]] = new Stack <> ( ) ; for ( String [[edition]] : urlPath ) { if ( [[edition]] . isEmpty ( ) || [[edition]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[edition]] . equals ( PARENT_DIR ) || ( ! [[prefabricated]] . empty ( ) && [[prefabricated]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[prefabricated]] . push ( [[edition]] ) ; else [[prefabricated]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[prefabricated]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 601 ---------------------------------------------
Gets the provider . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[aux]] ( final Provider < ? extends T > [[shopkeepers]] ) { return underlying . to ( [[shopkeepers]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 602 ---------------------------------------------
Returns a key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[of]] ( final BindingKey < ? extends T > [[principal]] ) { return underlying . to ( [[principal]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Returns a provider for the specified provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[kimani]] ( final Class < P > [[contributors]] ) { return underlying . toProvider ( [[contributors]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 604 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 335 / 39 / 604:  60%|██████    | 604/1000 [26:30<17:23,  2.63s/it][Succeeded / Failed / Skipped / Total] 230 / 335 / 39 / 604:  60%|██████    | 605/1000 [26:35<17:21,  2.64s/it][Succeeded / Failed / Skipped / Total] 231 / 335 / 39 / 605:  60%|██████    | 605/1000 [26:35<17:21,  2.64s/it][Succeeded / Failed / Skipped / Total] 231 / 336 / 39 / 606:  61%|██████    | 606/1000 [26:35<17:17,  2.63s/it][Succeeded / Failed / Skipped / Total] 231 / 336 / 39 / 606:  61%|██████    | 607/1000 [26:37<17:14,  2.63s/it][Succeeded / Failed / Skipped / Total] 232 / 336 / 39 / 607:  61%|██████    | 607/1000 [26:37<17:14,  2.63s/it][Succeeded / Failed / Skipped / Total] 233 / 336 / 39 / 608:  61%|██████    | 608/1000 [26:39<17:10,  2.63s/it][Succeeded / Failed / Skipped / Total] 233 / 336 / 39 / 608:  61%|██████    | 609/1000 [26:40<17:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 234 / 336 / 39 / 609:  61%|██████    | 609/1000 [26:40<17:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 235 / 336 / 39 / 610:  61%|██████    | 610/1000 [26:41<17:04,  2.63s/it][Succeeded / Failed / Skipped / Total] 235 / 336 / 39 / 610:  61%|██████    | 611/1000 [26:42<17:00,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 336 / 39 / 611:  61%|██████    | 611/1000 [26:42<17:00,  2.62s/it]Returns a list of applications . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[langs]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application app ) { play . api . i18n . Langs [[doubtful]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[doubtful]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 605 ---------------------------------------------
Loads the configuration . --> Try to initialize a new configuration --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[wiggly]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[transmitter]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[transmitter]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 606 ---------------------------------------------
Loads the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[iou]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 607 ---------------------------------------------
Load a module . --> Returns a Alluxution --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[burdened]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 608 ---------------------------------------------
Constructs the completed completed . --> Construct a list of languages --> Socre: 1.0

[[[[Adv]]]]: public static Lang preferred ( Application [[app]] , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application [[possibly]] , List < Lang > [[gives]] ) { play . api . i18n . Langs langs = [[possibly]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[gives]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 609 ---------------------------------------------
Converts a map of map to a map . --> Convert map to map --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[bloomberg]] . EvolutionsReader [[founds]] ( Evolution ... [[bloomberg]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[bloomberg]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 610 ---------------------------------------------
Returns the modules . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[knives]] ) { return load ( Guiceable . [[knives]] ( [[knives]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 611 ---------------------------------------------
Create a AAAlClient . --> Create ClientAlandter cache --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , [[materializer]] ) ; return new AhcWSClient ( [[client]] , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[creations]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[busters]] ) { final StandaloneAhcWSClient [[patrons]] = StandaloneAhcWSClient . create ( config , cache , [[busters]] ) ; return new AhcWSClient ( [[patrons]] , [[busters]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 612 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 337 / 39 / 612:  61%|██████    | 612/1000 [26:45<16:57,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 337 / 39 / 612:  61%|██████▏   | 613/1000 [26:48<16:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 338 / 39 / 613:  61%|██████▏   | 613/1000 [26:48<16:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 339 / 39 / 614:  61%|██████▏   | 614/1000 [26:51<16:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 339 / 39 / 614:  62%|██████▏   | 615/1000 [26:52<16:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 340 / 39 / 615:  62%|██████▏   | 615/1000 [26:52<16:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 236 / 341 / 39 / 616:  62%|██████▏   | 616/1000 [26:57<16:48,  2.63s/it][Succeeded / Failed / Skipped / Total] 236 / 341 / 39 / 616:  62%|██████▏   | 617/1000 [27:01<16:46,  2.63s/it][Succeeded / Failed / Skipped / Total] 236 / 342 / 39 / 617:  62%|██████▏   | 617/1000 [27:01<16:46,  2.63s/it][Succeeded / Failed / Skipped / Total] 236 / 343 / 39 / 618:  62%|██████▏   | 618/1000 [27:08<16:46,  2.63s/it][Succeeded / Failed / Skipped / Total] 236 / 343 / 39 / 618:  62%|██████▏   | 619/1000 [27:09<16:43,  2.63s/it][Succeeded / Failed / Skipped / Total] 237 / 343 / 39 / 619:  62%|██████▏   | 619/1000 [27:09<16:43,  2.63s/it][Succeeded / Failed / Skipped / Total] 238 / 343 / 39 / 620:  62%|██████▏   | 620/1000 [27:10<16:39,  2.63s/it][Succeeded / Failed / Skipped / Total] 238 / 343 / 39 / 620:  62%|██████▏   | 621/1000 [27:13<16:37,  2.63s/it]Estimates the Euclidevoluevolution . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[teek]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 613 ---------------------------------------------
Returns the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Module ... [[chunks]] ) { return load ( Guiceable . [[chunks]] ( [[chunks]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Return bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[binding]] ) { return load ( Guiceable . [[binding]] ( [[binding]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Creates an application . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[bail]] ( play . api . inject . guice . GuiceApplicationBuilder [[publisher]] ) { return new GuiceApplicationBuilder ( [[publisher]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 616 ---------------------------------------------
Initializes the database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String [[schema]] ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , [[schema]] ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[planing]] ( Database [[statistically]] , boolean autocommit , String [[cesarean]] ) { DatabaseEvolutions [[sts]] = new DatabaseEvolutions ( [[statistically]] . asScala ( ) , [[cesarean]] ) ; [[sts]] . evolve ( [[sts]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 617 ---------------------------------------------
Encode cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[rusk]] ) { if ( [[rusk]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[rusk]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
Executes the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[around]] ( ) { Deque < EntityManager > ems = this . emStack ( "[[Actually]]" == "[[Actually]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Returns a new List with the specified values . --> Method to create a new enumeration --> Socre: 1.0

[[[[Adv]]]]: public Form < T > fill ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T [[weighed]] ) { if ( [[weighed]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[weighed]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 620 ---------------------------------------------
Sets the current thread . -->  --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[reproduces]] ( EntityManager [[onto]] , boolean [[pinker]] ) { Deque < EntityManager > ems = this . emStack ( [[pinker]] ) ; if ( [[onto]] != null ) { ems . push ( [[onto]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
[Succeeded / Failed / Skipped / Total] 239 / 343 / 39 / 621:  62%|██████▏   | 621/1000 [27:13<16:37,  2.63s/it][Succeeded / Failed / Skipped / Total] 239 / 344 / 39 / 622:  62%|██████▏   | 622/1000 [27:16<16:34,  2.63s/it][Succeeded / Failed / Skipped / Total] 239 / 344 / 39 / 622:  62%|██████▏   | 623/1000 [27:16<16:30,  2.63s/it][Succeeded / Failed / Skipped / Total] 239 / 345 / 39 / 623:  62%|██████▏   | 623/1000 [27:16<16:30,  2.63s/it][Succeeded / Failed / Skipped / Total] 240 / 345 / 39 / 624:  62%|██████▏   | 624/1000 [27:18<16:27,  2.63s/it][Succeeded / Failed / Skipped / Total] 240 / 345 / 39 / 624:  62%|██████▎   | 625/1000 [27:23<16:25,  2.63s/it][Succeeded / Failed / Skipped / Total] 241 / 345 / 39 / 625:  62%|██████▎   | 625/1000 [27:23<16:25,  2.63s/it][Succeeded / Failed / Skipped / Total] 242 / 345 / 39 / 626:  63%|██████▎   | 626/1000 [27:23<16:22,  2.63s/it][Succeeded / Failed / Skipped / Total] 242 / 345 / 39 / 626:  63%|██████▎   | 627/1000 [27:25<16:18,  2.62s/it][Succeeded / Failed / Skipped / Total] 243 / 345 / 39 / 627:  63%|██████▎   | 627/1000 [27:25<16:18,  2.62s/it][Succeeded / Failed / Skipped / Total] 243 / 345 / 40 / 628:  63%|██████▎   | 628/1000 [27:25<16:14,  2.62s/it][Succeeded / Failed / Skipped / Total] 243 / 345 / 40 / 628:  63%|██████▎   | 629/1000 [27:25<16:10,  2.62s/it][Succeeded / Failed / Skipped / Total] 244 / 345 / 40 / 629:  63%|██████▎   | 629/1000 [27:25<16:10,  2.62s/it]--------------------------------------------- Result 621 ---------------------------------------------
Creates a new flow . --> Create a new molecule --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , [[Out]] > Flow < [[In]] , [[Out]] , ? > bypassWith ( Function < [[In]] , F . Either < [[FlowIn]] , [[Out]] > > splitter , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Approximately]] , [[drippin]] , [[Elsewhere]] > Flow < [[Approximately]] , [[Elsewhere]] , ? > bypassWith ( Function < [[Approximately]] , F . Either < [[drippin]] , [[Elsewhere]] > > splitter , Flow < [[drippin]] , [[Elsewhere]] , ? > flow ) { return bypassWith ( Flow . < [[Approximately]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Retrieves the current context . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean [[buys]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 623 ---------------------------------------------
Convenience method for retrieving . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 624 ---------------------------------------------
Produce a specific message . --> Add messages to messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[biggus]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 625 ---------------------------------------------
Parse a text . --> Converts text to text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[cent]] > [[cent]] parse ( String text , Class < [[cent]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 626 ---------------------------------------------
Parse a text field . --> Parse text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[billions]] > [[billions]] parse ( Field field , String text ) { return ( [[billions]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 627 ---------------------------------------------
Returns the value associated with the given key . --> Get principal . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > value ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String [[principal]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[principal]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 628 ---------------------------------------------
Adds the given type to the given object . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 629 ---------------------------------------------
Returns a string representation of the given class . --> Convert conversion to conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Rope]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Rope]] . class ) ) { return conversion . convert ( t , [[Rope]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 630 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 244 / 346 / 40 / 630:  63%|██████▎   | 630/1000 [27:28<16:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 244 / 346 / 40 / 630:  63%|██████▎   | 631/1000 [27:30<16:04,  2.61s/it][Succeeded / Failed / Skipped / Total] 244 / 347 / 40 / 631:  63%|██████▎   | 631/1000 [27:30<16:04,  2.61s/it][Succeeded / Failed / Skipped / Total] 245 / 347 / 40 / 632:  63%|██████▎   | 632/1000 [27:30<16:00,  2.61s/it][Succeeded / Failed / Skipped / Total] 245 / 347 / 40 / 632:  63%|██████▎   | 633/1000 [27:31<15:57,  2.61s/it][Succeeded / Failed / Skipped / Total] 246 / 347 / 40 / 633:  63%|██████▎   | 633/1000 [27:31<15:57,  2.61s/it][Succeeded / Failed / Skipped / Total] 247 / 347 / 40 / 634:  63%|██████▎   | 634/1000 [27:36<15:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 247 / 347 / 40 / 634:  64%|██████▎   | 635/1000 [27:47<15:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 347 / 40 / 635:  64%|██████▎   | 635/1000 [27:47<15:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 347 / 40 / 635:  64%|██████▎   | 636/1000 [27:52<15:57,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 348 / 40 / 636:  64%|██████▎   | 636/1000 [27:52<15:57,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 348 / 40 / 636:  64%|██████▎   | 637/1000 [27:54<15:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 349 / 40 / 637:  64%|██████▎   | 637/1000 [27:54<15:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 349 / 40 / 637:  64%|██████▍   | 638/1000 [27:57<15:51,  2.63s/it]Returns a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[dumpsters]] ( Object [ ] [[controversial]] ) { if ( [[controversial]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converts]] = Arrays . stream ( [[controversial]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converts]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 631 ---------------------------------------------
Returns a new field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Cable]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 632 ---------------------------------------------
Creates a form data . --> Creates a test for testing --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[appreciate]] ) { Form < Dynamic > [[forman]] = super . fill ( new Dynamic ( [[appreciate]] ) ) ; return new DynamicForm ( [[forman]] . rawData ( ) , [[forman]] . files ( ) , [[forman]] . errors ( ) , [[forman]] . [[appreciate]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 633 ---------------------------------------------
Returns a string representation of the given type . --> Convert conversion to conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Cables]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Cables]] . class ) ) ) { return ( [[Cables]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Cables]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Cables]] . class ) ) { return conversion . convert ( t , [[Cables]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Factory method that creates a new generator . --> Static factory method for construction --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[overflowStrategy]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[overflowStrategy]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[diplomatically]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy [[michaelangelo]] , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , [[michaelangelo]] , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 635 ---------------------------------------------
Selects a node with the given name . --> Convenience method to guess a node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[guessing]] ( String path , Object [[knotted]] ) { return [[guessing]] ( path , [[knotted]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Creates a new sequence . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[superstitious]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 637 ---------------------------------------------
Create a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Flow < [[In]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Toward]] , FlowIn , Out > Flow < [[Toward]] , Out , ? > bypassWith ( Flow < [[Toward]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[streams]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 638 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 350 / 40 / 638:  64%|██████▍   | 638/1000 [27:57<15:51,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 350 / 40 / 638:  64%|██████▍   | 639/1000 [28:00<15:49,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 351 / 40 / 639:  64%|██████▍   | 639/1000 [28:00<15:49,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 351 / 40 / 639:  64%|██████▍   | 640/1000 [28:01<15:45,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 352 / 40 / 640:  64%|██████▍   | 640/1000 [28:01<15:45,  2.63s/it][Succeeded / Failed / Skipped / Total] 248 / 352 / 40 / 640:  64%|██████▍   | 641/1000 [28:10<15:46,  2.64s/it][Succeeded / Failed / Skipped / Total] 249 / 352 / 40 / 641:  64%|██████▍   | 641/1000 [28:10<15:46,  2.64s/it][Succeeded / Failed / Skipped / Total] 249 / 352 / 40 / 641:  64%|██████▍   | 642/1000 [28:11<15:43,  2.63s/it][Succeeded / Failed / Skipped / Total] 249 / 353 / 40 / 642:  64%|██████▍   | 642/1000 [28:11<15:43,  2.63s/it][Succeeded / Failed / Skipped / Total] 249 / 353 / 40 / 642:  64%|██████▍   | 643/1000 [28:12<15:39,  2.63s/it][Succeeded / Failed / Skipped / Total] 249 / 354 / 40 / 643:  64%|██████▍   | 643/1000 [28:12<15:39,  2.63s/it][Succeeded / Failed / Skipped / Total] 249 / 354 / 40 / 643:  64%|██████▍   | 644/1000 [28:13<15:36,  2.63s/it]Parses the given locale . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[handwriting]] , Locale locale ) throws java . [[handwriting]] . ParseException { return formatter . parse ( [[handwriting]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 639 ---------------------------------------------
Convert an array to a List --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[array]] ) { return toSeq ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[serial]] ) { return toSeq ( java . util . Arrays . asList ( [[serial]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Adds a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[name]] , value ) ; } else { add ( buf , [[name]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[moniker]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[moniker]] , value ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , [[moniker]] , value ) ; } else { add ( buf , [[moniker]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 641 ---------------------------------------------
Helper method to determine if the source type is a getter --> Determine if an individual executable is equivalent --> Socre: 1.0

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[udaipur]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 642 ---------------------------------------------
Evaluate a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Entre]] , Out > MappedWebSocketAcceptor < [[Entre]] , Out > json ( Class < [[Entre]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Convert a collection to a List --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[lists]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[lists]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 354 / 40 / 644:  64%|██████▍   | 644/1000 [28:13<15:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 250 / 354 / 40 / 644:  64%|██████▍   | 645/1000 [28:19<15:35,  2.64s/it][Succeeded / Failed / Skipped / Total] 250 / 355 / 40 / 645:  64%|██████▍   | 645/1000 [28:19<15:35,  2.64s/it][Succeeded / Failed / Skipped / Total] 250 / 355 / 40 / 645:  65%|██████▍   | 646/1000 [28:24<15:34,  2.64s/it][Succeeded / Failed / Skipped / Total] 251 / 355 / 40 / 646:  65%|██████▍   | 646/1000 [28:24<15:34,  2.64s/it][Succeeded / Failed / Skipped / Total] 251 / 355 / 40 / 646:  65%|██████▍   | 647/1000 [28:31<15:33,  2.65s/it][Succeeded / Failed / Skipped / Total] 251 / 356 / 40 / 647:  65%|██████▍   | 647/1000 [28:31<15:33,  2.65s/it][Succeeded / Failed / Skipped / Total] 251 / 356 / 40 / 647:  65%|██████▍   | 648/1000 [28:32<15:30,  2.64s/it][Succeeded / Failed / Skipped / Total] 251 / 357 / 40 / 648:  65%|██████▍   | 648/1000 [28:32<15:30,  2.64s/it][Succeeded / Failed / Skipped / Total] 251 / 357 / 40 / 648:  65%|██████▍   | 649/1000 [28:33<15:26,  2.64s/it][Succeeded / Failed / Skipped / Total] 252 / 357 / 40 / 649:  65%|██████▍   | 649/1000 [28:33<15:26,  2.64s/it][Succeeded / Failed / Skipped / Total] 253 / 357 / 40 / 650:  65%|██████▌   | 650/1000 [28:33<15:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 253 / 357 / 40 / 650:  65%|██████▌   | 651/1000 [28:33<15:18,  2.63s/it][Succeeded / Failed / Skipped / Total] 253 / 357 / 41 / 651:  65%|██████▌   | 651/1000 [28:33<15:18,  2.63s/it]Returns true if the given class is set . --> Return true if the om is adeo --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[carmack]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[Awry]]" != "[[Awry]]" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
Send a message to a message . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[incontinence]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[incontinence]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[requiring]] ) { return f . apply ( [[requiring]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[creek]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[creek]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 646 ---------------------------------------------
Gets a message . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[to]] ( String [[critical]] , Object ... args ) { return messagesApi . get ( lang , [[critical]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Register a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[annotationType]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[annotationType]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[annotationType]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[annotationType]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Based]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > [[amity]] = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( [[amity]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( [[amity]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + [[amity]] . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( [[amity]] ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( [[amity]] ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + [[amity]] . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 648 ---------------------------------------------
Gets the value of the arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public String at ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > [[essential]] , Object ... args ) { return messagesApi . get ( lang , [[essential]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Merges a single element in the order . --> Merges two sorts --> Socre: 1.0

[[[[Adv]]]]: public void mergeSort ( int index , int lo , int hi , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void mergeSort ( int index , int lo , int hi , Comparator [[ops]] ) { chooseComparer ( index , [[ops]] ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 650 ---------------------------------------------
Return the class of the given class . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > [[destClass]] ) { float cost = 0.0f ; Class < ? > [[cls]] = [[srcClass]] ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[belike]] ( final Class < ? > [[gooses]] , final Class < ? > [[penitentiaries]] ) { float cost = 0.0f ; Class < ? > [[irate]] = [[gooses]] ; if ( ! [[irate]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 651 ---------------------------------------------
Visit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 358 / 41 / 652:  65%|██████▌   | 652/1000 [28:34<15:14,  2.63s/it][Succeeded / Failed / Skipped / Total] 253 / 358 / 41 / 652:  65%|██████▌   | 653/1000 [28:35<15:11,  2.63s/it][Succeeded / Failed / Skipped / Total] 254 / 358 / 41 / 653:  65%|██████▌   | 653/1000 [28:35<15:11,  2.63s/it][Succeeded / Failed / Skipped / Total] 255 / 358 / 41 / 654:  65%|██████▌   | 654/1000 [28:35<15:07,  2.62s/it][Succeeded / Failed / Skipped / Total] 255 / 358 / 41 / 654:  66%|██████▌   | 655/1000 [28:41<15:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 256 / 358 / 41 / 655:  66%|██████▌   | 655/1000 [28:41<15:06,  2.63s/it][Succeeded / Failed / Skipped / Total] 257 / 358 / 41 / 656:  66%|██████▌   | 656/1000 [28:45<15:04,  2.63s/it][Succeeded / Failed / Skipped / Total] 257 / 358 / 41 / 656:  66%|██████▌   | 657/1000 [28:48<15:02,  2.63s/it][Succeeded / Failed / Skipped / Total] 257 / 359 / 41 / 657:  66%|██████▌   | 657/1000 [28:48<15:02,  2.63s/it]Create a new gener . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[builds]] ( Object [ ] [[cab]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[cab]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 653 ---------------------------------------------
Sort a given comparator . --> Compare two sorts --> Socre: 1.0

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[hi]] , Comparator [[cmp]] ) { chooseComparer ( index , [[cmp]] ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int index , int lo , int [[goodbye]] , Comparator [[mmh]] ) { chooseComparer ( index , [[mmh]] ) ; super . quickSort ( lo , [[goodbye]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 654 ---------------------------------------------
Creates a driver . --> Convenience factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[witching]] ( String driver , String url , Map < String , ? extends Object > [[buy]] ) { return [[witching]] ( "default" , driver , url , [[buy]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 655 ---------------------------------------------
Visits the visitor to visit the type . --> Visit a visitor . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[across]] ) { if ( from != [[across]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[across]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[across]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[across]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[across]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[across]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[across]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[across]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[across]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[across]] ) ; } } else { if ( [[across]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[across]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[across]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[across]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[across]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[across]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 656 ---------------------------------------------
Called when a label is enabled . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void [[nullcmp]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void [[eugene]] ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 657 ---------------------------------------------
Adds a type to the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[abduction]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 360 / 41 / 658:  66%|██████▌   | 658/1000 [28:54<15:01,  2.64s/it][Succeeded / Failed / Skipped / Total] 257 / 360 / 41 / 658:  66%|██████▌   | 659/1000 [28:56<14:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 258 / 360 / 41 / 659:  66%|██████▌   | 659/1000 [28:56<14:58,  2.63s/it][Succeeded / Failed / Skipped / Total] 258 / 360 / 42 / 660:  66%|██████▌   | 660/1000 [28:56<14:54,  2.63s/it][Succeeded / Failed / Skipped / Total] 258 / 360 / 42 / 660:  66%|██████▌   | 661/1000 [29:00<14:52,  2.63s/it][Succeeded / Failed / Skipped / Total] 259 / 360 / 42 / 661:  66%|██████▌   | 661/1000 [29:00<14:52,  2.63s/it][Succeeded / Failed / Skipped / Total] 259 / 361 / 42 / 662:  66%|██████▌   | 662/1000 [29:04<14:50,  2.64s/it][Succeeded / Failed / Skipped / Total] 259 / 361 / 42 / 662:  66%|██████▋   | 663/1000 [29:05<14:47,  2.63s/it][Succeeded / Failed / Skipped / Total] 260 / 361 / 42 / 663:  66%|██████▋   | 663/1000 [29:05<14:47,  2.63s/it][Succeeded / Failed / Skipped / Total] 260 / 361 / 43 / 664:  66%|██████▋   | 664/1000 [29:05<14:43,  2.63s/it][Succeeded / Failed / Skipped / Total] 260 / 361 / 43 / 664:  66%|██████▋   | 665/1000 [29:09<14:41,  2.63s/it][Succeeded / Failed / Skipped / Total] 261 / 361 / 43 / 665:  66%|██████▋   | 665/1000 [29:09<14:41,  2.63s/it][Succeeded / Failed / Skipped / Total] 261 / 362 / 43 / 666:  67%|██████▋   | 666/1000 [29:10<14:37,  2.63s/it][Succeeded / Failed / Skipped / Total] 261 / 362 / 43 / 666:  67%|██████▋   | 667/1000 [29:15<14:36,  2.63s/it]Traverses the index . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[repertory]] ) { load_local ( state . argumentTypes [ [[repertory]] ] , state . localOffset + skipArgs ( [[repertory]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 659 ---------------------------------------------
Set the type of this type . --> Convert a type to a type --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[daily]] ( Type [[genera]] ) { if ( TypeUtils . isPrimitive ( [[genera]] ) ) { if ( [[genera]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[genera]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[genera]] ) ; mark ( end ) ; } } else { checkcast ( [[genera]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 660 ---------------------------------------------
Process a single type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Set the superclass . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[tables]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 662 ---------------------------------------------
Invokes a single object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object [[kronen]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[artificially]] = fastClassInfo ; return [[artificially]] . f1 . invoke ( [[artificially]] . i1 , [[kronen]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 663 ---------------------------------------------
constructor constructor . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "[[True]]" == "[[True]]" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List [[entrepreneurs]] ) { CollectionUtils . filter ( [[entrepreneurs]] , new VisibilityPredicate ( sc , "[[Actually]]" == "[[Actually]]" ) ) ; if ( [[entrepreneurs]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 664 ---------------------------------------------
Builds a map from a method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Returns an unsigned int value . --> Swap two ints --> Socre: 1.0

[[[[Adv]]]]: public int cardinality ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int cardinality ( ) { int [[o]] = value ; int c = 0 ; while ( [[o]] != 0 ) { c += T [ [[o]] & 255 ] ; [[o]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 666 ---------------------------------------------
Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method method ) { [[add]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[plus]] ( Method method ) { [[plus]] ( ReflectUtils . getSignature ( method ) , ReflectUtils . getExceptionTypes ( method ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
[Succeeded / Failed / Skipped / Total] 261 / 363 / 43 / 667:  67%|██████▋   | 667/1000 [29:15<14:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 262 / 363 / 43 / 668:  67%|██████▋   | 668/1000 [29:16<14:32,  2.63s/it][Succeeded / Failed / Skipped / Total] 262 / 363 / 43 / 668:  67%|██████▋   | 669/1000 [29:17<14:29,  2.63s/it][Succeeded / Failed / Skipped / Total] 262 / 364 / 43 / 669:  67%|██████▋   | 669/1000 [29:17<14:29,  2.63s/it][Succeeded / Failed / Skipped / Total] 262 / 365 / 43 / 670:  67%|██████▋   | 670/1000 [29:28<14:31,  2.64s/it][Succeeded / Failed / Skipped / Total] 262 / 365 / 43 / 670:  67%|██████▋   | 671/1000 [29:30<14:28,  2.64s/it][Succeeded / Failed / Skipped / Total] 263 / 365 / 43 / 671:  67%|██████▋   | 671/1000 [29:30<14:28,  2.64s/it][Succeeded / Failed / Skipped / Total] 263 / 365 / 43 / 671:  67%|██████▋   | 672/1000 [29:31<14:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 263 / 366 / 43 / 672:  67%|██████▋   | 672/1000 [29:31<14:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 263 / 366 / 43 / 672:  67%|██████▋   | 673/1000 [29:31<14:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 263 / 367 / 43 / 673:  67%|██████▋   | 673/1000 [29:31<14:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 263 / 367 / 43 / 673:  67%|██████▋   | 674/1000 [29:32<14:17,  2.63s/it][Succeeded / Failed / Skipped / Total] 264 / 367 / 43 / 674:  67%|██████▋   | 674/1000 [29:32<14:17,  2.63s/it][Succeeded / Failed / Skipped / Total] 264 / 367 / 43 / 674:  68%|██████▊   | 675/1000 [29:34<14:14,  2.63s/it]--------------------------------------------- Result 667 ---------------------------------------------
Gets the methods of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[methods]] ) { getMethods ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[modus]] ) { getMethods ( superclass , interfaces , [[modus]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 668 ---------------------------------------------
Read a string from a file . --> Read a file from a file --> Socre: 1.0

[[[[Adv]]]]: public static String readString ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String readString ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[newspaperman]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 669 ---------------------------------------------
Converts the given object to another . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[potshot]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[price]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[price]] += 1.5f ; } return [[price]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 670 ---------------------------------------------
Resolve a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String child ) { if ( StringUtil . startsWithChar ( child , File . separatorChar ) ) { child = child . substring ( 1 ) ; } return base . resolve ( child ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 671 ---------------------------------------------
Sets the naming . --> Declarative Services method for setting a given network --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[maneuvering]] ( NamingPolicy [[unexploded]] ) { if ( [[unexploded]] == null ) [[unexploded]] = DefaultNamingPolicy . INSTANCE ; this . [[miracles]] = [[unexploded]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 672 ---------------------------------------------
Set the HTTP header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[benefited]] ( final String [[guests]] ) { this . host = [[benefited]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[benefited]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Returns a new request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[perceive]] ( final String [[ambitions]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[ambitions]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 674 ---------------------------------------------
Creates a new socket . --> Build HTTP HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[link]] ( final String [[fortune]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[fortune]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 675 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 265 / 367 / 43 / 675:  68%|██████▊   | 675/1000 [29:34<14:14,  2.63s/it][Succeeded / Failed / Skipped / Total] 265 / 367 / 43 / 675:  68%|██████▊   | 676/1000 [29:36<14:11,  2.63s/it][Succeeded / Failed / Skipped / Total] 265 / 368 / 43 / 676:  68%|██████▊   | 676/1000 [29:36<14:11,  2.63s/it][Succeeded / Failed / Skipped / Total] 265 / 368 / 43 / 676:  68%|██████▊   | 677/1000 [29:37<14:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 368 / 43 / 677:  68%|██████▊   | 677/1000 [29:37<14:08,  2.63s/it][Succeeded / Failed / Skipped / Total] 266 / 368 / 43 / 677:  68%|██████▊   | 678/1000 [29:44<14:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 267 / 368 / 43 / 678:  68%|██████▊   | 678/1000 [29:44<14:07,  2.63s/it][Succeeded / Failed / Skipped / Total] 267 / 368 / 43 / 678:  68%|██████▊   | 679/1000 [29:45<14:03,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 368 / 43 / 679:  68%|██████▊   | 679/1000 [29:45<14:03,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 368 / 43 / 679:  68%|██████▊   | 680/1000 [29:45<14:00,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 369 / 43 / 680:  68%|██████▊   | 680/1000 [29:45<14:00,  2.63s/it][Succeeded / Failed / Skipped / Total] 268 / 369 / 43 / 680:  68%|██████▊   | 681/1000 [29:45<13:56,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 370 / 43 / 681:  68%|██████▊   | 681/1000 [29:45<13:56,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 370 / 43 / 681:  68%|██████▊   | 682/1000 [29:46<13:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 371 / 43 / 682:  68%|██████▊   | 682/1000 [29:46<13:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 371 / 43 / 682:  68%|██████▊   | 683/1000 [29:48<13:50,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 372 / 43 / 683:  68%|██████▊   | 683/1000 [29:48<13:50,  2.62s/it][Succeeded / Failed / Skipped / Total] 268 / 372 / 43 / 683:  68%|██████▊   | 684/1000 [29:51<13:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 269 / 372 / 43 / 684:  68%|██████▊   | 684/1000 [29:51<13:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 269 / 372 / 43 / 684:  68%|██████▊   | 685/1000 [29:52<13:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 269 / 373 / 43 / 685:  68%|██████▊   | 685/1000 [29:52<13:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 269 / 373 / 43 / 685:  69%|██████▊   | 686/1000 [29:56<13:42,  2.62s/it]Attempts to resolve a set of resources . --> Resolve a class --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream [[is]] = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( [[is]] == null ) { return resolved ; } try { new ClassReader ( [[is]] ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { [[is]] . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[areal]] = declToBridge . entrySet ( ) . iterator ( ) ; [[areal]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[areal]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[aisle]] = ( Set ) entry . getValue ( ) ; try { InputStream [[exists]] = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( [[exists]] == null ) { return resolved ; } try { new ClassReader ( [[exists]] ) . accept ( new BridgedFinder ( [[aisle]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { [[exists]] . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 676 ---------------------------------------------
Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[built]] ( final String method , final String destination ) { return new HttpRequest ( ) . method ( method . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Sets the HTTP request . --> Sets the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[took]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the HTTP request . --> Create HttpRequest with HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[posts]] ( final String [[sights]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[sights]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Set the request . --> Convenience factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[paths]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 680 ---------------------------------------------
Delete destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[eradicated]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 681 ---------------------------------------------
Sets a HttpRequest . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[stamped]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 682 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[president]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
Returns the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[flagging]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the request . --> Sets the HTTP HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[other]] ( final String [[fates]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[fates]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Build a query --> [[[FAILED]]]

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[douse]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 686 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 269 / 374 / 43 / 686:  69%|██████▊   | 686/1000 [29:56<13:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 269 / 374 / 43 / 686:  69%|██████▊   | 687/1000 [29:58<13:39,  2.62s/it][Succeeded / Failed / Skipped / Total] 270 / 374 / 43 / 687:  69%|██████▊   | 687/1000 [29:58<13:39,  2.62s/it][Succeeded / Failed / Skipped / Total] 270 / 374 / 43 / 687:  69%|██████▉   | 688/1000 [30:00<13:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 374 / 43 / 688:  69%|██████▉   | 688/1000 [30:00<13:36,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 374 / 43 / 688:  69%|██████▉   | 689/1000 [30:03<13:34,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 375 / 43 / 689:  69%|██████▉   | 689/1000 [30:03<13:34,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 375 / 43 / 689:  69%|██████▉   | 690/1000 [30:06<13:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 376 / 43 / 690:  69%|██████▉   | 690/1000 [30:06<13:31,  2.62s/it][Succeeded / Failed / Skipped / Total] 271 / 376 / 43 / 690:  69%|██████▉   | 691/1000 [30:06<13:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 272 / 376 / 43 / 691:  69%|██████▉   | 691/1000 [30:06<13:27,  2.61s/it][Succeeded / Failed / Skipped / Total] 272 / 376 / 43 / 691:  69%|██████▉   | 692/1000 [30:12<13:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 376 / 43 / 692:  69%|██████▉   | 692/1000 [30:12<13:26,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 376 / 43 / 692:  69%|██████▉   | 693/1000 [30:14<13:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 377 / 43 / 693:  69%|██████▉   | 693/1000 [30:14<13:23,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 377 / 43 / 693:  69%|██████▉   | 694/1000 [30:16<13:20,  2.62s/it]Loads a single type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[osprey]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[choreograph]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[choreograph]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[choreograph]] ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( [[choreograph]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[choreograph]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 687 ---------------------------------------------
Set the host header . --> Set the http request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String [[warhead]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[warhead]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[warhead]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 688 ---------------------------------------------
Add a request to the map --> query - by method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[redds]] ) { for ( Map . Entry < String , String > [[inclusion]] : [[redds]] . entrySet ( ) ) { query . add ( [[inclusion]] . getKey ( ) , [[inclusion]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
Convert URL to a URL --> [[[FAILED]]]

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[facebook]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[facebook]] . append ( protocol ) ; [[facebook]] . append ( "://" ) ; } if ( host != null ) { [[facebook]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[facebook]] . append ( ' ' ) ; [[facebook]] . append ( port ) ; } return [[facebook]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Send a response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[sharma]] > [[sharma]] sendAndReceive ( final Function < HttpResponse , [[sharma]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 691 ---------------------------------------------
Adds a parameter to the request . --> Starts a drag --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[value1]] , final Object ... parameters ) { query ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < parameters . length ; [[i]] += 2 ) { String name = parameters [ [[i]] ] . toString ( ) ; String value = parameters [ [[i]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[dragoons]] , final Object ... parameters ) { query ( name1 , [[dragoons]] == null ? null : [[dragoons]] . toString ( ) ) ; for ( int [[am]] = 0 ; [[am]] < parameters . length ; [[am]] += 2 ) { String name = parameters [ [[am]] ] . toString ( ) ; String value = parameters [ [[am]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Encode a string . --> Helper method to create a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String [[password]] ) { if ( username != null && [[password]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[carnage]] ( final String username , final String [[decipher]] ) { if ( username != null && [[decipher]] != null ) { String data = username . concat ( StringPool . COLON ) . concat ( [[decipher]] ) ; String [[clapping]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[clapping]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 693 ---------------------------------------------
Parse a query request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[cossacks]] , final boolean decode ) { this . [[counseling]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
[Succeeded / Failed / Skipped / Total] 273 / 378 / 43 / 694:  69%|██████▉   | 694/1000 [30:16<13:20,  2.62s/it][Succeeded / Failed / Skipped / Total] 273 / 378 / 43 / 694:  70%|██████▉   | 695/1000 [30:19<13:18,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 378 / 43 / 695:  70%|██████▉   | 695/1000 [30:19<13:18,  2.62s/it][Succeeded / Failed / Skipped / Total] 274 / 379 / 43 / 696:  70%|██████▉   | 696/1000 [30:20<13:14,  2.61s/it][Succeeded / Failed / Skipped / Total] 274 / 379 / 43 / 696:  70%|██████▉   | 697/1000 [30:20<13:11,  2.61s/it][Succeeded / Failed / Skipped / Total] 275 / 379 / 43 / 697:  70%|██████▉   | 697/1000 [30:20<13:11,  2.61s/it][Succeeded / Failed / Skipped / Total] 275 / 380 / 43 / 698:  70%|██████▉   | 698/1000 [30:21<13:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 275 / 380 / 43 / 698:  70%|██████▉   | 699/1000 [30:27<13:07,  2.61s/it][Succeeded / Failed / Skipped / Total] 275 / 381 / 43 / 699:  70%|██████▉   | 699/1000 [30:27<13:07,  2.61s/it][Succeeded / Failed / Skipped / Total] 275 / 382 / 43 / 700:  70%|███████   | 700/1000 [30:32<13:05,  2.62s/it][Succeeded / Failed / Skipped / Total] 275 / 382 / 43 / 700:  70%|███████   | 701/1000 [30:35<13:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 275 / 383 / 43 / 701:  70%|███████   | 701/1000 [30:35<13:02,  2.62s/it][Succeeded / Failed / Skipped / Total] 276 / 383 / 43 / 702:  70%|███████   | 702/1000 [30:37<13:00,  2.62s/it][Succeeded / Failed / Skipped / Total] 276 / 383 / 43 / 702:  70%|███████   | 703/1000 [30:40<12:57,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 383 / 43 / 703:  70%|███████   | 703/1000 [30:40<12:57,  2.62s/it]--------------------------------------------- Result 694 ---------------------------------------------
Returns true if the request has been read . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[bump]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Populates the result . --> Recursively add a collection to the collection --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[reconnaissance]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 696 ---------------------------------------------
Add all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[loose]] ( ) { final Collection < ? extends ActionInterceptor > [[maneuvering]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[maneuvering]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Execute the actions . --> Execute the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[malli]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 698 ---------------------------------------------
Populate filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[jinxing]] ( ) { final Collection < ? extends ActionFilter > [[fado]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[fado]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Get the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[overdramatize]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 700 ---------------------------------------------
Gets the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[tuna]] > [[tuna]] getProperty ( final Object bean , final String name ) { BeanProperty [[london]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[london]] ) ; return ( [[tuna]] ) getIndexProperty ( [[london]] ) ; } else { try { resolveNestedProperties ( [[london]] ) ; return ( [[tuna]] ) getIndexProperty ( [[london]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 701 ---------------------------------------------
Return the length of the handler . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[michaelangelo]] ) { int [[calendars]] = 0 ; Handler [[brakeman]] = [[michaelangelo]] ; while ( [[brakeman]] != null ) { [[calendars]] ++ ; [[brakeman]] = [[brakeman]] . nextHandler ; } return [[calendars]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Set the setter . --> Utility method to get the phyphemer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object [[value]] ) { Setter setter = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[alpert]] ( final BeanProperty [[phosphorous]] , final Object [[merited]] ) { Setter setter = [[phosphorous]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 703 ---------------------------------------------
Extracts a name from a string . --> Convenience method to add a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[ginsburg]] ) { int [[happi]] = StringUtil . indexOfChars ( [[ginsburg]] , INDEX_CHARS ) ; if ( [[happi]] == - 1 ) { return [[ginsburg]] ; } return [[ginsburg]] . substring ( 0 , [[happi]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 384 / 43 / 704:  70%|███████   | 704/1000 [30:42<12:54,  2.62s/it][Succeeded / Failed / Skipped / Total] 277 / 384 / 43 / 704:  70%|███████   | 705/1000 [30:44<12:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 384 / 43 / 705:  70%|███████   | 705/1000 [30:44<12:51,  2.62s/it][Succeeded / Failed / Skipped / Total] 278 / 385 / 43 / 706:  71%|███████   | 706/1000 [30:45<12:48,  2.61s/it][Succeeded / Failed / Skipped / Total] 278 / 385 / 43 / 706:  71%|███████   | 707/1000 [30:54<12:48,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 385 / 43 / 707:  71%|███████   | 707/1000 [30:54<12:48,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 385 / 43 / 707:  71%|███████   | 708/1000 [30:55<12:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 386 / 43 / 708:  71%|███████   | 708/1000 [30:55<12:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 386 / 43 / 708:  71%|███████   | 709/1000 [30:58<12:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 387 / 43 / 709:  71%|███████   | 709/1000 [30:58<12:42,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 387 / 43 / 709:  71%|███████   | 710/1000 [31:01<12:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 388 / 43 / 710:  71%|███████   | 710/1000 [31:01<12:40,  2.62s/it][Succeeded / Failed / Skipped / Total] 279 / 388 / 43 / 710:  71%|███████   | 711/1000 [31:03<12:37,  2.62s/it][Succeeded / Failed / Skipped / Total] 280 / 388 / 43 / 711:  71%|███████   | 711/1000 [31:03<12:37,  2.62s/it][Succeeded / Failed / Skipped / Total] 280 / 388 / 43 / 711:  71%|███████   | 712/1000 [31:08<12:35,  2.62s/it][Succeeded / Failed / Skipped / Total] 280 / 389 / 43 / 712:  71%|███████   | 712/1000 [31:08<12:35,  2.62s/it][Succeeded / Failed / Skipped / Total] 280 / 389 / 43 / 712:  71%|███████▏  | 713/1000 [31:13<12:34,  2.63s/it][Succeeded / Failed / Skipped / Total] 280 / 390 / 43 / 713:  71%|███████▏  | 713/1000 [31:13<12:34,  2.63s/it][Succeeded / Failed / Skipped / Total] 280 / 390 / 43 / 713:  71%|███████▏  | 714/1000 [31:14<12:30,  2.62s/it]Get object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[racked]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Find a column by its name . --> Find by id --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = entry . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[wid]] = entry . getValue ( ) . desc ; if ( [[wid]] . findByPropertyName ( columnRef ) != null ) { return [[wid]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 706 ---------------------------------------------
Sets a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[karol]] ( final String name , final Object [[wares]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , [[wares]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Get the table . --> Converts a Monomer --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[cramer]] ( final String [[marciano]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[suma]] = tableRefs . get ( [[marciano]] ) ; return [[suma]] == null ? null : [[suma]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 708 ---------------------------------------------
Returns the value of the specified object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object lookupObject ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object lookupObject ( final String ref ) { Object [[appreciated]] = getObjectReference ( ref ) ; if ( [[appreciated]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[appreciated]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Get the table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[avocado]] ( final String [[shackle]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[vos]] = tableRefs . get ( [[shackle]] ) ; return [[vos]] == null ? null : [[vos]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Register a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[splendiferous]] ( final String [[clues]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[clues]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 711 ---------------------------------------------
Serialize a value to JSON . --> Convenience method for creating a JSON object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean [[serialize]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean [[jonas]] ( final JsonContext jsonContext , final T value ) { if ( jsonContext . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 712 ---------------------------------------------
Returns an unmodifiable table . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[baggies]] ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 713 ---------------------------------------------
Replies the given range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label [[end]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , [[end]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[sacker]] ( final Handler firstHandler , final Label start , final Label [[stopping]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[sacker]] ( firstHandler . nextHandler , start , [[stopping]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = [[stopping]] == null ? Integer . MAX_VALUE : [[stopping]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 714 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 390 / 43 / 714:  71%|███████▏  | 714/1000 [31:14<12:30,  2.62s/it][Succeeded / Failed / Skipped / Total] 281 / 390 / 43 / 714:  72%|███████▏  | 715/1000 [31:14<12:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 281 / 391 / 43 / 715:  72%|███████▏  | 715/1000 [31:14<12:27,  2.62s/it][Succeeded / Failed / Skipped / Total] 281 / 391 / 43 / 715:  72%|███████▏  | 716/1000 [31:21<12:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 281 / 392 / 43 / 716:  72%|███████▏  | 716/1000 [31:21<12:26,  2.63s/it][Succeeded / Failed / Skipped / Total] 281 / 392 / 43 / 716:  72%|███████▏  | 717/1000 [31:34<12:27,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 393 / 43 / 717:  72%|███████▏  | 717/1000 [31:34<12:27,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 393 / 43 / 717:  72%|███████▏  | 718/1000 [31:35<12:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 394 / 43 / 718:  72%|███████▏  | 718/1000 [31:35<12:24,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 394 / 43 / 718:  72%|███████▏  | 719/1000 [31:39<12:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 395 / 43 / 719:  72%|███████▏  | 719/1000 [31:39<12:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 395 / 43 / 719:  72%|███████▏  | 720/1000 [31:41<12:19,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 396 / 43 / 720:  72%|███████▏  | 720/1000 [31:41<12:19,  2.64s/it][Succeeded / Failed / Skipped / Total] 281 / 396 / 43 / 720:  72%|███████▏  | 721/1000 [31:47<12:18,  2.65s/it]Returns the cookie . --> Obtain a string from a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean [[first]] = "True" == "True" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { [[cookieString]] . append ( "; " ) ; } [[first]] = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[PISH]] ( final Cookie ... [[PISH]] ) { if ( [[PISH]] . length == 0 ) { return this ; } StringBuilder [[haruko]] = new StringBuilder ( ) ; boolean [[frst]] = "True" == "True" ; for ( Cookie [[bakery]] : [[PISH]] ) { Integer maxAge = [[bakery]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[frst]] ) { [[haruko]] . append ( "; " ) ; } [[frst]] = "False" != "False" ; [[haruko]] . append ( [[bakery]] . getName ( ) ) ; [[haruko]] . append ( ' ' ) ; [[haruko]] . append ( [[bakery]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[haruko]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 715 ---------------------------------------------
Registers a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[salvageable]] ( final String tableReference , final DbEntityDescriptor [[reali]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[reali]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Gets the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[edith]] > [[edith]] prepareGetValue ( final T t , final Class < [[edith]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[edith]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 717 ---------------------------------------------
Convert a column to a table name . --> [[[FAILED]]]

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String [[mcduff]] ) { StringBuilder tableName = new StringBuilder ( [[mcduff]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[momoko]] = Format . fromCamelCase ( [[mcduff]] , separatorChar ) ; tableName . append ( [[momoko]] ) ; } else { tableName . append ( [[mcduff]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a string to a column --> [[[FAILED]]]

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String [[propertyName]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[cantrell]] ( final String columnName ) { String [[absolue]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[absolue]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Returns all sets . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 720 ---------------------------------------------
Creates a new instance of wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[covers]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 721 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 396 / 43 / 721:  72%|███████▏  | 721/1000 [31:47<12:18,  2.65s/it][Succeeded / Failed / Skipped / Total] 282 / 396 / 43 / 721:  72%|███████▏  | 722/1000 [31:54<12:16,  2.65s/it][Succeeded / Failed / Skipped / Total] 282 / 397 / 43 / 722:  72%|███████▏  | 722/1000 [31:54<12:16,  2.65s/it][Succeeded / Failed / Skipped / Total] 282 / 397 / 43 / 722:  72%|███████▏  | 723/1000 [32:01<12:16,  2.66s/it][Succeeded / Failed / Skipped / Total] 283 / 397 / 43 / 723:  72%|███████▏  | 723/1000 [32:01<12:16,  2.66s/it][Succeeded / Failed / Skipped / Total] 283 / 397 / 43 / 723:  72%|███████▏  | 724/1000 [32:01<12:12,  2.65s/it][Succeeded / Failed / Skipped / Total] 283 / 398 / 43 / 724:  72%|███████▏  | 724/1000 [32:01<12:12,  2.65s/it][Succeeded / Failed / Skipped / Total] 283 / 398 / 43 / 724:  72%|███████▎  | 725/1000 [32:04<12:09,  2.65s/it][Succeeded / Failed / Skipped / Total] 283 / 399 / 43 / 725:  72%|███████▎  | 725/1000 [32:04<12:09,  2.65s/it][Succeeded / Failed / Skipped / Total] 283 / 399 / 43 / 725:  73%|███████▎  | 726/1000 [32:09<12:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 284 / 399 / 43 / 726:  73%|███████▎  | 726/1000 [32:09<12:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 284 / 399 / 43 / 726:  73%|███████▎  | 727/1000 [32:11<12:05,  2.66s/it]Processes the request attribute . --> Writes a name to the target --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > [[attributeNames]] = [[servletRequest]] . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String [[attrName]] = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[buddhists]] ( final HttpServletRequest [[constitution]] , final Targets targets ) { final Enumeration < String > [[hatbox]] = [[constitution]] . getAttributeNames ( ) ; while ( [[hatbox]] . hasMoreElements ( ) ) { final String [[wagnerian]] = [[hatbox]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[wagnerian]] ) ; if ( name != null ) { final Object attrValue = [[constitution]] . getAttribute ( [[wagnerian]] ) ; target . writeValue ( name , attrValue , "[[Vera]]" == "[[Vera]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 722 ---------------------------------------------
Returns the path of the given separator . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[lindy]] ( final String [[boulevards]] ) { if ( [[boulevards]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[boulevards]] ) ; } else { return separatorsToUnix ( [[boulevards]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 723 ---------------------------------------------
Converts a file path to a File --> Convert a File to a File --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[rika]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 724 ---------------------------------------------
Resolve a class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[buxton]] = wrapperClass . getName ( ) ; T wrapper = lookup ( [[buxton]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[buxton]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 725 ---------------------------------------------
Sets the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[value]] , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int index , final Object [[evaluated]] , final int [[revolution]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[evaluated]] , sqlType ) ; set ( st , index , t , [[revolution]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 726 ---------------------------------------------
Adds a component to this component . --> Register a mazookeeper --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[mamon]] ) { Objects . requireNonNull ( [[mamon]] ) ; madvocComponents . add ( ClassConsumer . of ( [[mamon]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 400 / 43 / 727:  73%|███████▎  | 727/1000 [32:11<12:05,  2.66s/it][Succeeded / Failed / Skipped / Total] 284 / 400 / 43 / 727:  73%|███████▎  | 728/1000 [32:13<12:02,  2.66s/it][Succeeded / Failed / Skipped / Total] 285 / 400 / 43 / 728:  73%|███████▎  | 728/1000 [32:13<12:02,  2.66s/it][Succeeded / Failed / Skipped / Total] 285 / 400 / 43 / 728:  73%|███████▎  | 729/1000 [32:15<11:59,  2.66s/it][Succeeded / Failed / Skipped / Total] 286 / 400 / 43 / 729:  73%|███████▎  | 729/1000 [32:15<11:59,  2.66s/it][Succeeded / Failed / Skipped / Total] 286 / 400 / 43 / 729:  73%|███████▎  | 730/1000 [32:16<11:56,  2.65s/it][Succeeded / Failed / Skipped / Total] 286 / 401 / 43 / 730:  73%|███████▎  | 730/1000 [32:16<11:56,  2.65s/it][Succeeded / Failed / Skipped / Total] 286 / 401 / 43 / 730:  73%|███████▎  | 731/1000 [32:18<11:53,  2.65s/it]Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload [[paramValue]] = paramValues [ j ] ; if ( ( ! [[paramValue]] . isValid ( ) ) || ( ! [[paramValue]] . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload [[proof]] = paramValues [ j ] ; if ( ( ! [[proof]] . isValid ( ) ) || ( ! [[proof]] . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 728 ---------------------------------------------
Adapts a Consumer . --> Adapts a Consumer to a Consumer --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[magnification]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 729 ---------------------------------------------
Starts the app --> Log a WebApplication --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[begun]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 730 ---------------------------------------------
Handles request parameters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String [[p]] = paramValues [ j ] ; if ( [[p]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( [[p]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[clogging]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String [[percentage]] = paramValues [ j ] ; if ( [[percentage]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( [[percentage]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 731 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 286 / 402 / 43 / 731:  73%|███████▎  | 731/1000 [32:18<11:53,  2.65s/it][Succeeded / Failed / Skipped / Total] 286 / 402 / 43 / 731:  73%|███████▎  | 732/1000 [32:20<11:50,  2.65s/it][Succeeded / Failed / Skipped / Total] 287 / 402 / 43 / 732:  73%|███████▎  | 732/1000 [32:20<11:50,  2.65s/it][Succeeded / Failed / Skipped / Total] 287 / 402 / 43 / 732:  73%|███████▎  | 733/1000 [32:22<11:47,  2.65s/it][Succeeded / Failed / Skipped / Total] 288 / 402 / 43 / 733:  73%|███████▎  | 733/1000 [32:22<11:47,  2.65s/it][Succeeded / Failed / Skipped / Total] 288 / 402 / 43 / 733:  73%|███████▎  | 734/1000 [32:27<11:45,  2.65s/it][Succeeded / Failed / Skipped / Total] 289 / 402 / 43 / 734:  73%|███████▎  | 734/1000 [32:27<11:45,  2.65s/it][Succeeded / Failed / Skipped / Total] 289 / 402 / 43 / 734:  74%|███████▎  | 735/1000 [32:31<11:43,  2.65s/it][Succeeded / Failed / Skipped / Total] 290 / 402 / 43 / 735:  74%|███████▎  | 735/1000 [32:31<11:43,  2.65s/it][Succeeded / Failed / Skipped / Total] 290 / 402 / 43 / 735:  74%|███████▎  | 736/1000 [32:34<11:40,  2.65s/it][Succeeded / Failed / Skipped / Total] 291 / 402 / 43 / 736:  74%|███████▎  | 736/1000 [32:34<11:40,  2.65s/it][Succeeded / Failed / Skipped / Total] 291 / 402 / 43 / 736:  74%|███████▎  | 737/1000 [32:38<11:38,  2.66s/it]Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[stumble]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 732 ---------------------------------------------
Returns the name of the column name . --> Extract a description from a string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { [[toUpper]] = "True" == "True" ; continue ; } if ( [[toUpper]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[toUpper]] = "[[False]]" != "[[False]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[problems]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[singleton]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[potent]] = "[[Spurious]]" != "[[Spurious]]" ; for ( int i = 0 ; i < [[singleton]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { [[potent]] = "True" == "True" ; continue ; } if ( [[potent]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[potent]] = "[[Spurious]]" != "[[Spurious]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 733 ---------------------------------------------
Registers a component . --> Register a component --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[bullitt]] ( ) { final ActionConfigManager [[batshit]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[batshit]] . registerAnnotation ( Action . class ) ; [[batshit]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 734 ---------------------------------------------
Returns the prefix . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[filename]] ) ; int [[endIndex]] = index + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || index < 0 || prefix >= [[endIndex]] ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[antifreeze]] ( final String [[wilcox]] , final int separatorAdd ) { if ( [[wilcox]] == null ) { return null ; } int prefix = getPrefixLength ( [[wilcox]] ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( [[wilcox]] ) ; int [[applause]] = index + separatorAdd ; if ( prefix >= [[wilcox]] . length ( ) || index < 0 || prefix >= [[applause]] ) { return StringPool . EMPTY ; } return [[wilcox]] . substring ( prefix , [[applause]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 735 ---------------------------------------------
Returns a excluded class . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String [[excludedJar]] : excludedJars ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[athenian]] ( final String ... excludedJars ) { for ( final String [[confused]] : excludedJars ) { rulesJars . exclude ( [[confused]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Replies the includedroads . --> Utility method to extract the Jacr --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... [[tippet]] ) { for ( final String [[artificially]] : [[tippet]] ) { rulesJars . include ( [[artificially]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
[Succeeded / Failed / Skipped / Total] 291 / 403 / 43 / 737:  74%|███████▎  | 737/1000 [32:38<11:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 291 / 403 / 43 / 737:  74%|███████▍  | 738/1000 [32:41<11:36,  2.66s/it][Succeeded / Failed / Skipped / Total] 291 / 404 / 43 / 738:  74%|███████▍  | 738/1000 [32:41<11:36,  2.66s/it][Succeeded / Failed / Skipped / Total] 291 / 404 / 43 / 738:  74%|███████▍  | 739/1000 [32:42<11:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 292 / 404 / 43 / 739:  74%|███████▍  | 739/1000 [32:42<11:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 292 / 404 / 43 / 739:  74%|███████▍  | 740/1000 [32:45<11:30,  2.66s/it][Succeeded / Failed / Skipped / Total] 293 / 404 / 43 / 740:  74%|███████▍  | 740/1000 [32:45<11:30,  2.66s/it][Succeeded / Failed / Skipped / Total] 293 / 404 / 43 / 740:  74%|███████▍  | 741/1000 [32:46<11:27,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 405 / 43 / 741:  74%|███████▍  | 741/1000 [32:46<11:27,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 405 / 43 / 741:  74%|███████▍  | 742/1000 [32:47<11:24,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 406 / 43 / 742:  74%|███████▍  | 742/1000 [32:47<11:24,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 406 / 43 / 742:  74%|███████▍  | 743/1000 [32:48<11:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 407 / 43 / 743:  74%|███████▍  | 743/1000 [32:48<11:21,  2.65s/it][Succeeded / Failed / Skipped / Total] 293 / 407 / 43 / 743:  74%|███████▍  | 744/1000 [33:04<11:22,  2.67s/it]--------------------------------------------- Result 737 ---------------------------------------------
Scans a string representation of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[linen]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Scans the given excluded class . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[distillery]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Converts a string to a byte array . --> Converts a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[propensity]] ( final Class [[boyfriend]] ) { final String name = ' ' + [[boyfriend]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 740 ---------------------------------------------
Adds a file to the classpath . --> Add a string representation of a class --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String [[path]] : paths ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[analysis]] ( final String ... paths ) { for ( final String [[camino]] : paths ) { filesToScan . add ( new File ( [[camino]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Scan a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[launch]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[manner]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[manner]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
Get the file extension . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String [[prefix]] = getPrefix ( [[filename]] ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int [[lastSeparatorIndex]] = indexOfLastSeparator ( [[filename]] ) ; int [[lastExtensionIndex]] = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( [[lastSeparatorIndex]] == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = [[filename]] . substring ( [[prefix]] . length ( ) , [[lastSeparatorIndex]] + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { [[prefix]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[harbinger]] ) { String [[password]] = getPrefix ( [[harbinger]] ) ; if ( [[password]] == null ) { [[password]] = StringPool . EMPTY ; } int [[addict]] = indexOfLastSeparator ( [[harbinger]] ) ; int [[retold]] = indexOfExtension ( [[harbinger]] ) ; String path ; String baseName ; String extension ; if ( [[addict]] == - 1 ) { path = StringPool . EMPTY ; if ( [[retold]] == - 1 ) { baseName = [[harbinger]] . substring ( [[password]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[harbinger]] . substring ( [[password]] . length ( ) , [[retold]] ) ; extension = [[harbinger]] . substring ( [[retold]] + 1 ) ; } } else { path = [[harbinger]] . substring ( [[password]] . length ( ) , [[addict]] + 1 ) ; if ( [[retold]] == - 1 ) { baseName = [[harbinger]] . substring ( [[password]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[harbinger]] . substring ( [[password]] . length ( ) + path . length ( ) , [[retold]] ) ; extension = [[harbinger]] . substring ( [[retold]] + 1 ) ; } } return new String [ ] { [[password]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 743 ---------------------------------------------
Returns the scope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[broadened]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 408 / 43 / 744:  74%|███████▍  | 744/1000 [33:04<11:22,  2.67s/it][Succeeded / Failed / Skipped / Total] 293 / 408 / 43 / 744:  74%|███████▍  | 745/1000 [33:08<11:20,  2.67s/it][Succeeded / Failed / Skipped / Total] 293 / 409 / 43 / 745:  74%|███████▍  | 745/1000 [33:08<11:20,  2.67s/it][Succeeded / Failed / Skipped / Total] 293 / 409 / 43 / 745:  75%|███████▍  | 746/1000 [33:09<11:17,  2.67s/it][Succeeded / Failed / Skipped / Total] 294 / 409 / 43 / 746:  75%|███████▍  | 746/1000 [33:09<11:17,  2.67s/it][Succeeded / Failed / Skipped / Total] 294 / 409 / 43 / 746:  75%|███████▍  | 747/1000 [33:16<11:16,  2.67s/it][Succeeded / Failed / Skipped / Total] 295 / 409 / 43 / 747:  75%|███████▍  | 747/1000 [33:16<11:16,  2.67s/it][Succeeded / Failed / Skipped / Total] 295 / 409 / 43 / 747:  75%|███████▍  | 748/1000 [33:19<11:13,  2.67s/it][Succeeded / Failed / Skipped / Total] 295 / 410 / 43 / 748:  75%|███████▍  | 748/1000 [33:19<11:13,  2.67s/it][Succeeded / Failed / Skipped / Total] 295 / 410 / 43 / 748:  75%|███████▍  | 749/1000 [33:23<11:11,  2.67s/it][Succeeded / Failed / Skipped / Total] 296 / 410 / 43 / 749:  75%|███████▍  | 749/1000 [33:23<11:11,  2.67s/it][Succeeded / Failed / Skipped / Total] 296 / 410 / 43 / 749:  75%|███████▌  | 750/1000 [33:29<11:09,  2.68s/it]Gets the scope class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[gangstas]] ( final Class < ? extends MadvocScope > [[executions]] ) { for ( final MadvocScope [[na]] : allScopes ) { if ( [[na]] . getClass ( ) . equals ( [[executions]] ) ) { return [[na]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 745 ---------------------------------------------
Create a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object [[scope]] , final boolean [[active]] ) { return new DbJtxTransaction ( this , tm , [[scope]] , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[alec]] ( final JtxTransactionMode tm , final Object [[expanse]] , final boolean [[energy]] ) { return new DbJtxTransaction ( this , tm , [[expanse]] , [[energy]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
Scan the classpath . --> Populate a File from a file --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile [[ff]] = FindFile . create ( ) . includeDirs ( "[[False]]" != "[[False]]" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File [[file]] ; while ( ( [[file]] = [[ff]] . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , [[file]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , [[file]] , "[[False]]" != "[[False]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[kudos]] ( final File root ) { String [[touquet]] = root . getAbsolutePath ( ) ; if ( ! [[touquet]] . endsWith ( File . separator ) ) { [[touquet]] += File . separatorChar ; } final FindFile [[fim]] = FindFile . create ( ) . includeDirs ( "[[Forger]]" != "[[Forger]]" ) . recursive ( "True" == "True" ) . searchPath ( [[touquet]] ) ; File [[roster]] ; while ( ( [[roster]] = [[fim]] . nextFile ( ) ) != null ) { final String filePath = [[roster]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[touquet]] , [[roster]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[touquet]] , [[roster]] , "[[Forger]]" != "[[Forger]]" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 747 ---------------------------------------------
Visit a bean . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Appropriate]]" == "[[Appropriate]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 748 ---------------------------------------------
Sets the scope of the scope of the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[grotesque]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[grotesque]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Returns the set of a session . --> Convenience method to get a list of densations --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String [[value]] ; boolean [[unique]] ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; [[unique]] = [[tokenSet]] . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! [[unique]] ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[smutty]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[smutty]] == null ) { [[smutty]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[smutty]] ) ; } String [[valuation]] ; boolean [[uncommon]] ; do { [[valuation]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[smutty]] ) ; [[uncommon]] = [[smutty]] . add ( new Token ( [[valuation]] , timeToLive ) ) ; } while ( ! [[uncommon]] ) ; return [[valuation]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 296 / 411 / 43 / 750:  75%|███████▌  | 750/1000 [33:29<11:09,  2.68s/it][Succeeded / Failed / Skipped / Total] 296 / 411 / 43 / 750:  75%|███████▌  | 751/1000 [33:33<11:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 296 / 412 / 43 / 751:  75%|███████▌  | 751/1000 [33:33<11:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 296 / 412 / 43 / 751:  75%|███████▌  | 752/1000 [33:37<11:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 296 / 413 / 43 / 752:  75%|███████▌  | 752/1000 [33:37<11:05,  2.68s/it][Succeeded / Failed / Skipped / Total] 296 / 413 / 43 / 752:  75%|███████▌  | 753/1000 [33:42<11:03,  2.69s/it][Succeeded / Failed / Skipped / Total] 297 / 413 / 43 / 753:  75%|███████▌  | 753/1000 [33:42<11:03,  2.69s/it][Succeeded / Failed / Skipped / Total] 297 / 413 / 43 / 753:  75%|███████▌  | 754/1000 [33:42<10:59,  2.68s/it][Succeeded / Failed / Skipped / Total] 298 / 413 / 43 / 754:  75%|███████▌  | 754/1000 [33:42<10:59,  2.68s/it][Succeeded / Failed / Skipped / Total] 298 / 413 / 43 / 754:  76%|███████▌  | 755/1000 [33:52<10:59,  2.69s/it]Processes a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String [[zipEntryName]] = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[zipEntryName]] , CLASS_FILE_EXT ) ) { final String [[entryName]] = prepareEntryName ( [[zipEntryName]] , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( [[entryName]] , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String [[entryName]] = prepareEntryName ( [[zipEntryName]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( [[entryName]] , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String [[agito]] = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[agito]] , CLASS_FILE_EXT ) ) { final String [[cee]] = prepareEntryName ( [[agito]] , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( [[cee]] , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String [[cee]] = prepareEntryName ( [[agito]] , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( [[cee]] , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 751 ---------------------------------------------
Creates a new Bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[ancestors]] ) { BeanCopy [[stumble]] = new BeanCopy ( [[ancestors]] ) ; [[stumble]] . isSourceMap = [[ancestors]] instanceof Map ; return [[stumble]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Resolve scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 753 ---------------------------------------------
Resolve type . --> Resolve type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[nouns]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[nouns]] == null ) { [[nouns]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 754 ---------------------------------------------
Removes the next token from the set . --> Remove a repository --> Socre: 1.0

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[veil]] ( final Set < Token > [[accountability]] ) { if ( [[accountability]] . size ( ) < maxTokensPerSession ) { return ; } long [[accommodating]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[accountability]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[icons]] = iterator . next ( ) ; if ( [[icons]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[icons]] . validUntil < [[accommodating]] ) { [[accommodating]] = [[icons]] . validUntil ; tokenToRemove = [[icons]] ; } } if ( ( tokenToRemove != null ) && ( [[accountability]] . size ( ) >= maxTokensPerSession ) ) { [[accountability]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 755 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 413 / 43 / 755:  76%|███████▌  | 755/1000 [33:52<10:59,  2.69s/it][Succeeded / Failed / Skipped / Total] 299 / 413 / 43 / 755:  76%|███████▌  | 756/1000 [33:56<10:57,  2.69s/it][Succeeded / Failed / Skipped / Total] 299 / 414 / 43 / 756:  76%|███████▌  | 756/1000 [33:56<10:57,  2.69s/it][Succeeded / Failed / Skipped / Total] 299 / 414 / 43 / 756:  76%|███████▌  | 757/1000 [34:05<10:56,  2.70s/it][Succeeded / Failed / Skipped / Total] 299 / 415 / 43 / 757:  76%|███████▌  | 757/1000 [34:05<10:56,  2.70s/it][Succeeded / Failed / Skipped / Total] 299 / 415 / 43 / 757:  76%|███████▌  | 758/1000 [34:12<10:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 300 / 415 / 43 / 758:  76%|███████▌  | 758/1000 [34:12<10:55,  2.71s/it][Succeeded / Failed / Skipped / Total] 300 / 415 / 43 / 758:  76%|███████▌  | 759/1000 [34:19<10:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 300 / 416 / 43 / 759:  76%|███████▌  | 759/1000 [34:19<10:53,  2.71s/it][Succeeded / Failed / Skipped / Total] 300 / 416 / 43 / 759:  76%|███████▌  | 760/1000 [34:24<10:51,  2.72s/it]Remove a type from the bean . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[sabre]] ( final Class [[dawg]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 756 ---------------------------------------------
Register a template . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = [[templateData]] . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[boulders]] ) { super . init ( [[boulders]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[objectivity]] = [[boulders]] . getObjectReference ( entityName ) ; if ( [[objectivity]] != null ) { ded = lookupType ( resolveClass ( [[objectivity]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[arcades]] = this . tableReference ; if ( [[arcades]] == null ) { [[arcades]] = tableAlias ; } if ( [[arcades]] == null ) { [[arcades]] = entityName ; } if ( [[arcades]] == null ) { [[arcades]] = ded . getEntityName ( ) ; } [[boulders]] . registerTableReference ( [[arcades]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
Sets the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[nominated]] , final Object [[valued]] ) { if ( isTargetMap ) { [[nominated]] = LEFT_SQ_BRACKET + [[nominated]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[nominated]] , [[valued]] ) ; return "[[Actually]]" == "[[Actually]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a property . --> Resolve a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = [[cd]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[avocado]] ( final String beanName , final String property , final String reference ) { BeanDefinition [[houseful]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[sca]] = ClassIntrospector . get ( ) . lookup ( [[houseful]] . type ) ; PropertyDescriptor propertyDescriptor = [[sca]] . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[houseful]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[houseful]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Returns true if the given token is set . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[found]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[found]] = "[[True]]" == "[[True]]" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "[[Velma]]" == "[[Velma]]" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[locate]] = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[locate]] = "[[Velma]]" == "[[Velma]]" ; } } return [[locate]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 417 / 43 / 760:  76%|███████▌  | 760/1000 [34:24<10:51,  2.72s/it][Succeeded / Failed / Skipped / Total] 300 / 417 / 43 / 760:  76%|███████▌  | 761/1000 [34:26<10:49,  2.72s/it][Succeeded / Failed / Skipped / Total] 301 / 417 / 43 / 761:  76%|███████▌  | 761/1000 [34:26<10:49,  2.72s/it][Succeeded / Failed / Skipped / Total] 301 / 417 / 43 / 761:  76%|███████▌  | 762/1000 [34:35<10:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 301 / 418 / 43 / 762:  76%|███████▌  | 762/1000 [34:35<10:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 301 / 418 / 43 / 762:  76%|███████▋  | 763/1000 [34:37<10:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 302 / 418 / 43 / 763:  76%|███████▋  | 763/1000 [34:37<10:45,  2.72s/it][Succeeded / Failed / Skipped / Total] 302 / 418 / 43 / 763:  76%|███████▋  | 764/1000 [34:43<10:43,  2.73s/it]Resolve beans . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 761 ---------------------------------------------
Destroy the bean definition . --> Destroys all beans --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[cd]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[disk]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = [[disk]] . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 762 ---------------------------------------------
Gets the bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[fella]] ) { String [ ] [[stored]] = beanCollections . get ( [[fella]] ) ; if ( [[stored]] != null ) { return [[stored]] ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[fella]] ) ) { String beanName = entry . getKey ( ) ; list . add ( beanName ) ; } } if ( list . isEmpty ( ) ) { [[stored]] = StringPool . EMPTY_ARRAY ; } else { [[stored]] = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[fella]] , [[stored]] ) ; return [[stored]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 763 ---------------------------------------------
Initialize the Method . --> Initialize the MethodBean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] [[initMethodPoints]] = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } [[initMethodPoints]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( [[initMethodPoints]] ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[alpert]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[transparent]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[transparent]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] [[pedo]] = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[transparent]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } [[pedo]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[transparent]] . addInitMethodPoints ( [[pedo]] ) ; }
[[[[Nl]]]]: Registers init method .
[Succeeded / Failed / Skipped / Total] 303 / 418 / 43 / 764:  76%|███████▋  | 764/1000 [34:43<10:43,  2.73s/it][Succeeded / Failed / Skipped / Total] 303 / 418 / 43 / 764:  76%|███████▋  | 765/1000 [34:51<10:42,  2.73s/it][Succeeded / Failed / Skipped / Total] 304 / 418 / 43 / 765:  76%|███████▋  | 765/1000 [34:51<10:42,  2.73s/it][Succeeded / Failed / Skipped / Total] 304 / 418 / 43 / 765:  77%|███████▋  | 766/1000 [34:59<10:41,  2.74s/it][Succeeded / Failed / Skipped / Total] 304 / 419 / 43 / 766:  77%|███████▋  | 766/1000 [34:59<10:41,  2.74s/it][Succeeded / Failed / Skipped / Total] 304 / 419 / 43 / 766:  77%|███████▋  | 767/1000 [35:02<10:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 305 / 419 / 43 / 767:  77%|███████▋  | 767/1000 [35:02<10:38,  2.74s/it][Succeeded / Failed / Skipped / Total] 305 / 419 / 43 / 767:  77%|███████▋  | 768/1000 [35:09<10:37,  2.75s/it][Succeeded / Failed / Skipped / Total] 306 / 419 / 43 / 768:  77%|███████▋  | 768/1000 [35:09<10:37,  2.75s/it][Succeeded / Failed / Skipped / Total] 306 / 419 / 43 / 768:  77%|███████▋  | 769/1000 [35:09<10:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 307 / 419 / 43 / 769:  77%|███████▋  | 769/1000 [35:09<10:33,  2.74s/it][Succeeded / Failed / Skipped / Total] 307 / 419 / 43 / 769:  77%|███████▋  | 770/1000 [35:12<10:30,  2.74s/it]--------------------------------------------- Result 764 ---------------------------------------------
Registers a typed bean . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[taso]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 765 ---------------------------------------------
Execute a request . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[forbid]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 766 ---------------------------------------------
Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[averaged]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[tubular]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[tubular]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[tubular]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[tubular]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[tubular]] . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 767 ---------------------------------------------
Sets parameters . --> Converts a map to a map --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[neuron]] ( final Map < ? , ? > [[symptomatic]] ) { for ( Map . Entry < ? , ? > [[inlet]] : [[symptomatic]] . entrySet ( ) ) { defineParameter ( [[inlet]] . getKey ( ) . toString ( ) , [[inlet]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 768 ---------------------------------------------
overrides the visitor to look for a value . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[bulgur]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 769 ---------------------------------------------
Adds a bean definition . --> Register a custom Property Property Property --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[beanName]] , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor [[propertyDescriptor]] = [[cd]] . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String [[disowned]] , final String property ) { BeanDefinition [[blackhawk]] = lookupExistingBeanDefinition ( [[disowned]] ) ; ClassDescriptor [[fcc]] = ClassIntrospector . get ( ) . lookup ( [[blackhawk]] . type ) ; PropertyDescriptor [[whimpers]] = [[fcc]] . getPropertyDescriptor ( property , "[[Realist]]" == "[[Realist]]" ) ; if ( [[whimpers]] == null ) { throw new PetiteException ( "Property not found: " + [[blackhawk]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[whimpers]] ) ; [[blackhawk]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 419 / 43 / 770:  77%|███████▋  | 770/1000 [35:12<10:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 308 / 419 / 43 / 770:  77%|███████▋  | 771/1000 [35:21<10:30,  2.75s/it][Succeeded / Failed / Skipped / Total] 309 / 419 / 43 / 771:  77%|███████▋  | 771/1000 [35:21<10:30,  2.75s/it][Succeeded / Failed / Skipped / Total] 309 / 419 / 43 / 771:  77%|███████▋  | 772/1000 [35:21<10:26,  2.75s/it][Succeeded / Failed / Skipped / Total] 310 / 419 / 43 / 772:  77%|███████▋  | 772/1000 [35:21<10:26,  2.75s/it][Succeeded / Failed / Skipped / Total] 310 / 419 / 43 / 772:  77%|███████▋  | 773/1000 [35:28<10:24,  2.75s/it][Succeeded / Failed / Skipped / Total] 311 / 419 / 43 / 773:  77%|███████▋  | 773/1000 [35:28<10:24,  2.75s/it][Succeeded / Failed / Skipped / Total] 311 / 419 / 43 / 773:  77%|███████▋  | 774/1000 [35:29<10:21,  2.75s/it][Succeeded / Failed / Skipped / Total] 311 / 420 / 43 / 774:  77%|███████▋  | 774/1000 [35:29<10:21,  2.75s/it][Succeeded / Failed / Skipped / Total] 311 / 420 / 43 / 774:  78%|███████▊  | 775/1000 [35:34<10:19,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 420 / 43 / 775:  78%|███████▊  | 775/1000 [35:34<10:19,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 420 / 43 / 775:  78%|███████▊  | 776/1000 [35:35<10:16,  2.75s/it]Verifies that the index has a method index . --> Verifies that a method throws an exception --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int [[hootie]] ) { if ( ( [[hootie]] < 1 ) || ( [[hootie]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[hootie]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 771 ---------------------------------------------
Registers a bean . --> Unwrap a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[beanDefinition]] . type ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , beanName , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[accommodating]] ( final String [[tantrums]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[reunification]] = lookupBeanDefinition ( beanName ) ; if ( [[reunification]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[reunification]] . type ; ClassDescriptor [[stereos]] = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = [[stereos]] . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[tantrums]] , beanName , md . getMethod ( ) ) ; providers . put ( [[tantrums]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 772 ---------------------------------------------
Returns the name of a field . --> Create a &gt ; --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[awoke]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 773 ---------------------------------------------
Returns the Java version . --> Prints the number of policies --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[regretfully]] ( final int [[printers]] ) { final int [[obligation]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[portraits]] = [[obligation]] - 8 + 52 ; return [[printers]] > [[portraits]] ? [[printers]] : [[portraits]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
Registers a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( staticMethodName , arguments , "[[True]]" == "[[True]]" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , [[md]] . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[tonda]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[dc]] = cd . getMethodDescriptor ( staticMethodName , arguments , "[[Honest]]" == "[[Honest]]" ) ; if ( [[dc]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[bulgur]] = new ProviderDefinition ( [[tonda]] , [[dc]] . getMethod ( ) ) ; providers . put ( [[tonda]] , [[bulgur]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 775 ---------------------------------------------
Create a named method name . --> Retitute die e der die e derie ete die ebeneichte t die tufefe die t ert dfeichteneich enet tefeieiefefert eicht e efefet eicht die diefe  --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int [[index]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[explanation]] ( final String name , final int [[list]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[list]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 421 / 43 / 776:  78%|███████▊  | 776/1000 [35:35<10:16,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 421 / 43 / 776:  78%|███████▊  | 777/1000 [35:36<10:13,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 422 / 43 / 777:  78%|███████▊  | 777/1000 [35:36<10:13,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 422 / 43 / 777:  78%|███████▊  | 778/1000 [35:37<10:09,  2.75s/it][Succeeded / Failed / Skipped / Total] 313 / 422 / 43 / 778:  78%|███████▊  | 778/1000 [35:37<10:09,  2.75s/it][Succeeded / Failed / Skipped / Total] 313 / 422 / 43 / 778:  78%|███████▊  | 779/1000 [35:39<10:06,  2.75s/it]Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[beanName]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[mip]] = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( [[mip]] ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String [[pulver]] , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[invitations]] = lookupExistingBeanDefinition ( [[pulver]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[invitations]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[invitations]] . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[invitations]] . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[plannin]] = new MethodInjectionPoint ( method , ref ) ; [[invitations]] . addMethodInjectionPoint ( [[plannin]] ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 777 ---------------------------------------------
Encodes a byte array into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] [[arr]] ) { int [[length]] = [[arr]] . length ; if ( [[length]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[length]] - 1 ; int pad = [[arr]] [ endx ] == ' ' ? ( [[arr]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[length]] > 76 ? ( [[arr]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[dest]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[arr]] [ sndx ++ ] ] << 18 | INV [ [[arr]] [ sndx ++ ] ] << 12 | INV [ [[arr]] [ sndx ++ ] ] << 6 | INV [ [[arr]] [ sndx ++ ] ] ; [[dest]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[arr]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[dest]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[algorithms]] ( final char [ ] [[symphony]] ) { int [[timeline]] = [[symphony]] . length ; if ( [[timeline]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[timeline]] - 1 ; int pad = [[symphony]] [ endx ] == ' ' ? ( [[symphony]] [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[timeline]] > 76 ? ( [[symphony]] [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[sabre]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ [[symphony]] [ sndx ++ ] ] << 18 | INV [ [[symphony]] [ sndx ++ ] ] << 12 | INV [ [[symphony]] [ sndx ++ ] ] << 6 | INV [ [[symphony]] [ sndx ++ ] ] ; [[sabre]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[sabre]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[sabre]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ [[symphony]] [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[sabre]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[sabre]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 778 ---------------------------------------------
overrides the visitor to look for the type . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[sexes]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[sexes]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 779 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 422 / 43 / 779:  78%|███████▊  | 779/1000 [35:39<10:06,  2.75s/it][Succeeded / Failed / Skipped / Total] 314 / 422 / 43 / 779:  78%|███████▊  | 780/1000 [35:45<10:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 315 / 422 / 43 / 780:  78%|███████▊  | 780/1000 [35:45<10:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 315 / 422 / 43 / 780:  78%|███████▊  | 781/1000 [35:46<10:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 316 / 422 / 43 / 781:  78%|███████▊  | 781/1000 [35:46<10:02,  2.75s/it][Succeeded / Failed / Skipped / Total] 316 / 422 / 43 / 781:  78%|███████▊  | 782/1000 [35:47<09:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 317 / 422 / 43 / 782:  78%|███████▊  | 782/1000 [35:47<09:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 317 / 422 / 43 / 782:  78%|███████▊  | 783/1000 [35:50<09:55,  2.75s/it][Succeeded / Failed / Skipped / Total] 317 / 423 / 43 / 783:  78%|███████▊  | 783/1000 [35:50<09:55,  2.75s/it][Succeeded / Failed / Skipped / Total] 317 / 423 / 43 / 783:  78%|███████▊  | 784/1000 [35:51<09:52,  2.74s/it][Succeeded / Failed / Skipped / Total] 317 / 424 / 43 / 784:  78%|███████▊  | 784/1000 [35:51<09:52,  2.74s/it][Succeeded / Failed / Skipped / Total] 317 / 424 / 43 / 784:  78%|███████▊  | 785/1000 [35:52<09:49,  2.74s/it]Visit a method . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[mv]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor [[freighter]] , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[freighter]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[freighter]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[freighter]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[freighter]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[freighter]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 780 ---------------------------------------------
Create a string . --> Build a string representation of a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[joannie]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
implements the visitor to find the method . --> implements the visitor to look for methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[joannie]] ( final MethodVisitor [[hms]] , final MethodInfo methodInfo ) { [[hms]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[hms]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 782 ---------------------------------------------
implements the visitor to create a visitor to look for a method . --> Visits a visitor to get the supplied type --> Socre: 1.0

[[[[Adv]]]]: public static void newArray ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[mv]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor [[solaris]] , final Class componentType ) { if ( componentType == int . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { [[solaris]] . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } [[solaris]] . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 783 ---------------------------------------------
Load a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[cirque]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 784 ---------------------------------------------
Loads the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[hydrochloric]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 318 / 424 / 43 / 785:  78%|███████▊  | 785/1000 [35:52<09:49,  2.74s/it][Succeeded / Failed / Skipped / Total] 318 / 424 / 43 / 785:  79%|███████▊  | 786/1000 [35:54<09:46,  2.74s/it][Succeeded / Failed / Skipped / Total] 319 / 424 / 43 / 786:  79%|███████▊  | 786/1000 [35:54<09:46,  2.74s/it][Succeeded / Failed / Skipped / Total] 319 / 424 / 43 / 786:  79%|███████▊  | 787/1000 [35:54<09:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 320 / 424 / 43 / 787:  79%|███████▊  | 787/1000 [35:54<09:43,  2.74s/it][Succeeded / Failed / Skipped / Total] 320 / 424 / 43 / 787:  79%|███████▉  | 788/1000 [36:06<09:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 425 / 43 / 788:  79%|███████▉  | 788/1000 [36:06<09:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 425 / 43 / 788:  79%|███████▉  | 789/1000 [36:11<09:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 426 / 43 / 789:  79%|███████▉  | 789/1000 [36:11<09:40,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 426 / 43 / 789:  79%|███████▉  | 790/1000 [36:14<09:38,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 427 / 43 / 790:  79%|███████▉  | 790/1000 [36:14<09:38,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 427 / 43 / 790:  79%|███████▉  | 791/1000 [36:16<09:35,  2.75s/it]implements the visitor to create a method . --> overrides the visitor to look for a method --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , int [[varOffset]] ) { [[varOffset]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor [[britannic]] , final MethodInfo methodInfo , int [[fca]] ) { [[fca]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[britannic]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[britannic]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[britannic]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 786 ---------------------------------------------
Get the flags . --> Gets the system string . --> Socre: 1.0

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[badges]] ) { if ( [[badges]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[badges]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[badges]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 787 ---------------------------------------------
Send http response . --> Send a HTTP response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[lancia]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Extracts the default encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String [[defaultEncoding]] ) { String encoding = [[extractEncoding]] ( contentType ) ; if ( encoding == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } encoding = [[defaultEncoding]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[chal]] ( final String contentType , String [[destination]] ) { String encoding = [[chal]] ( contentType ) ; if ( encoding == null ) { if ( [[destination]] == null ) { [[destination]] = JoddCore . encoding ; } encoding = [[destination]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Visit a primitive type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[doorsteps]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 790 ---------------------------------------------
Get the HTTP header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[request]] ) { String header = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[enquired]] ) { String header = [[enquired]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 428 / 43 / 791:  79%|███████▉  | 791/1000 [36:16<09:35,  2.75s/it][Succeeded / Failed / Skipped / Total] 320 / 428 / 43 / 791:  79%|███████▉  | 792/1000 [36:20<09:32,  2.75s/it][Succeeded / Failed / Skipped / Total] 321 / 428 / 43 / 792:  79%|███████▉  | 792/1000 [36:20<09:32,  2.75s/it][Succeeded / Failed / Skipped / Total] 321 / 428 / 43 / 792:  79%|███████▉  | 793/1000 [36:24<09:30,  2.76s/it][Succeeded / Failed / Skipped / Total] 322 / 428 / 43 / 793:  79%|███████▉  | 793/1000 [36:24<09:30,  2.76s/it][Succeeded / Failed / Skipped / Total] 322 / 428 / 43 / 793:  79%|███████▉  | 794/1000 [36:30<09:28,  2.76s/it][Succeeded / Failed / Skipped / Total] 322 / 429 / 43 / 794:  79%|███████▉  | 794/1000 [36:30<09:28,  2.76s/it][Succeeded / Failed / Skipped / Total] 322 / 429 / 43 / 794:  80%|███████▉  | 795/1000 [36:31<09:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 323 / 429 / 43 / 795:  80%|███████▉  | 795/1000 [36:31<09:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 323 / 429 / 43 / 795:  80%|███████▉  | 796/1000 [36:33<09:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 324 / 429 / 43 / 796:  80%|███████▉  | 796/1000 [36:33<09:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 324 / 429 / 43 / 796:  80%|███████▉  | 797/1000 [36:33<09:18,  2.75s/it][Succeeded / Failed / Skipped / Total] 325 / 429 / 43 / 797:  80%|███████▉  | 797/1000 [36:33<09:18,  2.75s/it][Succeeded / Failed / Skipped / Total] 325 / 429 / 43 / 797:  80%|███████▉  | 798/1000 [36:38<09:16,  2.75s/it]Download a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[cheetos]] ( final HttpServletResponse [[commentaries]] , final File [[deposition]] , final String mimeType ) { if ( ! [[deposition]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[deposition]] ) ; } if ( [[deposition]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[deposition]] ) ; } prepareResponse ( [[commentaries]] , [[deposition]] . getAbsolutePath ( ) , mimeType , ( int ) [[deposition]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Read a request from a file . --> Method to write a file to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader [[buff]] = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[alzheimer]] ( final HttpServletRequest [[application]] ) throws IOException { BufferedReader [[hermione]] = [[application]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[hermione]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Get the request parameter values from the request . --> Converts a request to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[soulmates]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = [[soulmates]] . length ; for ( int i = 0 ; i < [[soulmates]] . length ; i ++ ) { String paramValue = [[soulmates]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[soulmates]] [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return [[soulmates]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 794 ---------------------------------------------
Set the mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String [[fileName]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[fileName]] != null ) ) { String [[extension]] = FileNameUtil . getExtension ( [[fileName]] ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse response , final String [[illustrates]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[illustrates]] != null ) ) { String [[amplify]] = FileNameUtil . getExtension ( [[illustrates]] ) ; mimeType = MimeTypes . getMimeType ( [[amplify]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 795 ---------------------------------------------
Set the servlet context . --> Unregister a servlet --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[azari]] ( final ServletContext servletContext , final String [[juni]] ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[juni]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 796 ---------------------------------------------
Gets the list of cookies . --> Get cookie cookie by cookie --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie cookie : [[cookies]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[list]] . add ( cookie ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[cheesecake]] = request . getCookies ( ) ; if ( [[cheesecake]] == null ) { return null ; } ArrayList < Cookie > [[registering]] = new ArrayList <> ( [[cheesecake]] . length ) ; for ( Cookie cookie : [[cheesecake]] ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { [[registering]] . add ( cookie ) ; } } if ( [[registering]] . isEmpty ( ) ) { return null ; } return [[registering]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 797 ---------------------------------------------
Invokes the body of the body . --> Convenience method for creating a holder --> Socre: 1.0

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[arranging]] ) throws JspException { if ( [[arranging]] == null ) { return ; } try { [[arranging]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
[Succeeded / Failed / Skipped / Total] 326 / 429 / 43 / 798:  80%|███████▉  | 798/1000 [36:38<09:16,  2.75s/it][Succeeded / Failed / Skipped / Total] 326 / 429 / 43 / 798:  80%|███████▉  | 799/1000 [36:39<09:13,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 429 / 43 / 799:  80%|███████▉  | 799/1000 [36:39<09:13,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 429 / 43 / 799:  80%|████████  | 800/1000 [36:39<09:09,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 430 / 43 / 800:  80%|████████  | 800/1000 [36:39<09:09,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 430 / 43 / 800:  80%|████████  | 801/1000 [36:45<09:07,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 431 / 43 / 801:  80%|████████  | 801/1000 [36:45<09:07,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 431 / 43 / 801:  80%|████████  | 802/1000 [36:48<09:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 432 / 43 / 802:  80%|████████  | 802/1000 [36:48<09:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 327 / 432 / 43 / 802:  80%|████████  | 803/1000 [36:49<09:01,  2.75s/it][Succeeded / Failed / Skipped / Total] 328 / 432 / 43 / 803:  80%|████████  | 803/1000 [36:49<09:01,  2.75s/it][Succeeded / Failed / Skipped / Total] 328 / 432 / 43 / 803:  80%|████████  | 804/1000 [36:50<08:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 329 / 432 / 43 / 804:  80%|████████  | 804/1000 [36:50<08:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 329 / 432 / 43 / 804:  80%|████████  | 805/1000 [36:53<08:56,  2.75s/it][Succeeded / Failed / Skipped / Total] 330 / 432 / 43 / 805:  80%|████████  | 805/1000 [36:53<08:56,  2.75s/it][Succeeded / Failed / Skipped / Total] 330 / 432 / 43 / 805:  81%|████████  | 806/1000 [36:57<08:53,  2.75s/it]--------------------------------------------- Result 798 ---------------------------------------------
Returns the value of the request . --> Obtains a string from a URL --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : [[nameValuePairs]] ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[gallagher]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[cathedrals]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[zanzibar]] : [[cathedrals]] ) { if ( [[zanzibar]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 799 ---------------------------------------------
Render a writer . --> Encode a UTF8 --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[bebo]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 800 ---------------------------------------------
Read request from input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[bufferedReader]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[bufferedReader]] = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( [[bufferedReader]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[bufferedReader]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[encoded]] = request . getCharacterEncoding ( ) ; if ( [[encoded]] == null ) { [[encoded]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[mané]] = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { [[mané]] = new BufferedReader ( new InputStreamReader ( inputStream , [[encoded]] ) ) ; StreamUtil . copy ( [[mané]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[mané]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 801 ---------------------------------------------
Destroy the call . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[abbott]] ( ) { for ( final DestroyMethodPoint [[oan]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[oan]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[oan]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 802 ---------------------------------------------
Build a servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String [[cervezas]] ) { String [[cup]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[cervezas]] , [[cup]] ) ; ServletContext [[skeptic]] = pageContext . getServletContext ( ) ; [[skeptic]] . setAttribute ( [[cervezas]] , [[cup]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 803 ---------------------------------------------
Sets the param . --> Registers a bean --> Socre: 1.0

[[[[Adv]]]]: public void injectParams ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void injectParams ( final ParamManager paramManager , final boolean [[haa]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[haa]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 804 ---------------------------------------------
Initialize static method . --> Initialize the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[saboteurs]] ( final InitMethodInvocationStrategy [[outweighs]] ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( [[outweighs]] != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Renders a body of body . --> Render a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[colwyn]] ( final JspFragment [[corporeal]] ) throws JspException { char [ ] result = renderBody ( [[corporeal]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
[Succeeded / Failed / Skipped / Total] 331 / 432 / 43 / 806:  81%|████████  | 806/1000 [36:57<08:53,  2.75s/it][Succeeded / Failed / Skipped / Total] 331 / 432 / 43 / 806:  81%|████████  | 807/1000 [36:57<08:50,  2.75s/it][Succeeded / Failed / Skipped / Total] 332 / 432 / 43 / 807:  81%|████████  | 807/1000 [36:57<08:50,  2.75s/it][Succeeded / Failed / Skipped / Total] 332 / 432 / 43 / 807:  81%|████████  | 808/1000 [36:58<08:47,  2.75s/it][Succeeded / Failed / Skipped / Total] 332 / 433 / 43 / 808:  81%|████████  | 808/1000 [36:58<08:47,  2.75s/it][Succeeded / Failed / Skipped / Total] 332 / 433 / 43 / 808:  81%|████████  | 809/1000 [37:04<08:45,  2.75s/it][Succeeded / Failed / Skipped / Total] 333 / 433 / 43 / 809:  81%|████████  | 809/1000 [37:04<08:45,  2.75s/it][Succeeded / Failed / Skipped / Total] 333 / 433 / 43 / 809:  81%|████████  | 810/1000 [37:07<08:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 334 / 433 / 43 / 810:  81%|████████  | 810/1000 [37:07<08:42,  2.75s/it][Succeeded / Failed / Skipped / Total] 334 / 433 / 43 / 810:  81%|████████  | 811/1000 [37:07<08:39,  2.75s/it][Succeeded / Failed / Skipped / Total] 335 / 433 / 43 / 811:  81%|████████  | 811/1000 [37:07<08:39,  2.75s/it][Succeeded / Failed / Skipped / Total] 335 / 433 / 43 / 811:  81%|████████  | 812/1000 [37:07<08:35,  2.74s/it][Succeeded / Failed / Skipped / Total] 336 / 433 / 43 / 812:  81%|████████  | 812/1000 [37:07<08:35,  2.74s/it][Succeeded / Failed / Skipped / Total] 336 / 433 / 43 / 812:  81%|████████▏ | 813/1000 [37:13<08:33,  2.75s/it][Succeeded / Failed / Skipped / Total] 337 / 433 / 43 / 813:  81%|████████▏ | 813/1000 [37:13<08:33,  2.75s/it]--------------------------------------------- Result 806 ---------------------------------------------
Sets the HTTP method . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest [[introvert]] , final String [[bidet]] , final String httpMethod ) { return [[bidet]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 807 ---------------------------------------------
Appends a string to the base . --> Append a value to a string --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[okayama]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 808 ---------------------------------------------
Creates a new bean . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[aggressors]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[transistors]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[transistors]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 809 ---------------------------------------------
Resolves a value . --> Converts a string to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[captor]] ( String value , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 810 ---------------------------------------------
Converts a byte array to a byte array . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[straightens]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 811 ---------------------------------------------
Adds a value to the map . --> Adds a new profile . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String [[key]] , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[key]] ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( [[key]] , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String profile , final Map < String , PropsEntry > map , final String [[rudiments]] , final String value , final boolean append ) { String [[courses]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( [[rudiments]] ) ; if ( pv != null ) { [[courses]] = pv . value + APPEND_SEPARATOR + [[courses]] ; } } PropsEntry propsEntry = new PropsEntry ( [[rudiments]] , [[courses]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 812 ---------------------------------------------
Adds a value for the given property . --> Put a value into a map --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[multe]] ( final String key , final String value , final String [[depiction]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[depiction]] , k -> new HashMap <> ( ) ) ; put ( [[depiction]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 813 ---------------------------------------------
Encrypts a password . --> Convert salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[castrati]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 814 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 433 / 43 / 814:  81%|████████▏ | 814/1000 [37:13<08:30,  2.74s/it][Succeeded / Failed / Skipped / Total] 338 / 433 / 43 / 814:  82%|████████▏ | 815/1000 [37:15<08:27,  2.74s/it][Succeeded / Failed / Skipped / Total] 338 / 434 / 43 / 815:  82%|████████▏ | 815/1000 [37:15<08:27,  2.74s/it][Succeeded / Failed / Skipped / Total] 339 / 434 / 43 / 816:  82%|████████▏ | 816/1000 [37:30<08:27,  2.76s/it][Succeeded / Failed / Skipped / Total] 339 / 434 / 43 / 816:  82%|████████▏ | 817/1000 [37:37<08:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 434 / 43 / 817:  82%|████████▏ | 817/1000 [37:37<08:25,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 434 / 43 / 817:  82%|████████▏ | 818/1000 [37:40<08:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 435 / 43 / 818:  82%|████████▏ | 818/1000 [37:40<08:22,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 435 / 43 / 818:  82%|████████▏ | 819/1000 [37:44<08:20,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 436 / 43 / 819:  82%|████████▏ | 819/1000 [37:44<08:20,  2.76s/it][Succeeded / Failed / Skipped / Total] 340 / 436 / 43 / 819:  82%|████████▏ | 820/1000 [37:49<08:18,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 436 / 43 / 820:  82%|████████▏ | 820/1000 [37:49<08:18,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 436 / 43 / 820:  82%|████████▏ | 821/1000 [37:50<08:14,  2.77s/it]Extracts the request parameters from the request . --> Convenience method for retrieving a single parameter --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[villas]] ( final HttpServletRequest [[desserts]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[desserts]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[loke]] = ( String ) paramNames . nextElement ( ) ; if ( [[desserts]] . getAttribute ( [[loke]] ) != null ) { continue ; } String [ ] paramValues = [[desserts]] . getParameterValues ( [[loke]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[desserts]] . setAttribute ( [[loke]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 815 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[città]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 816 ---------------------------------------------
Gets the profile . --> Get a how many ade --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[jedediah]] ( final String [[contours]] , final String [[crucial]] ) { final Map < String , PropsEntry > [[hatim]] = profileProperties . get ( [[contours]] ) ; if ( [[hatim]] == null ) { return null ; } return [[hatim]] . get ( [[crucial]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 817 ---------------------------------------------
Resolve annotation . --> Obtains AnnotationType --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[cengiz]] ( final ActionAnnotationValues [[accountability]] ) { final Class < ? extends Annotation > [[hooray]] ; if ( [[accountability]] == null ) { [[hooray]] = Action . class ; } else { [[hooray]] = [[accountability]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[hooray]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 818 ---------------------------------------------
Converts a map to a map . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] [[profiles]] , final String [ ] wildcardPatterns , String [[prefix]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[remove]] ( Map target , final String [ ] [[characterized]] , final String [ ] wildcardPatterns , String [[infinitive]] ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 819 ---------------------------------------------
Writes a byte to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[apprised]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 820 ---------------------------------------------
Registers a alias . --> Synchronously register a certain --> Socre: 1.0

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition [[actionDefinition]] ) { final String [[alias]] = parseMethodAlias ( [[annotationValues]] ) ; if ( [[alias]] != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues [[bebo]] , final ActionDefinition [[rossendale]] ) { final String [[fake]] = parseMethodAlias ( [[bebo]] ) ; if ( [[fake]] != null ) { String [[babbage]] = StringUtil . cutToIndexOf ( [[rossendale]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[fake]] , [[babbage]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 821 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 341 / 437 / 43 / 821:  82%|████████▏ | 821/1000 [37:50<08:14,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 437 / 43 / 821:  82%|████████▏ | 822/1000 [37:53<08:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 438 / 43 / 822:  82%|████████▏ | 822/1000 [37:53<08:12,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 438 / 43 / 822:  82%|████████▏ | 823/1000 [37:53<08:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 341 / 438 / 44 / 823:  82%|████████▏ | 823/1000 [37:53<08:09,  2.76s/it][Succeeded / Failed / Skipped / Total] 341 / 438 / 44 / 823:  82%|████████▏ | 824/1000 [38:03<08:07,  2.77s/it][Succeeded / Failed / Skipped / Total] 341 / 439 / 44 / 824:  82%|████████▏ | 824/1000 [38:03<08:07,  2.77s/it][Succeeded / Failed / Skipped / Total] 342 / 439 / 44 / 825:  82%|████████▎ | 825/1000 [38:04<08:04,  2.77s/it][Succeeded / Failed / Skipped / Total] 342 / 439 / 44 / 825:  83%|████████▎ | 826/1000 [38:04<08:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 342 / 440 / 44 / 826:  83%|████████▎ | 826/1000 [38:04<08:01,  2.77s/it][Succeeded / Failed / Skipped / Total] 343 / 440 / 44 / 827:  83%|████████▎ | 827/1000 [38:07<07:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 343 / 440 / 44 / 827:  83%|████████▎ | 828/1000 [38:10<07:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 344 / 440 / 44 / 828:  83%|████████▎ | 828/1000 [38:10<07:55,  2.77s/it]Parses the action annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > [[actionClass]] , final Method actionMethod , ActionDefinition [[actionDefinition]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > [[ionosphere]] , final Method actionMethod , ActionDefinition [[hammad]] ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 822 ---------------------------------------------
Converts bytes to a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == [[maxBytes]] ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int [[malignant]] ) throws IOException { int [[trier]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[trier]] ++ ; if ( [[trier]] == [[malignant]] ) { return [[trier]] ; } } return [[trier]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the last modified date . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[sigma]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[sigma]] != null ) { result = [[sigma]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 825 ---------------------------------------------
Adapts a Class object to a ClassLoader --> Loads a list of loads --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[shitloads]] > [[shitloads]] applyAdvice ( final Class < [[shitloads]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 826 ---------------------------------------------
Get the package name . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class [[actionClass]] ) { Package [[actionPackage]] = [[actionClass]] . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class [[grasse]] ) { Package [[hom]] = [[grasse]] . getPackage ( ) ; final String actionPackageName = [[hom]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Obtains a specific action . --> Obtain the ClassDescriptor from a ClassLoader --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy [[interceptedBy]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { [[result]] = [[interceptedBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[accomplishments]] = null ; InterceptedBy [[tonne]] = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( [[tonne]] != null ) { [[accomplishments]] = [[tonne]] . value ( ) ; if ( [[accomplishments]] . length == 0 ) { [[accomplishments]] = null ; } } return [[accomplishments]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 828 ---------------------------------------------
Returns the string that contains the given string . --> Returns the &lt ; --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] [[hashed_bytes]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; [[hashed_bytes]] = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[False]]" != "[[False]]" ; } if ( [[hashed_bytes]] . length != try_bytes . length ) { return "[[False]]" != "[[False]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[hashed_bytes]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[garcia]] ) { byte [ ] [[cinematographic]] ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[garcia]] ) ; [[cinematographic]] = [[garcia]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "[[Untruthful]]" != "[[Untruthful]]" ; } if ( [[cinematographic]] . length != try_bytes . length ) { return "[[Untruthful]]" != "[[Untruthful]]" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= [[cinematographic]] [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
[Succeeded / Failed / Skipped / Total] 344 / 441 / 44 / 829:  83%|████████▎ | 829/1000 [38:11<07:52,  2.76s/it][Succeeded / Failed / Skipped / Total] 344 / 441 / 44 / 829:  83%|████████▎ | 830/1000 [38:14<07:50,  2.77s/it][Succeeded / Failed / Skipped / Total] 344 / 442 / 44 / 830:  83%|████████▎ | 830/1000 [38:14<07:50,  2.77s/it][Succeeded / Failed / Skipped / Total] 345 / 442 / 44 / 831:  83%|████████▎ | 831/1000 [38:19<07:47,  2.77s/it][Succeeded / Failed / Skipped / Total] 345 / 442 / 44 / 831:  83%|████████▎ | 832/1000 [38:23<07:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 346 / 442 / 44 / 832:  83%|████████▎ | 832/1000 [38:23<07:45,  2.77s/it][Succeeded / Failed / Skipped / Total] 346 / 443 / 44 / 833:  83%|████████▎ | 833/1000 [38:23<07:41,  2.77s/it][Succeeded / Failed / Skipped / Total] 346 / 443 / 44 / 833:  83%|████████▎ | 834/1000 [38:29<07:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 346 / 444 / 44 / 834:  83%|████████▎ | 834/1000 [38:29<07:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 444 / 44 / 835:  84%|████████▎ | 835/1000 [38:30<07:36,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 444 / 44 / 835:  84%|████████▎ | 836/1000 [38:32<07:33,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 445 / 44 / 836:  84%|████████▎ | 836/1000 [38:32<07:33,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 446 / 44 / 837:  84%|████████▎ | 837/1000 [38:33<07:30,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 446 / 44 / 837:  84%|████████▍ | 838/1000 [38:34<07:27,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 447 / 44 / 838:  84%|████████▍ | 838/1000 [38:34<07:27,  2.76s/it]--------------------------------------------- Result 829 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[nazir]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Parse annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[earnshaw]] ( final ActionAnnotationValues [[whippin]] ) { String [[synonymous]] = null ; if ( [[whippin]] != null ) { [[synonymous]] = [[whippin]] . alias ( ) ; } return [[synonymous]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves the name of the given name . --> Get a String representation of a given String --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[carrie]] ( final String [[barbell]] ) { if ( jsonNames == null ) { return [[barbell]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[barbell]] ) ; if ( jsonIndex == - 1 ) { return [[barbell]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 832 ---------------------------------------------
Returns the index of the given name . --> Returns the URL for the given URL --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String realName ) { if ( realNames == null ) { return realName ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , realName ) ; if ( [[realIndex]] == - 1 ) { return realName ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[bangkok]] ( final String realName ) { if ( realNames == null ) { return realName ; } int [[burlington]] = ArraysUtil . indexOf ( realNames , realName ) ; if ( [[burlington]] == - 1 ) { return realName ; } return jsonNames [ [[burlington]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 833 ---------------------------------------------
Visit an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[aqueduct]] ( final String [[cheetos]] , final boolean [[conspicuously]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[cheetos]] , [[conspicuously]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 834 ---------------------------------------------
Get the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[highwayman]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 835 ---------------------------------------------
Resolve the type for the given type . --> Converts a type to a type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[consistent]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 836 ---------------------------------------------
Get the type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( type ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData [[philips]] = typeDataMap . get ( type ) ; if ( [[philips]] == null ) { if ( serializationSubclassAware ) { [[philips]] = findSubclassTypeData ( type ) ; } if ( [[philips]] == null ) { [[philips]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[philips]] ) ; } } return [[philips]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Get the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[typing]] ) { TypeData typeData = typeDataMap . get ( [[typing]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[typing]] ) ; typeDataMap . put ( [[typing]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the type of the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[sorted]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[sorted]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 448 / 44 / 839:  84%|████████▍ | 839/1000 [38:38<07:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 448 / 44 / 839:  84%|████████▍ | 840/1000 [38:45<07:22,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 449 / 44 / 840:  84%|████████▍ | 840/1000 [38:45<07:22,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 449 / 44 / 840:  84%|████████▍ | 841/1000 [38:46<07:19,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 450 / 44 / 841:  84%|████████▍ | 841/1000 [38:46<07:19,  2.77s/it][Succeeded / Failed / Skipped / Total] 347 / 450 / 44 / 841:  84%|████████▍ | 842/1000 [38:47<07:16,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 451 / 44 / 842:  84%|████████▍ | 842/1000 [38:47<07:16,  2.76s/it][Succeeded / Failed / Skipped / Total] 347 / 451 / 44 / 842:  84%|████████▍ | 843/1000 [38:53<07:14,  2.77s/it][Succeeded / Failed / Skipped / Total] 348 / 451 / 44 / 843:  84%|████████▍ | 843/1000 [38:53<07:14,  2.77s/it][Succeeded / Failed / Skipped / Total] 348 / 451 / 44 / 843:  84%|████████▍ | 844/1000 [38:54<07:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 349 / 451 / 44 / 844:  84%|████████▍ | 844/1000 [38:54<07:11,  2.77s/it][Succeeded / Failed / Skipped / Total] 349 / 451 / 44 / 844:  84%|████████▍ | 845/1000 [39:03<07:09,  2.77s/it][Succeeded / Failed / Skipped / Total] 349 / 452 / 44 / 845:  84%|████████▍ | 845/1000 [39:03<07:09,  2.77s/it][Succeeded / Failed / Skipped / Total] 349 / 452 / 44 / 845:  85%|████████▍ | 846/1000 [39:08<07:07,  2.78s/it][Succeeded / Failed / Skipped / Total] 349 / 453 / 44 / 846:  85%|████████▍ | 846/1000 [39:08<07:07,  2.78s/it][Succeeded / Failed / Skipped / Total] 349 / 453 / 44 / 846:  85%|████████▍ | 847/1000 [39:10<07:04,  2.78s/it]Sets the target object . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[aboutyou]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 840 ---------------------------------------------
Put a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[aiden]] ( final ByteVector [[yields]] ) { [[yields]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves a type name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class [[type]] , final String name ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class [[classifies]] , final String name ) { TypeData typeData = lookupTypeData ( [[classifies]] ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 842 ---------------------------------------------
Adds a bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[pip]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 843 ---------------------------------------------
Copies an existing character . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[nagy]] ( final ClassReader [[gastrointestinal]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 844 ---------------------------------------------
Adds a member . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[index]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[index]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[alphabetically]] , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( [[alphabetically]] , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 845 ---------------------------------------------
Add a symbol . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[nazir]] ( final String owner , final String [[spelled]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[spelled]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Add a major version . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[bragg]] ( final int [[gird]] , final String className ) { this . majorVersion = [[gird]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 454 / 44 / 847:  85%|████████▍ | 847/1000 [39:10<07:04,  2.78s/it][Succeeded / Failed / Skipped / Total] 349 / 454 / 44 / 847:  85%|████████▍ | 848/1000 [39:23<07:03,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 455 / 44 / 848:  85%|████████▍ | 848/1000 [39:23<07:03,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 455 / 44 / 848:  85%|████████▍ | 849/1000 [39:26<07:00,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 456 / 44 / 849:  85%|████████▍ | 849/1000 [39:26<07:00,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 456 / 44 / 849:  85%|████████▌ | 850/1000 [39:33<06:58,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 457 / 44 / 850:  85%|████████▌ | 850/1000 [39:33<06:58,  2.79s/it][Succeeded / Failed / Skipped / Total] 349 / 457 / 44 / 850:  85%|████████▌ | 851/1000 [39:39<06:56,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 458 / 44 / 851:  85%|████████▌ | 851/1000 [39:39<06:56,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 458 / 44 / 851:  85%|████████▌ | 852/1000 [39:44<06:54,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 459 / 44 / 852:  85%|████████▌ | 852/1000 [39:44<06:54,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 459 / 44 / 852:  85%|████████▌ | 853/1000 [39:45<06:51,  2.80s/it]Create a new scope action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] [[filters]] , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , [[filters]] , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] [[cleaners]] , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , [[cleaners]] , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a new symbol . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String [[owner]] , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String [[belongs]] , final String name , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[belongs]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds an entry to the list . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[yearling]] ( final int index , final int tag , final int [[deserving]] ) { add ( new Entry ( index , tag , [[deserving]] , hash ( tag , [[deserving]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[brighter]] ( final int [[identification]] , final int value ) { int hashCode = hash ( [[identification]] , value ) ; Entry [[inputs]] = get ( hashCode ) ; while ( [[inputs]] != null ) { if ( [[inputs]] . tag == [[identification]] && [[inputs]] . hashCode == hashCode && [[inputs]] . data == value ) { return [[inputs]] ; } [[inputs]] = [[inputs]] . next ; } constantPool . putByte ( [[identification]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[identification]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a long . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[magnitude]] ) { add ( new Entry ( index , tag , [[magnitude]] , hash ( tag , [[magnitude]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[rotates]] ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 460 / 44 / 853:  85%|████████▌ | 853/1000 [39:45<06:51,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 460 / 44 / 853:  85%|████████▌ | 854/1000 [39:49<06:48,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 461 / 44 / 854:  85%|████████▌ | 854/1000 [39:49<06:48,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 461 / 44 / 854:  86%|████████▌ | 855/1000 [39:51<06:45,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 462 / 44 / 855:  86%|████████▌ | 855/1000 [39:51<06:45,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 462 / 44 / 855:  86%|████████▌ | 856/1000 [39:52<06:42,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 463 / 44 / 856:  86%|████████▌ | 856/1000 [39:52<06:42,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 463 / 44 / 856:  86%|████████▌ | 857/1000 [39:57<06:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 464 / 44 / 857:  86%|████████▌ | 857/1000 [39:57<06:40,  2.80s/it][Succeeded / Failed / Skipped / Total] 349 / 464 / 44 / 857:  86%|████████▌ | 858/1000 [40:04<06:37,  2.80s/it][Succeeded / Failed / Skipped / Total] 350 / 464 / 44 / 858:  86%|████████▌ | 858/1000 [40:04<06:37,  2.80s/it][Succeeded / Failed / Skipped / Total] 350 / 464 / 44 / 858:  86%|████████▌ | 859/1000 [40:18<06:36,  2.82s/it]Add a tag . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int index , final String [[nickname]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[nickname]] , descriptor , hash ( tag , [[nickname]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Add a constant entry . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[clues]] , final String value ) { add ( new Entry ( [[clues]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a owner to the map . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String [[name]] , final String descriptor ) { int hashCode = hash ( tag , owner , [[name]] , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , [[name]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String [[designated]] , final String descriptor ) { int hashCode = hash ( tag , owner , [[designated]] , descriptor ) ; Entry [[admissions]] = get ( hashCode ) ; while ( [[admissions]] != null ) { if ( [[admissions]] . tag == tag && [[admissions]] . hashCode == hashCode && [[admissions]] . owner . equals ( owner ) && [[admissions]] . name . equals ( [[designated]] ) && [[admissions]] . value . equals ( descriptor ) ) { return [[admissions]] ; } [[admissions]] = [[admissions]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( [[designated]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , [[designated]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[carrie]] = hash ( tag , name , descriptor ) ; Entry entry = get ( [[carrie]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[carrie]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , [[carrie]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Returns the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[better]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[enters]] = get ( hashCode ) ; while ( [[enters]] != null ) { if ( [[enters]] . tag == Symbol . CONSTANT_UTF8_TAG && [[enters]] . hashCode == hashCode && [[enters]] . value . equals ( value ) ) { return [[enters]] . index ; } [[enters]] = [[enters]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a value to the list . -->  --> Socre: 0.9999999999999969

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[forefinger]] , final int tag , final String value ) { add ( new Entry ( [[forefinger]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 465 / 44 / 859:  86%|████████▌ | 859/1000 [40:18<06:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 465 / 44 / 859:  86%|████████▌ | 860/1000 [40:24<06:34,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 466 / 44 / 860:  86%|████████▌ | 860/1000 [40:24<06:34,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 466 / 44 / 860:  86%|████████▌ | 861/1000 [40:28<06:32,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 467 / 44 / 861:  86%|████████▌ | 861/1000 [40:28<06:32,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 467 / 44 / 861:  86%|████████▌ | 862/1000 [40:32<06:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 468 / 44 / 862:  86%|████████▌ | 862/1000 [40:32<06:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 468 / 44 / 862:  86%|████████▋ | 863/1000 [40:34<06:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 469 / 44 / 863:  86%|████████▋ | 863/1000 [40:34<06:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 469 / 44 / 863:  86%|████████▋ | 864/1000 [40:35<06:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 470 / 44 / 864:  86%|████████▋ | 864/1000 [40:35<06:23,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 470 / 44 / 864:  86%|████████▋ | 865/1000 [40:37<06:20,  2.82s/it]Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Add a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[bakas]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String name , final String descriptor , final Handle [[awoke]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[awoke]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Add a bootstrap attribute . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle [[colwyn]] , final Object ... [[carrot]] ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 863 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[tag]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[tag]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int [[badges]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[badges]] , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , [[badges]] , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[better]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[better]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 471 / 44 / 865:  86%|████████▋ | 865/1000 [40:37<06:20,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 471 / 44 / 865:  87%|████████▋ | 866/1000 [40:45<06:18,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 472 / 44 / 866:  87%|████████▋ | 866/1000 [40:45<06:18,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 472 / 44 / 866:  87%|████████▋ | 867/1000 [40:46<06:15,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 473 / 44 / 867:  87%|████████▋ | 867/1000 [40:46<06:15,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 473 / 44 / 867:  87%|████████▋ | 868/1000 [40:47<06:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 474 / 44 / 868:  87%|████████▋ | 868/1000 [40:47<06:12,  2.82s/it][Succeeded / Failed / Skipped / Total] 350 / 474 / 44 / 868:  87%|████████▋ | 869/1000 [40:51<06:09,  2.82s/it][Succeeded / Failed / Skipped / Total] 351 / 474 / 44 / 869:  87%|████████▋ | 869/1000 [40:51<06:09,  2.82s/it][Succeeded / Failed / Skipped / Total] 351 / 474 / 44 / 869:  87%|████████▋ | 870/1000 [40:53<06:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 352 / 474 / 44 / 870:  87%|████████▋ | 870/1000 [40:53<06:06,  2.82s/it][Succeeded / Failed / Skipped / Total] 352 / 474 / 44 / 870:  87%|████████▋ | 871/1000 [40:54<06:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 353 / 474 / 44 / 871:  87%|████████▋ | 871/1000 [40:54<06:03,  2.82s/it][Succeeded / Failed / Skipped / Total] 353 / 474 / 44 / 871:  87%|████████▋ | 872/1000 [40:55<06:00,  2.82s/it][Succeeded / Failed / Skipped / Total] 354 / 474 / 44 / 872:  87%|████████▋ | 872/1000 [40:55<06:00,  2.82s/it][Succeeded / Failed / Skipped / Total] 354 / 474 / 44 / 872:  87%|████████▋ | 873/1000 [41:00<05:57,  2.82s/it]Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[aymara]] ( final int tag , final String [[evaluating]] ) { int hashCode = hash ( tag , [[evaluating]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[evaluating]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[evaluating]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[evaluating]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Clear the map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[evidently]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a number to this table . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int [[furman]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 868 ---------------------------------------------
Adds a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String [[baptism]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , [[baptism]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( [[baptism]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( [[baptism]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , [[baptism]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the value associated with the given key . --> Obtain a map from a map --> Socre: 1.0

[[[[Adv]]]]: public List < V > getAll ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String [[denominations]] ) { LinkedList < V > [[assessing]] = new LinkedList <> ( ) ; int h = hash ( [[denominations]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[denominations]] , e . key ) ) { [[assessing]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[assessing]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 870 ---------------------------------------------
Visit a annotation . --> Visit an annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor [[azmi]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 871 ---------------------------------------------
Move the buffer to the buffer . --> Check if a given capacity is less than threshold --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[burgeoning]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[tarak]] = oldCapacity << 1 ; if ( [[tarak]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 872 ---------------------------------------------
Populates the chain . --> Create a new bean --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[jovi]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 355 / 474 / 44 / 873:  87%|████████▋ | 873/1000 [41:00<05:57,  2.82s/it][Succeeded / Failed / Skipped / Total] 355 / 474 / 44 / 873:  87%|████████▋ | 874/1000 [41:01<05:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 355 / 475 / 44 / 874:  87%|████████▋ | 874/1000 [41:01<05:54,  2.82s/it][Succeeded / Failed / Skipped / Total] 355 / 475 / 44 / 874:  88%|████████▊ | 875/1000 [41:01<05:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 355 / 476 / 44 / 875:  88%|████████▊ | 875/1000 [41:01<05:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 355 / 476 / 44 / 875:  88%|████████▊ | 876/1000 [41:03<05:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 355 / 477 / 44 / 876:  88%|████████▊ | 876/1000 [41:03<05:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 355 / 477 / 44 / 876:  88%|████████▊ | 877/1000 [41:04<05:45,  2.81s/it][Succeeded / Failed / Skipped / Total] 356 / 477 / 44 / 877:  88%|████████▊ | 877/1000 [41:04<05:45,  2.81s/it][Succeeded / Failed / Skipped / Total] 356 / 477 / 44 / 877:  88%|████████▊ | 878/1000 [41:08<05:43,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 477 / 44 / 878:  88%|████████▊ | 878/1000 [41:08<05:43,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 477 / 44 / 878:  88%|████████▊ | 879/1000 [41:10<05:40,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 478 / 44 / 879:  88%|████████▊ | 879/1000 [41:10<05:40,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 478 / 44 / 879:  88%|████████▊ | 880/1000 [41:11<05:37,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 479 / 44 / 880:  88%|████████▊ | 880/1000 [41:11<05:37,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 479 / 44 / 880:  88%|████████▊ | 881/1000 [41:16<05:34,  2.81s/it]Starts the start of the end . --> Unregister a joc --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[jabberwocky]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 874 ---------------------------------------------
Returns all entries in this map . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[registering]] ( ) { List < Map . Entry < String , V > > [[foremost]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[foremost]] . add ( e ) ; e = e . after ; } return [[foremost]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 875 ---------------------------------------------
Removes all elements from the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[blares]] ( ) { final MapEntry [ ] [[fre]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[fre]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[fre]] [ 0 ] ; [[fre]] [ 0 ] = [[fre]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 876 ---------------------------------------------
Returns the name for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int [[i]] = name . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = name . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[decoded]] ( final String name ) { int h = 0 ; for ( int [[vous]] = name . length ( ) - 1 ; [[vous]] >= 0 ; [[vous]] -- ) { char c = name . charAt ( [[vous]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 877 ---------------------------------------------
Converts a string to a chars . --> Decrements the number of CharSequences --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int [[i]] = start ; [[i]] < end ; [[i]] ++ ) { [[append]] ( csq . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[sued]] ( final CharSequence csq , final int start , final int end ) { for ( int [[uh]] = start ; [[uh]] < end ; [[uh]] ++ ) { [[sued]] ( csq . charAt ( [[uh]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 878 ---------------------------------------------
Invokes a method . --> Execute a proxy --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[archeologists]] = [[archeologists]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[archeologists]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 879 ---------------------------------------------
Parse the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[estrada]] ) { return [[estrada]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[estrada]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 880 ---------------------------------------------
Add a path to this path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[whiplash]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 480 / 44 / 881:  88%|████████▊ | 881/1000 [41:16<05:34,  2.81s/it][Succeeded / Failed / Skipped / Total] 357 / 480 / 44 / 881:  88%|████████▊ | 882/1000 [41:17<05:31,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 480 / 44 / 882:  88%|████████▊ | 882/1000 [41:17<05:31,  2.81s/it][Succeeded / Failed / Skipped / Total] 358 / 480 / 44 / 882:  88%|████████▊ | 883/1000 [41:28<05:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 481 / 44 / 883:  88%|████████▊ | 883/1000 [41:28<05:29,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 481 / 44 / 883:  88%|████████▊ | 884/1000 [41:29<05:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 482 / 44 / 884:  88%|████████▊ | 884/1000 [41:29<05:26,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 482 / 44 / 884:  88%|████████▊ | 885/1000 [41:36<05:24,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 483 / 44 / 885:  88%|████████▊ | 885/1000 [41:36<05:24,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 483 / 44 / 885:  89%|████████▊ | 886/1000 [41:39<05:21,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 484 / 44 / 886:  89%|████████▊ | 886/1000 [41:39<05:21,  2.82s/it][Succeeded / Failed / Skipped / Total] 358 / 484 / 44 / 886:  89%|████████▊ | 887/1000 [41:44<05:19,  2.82s/it][Succeeded / Failed / Skipped / Total] 359 / 484 / 44 / 887:  89%|████████▊ | 887/1000 [41:44<05:19,  2.82s/it][Succeeded / Failed / Skipped / Total] 359 / 484 / 44 / 887:  89%|████████▉ | 888/1000 [41:49<05:16,  2.83s/it]Generate Method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[peed]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 882 ---------------------------------------------
Adds all entries to the map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[exploit]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 883 ---------------------------------------------
Append the buffer to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[richardson]] ( final Buffer [[tampons]] ) { if ( [[tampons]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 884 ---------------------------------------------
Add servlet servlet . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void configureServletContext ( final ServletContext [[delicto]] ) { [[delicto]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[seepage]] = [[delicto]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[seepage]] . addMappingForUrlPatterns ( null , "[[Authentic]]" == "[[Authentic]]" , contextPath ) ; } final FilterRegistration [[seepage]] = [[delicto]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[seepage]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[Authentic]]" == "[[Authentic]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 885 ---------------------------------------------
Gets the value of a property . --> [[[FAILED]]]

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[devotee]] ( final Object source , final PropertyDescriptor [[manifestations]] ) { Getter getter = [[manifestations]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Returns all fields contained in this instance . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[banners]] == null ) { FieldDescriptor [ ] [[banners]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[banners]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[banners]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[banners]] ; } return [[banners]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 887 ---------------------------------------------
Writes a progress to the output stream . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[fuse]] ( final OutputStream out , final HttpProgressListener [[zoc]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 484 / 44 / 888:  89%|████████▉ | 888/1000 [41:49<05:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 360 / 484 / 44 / 888:  89%|████████▉ | 889/1000 [41:51<05:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 361 / 484 / 44 / 889:  89%|████████▉ | 889/1000 [41:51<05:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 361 / 484 / 44 / 889:  89%|████████▉ | 890/1000 [41:53<05:10,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 484 / 44 / 890:  89%|████████▉ | 890/1000 [41:53<05:10,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 484 / 44 / 890:  89%|████████▉ | 891/1000 [41:56<05:07,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 485 / 44 / 891:  89%|████████▉ | 891/1000 [41:56<05:07,  2.82s/it][Succeeded / Failed / Skipped / Total] 362 / 485 / 44 / 891:  89%|████████▉ | 892/1000 [41:56<05:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 363 / 485 / 44 / 892:  89%|████████▉ | 892/1000 [41:56<05:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 363 / 485 / 44 / 892:  89%|████████▉ | 893/1000 [41:57<05:01,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 485 / 44 / 893:  89%|████████▉ | 893/1000 [41:57<05:01,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 485 / 44 / 893:  89%|████████▉ | 894/1000 [41:58<04:58,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 486 / 44 / 894:  89%|████████▉ | 894/1000 [41:58<04:58,  2.82s/it][Succeeded / Failed / Skipped / Total] 364 / 486 / 44 / 894:  90%|████████▉ | 895/1000 [41:58<04:55,  2.81s/it]Returns the number value for the given key . --> Convert a number to a Number --> Socre: 1.0

[[[[Adv]]]]: public Integer getInteger ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String [[momentous]] ) { Number [[numbering]] = ( Number ) map . get ( [[momentous]] ) ; if ( [[numbering]] == null ) { return null ; } if ( [[numbering]] instanceof Integer ) { return ( Integer ) [[numbering]] ; } return [[numbering]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 889 ---------------------------------------------
Get char from string . --> Get a char from a char --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[haa]] ( final String [[transcendental]] ) { CharSequence cs = ( CharSequence ) map . get ( [[transcendental]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the long value for the given key . --> Convert a number to a Number --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[acquired]] ( final String [[transcendental]] ) { Number number = ( Number ) map . get ( [[transcendental]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Closes the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object [[u]] : list ) { if ( [[u]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[u]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[u]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[u]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 892 ---------------------------------------------
Get a float value . --> Convert a number to integer --> Socre: 1.0

[[[[Adv]]]]: public Float getFloat ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float getFloat ( final String [[significance]] ) { Number number = ( Number ) map . get ( [[significance]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get the double . --> Convert a number to a number --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[christer]] ( final String [[significance]] ) { Number number = ( Number ) map . get ( [[significance]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[posts]] ) { final int isolation ; switch ( [[posts]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[posts]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 895 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 365 / 486 / 44 / 895:  90%|████████▉ | 895/1000 [41:58<04:55,  2.81s/it][Succeeded / Failed / Skipped / Total] 365 / 486 / 44 / 895:  90%|████████▉ | 896/1000 [42:01<04:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 365 / 487 / 44 / 896:  90%|████████▉ | 896/1000 [42:01<04:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 365 / 487 / 44 / 896:  90%|████████▉ | 897/1000 [42:07<04:50,  2.82s/it][Succeeded / Failed / Skipped / Total] 365 / 488 / 44 / 897:  90%|████████▉ | 897/1000 [42:07<04:50,  2.82s/it][Succeeded / Failed / Skipped / Total] 365 / 488 / 44 / 897:  90%|████████▉ | 898/1000 [42:14<04:47,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 488 / 44 / 898:  90%|████████▉ | 898/1000 [42:14<04:47,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 488 / 44 / 898:  90%|████████▉ | 899/1000 [42:15<04:44,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 489 / 44 / 899:  90%|████████▉ | 899/1000 [42:15<04:44,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 489 / 44 / 899:  90%|█████████ | 900/1000 [42:16<04:41,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 490 / 44 / 900:  90%|█████████ | 900/1000 [42:16<04:41,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 490 / 44 / 900:  90%|█████████ | 901/1000 [42:20<04:39,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 491 / 44 / 901:  90%|█████████ | 901/1000 [42:20<04:39,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 491 / 44 / 901:  90%|█████████ | 902/1000 [42:22<04:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 492 / 44 / 902:  90%|█████████ | 902/1000 [42:22<04:36,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 492 / 44 / 902:  90%|█████████ | 903/1000 [42:23<04:33,  2.82s/it]Gets the value of the JSON property . --> Converts a JSONArray to a map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[suma]] > [[suma]] getValue ( final String key ) { [[suma]] val = ( [[suma]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[suma]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[suma]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Create a new protection . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( type ) ; type = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = type ; final ProxettaFactory [[manufactured]] = proxetta . proxy ( ) ; [[manufactured]] . setTarget ( type ) ; type = [[manufactured]] . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 897 ---------------------------------------------
Write the input stream to a file . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[independently]] = ( Uploadable ) o ; InputStream inputStream = [[independently]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 898 ---------------------------------------------
Validate the profile . --> Validate violations --> Socre: 1.0

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[blueprint]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[blueprint]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 899 ---------------------------------------------
Add a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[brought]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Close the folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[deportment]] ( final String [[césar]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[césar]] ; this . folder = getService ( ) . getFolder ( [[césar]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[césar]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 901 ---------------------------------------------
Returns a string representation of the pool . --> [[[FAILED]]]

[[[[Adv]]]]: protected String alias ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String [[objectivity]] ) { return StringPool . LEFT_CHEV . concat ( [[objectivity]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 902 ---------------------------------------------
Closes the folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[masquerade]] ( final Folder [[dossiers]] ) { if ( [[dossiers]] != null ) { try { [[dossiers]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 903 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 493 / 44 / 903:  90%|█████████ | 903/1000 [42:23<04:33,  2.82s/it][Succeeded / Failed / Skipped / Total] 366 / 493 / 44 / 903:  90%|█████████ | 904/1000 [42:23<04:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 367 / 493 / 44 / 904:  90%|█████████ | 904/1000 [42:23<04:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 367 / 493 / 44 / 904:  90%|█████████ | 905/1000 [42:28<04:27,  2.82s/it][Succeeded / Failed / Skipped / Total] 368 / 493 / 44 / 905:  90%|█████████ | 905/1000 [42:28<04:27,  2.82s/it][Succeeded / Failed / Skipped / Total] 368 / 493 / 44 / 905:  91%|█████████ | 906/1000 [42:30<04:24,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 493 / 44 / 906:  91%|█████████ | 906/1000 [42:30<04:24,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 493 / 44 / 906:  91%|█████████ | 907/1000 [42:32<04:21,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 494 / 44 / 907:  91%|█████████ | 907/1000 [42:32<04:21,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 494 / 44 / 907:  91%|█████████ | 908/1000 [42:35<04:18,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 495 / 44 / 908:  91%|█████████ | 908/1000 [42:35<04:18,  2.81s/it][Succeeded / Failed / Skipped / Total] 369 / 495 / 44 / 908:  91%|█████████ | 909/1000 [42:35<04:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 495 / 44 / 909:  91%|█████████ | 909/1000 [42:35<04:15,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 495 / 44 / 909:  91%|█████████ | 910/1000 [42:36<04:12,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 496 / 44 / 910:  91%|█████████ | 910/1000 [42:36<04:12,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 496 / 44 / 910:  91%|█████████ | 911/1000 [42:37<04:09,  2.81s/it]Replies the given name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[okayama]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Get mime type . --> Replies the side . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[aside]] ) { if ( [[aside]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[aside]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[aside]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Sets the email . --> Opens a set of neighbours --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[organiser]] ( final ReceivedEmail [[carrie]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[carrie]] . messageNumber ( ) } , [[carrie]] . flags ( ) , "[[Dignified]]" == "[[Dignified]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 906 ---------------------------------------------
Create a new target class . --> Method to get the input stream --> Socre: 1.0

[[[[Adv]]]]: protected T setTarget ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T setTarget ( final String [[marklar]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[marklar]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[marklar]] ) ; } targetClassName = [[marklar]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[marklar]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 907 ---------------------------------------------
Process an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[treatise]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[step]] ( final InputStream [[orientated]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[orientated]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Returns a String representation of this class . --> Converts a proxy to a String --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[engendered]] ( ) { process ( ) ; byte [ ] result = toByteArray ( ) ; dumpClassInDebugFolder ( result ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return result ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 910 ---------------------------------------------
Add a Violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[huss]] ( final String name , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 911 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 370 / 497 / 44 / 911:  91%|█████████ | 911/1000 [42:37<04:09,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 497 / 44 / 911:  91%|█████████ | 912/1000 [42:40<04:07,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 498 / 44 / 912:  91%|█████████ | 912/1000 [42:40<04:07,  2.81s/it][Succeeded / Failed / Skipped / Total] 370 / 498 / 44 / 912:  91%|█████████▏| 913/1000 [42:45<04:04,  2.81s/it][Succeeded / Failed / Skipped / Total] 371 / 498 / 44 / 913:  91%|█████████▏| 913/1000 [42:45<04:04,  2.81s/it][Succeeded / Failed / Skipped / Total] 371 / 498 / 44 / 913:  91%|█████████▏| 914/1000 [42:47<04:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 371 / 499 / 44 / 914:  91%|█████████▏| 914/1000 [42:47<04:01,  2.81s/it][Succeeded / Failed / Skipped / Total] 371 / 499 / 44 / 914:  92%|█████████▏| 915/1000 [42:49<03:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 372 / 499 / 44 / 915:  92%|█████████▏| 915/1000 [42:49<03:58,  2.81s/it][Succeeded / Failed / Skipped / Total] 372 / 499 / 44 / 915:  92%|█████████▏| 916/1000 [42:51<03:55,  2.81s/it][Succeeded / Failed / Skipped / Total] 372 / 500 / 44 / 916:  92%|█████████▏| 916/1000 [42:51<03:55,  2.81s/it][Succeeded / Failed / Skipped / Total] 372 / 500 / 44 / 916:  92%|█████████▏| 917/1000 [42:53<03:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 373 / 500 / 44 / 917:  92%|█████████▏| 917/1000 [42:53<03:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 373 / 500 / 44 / 917:  92%|█████████▏| 918/1000 [42:57<03:50,  2.81s/it][Succeeded / Failed / Skipped / Total] 374 / 500 / 44 / 918:  92%|█████████▏| 918/1000 [42:57<03:50,  2.81s/it][Succeeded / Failed / Skipped / Total] 374 / 500 / 44 / 918:  92%|█████████▏| 919/1000 [43:02<03:47,  2.81s/it]Create a class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[jupiter]] ( final Class [[finality]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[finality]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[finality]] . getName ( ) ) ; } targetClass = [[finality]] ; targetClassName = [[finality]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[finality]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
Obtains the mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[affirming]] ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . [[onstage]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 913 ---------------------------------------------
Create a new person . --> Convert a string to a string representation --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String [[personalName]] , final String from ) { return from ( new EmailAddress ( [[personalName]] , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String [[billows]] , final String from ) { return from ( new EmailAddress ( [[billows]] , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 914 ---------------------------------------------
Create a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[alitalia]] ( ) { Class [[kinds]] = define ( ) ; try { return ClassUtil . newInstance ( [[kinds]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Sets the address . --> Return a new transaction --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[at]] ( final EmailAddress [[toward]] ) { this . to = ArraysUtil . append ( this . to , [[at]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 916 ---------------------------------------------
Instantiates a proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[lovebird]] = proxetta . getClassLoader ( ) ; if ( [[lovebird]] == null ) { [[lovebird]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[lovebird]] == null ) && ( targetClass != null ) ) { [[lovebird]] = targetClass . getClassLoader ( ) ; } } final byte [ ] [[fil]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[fil]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[fil]] , [[lovebird]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the value of the address . --> Sets the value of the array --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[ac]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the email address . --> Obtain a value from a category --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[BATTERED]] ( final EmailAddress ... [[BATTERED]] ) { this . [[caucus]] = ArraysUtil . join ( this . [[caucus]] , valueOrEmptyArray ( [[BATTERED]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 919 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 500 / 44 / 919:  92%|█████████▏| 919/1000 [43:02<03:47,  2.81s/it][Succeeded / Failed / Skipped / Total] 375 / 500 / 44 / 919:  92%|█████████▏| 920/1000 [43:03<03:44,  2.81s/it][Succeeded / Failed / Skipped / Total] 376 / 500 / 44 / 920:  92%|█████████▏| 920/1000 [43:03<03:44,  2.81s/it][Succeeded / Failed / Skipped / Total] 376 / 500 / 44 / 920:  92%|█████████▏| 921/1000 [43:06<03:41,  2.81s/it][Succeeded / Failed / Skipped / Total] 377 / 500 / 44 / 921:  92%|█████████▏| 921/1000 [43:06<03:41,  2.81s/it][Succeeded / Failed / Skipped / Total] 377 / 500 / 44 / 921:  92%|█████████▏| 922/1000 [43:08<03:39,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 500 / 44 / 922:  92%|█████████▏| 922/1000 [43:08<03:39,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 500 / 44 / 922:  92%|█████████▏| 923/1000 [43:09<03:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 501 / 44 / 923:  92%|█████████▏| 923/1000 [43:09<03:36,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 501 / 44 / 923:  92%|█████████▏| 924/1000 [43:12<03:33,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 502 / 44 / 924:  92%|█████████▏| 924/1000 [43:12<03:33,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 502 / 44 / 924:  92%|█████████▎| 925/1000 [43:15<03:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 503 / 44 / 925:  92%|█████████▎| 925/1000 [43:15<03:30,  2.81s/it][Succeeded / Failed / Skipped / Total] 378 / 503 / 44 / 925:  93%|█████████▎| 926/1000 [43:16<03:27,  2.80s/it][Succeeded / Failed / Skipped / Total] 378 / 504 / 44 / 926:  93%|█████████▎| 926/1000 [43:16<03:27,  2.80s/it][Succeeded / Failed / Skipped / Total] 378 / 504 / 44 / 926:  93%|█████████▎| 927/1000 [43:20<03:24,  2.80s/it]Convert a person to a name . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String [[to]] ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[between]] ( final String personalName , final String [[at]] ) { return [[between]] ( new EmailAddress ( personalName , [[between]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
Dumps a class file . --> Copy a file from a classpath --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[bytes]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File [[file]] = new File ( debugFolder , [[fileName]] ) ; try { FileUtil . writeBytes ( [[file]] , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] [[bead]] ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[kinder]] = proxyClassName ; if ( [[kinder]] == null ) { [[kinder]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[kinder]] += ".class" ; File [[archive]] = new File ( debugFolder , [[kinder]] ) ; try { FileUtil . writeBytes ( [[archive]] , [[bead]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[archive]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 921 ---------------------------------------------
Generates a HTML message . --> Method to create a deletionMessage --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String [[encoding]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[telegrams]] ( final String html , final String [[delamere]] ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , [[delamere]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 922 ---------------------------------------------
Get a long . --> Convert a value to a integer --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String name , final int [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int [[bayard]] ) { String value = get ( name ) ; if ( value == null ) { return [[bayard]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[bayard]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 923 ---------------------------------------------
Creates a text from the text . --> [[[FAILED]]]

[[[[Adv]]]]: public T textMessage ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T textMessage ( final String [[deed]] , final String encoding ) { return message ( new EmailMessage ( [[deed]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 924 ---------------------------------------------
Gets the method parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[cardinal]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 925 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[emblem]] ( final String [[designate]] , final String value ) { headers . put ( [[designate]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 926 ---------------------------------------------
Adds a message to the filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[fetchProfile]] = new FetchProfile ( ) ; [[fetchProfile]] . add ( FetchProfile . Item . ENVELOPE ) ; [[fetchProfile]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[fetchProfile]] ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile [[travellers]] = new FetchProfile ( ) ; [[travellers]] . add ( FetchProfile . Item . ENVELOPE ) ; [[travellers]] . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , [[travellers]] ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 927 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 504 / 44 / 927:  93%|█████████▎| 927/1000 [43:20<03:24,  2.80s/it][Succeeded / Failed / Skipped / Total] 379 / 504 / 44 / 927:  93%|█████████▎| 928/1000 [43:28<03:22,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 504 / 44 / 928:  93%|█████████▎| 928/1000 [43:28<03:22,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 504 / 44 / 928:  93%|█████████▎| 929/1000 [43:30<03:19,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 505 / 44 / 929:  93%|█████████▎| 929/1000 [43:30<03:19,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 505 / 44 / 929:  93%|█████████▎| 930/1000 [43:35<03:16,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 506 / 44 / 930:  93%|█████████▎| 930/1000 [43:35<03:16,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 506 / 44 / 930:  93%|█████████▎| 931/1000 [43:35<03:13,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 506 / 45 / 931:  93%|█████████▎| 931/1000 [43:35<03:13,  2.81s/it][Succeeded / Failed / Skipped / Total] 380 / 506 / 45 / 931:  93%|█████████▎| 932/1000 [43:37<03:10,  2.81s/it][Succeeded / Failed / Skipped / Total] 381 / 506 / 45 / 932:  93%|█████████▎| 932/1000 [43:37<03:10,  2.81s/it][Succeeded / Failed / Skipped / Total] 381 / 506 / 45 / 932:  93%|█████████▎| 933/1000 [43:40<03:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 382 / 506 / 45 / 933:  93%|█████████▎| 933/1000 [43:40<03:08,  2.81s/it][Succeeded / Failed / Skipped / Total] 382 / 506 / 45 / 933:  93%|█████████▎| 934/1000 [43:41<03:05,  2.81s/it][Succeeded / Failed / Skipped / Total] 382 / 507 / 45 / 934:  93%|█████████▎| 934/1000 [43:41<03:05,  2.81s/it][Succeeded / Failed / Skipped / Total] 382 / 507 / 45 / 934:  94%|█████████▎| 935/1000 [43:48<03:02,  2.81s/it]Get a boolean value . --> Get a string representation of a String --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[appointees]] , final boolean defaultValue ) { String [[amount]] = get ( [[appointees]] ) ; if ( [[amount]] == null ) { return defaultValue ; } [[amount]] = [[amount]] . trim ( ) . toLowerCase ( ) ; switch ( [[amount]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[Truth]]" == "[[Truth]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the slash of a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[indulge]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 929 ---------------------------------------------
Returns the value of the given property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[achieved]] ( final String name , final String [[protects]] ) { Objects . requireNonNull ( name ) ; String [[appreciates]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[appreciates]] = System . getProperty ( name ) ; } else { [[appreciates]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[appreciates]] == null ) { return [[protects]] ; } return [[appreciates]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 930 ---------------------------------------------
Gets a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[taste]] ( final String name , final long [[neutrons]] ) { String [[appreciate]] = get ( name ) ; if ( [[appreciate]] == null ) { return [[neutrons]] ; } [[appreciate]] = [[appreciate]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[appreciate]] ) ; } catch ( NumberFormatException nfex ) { return [[neutrons]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 931 ---------------------------------------------
Searches for a given name . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 932 ---------------------------------------------
Returns the number of occurrence . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[recites]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve a path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String [[value]] ) { boolean [[absolutePath]] = "False" != "False" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[richardson]] ( String path , String [[assessed]] ) { boolean [[hanker]] = "False" != "False" ; if ( [[assessed]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the value of the property . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[campaign]] ( final String [[falsify]] ) { String value = actionsManager . lookupPathAlias ( [[falsify]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[falsify]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 935 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 382 / 508 / 45 / 935:  94%|█████████▎| 935/1000 [43:48<03:02,  2.81s/it][Succeeded / Failed / Skipped / Total] 382 / 508 / 45 / 935:  94%|█████████▎| 936/1000 [43:52<02:59,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 508 / 45 / 936:  94%|█████████▎| 936/1000 [43:52<02:59,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 508 / 45 / 936:  94%|█████████▎| 937/1000 [43:55<02:57,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 509 / 45 / 937:  94%|█████████▎| 937/1000 [43:55<02:57,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 509 / 45 / 937:  94%|█████████▍| 938/1000 [43:56<02:54,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 510 / 45 / 938:  94%|█████████▍| 938/1000 [43:56<02:54,  2.81s/it][Succeeded / Failed / Skipped / Total] 383 / 510 / 45 / 938:  94%|█████████▍| 939/1000 [44:01<02:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 384 / 510 / 45 / 939:  94%|█████████▍| 939/1000 [44:01<02:51,  2.81s/it][Succeeded / Failed / Skipped / Total] 384 / 510 / 45 / 939:  94%|█████████▍| 940/1000 [44:05<02:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 385 / 510 / 45 / 940:  94%|█████████▍| 940/1000 [44:05<02:48,  2.81s/it][Succeeded / Failed / Skipped / Total] 385 / 510 / 45 / 940:  94%|█████████▍| 941/1000 [44:07<02:46,  2.81s/it][Succeeded / Failed / Skipped / Total] 385 / 511 / 45 / 941:  94%|█████████▍| 941/1000 [44:07<02:46,  2.81s/it][Succeeded / Failed / Skipped / Total] 385 / 511 / 45 / 941:  94%|█████████▍| 942/1000 [44:13<02:43,  2.82s/it][Succeeded / Failed / Skipped / Total] 385 / 512 / 45 / 942:  94%|█████████▍| 942/1000 [44:13<02:43,  2.82s/it][Succeeded / Failed / Skipped / Total] 385 / 512 / 45 / 942:  94%|█████████▍| 943/1000 [44:23<02:40,  2.82s/it][Succeeded / Failed / Skipped / Total] 385 / 513 / 45 / 943:  94%|█████████▍| 943/1000 [44:23<02:40,  2.82s/it][Succeeded / Failed / Skipped / Total] 385 / 513 / 45 / 943:  94%|█████████▍| 944/1000 [44:29<02:38,  2.83s/it][Succeeded / Failed / Skipped / Total] 385 / 514 / 45 / 944:  94%|█████████▍| 944/1000 [44:29<02:38,  2.83s/it][Succeeded / Failed / Skipped / Total] 385 / 514 / 45 / 944:  94%|█████████▍| 945/1000 [44:35<02:35,  2.83s/it]Resolves a value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[resultPath]] = resolveResultPath ( path , value ) ; final String result = [[resultPath]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[brackett]] = resolveResultPath ( path , value ) ; final String result = [[brackett]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 936 ---------------------------------------------
Swaps two elements . --> Swaps two dimension --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[engagements]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 937 ---------------------------------------------
Serializes an object to JSON . --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object [[value]] , int [[count]] ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[count]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[billows]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object [[assessing]] , int [[accountancy]] ) { if ( ( [[assessing]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[accountancy]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the slashed slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return str . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int [[ellison]] = str . lastIndexOf ( ' ' ) ; if ( [[ellison]] == - 1 ) { [[ellison]] = 0 ; } return str . indexOf ( ' ' , [[ellison]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Swaps two elements . --> Shuffles a given intensity --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[intensify]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Resolve a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder [[result]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[voicemail]] ( final String value ) { final StringBuilder [[ensuing]] = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 941 ---------------------------------------------
Gets the schema . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable [[dbTable]] = type . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { [[schemaName]] = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > type , final String defaultSchemaName ) { String [[tickle]] = null ; final DbTable [[delmonico]] = type . getAnnotation ( DbTable . class ) ; if ( [[delmonico]] != null ) { [[tickle]] = [[delmonico]] . schema ( ) . trim ( ) ; } if ( ( [[tickle]] == null ) || ( [[tickle]] . length ( ) == 0 ) ) { [[tickle]] = defaultSchemaName ; } return [[tickle]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 942 ---------------------------------------------
Obtain a new key . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[cardinal]] , final long [ ] [[refining]] ) { final int newNw = [[cardinal]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 943 ---------------------------------------------
Gets the href . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[itineraries]] ( ) { if ( methref != null ) { final String [[appointing]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[appointing]] ; } return [[itineraries]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 944 ---------------------------------------------
Remove a string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char [[s]] , final char [[e]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[s]] ) ) && str . endsWith ( String . valueOf ( [[e]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char [[percent]] , final char [[fae]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[percent]] ) ) && str . endsWith ( String . valueOf ( [[fae]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 945 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 514 / 45 / 945:  94%|█████████▍| 945/1000 [44:35<02:35,  2.83s/it][Succeeded / Failed / Skipped / Total] 386 / 515 / 45 / 946:  95%|█████████▍| 946/1000 [44:35<02:32,  2.83s/it][Succeeded / Failed / Skipped / Total] 386 / 515 / 45 / 946:  95%|█████████▍| 947/1000 [44:41<02:30,  2.83s/it][Succeeded / Failed / Skipped / Total] 387 / 515 / 45 / 947:  95%|█████████▍| 947/1000 [44:41<02:30,  2.83s/it][Succeeded / Failed / Skipped / Total] 388 / 515 / 45 / 948:  95%|█████████▍| 948/1000 [44:47<02:27,  2.84s/it][Succeeded / Failed / Skipped / Total] 388 / 515 / 45 / 948:  95%|█████████▍| 949/1000 [44:53<02:24,  2.84s/it][Succeeded / Failed / Skipped / Total] 388 / 516 / 45 / 949:  95%|█████████▍| 949/1000 [44:53<02:24,  2.84s/it][Succeeded / Failed / Skipped / Total] 388 / 517 / 45 / 950:  95%|█████████▌| 950/1000 [44:53<02:21,  2.84s/it][Succeeded / Failed / Skipped / Total] 388 / 517 / 45 / 950:  95%|█████████▌| 951/1000 [44:55<02:18,  2.83s/it][Succeeded / Failed / Skipped / Total] 388 / 518 / 45 / 951:  95%|█████████▌| 951/1000 [44:55<02:18,  2.83s/it]Create a file from a file . --> Create a file from a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream [[fos]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[fos]] ) ; } finally { StreamUtil . close ( [[fos]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream [[bss]] = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , [[bss]] ) ; } finally { StreamUtil . close ( [[bss]] ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 946 ---------------------------------------------
Encrypts a block . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( content , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[cleared]] ) { long [ ] contentBlock = bytesToLongs ( content , [[cleared]] , blockSizeInBytes ) ; long [ ] [[toothache]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[toothache]] ) ; return longsToBytes ( [[toothache]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 947 ---------------------------------------------
Schedules the zone . --> Simultaneo hacksons --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int [[i]] = 0 ; [[i]] < nw ; [[i]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[expression]] ( final int [[among]] ) { for ( int [[johnson]] = 0 ; [[johnson]] < nw ; [[johnson]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 948 ---------------------------------------------
Convert a byte array to a long . --> Calculates how many bytes are permitted --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int [[i8]] = offset ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , [[i8]] ) ; [[i8]] += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[postmark]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] [[repercussions]] = new long [ size >> 3 ] ; int [[albi]] = offset ; for ( int i = 0 ; i < [[repercussions]] . length ; i ++ ) { [[repercussions]] [ i ] = Bits . getLong ( ba , [[albi]] ) ; [[albi]] += 8 ; } return [[repercussions]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 949 ---------------------------------------------
Initializes the message . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , [[key]] , 0 , [[key]] . length < [[keyData]] . length ? [[key]] . length : [[keyData]] . length ) ; init ( bytesToLongs ( [[key]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[paramount]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[devoured]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[devoured]] , 0 , [[paramount]] , 0 , [[paramount]] . length < [[devoured]] . length ? [[paramount]] . length : [[devoured]] . length ) ; init ( bytesToLongs ( [[paramount]] ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 950 ---------------------------------------------
Checks if the given column is a valid column . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[False]]" != "[[False]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "[[Falsify]]" != "[[Falsify]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 951 ---------------------------------------------
Create a new zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , [[deflater]] ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[canny]] = new FileInputStream ( file ) ; Deflater [[disheartening]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[them]] = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[them]] ) , [[disheartening]] ) ; try { StreamUtil . copy ( [[canny]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[canny]] ) ; } return new File ( [[them]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 389 / 518 / 45 / 952:  95%|█████████▌| 952/1000 [44:58<02:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 389 / 518 / 45 / 952:  95%|█████████▌| 953/1000 [44:58<02:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 390 / 518 / 45 / 953:  95%|█████████▌| 953/1000 [44:58<02:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 390 / 519 / 45 / 954:  95%|█████████▌| 954/1000 [44:59<02:10,  2.83s/it][Succeeded / Failed / Skipped / Total] 390 / 519 / 45 / 954:  96%|█████████▌| 955/1000 [45:12<02:07,  2.84s/it][Succeeded / Failed / Skipped / Total] 390 / 520 / 45 / 955:  96%|█████████▌| 955/1000 [45:12<02:07,  2.84s/it][Succeeded / Failed / Skipped / Total] 390 / 520 / 45 / 955:  96%|█████████▌| 956/1000 [45:21<02:05,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 521 / 45 / 956:  96%|█████████▌| 956/1000 [45:21<02:05,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 521 / 45 / 956:  96%|█████████▌| 957/1000 [45:25<02:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 522 / 45 / 957:  96%|█████████▌| 957/1000 [45:25<02:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 522 / 45 / 957:  96%|█████████▌| 958/1000 [45:28<01:59,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 523 / 45 / 958:  96%|█████████▌| 958/1000 [45:28<01:59,  2.85s/it][Succeeded / Failed / Skipped / Total] 390 / 523 / 45 / 958:  96%|█████████▌| 959/1000 [45:29<01:56,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 523 / 45 / 959:  96%|█████████▌| 959/1000 [45:29<01:56,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 523 / 45 / 959:  96%|█████████▌| 960/1000 [45:30<01:53,  2.84s/it]Unzip a file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String [[destDir]] , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[trays]] ( final String zipFile , final String [[contestants]] , final String ... patterns ) throws IOException { [[trays]] ( new File ( zipFile ) , new File ( [[contestants]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Returns a list of all entries in the specified directory . --> Convert a list of entries to a file --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[entry]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[entry]] . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[leprosy]] ( final File zipFile ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[joining]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[joining]] . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 954 ---------------------------------------------
Open a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[depositing]] ) throws IOException { if ( [[depositing]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[asano]] = new FileInputStream ( [[depositing]] ) ; String gzipName = [[depositing]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[asano]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[asano]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the request bundle . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[mins]] ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 956 ---------------------------------------------
Gets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession [[seated]] ) { Locale [[municipal]] = ( Locale ) [[seated]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[municipal]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[municipal]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 957 ---------------------------------------------
Get the value of the given property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[abbreviation]] , final boolean declared ) { PropertyDescriptor [[crouching]] = getProperties ( ) . getPropertyDescriptor ( [[abbreviation]] ) ; if ( ( [[crouching]] != null ) && [[crouching]] . matchDeclared ( declared ) ) { return [[crouching]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the name of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String name , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[misters]] ( final String name , final boolean declared ) { final FieldDescriptor [[fantastical]] = getFields ( ) . getFieldDescriptor ( name ) ; if ( [[fantastical]] != null ) { if ( ! [[fantastical]] . matchDeclared ( declared ) ) { return null ; } } return [[fantastical]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 959 ---------------------------------------------
Set the Locale . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[assignments]] ( final HttpSession session , final String [[partly]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[partly]] ) ; } Locale locale = Locale . forLanguageTag ( [[partly]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 391 / 524 / 45 / 960:  96%|█████████▌| 960/1000 [45:30<01:53,  2.84s/it][Succeeded / Failed / Skipped / Total] 391 / 524 / 45 / 960:  96%|█████████▌| 961/1000 [45:36<01:51,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 525 / 45 / 961:  96%|█████████▌| 961/1000 [45:36<01:51,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 525 / 45 / 961:  96%|█████████▌| 962/1000 [45:40<01:48,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 526 / 45 / 962:  96%|█████████▌| 962/1000 [45:40<01:48,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 526 / 45 / 962:  96%|█████████▋| 963/1000 [45:45<01:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 527 / 45 / 963:  96%|█████████▋| 963/1000 [45:45<01:45,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 527 / 45 / 963:  96%|█████████▋| 964/1000 [45:47<01:42,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 528 / 45 / 964:  96%|█████████▋| 964/1000 [45:47<01:42,  2.85s/it][Succeeded / Failed / Skipped / Total] 391 / 528 / 45 / 964:  96%|█████████▋| 965/1000 [45:49<01:39,  2.85s/it][Succeeded / Failed / Skipped / Total] 392 / 528 / 45 / 965:  96%|█████████▋| 965/1000 [45:49<01:39,  2.85s/it][Succeeded / Failed / Skipped / Total] 392 / 528 / 45 / 965:  97%|█████████▋| 966/1000 [45:50<01:36,  2.85s/it]Adds a profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[synopsis]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[synopsis]] : profiles ) { addProfiles ( [[synopsis]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 961 ---------------------------------------------
Read a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[fascism]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[barbell]] = new ZipEntry ( path ) ; [[barbell]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[barbell]] . setComment ( comment ) ; } zos . putNextEntry ( [[barbell]] ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 962 ---------------------------------------------
Copies the given file to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String [[path]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = file . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[battered]] ( final ZipOutputStream zos , final File file , String [[highways]] , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( [[highways]] == null ) { [[highways]] = file . getName ( ) ; } while ( [[highways]] . length ( ) != 0 && [[highways]] . charAt ( 0 ) == ' ' ) { [[highways]] = [[highways]] . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 963 ---------------------------------------------
Resolve all beans . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[list]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[recites]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[admittance]] : params . entrySet ( ) ) { String key = [[admittance]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } [[recites]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 964 ---------------------------------------------
Returns a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] [[kake]] , final int offset ) { return ( ( long ) [[kake]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a frame . --> get frame frame --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] [[charBuffer]] , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , [[charBuffer]] ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[blares]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] [[cinder]] , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , [[cinder]] ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
[Succeeded / Failed / Skipped / Total] 392 / 529 / 45 / 966:  97%|█████████▋| 966/1000 [45:50<01:36,  2.85s/it][Succeeded / Failed / Skipped / Total] 392 / 529 / 45 / 966:  97%|█████████▋| 967/1000 [45:52<01:33,  2.85s/it][Succeeded / Failed / Skipped / Total] 392 / 530 / 45 / 967:  97%|█████████▋| 967/1000 [45:52<01:33,  2.85s/it][Succeeded / Failed / Skipped / Total] 392 / 530 / 45 / 967:  97%|█████████▋| 968/1000 [45:58<01:31,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 530 / 45 / 968:  97%|█████████▋| 968/1000 [45:58<01:31,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 530 / 45 / 968:  97%|█████████▋| 969/1000 [46:05<01:28,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 531 / 45 / 969:  97%|█████████▋| 969/1000 [46:05<01:28,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 531 / 45 / 969:  97%|█████████▋| 970/1000 [46:06<01:25,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 532 / 45 / 970:  97%|█████████▋| 970/1000 [46:06<01:25,  2.85s/it][Succeeded / Failed / Skipped / Total] 393 / 532 / 45 / 970:  97%|█████████▋| 971/1000 [46:09<01:22,  2.85s/it][Succeeded / Failed / Skipped / Total] 394 / 532 / 45 / 971:  97%|█████████▋| 971/1000 [46:09<01:22,  2.85s/it][Succeeded / Failed / Skipped / Total] 394 / 532 / 45 / 971:  97%|█████████▋| 972/1000 [46:12<01:19,  2.85s/it][Succeeded / Failed / Skipped / Total] 394 / 533 / 45 / 972:  97%|█████████▋| 972/1000 [46:12<01:19,  2.85s/it][Succeeded / Failed / Skipped / Total] 394 / 533 / 45 / 972:  97%|█████████▋| 973/1000 [46:14<01:16,  2.85s/it][Succeeded / Failed / Skipped / Total] 395 / 533 / 45 / 973:  97%|█████████▋| 973/1000 [46:14<01:16,  2.85s/it][Succeeded / Failed / Skipped / Total] 395 / 533 / 45 / 973:  97%|█████████▋| 974/1000 [46:15<01:14,  2.85s/it]--------------------------------------------- Result 966 ---------------------------------------------
Read annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[denny]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[placards]] ) { if ( [[placards]] [ bytecodeOffset ] == null ) { [[placards]] [ bytecodeOffset ] = new Label ( ) ; } return [[placards]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 968 ---------------------------------------------
Creates a new Map . --> Create a MBean --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[cartographer]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[cartographer]] ) ; return [[cartographer]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 969 ---------------------------------------------
Read a byte array from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean [[close]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { inputStream . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean [[narrowly]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[narrowly]] ) { inputStream . [[narrowly]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 970 ---------------------------------------------
Returns the map of a map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[nandini]] ( final HttpServletRequest [[walmart]] ) { return ( Map < String , TransientBeanData > ) [[walmart]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
Reads a string . --> Read UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[bubo]] = getFirstAttributeOffset ( ) ; int [ ] [[amarillo]] = null ; for ( int i = readUnsignedShort ( [[bubo]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 972 ---------------------------------------------
Initialize the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void init ( final FilterConfig [[haze]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 973 ---------------------------------------------
Adds a Consumer . --> Adds a list of consumers . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[blithely]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[blithely]] ) ; } else { consumers . add ( [[blithely]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 974 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 533 / 45 / 974:  97%|█████████▋| 974/1000 [46:15<01:14,  2.85s/it][Succeeded / Failed / Skipped / Total] 396 / 533 / 45 / 974:  98%|█████████▊| 975/1000 [46:16<01:11,  2.85s/it][Succeeded / Failed / Skipped / Total] 397 / 533 / 45 / 975:  98%|█████████▊| 975/1000 [46:16<01:11,  2.85s/it][Succeeded / Failed / Skipped / Total] 397 / 533 / 45 / 975:  98%|█████████▊| 976/1000 [46:20<01:08,  2.85s/it][Succeeded / Failed / Skipped / Total] 398 / 533 / 45 / 976:  98%|█████████▊| 976/1000 [46:20<01:08,  2.85s/it][Succeeded / Failed / Skipped / Total] 398 / 533 / 45 / 976:  98%|█████████▊| 977/1000 [46:20<01:05,  2.85s/it][Succeeded / Failed / Skipped / Total] 399 / 533 / 45 / 977:  98%|█████████▊| 977/1000 [46:20<01:05,  2.85s/it][Succeeded / Failed / Skipped / Total] 399 / 533 / 45 / 977:  98%|█████████▊| 978/1000 [46:22<01:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 400 / 533 / 45 / 978:  98%|█████████▊| 978/1000 [46:22<01:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 400 / 533 / 45 / 978:  98%|█████████▊| 979/1000 [46:26<00:59,  2.85s/it][Succeeded / Failed / Skipped / Total] 401 / 533 / 45 / 979:  98%|█████████▊| 979/1000 [46:26<00:59,  2.85s/it][Succeeded / Failed / Skipped / Total] 401 / 533 / 45 / 979:  98%|█████████▊| 980/1000 [46:27<00:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 401 / 534 / 45 / 980:  98%|█████████▊| 980/1000 [46:27<00:56,  2.84s/it][Succeeded / Failed / Skipped / Total] 401 / 534 / 45 / 980:  98%|█████████▊| 981/1000 [46:30<00:54,  2.85s/it][Succeeded / Failed / Skipped / Total] 401 / 535 / 45 / 981:  98%|█████████▊| 981/1000 [46:30<00:54,  2.85s/it][Succeeded / Failed / Skipped / Total] 401 / 536 / 45 / 982:  98%|█████████▊| 982/1000 [46:31<00:51,  2.84s/it][Succeeded / Failed / Skipped / Total] 401 / 536 / 45 / 982:  98%|█████████▊| 983/1000 [46:35<00:48,  2.84s/it]Convert a primitive value to an array . --> Convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[contestants]] ( final Object [[assess]] ) { final Class [[meaner]] = [[assess]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[meaner]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[assess]] , [[meaner]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 975 ---------------------------------------------
Search for a file . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[hippocratic]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[hippocratic]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[hippocratic]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 976 ---------------------------------------------
Search for a file . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[bindle]] ( final URI [[dein]] ) { File file ; try { file = new File ( [[bindle]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[bindle]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Return a list of files . --> Convert the given string to a string --> Socre: 1.0

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... patterns ) { for ( String [[blueprint]] : patterns ) { rules . include ( [[blueprint]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 978 ---------------------------------------------
Replies the given file . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[denied]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 979 ---------------------------------------------
Returns the number of arguments . --> Static factory method for creating constructors --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != args . length ) { continue ; } for ( int [[j]] = 0 ; [[j]] < [[arg]] . length ; [[j]] ++ ) { if ( [[arg]] [ [[j]] ] != args [ [[j]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[guille]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[assassinations]] = ctorDescriptor . getParameters ( ) ; if ( [[assassinations]] . length != args . length ) { continue ; } for ( int [[zeng]] = 0 ; [[zeng]] < [[assassinations]] . length ; [[zeng]] ++ ) { if ( [[assassinations]] [ [[zeng]] ] != args [ [[zeng]] ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 980 ---------------------------------------------
Return next iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[parachutist]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 981 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean [[named]] , final char [ ] charBuffer ) { int currentOffset = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[gentelmen]] ( final AnnotationVisitor annotationVisitor , final int [[renunciation]] , final boolean [[appointing]] , final char [ ] charBuffer ) { int currentOffset = [[renunciation]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 982 ---------------------------------------------
Adds a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File [[avenues]] ) { if ( ! [[avenues]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[avenues]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 536 / 45 / 983:  98%|█████████▊| 983/1000 [46:35<00:48,  2.84s/it][Succeeded / Failed / Skipped / Total] 402 / 537 / 45 / 984:  98%|█████████▊| 984/1000 [46:36<00:45,  2.84s/it][Succeeded / Failed / Skipped / Total] 402 / 537 / 45 / 984:  98%|█████████▊| 985/1000 [46:37<00:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 402 / 538 / 45 / 985:  98%|█████████▊| 985/1000 [46:37<00:42,  2.84s/it][Succeeded / Failed / Skipped / Total] 403 / 538 / 45 / 986:  99%|█████████▊| 986/1000 [46:39<00:39,  2.84s/it][Succeeded / Failed / Skipped / Total] 403 / 538 / 45 / 986:  99%|█████████▊| 987/1000 [46:39<00:36,  2.84s/it][Succeeded / Failed / Skipped / Total] 403 / 539 / 45 / 987:  99%|█████████▊| 987/1000 [46:39<00:36,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 539 / 45 / 988:  99%|█████████▉| 988/1000 [46:40<00:34,  2.83s/it][Succeeded / Failed / Skipped / Total] 404 / 539 / 45 / 988:  99%|█████████▉| 989/1000 [46:48<00:31,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 540 / 45 / 989:  99%|█████████▉| 989/1000 [46:48<00:31,  2.84s/it]Close the output stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[saori]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 984 ---------------------------------------------
Instantiates a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int i = 0 ; i < [[ctors]] . length ; i ++ ) { Constructor ctor = [[ctors]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[writing]] = classDescriptor . getType ( ) ; Constructor [ ] [[deepti]] = [[writing]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[deepti]] . length ] ; for ( int i = 0 ; i < [[deepti]] . length ; i ++ ) { Constructor ctor = [[deepti]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[ades]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
Resolve bean . --> Method to get traftic --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[reconnecting]] ( final Class [[form]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[form]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 987 ---------------------------------------------
Find all the files in the given file . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > [[zamfir]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[zamfir]] . add ( file ) ; } return [[zamfir]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 988 ---------------------------------------------
Initializes the path . --> Initialize the folder --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ [[index]] ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int [[clue]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[folder]] = iterator . next ( ) ; if ( [[folder]] . isFile ( ) ) { files [ [[clue]] ++ ] = [[folder]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[clue]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 989 ---------------------------------------------
Returns the size of the given size . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[businessmen]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 541 / 45 / 990:  99%|█████████▉| 990/1000 [46:54<00:28,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 541 / 45 / 990:  99%|█████████▉| 991/1000 [46:55<00:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 542 / 45 / 991:  99%|█████████▉| 991/1000 [46:55<00:25,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 543 / 45 / 992:  99%|█████████▉| 992/1000 [47:01<00:22,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 543 / 45 / 992:  99%|█████████▉| 993/1000 [47:03<00:19,  2.84s/it][Succeeded / Failed / Skipped / Total] 404 / 544 / 45 / 993:  99%|█████████▉| 993/1000 [47:03<00:19,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 544 / 45 / 994:  99%|█████████▉| 994/1000 [47:08<00:17,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 544 / 45 / 994: 100%|█████████▉| 995/1000 [47:09<00:14,  2.84s/it][Succeeded / Failed / Skipped / Total] 405 / 545 / 45 / 995: 100%|█████████▉| 995/1000 [47:09<00:14,  2.84s/it]Appends a String to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[flores]] ) { if ( sort == OBJECT ) { [[flores]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[flores]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[flores]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 991 ---------------------------------------------
Returns a String representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[denny]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[dimitri]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[dimitri]] . append ( "[]" ) ; } return [[dimitri]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 992 ---------------------------------------------
Get the name of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveBeanName ( final Class type , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class type , final boolean [[shino]] ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[aka]] = null ; if ( petiteBean != null ) { [[aka]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[aka]] == null ) || ( [[aka]] . length ( ) == 0 ) ) { if ( [[shino]] ) { [[aka]] = type . getName ( ) ; } else { [[aka]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[aka]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 993 ---------------------------------------------
Set the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[oreo]] ( final Throwable [[felix]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[felix]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 994 ---------------------------------------------
Returns a string representation of the given method name . --> Create a new journal --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[courgettes]] ( final Method [[guises]] ) { StringBuilder [[rajeev]] = new StringBuilder ( ) ; [[rajeev]] . append ( ' ' ) ; Class < ? > [ ] [[calibrate]] = [[guises]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[calibrate]] ) { appendDescriptor ( parameter , [[rajeev]] ) ; } [[rajeev]] . append ( ' ' ) ; appendDescriptor ( [[guises]] . getReturnType ( ) , [[rajeev]] ) ; return [[rajeev]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 995 ---------------------------------------------
Get the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[apnea]] ( final String methodDescriptor ) { int [[gnomes]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 996 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 546 / 45 / 996: 100%|█████████▉| 996/1000 [47:15<00:11,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 546 / 45 / 996: 100%|█████████▉| 997/1000 [47:17<00:08,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 547 / 45 / 997: 100%|█████████▉| 997/1000 [47:17<00:08,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 548 / 45 / 998: 100%|█████████▉| 998/1000 [47:24<00:05,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 548 / 45 / 998: 100%|█████████▉| 999/1000 [47:31<00:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 549 / 45 / 999: 100%|█████████▉| 999/1000 [47:31<00:02,  2.85s/it][Succeeded / Failed / Skipped / Total] 405 / 549 / 45 / 999: 100%|██████████| 1000/1000 [47:33<00:00,  2.85s/it]Returns a String representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : [[argumentTypes]] ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[badness]] ( final Type returnType , final Type ... [[broyles]] ) { StringBuilder [[modification]] = new StringBuilder ( ) ; [[modification]] . append ( ' ' ) ; for ( Type argumentType : [[broyles]] ) { argumentType . appendDescriptor ( [[modification]] ) ; } [[modification]] . append ( ' ' ) ; returnType . appendDescriptor ( [[modification]] ) ; return [[modification]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 997 ---------------------------------------------
Returns a string representation of the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > constructor ) { StringBuilder [[tickle]] = new StringBuilder ( ) ; [[tickle]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[tickle]] ) ; } return [[tickle]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 998 ---------------------------------------------
Remove a transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[resource]] = it . next ( ) ; try { [[resource]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[appropriation]] = it . next ( ) ; try { [[appropriation]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
Unlocks a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[broker]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[broker]] != - 1 ) && ( resources . size ( ) >= [[broker]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 405 / 550 / 45 / 1000: 100%|██████████| 1000/1000 [47:33<00:00,  2.85s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 405 / 550 / 45 / 1000: 100%|██████████| 1000/1000 [47:36<00:00,  2.86s/it]Commits the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean [[bunches]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[bunches]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[bunches]] ) { [[bunches]] = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[bunches]] ? "commit" : "rollback" ) ) ; } } if ( [[bunches]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 405    |
| Number of failed attacks:     | 550    |
| Number of skipped attacks:    | 45     |
| Original accuracy:            | 95.5%  |
| Accuracy under attack:        | 55.0%  |
| Attack success rate:          | 42.41% |
| Average perturbed word %:     | 50.79% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 155.64 |
| Original BLEU-4:              | 13.9   |
| Perturbed BLEU-4:             | 3.52   |
+-------------------------------+--------+


Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 4 worker(s) on 4 GPU(s).
PositionalEncoding: doing nothing on call to _load_from_state_dict
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:09<2:40:59,  9.67s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:09<2:41:01,  9.67s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [00:09<1:22:55,  4.99s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:09<1:22:55,  4.99s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [00:25<2:20:39,  8.46s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [00:25<2:20:39,  8.47s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [00:26<1:49:53,  6.62s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:26<1:49:53,  6.62s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 5/1000 [00:27<1:30:57,  5.49s/it][Succeeded / Failed / Skipped / Total] 2 / 3 / 0 / 5:   0%|          | 5/1000 [00:27<1:30:57,  5.49s/it][Succeeded / Failed / Skipped / Total] 2 / 3 / 0 / 5:   1%|          | 6/1000 [00:36<1:41:44,  6.14s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 6/1000 [00:36<1:41:45,  6.14s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 7/1000 [00:44<1:44:42,  6.33s/it]--------------------------------------------- Result 1 ---------------------------------------------
Adds a observer to the queue . --> Queues a balancing --> Socre: 1.0

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean [[delayError]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[delayError]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[bearer]] , boolean [[spurcarrer]] , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , [[bearer]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[bearer]] ) ; } } else { q . offer ( [[bearer]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , [[spurcarrer]] , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Sorts a Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[balanced]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Wraps the given observable . --> Convenience method for creating a commit --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > [[observable]] = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[commitu]] ) { final Observable < T > [[allrvia]] = co . observeOn ( [[commitu]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[allrvia]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Converts a Java source into a java object . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[hold]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 5 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[created]] ( int [[powerrupth]] ) { return new UnicastProcessor < T > ( [[powerrupth]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Sets the internal state . --> Asynchronously get the internal thread --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[sato]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 7/1000 [00:44<1:44:42,  6.33s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 8/1000 [00:49<1:41:43,  6.15s/it][Succeeded / Failed / Skipped / Total] 3 / 5 / 0 / 8:   1%|          | 8/1000 [00:49<1:41:43,  6.15s/it][Succeeded / Failed / Skipped / Total] 3 / 5 / 0 / 8:   1%|          | 9/1000 [00:56<1:44:25,  6.32s/it][Succeeded / Failed / Skipped / Total] 3 / 6 / 0 / 9:   1%|          | 9/1000 [00:56<1:44:25,  6.32s/it][Succeeded / Failed / Skipped / Total] 3 / 6 / 0 / 9:   1%|          | 10/1000 [00:57<1:35:14,  5.77s/it][Succeeded / Failed / Skipped / Total] 4 / 6 / 0 / 10:   1%|          | 10/1000 [00:57<1:35:14,  5.77s/it][Succeeded / Failed / Skipped / Total] 4 / 6 / 0 / 10:   1%|          | 11/1000 [01:02<1:34:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 4 / 7 / 0 / 11:   1%|          | 11/1000 [01:02<1:34:04,  5.71s/it][Succeeded / Failed / Skipped / Total] 4 / 7 / 0 / 11:   1%|          | 12/1000 [01:11<1:37:39,  5.93s/it][Succeeded / Failed / Skipped / Total] 4 / 8 / 0 / 12:   1%|          | 12/1000 [01:11<1:37:39,  5.93s/it][Succeeded / Failed / Skipped / Total] 4 / 8 / 0 / 12:   1%|▏         | 13/1000 [01:18<1:39:24,  6.04s/it][Succeeded / Failed / Skipped / Total] 4 / 9 / 0 / 13:   1%|▏         | 13/1000 [01:18<1:39:24,  6.04s/it][Succeeded / Failed / Skipped / Total] 4 / 9 / 0 / 13:   1%|▏         | 14/1000 [01:29<1:44:53,  6.38s/it]Creates and returns a listener which allows to connect to a specific value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[element]] ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Convenience method for creating a flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[entry]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[entry]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 9 ---------------------------------------------
Create a Completable from the given source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource [[colpookeyοughe]] ) { ObjectHelper . requireNonNull ( [[colpookeyοughe]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[colpookeyοughe]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Converts a predicate to a predicate . --> Convert a Throwable to an Exception --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[tpose]] ) { return toFlowable ( ) . retry ( times , [[tpose]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
Converts a Throwable to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[t]] > [[t]] requireNonNull ( [[t]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns an unmodifiable function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[text]] > Function < [[text]] , [[text]] > [[de]] ( ) { return ( Function < [[text]] , [[text]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Creates a new Callable that implements the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[overanalapplike]] ( T [[message]] ) { return new JustValue < Object , T > ( [[message]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 10 / 0 / 14:   1%|▏         | 14/1000 [01:29<1:44:53,  6.38s/it][Succeeded / Failed / Skipped / Total] 4 / 10 / 0 / 14:   2%|▏         | 15/1000 [01:29<1:38:17,  5.99s/it][Succeeded / Failed / Skipped / Total] 4 / 11 / 0 / 15:   2%|▏         | 15/1000 [01:29<1:38:17,  5.99s/it][Succeeded / Failed / Skipped / Total] 4 / 11 / 0 / 15:   2%|▏         | 16/1000 [01:34<1:36:58,  5.91s/it][Succeeded / Failed / Skipped / Total] 4 / 12 / 0 / 16:   2%|▏         | 16/1000 [01:34<1:36:58,  5.91s/it][Succeeded / Failed / Skipped / Total] 4 / 12 / 0 / 16:   2%|▏         | 17/1000 [01:43<1:40:13,  6.12s/it][Succeeded / Failed / Skipped / Total] 4 / 13 / 0 / 17:   2%|▏         | 17/1000 [01:44<1:40:13,  6.12s/it][Succeeded / Failed / Skipped / Total] 4 / 13 / 0 / 17:   2%|▏         | 18/1000 [01:44<1:35:18,  5.82s/it][Succeeded / Failed / Skipped / Total] 4 / 14 / 0 / 18:   2%|▏         | 18/1000 [01:44<1:35:18,  5.82s/it][Succeeded / Failed / Skipped / Total] 4 / 14 / 0 / 18:   2%|▏         | 19/1000 [01:54<1:38:27,  6.02s/it][Succeeded / Failed / Skipped / Total] 5 / 14 / 0 / 19:   2%|▏         | 19/1000 [01:54<1:38:27,  6.02s/it][Succeeded / Failed / Skipped / Total] 5 / 14 / 0 / 19:   2%|▏         | 20/1000 [02:01<1:39:22,  6.08s/it][Succeeded / Failed / Skipped / Total] 6 / 14 / 0 / 20:   2%|▏         | 20/1000 [02:01<1:39:22,  6.08s/it][Succeeded / Failed / Skipped / Total] 6 / 14 / 0 / 20:   2%|▏         | 21/1000 [02:01<1:34:46,  5.81s/it]Wraps a callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > [[source]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[jicyntpointrampressumfold]] ( Publisher < T > [[book]] , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[book]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[book]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[falsely]]" == "[[falsely]]" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "[[falsely]]" == "[[falsely]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[falsely]]" == "[[falsely]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[falsely]]" == "[[falsely]]" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "[[falsely]]" == "[[falsely]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[falsely]]" == "[[falsely]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 15 ---------------------------------------------
Wraps the given source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > [[aceseard]] ) { ObjectHelper . requireNonNull ( [[aceseard]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[aceseard]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 16 ---------------------------------------------
Returns a Function that implements the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > [[justFunction]] ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > [[bydunst]] ( U [[component]] ) { return new JustValue < T , U > ( [[component]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new Subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[t]]" == "[[t]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Creates a new instance of the given function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[ti]] , U > Function < [[ti]] , U > castFunction ( Class < U > [[domain]] ) { return new CastToClass < [[ti]] , U > ( [[domain]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Returns the number of times . --> Returns a random exception --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[blockseldtorrand]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Creates a builder for a given Subject . --> Returns a &lt ; &gt ; &gt ; &gt ; &gt ; &gt &lt ; &lt &gt ; &gt &gt ; &lt ; &gt &gt &gt ; &gt &lt ; &gt ; &lt &gt &gt ; &gt &gt &lt ;  --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[artist]] ( int [[commandparnt]] ) { return new UnicastSubject < T > ( [[commandparnt]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 21 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 14 / 0 / 21:   2%|▏         | 21/1000 [02:01<1:34:46,  5.81s/it][Succeeded / Failed / Skipped / Total] 7 / 14 / 0 / 21:   2%|▏         | 22/1000 [02:13<1:39:04,  6.08s/it][Succeeded / Failed / Skipped / Total] 8 / 14 / 0 / 22:   2%|▏         | 22/1000 [02:13<1:39:04,  6.08s/it][Succeeded / Failed / Skipped / Total] 8 / 14 / 0 / 22:   2%|▏         | 23/1000 [02:22<1:41:10,  6.21s/it][Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 23/1000 [02:22<1:41:10,  6.21s/it][Succeeded / Failed / Skipped / Total] 9 / 14 / 0 / 23:   2%|▏         | 24/1000 [02:23<1:37:14,  5.98s/it][Succeeded / Failed / Skipped / Total] 9 / 15 / 0 / 24:   2%|▏         | 24/1000 [02:23<1:37:14,  5.98s/it][Succeeded / Failed / Skipped / Total] 9 / 15 / 0 / 24:   2%|▎         | 25/1000 [02:26<1:34:59,  5.85s/it][Succeeded / Failed / Skipped / Total] 9 / 16 / 0 / 25:   2%|▎         | 25/1000 [02:26<1:34:59,  5.85s/it][Succeeded / Failed / Skipped / Total] 9 / 16 / 0 / 25:   3%|▎         | 26/1000 [02:36<1:37:52,  6.03s/it][Succeeded / Failed / Skipped / Total] 9 / 17 / 0 / 26:   3%|▎         | 26/1000 [02:36<1:37:53,  6.03s/it][Succeeded / Failed / Skipped / Total] 9 / 17 / 0 / 26:   3%|▎         | 27/1000 [02:47<1:40:51,  6.22s/it][Succeeded / Failed / Skipped / Total] 10 / 17 / 0 / 27:   3%|▎         | 27/1000 [02:47<1:40:51,  6.22s/it][Succeeded / Failed / Skipped / Total] 10 / 17 / 0 / 27:   3%|▎         | 28/1000 [02:48<1:37:32,  6.02s/it]Create a batch . --> Create a new ByteBuffer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean [[queuesroom]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[queuesroom]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Decreases the queue . --> Convenience function to execute asynchronously --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[powertojoopers]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 23 ---------------------------------------------
Advances a prefetch . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[download]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 24 ---------------------------------------------
Wraps a given blocks and returns it . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[blockstheariver]] ( long timeout , TimeUnit [[minute]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[minute]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[minute]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Creates and returns a new builder with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable [[ultratiermit]] ) { return new UnicastSubject < T > ( capacityHint , [[ultratiermit]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[fbackui]] ( ) { Object [[p]] = value ; if ( [[p]] != null && ! NotificationLite . isError ( [[p]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Waits for a process . --> Wrap a RuntimeException --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[netapid]] ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[base]] ) ; } } Throwable [[base]] = error ; if ( [[base]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[base]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 28 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 18 / 0 / 28:   3%|▎         | 28/1000 [02:48<1:37:32,  6.02s/it][Succeeded / Failed / Skipped / Total] 10 / 18 / 0 / 28:   3%|▎         | 29/1000 [02:51<1:35:41,  5.91s/it][Succeeded / Failed / Skipped / Total] 10 / 19 / 0 / 29:   3%|▎         | 29/1000 [02:51<1:35:41,  5.91s/it][Succeeded / Failed / Skipped / Total] 10 / 19 / 0 / 29:   3%|▎         | 30/1000 [02:52<1:33:07,  5.76s/it][Succeeded / Failed / Skipped / Total] 11 / 19 / 0 / 30:   3%|▎         | 30/1000 [02:52<1:33:07,  5.76s/it][Succeeded / Failed / Skipped / Total] 11 / 19 / 0 / 30:   3%|▎         | 31/1000 [03:20<1:44:14,  6.45s/it][Succeeded / Failed / Skipped / Total] 12 / 19 / 0 / 31:   3%|▎         | 31/1000 [03:20<1:44:14,  6.45s/it][Succeeded / Failed / Skipped / Total] 12 / 19 / 0 / 31:   3%|▎         | 32/1000 [03:33<1:47:23,  6.66s/it][Succeeded / Failed / Skipped / Total] 12 / 20 / 0 / 32:   3%|▎         | 32/1000 [03:33<1:47:23,  6.66s/it][Succeeded / Failed / Skipped / Total] 12 / 20 / 0 / 32:   3%|▎         | 33/1000 [03:34<1:44:34,  6.49s/it][Succeeded / Failed / Skipped / Total] 12 / 21 / 0 / 33:   3%|▎         | 33/1000 [03:34<1:44:34,  6.49s/it][Succeeded / Failed / Skipped / Total] 12 / 21 / 0 / 33:   3%|▎         | 34/1000 [03:40<1:44:10,  6.47s/it]Get the value of the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[checkedper]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Synchronise the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[r]] = get ( ) ; if ( ( [[r]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[r]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[bound]] ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[p]] = get ( ) ; if ( ( [[p]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[p]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 30 ---------------------------------------------
Shuts down this queue . --> Shuts down a line --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , [[queue]] , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[line]] , AtomicLong [[front]] , BooleanSupplier isCancelled ) { if ( [[line]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[front]] . get ( ) , actual , [[line]] , [[front]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[front]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[c]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
Return true if the supplied action . --> Shut downstream --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[ifake]] ( Disposable upstream , Disposable [[downstream]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[downstream]] , "next is null" ) ; if ( upstream != null ) { [[downstream]] . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[fail]]" != "[[fail]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Handle a subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[out]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[out]] != null ) { next . cancel ( ) ; if ( [[out]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[proven]]" == "[[proven]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Sets the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[steiver]] ( AtomicReference < Subscription > [[across]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[across]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[across]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 22 / 0 / 34:   3%|▎         | 34/1000 [03:40<1:44:10,  6.47s/it][Succeeded / Failed / Skipped / Total] 12 / 22 / 0 / 34:   4%|▎         | 35/1000 [03:41<1:41:47,  6.33s/it][Succeeded / Failed / Skipped / Total] 13 / 22 / 0 / 35:   4%|▎         | 35/1000 [03:41<1:41:47,  6.33s/it][Succeeded / Failed / Skipped / Total] 13 / 22 / 0 / 35:   4%|▎         | 36/1000 [03:46<1:41:08,  6.30s/it][Succeeded / Failed / Skipped / Total] 13 / 23 / 0 / 36:   4%|▎         | 36/1000 [03:46<1:41:08,  6.30s/it][Succeeded / Failed / Skipped / Total] 13 / 23 / 0 / 36:   4%|▎         | 37/1000 [03:47<1:38:45,  6.15s/it][Succeeded / Failed / Skipped / Total] 14 / 23 / 0 / 37:   4%|▎         | 37/1000 [03:47<1:38:45,  6.15s/it][Succeeded / Failed / Skipped / Total] 14 / 23 / 0 / 37:   4%|▍         | 38/1000 [03:50<1:37:17,  6.07s/it][Succeeded / Failed / Skipped / Total] 15 / 23 / 0 / 38:   4%|▍         | 38/1000 [03:50<1:37:17,  6.07s/it][Succeeded / Failed / Skipped / Total] 15 / 23 / 0 / 38:   4%|▍         | 39/1000 [03:55<1:36:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 16 / 23 / 0 / 39:   4%|▍         | 39/1000 [03:55<1:36:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 16 / 23 / 0 / 39:   4%|▍         | 40/1000 [04:02<1:37:01,  6.06s/it][Succeeded / Failed / Skipped / Total] 16 / 24 / 0 / 40:   4%|▍         | 40/1000 [04:02<1:37:01,  6.06s/it][Succeeded / Failed / Skipped / Total] 16 / 24 / 0 / 40:   4%|▍         | 41/1000 [04:06<1:36:16,  6.02s/it][Succeeded / Failed / Skipped / Total] 16 / 25 / 0 / 41:   4%|▍         | 41/1000 [04:06<1:36:16,  6.02s/it][Succeeded / Failed / Skipped / Total] 16 / 25 / 0 / 41:   4%|▍         | 42/1000 [04:14<1:36:47,  6.06s/it][Succeeded / Failed / Skipped / Total] 16 / 26 / 0 / 42:   4%|▍         | 42/1000 [04:14<1:36:47,  6.06s/it][Succeeded / Failed / Skipped / Total] 16 / 26 / 0 / 42:   4%|▍         | 43/1000 [04:17<1:35:27,  5.98s/it]Add a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[bringap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 35 ---------------------------------------------
Adds a new ranges to the set . --> Return a set of ranges --> Socre: 1.0

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[u]] = addCap ( r , n ) ; if ( requested . compareAndSet ( r , [[u]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long [[h]] = addCap ( r , n ) ; if ( requested . compareAndSet ( r , [[h]] ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 36 ---------------------------------------------
Sets the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable [[next]] , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable [[2nd]] , Class < ? > [[co]] ) { ObjectHelper . requireNonNull ( [[2nd]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[2nd]] ) ) { [[2nd]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[co]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 37 ---------------------------------------------
Adds a new object . --> Invoked when the object is enabled --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[assignment]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 38 ---------------------------------------------
Returns the long value . --> Subroutine to band --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long [[a]] , long b ) { long [[u]] = [[a]] * b ; if ( ( ( [[a]] | b ) >>> 31 ) != 0 ) { if ( [[u]] / [[a]] != b ) { return Long . MAX_VALUE ; } } return [[u]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[broadliparray]] ( long [[b]] , long b ) { long [[movement]] = [[b]] * b ; if ( ( ( [[b]] | b ) >>> 31 ) != 0 ) { if ( [[movement]] / [[b]] != b ) { return Long . MAX_VALUE ; } } return [[movement]] ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 39 ---------------------------------------------
Shuts down the executor . --> Shuts down all threads --> Socre: 1.0

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void shutdown ( ) { ScheduledExecutorService [[osc]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[osc]] != null ) { [[osc]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 40 ---------------------------------------------
Create a new exception . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[ripone]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[artist]] ( ThreadFactory [[gallery]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[gallery]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Shronously cancels the resources . --> [[[FAILED]]]

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { s . request ( [[r]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long [[d]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[d]] != 0L ) { s . request ( [[d]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 27 / 0 / 43:   4%|▍         | 43/1000 [04:17<1:35:27,  5.98s/it][Succeeded / Failed / Skipped / Total] 16 / 27 / 0 / 43:   4%|▍         | 44/1000 [04:17<1:33:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 28 / 0 / 44:   4%|▍         | 44/1000 [04:17<1:33:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 28 / 0 / 44:   4%|▍         | 45/1000 [04:23<1:33:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 29 / 0 / 45:   4%|▍         | 45/1000 [04:23<1:33:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 29 / 0 / 45:   5%|▍         | 46/1000 [04:29<1:33:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 30 / 0 / 46:   5%|▍         | 46/1000 [04:29<1:33:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 16 / 30 / 0 / 46:   5%|▍         | 47/1000 [04:33<1:32:25,  5.82s/it][Succeeded / Failed / Skipped / Total] 16 / 31 / 0 / 47:   5%|▍         | 47/1000 [04:33<1:32:25,  5.82s/it][Succeeded / Failed / Skipped / Total] 16 / 31 / 0 / 47:   5%|▍         | 48/1000 [04:53<1:37:06,  6.12s/it][Succeeded / Failed / Skipped / Total] 17 / 31 / 0 / 48:   5%|▍         | 48/1000 [04:53<1:37:06,  6.12s/it][Succeeded / Failed / Skipped / Total] 17 / 31 / 0 / 48:   5%|▍         | 49/1000 [05:00<1:37:10,  6.13s/it][Succeeded / Failed / Skipped / Total] 17 / 32 / 0 / 49:   5%|▍         | 49/1000 [05:00<1:37:10,  6.13s/it][Succeeded / Failed / Skipped / Total] 17 / 32 / 0 / 49:   5%|▌         | 50/1000 [05:06<1:37:06,  6.13s/it][Succeeded / Failed / Skipped / Total] 17 / 33 / 0 / 50:   5%|▌         | 50/1000 [05:06<1:37:06,  6.13s/it][Succeeded / Failed / Skipped / Total] 17 / 33 / 0 / 50:   5%|▌         | 51/1000 [05:13<1:37:22,  6.16s/it][Succeeded / Failed / Skipped / Total] 17 / 34 / 0 / 51:   5%|▌         | 51/1000 [05:13<1:37:22,  6.16s/it][Succeeded / Failed / Skipped / Total] 17 / 34 / 0 / 51:   5%|▌         | 52/1000 [05:16<1:36:16,  6.09s/it]Converts a Throwable to an error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[bundleartdim]] ( Throwable [[experiment]] ) { if ( [[experiment]] instanceof Error ) { throw ( Error ) [[experiment]] ; } if ( [[experiment]] instanceof RuntimeException ) { return ( RuntimeException ) [[experiment]] ; } return new RuntimeException ( [[experiment]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
Shuts down this queue . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[incthed]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 45 ---------------------------------------------
Throws an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[ae]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[ae]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[ae]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 46 ---------------------------------------------
Sets the disposed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[freeing]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Sets the number of members . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[bulk]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[box]] = resources ; return [[box]] != null ? [[box]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Returns whether or not the given object is enabled . --> Return a copy of this object --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[o]] = a [ i ] ; if ( [[o]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[o]] , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[let]] ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[e]] = a [ i ] ; if ( [[e]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[e]] , subscriber ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 49 ---------------------------------------------
Transforms a Observable into a Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[mitbargerumc]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > [[dataend]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , [[dataend]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
Sets the queue of queues . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[starter]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
Sets the queue queue queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[istlandian]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 35 / 0 / 52:   5%|▌         | 52/1000 [05:16<1:36:16,  6.09s/it][Succeeded / Failed / Skipped / Total] 17 / 35 / 0 / 52:   5%|▌         | 53/1000 [05:25<1:37:02,  6.15s/it][Succeeded / Failed / Skipped / Total] 17 / 36 / 0 / 53:   5%|▌         | 53/1000 [05:25<1:37:02,  6.15s/it][Succeeded / Failed / Skipped / Total] 17 / 36 / 0 / 53:   5%|▌         | 54/1000 [05:43<1:40:10,  6.35s/it][Succeeded / Failed / Skipped / Total] 17 / 37 / 0 / 54:   5%|▌         | 54/1000 [05:43<1:40:10,  6.35s/it][Succeeded / Failed / Skipped / Total] 17 / 37 / 0 / 54:   6%|▌         | 55/1000 [05:43<1:38:20,  6.24s/it][Succeeded / Failed / Skipped / Total] 17 / 38 / 0 / 55:   6%|▌         | 55/1000 [05:43<1:38:20,  6.24s/it][Succeeded / Failed / Skipped / Total] 17 / 38 / 0 / 55:   6%|▌         | 56/1000 [05:48<1:38:02,  6.23s/it][Succeeded / Failed / Skipped / Total] 17 / 39 / 0 / 56:   6%|▌         | 56/1000 [05:48<1:38:02,  6.23s/it][Succeeded / Failed / Skipped / Total] 17 / 39 / 0 / 56:   6%|▌         | 57/1000 [05:56<1:38:17,  6.25s/it]Throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[front]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[front]] . add ( e ) ; } } return [[front]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 53 ---------------------------------------------
Get the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[give]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Returns whether or not the supplied value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[sell]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Wraps the given observer to the given Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[True]]" == "[[True]]" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[free]]" == "[[free]]" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "[[free]]" == "[[free]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[free]]" == "[[free]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "[[free]]" == "[[free]]" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "[[free]]" == "[[free]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "[[free]]" == "[[free]]" ; } return "[[doubtful]]" != "[[doubtful]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 56 ---------------------------------------------
Returns a copy of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int [[c]] = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ [[c]] ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] [[art]] = head ; final int [[d]] = capacity ; while ( [[art]] != null ) { for ( int i = 0 ; i < [[d]] ; i ++ ) { Object o = [[art]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[art]] = ( Object [ ] ) [[art]] [ [[d]] ] ; } return "[[contrary]]" != "[[contrary]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 39 / 0 / 57:   6%|▌         | 57/1000 [05:56<1:38:17,  6.25s/it][Succeeded / Failed / Skipped / Total] 18 / 39 / 0 / 57:   6%|▌         | 58/1000 [06:03<1:38:20,  6.26s/it][Succeeded / Failed / Skipped / Total] 18 / 40 / 0 / 58:   6%|▌         | 58/1000 [06:03<1:38:20,  6.26s/it][Succeeded / Failed / Skipped / Total] 18 / 40 / 0 / 58:   6%|▌         | 59/1000 [06:03<1:36:43,  6.17s/it][Succeeded / Failed / Skipped / Total] 18 / 41 / 0 / 59:   6%|▌         | 59/1000 [06:03<1:36:43,  6.17s/it][Succeeded / Failed / Skipped / Total] 18 / 41 / 0 / 59:   6%|▌         | 60/1000 [06:16<1:38:20,  6.28s/it][Succeeded / Failed / Skipped / Total] 18 / 42 / 0 / 60:   6%|▌         | 60/1000 [06:16<1:38:20,  6.28s/it][Succeeded / Failed / Skipped / Total] 18 / 42 / 0 / 60:   6%|▌         | 61/1000 [06:17<1:36:55,  6.19s/it][Succeeded / Failed / Skipped / Total] 18 / 43 / 0 / 61:   6%|▌         | 61/1000 [06:17<1:36:55,  6.19s/it][Succeeded / Failed / Skipped / Total] 18 / 43 / 0 / 61:   6%|▌         | 62/1000 [06:18<1:35:31,  6.11s/it][Succeeded / Failed / Skipped / Total] 18 / 44 / 0 / 62:   6%|▌         | 62/1000 [06:18<1:35:31,  6.11s/it][Succeeded / Failed / Skipped / Total] 18 / 44 / 0 / 62:   6%|▋         | 63/1000 [06:19<1:34:01,  6.02s/it][Succeeded / Failed / Skipped / Total] 18 / 45 / 0 / 63:   6%|▋         | 63/1000 [06:19<1:34:01,  6.02s/it][Succeeded / Failed / Skipped / Total] 18 / 45 / 0 / 63:   6%|▋         | 64/1000 [06:38<1:37:07,  6.23s/it][Succeeded / Failed / Skipped / Total] 19 / 45 / 0 / 64:   6%|▋         | 64/1000 [06:38<1:37:07,  6.23s/it][Succeeded / Failed / Skipped / Total] 19 / 45 / 0 / 64:   6%|▋         | 65/1000 [06:51<1:38:44,  6.34s/it]Shuts downstream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[rear]] ( ) { int [[s]] = get ( ) ; if ( ( [[s]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 58 ---------------------------------------------
Sets the error state . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[exit]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 59 ---------------------------------------------
Shuts down the value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[m]] = downstream ; if ( state == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[m]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[m]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[m]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 60 ---------------------------------------------
Replies the given iterable to the given iterable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[coverier]] ) { return concatMapIterable ( [[coverier]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 61 ---------------------------------------------
Performs a operation . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[andglerapleleyor]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[andglerapleleyor]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
Counts the number of items in the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[mass]] ) { if ( [[mass]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 63 ---------------------------------------------
Sorts a list of classes . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[organised]] ( Comparator < ? super T > [[collectionsauthing]] ) { ObjectHelper . requireNonNull ( [[collectionsauthing]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[collectionsauthing]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Called when the client has completed . --> Used to call this method --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long [[n]] ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long [[r]] ) { Subscription [[i]] = this . upstream ; if ( [[i]] != null ) { [[i]] . request ( [[r]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 65 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 46 / 0 / 65:   6%|▋         | 65/1000 [06:51<1:38:44,  6.34s/it][Succeeded / Failed / Skipped / Total] 19 / 46 / 0 / 65:   7%|▋         | 66/1000 [07:11<1:41:39,  6.53s/it][Succeeded / Failed / Skipped / Total] 19 / 47 / 0 / 66:   7%|▋         | 66/1000 [07:11<1:41:39,  6.53s/it][Succeeded / Failed / Skipped / Total] 19 / 47 / 0 / 66:   7%|▋         | 67/1000 [07:14<1:40:56,  6.49s/it][Succeeded / Failed / Skipped / Total] 20 / 47 / 0 / 67:   7%|▋         | 67/1000 [07:14<1:40:56,  6.49s/it][Succeeded / Failed / Skipped / Total] 20 / 47 / 0 / 67:   7%|▋         | 68/1000 [07:17<1:39:52,  6.43s/it][Succeeded / Failed / Skipped / Total] 20 / 48 / 0 / 68:   7%|▋         | 68/1000 [07:17<1:39:52,  6.43s/it][Succeeded / Failed / Skipped / Total] 20 / 48 / 0 / 68:   7%|▋         | 69/1000 [07:24<1:39:57,  6.44s/it][Succeeded / Failed / Skipped / Total] 21 / 48 / 0 / 69:   7%|▋         | 69/1000 [07:24<1:39:57,  6.44s/it][Succeeded / Failed / Skipped / Total] 21 / 48 / 0 / 69:   7%|▋         | 70/1000 [07:35<1:40:45,  6.50s/it][Succeeded / Failed / Skipped / Total] 21 / 49 / 0 / 70:   7%|▋         | 70/1000 [07:35<1:40:45,  6.50s/it][Succeeded / Failed / Skipped / Total] 21 / 49 / 0 / 70:   7%|▋         | 71/1000 [07:36<1:39:30,  6.43s/it][Succeeded / Failed / Skipped / Total] 21 / 50 / 0 / 71:   7%|▋         | 71/1000 [07:36<1:39:30,  6.43s/it][Succeeded / Failed / Skipped / Total] 21 / 50 / 0 / 71:   7%|▋         | 72/1000 [07:42<1:39:26,  6.43s/it]Creates a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[cf]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[cf]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[cf]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > [[bc]] , final Scheduler scheduler ) { final Flowable < T > flowable = [[bc]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( [[bc]] , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Returns a Published Publisher . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[author]] ( PublishDisposable < T > [[stat]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[ne]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[ne]] , 0 , n ) ; [[ne]] [ n ] = [[stat]] ; if ( subscribers . compareAndSet ( a , [[ne]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Removes all resources . --> Convenience method for creating a new instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[n]] ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[n]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[draw]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[ii]] = a . length ; int j = - 1 ; for ( int i = 0 ; i < [[ii]] ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[ii]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[ii]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , [[ii]] - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 68 ---------------------------------------------
Set the amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[onrelac]] ( long amount , TimeUnit [[term]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[term]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 69 ---------------------------------------------
Convenience factory method . --> Convenience factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[raisenerriotherparave]] ( ) { Response < ? > [[test]] ; try { [[test]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[test]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[test]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[test]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 70 ---------------------------------------------
Calculate the maximum size . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[calculationfrx]] ( TimeUnit [[factor]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Returns a string representation of a method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[pointer]] ) { try { return HttpMethod . valueOf ( [[pointer]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 50 / 0 / 72:   7%|▋         | 72/1000 [07:42<1:39:26,  6.43s/it][Succeeded / Failed / Skipped / Total] 22 / 50 / 0 / 72:   7%|▋         | 73/1000 [07:43<1:38:03,  6.35s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 0 / 73:   7%|▋         | 73/1000 [07:43<1:38:03,  6.35s/it][Succeeded / Failed / Skipped / Total] 22 / 51 / 0 / 73:   7%|▋         | 74/1000 [07:54<1:38:54,  6.41s/it][Succeeded / Failed / Skipped / Total] 23 / 51 / 0 / 74:   7%|▋         | 74/1000 [07:54<1:38:54,  6.41s/it][Succeeded / Failed / Skipped / Total] 23 / 51 / 0 / 74:   8%|▊         | 75/1000 [08:10<1:40:49,  6.54s/it][Succeeded / Failed / Skipped / Total] 23 / 52 / 0 / 75:   8%|▊         | 75/1000 [08:10<1:40:49,  6.54s/it][Succeeded / Failed / Skipped / Total] 23 / 52 / 0 / 75:   8%|▊         | 76/1000 [08:14<1:40:14,  6.51s/it][Succeeded / Failed / Skipped / Total] 23 / 53 / 0 / 76:   8%|▊         | 76/1000 [08:14<1:40:14,  6.51s/it][Succeeded / Failed / Skipped / Total] 23 / 53 / 0 / 76:   8%|▊         | 77/1000 [08:28<1:41:37,  6.61s/it][Succeeded / Failed / Skipped / Total] 23 / 54 / 0 / 77:   8%|▊         | 77/1000 [08:28<1:41:37,  6.61s/it][Succeeded / Failed / Skipped / Total] 23 / 54 / 0 / 77:   8%|▊         | 78/1000 [08:29<1:40:19,  6.53s/it][Succeeded / Failed / Skipped / Total] 23 / 55 / 0 / 78:   8%|▊         | 78/1000 [08:29<1:40:19,  6.53s/it][Succeeded / Failed / Skipped / Total] 23 / 55 / 0 / 78:   8%|▊         | 79/1000 [08:43<1:41:38,  6.62s/it]Get the default user . --> Searches for a search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[albronction]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 73 ---------------------------------------------
Add a new user . --> [[[FAILED]]]

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[auth]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication [[aati]] = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 74 ---------------------------------------------
Does the versions of the given version . --> Calculates the ringering . --> Socre: 1.0

[[[[Adv]]]]: private static void performVersionChecks ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String [[0fereringroller]] ) { if ( [[0fereringroller]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Hashes a password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[exfield]] ( CharSequence rawPassword ) { String salt = PREFIX + this . [[savepledursser]] . generateKey ( ) + SUFFIX ; return digest ( salt , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Put password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean matches ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 77 ---------------------------------------------
Gets the Spring security properties . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[getrasuproller]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
Checks if the given ring is a valid ring . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[tasessebs]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "[[apply]]" == "[[apply]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 55 / 0 / 79:   8%|▊         | 79/1000 [08:43<1:41:38,  6.62s/it][Succeeded / Failed / Skipped / Total] 24 / 55 / 0 / 79:   8%|▊         | 80/1000 [08:50<1:41:41,  6.63s/it][Succeeded / Failed / Skipped / Total] 24 / 56 / 0 / 80:   8%|▊         | 80/1000 [08:50<1:41:41,  6.63s/it][Succeeded / Failed / Skipped / Total] 24 / 56 / 0 / 80:   8%|▊         | 81/1000 [08:54<1:41:06,  6.60s/it][Succeeded / Failed / Skipped / Total] 24 / 57 / 0 / 81:   8%|▊         | 81/1000 [08:54<1:41:06,  6.60s/it][Succeeded / Failed / Skipped / Total] 24 / 57 / 0 / 81:   8%|▊         | 82/1000 [09:02<1:41:18,  6.62s/it][Succeeded / Failed / Skipped / Total] 25 / 57 / 0 / 82:   8%|▊         | 82/1000 [09:02<1:41:18,  6.62s/it][Succeeded / Failed / Skipped / Total] 25 / 57 / 0 / 82:   8%|▊         | 83/1000 [09:08<1:41:04,  6.61s/it][Succeeded / Failed / Skipped / Total] 25 / 58 / 0 / 83:   8%|▊         | 83/1000 [09:08<1:41:04,  6.61s/it][Succeeded / Failed / Skipped / Total] 25 / 58 / 0 / 83:   8%|▊         | 84/1000 [10:01<1:49:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 25 / 59 / 0 / 84:   8%|▊         | 84/1000 [10:01<1:49:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 25 / 59 / 0 / 84:   8%|▊         | 85/1000 [10:31<1:53:21,  7.43s/it]Sets the default attribute . --> Add a player to a player --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[ashausplayr]] ( String identifierPattern ) { AttributeExchangeConfigurer [[dicatextherecocffiplayers]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[dicatextherecocffiplayers]] ) ; return [[dicatextherecocffiplayers]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 80 ---------------------------------------------
Configures the client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[andffiputle]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[andffiputle]] ) ; return [[andffiputle]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Get the HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[area]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[area]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 82 ---------------------------------------------
Execute a command . --> Execute a command --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[batrickss]] = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 83 ---------------------------------------------
Configures a OAuth2 . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[aoamtmbyresweressnercial]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 84 ---------------------------------------------
Parse a method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[continuationBodyNullable]] = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type [[responseType]] = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( [[responseType]] ) == Response . class && [[responseType]] instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean [[routinetorundmve]] = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type [[commandhow]] = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( [[commandhow]] ) == Response . class && [[commandhow]] instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 60 / 0 / 85:   8%|▊         | 85/1000 [10:31<1:53:21,  7.43s/it][Succeeded / Failed / Skipped / Total] 25 / 60 / 0 / 85:   9%|▊         | 86/1000 [10:41<1:53:40,  7.46s/it][Succeeded / Failed / Skipped / Total] 25 / 61 / 0 / 86:   9%|▊         | 86/1000 [10:41<1:53:40,  7.46s/it][Succeeded / Failed / Skipped / Total] 25 / 61 / 0 / 86:   9%|▊         | 87/1000 [10:49<1:53:34,  7.46s/it][Succeeded / Failed / Skipped / Total] 26 / 61 / 0 / 87:   9%|▊         | 87/1000 [10:49<1:53:34,  7.46s/it][Succeeded / Failed / Skipped / Total] 26 / 61 / 0 / 87:   9%|▉         | 88/1000 [11:01<1:54:10,  7.51s/it][Succeeded / Failed / Skipped / Total] 26 / 62 / 0 / 88:   9%|▉         | 88/1000 [11:01<1:54:10,  7.51s/it][Succeeded / Failed / Skipped / Total] 26 / 62 / 0 / 88:   9%|▉         | 89/1000 [11:09<1:54:17,  7.53s/it]Executes the given search . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls [[ctls]] = new SearchControls ( ) ; [[ctls]] . setReturningAttributes ( NO_ATTRS ) ; [[ctls]] . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , [[ctls]] ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls [[wllines]] = new SearchControls ( ) ; [[wllines]] . setReturningAttributes ( NO_ATTRS ) ; [[wllines]] . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , [[wllines]] ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 86 ---------------------------------------------
Searches for a given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[baseputadiplineretroveveptces]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 87 ---------------------------------------------
Get the search for the given search . --> Build a tree from a tree --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[searchControls]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName [[searchBaseDn]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( [[searchBaseDn]] , filter , params , buildControls ( [[searchControls]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[searchBaseDn]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[searchResult]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[searchResult]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls [[almasicalhs]] , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName [[dragtreendane]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( [[dragtreendane]] , filter , params , buildControls ( [[almasicalhs]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[dragtreendane]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult [[returnerspass]] = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) [[returnerspass]] . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 88 ---------------------------------------------
Returns an immutable copy of the given search . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[baseeanvalgs]] ( SearchControls [[authenticcestriply]] ) { return new SearchControls ( [[authenticcestriply]] . getSearchScope ( ) , [[authenticcestriply]] . getCountLimit ( ) , [[authenticcestriply]] . getTimeLimit ( ) , [[authenticcestriply]] . getReturningAttributes ( ) , RETURN_OBJECT , [[authenticcestriply]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 63 / 0 / 89:   9%|▉         | 89/1000 [11:09<1:54:17,  7.53s/it][Succeeded / Failed / Skipped / Total] 26 / 63 / 0 / 89:   9%|▉         | 90/1000 [11:12<1:53:20,  7.47s/it][Succeeded / Failed / Skipped / Total] 27 / 63 / 0 / 90:   9%|▉         | 90/1000 [11:12<1:53:20,  7.47s/it][Succeeded / Failed / Skipped / Total] 27 / 63 / 0 / 90:   9%|▉         | 91/1000 [11:18<1:52:55,  7.45s/it][Succeeded / Failed / Skipped / Total] 28 / 63 / 0 / 91:   9%|▉         | 91/1000 [11:18<1:52:55,  7.45s/it][Succeeded / Failed / Skipped / Total] 28 / 63 / 0 / 91:   9%|▉         | 92/1000 [11:30<1:53:30,  7.50s/it]Get a list of values for a given filter . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( base , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String base , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributesnameses]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > [[rotationappreavkevaslies]] = searchForMultipleAttributeValues ( base , filter , params , [[attributesnameses]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[rotationappreavkevaslies]] ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 90 ---------------------------------------------
Extracts a bean definition . --> Helper method to create a bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String url = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[hat]] = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[hat]] ) ) { [[hat]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[hat]] ) ; } } String url = "ldap://127.0.0.1:" + [[hat]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[hat]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 91 ---------------------------------------------
Generate the JAX JaJAX . --> Creates a new Jawajast . --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String [[ausotkingwaijascatedtubmediagift]] = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( [[ausotkingwaijascatedtubmediagift]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 63 / 0 / 92:   9%|▉         | 92/1000 [11:30<1:53:30,  7.50s/it][Succeeded / Failed / Skipped / Total] 29 / 63 / 0 / 92:   9%|▉         | 93/1000 [11:36<1:53:17,  7.49s/it][Succeeded / Failed / Skipped / Total] 29 / 64 / 0 / 93:   9%|▉         | 93/1000 [11:36<1:53:17,  7.49s/it][Succeeded / Failed / Skipped / Total] 29 / 64 / 0 / 93:   9%|▉         | 94/1000 [11:42<1:52:53,  7.48s/it][Succeeded / Failed / Skipped / Total] 30 / 64 / 0 / 94:   9%|▉         | 94/1000 [11:42<1:52:53,  7.48s/it][Succeeded / Failed / Skipped / Total] 30 / 64 / 0 / 94:  10%|▉         | 95/1000 [11:54<1:53:28,  7.52s/it][Succeeded / Failed / Skipped / Total] 30 / 65 / 0 / 95:  10%|▉         | 95/1000 [11:54<1:53:28,  7.52s/it][Succeeded / Failed / Skipped / Total] 30 / 65 / 0 / 95:  10%|▉         | 96/1000 [11:57<1:52:34,  7.47s/it][Succeeded / Failed / Skipped / Total] 31 / 65 / 0 / 96:  10%|▉         | 96/1000 [11:57<1:52:34,  7.47s/it][Succeeded / Failed / Skipped / Total] 31 / 65 / 0 / 96:  10%|▉         | 97/1000 [12:10<1:53:24,  7.54s/it][Succeeded / Failed / Skipped / Total] 31 / 66 / 0 / 97:  10%|▉         | 97/1000 [12:10<1:53:24,  7.54s/it][Succeeded / Failed / Skipped / Total] 31 / 66 / 0 / 97:  10%|▉         | 98/1000 [12:19<1:53:27,  7.55s/it]Register Servlet . --> Method that registers a region . --> Socre: 1.0

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[provideServletApi]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideServletApi]] ) ) { [[provideServletApi]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[provideServletApi]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String [[benefitsturvistelathi]] = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[benefitsturvistelathi]] ) ) { [[benefitsturvistelathi]] = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( [[benefitsturvistelathi]] ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Creates a reader . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[establishswletsherstpfefuuidamry]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[object]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[object]] = [[object]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[object]] = [[object]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[object]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Sets the filter attribute . --> Register a filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[altapordoscularuslilightheen]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 95 ---------------------------------------------
Adapts a role . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[areadifers]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[destinationkas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[destinationkas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[destinationkas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 96 ---------------------------------------------
Find the SQL statement . --> Allocate a SQL statement --> Socre: 1.0

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long [[toFind]] : findNow ) { i ++ ; ps . setLong ( i , [[toFind]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[bank]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[bank]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long [[sofras]] : findNow ) { i ++ ; ps . setLong ( i , [[sofras]] ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 97 ---------------------------------------------
Set the properties . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[beforepamarletsrat]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 67 / 0 / 98:  10%|▉         | 98/1000 [12:19<1:53:27,  7.55s/it][Succeeded / Failed / Skipped / Total] 31 / 67 / 0 / 98:  10%|▉         | 99/1000 [12:26<1:53:14,  7.54s/it][Succeeded / Failed / Skipped / Total] 31 / 68 / 0 / 99:  10%|▉         | 99/1000 [12:26<1:53:14,  7.54s/it][Succeeded / Failed / Skipped / Total] 31 / 68 / 0 / 99:  10%|█         | 100/1000 [12:29<1:52:23,  7.49s/it][Succeeded / Failed / Skipped / Total] 31 / 69 / 0 / 100:  10%|█         | 100/1000 [12:29<1:52:23,  7.49s/it][Succeeded / Failed / Skipped / Total] 31 / 69 / 0 / 100:  10%|█         | 101/1000 [13:00<1:55:46,  7.73s/it][Succeeded / Failed / Skipped / Total] 31 / 70 / 0 / 101:  10%|█         | 101/1000 [13:00<1:55:46,  7.73s/it][Succeeded / Failed / Skipped / Total] 31 / 70 / 0 / 101:  10%|█         | 102/1000 [13:16<1:56:53,  7.81s/it][Succeeded / Failed / Skipped / Total] 31 / 71 / 0 / 102:  10%|█         | 102/1000 [13:16<1:56:53,  7.81s/it][Succeeded / Failed / Skipped / Total] 31 / 71 / 0 / 102:  10%|█         | 103/1000 [13:16<1:55:39,  7.74s/it]Convenience method to create a algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[repibor]] ( String [[algorithms]] ) { try { return Cipher . getInstance ( [[algorithms]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Returns the number of timestamps for a given query . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[sitthienaapvisiation]] ( String [[bandid]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[discnae]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[bandid]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[bandid]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[bandid]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[bandid]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the value of a specific attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[segment]] : attributes ) { result . add ( getGrantedAuthority ( [[segment]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Verifies a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain [[chain]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } [[chain]] . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse response , FilterChain [[code]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) response ) ; } [[code]] . doFilter ( request , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Handles authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication [[authResult]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[authRequest]] = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[authResult]] = authenticationManager . authenticate ( [[authRequest]] ) ; successfulAuthentication ( request , response , [[authResult]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication [[aamonsull]] ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[seedreertain]] = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; [[seedreertain]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; [[aamonsull]] = authenticationManager . authenticate ( [[seedreertain]] ) ; successfulAuthentication ( request , response , [[aamonsull]] ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
[Succeeded / Failed / Skipped / Total] 31 / 71 / 1 / 103:  10%|█         | 103/1000 [13:16<1:55:39,  7.74s/it][Succeeded / Failed / Skipped / Total] 31 / 71 / 1 / 103:  10%|█         | 104/1000 [13:24<1:55:32,  7.74s/it][Succeeded / Failed / Skipped / Total] 31 / 72 / 1 / 104:  10%|█         | 104/1000 [13:24<1:55:32,  7.74s/it][Succeeded / Failed / Skipped / Total] 31 / 72 / 1 / 104:  10%|█         | 105/1000 [13:39<1:56:28,  7.81s/it][Succeeded / Failed / Skipped / Total] 32 / 72 / 1 / 105:  10%|█         | 105/1000 [13:39<1:56:28,  7.81s/it][Succeeded / Failed / Skipped / Total] 32 / 72 / 1 / 105:  11%|█         | 106/1000 [13:49<1:56:32,  7.82s/it][Succeeded / Failed / Skipped / Total] 33 / 72 / 1 / 106:  11%|█         | 106/1000 [13:49<1:56:32,  7.82s/it][Succeeded / Failed / Skipped / Total] 33 / 72 / 1 / 106:  11%|█         | 107/1000 [13:54<1:56:04,  7.80s/it][Succeeded / Failed / Skipped / Total] 33 / 73 / 1 / 107:  11%|█         | 107/1000 [13:54<1:56:04,  7.80s/it][Succeeded / Failed / Skipped / Total] 33 / 73 / 1 / 107:  11%|█         | 108/1000 [14:06<1:56:27,  7.83s/it][Succeeded / Failed / Skipped / Total] 34 / 73 / 1 / 108:  11%|█         | 108/1000 [14:06<1:56:27,  7.83s/it][Succeeded / Failed / Skipped / Total] 34 / 73 / 1 / 108:  11%|█         | 109/1000 [14:14<1:56:23,  7.84s/it][Succeeded / Failed / Skipped / Total] 34 / 74 / 1 / 109:  11%|█         | 109/1000 [14:14<1:56:23,  7.84s/it][Succeeded / Failed / Skipped / Total] 34 / 74 / 1 / 109:  11%|█         | 110/1000 [14:14<1:55:12,  7.77s/it]--------------------------------------------- Result 103 ---------------------------------------------
Create a login login --> [[[SKIPPED]]]

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
Check if the given principal is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[trustmindid]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[prior]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[prior]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[prior]] ) ) { return "False" != "False" ; } if ( [[prior]] != null && [[prior]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[prior]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 105 ---------------------------------------------
Logs the login page . --> Called when a logic is a logic --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[augslymibylikeftviewson]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[discoanhanflegoing]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[discoanhanflegoing]] != null && ! [[discoanhanflegoing]] . isCustomLogoutSuccess ( ) ) { [[discoanhanflegoing]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Converts a password value to a String . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[canvasallune]] ) { if ( ! ( [[canvasallune]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
Updates the supplied session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[xsansensorrearkz]] ( B [[https]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[https]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 108 ---------------------------------------------
Generates a string from a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[onblockicooriement]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 109 ---------------------------------------------
Returns a list of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[hq]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority authority : authorities ) { [[hq]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[hq]] . add ( defaultAuthority ) ; } return [[hq]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 110 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 75 / 1 / 110:  11%|█         | 110/1000 [14:14<1:55:12,  7.77s/it][Succeeded / Failed / Skipped / Total] 34 / 75 / 1 / 110:  11%|█         | 111/1000 [14:42<1:57:46,  7.95s/it][Succeeded / Failed / Skipped / Total] 35 / 75 / 1 / 111:  11%|█         | 111/1000 [14:42<1:57:46,  7.95s/it][Succeeded / Failed / Skipped / Total] 35 / 75 / 1 / 111:  11%|█         | 112/1000 [14:55<1:58:22,  8.00s/it][Succeeded / Failed / Skipped / Total] 35 / 76 / 1 / 112:  11%|█         | 112/1000 [14:55<1:58:22,  8.00s/it][Succeeded / Failed / Skipped / Total] 35 / 76 / 1 / 112:  11%|█▏        | 113/1000 [15:00<1:57:50,  7.97s/it][Succeeded / Failed / Skipped / Total] 35 / 77 / 1 / 113:  11%|█▏        | 113/1000 [15:00<1:57:50,  7.97s/it][Succeeded / Failed / Skipped / Total] 35 / 77 / 1 / 113:  11%|█▏        | 114/1000 [15:04<1:57:07,  7.93s/it][Succeeded / Failed / Skipped / Total] 35 / 78 / 1 / 114:  11%|█▏        | 114/1000 [15:04<1:57:07,  7.93s/it][Succeeded / Failed / Skipped / Total] 35 / 78 / 1 / 114:  12%|█▏        | 115/1000 [15:16<1:57:31,  7.97s/it][Succeeded / Failed / Skipped / Total] 36 / 78 / 1 / 115:  12%|█▏        | 115/1000 [15:16<1:57:31,  7.97s/it][Succeeded / Failed / Skipped / Total] 36 / 78 / 1 / 115:  12%|█▏        | 116/1000 [15:27<1:57:45,  7.99s/it]Returns the name of the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest request ) { Cookie [ ] [[clients]] = request . getCookies ( ) ; if ( ( [[clients]] == null ) || ( [[clients]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[clients]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 111 ---------------------------------------------
Looks for a security context . --> Resolves a MBean --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter [[api]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( [[api]] . getParameterType ( ) ) ; Mono < SecurityContext > [[leroyfejodiaausf]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[leroyfejodiaausf]] == null ) { return null ; } return [[leroyfejodiaausf]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[api]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 112 ---------------------------------------------
Get the query string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[createquidersgrag]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 113 ---------------------------------------------
Set the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[getsocourit]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 114 ---------------------------------------------
Checks to see if the content of the buffer is valid . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkContentLength]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . [[contentLength]] > 0 && this . contentWritten >= this . [[contentLength]] ; int [[bufferSize]] = getBufferSize ( ) ; boolean requiresFlush = [[bufferSize]] > 0 && this . contentWritten >= [[bufferSize]] ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[checktenendlennst]] ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[arebodyyd]] = this . [[libregolgisle]] > 0 && this . contentWritten >= this . [[libregolgisle]] ; int [[superlimd]] = getBufferSize ( ) ; boolean requiresFlush = [[superlimd]] > 0 && this . contentWritten >= [[superlimd]] ; if ( [[arebodyyd]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 115 ---------------------------------------------
Authenticate authentication token . --> Returns a new auth token . --> Socre: 1.0

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[publics]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 36 / 79 / 1 / 116:  12%|█▏        | 116/1000 [15:27<1:57:45,  7.99s/it][Succeeded / Failed / Skipped / Total] 36 / 79 / 1 / 116:  12%|█▏        | 117/1000 [15:31<1:57:09,  7.96s/it][Succeeded / Failed / Skipped / Total] 36 / 80 / 1 / 117:  12%|█▏        | 117/1000 [15:31<1:57:09,  7.96s/it][Succeeded / Failed / Skipped / Total] 36 / 80 / 1 / 117:  12%|█▏        | 118/1000 [15:41<1:57:17,  7.98s/it][Succeeded / Failed / Skipped / Total] 36 / 81 / 1 / 118:  12%|█▏        | 118/1000 [15:41<1:57:17,  7.98s/it][Succeeded / Failed / Skipped / Total] 36 / 81 / 1 / 118:  12%|█▏        | 119/1000 [15:53<1:57:42,  8.02s/it][Succeeded / Failed / Skipped / Total] 36 / 82 / 1 / 119:  12%|█▏        | 119/1000 [15:53<1:57:42,  8.02s/it][Succeeded / Failed / Skipped / Total] 36 / 82 / 1 / 119:  12%|█▏        | 120/1000 [15:54<1:56:42,  7.96s/it][Succeeded / Failed / Skipped / Total] 36 / 83 / 1 / 120:  12%|█▏        | 120/1000 [15:54<1:56:42,  7.96s/it][Succeeded / Failed / Skipped / Total] 36 / 84 / 1 / 121:  12%|█▏        | 121/1000 [15:54<1:55:36,  7.89s/it][Succeeded / Failed / Skipped / Total] 36 / 84 / 1 / 121:  12%|█▏        | 122/1000 [16:06<1:55:57,  7.92s/it]Returns the principal for the given authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[access]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[access]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[dom]] = [[access]] . getPrincipal ( ) ; if ( [[dom]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[dom]] ; return details . getDn ( ) ; } else if ( [[access]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 117 ---------------------------------------------
Obtain the port service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[andkvinaortw]] ) { int [[cap]] = [[andkvinaortw]] . getPort ( ) ; if ( [[cap]] == - 1 ) { [[cap]] = [[andkvinaortw]] . getDefaultPort ( ) ; } return [[cap]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 118 ---------------------------------------------
Builds a POST request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[ividgejectpurml]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Sets the environment . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[antpointticenevyownationstopardue]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 120 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[panmet]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "[[fraudulent]]" != "[[fraudulent]]" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 121 ---------------------------------------------
Returns the TPETag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[fedct]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 84 / 1 / 122:  12%|█▏        | 122/1000 [16:06<1:55:57,  7.92s/it][Succeeded / Failed / Skipped / Total] 37 / 84 / 1 / 122:  12%|█▏        | 123/1000 [16:09<1:55:15,  7.89s/it][Succeeded / Failed / Skipped / Total] 38 / 84 / 1 / 123:  12%|█▏        | 123/1000 [16:09<1:55:15,  7.89s/it][Succeeded / Failed / Skipped / Total] 38 / 84 / 1 / 123:  12%|█▏        | 124/1000 [16:15<1:54:48,  7.86s/it][Succeeded / Failed / Skipped / Total] 38 / 85 / 1 / 124:  12%|█▏        | 124/1000 [16:15<1:54:48,  7.86s/it][Succeeded / Failed / Skipped / Total] 38 / 85 / 1 / 124:  12%|█▎        | 125/1000 [16:21<1:54:31,  7.85s/it][Succeeded / Failed / Skipped / Total] 39 / 85 / 1 / 125:  12%|█▎        | 125/1000 [16:21<1:54:31,  7.85s/it][Succeeded / Failed / Skipped / Total] 39 / 85 / 1 / 125:  13%|█▎        | 126/1000 [16:39<1:55:36,  7.94s/it][Succeeded / Failed / Skipped / Total] 39 / 86 / 1 / 126:  13%|█▎        | 126/1000 [16:39<1:55:36,  7.94s/it][Succeeded / Failed / Skipped / Total] 39 / 86 / 1 / 126:  13%|█▎        | 127/1000 [16:45<1:55:09,  7.91s/it]Generate a new PEPB code . --> Generate a Principal --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[additionپkivertimedropz]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 123 ---------------------------------------------
Initialize the UserDetails . --> Unregister a UserDetails --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[intiwyredveskvciver]] ( ) throws Exception { for ( UserDetailsBuilder [[ownerbuswρ]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[ownerbuswρ]] . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Obtain the UserRegistry . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > beans = getBeansOfType ( CachingUserDetailsService . class ) ; if ( beans . size ( ) == 0 ) { beans = getBeansOfType ( UserDetailsService . class ) ; } if ( beans . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( beans . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) beans . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 125 ---------------------------------------------
Handle ticket . --> Checks if the given request is valid --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[hostpacesbarhrefront]] = [[hostpacesbarhrefront]] ( request , response ) ; final boolean result = [[hostpacesbarhrefront]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[hostpacesbarhrefront]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 126 ---------------------------------------------
Build a LDP server . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String [[serverUrl]] : urls ) { String trimmedUrl = [[serverUrl]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder [[utilityirlin]] = new StringBuilder ( ) ; for ( String [[threadawr]] : urls ) { String trimmedUrl = [[threadawr]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[utilityirlin]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[utilityirlin]] . append ( "/" ) ; } [[utilityirlin]] . append ( trimmedBaseDn ) ; [[utilityirlin]] . append ( " " ) ; } return [[utilityirlin]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 127 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 87 / 1 / 127:  13%|█▎        | 127/1000 [16:45<1:55:09,  7.91s/it][Succeeded / Failed / Skipped / Total] 39 / 87 / 1 / 127:  13%|█▎        | 128/1000 [16:45<1:54:11,  7.86s/it][Succeeded / Failed / Skipped / Total] 39 / 88 / 1 / 128:  13%|█▎        | 128/1000 [16:45<1:54:11,  7.86s/it][Succeeded / Failed / Skipped / Total] 39 / 88 / 1 / 128:  13%|█▎        | 129/1000 [17:03<1:55:08,  7.93s/it][Succeeded / Failed / Skipped / Total] 39 / 89 / 1 / 129:  13%|█▎        | 129/1000 [17:03<1:55:08,  7.93s/it][Succeeded / Failed / Skipped / Total] 39 / 89 / 1 / 129:  13%|█▎        | 130/1000 [17:03<1:54:08,  7.87s/it][Succeeded / Failed / Skipped / Total] 39 / 89 / 2 / 130:  13%|█▎        | 130/1000 [17:03<1:54:08,  7.87s/it][Succeeded / Failed / Skipped / Total] 39 / 89 / 2 / 130:  13%|█▎        | 131/1000 [17:03<1:53:10,  7.81s/it][Succeeded / Failed / Skipped / Total] 40 / 89 / 2 / 131:  13%|█▎        | 131/1000 [17:03<1:53:10,  7.81s/it][Succeeded / Failed / Skipped / Total] 40 / 89 / 2 / 131:  13%|█▎        | 132/1000 [17:13<1:53:18,  7.83s/it][Succeeded / Failed / Skipped / Total] 40 / 90 / 2 / 132:  13%|█▎        | 132/1000 [17:13<1:53:18,  7.83s/it][Succeeded / Failed / Skipped / Total] 40 / 90 / 2 / 132:  13%|█▎        | 133/1000 [17:29<1:54:02,  7.89s/it][Succeeded / Failed / Skipped / Total] 40 / 91 / 2 / 133:  13%|█▎        | 133/1000 [17:29<1:54:02,  7.89s/it][Succeeded / Failed / Skipped / Total] 40 / 91 / 2 / 133:  13%|█▎        | 134/1000 [17:35<1:53:43,  7.88s/it][Succeeded / Failed / Skipped / Total] 40 / 92 / 2 / 134:  13%|█▎        | 134/1000 [17:35<1:53:43,  7.88s/it][Succeeded / Failed / Skipped / Total] 40 / 92 / 2 / 134:  14%|█▎        | 135/1000 [17:43<1:53:33,  7.88s/it]Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest request , final HttpServletResponse response ) { boolean result = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
Check if the given authentication is authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[publicand]] ( ) { Authentication [[verify]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[verify]] != null && [[verify]] . isAuthenticated ( ) && ! ( [[verify]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
Check if ticket is enabled --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "[[empty]]" != "[[empty]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Encode a string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private String utf8UrlEncode ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Gets the JVM . --> Creates a MoMBean --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[createjckkat]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 132 ---------------------------------------------
Create a SecurityMethod . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[formsrecretoverpliationproet]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 133 ---------------------------------------------
Returns true if the request was processed . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[condition]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[condition]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 134 ---------------------------------------------
Load authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[downloadverborxrtaod]] ( final Assertion [[statement]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[statement]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 135 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 93 / 2 / 135:  14%|█▎        | 135/1000 [17:43<1:53:33,  7.88s/it][Succeeded / Failed / Skipped / Total] 40 / 93 / 2 / 135:  14%|█▎        | 136/1000 [17:55<1:53:52,  7.91s/it][Succeeded / Failed / Skipped / Total] 40 / 94 / 2 / 136:  14%|█▎        | 136/1000 [17:55<1:53:52,  7.91s/it][Succeeded / Failed / Skipped / Total] 40 / 94 / 2 / 136:  14%|█▎        | 137/1000 [18:09<1:54:21,  7.95s/it][Succeeded / Failed / Skipped / Total] 41 / 94 / 2 / 137:  14%|█▎        | 137/1000 [18:09<1:54:21,  7.95s/it][Succeeded / Failed / Skipped / Total] 41 / 94 / 2 / 137:  14%|█▍        | 138/1000 [18:40<1:56:40,  8.12s/it][Succeeded / Failed / Skipped / Total] 41 / 95 / 2 / 138:  14%|█▍        | 138/1000 [18:40<1:56:40,  8.12s/it][Succeeded / Failed / Skipped / Total] 41 / 95 / 2 / 138:  14%|█▍        | 139/1000 [18:49<1:56:39,  8.13s/it][Succeeded / Failed / Skipped / Total] 41 / 96 / 2 / 139:  14%|█▍        | 139/1000 [18:49<1:56:39,  8.13s/it][Succeeded / Failed / Skipped / Total] 41 / 96 / 2 / 139:  14%|█▍        | 140/1000 [18:52<1:55:58,  8.09s/it][Succeeded / Failed / Skipped / Total] 41 / 97 / 2 / 140:  14%|█▍        | 140/1000 [18:52<1:55:58,  8.09s/it][Succeeded / Failed / Skipped / Total] 41 / 97 / 2 / 140:  14%|█▍        | 141/1000 [18:57<1:55:31,  8.07s/it][Succeeded / Failed / Skipped / Total] 41 / 98 / 2 / 141:  14%|█▍        | 141/1000 [18:57<1:55:31,  8.07s/it][Succeeded / Failed / Skipped / Total] 41 / 98 / 2 / 141:  14%|█▍        | 142/1000 [19:13<1:56:09,  8.12s/it]Get principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[havetrepertiycate11ickaval]] ( HttpServletRequest httpRequest ) { Object [[product]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[product]] ) ; } return [[product]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 136 ---------------------------------------------
Returns the user s Grovy . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[sherbiprellasssaearredkalesauxogaves]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[familyfus]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[familyfus]] ) ; } return [[familyfus]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
Build the map of map . --> Get authority authority . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[author]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[author]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[author]] . getKey ( ) , getGrantedAuthorityCollection ( [[author]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 138 ---------------------------------------------
Returns a list of greements . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[canvas]] ) { ArrayList < GrantedAuthority > [[andisman]] = new ArrayList <> ( ) ; for ( String attribute : [[canvas]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[andisman]] . addAll ( c ) ; } } [[andisman]] . trimToSize ( ) ; return [[andisman]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 139 ---------------------------------------------
Returns an unmodifiable byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] [[subarray]] = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , [[subarray]] , 0 , [[length]] ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[baseorrai]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[breadth]] = endIndex - beginIndex ; byte [ ] [[fanarsran]] = new byte [ [[breadth]] ] ; System . arraycopy ( array , beginIndex , [[fanarsran]] , 0 , [[breadth]] ) ; return [[fanarsran]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 140 ---------------------------------------------
Gets the value of the given condition . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[gotgrantdedutororkcsulsion]] ( Object [[code]] ) { Collection < GrantedAuthority > [[function]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[function]] , [[code]] ) ; return [[function]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 141 ---------------------------------------------
Concatenates two byte arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[netsqnot]] ( byte [ ] ... [[files]] ) { int length = 0 ; for ( byte [ ] array : [[files]] ) { length += array . length ; } byte [ ] [[wordherᵢ]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[files]] ) { System . arraycopy ( array , 0 , [[wordherᵢ]] , destPos , array . length ) ; destPos += array . length ; } return [[wordherᵢ]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 99 / 2 / 142:  14%|█▍        | 142/1000 [19:13<1:56:09,  8.12s/it][Succeeded / Failed / Skipped / Total] 41 / 99 / 2 / 142:  14%|█▍        | 143/1000 [19:21<1:56:01,  8.12s/it][Succeeded / Failed / Skipped / Total] 41 / 100 / 2 / 143:  14%|█▍        | 143/1000 [19:21<1:56:01,  8.12s/it][Succeeded / Failed / Skipped / Total] 41 / 100 / 2 / 143:  14%|█▍        | 144/1000 [19:21<1:55:06,  8.07s/it][Succeeded / Failed / Skipped / Total] 41 / 101 / 2 / 144:  14%|█▍        | 144/1000 [19:21<1:55:06,  8.07s/it][Succeeded / Failed / Skipped / Total] 41 / 101 / 2 / 144:  14%|█▍        | 145/1000 [19:30<1:55:04,  8.07s/it][Succeeded / Failed / Skipped / Total] 42 / 101 / 2 / 145:  14%|█▍        | 145/1000 [19:30<1:55:04,  8.07s/it][Succeeded / Failed / Skipped / Total] 42 / 101 / 2 / 145:  15%|█▍        | 146/1000 [19:51<1:56:09,  8.16s/it][Succeeded / Failed / Skipped / Total] 42 / 102 / 2 / 146:  15%|█▍        | 146/1000 [19:51<1:56:09,  8.16s/it][Succeeded / Failed / Skipped / Total] 42 / 102 / 2 / 146:  15%|█▍        | 147/1000 [19:55<1:55:36,  8.13s/it][Succeeded / Failed / Skipped / Total] 42 / 103 / 2 / 147:  15%|█▍        | 147/1000 [19:55<1:55:36,  8.13s/it][Succeeded / Failed / Skipped / Total] 42 / 103 / 2 / 147:  15%|█▍        | 148/1000 [19:59<1:55:05,  8.10s/it]Gets the shared type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[system]] > [[system]] getSharedObject ( Class < [[system]] > sharedType ) { return ( [[system]] ) this . [[distributedarlding]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Get principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 144 ---------------------------------------------
Adds the given value to the given collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[top]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[top]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[top]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { addGrantedAuthorityCollection ( [[top]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[top]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 145 ---------------------------------------------
Advances a invocation . --> Does a token --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[adviserssurlinkhed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[adviserssurlinkhed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Build the URL for the given port . --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest request ) throws IOException , ServletException { int [[spidermount]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[spidermount]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 147 ---------------------------------------------
Returns true if the given role is a role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[asmalea]] ( String [[series]] ) { Assert . isTrue ( ! [[series]] . startsWith ( "ROLE_" ) , ( ) -> [[series]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[series]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 104 / 2 / 148:  15%|█▍        | 148/1000 [19:59<1:55:05,  8.10s/it][Succeeded / Failed / Skipped / Total] 42 / 104 / 2 / 148:  15%|█▍        | 149/1000 [20:14<1:55:34,  8.15s/it][Succeeded / Failed / Skipped / Total] 43 / 104 / 2 / 149:  15%|█▍        | 149/1000 [20:14<1:55:34,  8.15s/it][Succeeded / Failed / Skipped / Total] 43 / 104 / 2 / 149:  15%|█▌        | 150/1000 [20:14<1:54:42,  8.10s/it][Succeeded / Failed / Skipped / Total] 43 / 105 / 2 / 150:  15%|█▌        | 150/1000 [20:14<1:54:42,  8.10s/it][Succeeded / Failed / Skipped / Total] 43 / 105 / 2 / 150:  15%|█▌        | 151/1000 [20:23<1:54:39,  8.10s/it][Succeeded / Failed / Skipped / Total] 44 / 105 / 2 / 151:  15%|█▌        | 151/1000 [20:23<1:54:39,  8.10s/it][Succeeded / Failed / Skipped / Total] 44 / 105 / 2 / 151:  15%|█▌        | 152/1000 [20:23<1:53:47,  8.05s/it][Succeeded / Failed / Skipped / Total] 44 / 105 / 3 / 152:  15%|█▌        | 152/1000 [20:23<1:53:47,  8.05s/it][Succeeded / Failed / Skipped / Total] 44 / 105 / 3 / 152:  15%|█▌        | 153/1000 [20:41<1:54:35,  8.12s/it][Succeeded / Failed / Skipped / Total] 44 / 106 / 3 / 153:  15%|█▌        | 153/1000 [20:41<1:54:35,  8.12s/it][Succeeded / Failed / Skipped / Total] 44 / 106 / 3 / 153:  15%|█▌        | 154/1000 [20:45<1:54:04,  8.09s/it][Succeeded / Failed / Skipped / Total] 45 / 106 / 3 / 154:  15%|█▌        | 154/1000 [20:45<1:54:04,  8.09s/it][Succeeded / Failed / Skipped / Total] 45 / 106 / 3 / 154:  16%|█▌        | 155/1000 [20:46<1:53:17,  8.04s/it][Succeeded / Failed / Skipped / Total] 45 / 107 / 3 / 155:  16%|█▌        | 155/1000 [20:46<1:53:17,  8.04s/it][Succeeded / Failed / Skipped / Total] 45 / 107 / 3 / 155:  16%|█▌        | 156/1000 [20:47<1:52:27,  8.00s/it]Returns the roles for the given roles . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[finyroli]] ( String ... [[advantages]] ) { for ( int i = 0 ; i < [[advantages]] . length ; i ++ ) { [[advantages]] [ i ] = "ROLE_" + [[advantages]] [ i ] ; } return [[advantages]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Adds a new user . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[requests]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken [[georikena]] = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[georikena]] ) ; addCookie ( [[georikena]] , [[requests]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 150 ---------------------------------------------
Indicates the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[atorqdateur]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Adapts a login . --> Get a View --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[adeprimolev]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Verifies that a web is a web . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Sets the redirect URL . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[recordresputwrreelo]] ( String [[importuniutlan]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[importuniutlan]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[importuniutlan]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Parse a JWT --> Construct a new JWTWT --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[createdJwt]] = createJwt ( token , jwt ) ; return validateJwt ( [[createdJwt]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[rades]] ( String token ) throws JwtException { JWT jwt = parse ( token ) ; if ( jwt instanceof SignedJWT ) { Jwt [[inspiredجws]] = createJwt ( token , jwt ) ; return validateJwt ( [[inspiredجws]] ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 155 ---------------------------------------------
Processes the token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[resourcecantheglconjoachier]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
[Succeeded / Failed / Skipped / Total] 45 / 107 / 4 / 156:  16%|█▌        | 156/1000 [20:47<1:52:27,  8.00s/it][Succeeded / Failed / Skipped / Total] 45 / 107 / 4 / 156:  16%|█▌        | 157/1000 [21:01<1:52:51,  8.03s/it][Succeeded / Failed / Skipped / Total] 46 / 107 / 4 / 157:  16%|█▌        | 157/1000 [21:01<1:52:51,  8.03s/it][Succeeded / Failed / Skipped / Total] 46 / 107 / 4 / 157:  16%|█▌        | 158/1000 [21:19<1:53:38,  8.10s/it][Succeeded / Failed / Skipped / Total] 46 / 108 / 4 / 158:  16%|█▌        | 158/1000 [21:19<1:53:38,  8.10s/it][Succeeded / Failed / Skipped / Total] 46 / 108 / 4 / 158:  16%|█▌        | 159/1000 [21:20<1:52:54,  8.06s/it][Succeeded / Failed / Skipped / Total] 46 / 109 / 4 / 159:  16%|█▌        | 159/1000 [21:20<1:52:54,  8.06s/it][Succeeded / Failed / Skipped / Total] 46 / 109 / 4 / 159:  16%|█▌        | 160/1000 [21:28<1:52:42,  8.05s/it][Succeeded / Failed / Skipped / Total] 47 / 109 / 4 / 160:  16%|█▌        | 160/1000 [21:28<1:52:42,  8.05s/it][Succeeded / Failed / Skipped / Total] 47 / 109 / 4 / 160:  16%|█▌        | 161/1000 [21:36<1:52:38,  8.05s/it][Succeeded / Failed / Skipped / Total] 47 / 110 / 4 / 161:  16%|█▌        | 161/1000 [21:36<1:52:38,  8.05s/it][Succeeded / Failed / Skipped / Total] 47 / 110 / 4 / 161:  16%|█▌        | 162/1000 [21:55<1:53:27,  8.12s/it]--------------------------------------------- Result 156 ---------------------------------------------
Returns a map of authority accounts . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Generates a token . --> Handle request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[basekatken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
Checks if a user exists . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[startgehowsurwrult]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[reigen]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[reigen]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
Return the expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[authorapexstaxetsemitception]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[halt]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[halt]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[halt]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 160 ---------------------------------------------
Make a contact . --> region Method --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , [[contact]] ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int [[connectionplane]] ) { Contact [[meet]] = contactManager . getById ( Long . valueOf ( [[connectionplane]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[meet]] ) ) ; Map < String , Object > [[description]] = new HashMap <> ( ) ; [[description]] . put ( "contact" , [[meet]] ) ; [[description]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[description]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 161 ---------------------------------------------
Loads the user from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[targetUserRequest]] ; String [[username]] = request . getParameter ( this . usernameParameter ) ; if ( [[username]] == null ) { [[username]] = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + [[username]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[username]] ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken [[amesenexvr]] ; String [[studenttime]] = request . getParameter ( this . usernameParameter ) ; if ( [[studenttime]] == null ) { [[studenttime]] = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + [[studenttime]] + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( [[studenttime]] ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 162 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 111 / 4 / 162:  16%|█▌        | 162/1000 [21:55<1:53:27,  8.12s/it][Succeeded / Failed / Skipped / Total] 47 / 111 / 4 / 162:  16%|█▋        | 163/1000 [21:59<1:52:54,  8.09s/it][Succeeded / Failed / Skipped / Total] 48 / 111 / 4 / 163:  16%|█▋        | 163/1000 [21:59<1:52:54,  8.09s/it][Succeeded / Failed / Skipped / Total] 48 / 111 / 4 / 163:  16%|█▋        | 164/1000 [21:59<1:52:08,  8.05s/it][Succeeded / Failed / Skipped / Total] 48 / 112 / 4 / 164:  16%|█▋        | 164/1000 [21:59<1:52:08,  8.05s/it][Succeeded / Failed / Skipped / Total] 48 / 112 / 4 / 164:  16%|█▋        | 165/1000 [22:08<1:52:03,  8.05s/it][Succeeded / Failed / Skipped / Total] 49 / 112 / 4 / 165:  16%|█▋        | 165/1000 [22:08<1:52:03,  8.05s/it][Succeeded / Failed / Skipped / Total] 49 / 112 / 4 / 165:  17%|█▋        | 166/1000 [22:15<1:51:49,  8.05s/it][Succeeded / Failed / Skipped / Total] 49 / 113 / 4 / 166:  17%|█▋        | 166/1000 [22:15<1:51:49,  8.05s/it][Succeeded / Failed / Skipped / Total] 49 / 113 / 4 / 166:  17%|█▋        | 167/1000 [22:23<1:51:43,  8.05s/it][Succeeded / Failed / Skipped / Total] 50 / 113 / 4 / 167:  17%|█▋        | 167/1000 [22:23<1:51:43,  8.05s/it][Succeeded / Failed / Skipped / Total] 50 / 113 / 4 / 167:  17%|█▋        | 168/1000 [22:29<1:51:21,  8.03s/it]Add a Permission to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult [[result]] , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[havefermit]] ( AddPermission addPermission , BindingResult [[form]] , ModelMap [[ii]] ) { addPermissionValidator . validate ( [[havefermit]] , [[form]] ) ; if ( [[form]] . hasErrors ( ) ) { [[ii]] . put ( "recipients" , listRecipients ( ) ) ; [[ii]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[havefermit]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[havefermit]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[havefermit]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[form]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[ii]] . put ( "recipients" , listRecipients ( ) ) ; [[ii]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 163 ---------------------------------------------
Delete a permission . --> Delete permissions . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long [[contactId]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[contactId]] ) ; Sid [[sidObject]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[sidObject]] , permission ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "sid" , [[sidObject]] ) ; [[model]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long [[reachding]] , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( [[reachding]] ) ; Sid [[rhysprod]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[rhysprod]] , permission ) ; Map < String , Object > [[ground]] = new HashMap <> ( ) ; [[ground]] . put ( "contact" , contact ) ; [[ground]] . put ( "sid" , [[rhysprod]] ) ; [[ground]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[ground]] ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Add a new permissions to the permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , [[addPermission]] ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[additionalfermission]] = new AddPermission ( ) ; [[additionalfermission]] . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , [[additionalfermission]] ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 165 ---------------------------------------------
Gets the value of the attribute . --> Get attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( name ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String name ) { List < String > [[outcome]] = null ; if ( attributes != null ) { [[outcome]] = attributes . get ( name ) ; } if ( [[outcome]] == null ) { [[outcome]] = Collections . emptyList ( ) ; } return [[outcome]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 166 ---------------------------------------------
Construct a resource from a resource --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource [[resource]] = new InMemoryResource ( users ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromptrand]] ( String users ) { InMemoryResource [[parameter]] = new InMemoryResource ( users ) ; return fromResource ( [[parameter]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 167 ---------------------------------------------
Gets the value of the first . --> Revoked string . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[winartherappdifeceviegle]] ( String [[designation]] ) { List < String > [[end]] = getAttributeValues ( [[designation]] ) ; if ( [[end]] . isEmpty ( ) ) { return null ; } else { return [[end]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
[Succeeded / Failed / Skipped / Total] 50 / 114 / 4 / 168:  17%|█▋        | 168/1000 [22:29<1:51:21,  8.03s/it][Succeeded / Failed / Skipped / Total] 50 / 114 / 4 / 168:  17%|█▋        | 169/1000 [22:30<1:50:41,  7.99s/it][Succeeded / Failed / Skipped / Total] 50 / 115 / 4 / 169:  17%|█▋        | 169/1000 [22:30<1:50:41,  7.99s/it][Succeeded / Failed / Skipped / Total] 50 / 115 / 4 / 169:  17%|█▋        | 170/1000 [22:47<1:51:17,  8.04s/it][Succeeded / Failed / Skipped / Total] 50 / 116 / 4 / 170:  17%|█▋        | 170/1000 [22:47<1:51:17,  8.04s/it][Succeeded / Failed / Skipped / Total] 50 / 116 / 4 / 170:  17%|█▋        | 171/1000 [22:53<1:50:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 50 / 117 / 4 / 171:  17%|█▋        | 171/1000 [22:53<1:50:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 50 / 117 / 4 / 171:  17%|█▋        | 172/1000 [22:57<1:50:31,  8.01s/it][Succeeded / Failed / Skipped / Total] 50 / 118 / 4 / 172:  17%|█▋        | 172/1000 [22:57<1:50:31,  8.01s/it][Succeeded / Failed / Skipped / Total] 50 / 118 / 4 / 172:  17%|█▋        | 173/1000 [23:07<1:50:32,  8.02s/it][Succeeded / Failed / Skipped / Total] 51 / 118 / 4 / 173:  17%|█▋        | 173/1000 [23:07<1:50:32,  8.02s/it][Succeeded / Failed / Skipped / Total] 51 / 118 / 4 / 173:  17%|█▋        | 174/1000 [23:14<1:50:19,  8.01s/it][Succeeded / Failed / Skipped / Total] 52 / 118 / 4 / 174:  17%|█▋        | 174/1000 [23:14<1:50:19,  8.01s/it][Succeeded / Failed / Skipped / Total] 52 / 118 / 4 / 174:  18%|█▊        | 175/1000 [23:29<1:50:45,  8.05s/it]--------------------------------------------- Result 168 ---------------------------------------------
Returns the roles for the given prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[mountrpapryferlk]] , String role ) { if ( role == null ) { return role ; } if ( [[mountrpapryferlk]] == null || [[mountrpapryferlk]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[mountrpapryferlk]] ) ) { return role ; } return [[mountrpapryferlk]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 169 ---------------------------------------------
Decode Base64 encoded string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[kaize]] ( byte [ ] [[bands]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bands]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 170 ---------------------------------------------
Encodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence string ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] [[derscusfi]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[derscusfi]] , 0 , bytes . limit ( ) ) ; return [[derscusfi]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 171 ---------------------------------------------
Helper method to create a new request . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[askentyther]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Finds the target class for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[approach]] , Class < ? > [[purposeragan]] ) { if ( [[purposeragan]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[approach]] , [[purposeragan]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Returns all the attributes contained in the attributes . --> Returns a list of all setsatisfies --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[elsatataqes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[elsatataqes]] . addAll ( attributeList ) ; } return [[elsatataqes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a configuration . --> Called by the reflection --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod method , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( method , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[adsorydayhowrd]] ( RegisteredMethod method , List < ConfigAttribute > [[outtro]] ) { Assert . notNull ( method , "RegisteredMethod required" ) ; Assert . notNull ( [[outtro]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + method + "] with attributes [" + [[outtro]] + "]" ) ; } this . [[objectimar]] . put ( method , [[outtro]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 118 / 4 / 175:  18%|█▊        | 175/1000 [23:29<1:50:45,  8.05s/it][Succeeded / Failed / Skipped / Total] 53 / 118 / 4 / 175:  18%|█▊        | 176/1000 [23:31<1:50:09,  8.02s/it][Succeeded / Failed / Skipped / Total] 54 / 118 / 4 / 176:  18%|█▊        | 176/1000 [23:31<1:50:09,  8.02s/it][Succeeded / Failed / Skipped / Total] 54 / 118 / 4 / 176:  18%|█▊        | 177/1000 [23:46<1:50:33,  8.06s/it][Succeeded / Failed / Skipped / Total] 54 / 119 / 4 / 177:  18%|█▊        | 177/1000 [23:46<1:50:33,  8.06s/it][Succeeded / Failed / Skipped / Total] 54 / 119 / 4 / 177:  18%|█▊        | 178/1000 [23:53<1:50:20,  8.05s/it][Succeeded / Failed / Skipped / Total] 54 / 120 / 4 / 178:  18%|█▊        | 178/1000 [23:53<1:50:20,  8.05s/it][Succeeded / Failed / Skipped / Total] 54 / 120 / 4 / 178:  18%|█▊        | 179/1000 [24:02<1:50:17,  8.06s/it][Succeeded / Failed / Skipped / Total] 55 / 120 / 4 / 179:  18%|█▊        | 179/1000 [24:02<1:50:17,  8.06s/it][Succeeded / Failed / Skipped / Total] 55 / 120 / 4 / 179:  18%|█▊        | 180/1000 [24:12<1:50:17,  8.07s/it][Succeeded / Failed / Skipped / Total] 56 / 120 / 4 / 180:  18%|█▊        | 180/1000 [24:12<1:50:17,  8.07s/it][Succeeded / Failed / Skipped / Total] 56 / 120 / 4 / 180:  18%|█▊        | 181/1000 [24:15<1:49:43,  8.04s/it][Succeeded / Failed / Skipped / Total] 56 / 121 / 4 / 181:  18%|█▊        | 181/1000 [24:15<1:49:43,  8.04s/it][Succeeded / Failed / Skipped / Total] 56 / 121 / 4 / 181:  18%|█▊        | 182/1000 [24:23<1:49:35,  8.04s/it]Unbinds a bindable . -->  --> Socre: 0.9999999999745633

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[utni]] , String [[createi]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[utni]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 176 ---------------------------------------------
Returns true if the given string is a valid name . --> Hashes a command --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[classatid]] ( String [[devicevey]] , String [[sunkencommand]] ) { return ( [[sunkencommand]] . endsWith ( "*" ) && [[devicevey]] . startsWith ( [[sunkencommand]] . substring ( 0 , [[sunkencommand]] . length ( ) - 1 ) ) ) || ( [[sunkencommand]] . startsWith ( "*" ) && [[devicevey]] . endsWith ( [[sunkencommand]] . substring ( 1 , [[sunkencommand]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 177 ---------------------------------------------
Builds a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[annotations]] = parameterAnnotations [ i ] ; String parameterName = findParameterName ( [[annotations]] ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] [[buttitaits]] = parameterAnnotations [ i ] ; String parameterName = findParameterName ( [[buttitaits]] ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 178 ---------------------------------------------
Clear the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[https]] = request . getSession ( "False" != "False" ) ; if ( [[https]] == null ) { return ; } [[https]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 179 ---------------------------------------------
Specifies whether or not the given request . --> Sets the number of greatest codes --> Socre: 1.0

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anythingexganposterfouidable]] , "Can't configure anyRequest after itself" ) ; C [[realgreocationier]] = requestMatchers ( ANY_REQUEST ) ; this . [[anythingexganposterfouidable]] = "[[proven]]" == "[[proven]]" ; return [[realgreocationier]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 180 ---------------------------------------------
Returns the field of the given field . --> Get a term from a line --> Socre: 1.0

[[[[Adv]]]]: public static Field getField ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > [[cadasser]] , String [[lineterm]] ) throws IllegalStateException { Assert . notNull ( [[cadasser]] , "Class required" ) ; Assert . hasText ( [[lineterm]] , "Field name required" ) ; try { return [[cadasser]] . getDeclaredField ( [[lineterm]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 181 ---------------------------------------------
Returns the current contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int [[getNumber]] = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( [[getNumber]] ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[acquaintances]] = contactDao . findAll ( ) ; int [[findridebor]] = rnd . nextInt ( [[acquaintances]] . size ( ) ) ; return [[acquaintances]] . get ( [[findridebor]] ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 182 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 121 / 4 / 182:  18%|█▊        | 182/1000 [24:23<1:49:35,  8.04s/it][Succeeded / Failed / Skipped / Total] 57 / 121 / 4 / 182:  18%|█▊        | 183/1000 [24:28<1:49:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 57 / 122 / 4 / 183:  18%|█▊        | 183/1000 [24:28<1:49:15,  8.02s/it][Succeeded / Failed / Skipped / Total] 57 / 122 / 4 / 183:  18%|█▊        | 184/1000 [24:35<1:49:03,  8.02s/it][Succeeded / Failed / Skipped / Total] 58 / 122 / 4 / 184:  18%|█▊        | 184/1000 [24:35<1:49:03,  8.02s/it][Succeeded / Failed / Skipped / Total] 58 / 122 / 4 / 184:  18%|█▊        | 185/1000 [24:45<1:49:02,  8.03s/it][Succeeded / Failed / Skipped / Total] 58 / 123 / 4 / 185:  18%|█▊        | 185/1000 [24:45<1:49:02,  8.03s/it][Succeeded / Failed / Skipped / Total] 58 / 123 / 4 / 185:  19%|█▊        | 186/1000 [24:54<1:48:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 58 / 124 / 4 / 186:  19%|█▊        | 186/1000 [24:54<1:48:59,  8.03s/it][Succeeded / Failed / Skipped / Total] 58 / 124 / 4 / 186:  19%|█▊        | 187/1000 [24:55<1:48:23,  8.00s/it][Succeeded / Failed / Skipped / Total] 58 / 125 / 4 / 187:  19%|█▊        | 187/1000 [24:55<1:48:23,  8.00s/it][Succeeded / Failed / Skipped / Total] 58 / 125 / 4 / 187:  19%|█▉        | 188/1000 [25:28<1:50:01,  8.13s/it][Succeeded / Failed / Skipped / Total] 58 / 126 / 4 / 188:  19%|█▉        | 188/1000 [25:28<1:50:01,  8.13s/it][Succeeded / Failed / Skipped / Total] 58 / 126 / 4 / 188:  19%|█▉        | 189/1000 [25:35<1:49:49,  8.13s/it]Creates a new URL . --> Create a password --> Socre: 1.0

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[serviceProperties]] . getServiceParameter ( ) , [[serviceUrl]] , this . [[serviceProperties]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String [[staffrgl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . [[putprfitz]] . getServiceParameter ( ) , [[staffrgl]] , this . [[putprfitz]] . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Creates a new resource . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[creationselvcرd]] ( final HttpServletRequest [[invitation]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Check the given filters . --> Asserts that a given policy . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[deserve]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[deserve]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[deserve]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[deserve]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[deserve]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[deserve]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[deserve]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[deserve]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[deserve]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 185 ---------------------------------------------
Send a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[petition]] , HttpServletResponse [[event]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[event]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 186 ---------------------------------------------
Returns a list of exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[andveregedtypet]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[jectentlaft]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
Extract a string from a string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[2ndbroty]] = encPass . lastIndexOf ( ' ' ) ; if ( [[2ndbroty]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[2ndbroty]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 188 ---------------------------------------------
Get a list of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[accesstorxlti]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 189 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 126 / 4 / 189:  19%|█▉        | 189/1000 [25:35<1:49:49,  8.13s/it][Succeeded / Failed / Skipped / Total] 59 / 126 / 4 / 189:  19%|█▉        | 190/1000 [25:44<1:49:44,  8.13s/it][Succeeded / Failed / Skipped / Total] 59 / 127 / 4 / 190:  19%|█▉        | 190/1000 [25:44<1:49:44,  8.13s/it][Succeeded / Failed / Skipped / Total] 60 / 127 / 4 / 191:  19%|█▉        | 191/1000 [25:44<1:49:02,  8.09s/it][Succeeded / Failed / Skipped / Total] 60 / 127 / 4 / 191:  19%|█▉        | 192/1000 [25:51<1:48:47,  8.08s/it][Succeeded / Failed / Skipped / Total] 61 / 127 / 4 / 192:  19%|█▉        | 192/1000 [25:51<1:48:47,  8.08s/it][Succeeded / Failed / Skipped / Total] 62 / 127 / 4 / 193:  19%|█▉        | 193/1000 [26:09<1:49:20,  8.13s/it][Succeeded / Failed / Skipped / Total] 62 / 127 / 4 / 193:  19%|█▉        | 194/1000 [26:13<1:48:55,  8.11s/it][Succeeded / Failed / Skipped / Total] 62 / 128 / 4 / 194:  19%|█▉        | 194/1000 [26:13<1:48:55,  8.11s/it][Succeeded / Failed / Skipped / Total] 62 / 128 / 4 / 194:  20%|█▉        | 195/1000 [26:18<1:48:37,  8.10s/it]Register a bean definition . --> Method to initialize a bean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[expressionVoter]] ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[expressionVoter]] != null ) { voters . add ( [[expressionVoter]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[raidlikegreserance]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition [[evolutionlavra]] ) { BeanDefinitionBuilder [[assaultogrgeiray]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( [[evolutionlavra]] != null ) { voters . add ( [[evolutionlavra]] ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[assaultogrgeiray]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[assaultogrgeiray]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 190 ---------------------------------------------
Extracts the extractorable extractor . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[extractor]] = entry . getValue ( ) ; return [[extractor]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[abundancecasck]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[blastivertest]] = entry . getKey ( ) ; if ( [[blastivertest]] . isInstance ( throwable ) ) { ThrowableCauseExtractor [[alienability]] = entry . getValue ( ) ; return [[alienability]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 191 ---------------------------------------------
Returns true if the given string contains a valid byte array . --> Return true if this sequence is a byte array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] [[expected]] , byte [ ] actual ) { if ( [[expected]] . length != actual . length ) { return "False" != "False" ; } int [[result]] = 0 ; for ( int i = 0 ; i < [[expected]] . length ; i ++ ) { [[result]] |= [[expected]] [ i ] ^ actual [ i ] ; } return [[result]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] [[outside]] , byte [ ] actual ) { if ( [[outside]] . length != actual . length ) { return "False" != "False" ; } int [[benefit]] = 0 ; for ( int i = 0 ; i < [[outside]] . length ; i ++ ) { [[benefit]] |= [[outside]] [ i ] ^ actual [ i ] ; } return [[benefit]] == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 192 ---------------------------------------------
Sets the default redirect url . --> Registers a &lt ; &gt ; --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[gotgoxurecamuseurol]] ( String [[defaultiffulreturnorer]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultiffulreturnorer]] ) , ( ) -> "'" + [[defaultiffulreturnorer]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultiffulreturnorer]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 193 ---------------------------------------------
Build a request URL --> Build a servlet --> Socre: 1.0

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String [[requestURI]] , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( [[requestURI]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String [[asktori]] , String contextPath , String pathInfo , String queryString ) { StringBuilder [[carole]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[carole]] . append ( servletPath ) ; if ( pathInfo != null ) { [[carole]] . append ( pathInfo ) ; } } else { [[carole]] . append ( [[asktori]] . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[carole]] . append ( "?" ) . append ( queryString ) ; } return [[carole]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 194 ---------------------------------------------
Returns a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[namesecid]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[namesecid]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
[Succeeded / Failed / Skipped / Total] 62 / 129 / 4 / 195:  20%|█▉        | 195/1000 [26:18<1:48:37,  8.10s/it][Succeeded / Failed / Skipped / Total] 62 / 129 / 4 / 195:  20%|█▉        | 196/1000 [26:43<1:49:36,  8.18s/it][Succeeded / Failed / Skipped / Total] 62 / 130 / 4 / 196:  20%|█▉        | 196/1000 [26:43<1:49:36,  8.18s/it][Succeeded / Failed / Skipped / Total] 62 / 130 / 4 / 196:  20%|█▉        | 197/1000 [26:51<1:49:30,  8.18s/it][Succeeded / Failed / Skipped / Total] 63 / 130 / 4 / 197:  20%|█▉        | 197/1000 [26:51<1:49:30,  8.18s/it][Succeeded / Failed / Skipped / Total] 63 / 130 / 4 / 197:  20%|█▉        | 198/1000 [26:56<1:49:06,  8.16s/it][Succeeded / Failed / Skipped / Total] 63 / 131 / 4 / 198:  20%|█▉        | 198/1000 [26:56<1:49:06,  8.16s/it][Succeeded / Failed / Skipped / Total] 63 / 131 / 4 / 198:  20%|█▉        | 199/1000 [26:58<1:48:33,  8.13s/it][Succeeded / Failed / Skipped / Total] 64 / 131 / 4 / 199:  20%|█▉        | 199/1000 [26:58<1:48:33,  8.13s/it][Succeeded / Failed / Skipped / Total] 64 / 131 / 4 / 199:  20%|██        | 200/1000 [26:58<1:47:54,  8.09s/it]--------------------------------------------- Result 195 ---------------------------------------------
Returns true if the given URL matches the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[pryillautarmal]] ( String [[kule]] ) { if ( [[kule]] == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[kule]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 196 ---------------------------------------------
Resolves the placeholders . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[closerupordateisderenpti]] ( Function < HttpServletRequest , Map < String , String > > [[answerisionenapsl]] ) { Assert . notNull ( [[answerisionenapsl]] , "resolveHiddenInputs cannot be null" ) ; this . [[diluddareenbats]] = [[answerisionenapsl]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 197 ---------------------------------------------
Converts an ID to a string . --> Sends a message to a peer --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[icintieu200omi]] ( Serializable [[assignedvirtualtoken]] , ResultSet [[emotionsend]] ) throws SQLException { if ( isString ( [[assignedvirtualtoken]] ) && hasValidClassIdType ( [[emotionsend]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[emotionsend]] ) ) ) { [[assignedvirtualtoken]] = convertFromStringTo ( ( String ) [[assignedvirtualtoken]] , classIdTypeFrom ( [[emotionsend]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 198 ---------------------------------------------
Inserts batch . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 199 ---------------------------------------------
Updates the given object . --> Update a key --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[parentId]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long [[popruler]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[popruler]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[popruler]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
[Succeeded / Failed / Skipped / Total] 64 / 131 / 5 / 200:  20%|██        | 200/1000 [26:58<1:47:54,  8.09s/it][Succeeded / Failed / Skipped / Total] 64 / 131 / 5 / 200:  20%|██        | 201/1000 [26:59<1:47:18,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 132 / 5 / 201:  20%|██        | 201/1000 [26:59<1:47:18,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 132 / 5 / 201:  20%|██        | 202/1000 [27:19<1:47:55,  8.12s/it][Succeeded / Failed / Skipped / Total] 64 / 133 / 5 / 202:  20%|██        | 202/1000 [27:19<1:47:55,  8.12s/it][Succeeded / Failed / Skipped / Total] 64 / 133 / 5 / 202:  20%|██        | 203/1000 [27:22<1:47:30,  8.09s/it][Succeeded / Failed / Skipped / Total] 64 / 134 / 5 / 203:  20%|██        | 203/1000 [27:22<1:47:30,  8.09s/it][Succeeded / Failed / Skipped / Total] 64 / 134 / 5 / 203:  20%|██        | 204/1000 [27:35<1:47:37,  8.11s/it][Succeeded / Failed / Skipped / Total] 64 / 135 / 5 / 204:  20%|██        | 204/1000 [27:35<1:47:37,  8.11s/it][Succeeded / Failed / Skipped / Total] 64 / 135 / 5 / 204:  20%|██        | 205/1000 [27:35<1:46:58,  8.07s/it][Succeeded / Failed / Skipped / Total] 64 / 135 / 6 / 205:  20%|██        | 205/1000 [27:35<1:46:58,  8.07s/it][Succeeded / Failed / Skipped / Total] 64 / 135 / 6 / 205:  21%|██        | 206/1000 [27:40<1:46:40,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 136 / 6 / 206:  21%|██        | 206/1000 [27:40<1:46:40,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 136 / 6 / 206:  21%|██        | 207/1000 [27:54<1:46:53,  8.09s/it][Succeeded / Failed / Skipped / Total] 64 / 137 / 6 / 207:  21%|██        | 207/1000 [27:54<1:46:53,  8.09s/it][Succeeded / Failed / Skipped / Total] 64 / 137 / 6 / 207:  21%|██        | 208/1000 [27:56<1:46:23,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 138 / 6 / 208:  21%|██        | 208/1000 [27:56<1:46:23,  8.06s/it][Succeeded / Failed / Skipped / Total] 64 / 138 / 6 / 208:  21%|██        | 209/1000 [28:02<1:46:06,  8.05s/it]--------------------------------------------- Result 200 ---------------------------------------------
Suspends the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Create a ObjectManager . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[startcaricedcitz]] ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 202 ---------------------------------------------
Encrypt password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Encrypt a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[clcor]] ( CharSequence password , CharSequence [[save]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[save]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Create a new server . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[method]] , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[array]] , String ... patterns ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[array]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 205 ---------------------------------------------
Perform an HTTP POST request . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return determineTargetUrl ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 206 ---------------------------------------------
Encrypts a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[accessantstream]] ( CharSequence [[gauge]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[gauge]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Gets the default URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[vargrnatgult]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 208 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[portesgis]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[geteeft]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 209 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 138 / 6 / 209:  21%|██        | 209/1000 [28:02<1:46:06,  8.05s/it][Succeeded / Failed / Skipped / Total] 65 / 138 / 6 / 209:  21%|██        | 210/1000 [28:11<1:46:02,  8.05s/it][Succeeded / Failed / Skipped / Total] 65 / 139 / 6 / 210:  21%|██        | 210/1000 [28:11<1:46:02,  8.05s/it][Succeeded / Failed / Skipped / Total] 65 / 139 / 6 / 210:  21%|██        | 211/1000 [28:12<1:45:27,  8.02s/it][Succeeded / Failed / Skipped / Total] 66 / 139 / 6 / 211:  21%|██        | 211/1000 [28:12<1:45:27,  8.02s/it][Succeeded / Failed / Skipped / Total] 66 / 139 / 6 / 211:  21%|██        | 212/1000 [28:16<1:45:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 67 / 139 / 6 / 212:  21%|██        | 212/1000 [28:16<1:45:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 67 / 139 / 6 / 212:  21%|██▏       | 213/1000 [28:18<1:44:36,  7.98s/it][Succeeded / Failed / Skipped / Total] 67 / 140 / 6 / 213:  21%|██▏       | 213/1000 [28:18<1:44:36,  7.98s/it][Succeeded / Failed / Skipped / Total] 67 / 140 / 6 / 213:  21%|██▏       | 214/1000 [28:26<1:44:28,  7.98s/it][Succeeded / Failed / Skipped / Total] 67 / 141 / 6 / 214:  21%|██▏       | 214/1000 [28:26<1:44:28,  7.98s/it][Succeeded / Failed / Skipped / Total] 67 / 141 / 6 / 214:  22%|██▏       | 215/1000 [28:30<1:44:06,  7.96s/it]Get a row in the database . --> Returns the ID for the given ID . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[babydoresctiedpeditapacpaneiclined]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 210 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[backjiest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[easelaronswaleu]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[easelaronswaleu]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[easelaronswaleu]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[easelaronswaleu]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 211 ---------------------------------------------
Creates a new shared object . --> Create a new object . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > [[commonobactis]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[commonobactis]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[commonobactis]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[commonobactis]] . put ( ApplicationContext . class , context ) ; [[commonobactis]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[commonobactis]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[commonobactis]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
Adds a DSDNS to the DNS . --> Builds a Distribution --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[ddnum]] = new DistinguishedName ( userDnBase ) ; [[ddnum]] . add ( usernameAttribute , username ) ; return [[ddnum]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 213 ---------------------------------------------
Sets the target parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[runfarhderdelasadim]] ( String [[beamourпrarpass]] ) { if ( [[beamourпrarpass]] != null ) { Assert . hasText ( [[beamourпrarpass]] , "targetUrlParameter cannot be empty" ) ; } this . [[highwayeeropramv]] = [[beamourпrarpass]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 214 ---------------------------------------------
Format a date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[gottenpoobinengbio]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 215 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 141 / 6 / 215:  22%|██▏       | 215/1000 [28:30<1:44:06,  7.96s/it][Succeeded / Failed / Skipped / Total] 68 / 141 / 6 / 215:  22%|██▏       | 216/1000 [28:35<1:43:45,  7.94s/it][Succeeded / Failed / Skipped / Total] 69 / 141 / 6 / 216:  22%|██▏       | 216/1000 [28:35<1:43:45,  7.94s/it][Succeeded / Failed / Skipped / Total] 69 / 141 / 6 / 216:  22%|██▏       | 217/1000 [28:43<1:43:40,  7.94s/it][Succeeded / Failed / Skipped / Total] 69 / 142 / 6 / 217:  22%|██▏       | 217/1000 [28:43<1:43:40,  7.94s/it][Succeeded / Failed / Skipped / Total] 69 / 142 / 6 / 217:  22%|██▏       | 218/1000 [28:58<1:43:57,  7.98s/it][Succeeded / Failed / Skipped / Total] 70 / 142 / 6 / 218:  22%|██▏       | 218/1000 [28:58<1:43:57,  7.98s/it][Succeeded / Failed / Skipped / Total] 70 / 142 / 6 / 218:  22%|██▏       | 219/1000 [29:04<1:43:42,  7.97s/it][Succeeded / Failed / Skipped / Total] 70 / 143 / 6 / 219:  22%|██▏       | 219/1000 [29:04<1:43:42,  7.97s/it][Succeeded / Failed / Skipped / Total] 70 / 143 / 6 / 219:  22%|██▏       | 220/1000 [29:07<1:43:15,  7.94s/it][Succeeded / Failed / Skipped / Total] 71 / 143 / 6 / 220:  22%|██▏       | 220/1000 [29:07<1:43:15,  7.94s/it][Succeeded / Failed / Skipped / Total] 71 / 143 / 6 / 220:  22%|██▏       | 221/1000 [29:28<1:43:52,  8.00s/it][Succeeded / Failed / Skipped / Total] 71 / 144 / 6 / 221:  22%|██▏       | 221/1000 [29:28<1:43:52,  8.00s/it][Succeeded / Failed / Skipped / Total] 71 / 144 / 6 / 221:  22%|██▏       | 222/1000 [29:39<1:43:56,  8.02s/it]Configures a JDBC . -->  --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[existing]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[key]] = prefix + n ; log . debug ( "Setting security property [" + [[key]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[key]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[otherwise]] ; while ( ( [[otherwise]] = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = [[otherwise]] . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[tag]] = prefix + n ; log . debug ( "Setting security property [" + [[tag]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[tag]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 216 ---------------------------------------------
Clears the cache . --> Add a value to the map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[addvefe]] ( HashMap [[null]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[null]] . size ( ) > 1000 ) { [[null]] . clear ( ) ; } [[null]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 217 ---------------------------------------------
Handle the authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[allmearies]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 218 ---------------------------------------------
Gets the security context . --> Method to create a new mbean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[godrebotvidagroupclass]] ( final String [[bombdesign]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 219 ---------------------------------------------
Parse a date . --> [[[FAILED]]]

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int [[i]] = 0 ; ( date == null ) && ( [[i]] < formats . length ) ; [[i]] ++ ) { try { date = formats [ [[i]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[extraconsanize]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int [[p]] = 0 ; ( date == null ) && ( [[p]] < formats . length ) ; [[p]] ++ ) { try { date = formats [ [[p]] ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 220 ---------------------------------------------
Returns the subject of the given subject . --> Obtains leader leader --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[bookscleounnu]] ( final Subject [[leader]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[leader]] ) ; } String [[sciesloncommand]] = null ; if ( [[leader]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
Change authentication password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[username]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[username]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[username]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[influenceletru]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String [[clientnam]] = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + [[clientnam]] ) ; DistinguishedName userDn = usernameMapper . buildDn ( [[clientnam]] ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 222 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 145 / 6 / 222:  22%|██▏       | 222/1000 [29:39<1:43:56,  8.02s/it][Succeeded / Failed / Skipped / Total] 71 / 145 / 6 / 222:  22%|██▏       | 223/1000 [29:44<1:43:38,  8.00s/it][Succeeded / Failed / Skipped / Total] 71 / 146 / 6 / 223:  22%|██▏       | 223/1000 [29:44<1:43:38,  8.00s/it][Succeeded / Failed / Skipped / Total] 71 / 146 / 6 / 223:  22%|██▏       | 224/1000 [29:50<1:43:21,  7.99s/it][Succeeded / Failed / Skipped / Total] 72 / 146 / 6 / 224:  22%|██▏       | 224/1000 [29:50<1:43:21,  7.99s/it][Succeeded / Failed / Skipped / Total] 72 / 146 / 6 / 224:  22%|██▎       | 225/1000 [29:50<1:42:46,  7.96s/it][Succeeded / Failed / Skipped / Total] 72 / 147 / 6 / 225:  22%|██▎       | 225/1000 [29:50<1:42:46,  7.96s/it][Succeeded / Failed / Skipped / Total] 72 / 147 / 6 / 225:  23%|██▎       | 226/1000 [29:59<1:42:44,  7.96s/it][Succeeded / Failed / Skipped / Total] 73 / 147 / 6 / 226:  23%|██▎       | 226/1000 [29:59<1:42:44,  7.96s/it][Succeeded / Failed / Skipped / Total] 73 / 147 / 6 / 226:  23%|██▎       | 227/1000 [30:12<1:42:52,  7.99s/it][Succeeded / Failed / Skipped / Total] 73 / 148 / 6 / 227:  23%|██▎       | 227/1000 [30:12<1:42:52,  7.99s/it][Succeeded / Failed / Skipped / Total] 73 / 148 / 6 / 227:  23%|██▎       | 228/1000 [30:21<1:42:48,  7.99s/it][Succeeded / Failed / Skipped / Total] 73 / 149 / 6 / 228:  23%|██▎       | 228/1000 [30:21<1:42:48,  7.99s/it][Succeeded / Failed / Skipped / Total] 73 / 149 / 6 / 228:  23%|██▎       | 229/1000 [30:41<1:43:21,  8.04s/it][Succeeded / Failed / Skipped / Total] 73 / 150 / 6 / 229:  23%|██▎       | 229/1000 [30:41<1:43:21,  8.04s/it][Succeeded / Failed / Skipped / Total] 73 / 150 / 6 / 229:  23%|██▎       | 230/1000 [30:45<1:42:58,  8.02s/it]Sets a copy of the current token . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[acthebots]] ( Authentication [[committee]] , Authentication [[dinete]] ) { if ( ( [[dinete]] instanceof AbstractAuthenticationToken ) && ( [[dinete]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dinete]] ; token . setDetails ( [[committee]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 223 ---------------------------------------------
Build a set of groups . --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[playmotedd]] ( String group ) { DistinguishedName [[gran]] = new DistinguishedName ( groupSearchBase ) ; [[gran]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[gran]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 224 ---------------------------------------------
Gets a list of candidates . --> Gets a request that gets a filter --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[giveilawed]] ( String url ) { return [[giveilawed]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 225 ---------------------------------------------
Get the chain of chains . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[offleaners]] ( HttpServletRequest [[website]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[website]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Updates the session attributes . --> Update the MBean --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > [[assemblybandnibornts]] ) { notNull ( [[assemblybandnibornts]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[assemblybandnibornts]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 227 ---------------------------------------------
Revokes the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[session]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[session]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 228 ---------------------------------------------
Get the application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[coversconning]] ) { ServletContext servletContext = [[coversconning]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 229 ---------------------------------------------
Method to get auth password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[password]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[express]] ( String userName , String [[authentication]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[authentication]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 230 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 73 / 151 / 6 / 230:  23%|██▎       | 230/1000 [30:45<1:42:58,  8.02s/it][Succeeded / Failed / Skipped / Total] 73 / 151 / 6 / 230:  23%|██▎       | 231/1000 [31:00<1:43:13,  8.05s/it][Succeeded / Failed / Skipped / Total] 73 / 152 / 6 / 231:  23%|██▎       | 231/1000 [31:00<1:43:13,  8.05s/it][Succeeded / Failed / Skipped / Total] 73 / 152 / 6 / 231:  23%|██▎       | 232/1000 [31:01<1:42:43,  8.03s/it][Succeeded / Failed / Skipped / Total] 74 / 152 / 6 / 232:  23%|██▎       | 232/1000 [31:01<1:42:43,  8.03s/it][Succeeded / Failed / Skipped / Total] 74 / 152 / 6 / 232:  23%|██▎       | 233/1000 [31:07<1:42:28,  8.02s/it][Succeeded / Failed / Skipped / Total] 74 / 153 / 6 / 233:  23%|██▎       | 233/1000 [31:07<1:42:28,  8.02s/it][Succeeded / Failed / Skipped / Total] 74 / 153 / 6 / 233:  23%|██▎       | 234/1000 [31:17<1:42:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 75 / 153 / 6 / 234:  23%|██▎       | 234/1000 [31:17<1:42:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 75 / 153 / 6 / 234:  24%|██▎       | 235/1000 [31:25<1:42:18,  8.02s/it]Adds a list of filters to a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[ying]] ( List < Filter > filters ) { Validate . notNull ( [[ying]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[ying]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 231 ---------------------------------------------
Add a filter to the filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter [[pump]] , Filter ... additionalFilters ) { Validate . notNull ( [[pump]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[pump]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Replies the name of the given node . --> Redinode dudie die die nudie die die de die dieue die due ne dieneuene dicheudieuge die neudeueneueue due dienudieueneue dichneudichne --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[gottpthore]] ( DistinguishedName dn , Context [[diirew]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[diirew]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 233 ---------------------------------------------
Create a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme basic ( String userName , String password ) { final BasicAuthScheme [[system]] = new BasicAuthScheme ( ) ; [[system]] . setUserName ( userName ) ; [[system]] . setPassword ( password ) ; return [[system]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
Send a HTTP response to the response . --> Sends a log message . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[headers]] = responseOptions . headers ( ) ; if ( [[headers]] . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( [[headers]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers [[bearerse]] = responseOptions . headers ( ) ; if ( [[bearerse]] . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( [[bearerse]] ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 235 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 76 / 153 / 6 / 235:  24%|██▎       | 235/1000 [31:25<1:42:18,  8.02s/it][Succeeded / Failed / Skipped / Total] 76 / 153 / 6 / 235:  24%|██▎       | 236/1000 [31:25<1:41:45,  7.99s/it][Succeeded / Failed / Skipped / Total] 76 / 154 / 6 / 236:  24%|██▎       | 236/1000 [31:25<1:41:45,  7.99s/it][Succeeded / Failed / Skipped / Total] 76 / 154 / 6 / 236:  24%|██▎       | 237/1000 [31:34<1:41:39,  7.99s/it][Succeeded / Failed / Skipped / Total] 77 / 154 / 6 / 237:  24%|██▎       | 237/1000 [31:34<1:41:39,  7.99s/it][Succeeded / Failed / Skipped / Total] 77 / 154 / 6 / 237:  24%|██▍       | 238/1000 [31:57<1:42:20,  8.06s/it][Succeeded / Failed / Skipped / Total] 78 / 154 / 6 / 238:  24%|██▍       | 238/1000 [31:57<1:42:20,  8.06s/it][Succeeded / Failed / Skipped / Total] 78 / 154 / 6 / 238:  24%|██▍       | 239/1000 [32:00<1:41:56,  8.04s/it][Succeeded / Failed / Skipped / Total] 78 / 155 / 6 / 239:  24%|██▍       | 239/1000 [32:00<1:41:56,  8.04s/it][Succeeded / Failed / Skipped / Total] 78 / 155 / 6 / 239:  24%|██▍       | 240/1000 [32:02<1:41:29,  8.01s/it][Succeeded / Failed / Skipped / Total] 78 / 156 / 6 / 240:  24%|██▍       | 240/1000 [32:02<1:41:29,  8.01s/it][Succeeded / Failed / Skipped / Total] 78 / 156 / 6 / 240:  24%|██▍       | 241/1000 [32:06<1:41:06,  7.99s/it][Succeeded / Failed / Skipped / Total] 79 / 156 / 6 / 241:  24%|██▍       | 241/1000 [32:06<1:41:06,  7.99s/it][Succeeded / Failed / Skipped / Total] 79 / 156 / 6 / 241:  24%|██▍       | 242/1000 [32:17<1:41:07,  8.00s/it]Construct a ConfigConfig object . --> Helper method to create a configuration object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[elroigt]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 236 ---------------------------------------------
Set the URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[irgi]] ) { if ( [[irgi]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[irgi]] . getHost ( ) , [[irgi]] . getPort ( ) , [[irgi]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 237 ---------------------------------------------
Create a new Mapper . --> Factory method to create a new JacksonFactory instance --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "[[again]]" == "[[again]]" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 238 ---------------------------------------------
Sets default charset . --> Gets a Content sharLocale . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[subgiletalresharorget]] ( String [[raycing]] ) { return new EncoderConfig ( defaultContentCharset , [[raycing]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "[[read]]" == "[[read]]" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
Sets the scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[session]] = new FormAuthScheme ( ) ; [[session]] . setUserName ( userName ) ; [[session]] . setPassword ( password ) ; [[session]] . setConfig ( config ) ; return [[session]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 240 ---------------------------------------------
Create a new scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[tsm]] ( String userName , String password , String workstation , String [[scope]] ) { final NTLMAuthScheme [[id]] = new NTLMAuthScheme ( ) ; [[id]] . setUserName ( userName ) ; [[id]] . setPassword ( password ) ; [[id]] . setWorkstation ( workstation ) ; [[id]] . setDomain ( [[scope]] ) ; return [[id]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 241 ---------------------------------------------
Creates a new ConfigConfig instance . --> Builds a new MVM instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logonweightb]] ( LogConfig logConfig ) { notNull ( [[logonweightb]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logonweightb]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 242 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 156 / 6 / 242:  24%|██▍       | 242/1000 [32:17<1:41:07,  8.00s/it][Succeeded / Failed / Skipped / Total] 80 / 156 / 6 / 242:  24%|██▍       | 243/1000 [32:17<1:40:35,  7.97s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 6 / 243:  24%|██▍       | 243/1000 [32:17<1:40:35,  7.97s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 6 / 243:  24%|██▍       | 244/1000 [32:17<1:40:04,  7.94s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 7 / 244:  24%|██▍       | 244/1000 [32:17<1:40:04,  7.94s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 7 / 244:  24%|██▍       | 245/1000 [32:18<1:39:33,  7.91s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 8 / 245:  24%|██▍       | 245/1000 [32:18<1:39:33,  7.91s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 8 / 245:  25%|██▍       | 246/1000 [32:19<1:39:03,  7.88s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 9 / 246:  25%|██▍       | 246/1000 [32:19<1:39:03,  7.88s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 9 / 246:  25%|██▍       | 247/1000 [32:19<1:38:33,  7.85s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 10 / 247:  25%|██▍       | 247/1000 [32:19<1:38:33,  7.85s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 10 / 247:  25%|██▍       | 248/1000 [32:20<1:38:03,  7.82s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 11 / 248:  25%|██▍       | 248/1000 [32:20<1:38:03,  7.82s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 11 / 248:  25%|██▍       | 249/1000 [32:20<1:37:34,  7.79s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 12 / 249:  25%|██▍       | 249/1000 [32:20<1:37:34,  7.79s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 12 / 249:  25%|██▌       | 250/1000 [32:21<1:37:04,  7.77s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 13 / 250:  25%|██▌       | 250/1000 [32:21<1:37:04,  7.77s/it][Succeeded / Failed / Skipped / Total] 81 / 156 / 13 / 250:  25%|██▌       | 251/1000 [32:22<1:36:36,  7.74s/it][Succeeded / Failed / Skipped / Total] 81 / 157 / 13 / 251:  25%|██▌       | 251/1000 [32:22<1:36:36,  7.74s/it][Succeeded / Failed / Skipped / Total] 81 / 157 / 13 / 251:  25%|██▌       | 252/1000 [32:25<1:36:15,  7.72s/it]Create a ConfigConfigConfig instance . --> Factory method to create a new ConfigConfigConfigConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[framedefdriver]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Construct a Config from a Config object . --> Create a new Amazon future --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[areaamaidletpisquare]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[areaamaidletpisquare]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[areaamaidletpisquare]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Construct a ConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 245 ---------------------------------------------
Creates a ConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 246 ---------------------------------------------
Creates a ConfigConfig from a ConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 247 ---------------------------------------------
Build a ConfigConfigConfig from a ConfigConfigConfig --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Factory method to create a new configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 249 ---------------------------------------------
Factory method to create a ConfigConfigConfigConfig instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 250 ---------------------------------------------
Construct a ConfigConfigConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 251 ---------------------------------------------
Creates a new JackFactory instance . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[crewmobergenthaipaj]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[crewmobergenthaipaj]] , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 252 ---------------------------------------------
Creates a ConfigConfigConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[jsonConfig]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[isarcomfatc]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .[Succeeded / Failed / Skipped / Total] 81 / 158 / 13 / 252:  25%|██▌       | 252/1000 [32:25<1:36:15,  7.72s/it][Succeeded / Failed / Skipped / Total] 81 / 158 / 13 / 252:  25%|██▌       | 253/1000 [32:32<1:36:05,  7.72s/it][Succeeded / Failed / Skipped / Total] 82 / 158 / 13 / 253:  25%|██▌       | 253/1000 [32:32<1:36:05,  7.72s/it][Succeeded / Failed / Skipped / Total] 82 / 158 / 13 / 253:  25%|██▌       | 254/1000 [32:39<1:35:53,  7.71s/it][Succeeded / Failed / Skipped / Total] 83 / 158 / 13 / 254:  25%|██▌       | 254/1000 [32:39<1:35:53,  7.71s/it][Succeeded / Failed / Skipped / Total] 83 / 158 / 13 / 254:  26%|██▌       | 255/1000 [32:41<1:35:30,  7.69s/it][Succeeded / Failed / Skipped / Total] 84 / 158 / 13 / 255:  26%|██▌       | 255/1000 [32:41<1:35:30,  7.69s/it][Succeeded / Failed / Skipped / Total] 84 / 158 / 13 / 255:  26%|██▌       | 256/1000 [32:58<1:35:49,  7.73s/it][Succeeded / Failed / Skipped / Total] 84 / 159 / 13 / 256:  26%|██▌       | 256/1000 [32:58<1:35:49,  7.73s/it][Succeeded / Failed / Skipped / Total] 84 / 159 / 13 / 256:  26%|██▌       | 257/1000 [33:37<1:37:13,  7.85s/it][Succeeded / Failed / Skipped / Total] 84 / 160 / 13 / 257:  26%|██▌       | 257/1000 [33:37<1:37:13,  7.85s/it][Succeeded / Failed / Skipped / Total] 84 / 160 / 13 / 257:  26%|██▌       | 258/1000 [33:40<1:36:50,  7.83s/it][Succeeded / Failed / Skipped / Total] 84 / 161 / 13 / 258:  26%|██▌       | 258/1000 [33:40<1:36:50,  7.83s/it][Succeeded / Failed / Skipped / Total] 84 / 161 / 13 / 258:  26%|██▌       | 259/1000 [33:52<1:36:55,  7.85s/it][Succeeded / Failed / Skipped / Total] 85 / 161 / 13 / 259:  26%|██▌       | 259/1000 [33:52<1:36:55,  7.85s/it][Succeeded / Failed / Skipped / Total] 85 / 161 / 13 / 259:  26%|██▌       | 260/1000 [33:55<1:36:32,  7.83s/it][Succeeded / Failed / Skipped / Total] 85 / 162 / 13 / 260:  26%|██▌       | 260/1000 [33:55<1:36:32,  7.83s/it][Succeeded / Failed / Skipped / Total] 85 / 162 / 13 / 260:  26%|██▌       | 261/1000 [34:18<1:37:07,  7.89s/it]
--------------------------------------------- Result 253 ---------------------------------------------
Builds a ConfigConfigConfigConfigConfig object . --> Build a ConfigConfig from a ConfigConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[xmlConfig]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[leatherunigging]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 254 ---------------------------------------------
Create a new SSL . --> Create a new truststore --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[exploitredvesitnamems]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 255 ---------------------------------------------
Factory method to create a default namespace . --> Creates a new Azokeeper --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[propertiesrderstorthecoflow]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[propertiesrderstorthecoflow]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Creates a new namespace . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[declaresgopace]] ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[xvomps]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[c]] : headers . keySet ( ) ) { Object val = headers . get ( [[c]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[c]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Set proxy host . --> [[[FAILED]]]

[[[[Adv]]]]: public void setProxy ( String [[host]] , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void setProxy ( String [[main]] , int port , String [[arrangement]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[main]] , port , [[arrangement]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 259 ---------------------------------------------
Replies the HTTP request . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Object request ( String [[method]] , boolean [[hasBody]] , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . [[defaultContentType]] , [[hasBody]] , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String [[methods]] , boolean [[sdon]] , Closure [[frontgredroprosum]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[methods]] , this . [[menulikepentopo]] , [[sdon]] , [[frontgredroprosum]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 260 ---------------------------------------------
Set the name of this control . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[designtable]] ( String controlName ) { Validate . notEmpty ( [[designtable]] , "Control name cannot be empty" ) ; this . [[domaintip]] = [[designtable]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 261 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 163 / 13 / 261:  26%|██▌       | 261/1000 [34:18<1:37:07,  7.89s/it][Succeeded / Failed / Skipped / Total] 85 / 163 / 13 / 261:  26%|██▌       | 262/1000 [34:21<1:36:46,  7.87s/it][Succeeded / Failed / Skipped / Total] 85 / 164 / 13 / 262:  26%|██▌       | 262/1000 [34:21<1:36:46,  7.87s/it][Succeeded / Failed / Skipped / Total] 85 / 164 / 13 / 262:  26%|██▋       | 263/1000 [34:23<1:36:22,  7.85s/it][Succeeded / Failed / Skipped / Total] 85 / 165 / 13 / 263:  26%|██▋       | 263/1000 [34:23<1:36:22,  7.85s/it][Succeeded / Failed / Skipped / Total] 85 / 165 / 13 / 263:  26%|██▋       | 264/1000 [34:40<1:36:40,  7.88s/it][Succeeded / Failed / Skipped / Total] 85 / 166 / 13 / 264:  26%|██▋       | 264/1000 [34:40<1:36:40,  7.88s/it][Succeeded / Failed / Skipped / Total] 85 / 166 / 13 / 264:  26%|██▋       | 265/1000 [34:41<1:36:12,  7.85s/it][Succeeded / Failed / Skipped / Total] 86 / 166 / 13 / 265:  26%|██▋       | 265/1000 [34:41<1:36:12,  7.85s/it][Succeeded / Failed / Skipped / Total] 86 / 166 / 13 / 265:  27%|██▋       | 266/1000 [34:57<1:36:27,  7.89s/it][Succeeded / Failed / Skipped / Total] 87 / 166 / 13 / 266:  27%|██▋       | 266/1000 [34:57<1:36:27,  7.89s/it][Succeeded / Failed / Skipped / Total] 87 / 166 / 13 / 266:  27%|██▋       | 267/1000 [34:58<1:36:00,  7.86s/it][Succeeded / Failed / Skipped / Total] 87 / 167 / 13 / 267:  27%|██▋       | 267/1000 [34:58<1:36:00,  7.86s/it][Succeeded / Failed / Skipped / Total] 87 / 167 / 13 / 267:  27%|██▋       | 268/1000 [35:09<1:36:01,  7.87s/it][Succeeded / Failed / Skipped / Total] 87 / 168 / 13 / 268:  27%|██▋       | 268/1000 [35:09<1:36:01,  7.87s/it][Succeeded / Failed / Skipped / Total] 87 / 168 / 13 / 268:  27%|██▋       | 269/1000 [35:10<1:35:33,  7.84s/it]Sets the header header value . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[bundle]] ( String [[hand]] , String value ) { Validate . notEmpty ( [[hand]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 262 ---------------------------------------------
Creates a new header list . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[composewith]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 263 ---------------------------------------------
Resets the content . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[alt]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Set credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void basic ( String [[host]] , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String [[address]] , int [[main]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[address]] , [[main]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 265 ---------------------------------------------
Adds a header to the response . --> Gets the response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[text]] , String value ) { notNull ( [[text]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[text]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[text]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 266 ---------------------------------------------
Handle a response . --> Gets a status code . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[rebuild]] ( ) { final int [[careerit]] = restAssuredResponse . statusCode ( ) ; if ( [[careerit]] < 100 || [[careerit]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[careerit]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[remark]] ( Matcher < ? super String > [[genericturt]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[genericturt]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher value ( Matcher < ? super String > [[classmadclient]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[classmadclient]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 169 / 13 / 269:  27%|██▋       | 269/1000 [35:10<1:35:33,  7.84s/it][Succeeded / Failed / Skipped / Total] 87 / 169 / 13 / 269:  27%|██▋       | 270/1000 [35:14<1:35:16,  7.83s/it][Succeeded / Failed / Skipped / Total] 88 / 169 / 13 / 270:  27%|██▋       | 270/1000 [35:14<1:35:16,  7.83s/it][Succeeded / Failed / Skipped / Total] 88 / 169 / 13 / 270:  27%|██▋       | 271/1000 [35:25<1:35:17,  7.84s/it][Succeeded / Failed / Skipped / Total] 89 / 169 / 13 / 271:  27%|██▋       | 271/1000 [35:25<1:35:17,  7.84s/it][Succeeded / Failed / Skipped / Total] 89 / 169 / 13 / 271:  27%|██▋       | 272/1000 [35:27<1:34:53,  7.82s/it][Succeeded / Failed / Skipped / Total] 90 / 169 / 13 / 272:  27%|██▋       | 272/1000 [35:27<1:34:53,  7.82s/it][Succeeded / Failed / Skipped / Total] 90 / 169 / 13 / 272:  27%|██▋       | 273/1000 [35:30<1:34:33,  7.80s/it][Succeeded / Failed / Skipped / Total] 90 / 170 / 13 / 273:  27%|██▋       | 273/1000 [35:30<1:34:33,  7.80s/it][Succeeded / Failed / Skipped / Total] 90 / 170 / 13 / 273:  27%|██▋       | 274/1000 [35:36<1:34:21,  7.80s/it][Succeeded / Failed / Skipped / Total] 91 / 170 / 13 / 274:  27%|██▋       | 274/1000 [35:36<1:34:21,  7.80s/it][Succeeded / Failed / Skipped / Total] 91 / 170 / 13 / 274:  28%|██▊       | 275/1000 [35:41<1:34:05,  7.79s/it][Succeeded / Failed / Skipped / Total] 91 / 171 / 13 / 275:  28%|██▊       | 275/1000 [35:41<1:34:05,  7.79s/it][Succeeded / Failed / Skipped / Total] 91 / 171 / 13 / 275:  28%|██▊       | 276/1000 [35:51<1:34:03,  7.79s/it][Succeeded / Failed / Skipped / Total] 91 / 172 / 13 / 276:  28%|██▊       | 276/1000 [35:51<1:34:03,  7.79s/it][Succeeded / Failed / Skipped / Total] 91 / 172 / 13 / 276:  28%|██▊       | 277/1000 [35:59<1:33:57,  7.80s/it][Succeeded / Failed / Skipped / Total] 91 / 173 / 13 / 277:  28%|██▊       | 277/1000 [35:59<1:33:57,  7.80s/it][Succeeded / Failed / Skipped / Total] 91 / 173 / 13 / 277:  28%|██▊       | 278/1000 [36:08<1:33:52,  7.80s/it][Succeeded / Failed / Skipped / Total] 92 / 173 / 13 / 278:  28%|██▊       | 278/1000 [36:08<1:33:52,  7.80s/it][Succeeded / Failed / Skipped / Total] 92 / 173 / 13 / 278:  28%|██▊       | 279/1000 [36:08<1:33:24,  7.77s/it]Sets credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void ntlm ( String host , int [[port]] , String [[user]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( [[user]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String host , int [[remote]] , String [[bearer]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[remote]] ) , new NTCredentials ( [[bearer]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 270 ---------------------------------------------
Returns the domain name of the given domain . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[scope]] ( Matcher < ? super String > [[countrynatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[countrynatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Get the Matcher that matches the given Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[putoniland]] ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a Matcher that matches the given Matcher . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[tag]] ( Matcher < ? super String > [[matchhatrer]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[matchhatrer]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Returns a set of test case . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[axmetricrodae]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Returns the version of the given matcher . --> Simultaneously registers a string --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher version ( Matcher < ? super Integer > [[editionlandt]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[editionlandt]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Gets the CookieMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Obtains a set of Cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[ccline]] ( Matcher < ? super Integer > [[rexpassetner]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[rexpassetner]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Sets the header . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[getintar]] ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 278 ---------------------------------------------
Returns a new JsonParser instance . --> Create a new JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[idterversement]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 279 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 93 / 173 / 13 / 279:  28%|██▊       | 279/1000 [36:08<1:33:24,  7.77s/it][Succeeded / Failed / Skipped / Total] 93 / 173 / 13 / 279:  28%|██▊       | 280/1000 [36:17<1:33:18,  7.78s/it][Succeeded / Failed / Skipped / Total] 94 / 173 / 13 / 280:  28%|██▊       | 280/1000 [36:17<1:33:18,  7.78s/it][Succeeded / Failed / Skipped / Total] 94 / 173 / 13 / 280:  28%|██▊       | 281/1000 [36:17<1:32:50,  7.75s/it][Succeeded / Failed / Skipped / Total] 94 / 173 / 14 / 281:  28%|██▊       | 281/1000 [36:17<1:32:50,  7.75s/it][Succeeded / Failed / Skipped / Total] 94 / 173 / 14 / 281:  28%|██▊       | 282/1000 [36:17<1:32:24,  7.72s/it][Succeeded / Failed / Skipped / Total] 94 / 174 / 14 / 282:  28%|██▊       | 282/1000 [36:17<1:32:24,  7.72s/it][Succeeded / Failed / Skipped / Total] 94 / 174 / 14 / 282:  28%|██▊       | 283/1000 [36:18<1:32:00,  7.70s/it][Succeeded / Failed / Skipped / Total] 94 / 175 / 14 / 283:  28%|██▊       | 283/1000 [36:18<1:32:00,  7.70s/it][Succeeded / Failed / Skipped / Total] 94 / 175 / 14 / 283:  28%|██▊       | 284/1000 [36:40<1:32:28,  7.75s/it][Succeeded / Failed / Skipped / Total] 95 / 175 / 14 / 284:  28%|██▊       | 284/1000 [36:40<1:32:28,  7.75s/it][Succeeded / Failed / Skipped / Total] 95 / 175 / 14 / 284:  28%|██▊       | 285/1000 [36:48<1:32:20,  7.75s/it][Succeeded / Failed / Skipped / Total] 95 / 176 / 14 / 285:  28%|██▊       | 285/1000 [36:48<1:32:20,  7.75s/it][Succeeded / Failed / Skipped / Total] 95 / 176 / 14 / 285:  29%|██▊       | 286/1000 [36:58<1:32:18,  7.76s/it][Succeeded / Failed / Skipped / Total] 96 / 176 / 14 / 286:  29%|██▊       | 286/1000 [36:58<1:32:18,  7.76s/it][Succeeded / Failed / Skipped / Total] 96 / 176 / 14 / 286:  29%|██▊       | 287/1000 [37:10<1:32:20,  7.77s/it][Succeeded / Failed / Skipped / Total] 96 / 177 / 14 / 287:  29%|██▊       | 287/1000 [37:10<1:32:20,  7.77s/it][Succeeded / Failed / Skipped / Total] 96 / 177 / 14 / 287:  29%|██▉       | 288/1000 [37:12<1:31:59,  7.75s/it][Succeeded / Failed / Skipped / Total] 97 / 177 / 14 / 288:  29%|██▉       | 288/1000 [37:12<1:31:59,  7.75s/it][Succeeded / Failed / Skipped / Total] 97 / 177 / 14 / 288:  29%|██▉       | 289/1000 [37:16<1:31:42,  7.74s/it][Succeeded / Failed / Skipped / Total] 97 / 178 / 14 / 289:  29%|██▉       | 289/1000 [37:16<1:31:42,  7.74s/it][Succeeded / Failed / Skipped / Total] 97 / 178 / 14 / 289:  29%|██▉       | 290/1000 [37:25<1:31:37,  7.74s/it]Returns a new proxy . --> Create a new Principal --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[meetrasc]] ( String [[central]] ) { return new ProxySpecification ( [[central]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 280 ---------------------------------------------
Creates a JsonParser instance . --> Create a new JsonParser --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[childponrort]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[childponrort]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 281 ---------------------------------------------
Creates a new Log4j . --> [[[SKIPPED]]]

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 282 ---------------------------------------------
Sets the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[expectedValue]] ) { spec . cookie ( cookieName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String [[executionvaial]] ) { spec . cookie ( cookieName , [[executionvaial]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
Sets the response for the given response . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String [[nameinterface]] , Matcher < String > [[anticipatedqualusermitker]] ) { spec . header ( [[nameinterface]] , [[anticipatedqualusermitker]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Add attribute . --> Adds an gateway . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[associateid]] , Object [[attributescensuin]] ) { spec . attribute ( [[associateid]] , [[attributescensuin]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Construct a new logStream . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream [[backsout]] ) { return new LogConfig ( [[backsout]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 286 ---------------------------------------------
Sets the default traversing . --> Create a new PartitionPartition --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[newtister]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[newtister]] , defaultCharset , "[[hello]]" == "[[hello]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Creates a HTTP HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[point]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 288 ---------------------------------------------
Sets the handler . --> Sets the evaluationHandler . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler [[evaluationauling]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[evaluationauling]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Add a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[drawsendwindow]] ( String [[firstentry]] , String [[fieldhulel]] ) { spec . header ( [[firstentry]] , [[fieldhulel]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 290 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 98 / 178 / 14 / 290:  29%|██▉       | 290/1000 [37:25<1:31:37,  7.74s/it][Succeeded / Failed / Skipped / Total] 98 / 178 / 14 / 290:  29%|██▉       | 291/1000 [37:34<1:31:32,  7.75s/it][Succeeded / Failed / Skipped / Total] 98 / 179 / 14 / 291:  29%|██▉       | 291/1000 [37:34<1:31:32,  7.75s/it][Succeeded / Failed / Skipped / Total] 98 / 179 / 14 / 291:  29%|██▉       | 292/1000 [37:36<1:31:11,  7.73s/it][Succeeded / Failed / Skipped / Total] 99 / 179 / 14 / 292:  29%|██▉       | 292/1000 [37:36<1:31:11,  7.73s/it][Succeeded / Failed / Skipped / Total] 99 / 179 / 14 / 292:  29%|██▉       | 293/1000 [37:47<1:31:12,  7.74s/it][Succeeded / Failed / Skipped / Total] 99 / 180 / 14 / 293:  29%|██▉       | 293/1000 [37:47<1:31:12,  7.74s/it][Succeeded / Failed / Skipped / Total] 99 / 180 / 14 / 293:  29%|██▉       | 294/1000 [37:50<1:30:52,  7.72s/it][Succeeded / Failed / Skipped / Total] 100 / 180 / 14 / 294:  29%|██▉       | 294/1000 [37:50<1:30:52,  7.72s/it][Succeeded / Failed / Skipped / Total] 100 / 180 / 14 / 294:  30%|██▉       | 295/1000 [37:59<1:30:48,  7.73s/it][Succeeded / Failed / Skipped / Total] 101 / 180 / 14 / 295:  30%|██▉       | 295/1000 [37:59<1:30:48,  7.73s/it][Succeeded / Failed / Skipped / Total] 101 / 180 / 14 / 295:  30%|██▉       | 296/1000 [38:02<1:30:29,  7.71s/it][Succeeded / Failed / Skipped / Total] 102 / 180 / 14 / 296:  30%|██▉       | 296/1000 [38:02<1:30:29,  7.71s/it][Succeeded / Failed / Skipped / Total] 102 / 180 / 14 / 296:  30%|██▉       | 297/1000 [38:03<1:30:06,  7.69s/it][Succeeded / Failed / Skipped / Total] 103 / 180 / 14 / 297:  30%|██▉       | 297/1000 [38:03<1:30:06,  7.69s/it][Succeeded / Failed / Skipped / Total] 103 / 180 / 14 / 297:  30%|██▉       | 298/1000 [38:04<1:29:40,  7.66s/it][Succeeded / Failed / Skipped / Total] 104 / 180 / 14 / 298:  30%|██▉       | 298/1000 [38:04<1:29:40,  7.66s/it][Succeeded / Failed / Skipped / Total] 104 / 180 / 14 / 298:  30%|██▉       | 299/1000 [38:16<1:29:43,  7.68s/it][Succeeded / Failed / Skipped / Total] 105 / 180 / 14 / 299:  30%|██▉       | 299/1000 [38:16<1:29:43,  7.68s/it][Succeeded / Failed / Skipped / Total] 105 / 180 / 14 / 299:  30%|███       | 300/1000 [38:31<1:29:53,  7.70s/it]Creates a new HTTP client . --> Build HTTP client --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[inputpohs]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 291 ---------------------------------------------
Creates a new HttpClient instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[serviceposeiancedooffck]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newlymarams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newlymarams]] . put ( parameterName , parameterValue ) ; return new [[serviceposeiancedooffck]] ( httpClientFactory , [[newlymarams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[still]]" == "[[still]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 292 ---------------------------------------------
Creates HttpClient instance . --> Create HttpClientHttpClient --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[serverplgentmal]] ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( [[serverplgentmal]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[clear]]" == "[[clear]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 293 ---------------------------------------------
Add a multi part to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[productcamp]] , String [[artistt]] , String mimeType ) { spec . multiPart ( [[productcamp]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 294 ---------------------------------------------
Returns a JSON object . --> Create leivilities --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[q]] > [[q]] get ( String path ) { final JSONAssertion [[ejsianphiladelphiastilion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[q]] ) [[ejsianphiladelphiastilion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 295 ---------------------------------------------
Creates a HttpClient instance . --> Create a new HttpClient instance --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[apacheuputittretmarfe]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[apacheuputittretmarfe]] , shouldReuseHttpClientInstance , httpClient , "[[x]]" == "[[x]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 296 ---------------------------------------------
Get an int . --> Create a new character --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[createint]] ( String [[character]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the path for the given path . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[winsnode]] ( String [[process]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 298 ---------------------------------------------
Convenience method to create a byte array . --> Convenient method for testing --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[callbriline]] ( String [[distance]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 299 ---------------------------------------------
Gets the long location . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[thinklet]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 181 / 14 / 300:  30%|███       | 300/1000 [38:31<1:29:53,  7.70s/it][Succeeded / Failed / Skipped / Total] 105 / 181 / 14 / 300:  30%|███       | 301/1000 [38:31<1:29:28,  7.68s/it][Succeeded / Failed / Skipped / Total] 105 / 182 / 14 / 301:  30%|███       | 301/1000 [38:31<1:29:28,  7.68s/it][Succeeded / Failed / Skipped / Total] 105 / 182 / 14 / 301:  30%|███       | 302/1000 [38:47<1:29:38,  7.71s/it][Succeeded / Failed / Skipped / Total] 106 / 182 / 14 / 302:  30%|███       | 302/1000 [38:47<1:29:38,  7.71s/it][Succeeded / Failed / Skipped / Total] 106 / 182 / 14 / 302:  30%|███       | 303/1000 [38:52<1:29:26,  7.70s/it][Succeeded / Failed / Skipped / Total] 107 / 182 / 14 / 303:  30%|███       | 303/1000 [38:52<1:29:26,  7.70s/it][Succeeded / Failed / Skipped / Total] 107 / 182 / 14 / 303:  30%|███       | 304/1000 [38:58<1:29:14,  7.69s/it][Succeeded / Failed / Skipped / Total] 107 / 183 / 14 / 304:  30%|███       | 304/1000 [38:58<1:29:14,  7.69s/it][Succeeded / Failed / Skipped / Total] 107 / 183 / 14 / 304:  30%|███       | 305/1000 [39:00<1:28:53,  7.67s/it][Succeeded / Failed / Skipped / Total] 107 / 184 / 14 / 305:  30%|███       | 305/1000 [39:00<1:28:53,  7.67s/it][Succeeded / Failed / Skipped / Total] 107 / 184 / 14 / 305:  31%|███       | 306/1000 [39:25<1:29:25,  7.73s/it][Succeeded / Failed / Skipped / Total] 107 / 185 / 14 / 306:  31%|███       | 306/1000 [39:25<1:29:25,  7.73s/it][Succeeded / Failed / Skipped / Total] 107 / 185 / 14 / 306:  31%|███       | 307/1000 [39:28<1:29:06,  7.72s/it][Succeeded / Failed / Skipped / Total] 107 / 186 / 14 / 307:  31%|███       | 307/1000 [39:28<1:29:06,  7.72s/it][Succeeded / Failed / Skipped / Total] 107 / 186 / 14 / 307:  31%|███       | 308/1000 [39:35<1:28:56,  7.71s/it][Succeeded / Failed / Skipped / Total] 107 / 187 / 14 / 308:  31%|███       | 308/1000 [39:35<1:28:56,  7.71s/it][Succeeded / Failed / Skipped / Total] 107 / 187 / 14 / 308:  31%|███       | 309/1000 [39:37<1:28:35,  7.69s/it][Succeeded / Failed / Skipped / Total] 108 / 187 / 14 / 309:  31%|███       | 309/1000 [39:37<1:28:35,  7.69s/it][Succeeded / Failed / Skipped / Total] 108 / 187 / 14 / 309:  31%|███       | 310/1000 [39:47<1:28:34,  7.70s/it][Succeeded / Failed / Skipped / Total] 109 / 187 / 14 / 310:  31%|███       | 310/1000 [39:47<1:28:34,  7.70s/it][Succeeded / Failed / Skipped / Total] 109 / 187 / 14 / 310:  31%|███       | 311/1000 [39:53<1:28:21,  7.70s/it]Returns the value of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[marketobrent]] ( String path ) { final Object value = get ( path ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Get the float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[collectafoff]] ( String [[flow]] ) { final Object [[relation]] = get ( [[flow]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
Sets a Request object . -->  --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapsend]] ) { spec . body ( object , [[mapsend]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 303 ---------------------------------------------
Gets an object from its type . --> Returns the type of the given class --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[c]] > [[c]] getObject ( String path , Class < [[c]] > objectType ) { Object [[image]] = getFromPath ( path , "[[hello]]" != "[[hello]]" ) ; return getObjectAsType ( [[image]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Get the list of generic type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String path , Class < T > [[voidency]] ) { if ( [[voidency]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[freemet]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! [[voidency]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 305 ---------------------------------------------
Gets the value of a map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[c]] , V > Map < [[c]] , V > [[getaxple]] ( String [[journey]] ) { return get ( [[journey]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 306 ---------------------------------------------
Add parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[getanomo]] ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Add a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String parameterName , Object ... [[parameterValues]] ) { spec . param ( parameterName , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[contributerayram]] ( String parameterName , Object ... [[ajoages]] ) { spec . param ( parameterName , [[ajoages]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Add cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[connecttherockease]] ( String [[iv]] , Object [[flag]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[iv]] , [[flag]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Constructs a filter from stream . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[senders]] ) { return new ResponseLoggingFilter ( stream , [[senders]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Update the specified strategy . --> Create a new MBeanFactory --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[readsanansepinsteevegia]] ( UpdateStrategy [[seragahy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[seragahy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
[Succeeded / Failed / Skipped / Total] 109 / 188 / 14 / 311:  31%|███       | 311/1000 [39:53<1:28:21,  7.70s/it][Succeeded / Failed / Skipped / Total] 109 / 188 / 14 / 311:  31%|███       | 312/1000 [40:10<1:28:35,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 189 / 14 / 312:  31%|███       | 312/1000 [40:10<1:28:35,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 189 / 14 / 312:  31%|███▏      | 313/1000 [40:20<1:28:33,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 190 / 14 / 313:  31%|███▏      | 313/1000 [40:20<1:28:33,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 190 / 14 / 313:  31%|███▏      | 314/1000 [40:30<1:28:30,  7.74s/it][Succeeded / Failed / Skipped / Total] 109 / 191 / 14 / 314:  31%|███▏      | 314/1000 [40:30<1:28:30,  7.74s/it][Succeeded / Failed / Skipped / Total] 109 / 191 / 14 / 314:  32%|███▏      | 315/1000 [40:35<1:28:16,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 192 / 14 / 315:  32%|███▏      | 315/1000 [40:35<1:28:16,  7.73s/it][Succeeded / Failed / Skipped / Total] 109 / 192 / 14 / 315:  32%|███▏      | 316/1000 [40:37<1:27:55,  7.71s/it][Succeeded / Failed / Skipped / Total] 109 / 193 / 14 / 316:  32%|███▏      | 316/1000 [40:37<1:27:55,  7.71s/it][Succeeded / Failed / Skipped / Total] 109 / 193 / 14 / 316:  32%|███▏      | 317/1000 [41:14<1:28:50,  7.80s/it][Succeeded / Failed / Skipped / Total] 109 / 194 / 14 / 317:  32%|███▏      | 317/1000 [41:14<1:28:50,  7.80s/it][Succeeded / Failed / Skipped / Total] 109 / 194 / 14 / 317:  32%|███▏      | 318/1000 [41:16<1:28:31,  7.79s/it][Succeeded / Failed / Skipped / Total] 109 / 195 / 14 / 318:  32%|███▏      | 318/1000 [41:16<1:28:31,  7.79s/it][Succeeded / Failed / Skipped / Total] 109 / 195 / 14 / 318:  32%|███▏      | 319/1000 [41:23<1:28:21,  7.78s/it]--------------------------------------------- Result 311 ---------------------------------------------
Visits the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > [[bind]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[bind]] . getKey ( ) . getTypeLiteral ( ) , [[bind]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 312 ---------------------------------------------
Creates a list of CookieCookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( cookie ) ; Collections . addAll ( [[cookieList]] , additionalCookies ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... additionalCookies ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > [[cakelist]] = new LinkedList < Cookie > ( ) ; [[cakelist]] . add ( cookie ) ; Collections . addAll ( [[cakelist]] , additionalCookies ) ; return new Cookies ( [[cakelist]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 313 ---------------------------------------------
Introspect the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[bridgeuesanrstrtbendt]] ( Key < T > [[command]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Removes the source key from the source . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( [[keyAndSource]] . key ) ; if ( [[set]] != null ) { [[set]] . remove ( [[keyAndSource]] . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[coverfindedortlygack]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[truenameshanend]] : keysAndSources ) { Multiset < Object > [[album]] = backingMap . get ( [[truenameshanend]] . key ) ; if ( [[album]] != null ) { [[album]] . remove ( [[truenameshanend]] . source ) ; if ( [[album]] . isEmpty ( ) ) { backingMap . remove ( [[truenameshanend]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the binding for the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[jumpptranktrainroportirs]] ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Remove a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[replacerueratedrewconcer]] ( Binding < ? > [[ui]] , InjectionPoint ip ) { failedJitBindings . add ( [[ui]] . getKey ( ) ) ; jitBindings . remove ( [[ui]] . getKey ( ) ) ; membersInjectorStore . remove ( [[ui]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[ui]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Create a new annotation . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[checksgot]] { Class < ? > [[capturedtext]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[capturedtext]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Gets the parameters of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[settl]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] parameters = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 109 / 196 / 14 / 319:  32%|███▏      | 319/1000 [41:23<1:28:21,  7.78s/it][Succeeded / Failed / Skipped / Total] 109 / 196 / 14 / 319:  32%|███▏      | 320/1000 [41:35<1:28:23,  7.80s/it][Succeeded / Failed / Skipped / Total] 109 / 197 / 14 / 320:  32%|███▏      | 320/1000 [41:35<1:28:23,  7.80s/it][Succeeded / Failed / Skipped / Total] 109 / 197 / 14 / 320:  32%|███▏      | 321/1000 [41:47<1:28:23,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 198 / 14 / 321:  32%|███▏      | 321/1000 [41:47<1:28:23,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 198 / 14 / 321:  32%|███▏      | 322/1000 [41:54<1:28:14,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 199 / 14 / 322:  32%|███▏      | 322/1000 [41:54<1:28:14,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 199 / 14 / 322:  32%|███▏      | 323/1000 [42:01<1:28:04,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 200 / 14 / 323:  32%|███▏      | 323/1000 [42:01<1:28:04,  7.81s/it][Succeeded / Failed / Skipped / Total] 109 / 200 / 14 / 323:  32%|███▏      | 324/1000 [42:13<1:28:05,  7.82s/it][Succeeded / Failed / Skipped / Total] 109 / 201 / 14 / 324:  32%|███▏      | 324/1000 [42:13<1:28:05,  7.82s/it][Succeeded / Failed / Skipped / Total] 109 / 201 / 14 / 324:  32%|███▎      | 325/1000 [42:14<1:27:44,  7.80s/it][Succeeded / Failed / Skipped / Total] 110 / 201 / 14 / 325:  32%|███▎      | 325/1000 [42:14<1:27:44,  7.80s/it][Succeeded / Failed / Skipped / Total] 110 / 201 / 14 / 325:  33%|███▎      | 326/1000 [42:24<1:27:41,  7.81s/it][Succeeded / Failed / Skipped / Total] 110 / 202 / 14 / 326:  33%|███▎      | 326/1000 [42:24<1:27:41,  7.81s/it][Succeeded / Failed / Skipped / Total] 110 / 202 / 14 / 326:  33%|███▎      | 327/1000 [42:34<1:27:37,  7.81s/it]Returns true if the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean [[boundarypleult]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > [[dprper]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[dprper]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 320 ---------------------------------------------
Create a new injector instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[voidkplayomi]] ( InjectorImpl [[fromeori]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[obdiohorveorus]] = new InjectorFactory ( [[fromeori]] ) ; [[fromeori]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[fromeori]] , key , SourceProvider . UNKNOWN_SOURCE , [[obdiohorveorus]] , Scoping . UNSCOPED , [[obdiohorveorus]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 321 ---------------------------------------------
Returns true if the method has a method . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method a , Method [[f]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 322 ---------------------------------------------
Replies the type of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[stemplate]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Returns true if the given predicate contains the given predicate . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors [[errors]] ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( [[errors]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[measurelarinschedhindfrorondators]] ( Member member , Errors [[services]] ) { Annotation [[aitripourggingachidrations]] = Annotations . findBindingAnnotation ( [[services]] , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[aitripourggingachidrations]] == null ) { return "[[fake]]" != "[[fake]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 324 ---------------------------------------------
Creates a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[varaggar]] ( InjectorImpl injector ) { Key < Logger > [[bold]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[bold]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[bold]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 325 ---------------------------------------------
Resolve the given type . --> Convert a type to a type --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[domains]] ) { TypeLiteral < ? > [ ] [[destination]] = new TypeLiteral < ? > [ [[domains]] . length ] ; for ( int t = 0 ; t < [[domains]] . length ; t ++ ) { [[destination]] [ t ] = resolve ( [[domains]] [ t ] ) ; } return ImmutableList . copyOf ( [[destination]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 326 ---------------------------------------------
Set the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[independentulationemevision]] ( MembersInjector < T > [[gi]] ) { checkState ( this . [[volunteer]] == null , "delegate already initialized" ) ; this . [[volunteer]] = checkNotNull ( [[gi]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 327 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 110 / 203 / 14 / 327:  33%|███▎      | 327/1000 [42:34<1:27:37,  7.81s/it][Succeeded / Failed / Skipped / Total] 110 / 203 / 14 / 327:  33%|███▎      | 328/1000 [42:36<1:27:18,  7.79s/it][Succeeded / Failed / Skipped / Total] 110 / 204 / 14 / 328:  33%|███▎      | 328/1000 [42:36<1:27:18,  7.79s/it][Succeeded / Failed / Skipped / Total] 110 / 204 / 14 / 328:  33%|███▎      | 329/1000 [42:45<1:27:12,  7.80s/it][Succeeded / Failed / Skipped / Total] 111 / 204 / 14 / 329:  33%|███▎      | 329/1000 [42:45<1:27:12,  7.80s/it][Succeeded / Failed / Skipped / Total] 111 / 204 / 14 / 329:  33%|███▎      | 330/1000 [42:50<1:26:58,  7.79s/it][Succeeded / Failed / Skipped / Total] 111 / 205 / 14 / 330:  33%|███▎      | 330/1000 [42:50<1:26:58,  7.79s/it][Succeeded / Failed / Skipped / Total] 111 / 205 / 14 / 330:  33%|███▎      | 331/1000 [42:53<1:26:40,  7.77s/it][Succeeded / Failed / Skipped / Total] 112 / 205 / 14 / 331:  33%|███▎      | 331/1000 [42:53<1:26:40,  7.77s/it][Succeeded / Failed / Skipped / Total] 112 / 205 / 14 / 331:  33%|███▎      | 332/1000 [43:00<1:26:31,  7.77s/it][Succeeded / Failed / Skipped / Total] 113 / 205 / 14 / 332:  33%|███▎      | 332/1000 [43:00<1:26:31,  7.77s/it][Succeeded / Failed / Skipped / Total] 113 / 205 / 14 / 332:  33%|███▎      | 333/1000 [43:06<1:26:21,  7.77s/it][Succeeded / Failed / Skipped / Total] 113 / 206 / 14 / 333:  33%|███▎      | 333/1000 [43:06<1:26:21,  7.77s/it][Succeeded / Failed / Skipped / Total] 113 / 206 / 14 / 333:  33%|███▎      | 334/1000 [43:21<1:26:28,  7.79s/it][Succeeded / Failed / Skipped / Total] 114 / 206 / 14 / 334:  33%|███▎      | 334/1000 [43:21<1:26:28,  7.79s/it][Succeeded / Failed / Skipped / Total] 114 / 206 / 14 / 334:  34%|███▎      | 335/1000 [43:23<1:26:07,  7.77s/it]Returns whether or not the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[generalel]] ( ClassLoader [[windowholiver]] ) { return [[windowholiver]] != null ? [[windowholiver]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 328 ---------------------------------------------
Returns the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[typeLiteral]] ) { Type type = [[typeLiteral]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[typeLiteral]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > [[designlicarod]] ) { Type type = [[designlicarod]] . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( [[designlicarod]] ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( [[designlicarod]] . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
Loads the class file . --> Loads a class --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[itstrimallgetficoglimp]] ( ClassLoader [[dataexportr]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[dataexportr]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 330 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[buildthikator]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 331 ---------------------------------------------
Indicates if the given statements is valid . --> Converts a form to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[openvodelixantformforms]] ( InjectorImpl [[atdstring]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 332 ---------------------------------------------
Validates the errors . --> Validates validation errors --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[mistatawastardeshiscriptures]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 333 ---------------------------------------------
Throw a IllegalArgumentException . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[claimtywrck]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 334 ---------------------------------------------
Static factory method for creating a scope . --> Gets the scope of the given object --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[andictargument]] , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 335 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 207 / 14 / 335:  34%|███▎      | 335/1000 [43:23<1:26:07,  7.77s/it][Succeeded / Failed / Skipped / Total] 114 / 207 / 14 / 335:  34%|███▎      | 336/1000 [43:28<1:25:54,  7.76s/it][Succeeded / Failed / Skipped / Total] 115 / 207 / 14 / 336:  34%|███▎      | 336/1000 [43:28<1:25:54,  7.76s/it][Succeeded / Failed / Skipped / Total] 115 / 207 / 14 / 336:  34%|███▎      | 337/1000 [43:31<1:25:37,  7.75s/it][Succeeded / Failed / Skipped / Total] 115 / 208 / 14 / 337:  34%|███▎      | 337/1000 [43:31<1:25:37,  7.75s/it][Succeeded / Failed / Skipped / Total] 115 / 208 / 14 / 337:  34%|███▍      | 338/1000 [43:54<1:26:00,  7.80s/it][Succeeded / Failed / Skipped / Total] 115 / 209 / 14 / 338:  34%|███▍      | 338/1000 [43:54<1:26:00,  7.80s/it][Succeeded / Failed / Skipped / Total] 115 / 209 / 14 / 338:  34%|███▍      | 339/1000 [43:59<1:25:46,  7.79s/it][Succeeded / Failed / Skipped / Total] 115 / 210 / 14 / 339:  34%|███▍      | 339/1000 [43:59<1:25:46,  7.79s/it][Succeeded / Failed / Skipped / Total] 115 / 210 / 14 / 339:  34%|███▍      | 340/1000 [44:09<1:25:43,  7.79s/it][Succeeded / Failed / Skipped / Total] 115 / 211 / 14 / 340:  34%|███▍      | 340/1000 [44:09<1:25:43,  7.79s/it][Succeeded / Failed / Skipped / Total] 115 / 211 / 14 / 340:  34%|███▍      | 341/1000 [44:13<1:25:28,  7.78s/it][Succeeded / Failed / Skipped / Total] 115 / 212 / 14 / 341:  34%|███▍      | 341/1000 [44:13<1:25:28,  7.78s/it][Succeeded / Failed / Skipped / Total] 115 / 212 / 14 / 341:  34%|███▍      | 342/1000 [44:39<1:25:54,  7.83s/it]Set the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[ndestom]] ( Object [ ] [[naes]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[naes]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Revokes the servlet . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[voidgeapompray]] ( ServletRequest [[esformlerreaxt]] , final ManagedServletPipeline [[etvarlaywoway]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 337 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[extended]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Replies if the given type is an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[altherannedancetotame]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 339 ---------------------------------------------
Looks for a public constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( member instanceof Constructor ) { parameterTypes = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[genre]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[genre]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 340 ---------------------------------------------
Get the scope for the given scope --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[injector]] , Errors [[errors]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[injector]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[errors]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl [[endft]] , Errors [[failures]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = [[endft]] . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[failures]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 341 ---------------------------------------------
Replaces the path with the given path . --> [[[FAILED]]]

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[route]] ) { StringBuilder sb = new StringBuilder ( [[route]] . length ( ) ) ; int queryStart = [[route]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[route]] . substring ( queryStart ) ; [[route]] = [[route]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 213 / 14 / 342:  34%|███▍      | 342/1000 [44:39<1:25:54,  7.83s/it][Succeeded / Failed / Skipped / Total] 115 / 213 / 14 / 342:  34%|███▍      | 343/1000 [44:49<1:25:51,  7.84s/it][Succeeded / Failed / Skipped / Total] 116 / 213 / 14 / 343:  34%|███▍      | 343/1000 [44:49<1:25:51,  7.84s/it][Succeeded / Failed / Skipped / Total] 116 / 213 / 14 / 343:  34%|███▍      | 344/1000 [44:53<1:25:36,  7.83s/it][Succeeded / Failed / Skipped / Total] 116 / 214 / 14 / 344:  34%|███▍      | 344/1000 [44:53<1:25:36,  7.83s/it][Succeeded / Failed / Skipped / Total] 116 / 214 / 14 / 344:  34%|███▍      | 345/1000 [44:55<1:25:16,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 215 / 14 / 345:  34%|███▍      | 345/1000 [44:55<1:25:16,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 215 / 14 / 345:  35%|███▍      | 346/1000 [45:00<1:25:04,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 216 / 14 / 346:  35%|███▍      | 346/1000 [45:00<1:25:04,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 216 / 14 / 346:  35%|███▍      | 347/1000 [45:10<1:25:01,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 217 / 14 / 347:  35%|███▍      | 347/1000 [45:10<1:25:01,  7.81s/it][Succeeded / Failed / Skipped / Total] 116 / 217 / 14 / 347:  35%|███▍      | 348/1000 [45:32<1:25:18,  7.85s/it][Succeeded / Failed / Skipped / Total] 116 / 218 / 14 / 348:  35%|███▍      | 348/1000 [45:32<1:25:18,  7.85s/it][Succeeded / Failed / Skipped / Total] 116 / 218 / 14 / 348:  35%|███▍      | 349/1000 [45:37<1:25:07,  7.85s/it]Find annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[annotationType]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[annotationType]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[annotationType]] ) ; } else { found = [[annotationType]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > [[anducatytext]] = annotation . annotationType ( ) ; if ( isScopeAnnotation ( [[anducatytext]] ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , [[anducatytext]] ) ; } else { found = [[anducatytext]] ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 343 ---------------------------------------------
Bind a binder . --> Initialize the binder --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[addedinitiativefrxtlicereldling]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Returns the description of the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[numErrorsBefore]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[numErrorsBefore]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int [[digitalterratorsorefote]] = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( [[digitalterratorsorefote]] ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 345 ---------------------------------------------
Gets the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[annotationType]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[logograph]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[aveitetaiclass]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[aveitetaiclass]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 346 ---------------------------------------------
Sets the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[alphabetdenegan]] ( Provider < T > [[volunteer]] ) { checkState ( this . [[client]] == null , "delegate already initialized" ) ; this . [[client]] = checkNotNull ( [[volunteer]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 347 ---------------------------------------------
Get the constructor for the given constructor --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[qoflyi]] , Errors [[incorrect]] ) throws ErrorsException { return cache . get ( [[qoflyi]] , [[incorrect]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Binds the given key . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[enteringettegendler]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[commodityface]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[enteringettegendler]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[enteringettegendler]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[commodityface]] ) ) ; return [[commodityface]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 116 / 219 / 14 / 349:  35%|███▍      | 349/1000 [45:38<1:25:07,  7.85s/it][Succeeded / Failed / Skipped / Total] 116 / 219 / 14 / 349:  35%|███▌      | 350/1000 [45:50<1:25:08,  7.86s/it][Succeeded / Failed / Skipped / Total] 116 / 220 / 14 / 350:  35%|███▌      | 350/1000 [45:50<1:25:08,  7.86s/it][Succeeded / Failed / Skipped / Total] 116 / 220 / 14 / 350:  35%|███▌      | 351/1000 [45:53<1:24:51,  7.84s/it][Succeeded / Failed / Skipped / Total] 116 / 221 / 14 / 351:  35%|███▌      | 351/1000 [45:53<1:24:51,  7.84s/it][Succeeded / Failed / Skipped / Total] 116 / 221 / 14 / 351:  35%|███▌      | 352/1000 [46:00<1:24:41,  7.84s/it][Succeeded / Failed / Skipped / Total] 117 / 221 / 14 / 352:  35%|███▌      | 352/1000 [46:00<1:24:41,  7.84s/it][Succeeded / Failed / Skipped / Total] 117 / 221 / 14 / 352:  35%|███▌      | 353/1000 [46:10<1:24:38,  7.85s/it][Succeeded / Failed / Skipped / Total] 118 / 221 / 14 / 353:  35%|███▌      | 353/1000 [46:10<1:24:38,  7.85s/it][Succeeded / Failed / Skipped / Total] 118 / 221 / 14 / 353:  35%|███▌      | 354/1000 [46:46<1:25:22,  7.93s/it][Succeeded / Failed / Skipped / Total] 118 / 222 / 14 / 354:  35%|███▌      | 354/1000 [46:46<1:25:22,  7.93s/it][Succeeded / Failed / Skipped / Total] 118 / 222 / 14 / 354:  36%|███▌      | 355/1000 [46:54<1:25:13,  7.93s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 14 / 355:  36%|███▌      | 355/1000 [46:54<1:25:13,  7.93s/it][Succeeded / Failed / Skipped / Total] 118 / 223 / 14 / 355:  36%|███▌      | 356/1000 [46:54<1:24:51,  7.91s/it]Returns true if the given annotation is a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[setsrel]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "[[clear]]" == "[[clear]]" ; } } return "[[be]]" != "[[be]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 350 ---------------------------------------------
Constructs a new instance of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( [[parameters]] ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext [[perspective]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[d]] ; try { Object [ ] [[canvas]] = SingleParameterInjector . getAll ( [[perspective]] , parameterInjectors ) ; [[d]] = constructionProxy . newInstance ( [[canvas]] ) ; constructionContext . setProxyDelegates ( [[d]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 351 ---------------------------------------------
Return the module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module forModule ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module forModule ( Module [[base]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 352 ---------------------------------------------
Returns all methods for the given methods . --> Convenience method for testing methods --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[likeesttreedelapand]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 353 ---------------------------------------------
Convert a String to a string . --> Return a list of masterstandrs --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < [[sourcesAsStrings]] . length ; [[i]] ++ ) { [[sourcesAsStrings]] [ [[i]] ] = Errors . convert ( [[sourcesAsStrings]] [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[exporttimeurse]] ( ) throws ObjectStreamException { Object [ ] [[mastersdisolingst]] = sources . toArray ( ) ; for ( int [[h]] = 0 ; [[h]] < [[mastersdisolingst]] . length ; [[h]] ++ ) { [[mastersdisolingst]] [ [[h]] ] = Errors . convert ( [[mastersdisolingst]] [ [[h]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[mastersdisolingst]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 354 ---------------------------------------------
Checks if the given message contains the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > [[messageanterite]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[messageanterite]] ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[bob]]" != "[[bob]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 355 ---------------------------------------------
Bind a binder to a binder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > [[keyType]] , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , [[keyType]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[keyType]] , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[keyType]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder binder , TypeLiteral < K > [[baseport]] , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , [[baseport]] , valueType , valueTypeAndAnnotation . ofType ( mapOf ( [[baseport]] , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[baseport]] , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 223 / 14 / 356:  36%|███▌      | 356/1000 [46:54<1:24:51,  7.91s/it][Succeeded / Failed / Skipped / Total] 119 / 223 / 14 / 356:  36%|███▌      | 357/1000 [47:00<1:24:39,  7.90s/it][Succeeded / Failed / Skipped / Total] 120 / 223 / 14 / 357:  36%|███▌      | 357/1000 [47:00<1:24:39,  7.90s/it][Succeeded / Failed / Skipped / Total] 120 / 223 / 14 / 357:  36%|███▌      | 358/1000 [47:10<1:24:35,  7.91s/it][Succeeded / Failed / Skipped / Total] 120 / 224 / 14 / 358:  36%|███▌      | 358/1000 [47:10<1:24:35,  7.91s/it][Succeeded / Failed / Skipped / Total] 120 / 224 / 14 / 358:  36%|███▌      | 359/1000 [47:10<1:24:14,  7.89s/it][Succeeded / Failed / Skipped / Total] 120 / 224 / 15 / 359:  36%|███▌      | 359/1000 [47:10<1:24:14,  7.89s/it][Succeeded / Failed / Skipped / Total] 120 / 224 / 15 / 359:  36%|███▌      | 360/1000 [47:37<1:24:39,  7.94s/it][Succeeded / Failed / Skipped / Total] 120 / 225 / 15 / 360:  36%|███▌      | 360/1000 [47:37<1:24:39,  7.94s/it][Succeeded / Failed / Skipped / Total] 120 / 225 / 15 / 360:  36%|███▌      | 361/1000 [47:39<1:24:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 120 / 226 / 15 / 361:  36%|███▌      | 361/1000 [47:39<1:24:20,  7.92s/it][Succeeded / Failed / Skipped / Total] 120 / 226 / 15 / 361:  36%|███▌      | 362/1000 [47:56<1:24:30,  7.95s/it][Succeeded / Failed / Skipped / Total] 120 / 227 / 15 / 362:  36%|███▌      | 362/1000 [47:56<1:24:30,  7.95s/it][Succeeded / Failed / Skipped / Total] 120 / 227 / 15 / 362:  36%|███▋      | 363/1000 [48:05<1:24:22,  7.95s/it][Succeeded / Failed / Skipped / Total] 120 / 228 / 15 / 363:  36%|███▋      | 363/1000 [48:05<1:24:22,  7.95s/it][Succeeded / Failed / Skipped / Total] 120 / 228 / 15 / 363:  36%|███▋      | 364/1000 [48:05<1:24:02,  7.93s/it]Obtain the constructor for the given parameters . --> Obtain a list of type parameters --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[constructorKeys]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ p ++ ] , errors ) ; [[constructorKeys]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[compileree]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[casamina]] = type . getParameterTypes ( [[compileree]] ) ; Annotation [ ] [ ] paramAnnotations = [[compileree]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > [[forgeturcassets]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[casamina]] ) { Key < ? > paramKey = Annotations . getKey ( param , [[compileree]] , paramAnnotations [ p ++ ] , errors ) ; [[forgeturcassets]] . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 357 ---------------------------------------------
Returns a dependency of the given annotation . --> Returns a set of deprecations --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[dialodementface]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[dialodementface]] == null || ! [[dialodementface]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 358 ---------------------------------------------
Build a set of annotated recursive . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[obtainlefenintures]] ( InjectionPoint [[telloreray]] , TypeLiteral < ? > [[assembly]] ) { ImmutableSet . Builder < Dependency < ? > > [[construction]] = ImmutableSet . builder ( ) ; [[construction]] . addAll ( [[telloreray]] . getDependencies ( ) ) ; if ( ! [[assembly]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[assembly]] ) ) { [[construction]] . addAll ( ip . getDependencies ( ) ) ; } } return [[construction]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 359 ---------------------------------------------
Generates a string representation of a given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Invoke a method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[destade]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 361 ---------------------------------------------
Replies the data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] [[args]] , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[printbuixeaonsymunwer]] ( final Method method , final Object [ ] [[abgles]] , final AssistData [[table]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[table]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Returns the filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[startserffilter]] ( HttpServletRequest [[command]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[command]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 363 ---------------------------------------------
Checks if a string is present . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[gotconve]] ( Constructor [[bquctor]] ) { return [[bquctor]] . isAnnotationPresent ( Inject . class ) || [[bquctor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
[Succeeded / Failed / Skipped / Total] 120 / 229 / 15 / 364:  36%|███▋      | 364/1000 [48:05<1:24:02,  7.93s/it][Succeeded / Failed / Skipped / Total] 120 / 229 / 15 / 364:  36%|███▋      | 365/1000 [48:10<1:23:48,  7.92s/it][Succeeded / Failed / Skipped / Total] 121 / 229 / 15 / 365:  36%|███▋      | 365/1000 [48:10<1:23:48,  7.92s/it][Succeeded / Failed / Skipped / Total] 121 / 229 / 15 / 365:  37%|███▋      | 366/1000 [48:24<1:23:51,  7.94s/it][Succeeded / Failed / Skipped / Total] 122 / 229 / 15 / 366:  37%|███▋      | 366/1000 [48:24<1:23:51,  7.94s/it][Succeeded / Failed / Skipped / Total] 122 / 229 / 15 / 366:  37%|███▋      | 367/1000 [48:26<1:23:33,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 230 / 15 / 367:  37%|███▋      | 367/1000 [48:26<1:23:33,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 230 / 15 / 367:  37%|███▋      | 368/1000 [48:31<1:23:19,  7.91s/it][Succeeded / Failed / Skipped / Total] 122 / 231 / 15 / 368:  37%|███▋      | 368/1000 [48:31<1:23:19,  7.91s/it][Succeeded / Failed / Skipped / Total] 122 / 231 / 15 / 368:  37%|███▋      | 369/1000 [48:37<1:23:08,  7.91s/it][Succeeded / Failed / Skipped / Total] 122 / 232 / 15 / 369:  37%|███▋      | 369/1000 [48:37<1:23:08,  7.91s/it][Succeeded / Failed / Skipped / Total] 122 / 232 / 15 / 369:  37%|███▋      | 370/1000 [48:51<1:23:11,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 233 / 15 / 370:  37%|███▋      | 370/1000 [48:51<1:23:11,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 233 / 15 / 370:  37%|███▋      | 371/1000 [48:59<1:23:04,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 234 / 15 / 371:  37%|███▋      | 371/1000 [48:59<1:23:04,  7.92s/it][Succeeded / Failed / Skipped / Total] 122 / 234 / 15 / 371:  37%|███▋      | 372/1000 [49:17<1:23:12,  7.95s/it]--------------------------------------------- Result 364 ---------------------------------------------
Gets the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[createopermetlyynciinver]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
A convenience method for getting a binder . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > [[key]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , [[key]] ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[futureactsorbidger]] ( Binder binder , Key < T > [[field]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[drawing]] = new RealMultibinder <> ( binder , [[field]] ) ; binder . install ( [[drawing]] ) ; return [[drawing]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 366 ---------------------------------------------
Return the module for the given module . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[formedobial]] ( Object [[description]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[description]] , "[[x]]" != "[[x]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 367 ---------------------------------------------
Returns true if the given dependency is a dependency . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[classcllyvarlpglimdentsmeardact]] ( Set < Dependency < ? > > [[trirelationships]] , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 368 ---------------------------------------------
Add a set of builders to this builder . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[datampceattistentes]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 369 ---------------------------------------------
Gets the member of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member [[user]] ) { Preconditions . checkArgument ( type == [[user]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[user]] , [[user]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[user]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
Initialize the injector . --> [[[FAILED]]]

[[[[Adv]]]]: void initialize ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors [[operations]] ) { injector . lookups = injector ; new LookupProcessor ( [[operations]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
A convenience method for creating a CallableFuture . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[pulllane]] ) { return wrap ( [[pulllane]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 235 / 15 / 372:  37%|███▋      | 372/1000 [49:17<1:23:12,  7.95s/it][Succeeded / Failed / Skipped / Total] 122 / 235 / 15 / 372:  37%|███▋      | 373/1000 [49:19<1:22:55,  7.94s/it][Succeeded / Failed / Skipped / Total] 122 / 236 / 15 / 373:  37%|███▋      | 373/1000 [49:19<1:22:55,  7.94s/it][Succeeded / Failed / Skipped / Total] 122 / 236 / 15 / 373:  37%|███▋      | 374/1000 [49:27<1:22:46,  7.93s/it][Succeeded / Failed / Skipped / Total] 122 / 237 / 15 / 374:  37%|███▋      | 374/1000 [49:27<1:22:46,  7.93s/it][Succeeded / Failed / Skipped / Total] 122 / 237 / 15 / 374:  38%|███▊      | 375/1000 [49:56<1:23:13,  7.99s/it][Succeeded / Failed / Skipped / Total] 122 / 238 / 15 / 375:  38%|███▊      | 375/1000 [49:56<1:23:13,  7.99s/it][Succeeded / Failed / Skipped / Total] 122 / 238 / 15 / 375:  38%|███▊      | 376/1000 [50:06<1:23:09,  8.00s/it][Succeeded / Failed / Skipped / Total] 122 / 239 / 15 / 376:  38%|███▊      | 376/1000 [50:06<1:23:09,  8.00s/it][Succeeded / Failed / Skipped / Total] 122 / 239 / 15 / 376:  38%|███▊      | 377/1000 [50:40<1:23:44,  8.06s/it][Succeeded / Failed / Skipped / Total] 122 / 240 / 15 / 377:  38%|███▊      | 377/1000 [50:40<1:23:44,  8.06s/it][Succeeded / Failed / Skipped / Total] 122 / 240 / 15 / 377:  38%|███▊      | 378/1000 [50:46<1:23:33,  8.06s/it]Allocate a new callable . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[carolefine]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[carolefine]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
Returns the value of the given object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[minaatorsexspmisianpture]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Obtains the annotation for the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[assnowokament]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 375 ---------------------------------------------
Creates a new annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[create]] ( Class < T > [[field]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[field]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Replies the annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[graphynot]] ( Annotation [[arcovat]] ) { checkNotNull ( [[arcovat]] , "annotation" ) ; Class < ? extends Annotation > [[basedundatorotype]] = [[arcovat]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[basedundatorotype]] ) ; ensureIsBindingAnnotation ( [[basedundatorotype]] ) ; if ( Annotations . isMarker ( [[basedundatorotype]] ) ) { return new AnnotationTypeStrategy ( [[basedundatorotype]] , [[arcovat]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[arcovat]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return strategyFor ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > [[enoxtonture]] ) { [[enoxtonture]] = Annotations . canonicalizeIfNamed ( [[enoxtonture]] ) ; if ( isAllDefaultMethods ( [[enoxtonture]] ) ) { return strategyFor ( generateAnnotation ( [[enoxtonture]] ) ) ; } checkNotNull ( [[enoxtonture]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[enoxtonture]] ) ; ensureIsBindingAnnotation ( [[enoxtonture]] ) ; return new AnnotationTypeStrategy ( [[enoxtonture]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 241 / 15 / 378:  38%|███▊      | 378/1000 [50:46<1:23:33,  8.06s/it][Succeeded / Failed / Skipped / Total] 122 / 241 / 15 / 378:  38%|███▊      | 379/1000 [50:58<1:23:31,  8.07s/it][Succeeded / Failed / Skipped / Total] 122 / 242 / 15 / 379:  38%|███▊      | 379/1000 [50:58<1:23:31,  8.07s/it][Succeeded / Failed / Skipped / Total] 122 / 242 / 15 / 379:  38%|███▊      | 380/1000 [51:15<1:23:37,  8.09s/it][Succeeded / Failed / Skipped / Total] 123 / 242 / 15 / 380:  38%|███▊      | 380/1000 [51:15<1:23:37,  8.09s/it][Succeeded / Failed / Skipped / Total] 123 / 242 / 15 / 380:  38%|███▊      | 381/1000 [51:24<1:23:31,  8.10s/it][Succeeded / Failed / Skipped / Total] 123 / 243 / 15 / 381:  38%|███▊      | 381/1000 [51:24<1:23:31,  8.10s/it][Succeeded / Failed / Skipped / Total] 123 / 243 / 15 / 381:  38%|███▊      | 382/1000 [51:25<1:23:11,  8.08s/it]Creates a new builder for a given set of members . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[assemblylight]] : injectionPoints ) { try { Errors errorsForMember = [[assemblylight]] . isOptional ( ) ? new Errors ( [[assemblylight]] ) : errors . withSource ( [[assemblylight]] ) ; SingleMemberInjector injector = [[assemblylight]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[anprograms]] , [[assemblylight]] , errorsForMember ) : new SingleMethodInjector ( this . [[anprograms]] , [[assemblylight]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
Get the source type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[wantleiizingforurset]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Returns a list of measurements . --> Converts a map to a map --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String [[heading]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[cause]] = errorMessage . getCause ( ) ; if ( displayCauses && [[cause]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[cause]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[cause]] ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[cause]] . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String [[format]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[format]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable [[subject]] = errorMessage . getCause ( ) ; if ( displayCauses && [[subject]] != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( [[subject]] ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( [[subject]] ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , [[subject]] . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 381 ---------------------------------------------
Create a formatted message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[find]] ( String [[wordduform]] , Object ... arguments ) { return [[find]] ( null , [[wordduform]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 123 / 244 / 15 / 382:  38%|███▊      | 382/1000 [51:25<1:23:11,  8.08s/it][Succeeded / Failed / Skipped / Total] 123 / 244 / 15 / 382:  38%|███▊      | 383/1000 [51:32<1:23:01,  8.07s/it][Succeeded / Failed / Skipped / Total] 123 / 245 / 15 / 383:  38%|███▊      | 383/1000 [51:32<1:23:01,  8.07s/it][Succeeded / Failed / Skipped / Total] 123 / 245 / 15 / 383:  38%|███▊      | 384/1000 [51:43<1:22:58,  8.08s/it][Succeeded / Failed / Skipped / Total] 124 / 245 / 15 / 384:  38%|███▊      | 384/1000 [51:43<1:22:58,  8.08s/it][Succeeded / Failed / Skipped / Total] 124 / 245 / 15 / 384:  38%|███▊      | 385/1000 [51:53<1:22:53,  8.09s/it][Succeeded / Failed / Skipped / Total] 124 / 246 / 15 / 385:  38%|███▊      | 385/1000 [51:53<1:22:53,  8.09s/it][Succeeded / Failed / Skipped / Total] 124 / 246 / 15 / 385:  39%|███▊      | 386/1000 [51:55<1:22:35,  8.07s/it][Succeeded / Failed / Skipped / Total] 124 / 247 / 15 / 386:  39%|███▊      | 386/1000 [51:55<1:22:35,  8.07s/it][Succeeded / Failed / Skipped / Total] 124 / 247 / 15 / 386:  39%|███▊      | 387/1000 [52:07<1:22:33,  8.08s/it][Succeeded / Failed / Skipped / Total] 125 / 247 / 15 / 387:  39%|███▊      | 387/1000 [52:07<1:22:33,  8.08s/it][Succeeded / Failed / Skipped / Total] 125 / 247 / 15 / 387:  39%|███▉      | 388/1000 [52:18<1:22:29,  8.09s/it]Replies the stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[crundshakchar]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 383 ---------------------------------------------
Build a set of classes . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int [[numErrorsBefore]] = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( [[numErrorsBefore]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[drawdedluallls]] ( TypeLiteral < T > type , Errors [[fails]] ) throws ErrorsException { int [[poserlorsanفise]] = [[fails]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[fails]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[fails]] ) ; [[fails]] . throwIfNewErrors ( [[poserlorsanفise]] ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[fails]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[fails]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; [[fails]] . throwIfNewErrors ( [[poserlorsanفise]] ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to an object . --> Returns the origin of the origin --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource [[source]] = null ; if ( o instanceof ElementSource ) { [[source]] = ( ElementSource ) o ; o = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( o , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[reduction]] ( Object o ) { ElementSource [[origin]] = null ; if ( o instanceof ElementSource ) { [[origin]] = ( ElementSource ) o ; o = [[origin]] . getDeclaringSource ( ) ; } return [[reduction]] ( o , [[origin]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Creates a Throwable . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[call]] ( Throwable [[invite]] , String messageFormat , Object ... arguments ) { return [[call]] ( [[invite]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 386 ---------------------------------------------
Checks if a class contains a given class . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[shouldsatipped]] ( String [[globalunknown]] ) { return ( parent != null && parent . shouldBeSkipped ( [[globalunknown]] ) ) || classNamesToSkip . contains ( [[globalunknown]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 387 ---------------------------------------------
Creates a formatted message . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > [[sources]] , String [[messageFormat]] , Object ... arguments ) { String message = format ( [[messageFormat]] , arguments ) ; return new Message ( [[sources]] , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[compose]] ( Throwable cause , List < Object > [[targets]] , String [[messengerformeda]] , Object ... arguments ) { String message = format ( [[messengerformeda]] , arguments ) ; return new Message ( [[targets]] , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 248 / 15 / 388:  39%|███▉      | 388/1000 [52:18<1:22:29,  8.09s/it][Succeeded / Failed / Skipped / Total] 125 / 248 / 15 / 388:  39%|███▉      | 389/1000 [52:25<1:22:20,  8.09s/it][Succeeded / Failed / Skipped / Total] 126 / 248 / 15 / 389:  39%|███▉      | 389/1000 [52:25<1:22:20,  8.09s/it][Succeeded / Failed / Skipped / Total] 126 / 248 / 15 / 389:  39%|███▉      | 390/1000 [52:32<1:22:10,  8.08s/it][Succeeded / Failed / Skipped / Total] 126 / 249 / 15 / 390:  39%|███▉      | 390/1000 [52:32<1:22:10,  8.08s/it][Succeeded / Failed / Skipped / Total] 126 / 249 / 15 / 390:  39%|███▉      | 391/1000 [52:32<1:21:50,  8.06s/it][Succeeded / Failed / Skipped / Total] 126 / 250 / 15 / 391:  39%|███▉      | 391/1000 [52:32<1:21:50,  8.06s/it][Succeeded / Failed / Skipped / Total] 126 / 250 / 15 / 391:  39%|███▉      | 392/1000 [52:36<1:21:36,  8.05s/it][Succeeded / Failed / Skipped / Total] 127 / 250 / 15 / 392:  39%|███▉      | 392/1000 [52:36<1:21:36,  8.05s/it][Succeeded / Failed / Skipped / Total] 127 / 250 / 15 / 392:  39%|███▉      | 393/1000 [52:39<1:21:20,  8.04s/it][Succeeded / Failed / Skipped / Total] 127 / 251 / 15 / 393:  39%|███▉      | 393/1000 [52:39<1:21:20,  8.04s/it][Succeeded / Failed / Skipped / Total] 127 / 251 / 15 / 393:  39%|███▉      | 394/1000 [52:43<1:21:06,  8.03s/it][Succeeded / Failed / Skipped / Total] 128 / 251 / 15 / 394:  39%|███▉      | 394/1000 [52:43<1:21:06,  8.03s/it][Succeeded / Failed / Skipped / Total] 128 / 251 / 15 / 394:  40%|███▉      | 395/1000 [52:49<1:20:55,  8.03s/it]Get the name of the module . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[collectroemvorgenericed]] ( List < String > [[dungeonspellmanations]] ) { Preconditions . checkNotNull ( [[dungeonspellmanations]] , "The list of module class names cannot be null." ) ; for ( final String [[mallandie]] : [[dungeonspellmanations]] ) { if ( ! shouldBeSkipped ( [[mallandie]] ) ) { return new StackTraceElement ( [[mallandie]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Creates a new instance of the given type . --> Converts the given value to a String --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[element]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[element]] ; } @ Override public String toString ( ) { return String . valueOf ( [[element]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Main method for testing . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[current]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 391 ---------------------------------------------
Add a key to the current state . --> [[[FAILED]]]

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[key]] , Object source ) { doPushState ( [[key]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[latch]] , Object source ) { doPushState ( [[latch]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 392 ---------------------------------------------
Sets the dependency . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[dependency]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > provider , Dependency < ? > [[legacy]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! [[legacy]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[legacy]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 393 ---------------------------------------------
Pushes the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[previous]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[tail]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[tail]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Add a remote processor . --> Register a processor --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[remoteAddr]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[remoteAddr]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[distributedbridgeri]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[distributedbridgeri]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 395 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 252 / 15 / 395:  40%|███▉      | 395/1000 [52:49<1:20:55,  8.03s/it][Succeeded / Failed / Skipped / Total] 128 / 252 / 15 / 395:  40%|███▉      | 396/1000 [52:52<1:20:38,  8.01s/it][Succeeded / Failed / Skipped / Total] 129 / 252 / 15 / 396:  40%|███▉      | 396/1000 [52:52<1:20:38,  8.01s/it][Succeeded / Failed / Skipped / Total] 129 / 252 / 15 / 396:  40%|███▉      | 397/1000 [52:53<1:20:20,  7.99s/it][Succeeded / Failed / Skipped / Total] 130 / 252 / 15 / 397:  40%|███▉      | 397/1000 [52:53<1:20:20,  7.99s/it][Succeeded / Failed / Skipped / Total] 130 / 252 / 15 / 397:  40%|███▉      | 398/1000 [53:02<1:20:13,  8.00s/it][Succeeded / Failed / Skipped / Total] 131 / 252 / 15 / 398:  40%|███▉      | 398/1000 [53:02<1:20:13,  8.00s/it][Succeeded / Failed / Skipped / Total] 131 / 252 / 15 / 398:  40%|███▉      | 399/1000 [53:02<1:19:53,  7.98s/it][Succeeded / Failed / Skipped / Total] 131 / 252 / 16 / 399:  40%|███▉      | 399/1000 [53:02<1:19:53,  7.98s/it][Succeeded / Failed / Skipped / Total] 131 / 252 / 16 / 399:  40%|████      | 400/1000 [53:13<1:19:50,  7.98s/it][Succeeded / Failed / Skipped / Total] 132 / 252 / 16 / 400:  40%|████      | 400/1000 [53:13<1:19:50,  7.98s/it][Succeeded / Failed / Skipped / Total] 132 / 252 / 16 / 400:  40%|████      | 401/1000 [53:13<1:19:30,  7.96s/it][Succeeded / Failed / Skipped / Total] 132 / 252 / 17 / 401:  40%|████      | 401/1000 [53:13<1:19:30,  7.96s/it][Succeeded / Failed / Skipped / Total] 132 / 252 / 17 / 401:  40%|████      | 402/1000 [53:23<1:19:24,  7.97s/it][Succeeded / Failed / Skipped / Total] 132 / 253 / 17 / 402:  40%|████      | 402/1000 [53:23<1:19:24,  7.97s/it][Succeeded / Failed / Skipped / Total] 132 / 253 / 17 / 402:  40%|████      | 403/1000 [53:26<1:19:09,  7.96s/it][Succeeded / Failed / Skipped / Total] 133 / 253 / 17 / 403:  40%|████      | 403/1000 [53:26<1:19:09,  7.96s/it][Succeeded / Failed / Skipped / Total] 133 / 253 / 17 / 403:  40%|████      | 404/1000 [53:26<1:18:50,  7.94s/it]Execute a task . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[collection]] > [[collection]] getFutureTaskResult ( RunStateRecordedFutureTask < [[collection]] > task , Logger logger ) { [[collection]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Throw a throwable . --> Throws an exception if it is not null . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[baserderchriseject]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 397 ---------------------------------------------
Add a processor to the list of processors . --> Register a connection --> Socre: 1.0

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( [[type]] ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[display]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[cropform]] = this . processors . get ( [[display]] ) ; if ( [[cropform]] == null ) { this . processors . putIfAbsent ( [[display]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[cropform]] = this . processors . get ( [[display]] ) ; } [[cropform]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 398 ---------------------------------------------
Get the software url . --> Returns the software url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[bygl]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 399 ---------------------------------------------
Decodes bytes from byte array . --> [[[SKIPPED]]]

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 400 ---------------------------------------------
Registers processor . --> Unregister processors --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[brewvocasarchitecture]] ( CommandCode [[mndelimage]] , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( [[mndelimage]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[mndelimage]] , cmd2processors . get ( [[mndelimage]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[mndelimage]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 401 ---------------------------------------------
Clear the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Register processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . [[desktoplagassco]] == null ) { this . [[desktoplagassco]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[desktoplagassco]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 403 ---------------------------------------------
Returns a new remote host . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[fornightputatortestlikesonst]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
[Succeeded / Failed / Skipped / Total] 133 / 253 / 18 / 404:  40%|████      | 404/1000 [53:26<1:18:50,  7.94s/it][Succeeded / Failed / Skipped / Total] 133 / 253 / 18 / 404:  40%|████      | 405/1000 [53:34<1:18:42,  7.94s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 18 / 405:  40%|████      | 405/1000 [53:34<1:18:42,  7.94s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 18 / 405:  41%|████      | 406/1000 [53:34<1:18:23,  7.92s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 19 / 406:  41%|████      | 406/1000 [53:34<1:18:23,  7.92s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 19 / 406:  41%|████      | 407/1000 [53:34<1:18:03,  7.90s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 20 / 407:  41%|████      | 407/1000 [53:34<1:18:03,  7.90s/it][Succeeded / Failed / Skipped / Total] 134 / 253 / 20 / 407:  41%|████      | 408/1000 [53:38<1:17:50,  7.89s/it][Succeeded / Failed / Skipped / Total] 134 / 254 / 20 / 408:  41%|████      | 408/1000 [53:38<1:17:50,  7.89s/it][Succeeded / Failed / Skipped / Total] 134 / 254 / 20 / 408:  41%|████      | 409/1000 [53:44<1:17:39,  7.88s/it][Succeeded / Failed / Skipped / Total] 134 / 255 / 20 / 409:  41%|████      | 409/1000 [53:44<1:17:39,  7.88s/it][Succeeded / Failed / Skipped / Total] 134 / 255 / 20 / 409:  41%|████      | 410/1000 [53:46<1:17:22,  7.87s/it][Succeeded / Failed / Skipped / Total] 135 / 255 / 20 / 410:  41%|████      | 410/1000 [53:46<1:17:22,  7.87s/it][Succeeded / Failed / Skipped / Total] 135 / 255 / 20 / 410:  41%|████      | 411/1000 [53:54<1:17:15,  7.87s/it][Succeeded / Failed / Skipped / Total] 136 / 255 / 20 / 411:  41%|████      | 411/1000 [53:54<1:17:15,  7.87s/it][Succeeded / Failed / Skipped / Total] 136 / 255 / 20 / 411:  41%|████      | 412/1000 [54:10<1:17:19,  7.89s/it][Succeeded / Failed / Skipped / Total] 136 / 256 / 20 / 412:  41%|████      | 412/1000 [54:10<1:17:19,  7.89s/it][Succeeded / Failed / Skipped / Total] 136 / 256 / 20 / 412:  41%|████▏     | 413/1000 [54:14<1:17:05,  7.88s/it]--------------------------------------------- Result 404 ---------------------------------------------
Delete a pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 405 ---------------------------------------------
Delete a pool . --> Resume a bucket . --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[pool]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[bucket]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 406 ---------------------------------------------
Adds a connection to the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 407 ---------------------------------------------
remove URL from url --> [[[SKIPPED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Get processor processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . [[cmd2processors]] . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . [[centimetersad23pasymerict]] . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 409 ---------------------------------------------
Returns a map of the pool . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > [[allConnections]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[allConnections]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[allConnections]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[bithall]] ( ) { Map < String , List < Connection > > [[luckvarnenunions]] = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { [[luckvarnenunions]] . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return [[luckvarnenunions]] ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 410 ---------------------------------------------
Create a new connection . --> Get a rerandrandr --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[allanderectricpragetiverwyp]] ( Url [[andr]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 411 ---------------------------------------------
Sets the value of the specified property . --> Add a value to the map --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[storeotlbucewobundlonant]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Requests asynchronously . --> [[[FAILED]]]

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > [[tok]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[tok]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[tok]] . next ( ) ; [[tok]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 257 / 20 / 413:  41%|████▏     | 413/1000 [54:14<1:17:05,  7.88s/it][Succeeded / Failed / Skipped / Total] 136 / 257 / 20 / 413:  41%|████▏     | 414/1000 [54:18<1:16:51,  7.87s/it][Succeeded / Failed / Skipped / Total] 137 / 257 / 20 / 414:  41%|████▏     | 414/1000 [54:18<1:16:51,  7.87s/it][Succeeded / Failed / Skipped / Total] 137 / 257 / 20 / 414:  42%|████▏     | 415/1000 [54:18<1:16:33,  7.85s/it][Succeeded / Failed / Skipped / Total] 137 / 257 / 21 / 415:  42%|████▏     | 415/1000 [54:18<1:16:33,  7.85s/it][Succeeded / Failed / Skipped / Total] 137 / 257 / 21 / 415:  42%|████▏     | 416/1000 [54:22<1:16:19,  7.84s/it][Succeeded / Failed / Skipped / Total] 138 / 257 / 21 / 416:  42%|████▏     | 416/1000 [54:22<1:16:19,  7.84s/it][Succeeded / Failed / Skipped / Total] 138 / 257 / 21 / 416:  42%|████▏     | 417/1000 [54:24<1:16:03,  7.83s/it]Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[True]]" == "[[True]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[host]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "[[liar]]" == "[[liar]]" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[cross]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[cross]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Register processors . --> A convenience method for testing purposes --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[_ufconcomprocessors]] ( UserProcessor < ? > [[cache]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[cache]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[cache]] instanceof MultiInterestUserProcessor ) { [[_ufconcomprocessors]] ( ( MultiInterestUserProcessor ) [[cache]] , userProcessors ) ; } else { if ( StringUtils . isBlank ( [[cache]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[cache]] . interest ( ) , [[cache]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[cache]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 415 ---------------------------------------------
Executes the request . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 416 ---------------------------------------------
Registers a processor . --> Unregister a subject --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[interest]] , [[processor]] ) ; if ( preProcessor != null ) { String [[errMsg]] = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > [[memory]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[memory]] . multiInterest ( ) || [[memory]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[subjects]] : [[memory]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[subjects]] , [[memory]] ) ; if ( preProcessor != null ) { String [[grnrc]] = "Processor with interest key [" + [[subjects]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[grnrc]] ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 417 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 257 / 21 / 417:  42%|████▏     | 417/1000 [54:24<1:16:03,  7.83s/it][Succeeded / Failed / Skipped / Total] 139 / 257 / 21 / 417:  42%|████▏     | 418/1000 [54:25<1:15:46,  7.81s/it][Succeeded / Failed / Skipped / Total] 140 / 257 / 21 / 418:  42%|████▏     | 418/1000 [54:25<1:15:46,  7.81s/it][Succeeded / Failed / Skipped / Total] 140 / 257 / 21 / 418:  42%|████▏     | 419/1000 [54:30<1:15:35,  7.81s/it][Succeeded / Failed / Skipped / Total] 141 / 257 / 21 / 419:  42%|████▏     | 419/1000 [54:30<1:15:35,  7.81s/it][Succeeded / Failed / Skipped / Total] 141 / 257 / 21 / 419:  42%|████▏     | 420/1000 [54:47<1:15:39,  7.83s/it][Succeeded / Failed / Skipped / Total] 142 / 257 / 21 / 420:  42%|████▏     | 420/1000 [54:47<1:15:39,  7.83s/it][Succeeded / Failed / Skipped / Total] 142 / 257 / 21 / 420:  42%|████▏     | 421/1000 [55:05<1:15:45,  7.85s/it][Succeeded / Failed / Skipped / Total] 142 / 258 / 21 / 421:  42%|████▏     | 421/1000 [55:05<1:15:45,  7.85s/it][Succeeded / Failed / Skipped / Total] 142 / 258 / 21 / 421:  42%|████▏     | 422/1000 [55:10<1:15:34,  7.85s/it][Succeeded / Failed / Skipped / Total] 143 / 258 / 21 / 422:  42%|████▏     | 422/1000 [55:10<1:15:34,  7.85s/it][Succeeded / Failed / Skipped / Total] 143 / 258 / 21 / 422:  42%|████▏     | 423/1000 [55:10<1:15:16,  7.83s/it]Handle a command . --> Handle the response . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[calledmedialisevantgosondic]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 418 ---------------------------------------------
Handle a request . --> Handle context . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[summonfisystazesses]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[type]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 419 ---------------------------------------------
Handle a request . --> Executes a command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[dedtot]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 420 ---------------------------------------------
Execute a task . --> Execute a task --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[execution]] ( RemotingContext [[ceax]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( [[ceax]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 421 ---------------------------------------------
Sends a connection . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[oneway]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[eastrran]] ( final Connection conn , final RemotingCommand request ) { try { conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 422 ---------------------------------------------
Converts value to byte array . --> Returns a bitset . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[bs]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[bs]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[bs]] ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet [[base]] = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { [[base]] . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return [[base]] ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 258 / 21 / 423:  42%|████▏     | 423/1000 [55:10<1:15:16,  7.83s/it][Succeeded / Failed / Skipped / Total] 144 / 258 / 21 / 423:  42%|████▏     | 424/1000 [55:12<1:15:00,  7.81s/it][Succeeded / Failed / Skipped / Total] 145 / 258 / 21 / 424:  42%|████▏     | 424/1000 [55:12<1:15:00,  7.81s/it][Succeeded / Failed / Skipped / Total] 145 / 258 / 21 / 424:  42%|████▎     | 425/1000 [55:18<1:14:49,  7.81s/it][Succeeded / Failed / Skipped / Total] 146 / 258 / 21 / 425:  42%|████▎     | 425/1000 [55:18<1:14:49,  7.81s/it][Succeeded / Failed / Skipped / Total] 146 / 258 / 21 / 425:  43%|████▎     | 426/1000 [55:20<1:14:34,  7.80s/it][Succeeded / Failed / Skipped / Total] 147 / 258 / 21 / 426:  43%|████▎     | 426/1000 [55:20<1:14:34,  7.80s/it][Succeeded / Failed / Skipped / Total] 147 / 258 / 21 / 426:  43%|████▎     | 427/1000 [55:21<1:14:16,  7.78s/it][Succeeded / Failed / Skipped / Total] 147 / 258 / 22 / 427:  43%|████▎     | 427/1000 [55:21<1:14:16,  7.78s/it][Succeeded / Failed / Skipped / Total] 147 / 258 / 22 / 427:  43%|████▎     | 428/1000 [55:26<1:14:06,  7.77s/it]Handles the request . --> Handles a transaction --> Socre: 1.0

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand [[cmd]] , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , [[currentTimestamp]] , [[cmd]] . getArriveTime ( ) , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , [[remoteAddr]] , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand [[centimetersds]] , long [[nsmestramb]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[centimetersds]] . getId ( ) , [[nsmestramb]] , [[centimetersds]] . getArriveTime ( ) , ( [[nsmestramb]] - [[centimetersds]] . getArriveTime ( ) ) , [[centimetersds]] . getTimeout ( ) ) ; } String [[budgetadev]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[budgetadev]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[centimetersds]] . getId ( ) , [[budgetadev]] , ( [[nsmestramb]] - [[centimetersds]] . getArriveTime ( ) ) , [[centimetersds]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 424 ---------------------------------------------
Converts a byte array to a byte array . --> Returns the number of bytes . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet [[bs]] ) { int value = 0 ; for ( int i = 0 ; i < [[bs]] . length ( ) ; ++ i ) { if ( [[bs]] . get ( i ) ) { value += 1 << i ; } } if ( [[bs]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bs]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[bobline]] ( BitSet [[bn]] ) { int value = 0 ; for ( int i = 0 ; i < [[bn]] . length ( ) ; ++ i ) { if ( [[bn]] . get ( i ) ) { value += 1 << i ; } } if ( [[bn]] . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + [[bn]] + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 425 ---------------------------------------------
Adds a Task . --> Adds a URL to the server . --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[day]] = new ReconnectTask ( ) ; [[day]] . url = url ; tasks . add ( [[day]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
Stop the connection . --> Shutdown the connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[block]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 427 ---------------------------------------------
Allocate a new pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 258 / 22 / 428:  43%|████▎     | 428/1000 [55:26<1:14:06,  7.77s/it][Succeeded / Failed / Skipped / Total] 148 / 258 / 22 / 428:  43%|████▎     | 429/1000 [55:27<1:13:48,  7.76s/it][Succeeded / Failed / Skipped / Total] 148 / 258 / 23 / 429:  43%|████▎     | 429/1000 [55:27<1:13:48,  7.76s/it][Succeeded / Failed / Skipped / Total] 148 / 258 / 23 / 429:  43%|████▎     | 430/1000 [55:27<1:13:30,  7.74s/it][Succeeded / Failed / Skipped / Total] 148 / 258 / 24 / 430:  43%|████▎     | 430/1000 [55:27<1:13:30,  7.74s/it][Succeeded / Failed / Skipped / Total] 148 / 258 / 24 / 430:  43%|████▎     | 431/1000 [55:36<1:13:24,  7.74s/it][Succeeded / Failed / Skipped / Total] 149 / 258 / 24 / 431:  43%|████▎     | 431/1000 [55:36<1:13:24,  7.74s/it][Succeeded / Failed / Skipped / Total] 149 / 258 / 24 / 431:  43%|████▎     | 432/1000 [55:37<1:13:08,  7.73s/it][Succeeded / Failed / Skipped / Total] 150 / 258 / 24 / 432:  43%|████▎     | 432/1000 [55:37<1:13:08,  7.73s/it][Succeeded / Failed / Skipped / Total] 150 / 258 / 24 / 432:  43%|████▎     | 433/1000 [55:37<1:12:50,  7.71s/it][Succeeded / Failed / Skipped / Total] 150 / 258 / 25 / 433:  43%|████▎     | 433/1000 [55:37<1:12:50,  7.71s/it][Succeeded / Failed / Skipped / Total] 150 / 258 / 25 / 433:  43%|████▎     | 434/1000 [55:46<1:12:43,  7.71s/it][Succeeded / Failed / Skipped / Total] 151 / 258 / 25 / 434:  43%|████▎     | 434/1000 [55:46<1:12:43,  7.71s/it][Succeeded / Failed / Skipped / Total] 151 / 258 / 25 / 434:  44%|████▎     | 435/1000 [55:58<1:12:42,  7.72s/it][Succeeded / Failed / Skipped / Total] 152 / 258 / 25 / 435:  44%|████▎     | 435/1000 [55:58<1:12:42,  7.72s/it][Succeeded / Failed / Skipped / Total] 152 / 258 / 25 / 435:  44%|████▎     | 436/1000 [56:06<1:12:35,  7.72s/it]Adds a connection to the map . --> Populates a list of active connection . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection [[connection]] : connections ) { String serviceStatus = ( String ) [[connection]] . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( [[connection]] . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( [[connection]] ) ) { serviceOffConnections . add ( [[connection]] ) ; } } else { serviceOnConnections . add ( [[connection]] ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection [[border]] : connections ) { String serviceStatus = ( String ) [[border]] . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( [[border]] . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( [[border]] ) ) { serviceOffConnections . add ( [[border]] ) ; } } else { serviceOnConnections . add ( [[border]] ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 429 ---------------------------------------------
Get the boolean value . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 430 ---------------------------------------------
Logs a message . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void infoLog ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
Connect to the peer . --> Called when a tree is received . --> Socre: 1.0

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[lastSelectConnect]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection [[beginningstreecturerunverment]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[beginningstreecturerunverment]] ) { if ( [[beginningstreecturerunverment]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[beginningstreecturerunverment]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[beginningstreecturerunverment]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[beginningstreecturerunverment]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[beginningstreecturerunverment]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 432 ---------------------------------------------
Check if a timeout is valid . --> Sets the default command . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[adenterpowerct]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 433 ---------------------------------------------
Returns the random number of random messages . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 434 ---------------------------------------------
Get the value associated with the given key . --> Returns the value associated with the specified key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[context]] . get ( key ) != null ? ( T ) this . [[context]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[a]] . get ( key ) != null ? ( T ) this . [[a]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Gets the value of the property . --> Gets the form of the form --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[formturhertor]] ( String [[c]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[c]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 436 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 259 / 25 / 436:  44%|████▎     | 436/1000 [56:06<1:12:35,  7.72s/it][Succeeded / Failed / Skipped / Total] 152 / 259 / 25 / 436:  44%|████▎     | 437/1000 [56:07<1:12:18,  7.71s/it][Succeeded / Failed / Skipped / Total] 152 / 260 / 25 / 437:  44%|████▎     | 437/1000 [56:07<1:12:18,  7.71s/it][Succeeded / Failed / Skipped / Total] 152 / 260 / 25 / 437:  44%|████▍     | 438/1000 [56:07<1:12:01,  7.69s/it][Succeeded / Failed / Skipped / Total] 152 / 261 / 25 / 438:  44%|████▍     | 438/1000 [56:07<1:12:01,  7.69s/it][Succeeded / Failed / Skipped / Total] 152 / 261 / 25 / 438:  44%|████▍     | 439/1000 [56:31<1:12:14,  7.73s/it][Succeeded / Failed / Skipped / Total] 152 / 262 / 25 / 439:  44%|████▍     | 439/1000 [56:31<1:12:14,  7.73s/it][Succeeded / Failed / Skipped / Total] 152 / 262 / 25 / 439:  44%|████▍     | 440/1000 [56:35<1:12:01,  7.72s/it]Executes a command . --> [[[FAILED]]]

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[conn]] , final RemotingCommand [[request]] , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[conn]] , [[request]] , [[request]] . getInvokeContext ( ) , invokeCallback ) ; [[conn]] . addInvokeFuture ( future ) ; final int [[requestId]] = [[request]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[connet]] , final RemotingCommand [[trial]] , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( [[connet]] , [[trial]] , [[trial]] . getInvokeContext ( ) , invokeCallback ) ; [[connet]] . addInvokeFuture ( future ) ; final int [[actidi]] = [[trial]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = [[connet]] . removeInvokeFuture ( [[actidi]] ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( [[connet]] . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; [[connet]] . getChannel ( ) . writeAndFlush ( [[trial]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[connet]] . removeInvokeFuture ( [[actidi]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[connet]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[connet]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[connet]] . removeInvokeFuture ( [[actidi]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[connet]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[connet]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 437 ---------------------------------------------
Returns the user name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[receiveretroprocessestully]] ( String [[productym]] ) { return StringUtils . isBlank ( [[productym]] ) ? null : this . [[clientlansassacs]] . get ( [[productym]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 438 ---------------------------------------------
Executes a command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[eminwines]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 439 ---------------------------------------------
Handles a response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[torespectebx]] ( ResponseCommand [[reactionfemaniid]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[reactionfemaniid]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 262 / 25 / 440:  44%|████▍     | 440/1000 [56:35<1:12:01,  7.72s/it][Succeeded / Failed / Skipped / Total] 153 / 262 / 25 / 440:  44%|████▍     | 441/1000 [56:43<1:11:54,  7.72s/it][Succeeded / Failed / Skipped / Total] 153 / 263 / 25 / 441:  44%|████▍     | 441/1000 [56:43<1:11:54,  7.72s/it][Succeeded / Failed / Skipped / Total] 153 / 263 / 25 / 441:  44%|████▍     | 442/1000 [56:44<1:11:38,  7.70s/it][Succeeded / Failed / Skipped / Total] 153 / 264 / 25 / 442:  44%|████▍     | 442/1000 [56:44<1:11:38,  7.70s/it][Succeeded / Failed / Skipped / Total] 153 / 264 / 25 / 442:  44%|████▍     | 443/1000 [56:45<1:11:21,  7.69s/it][Succeeded / Failed / Skipped / Total] 154 / 264 / 25 / 443:  44%|████▍     | 443/1000 [56:45<1:11:21,  7.69s/it][Succeeded / Failed / Skipped / Total] 154 / 264 / 25 / 443:  44%|████▍     | 444/1000 [56:54<1:11:15,  7.69s/it][Succeeded / Failed / Skipped / Total] 155 / 264 / 25 / 444:  44%|████▍     | 444/1000 [56:54<1:11:15,  7.69s/it][Succeeded / Failed / Skipped / Total] 155 / 264 / 25 / 444:  44%|████▍     | 445/1000 [57:09<1:11:17,  7.71s/it][Succeeded / Failed / Skipped / Total] 156 / 264 / 25 / 445:  44%|████▍     | 445/1000 [57:09<1:11:17,  7.71s/it][Succeeded / Failed / Skipped / Total] 156 / 264 / 25 / 445:  45%|████▍     | 446/1000 [57:09<1:11:00,  7.69s/it]Execute a command . --> Extract a string from a string --> Socre: 1.0

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[responseCommand]] , String [[addr]] ) throws RemotingException { preProcess ( [[responseCommand]] , [[addr]] ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , [[addr]] , [[responseCommand]] . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand [[answercommanav]] , String [[bringar]] ) throws RemotingException { preProcess ( [[answercommanav]] , [[bringar]] ) ; if ( [[answercommanav]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[answercommanav]] ) ; } else { String [[jpk]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[answercommanav]] . getResponseStatus ( ) , [[bringar]] , [[answercommanav]] . getId ( ) ) ; logger . warn ( [[jpk]] ) ; if ( [[answercommanav]] . getCause ( ) != null ) { throw new InvokeException ( [[jpk]] , [[answercommanav]] . getCause ( ) ) ; } else { throw new InvokeException ( [[jpk]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
Handles response . --> [[[FAILED]]]

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 442 ---------------------------------------------
Parse the response . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand [[requestsimardu]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[requestsimardu]] ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
Logs a log message . --> Logs a formatted string . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[basevncectumarechaltag]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 444 ---------------------------------------------
Parses a channel . --> Convert a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[ofclassodntcreses]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parses the given IP address . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[kaisametointtraplatessi]] ( final Channel [[show]] ) { if ( null == [[show]] ) { return StringUtils . EMPTY ; } final SocketAddress [[console]] = [[show]] . remoteAddress ( ) ; return doParse ( [[console]] != null ? [[console]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 265 / 25 / 446:  45%|████▍     | 446/1000 [57:09<1:11:00,  7.69s/it][Succeeded / Failed / Skipped / Total] 156 / 265 / 25 / 446:  45%|████▍     | 447/1000 [57:11<1:10:44,  7.68s/it][Succeeded / Failed / Skipped / Total] 156 / 266 / 25 / 447:  45%|████▍     | 447/1000 [57:11<1:10:44,  7.68s/it][Succeeded / Failed / Skipped / Total] 156 / 266 / 25 / 447:  45%|████▍     | 448/1000 [57:23<1:10:43,  7.69s/it][Succeeded / Failed / Skipped / Total] 157 / 266 / 25 / 448:  45%|████▍     | 448/1000 [57:23<1:10:43,  7.69s/it][Succeeded / Failed / Skipped / Total] 157 / 266 / 25 / 448:  45%|████▍     | 449/1000 [57:25<1:10:27,  7.67s/it][Succeeded / Failed / Skipped / Total] 157 / 267 / 25 / 449:  45%|████▍     | 449/1000 [57:25<1:10:27,  7.67s/it][Succeeded / Failed / Skipped / Total] 157 / 267 / 25 / 449:  45%|████▌     | 450/1000 [57:27<1:10:13,  7.66s/it][Succeeded / Failed / Skipped / Total] 157 / 268 / 25 / 450:  45%|████▌     | 450/1000 [57:27<1:10:13,  7.66s/it][Succeeded / Failed / Skipped / Total] 157 / 268 / 25 / 450:  45%|████▌     | 451/1000 [57:28<1:09:57,  7.65s/it][Succeeded / Failed / Skipped / Total] 157 / 269 / 25 / 451:  45%|████▌     | 451/1000 [57:28<1:09:57,  7.65s/it][Succeeded / Failed / Skipped / Total] 157 / 269 / 25 / 451:  45%|████▌     | 452/1000 [57:38<1:09:53,  7.65s/it][Succeeded / Failed / Skipped / Total] 158 / 269 / 25 / 452:  45%|████▌     | 452/1000 [57:38<1:09:53,  7.65s/it][Succeeded / Failed / Skipped / Total] 158 / 269 / 25 / 452:  45%|████▌     | 453/1000 [57:39<1:09:36,  7.64s/it][Succeeded / Failed / Skipped / Total] 158 / 269 / 26 / 453:  45%|████▌     | 453/1000 [57:39<1:09:36,  7.64s/it][Succeeded / Failed / Skipped / Total] 158 / 269 / 26 / 453:  45%|████▌     | 454/1000 [57:42<1:09:24,  7.63s/it][Succeeded / Failed / Skipped / Total] 158 / 270 / 26 / 454:  45%|████▌     | 454/1000 [57:42<1:09:24,  7.63s/it][Succeeded / Failed / Skipped / Total] 158 / 270 / 26 / 454:  46%|████▌     | 455/1000 [57:50<1:09:17,  7.63s/it]Create a server . --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[coversinldecesray]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 447 ---------------------------------------------
Gets the IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[v]] ) { if ( null == [[v]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[v]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Returns a new thread factory . --> Get a thread factory for a given thread --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[futurefacettaatred]] ( int [[getheradi]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[getheradi]] , threadFactory ) : new NioEventLoopGroup ( [[getheradi]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the remote address of the socket . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[coesseorview]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the IPv4 address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[strip]] ) { if ( null == [[strip]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[outside]] = ( InetSocketAddress ) [[strip]] . remoteAddress ( ) ; if ( [[outside]] != null ) { return [[outside]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Parses a IPv4 address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[i]] ) { if ( null == [[i]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[i]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Adds a connection . --> Adds an automatic . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[story]] ) { markAccess ( ) ; if ( null == [[story]] ) { return ; } boolean [[series]] = this . conns . addIfAbsent ( [[story]] ) ; if ( [[series]] ) { [[story]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 453 ---------------------------------------------
Gets the connections . --> [[[SKIPPED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 454 ---------------------------------------------
Returns a channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[consercesletpath]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 455 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 159 / 270 / 26 / 455:  46%|████▌     | 455/1000 [57:50<1:09:17,  7.63s/it][Succeeded / Failed / Skipped / Total] 159 / 270 / 26 / 455:  46%|████▌     | 456/1000 [57:53<1:09:03,  7.62s/it][Succeeded / Failed / Skipped / Total] 160 / 270 / 26 / 456:  46%|████▌     | 456/1000 [57:53<1:09:03,  7.62s/it][Succeeded / Failed / Skipped / Total] 160 / 270 / 26 / 456:  46%|████▌     | 457/1000 [58:04<1:08:59,  7.62s/it][Succeeded / Failed / Skipped / Total] 160 / 271 / 26 / 457:  46%|████▌     | 457/1000 [58:04<1:08:59,  7.62s/it][Succeeded / Failed / Skipped / Total] 160 / 271 / 26 / 457:  46%|████▌     | 458/1000 [58:06<1:08:45,  7.61s/it][Succeeded / Failed / Skipped / Total] 160 / 272 / 26 / 458:  46%|████▌     | 458/1000 [58:06<1:08:45,  7.61s/it][Succeeded / Failed / Skipped / Total] 160 / 272 / 26 / 458:  46%|████▌     | 459/1000 [58:13<1:08:38,  7.61s/it][Succeeded / Failed / Skipped / Total] 161 / 272 / 26 / 459:  46%|████▌     | 459/1000 [58:13<1:08:38,  7.61s/it][Succeeded / Failed / Skipped / Total] 161 / 272 / 26 / 459:  46%|████▌     | 460/1000 [58:14<1:08:21,  7.60s/it][Succeeded / Failed / Skipped / Total] 161 / 272 / 27 / 460:  46%|████▌     | 460/1000 [58:14<1:08:21,  7.60s/it][Succeeded / Failed / Skipped / Total] 161 / 272 / 27 / 460:  46%|████▌     | 461/1000 [58:17<1:08:09,  7.59s/it][Succeeded / Failed / Skipped / Total] 162 / 272 / 27 / 461:  46%|████▌     | 461/1000 [58:17<1:08:09,  7.59s/it][Succeeded / Failed / Skipped / Total] 162 / 272 / 27 / 461:  46%|████▌     | 462/1000 [58:18<1:07:54,  7.57s/it][Succeeded / Failed / Skipped / Total] 162 / 273 / 27 / 462:  46%|████▌     | 462/1000 [58:18<1:07:54,  7.57s/it][Succeeded / Failed / Skipped / Total] 162 / 273 / 27 / 462:  46%|████▋     | 463/1000 [58:25<1:07:45,  7.57s/it]Gets the IP address . --> Obtains an InetSocketAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[taseockeaodrorgoeantock]] ( SocketAddress [[griditwrsh]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[griditwrsh]] ; if ( addrs != null ) { InetAddress [[annexrov]] = addrs . getAddress ( ) ; if ( null != [[annexrov]] ) { return [[annexrov]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 456 ---------------------------------------------
Close the connection . --> Closes the underlying database . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[liaison]] ) { if ( null == [[liaison]] ) { return ; } boolean [[dc]] = this . conns . remove ( [[liaison]] ) ; if ( [[dc]] ) { [[liaison]] . decreaseRef ( ) ; } if ( [[liaison]] . noRef ( ) ) { [[liaison]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 457 ---------------------------------------------
Get a custom class . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[worldtinicdevvalser]] ( String [[storenu]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[storenu]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Gets the custom code command . --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[savetustipvariadiser]] ( CommandCode [[a]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[a]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 459 ---------------------------------------------
Start the monitoring . --> Starts monitoring . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long [[period]] = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , [[period]] , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long [[date]] = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , [[date]] , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 460 ---------------------------------------------
Marks the watermark as bytes . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 461 ---------------------------------------------
Convenience method to extract url from a URL --> Connect to the remote server . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[andconnectivity]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 462 ---------------------------------------------
Registers a custom serializer . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[varplanetheedonsizes]] ( String [[colorlabel]] , CustomSerializer [[parallelator]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[colorlabel]] , [[parallelator]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[colorlabel]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 463 ---------------------------------------------
Returns the number of bytes in the buffer . --> Handles a channel . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[batch]] ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean [[alias]] ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed[Succeeded / Failed / Skipped / Total] 163 / 273 / 27 / 463:  46%|████▋     | 463/1000 [58:25<1:07:45,  7.57s/it][Succeeded / Failed / Skipped / Total] 163 / 273 / 27 / 463:  46%|████▋     | 464/1000 [58:25<1:07:29,  7.56s/it][Succeeded / Failed / Skipped / Total] 163 / 274 / 27 / 464:  46%|████▋     | 464/1000 [58:25<1:07:29,  7.56s/it][Succeeded / Failed / Skipped / Total] 163 / 274 / 27 / 464:  46%|████▋     | 465/1000 [58:25<1:07:13,  7.54s/it][Succeeded / Failed / Skipped / Total] 163 / 274 / 28 / 465:  46%|████▋     | 465/1000 [58:25<1:07:13,  7.54s/it][Succeeded / Failed / Skipped / Total] 163 / 274 / 28 / 465:  47%|████▋     | 466/1000 [58:27<1:06:59,  7.53s/it][Succeeded / Failed / Skipped / Total] 164 / 274 / 28 / 466:  47%|████▋     | 466/1000 [58:27<1:06:59,  7.53s/it][Succeeded / Failed / Skipped / Total] 164 / 274 / 28 / 466:  47%|████▋     | 467/1000 [58:33<1:06:50,  7.52s/it][Succeeded / Failed / Skipped / Total] 164 / 275 / 28 / 467:  47%|████▋     | 467/1000 [58:33<1:06:50,  7.52s/it][Succeeded / Failed / Skipped / Total] 164 / 275 / 28 / 467:  47%|████▋     | 468/1000 [58:36<1:06:37,  7.51s/it][Succeeded / Failed / Skipped / Total] 165 / 275 / 28 / 468:  47%|████▋     | 468/1000 [58:36<1:06:37,  7.51s/it][Succeeded / Failed / Skipped / Total] 165 / 275 / 28 / 468:  47%|████▋     | 469/1000 [58:39<1:06:25,  7.51s/it][Succeeded / Failed / Skipped / Total] 166 / 275 / 28 / 469:  47%|████▋     | 469/1000 [58:39<1:06:25,  7.51s/it][Succeeded / Failed / Skipped / Total] 166 / 275 / 28 / 469:  47%|████▋     | 470/1000 [58:45<1:06:15,  7.50s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 28 / 470:  47%|████▋     | 470/1000 [58:45<1:06:15,  7.50s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 28 / 470:  47%|████▋     | 471/1000 [58:45<1:05:59,  7.48s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 29 / 471:  47%|████▋     | 471/1000 [58:45<1:05:59,  7.48s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 29 / 471:  47%|████▋     | 472/1000 [58:45<1:05:43,  7.47s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 30 / 472:  47%|████▋     | 472/1000 [58:45<1:05:43,  7.47s/it][Succeeded / Failed / Skipped / Total] 167 / 275 / 30 / 472:  47%|████▋     | 473/1000 [58:47<1:05:30,  7.46s/it]
--------------------------------------------- Result 464 ---------------------------------------------
Registers a command . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[rykeipiserbalimeters]] ( CommandCode code , CustomSerializer [[digitalimeters]] ) { CustomSerializer [[renosisolit]] = commandCustomSerializer . putIfAbsent ( code , [[digitalimeters]] ) ; if ( [[renosisolit]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[renosisolit]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
Decrypt a byte buffer . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Sets code . --> Print a warning . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[printbar]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 467 ---------------------------------------------
Returns the opcode stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opframe]] ) { if ( [[opframe]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opframe]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 468 ---------------------------------------------
Validate a string . --> Populate a Frame message . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[authenticaseatitfroom]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 469 ---------------------------------------------
Advances the limit . --> Helper method to create a byte array . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[emitlellachopreloadxollty]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 470 ---------------------------------------------
Returns the protocol . --> Returns a Handrobus subscription . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[supportsmecendtedroptucan]] ( String requestedProtocol ) { for ( IProtocol [[describedstateccano]] : knownProtocols ) { if ( [[describedstateccano]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[describedstateccano]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 471 ---------------------------------------------
Send web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 472 ---------------------------------------------
Send a web socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
[Succeeded / Failed / Skipped / Total] 168 / 275 / 30 / 473:  47%|████▋     | 473/1000 [58:47<1:05:30,  7.46s/it][Succeeded / Failed / Skipped / Total] 168 / 275 / 30 / 473:  47%|████▋     | 474/1000 [58:48<1:05:15,  7.44s/it][Succeeded / Failed / Skipped / Total] 168 / 275 / 31 / 474:  47%|████▋     | 474/1000 [58:48<1:05:15,  7.44s/it][Succeeded / Failed / Skipped / Total] 168 / 275 / 31 / 474:  48%|████▊     | 475/1000 [58:48<1:05:00,  7.43s/it][Succeeded / Failed / Skipped / Total] 169 / 275 / 31 / 475:  48%|████▊     | 475/1000 [58:48<1:05:00,  7.43s/it][Succeeded / Failed / Skipped / Total] 169 / 275 / 31 / 475:  48%|████▊     | 476/1000 [58:49<1:04:45,  7.41s/it][Succeeded / Failed / Skipped / Total] 170 / 275 / 31 / 476:  48%|████▊     | 476/1000 [58:49<1:04:45,  7.41s/it][Succeeded / Failed / Skipped / Total] 170 / 275 / 31 / 476:  48%|████▊     | 477/1000 [58:50<1:04:31,  7.40s/it][Succeeded / Failed / Skipped / Total] 171 / 275 / 31 / 477:  48%|████▊     | 477/1000 [58:50<1:04:31,  7.40s/it][Succeeded / Failed / Skipped / Total] 171 / 275 / 31 / 477:  48%|████▊     | 478/1000 [58:57<1:04:23,  7.40s/it][Succeeded / Failed / Skipped / Total] 172 / 275 / 31 / 478:  48%|████▊     | 478/1000 [58:57<1:04:23,  7.40s/it][Succeeded / Failed / Skipped / Total] 172 / 275 / 31 / 478:  48%|████▊     | 479/1000 [59:02<1:04:12,  7.39s/it]--------------------------------------------- Result 473 ---------------------------------------------
Set the web socket . --> Processes web socket . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[canvas]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[canvas]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 474 ---------------------------------------------
Populates a data buffer . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 475 ---------------------------------------------
Sends a packet . --> Sends a progress . --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[realpacketsize]] ) throws IncompleteException { if ( maxpacketsize < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int [[imaginationweetsis]] ) throws IncompleteException { if ( maxpacketsize < [[imaginationweetsis]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[imaginationweetsis]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 476 ---------------------------------------------
Generate a string representation of a string --> Calculates the algorithm . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[launchbitloce]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 477 ---------------------------------------------
Process a single frame . --> Does nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[motoractivecoginualprrandtext]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 478 ---------------------------------------------
Send a single frame . --> Sends a data to a buffer . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[poweratiesweror]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 275 / 31 / 479:  48%|████▊     | 479/1000 [59:02<1:04:12,  7.39s/it][Succeeded / Failed / Skipped / Total] 173 / 275 / 31 / 479:  48%|████▊     | 480/1000 [59:06<1:04:02,  7.39s/it][Succeeded / Failed / Skipped / Total] 174 / 275 / 31 / 480:  48%|████▊     | 480/1000 [59:06<1:04:02,  7.39s/it][Succeeded / Failed / Skipped / Total] 174 / 275 / 31 / 480:  48%|████▊     | 481/1000 [59:08<1:03:48,  7.38s/it][Succeeded / Failed / Skipped / Total] 174 / 275 / 32 / 481:  48%|████▊     | 481/1000 [59:08<1:03:48,  7.38s/it][Succeeded / Failed / Skipped / Total] 174 / 275 / 32 / 481:  48%|████▊     | 482/1000 [59:14<1:03:40,  7.37s/it][Succeeded / Failed / Skipped / Total] 175 / 275 / 32 / 482:  48%|████▊     | 482/1000 [59:14<1:03:40,  7.37s/it][Succeeded / Failed / Skipped / Total] 175 / 275 / 32 / 482:  48%|████▊     | 483/1000 [59:14<1:03:25,  7.36s/it][Succeeded / Failed / Skipped / Total] 175 / 275 / 33 / 483:  48%|████▊     | 483/1000 [59:14<1:03:25,  7.36s/it][Succeeded / Failed / Skipped / Total] 175 / 275 / 33 / 483:  48%|████▊     | 484/1000 [59:16<1:03:11,  7.35s/it][Succeeded / Failed / Skipped / Total] 176 / 275 / 33 / 484:  48%|████▊     | 484/1000 [59:16<1:03:11,  7.35s/it][Succeeded / Failed / Skipped / Total] 176 / 275 / 33 / 484:  48%|████▊     | 485/1000 [59:23<1:03:03,  7.35s/it][Succeeded / Failed / Skipped / Total] 177 / 275 / 33 / 485:  48%|████▊     | 485/1000 [59:23<1:03:03,  7.35s/it][Succeeded / Failed / Skipped / Total] 177 / 275 / 33 / 485:  49%|████▊     | 486/1000 [59:25<1:02:51,  7.34s/it][Succeeded / Failed / Skipped / Total] 177 / 276 / 33 / 486:  49%|████▊     | 486/1000 [59:25<1:02:51,  7.34s/it][Succeeded / Failed / Skipped / Total] 177 / 276 / 33 / 486:  49%|████▊     | 487/1000 [59:26<1:02:36,  7.32s/it]Calculate the limit size . --> Starts a new limit . --> Socre: 1.0

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long [[cksizes]] = getByteBufferListSize ( ) ; if ( [[cksizes]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[cksizes]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Gets the total size of bytes . --> Allocates a new buffer . --> Socre: 1.0

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long [[amountsex]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[amountsex]] += buffer . limit ( ) ; } } return [[amountsex]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 481 ---------------------------------------------
Build a Handland2 string . --> [[[SKIPPED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 482 ---------------------------------------------
Returns a new ByteBuffer . --> Returns an unmodifiable buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[printpuryar2ridrounitagフrglist]] ( ) throws LimitExceededException { long [[totality]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totality]] += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[totality]] ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 483 ---------------------------------------------
Generates a error response . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
Handle the socket . --> Handles a socket . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[bodam]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 485 ---------------------------------------------
Helper method to close the connection . --> Called when an exception is thrown . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[midunileeedtimeuntionthereerwyoerg]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Sends a connection to the server . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[code]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; [[code]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[processesviewbooll]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[nature]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; [[nature]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 487 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 177 / 276 / 34 / 487:  49%|████▊     | 487/1000 [59:26<1:02:36,  7.32s/it][Succeeded / Failed / Skipped / Total] 177 / 276 / 34 / 487:  49%|████▉     | 488/1000 [59:32<1:02:27,  7.32s/it][Succeeded / Failed / Skipped / Total] 177 / 277 / 34 / 488:  49%|████▉     | 488/1000 [59:32<1:02:27,  7.32s/it][Succeeded / Failed / Skipped / Total] 178 / 277 / 34 / 489:  49%|████▉     | 489/1000 [59:32<1:02:12,  7.31s/it][Succeeded / Failed / Skipped / Total] 178 / 277 / 34 / 489:  49%|████▉     | 490/1000 [59:36<1:02:02,  7.30s/it][Succeeded / Failed / Skipped / Total] 179 / 277 / 34 / 490:  49%|████▉     | 490/1000 [59:36<1:02:02,  7.30s/it][Succeeded / Failed / Skipped / Total] 179 / 278 / 34 / 491:  49%|████▉     | 491/1000 [59:38<1:01:49,  7.29s/it][Succeeded / Failed / Skipped / Total] 179 / 278 / 34 / 491:  49%|████▉     | 492/1000 [59:44<1:01:41,  7.29s/it][Succeeded / Failed / Skipped / Total] 180 / 278 / 34 / 492:  49%|████▉     | 492/1000 [59:44<1:01:41,  7.29s/it][Succeeded / Failed / Skipped / Total] 181 / 278 / 34 / 493:  49%|████▉     | 493/1000 [59:44<1:01:26,  7.27s/it][Succeeded / Failed / Skipped / Total] 181 / 278 / 34 / 493:  49%|████▉     | 494/1000 [59:54<1:01:21,  7.28s/it]Initialize the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Start the thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[fix]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Decrypts the given Handshak2 . --> Converts a string to a string . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[crossmindamekuxpeeseil]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 490 ---------------------------------------------
Generates the error code . --> Adapts an UTF - 8 bytes . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[astutipdesournsucadptra]] ( int errorCode ) { String [[passunedlescriptioned]] ; switch ( errorCode ) { case 404 : [[passunedlescriptioned]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[passunedlescriptioned]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[passunedlescriptioned]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[passunedlescriptioned]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[passunedlescriptioned]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 491 ---------------------------------------------
Send a text . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[sending]] ( String [[string]] ) { if ( [[string]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[sending]] ( draft . createFrames ( [[string]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 492 ---------------------------------------------
Get the scheme . --> Get scheme . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[gettingf]] ( ) { int [[viz]] = uri . getPort ( ) ; if ( [[viz]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[viz]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
Sends a connection to the server . --> Executes a connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[attendattahking]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 278 / 34 / 494:  49%|████▉     | 494/1000 [59:54<1:01:21,  7.28s/it][Succeeded / Failed / Skipped / Total] 182 / 278 / 34 / 494:  50%|████▉     | 495/1000 [59:54<1:01:07,  7.26s/it][Succeeded / Failed / Skipped / Total] 183 / 278 / 34 / 495:  50%|████▉     | 495/1000 [59:54<1:01:07,  7.26s/it][Succeeded / Failed / Skipped / Total] 183 / 278 / 34 / 495:  50%|████▉     | 496/1000 [59:57<1:00:55,  7.25s/it][Succeeded / Failed / Skipped / Total] 184 / 278 / 34 / 496:  50%|████▉     | 496/1000 [59:57<1:00:55,  7.25s/it][Succeeded / Failed / Skipped / Total] 184 / 278 / 34 / 496:  50%|████▉     | 497/1000 [1:00:00<1:00:44,  7.24s/it][Succeeded / Failed / Skipped / Total] 185 / 278 / 34 / 497:  50%|████▉     | 497/1000 [1:00:00<1:00:44,  7.24s/it][Succeeded / Failed / Skipped / Total] 185 / 278 / 34 / 497:  50%|████▉     | 498/1000 [1:00:06<1:00:35,  7.24s/it][Succeeded / Failed / Skipped / Total] 186 / 278 / 34 / 498:  50%|████▉     | 498/1000 [1:00:06<1:00:35,  7.24s/it][Succeeded / Failed / Skipped / Total] 186 / 278 / 34 / 498:  50%|████▉     | 499/1000 [1:00:18<1:00:33,  7.25s/it][Succeeded / Failed / Skipped / Total] 186 / 279 / 34 / 499:  50%|████▉     | 499/1000 [1:00:18<1:00:33,  7.25s/it][Succeeded / Failed / Skipped / Total] 186 / 279 / 34 / 499:  50%|█████     | 500/1000 [1:00:25<1:00:25,  7.25s/it][Succeeded / Failed / Skipped / Total] 187 / 279 / 34 / 500:  50%|█████     | 500/1000 [1:00:25<1:00:25,  7.25s/it][Succeeded / Failed / Skipped / Total] 187 / 279 / 34 / 500:  50%|█████     | 501/1000 [1:00:26<1:00:11,  7.24s/it][Succeeded / Failed / Skipped / Total] 187 / 279 / 35 / 501:  50%|█████     | 501/1000 [1:00:26<1:00:11,  7.24s/it][Succeeded / Failed / Skipped / Total] 187 / 279 / 35 / 501:  50%|█████     | 502/1000 [1:00:26<59:57,  7.22s/it]  Sets the timer . --> Shuts down . --> Socre: 1.0

[[[[Adv]]]]: public void setConnectionLostTimeout ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int [[tensionlantymotute]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[tensionlantymotute]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
Shuts down the connection . --> Waits for all connections . --> Socre: 1.0

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[higheonredelia]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , [[higheonredelia]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 496 ---------------------------------------------
Shutdown the connection . --> Cancel all connections . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[forvnnessityeonttime]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[fake]]" != "[[fake]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 497 ---------------------------------------------
Starts the connection . --> Connect to journal --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[beginkanvinncellisttleker]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[crossingwuntok]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 498 ---------------------------------------------
Shuts down the connection . --> Shutts down this instance . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[cancelinsfittithruttleme]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 499 ---------------------------------------------
Sends a connection to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[iconshtoetaging]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 500 ---------------------------------------------
Sends a Handska server to the server . --> Creates a Handshaker --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket [[conn]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[ellenherverowneandeplayereshiivermasterrver]] ( WebSocket [[fofield]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Flushes a channel . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
[Succeeded / Failed / Skipped / Total] 187 / 279 / 36 / 502:  50%|█████     | 502/1000 [1:00:26<59:57,  7.22s/it][Succeeded / Failed / Skipped / Total] 187 / 279 / 36 / 502:  50%|█████     | 503/1000 [1:00:30<59:46,  7.22s/it][Succeeded / Failed / Skipped / Total] 187 / 280 / 36 / 503:  50%|█████     | 503/1000 [1:00:30<59:46,  7.22s/it][Succeeded / Failed / Skipped / Total] 187 / 280 / 36 / 503:  50%|█████     | 504/1000 [1:00:33<59:36,  7.21s/it][Succeeded / Failed / Skipped / Total] 188 / 280 / 36 / 504:  50%|█████     | 504/1000 [1:00:33<59:36,  7.21s/it][Succeeded / Failed / Skipped / Total] 188 / 280 / 36 / 504:  50%|█████     | 505/1000 [1:00:35<59:23,  7.20s/it][Succeeded / Failed / Skipped / Total] 188 / 281 / 36 / 505:  50%|█████     | 505/1000 [1:00:36<59:24,  7.20s/it][Succeeded / Failed / Skipped / Total] 188 / 281 / 36 / 505:  51%|█████     | 506/1000 [1:00:39<59:12,  7.19s/it][Succeeded / Failed / Skipped / Total] 189 / 281 / 36 / 506:  51%|█████     | 506/1000 [1:00:39<59:12,  7.19s/it][Succeeded / Failed / Skipped / Total] 189 / 281 / 36 / 506:  51%|█████     | 507/1000 [1:00:39<58:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 189 / 281 / 37 / 507:  51%|█████     | 507/1000 [1:00:39<58:58,  7.18s/it][Succeeded / Failed / Skipped / Total] 189 / 281 / 37 / 507:  51%|█████     | 508/1000 [1:00:44<58:49,  7.17s/it][Succeeded / Failed / Skipped / Total] 190 / 281 / 37 / 508:  51%|█████     | 508/1000 [1:00:44<58:49,  7.17s/it][Succeeded / Failed / Skipped / Total] 190 / 281 / 37 / 508:  51%|█████     | 509/1000 [1:00:45<58:36,  7.16s/it]--------------------------------------------- Result 502 ---------------------------------------------
Handles Socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 503 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[catchif]] ( ) { int [[bus]] = getAddress ( ) . getPort ( ) ; if ( [[bus]] == 0 && server != null ) { [[bus]] = server . socket ( ) . getLocalPort ( ) ; } return [[bus]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 504 ---------------------------------------------
Handles a channel . --> Removes the key from the queue . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[i]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[i]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > [[me]] ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; [[me]] . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
Opens a connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[publicverinexecutiondissdipasc]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 506 ---------------------------------------------
Opens a key . --> Populate key . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[asmaker]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 507 ---------------------------------------------
Stop the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Sets the card stopping . --> Waits for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[call]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[test]]" != "[[test]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
[Succeeded / Failed / Skipped / Total] 191 / 281 / 37 / 509:  51%|█████     | 509/1000 [1:00:45<58:36,  7.16s/it][Succeeded / Failed / Skipped / Total] 191 / 281 / 37 / 509:  51%|█████     | 510/1000 [1:00:52<58:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 192 / 281 / 37 / 510:  51%|█████     | 510/1000 [1:00:52<58:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 192 / 281 / 37 / 510:  51%|█████     | 511/1000 [1:00:53<58:16,  7.15s/it][Succeeded / Failed / Skipped / Total] 193 / 281 / 37 / 511:  51%|█████     | 511/1000 [1:00:53<58:16,  7.15s/it][Succeeded / Failed / Skipped / Total] 193 / 281 / 37 / 511:  51%|█████     | 512/1000 [1:00:53<58:02,  7.14s/it][Succeeded / Failed / Skipped / Total] 193 / 281 / 38 / 512:  51%|█████     | 512/1000 [1:00:53<58:02,  7.14s/it][Succeeded / Failed / Skipped / Total] 193 / 281 / 38 / 512:  51%|█████▏    | 513/1000 [1:00:56<57:51,  7.13s/it][Succeeded / Failed / Skipped / Total] 193 / 282 / 38 / 513:  51%|█████▏    | 513/1000 [1:00:56<57:51,  7.13s/it][Succeeded / Failed / Skipped / Total] 193 / 282 / 38 / 513:  51%|█████▏    | 514/1000 [1:00:57<57:38,  7.12s/it][Succeeded / Failed / Skipped / Total] 193 / 283 / 38 / 514:  51%|█████▏    | 514/1000 [1:00:57<57:38,  7.12s/it][Succeeded / Failed / Skipped / Total] 193 / 283 / 38 / 514:  52%|█████▏    | 515/1000 [1:01:00<57:27,  7.11s/it][Succeeded / Failed / Skipped / Total] 193 / 284 / 38 / 515:  52%|█████▏    | 515/1000 [1:01:00<57:27,  7.11s/it][Succeeded / Failed / Skipped / Total] 193 / 284 / 38 / 515:  52%|█████▏    | 516/1000 [1:01:01<57:14,  7.10s/it][Succeeded / Failed / Skipped / Total] 194 / 284 / 38 / 516:  52%|█████▏    | 516/1000 [1:01:01<57:14,  7.10s/it][Succeeded / Failed / Skipped / Total] 194 / 284 / 38 / 516:  52%|█████▏    | 517/1000 [1:01:04<57:03,  7.09s/it]--------------------------------------------- Result 509 ---------------------------------------------
Replies the current thread . --> Returns true if a thread is enabled . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doEnsureSingleThread]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean [[wodespassnetthertreehad]] ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 510 ---------------------------------------------
Sends a data to a server . --> Wraps the given ByteBuffer . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] [[data]] , Collection < WebSocket > clients ) { if ( [[data]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[data]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] [[flag]] , Collection < WebSocket > clients ) { if ( [[flag]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( [[flag]] ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 511 ---------------------------------------------
Sends the given text to the given clients . --> Sets the zookeeper . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String text , Collection < WebSocket > [[affiliates]] ) { if ( text == null || [[affiliates]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[affiliates]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Create a DataFrame . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 513 ---------------------------------------------
Returns a socket channel . --> [[[FAILED]]]

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket [[aveu]] ) { WebSocketImpl [[hee]] = ( WebSocketImpl ) [[aveu]] ; return ( ( SocketChannel ) [[hee]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 514 ---------------------------------------------
Start unit . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[begin]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 515 ---------------------------------------------
Start the server . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[grid]] = server . socket ( ) ; [[grid]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[grid]] . setReuseAddress ( isReuseAddr ( ) ) ; [[grid]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 516 ---------------------------------------------
Copies source to destination . --> Returns a new buffers . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[source]] , ByteBuffer dest ) { if ( [[source]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[source]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[source]] . limit ( limit ) ; dest . put ( [[source]] ) ; return limit ; } else { dest . put ( [[source]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer [[back]] , ByteBuffer dest ) { if ( [[back]] == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = [[back]] . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; [[back]] . limit ( limit ) ; dest . put ( [[back]] ) ; return limit ; } else { dest . put ( [[back]] ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 195 / 284 / 38 / 517:  52%|█████▏    | 517/1000 [1:01:04<57:03,  7.09s/it][Succeeded / Failed / Skipped / Total] 195 / 284 / 38 / 517:  52%|█████▏    | 518/1000 [1:01:13<56:58,  7.09s/it][Succeeded / Failed / Skipped / Total] 195 / 285 / 38 / 518:  52%|█████▏    | 518/1000 [1:01:13<56:58,  7.09s/it][Succeeded / Failed / Skipped / Total] 195 / 285 / 38 / 518:  52%|█████▏    | 519/1000 [1:01:17<56:48,  7.09s/it][Succeeded / Failed / Skipped / Total] 196 / 285 / 38 / 519:  52%|█████▏    | 519/1000 [1:01:17<56:48,  7.09s/it][Succeeded / Failed / Skipped / Total] 196 / 285 / 38 / 519:  52%|█████▏    | 520/1000 [1:01:23<56:40,  7.08s/it][Succeeded / Failed / Skipped / Total] 197 / 285 / 38 / 520:  52%|█████▏    | 520/1000 [1:01:23<56:40,  7.08s/it][Succeeded / Failed / Skipped / Total] 197 / 285 / 38 / 520:  52%|█████▏    | 521/1000 [1:01:32<56:34,  7.09s/it][Succeeded / Failed / Skipped / Total] 197 / 286 / 38 / 521:  52%|█████▏    | 521/1000 [1:01:32<56:34,  7.09s/it][Succeeded / Failed / Skipped / Total] 197 / 286 / 38 / 521:  52%|█████▏    | 522/1000 [1:01:37<56:25,  7.08s/it][Succeeded / Failed / Skipped / Total] 197 / 287 / 38 / 522:  52%|█████▏    | 522/1000 [1:01:37<56:25,  7.08s/it][Succeeded / Failed / Skipped / Total] 197 / 287 / 38 / 522:  52%|█████▏    | 523/1000 [1:01:40<56:15,  7.08s/it][Succeeded / Failed / Skipped / Total] 198 / 287 / 38 / 523:  52%|█████▏    | 523/1000 [1:01:40<56:15,  7.08s/it][Succeeded / Failed / Skipped / Total] 198 / 287 / 38 / 523:  52%|█████▏    | 524/1000 [1:01:51<56:11,  7.08s/it][Succeeded / Failed / Skipped / Total] 198 / 288 / 38 / 524:  52%|█████▏    | 524/1000 [1:01:51<56:11,  7.08s/it][Succeeded / Failed / Skipped / Total] 198 / 288 / 38 / 524:  52%|█████▎    | 525/1000 [1:02:00<56:06,  7.09s/it][Succeeded / Failed / Skipped / Total] 198 / 289 / 38 / 525:  52%|█████▎    | 525/1000 [1:02:00<56:06,  7.09s/it][Succeeded / Failed / Skipped / Total] 198 / 289 / 38 / 525:  53%|█████▎    | 526/1000 [1:02:03<55:55,  7.08s/it]Sends a DataBuffer to the server . --> Sends a buffers . --> Socre: 1.0

[[[[Adv]]]]: private void [[doBroadcast]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void [[comoverbus]] ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 518 ---------------------------------------------
Gets the EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[id]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 519 ---------------------------------------------
Registers a transaction . --> Serializable --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[zaitrixscriptance]] ( Consumer < EntityManager > [[blocks]] ) { [[zaitrixscriptance]] ( em -> { [[blocks]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Converts a map to a string . --> Convert a String to a StringBuffer --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[cats]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[cats]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 521 ---------------------------------------------
Returns a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[kags]] ) { List < T > [[after]] ; if ( [[kags]] != null && [[kags]] . length == 1 && [[kags]] [ 0 ] instanceof List ) { [[after]] = ( List < T > ) [[kags]] [ 0 ] ; } else { [[after]] = Arrays . asList ( [[kags]] ) ; } return [[after]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Converts a map to a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[mathrgintustrameaf]] ( final Object ... [[alders]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[alders]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 523 ---------------------------------------------
Put a key . --> Used for testing --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[hasdsverditth]] ( play . api . i18n . Lang lang , String [[ana]] ) { return messages . isDefinedAt ( [[ana]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 524 ---------------------------------------------
Convert a string to string --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > [[homogeneousragies]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , [[homogeneousragies]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 525 ---------------------------------------------
Constructs a request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[windows]] ( Http . RequestHeader [[stream]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[stream]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 526 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 199 / 289 / 38 / 526:  53%|█████▎    | 526/1000 [1:02:03<55:55,  7.08s/it][Succeeded / Failed / Skipped / Total] 199 / 289 / 38 / 526:  53%|█████▎    | 527/1000 [1:02:04<55:42,  7.07s/it][Succeeded / Failed / Skipped / Total] 199 / 290 / 38 / 527:  53%|█████▎    | 527/1000 [1:02:04<55:42,  7.07s/it][Succeeded / Failed / Skipped / Total] 199 / 290 / 38 / 527:  53%|█████▎    | 528/1000 [1:02:08<55:32,  7.06s/it][Succeeded / Failed / Skipped / Total] 199 / 291 / 38 / 528:  53%|█████▎    | 528/1000 [1:02:08<55:32,  7.06s/it][Succeeded / Failed / Skipped / Total] 199 / 291 / 38 / 528:  53%|█████▎    | 529/1000 [1:02:11<55:22,  7.05s/it][Succeeded / Failed / Skipped / Total] 199 / 292 / 38 / 529:  53%|█████▎    | 529/1000 [1:02:11<55:22,  7.05s/it][Succeeded / Failed / Skipped / Total] 199 / 292 / 38 / 529:  53%|█████▎    | 530/1000 [1:02:12<55:10,  7.04s/it][Succeeded / Failed / Skipped / Total] 199 / 293 / 38 / 530:  53%|█████▎    | 530/1000 [1:02:12<55:10,  7.04s/it][Succeeded / Failed / Skipped / Total] 199 / 293 / 38 / 530:  53%|█████▎    | 531/1000 [1:02:18<55:01,  7.04s/it][Succeeded / Failed / Skipped / Total] 200 / 293 / 38 / 531:  53%|█████▎    | 531/1000 [1:02:18<55:01,  7.04s/it][Succeeded / Failed / Skipped / Total] 200 / 293 / 38 / 531:  53%|█████▎    | 532/1000 [1:02:22<54:52,  7.03s/it][Succeeded / Failed / Skipped / Total] 201 / 293 / 38 / 532:  53%|█████▎    | 532/1000 [1:02:22<54:52,  7.03s/it][Succeeded / Failed / Skipped / Total] 201 / 293 / 38 / 532:  53%|█████▎    | 533/1000 [1:02:27<54:43,  7.03s/it][Succeeded / Failed / Skipped / Total] 202 / 293 / 38 / 533:  53%|█████▎    | 533/1000 [1:02:27<54:43,  7.03s/it][Succeeded / Failed / Skipped / Total] 202 / 293 / 38 / 533:  53%|█████▎    | 534/1000 [1:02:28<54:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 203 / 293 / 38 / 534:  53%|█████▎    | 534/1000 [1:02:28<54:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 203 / 293 / 38 / 534:  54%|█████▎    | 535/1000 [1:02:29<54:18,  7.01s/it][Succeeded / Failed / Skipped / Total] 203 / 294 / 38 / 535:  54%|█████▎    | 535/1000 [1:02:29<54:18,  7.01s/it][Succeeded / Failed / Skipped / Total] 203 / 294 / 38 / 535:  54%|█████▎    | 536/1000 [1:02:30<54:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 203 / 295 / 38 / 536:  54%|█████▎    | 536/1000 [1:02:30<54:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 203 / 295 / 38 / 536:  54%|█████▎    | 537/1000 [1:02:40<54:02,  7.00s/it][Succeeded / Failed / Skipped / Total] 203 / 296 / 38 / 537:  54%|█████▎    | 537/1000 [1:02:40<54:02,  7.00s/it][Succeeded / Failed / Skipped / Total] 203 / 296 / 38 / 537:  54%|█████▍    | 538/1000 [1:02:42<53:51,  6.99s/it][Succeeded / Failed / Skipped / Total] 204 / 296 / 38 / 538:  54%|█████▍    | 538/1000 [1:02:42<53:51,  6.99s/it][Succeeded / Failed / Skipped / Total] 204 / 296 / 38 / 538:  54%|█████▍    | 539/1000 [1:02:42<53:38,  6.98s/it]Create a new bindings . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[motwith]] ( GuiceableModule ... [[levels]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[levels]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
Sets the columns . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 528 ---------------------------------------------
Puts a challenge . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[roses]] ) { Seq < Lang > cs = Scala . asScala ( [[roses]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 529 ---------------------------------------------
Returns a previously registered . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[switchmingng]] ( play . api . inject . Binding < ? > ... [[switchmingng]] ) { return [[switchmingng]] ( Guiceable . bindings ( [[switchmingng]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Returns the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[groups]] ) { return bindings ( Guiceable . [[groups]] ( [[groups]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 531 ---------------------------------------------
Creates a Alluxio . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[overgingclass]] ( GuiceableModule ... [[modular]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modular]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Returns the modules . --> Gets the current oghooovy --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[ogpowersho]] ( play . api . inject . Module ... [[versions]] ) { return [[ogpowersho]] ( Guiceable . [[versions]] ( [[versions]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Returns the bindings for the given bindings . --> Return the list of oughooods --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[isposepacks]] ( play . api . inject . Binding < ? > ... [[brotherhoodclass]] ) { return [[isposepacks]] ( Guiceable . [[brotherhoodclass]] ( [[brotherhoodclass]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Allocate a request . --> Asynchronous version of a call --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > call ( Request [[reiview]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 535 ---------------------------------------------
Adds a compiler . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[britarget]] ( Class < ? > ... [[simpleuidets]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[simpleuidets]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 536 ---------------------------------------------
Returns true if the given scope is present . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 537 ---------------------------------------------
Gets the file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[bookrenconlineedler]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Convert a tuple to a tuple . --> Estimates the supplied EDA . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[tepasd]] < A , B , C , D , E > [[tepasd]] ( A a , B b , C c , D d , E e ) { return new [[tepasd]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 539 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 204 / 296 / 39 / 539:  54%|█████▍    | 539/1000 [1:02:42<53:38,  6.98s/it][Succeeded / Failed / Skipped / Total] 204 / 296 / 39 / 539:  54%|█████▍    | 540/1000 [1:02:48<53:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 204 / 297 / 39 / 540:  54%|█████▍    | 540/1000 [1:02:48<53:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 204 / 297 / 39 / 540:  54%|█████▍    | 541/1000 [1:02:52<53:21,  6.97s/it][Succeeded / Failed / Skipped / Total] 205 / 297 / 39 / 541:  54%|█████▍    | 541/1000 [1:02:52<53:21,  6.97s/it][Succeeded / Failed / Skipped / Total] 205 / 297 / 39 / 541:  54%|█████▍    | 542/1000 [1:02:56<53:11,  6.97s/it][Succeeded / Failed / Skipped / Total] 206 / 297 / 39 / 542:  54%|█████▍    | 542/1000 [1:02:56<53:11,  6.97s/it][Succeeded / Failed / Skipped / Total] 206 / 297 / 39 / 542:  54%|█████▍    | 543/1000 [1:03:06<53:06,  6.97s/it][Succeeded / Failed / Skipped / Total] 206 / 298 / 39 / 543:  54%|█████▍    | 543/1000 [1:03:06<53:06,  6.97s/it][Succeeded / Failed / Skipped / Total] 206 / 298 / 39 / 543:  54%|█████▍    | 544/1000 [1:03:06<52:54,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 299 / 39 / 544:  54%|█████▍    | 544/1000 [1:03:06<52:54,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 299 / 39 / 544:  55%|█████▍    | 545/1000 [1:03:12<52:46,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 300 / 39 / 545:  55%|█████▍    | 545/1000 [1:03:12<52:46,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 300 / 39 / 545:  55%|█████▍    | 546/1000 [1:03:14<52:35,  6.95s/it][Succeeded / Failed / Skipped / Total] 206 / 301 / 39 / 546:  55%|█████▍    | 546/1000 [1:03:14<52:35,  6.95s/it][Succeeded / Failed / Skipped / Total] 206 / 301 / 39 / 546:  55%|█████▍    | 547/1000 [1:03:15<52:23,  6.94s/it][Succeeded / Failed / Skipped / Total] 206 / 302 / 39 / 547:  55%|█████▍    | 547/1000 [1:03:15<52:23,  6.94s/it][Succeeded / Failed / Skipped / Total] 206 / 302 / 39 / 547:  55%|█████▍    | 548/1000 [1:03:35<52:26,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 303 / 39 / 548:  55%|█████▍    | 548/1000 [1:03:35<52:26,  6.96s/it][Succeeded / Failed / Skipped / Total] 206 / 303 / 39 / 548:  55%|█████▍    | 549/1000 [1:03:35<52:14,  6.95s/it]Convenience function for testing --> [[[SKIPPED]]]

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 540 ---------------------------------------------
Get the prepared executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext [[ec]] ) { ExecutionContext [[prepared]] = [[ec]] . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext [[elk]] ) { ExecutionContext [[dressed]] = [[elk]] . prepare ( ) ; if ( [[dressed]] instanceof Executor ) { return ( Executor ) [[dressed]] ; } else { return [[dressed]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a new instance of unit tests . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String name , String [[unitsdescription]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , [[unitsdescription]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Converts a string into a String . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[summoncway]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[summoncway]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
A convenience method for creating a tuple . --> [[[FAILED]]]

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[turlar]] < A , B > [[turlar]] ( A a , B b ) { return new [[turlar]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 544 ---------------------------------------------
Add a constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[includes]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Serialize a String to a JSON string --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String [[callingvernet]] ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( [[callingvernet]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Returns a new instance of the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: private < [[T]] extends ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[n]] extends ConstraintValidator < ? , ? > > [[n]] newInstance ( Class < [[n]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Create a new persistence unit . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[cross]] : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[cross]] . getKey ( ) , [[cross]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Shows a request with the given id . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[invitation]] , String [[command]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[invitation]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
[Succeeded / Failed / Skipped / Total] 206 / 304 / 39 / 549:  55%|█████▍    | 549/1000 [1:03:35<52:14,  6.95s/it][Succeeded / Failed / Skipped / Total] 206 / 304 / 39 / 549:  55%|█████▌    | 550/1000 [1:03:39<52:05,  6.94s/it][Succeeded / Failed / Skipped / Total] 206 / 305 / 39 / 550:  55%|█████▌    | 550/1000 [1:03:39<52:05,  6.94s/it][Succeeded / Failed / Skipped / Total] 206 / 305 / 39 / 550:  55%|█████▌    | 551/1000 [1:03:45<51:57,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 305 / 39 / 551:  55%|█████▌    | 551/1000 [1:03:45<51:57,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 305 / 39 / 551:  55%|█████▌    | 552/1000 [1:03:53<51:50,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 306 / 39 / 552:  55%|█████▌    | 552/1000 [1:03:53<51:50,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 306 / 39 / 552:  55%|█████▌    | 553/1000 [1:03:55<51:40,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 307 / 39 / 553:  55%|█████▌    | 553/1000 [1:03:55<51:40,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 307 / 39 / 553:  55%|█████▌    | 554/1000 [1:04:04<51:34,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 308 / 39 / 554:  55%|█████▌    | 554/1000 [1:04:04<51:34,  6.94s/it][Succeeded / Failed / Skipped / Total] 207 / 308 / 39 / 554:  56%|█████▌    | 555/1000 [1:04:07<51:24,  6.93s/it]--------------------------------------------- Result 549 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[notcommandrsg]] ( RequestHeader [[error]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[error]] . method ( ) , [[error]] . uri ( ) , message , [[error]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 550 ---------------------------------------------
Get a method for a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[method]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[e]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[e]] ) ; return [[e]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 551 ---------------------------------------------
Logs the server . --> Log a error message --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , request . method ( ) , request . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader request , UsefulException [[servicesgroupoint]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[servicesgroupoint]] . id , request . method ( ) , request . uri ( ) ) , [[servicesgroupoint]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Send a request to the server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[request]] , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[ask]] , int statusCode , String [[script]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[ask]] , [[script]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[ask]] , [[script]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[ask]] , [[script]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[ask]] , statusCode , [[script]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[script]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 553 ---------------------------------------------
Handles request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader [[error]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[error]] . method ( ) , [[error]] . uri ( ) , [[error]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[error]] . method ( ) , [[error]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[error]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 554 ---------------------------------------------
Wraps the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[fallmoretouefueexcend]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 309 / 39 / 555:  56%|█████▌    | 555/1000 [1:04:07<51:24,  6.93s/it][Succeeded / Failed / Skipped / Total] 207 / 309 / 39 / 555:  56%|█████▌    | 556/1000 [1:04:15<51:19,  6.93s/it][Succeeded / Failed / Skipped / Total] 207 / 310 / 39 / 556:  56%|█████▌    | 556/1000 [1:04:15<51:19,  6.93s/it][Succeeded / Failed / Skipped / Total] 207 / 310 / 39 / 556:  56%|█████▌    | 557/1000 [1:04:16<51:07,  6.92s/it][Succeeded / Failed / Skipped / Total] 207 / 311 / 39 / 557:  56%|█████▌    | 557/1000 [1:04:16<51:07,  6.92s/it][Succeeded / Failed / Skipped / Total] 207 / 311 / 39 / 557:  56%|█████▌    | 558/1000 [1:04:28<51:04,  6.93s/it][Succeeded / Failed / Skipped / Total] 207 / 312 / 39 / 558:  56%|█████▌    | 558/1000 [1:04:28<51:04,  6.93s/it][Succeeded / Failed / Skipped / Total] 207 / 312 / 39 / 558:  56%|█████▌    | 559/1000 [1:04:35<50:57,  6.93s/it][Succeeded / Failed / Skipped / Total] 208 / 312 / 39 / 559:  56%|█████▌    | 559/1000 [1:04:35<50:57,  6.93s/it][Succeeded / Failed / Skipped / Total] 208 / 312 / 39 / 559:  56%|█████▌    | 560/1000 [1:04:42<50:50,  6.93s/it][Succeeded / Failed / Skipped / Total] 209 / 312 / 39 / 560:  56%|█████▌    | 560/1000 [1:04:42<50:50,  6.93s/it][Succeeded / Failed / Skipped / Total] 209 / 312 / 39 / 560:  56%|█████▌    | 561/1000 [1:04:50<50:44,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 312 / 39 / 561:  56%|█████▌    | 561/1000 [1:04:50<50:44,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 312 / 39 / 561:  56%|█████▌    | 562/1000 [1:05:01<50:40,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 313 / 39 / 562:  56%|█████▌    | 562/1000 [1:05:01<50:40,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 313 / 39 / 562:  56%|█████▋    | 563/1000 [1:05:03<50:29,  6.93s/it]Execute a request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable [[test]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[test]] ) ; logServerError ( request , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , usefulException ) ; default : return onDevServerError ( request , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[exfodearevinestarrn]] ( RequestHeader [[event]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[event]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[ignorederssidecreraderd]] ( RequestHeader [[drop]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[drop]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a new directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[cvdisledrium]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Create a directory . --> Start script . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String [[base]] ) { return [[fromDirectoryAndJar]] ( directory , jarFile , [[base]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[scriptdirenntvardinwr]] ( File directory , JarFile jarFile , String [[start]] ) { return [[scriptdirenntvardinwr]] ( directory , jarFile , [[start]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Concatenates byte array into a byte array . --> Helper method to convert a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumedta]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Serialize the given content to the given content . --> Send a request to a String --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[page]] , String charset ) { String body ; if ( [[page]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 562 ---------------------------------------------
Convert a file to a list of files --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] [[repositories]] = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { [[repositories]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] [[reslre]] = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { [[reslre]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 563 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 210 / 314 / 39 / 563:  56%|█████▋    | 563/1000 [1:05:03<50:29,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 314 / 39 / 563:  56%|█████▋    | 564/1000 [1:05:13<50:25,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 315 / 39 / 564:  56%|█████▋    | 564/1000 [1:05:13<50:25,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 315 / 39 / 564:  56%|█████▋    | 565/1000 [1:05:24<50:21,  6.95s/it][Succeeded / Failed / Skipped / Total] 210 / 316 / 39 / 565:  56%|█████▋    | 565/1000 [1:05:24<50:21,  6.95s/it][Succeeded / Failed / Skipped / Total] 210 / 316 / 39 / 565:  57%|█████▋    | 566/1000 [1:05:25<50:09,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 317 / 39 / 566:  57%|█████▋    | 566/1000 [1:05:25<50:09,  6.94s/it][Succeeded / Failed / Skipped / Total] 210 / 317 / 39 / 566:  57%|█████▋    | 567/1000 [1:05:28<49:59,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 318 / 39 / 567:  57%|█████▋    | 567/1000 [1:05:28<49:59,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 318 / 39 / 567:  57%|█████▋    | 568/1000 [1:05:37<49:54,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 319 / 39 / 568:  57%|█████▋    | 568/1000 [1:05:37<49:54,  6.93s/it][Succeeded / Failed / Skipped / Total] 210 / 319 / 39 / 568:  57%|█████▋    | 569/1000 [1:05:37<49:42,  6.92s/it][Succeeded / Failed / Skipped / Total] 210 / 319 / 40 / 569:  57%|█████▋    | 569/1000 [1:05:37<49:42,  6.92s/it][Succeeded / Failed / Skipped / Total] 210 / 319 / 40 / 569:  57%|█████▋    | 570/1000 [1:05:41<49:33,  6.91s/it][Succeeded / Failed / Skipped / Total] 211 / 319 / 40 / 570:  57%|█████▋    | 570/1000 [1:05:41<49:33,  6.91s/it][Succeeded / Failed / Skipped / Total] 211 / 319 / 40 / 570:  57%|█████▋    | 571/1000 [1:05:42<49:21,  6.90s/it][Succeeded / Failed / Skipped / Total] 211 / 320 / 40 / 571:  57%|█████▋    | 571/1000 [1:05:42<49:21,  6.90s/it][Succeeded / Failed / Skipped / Total] 211 / 320 / 40 / 571:  57%|█████▋    | 572/1000 [1:05:47<49:13,  6.90s/it][Succeeded / Failed / Skipped / Total] 211 / 321 / 40 / 572:  57%|█████▋    | 572/1000 [1:05:47<49:13,  6.90s/it][Succeeded / Failed / Skipped / Total] 211 / 321 / 40 / 572:  57%|█████▋    | 573/1000 [1:05:49<49:03,  6.89s/it]Returns a new JarFile . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository repo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[fromby]] ( JarFile [[arphilist]] , String base ) { FileRepository repo = new JarRepository ( [[arphilist]] , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
Creates a String with a charset . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[enfermount]] ( String [[cm]] , String charset ) { return new Strict ( ByteString . fromString ( [[cm]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Returns a copy of the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[document]] , Optional < String > [[devicecture]] ) { return new Chunked ( [[document]] . map ( HttpChunk . Chunk :: new ) , [[devicecture]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 566 ---------------------------------------------
Returns a copy of the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[format]] ( int [[name]] , JsonNode content ) { return [[format]] ( [[format]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[jarFile]] , String base , boolean fallbackToJar ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , [[jarRepo]] } ) ; } else { manualRepo = [[fileRepo]] ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile [[boxsfle]] , String base , boolean fallbackToJar ) { FileRepository [[boxropired]] = new FilesystemRepository ( directory ) ; FileRepository [[assembledesgno]] = new JarRepository ( [[boxsfle]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[boxropired]] , [[assembledesgno]] } ) ; } else { manualRepo = [[boxropired]] ; } return new DocumentationHandler ( manualRepo , [[assembledesgno]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 568 ---------------------------------------------
Send a request to a JSON . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[ao]] ( int [[sign]] , JsonNode [[image]] , JsonEncoding encoding ) { if ( [[image]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[ao]] ( [[ao]] ) . sendJson ( [[image]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the user with the given id . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a stream to a stream . --> Format InputStream --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream [[content]] , long [[contentLength]] ) { return status ( status ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream [[format]] , long [[sitelesgliln]] ) { return status ( status ) . sendInputStream ( [[format]] , [[sitelesgliln]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 571 ---------------------------------------------
Construct a string from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int status , byte [ ] [[status]] ) { if ( [[status]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[status]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 572 ---------------------------------------------
Upload file content to a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[flag]] ( int [[configuration]] , File [[access]] ) { return [[flag]] ( [[flag]] , [[access]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 322 / 40 / 573:  57%|█████▋    | 573/1000 [1:05:49<49:03,  6.89s/it][Succeeded / Failed / Skipped / Total] 211 / 322 / 40 / 573:  57%|█████▋    | 574/1000 [1:05:51<48:52,  6.88s/it][Succeeded / Failed / Skipped / Total] 211 / 323 / 40 / 574:  57%|█████▋    | 574/1000 [1:05:51<48:52,  6.88s/it][Succeeded / Failed / Skipped / Total] 211 / 323 / 40 / 574:  57%|█████▊    | 575/1000 [1:05:55<48:43,  6.88s/it][Succeeded / Failed / Skipped / Total] 211 / 324 / 40 / 575:  57%|█████▊    | 575/1000 [1:05:55<48:43,  6.88s/it][Succeeded / Failed / Skipped / Total] 211 / 324 / 40 / 575:  58%|█████▊    | 576/1000 [1:05:58<48:33,  6.87s/it][Succeeded / Failed / Skipped / Total] 212 / 324 / 40 / 576:  58%|█████▊    | 576/1000 [1:05:58<48:33,  6.87s/it][Succeeded / Failed / Skipped / Total] 212 / 324 / 40 / 576:  58%|█████▊    | 577/1000 [1:06:03<48:25,  6.87s/it][Succeeded / Failed / Skipped / Total] 213 / 324 / 40 / 577:  58%|█████▊    | 577/1000 [1:06:03<48:25,  6.87s/it][Succeeded / Failed / Skipped / Total] 213 / 324 / 40 / 577:  58%|█████▊    | 578/1000 [1:06:06<48:15,  6.86s/it][Succeeded / Failed / Skipped / Total] 213 / 325 / 40 / 578:  58%|█████▊    | 578/1000 [1:06:06<48:15,  6.86s/it][Succeeded / Failed / Skipped / Total] 213 / 325 / 40 / 578:  58%|█████▊    | 579/1000 [1:06:12<48:08,  6.86s/it][Succeeded / Failed / Skipped / Total] 213 / 326 / 40 / 579:  58%|█████▊    | 579/1000 [1:06:12<48:08,  6.86s/it][Succeeded / Failed / Skipped / Total] 213 / 327 / 40 / 580:  58%|█████▊    | 580/1000 [1:06:12<47:56,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 327 / 40 / 580:  58%|█████▊    | 581/1000 [1:06:20<47:50,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 328 / 40 / 581:  58%|█████▊    | 581/1000 [1:06:20<47:50,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 329 / 40 / 582:  58%|█████▊    | 582/1000 [1:06:27<47:43,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 329 / 40 / 582:  58%|█████▊    | 583/1000 [1:06:28<47:32,  6.84s/it][Succeeded / Failed / Skipped / Total] 213 / 330 / 40 / 583:  58%|█████▊    | 583/1000 [1:06:28<47:32,  6.84s/it]Call this method . --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 574 ---------------------------------------------
Returns a collection of candidates . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[favorite]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 575 ---------------------------------------------
Create a new fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[bone]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[bone]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Build http request . --> Http http request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[ienouturlyn]] ( Http . Request request ) { return [[ienouturlyn]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 577 ---------------------------------------------
Replies the request . --> Sets the http request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[enhurla]] ( Http . Request [[ut]] ) { return [[enhurla]] ( [[ut]] . secure ( ) , [[ut]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection asynchronously . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[band]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[band]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Convert a JSON object to JSON representation --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[o]] > [[o]] fromJson ( JsonNode json , Class < [[o]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Return a connection to a connection --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[sitefrant]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 581 ---------------------------------------------
Convert a JsonNode to a JSON representation --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[onest]] ( final Object [[resource]] ) { try { return mapper ( ) . valueToTree ( [[resource]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Parse a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String [[tacc]] ) { try { return mapper ( ) . readTree ( [[tacc]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a JsonNode from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[diset]] ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 213 / 331 / 40 / 584:  58%|█████▊    | 584/1000 [1:06:34<47:25,  6.84s/it][Succeeded / Failed / Skipped / Total] 213 / 331 / 40 / 584:  58%|█████▊    | 585/1000 [1:06:44<47:21,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 332 / 40 / 585:  58%|█████▊    | 585/1000 [1:06:44<47:21,  6.85s/it][Succeeded / Failed / Skipped / Total] 213 / 332 / 40 / 585:  59%|█████▊    | 586/1000 [1:06:52<47:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 214 / 332 / 40 / 586:  59%|█████▊    | 586/1000 [1:06:52<47:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 214 / 332 / 40 / 586:  59%|█████▊    | 587/1000 [1:06:54<47:04,  6.84s/it][Succeeded / Failed / Skipped / Total] 215 / 332 / 40 / 587:  59%|█████▊    | 587/1000 [1:06:54<47:04,  6.84s/it][Succeeded / Failed / Skipped / Total] 215 / 332 / 40 / 587:  59%|█████▉    | 588/1000 [1:07:10<47:04,  6.85s/it][Succeeded / Failed / Skipped / Total] 215 / 333 / 40 / 588:  59%|█████▉    | 588/1000 [1:07:10<47:04,  6.85s/it][Succeeded / Failed / Skipped / Total] 215 / 333 / 40 / 588:  59%|█████▉    | 589/1000 [1:07:16<46:56,  6.85s/it][Succeeded / Failed / Skipped / Total] 216 / 333 / 40 / 589:  59%|█████▉    | 589/1000 [1:07:16<46:56,  6.85s/it][Succeeded / Failed / Skipped / Total] 216 / 333 / 40 / 589:  59%|█████▉    | 590/1000 [1:07:23<46:49,  6.85s/it][Succeeded / Failed / Skipped / Total] 217 / 333 / 40 / 590:  59%|█████▉    | 590/1000 [1:07:23<46:49,  6.85s/it][Succeeded / Failed / Skipped / Total] 217 / 333 / 40 / 590:  59%|█████▉    | 591/1000 [1:07:25<46:39,  6.85s/it]Builds a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[agroupobject]] ( Mode mode , int [[entry]] , Function < BuiltInComponents , Router > [[system]] ) { return new Builder ( ) . mode ( mode ) . http ( [[entry]] ) . build ( [[system]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 585 ---------------------------------------------
Returns a list of all constraints in the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayconcretekonjuft]] ( Set < ConstraintDescriptor < ? > > [[hinges]] ) { return [[hinges]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayconcretekonjuft]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
Returns a List of constraint . --> Convenience function for example --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display [[displayAnnotation]] = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[canvas]] ) { final Display [[displayingrankocnd]] = [[canvas]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayingrankocnd]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayingrankocnd]] . attributes ( ) ) . map ( attr -> [[canvas]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 587 ---------------------------------------------
Convert a relative path to a relative path --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[neighbour]] ( String startPath , String [[datasyndrome]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 588 ---------------------------------------------
Parses a canonical path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String [[comp]] : urlPath ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( [[comp]] ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[middle]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[middle]] = new Stack <> ( ) ; for ( String [[koth]] : urlPath ) { if ( [[koth]] . isEmpty ( ) || [[koth]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[koth]] . equals ( PARENT_DIR ) || ( ! [[middle]] . empty ( ) && [[middle]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[middle]] . push ( [[koth]] ) ; else [[middle]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[middle]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 589 ---------------------------------------------
Obtain a long value from a Date --> Utility method to create a cron expression --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[name]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[name]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 590 ---------------------------------------------
Converts an array of class to a constructor . --> Obtains a classita for a given class --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( [[isAssignable]] ( classArray [ [[i]] ] , [[toClassArray]] [ [[i]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[oasissulenapace]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[onoiraridev]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[onoiraridev]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[onoiraridev]] == null ) { [[onoiraridev]] = EMPTY_CLASS_ARRAY ; } for ( int [[u]] = 0 ; [[u]] < classArray . length ; [[u]] ++ ) { if ( [[oasissulenapace]] ( classArray [ [[u]] ] , [[onoiraridev]] [ [[u]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
[Succeeded / Failed / Skipped / Total] 217 / 334 / 40 / 591:  59%|█████▉    | 591/1000 [1:07:25<46:39,  6.85s/it][Succeeded / Failed / Skipped / Total] 217 / 334 / 40 / 591:  59%|█████▉    | 592/1000 [1:07:27<46:29,  6.84s/it][Succeeded / Failed / Skipped / Total] 217 / 335 / 40 / 592:  59%|█████▉    | 592/1000 [1:07:27<46:29,  6.84s/it][Succeeded / Failed / Skipped / Total] 217 / 335 / 40 / 592:  59%|█████▉    | 593/1000 [1:07:31<46:20,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 336 / 40 / 593:  59%|█████▉    | 593/1000 [1:07:31<46:20,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 336 / 40 / 593:  59%|█████▉    | 594/1000 [1:07:37<46:13,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 337 / 40 / 594:  59%|█████▉    | 594/1000 [1:07:37<46:13,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 337 / 40 / 594:  60%|█████▉    | 595/1000 [1:07:43<46:05,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 338 / 40 / 595:  60%|█████▉    | 595/1000 [1:07:43<46:05,  6.83s/it][Succeeded / Failed / Skipped / Total] 217 / 338 / 40 / 595:  60%|█████▉    | 596/1000 [1:07:46<45:56,  6.82s/it][Succeeded / Failed / Skipped / Total] 217 / 339 / 40 / 596:  60%|█████▉    | 596/1000 [1:07:46<45:56,  6.82s/it][Succeeded / Failed / Skipped / Total] 217 / 339 / 40 / 596:  60%|█████▉    | 597/1000 [1:07:54<45:50,  6.82s/it][Succeeded / Failed / Skipped / Total] 218 / 339 / 40 / 597:  60%|█████▉    | 597/1000 [1:07:54<45:50,  6.82s/it][Succeeded / Failed / Skipped / Total] 218 / 339 / 40 / 597:  60%|█████▉    | 598/1000 [1:07:57<45:41,  6.82s/it][Succeeded / Failed / Skipped / Total] 218 / 340 / 40 / 598:  60%|█████▉    | 598/1000 [1:07:57<45:41,  6.82s/it][Succeeded / Failed / Skipped / Total] 218 / 340 / 40 / 598:  60%|█████▉    | 599/1000 [1:08:01<45:32,  6.81s/it][Succeeded / Failed / Skipped / Total] 218 / 341 / 40 / 599:  60%|█████▉    | 599/1000 [1:08:01<45:32,  6.81s/it][Succeeded / Failed / Skipped / Total] 218 / 341 / 40 / 599:  60%|██████    | 600/1000 [1:08:05<45:23,  6.81s/it][Succeeded / Failed / Skipped / Total] 218 / 342 / 40 / 600:  60%|██████    | 600/1000 [1:08:05<45:23,  6.81s/it][Succeeded / Failed / Skipped / Total] 218 / 342 / 40 / 600:  60%|██████    | 601/1000 [1:08:06<45:12,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 343 / 40 / 601:  60%|██████    | 601/1000 [1:08:06<45:12,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 343 / 40 / 601:  60%|██████    | 602/1000 [1:08:15<45:07,  6.80s/it]--------------------------------------------- Result 591 ---------------------------------------------
Asynchronously waits for a given unit . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long [[amount]] , final TimeUnit [[unit]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , [[unit]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long [[form]] , final TimeUnit [[complex]] ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( [[complex]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[form]] , [[complex]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Obtain a value from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date parseCRONExpression ( String [[jumon]] ) { try { return new CronExpression ( [[jumon]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[jumon]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 593 ---------------------------------------------
Loads the application context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[builders]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Renders the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[requesting]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[requesting]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 595 ---------------------------------------------
Convenience method for creating a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[extend]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Returns an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[provides]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Converts a Java type to a Java implementation . --> Convenience method for creating a Java --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[mod]] ) { return underlying . to ( [[mod]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 598 ---------------------------------------------
Register a key . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[key]] , String [[value]] ) { flash ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void flash ( String [[wax]] , String [[collector]] ) { flash ( ) . put ( [[wax]] , [[collector]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 599 ---------------------------------------------
Adds a value to the session . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String value ) { [[session]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[collaboration]] ( String key , String value ) { [[collaboration]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 600 ---------------------------------------------
Convenience method to create a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[x]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Create a new AAcampaigration --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[materializer]] ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , [[materializer]] ) ; return new AhcWSClient ( [[client]] , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer [[pressdrive]] ) { final StandaloneAhcWSClient [[customer]] = StandaloneAhcWSClient . create ( config , cache , [[pressdrive]] ) ; return new AhcWSClient ( [[customer]] , [[pressdrive]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 344 / 40 / 602:  60%|██████    | 602/1000 [1:08:15<45:07,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 344 / 40 / 602:  60%|██████    | 603/1000 [1:08:19<44:58,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 345 / 40 / 603:  60%|██████    | 603/1000 [1:08:19<44:58,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 345 / 40 / 603:  60%|██████    | 604/1000 [1:08:22<44:49,  6.79s/it][Succeeded / Failed / Skipped / Total] 218 / 346 / 40 / 604:  60%|██████    | 604/1000 [1:08:22<44:49,  6.79s/it][Succeeded / Failed / Skipped / Total] 218 / 346 / 40 / 604:  60%|██████    | 605/1000 [1:08:36<44:47,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 347 / 40 / 605:  60%|██████    | 605/1000 [1:08:36<44:47,  6.80s/it][Succeeded / Failed / Skipped / Total] 218 / 347 / 40 / 605:  61%|██████    | 606/1000 [1:08:51<44:46,  6.82s/it][Succeeded / Failed / Skipped / Total] 219 / 347 / 40 / 606:  61%|██████    | 606/1000 [1:08:51<44:46,  6.82s/it][Succeeded / Failed / Skipped / Total] 219 / 347 / 40 / 606:  61%|██████    | 607/1000 [1:09:10<44:47,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 348 / 40 / 607:  61%|██████    | 607/1000 [1:09:10<44:47,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 348 / 40 / 607:  61%|██████    | 608/1000 [1:09:16<44:39,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 349 / 40 / 608:  61%|██████    | 608/1000 [1:09:16<44:39,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 349 / 40 / 608:  61%|██████    | 609/1000 [1:09:25<44:34,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 350 / 40 / 609:  61%|██████    | 609/1000 [1:09:25<44:34,  6.84s/it][Succeeded / Failed / Skipped / Total] 219 / 350 / 40 / 609:  61%|██████    | 610/1000 [1:09:26<44:23,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 350 / 40 / 610:  61%|██████    | 610/1000 [1:09:26<44:23,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 350 / 40 / 610:  61%|██████    | 611/1000 [1:09:26<44:12,  6.82s/it]Return provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[maker]] ) { return underlying . to ( [[maker]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Returns the key of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[top]] ( final BindingKey < ? extends T > [[button]] ) { return underlying . to ( [[button]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Converts a Java provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[extended]] Provider < ? extends T > > Binding < T > [[tripprewin]] ( final Class < P > [[producer]] ) { return underlying . toProvider ( [[producer]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a list of available applications . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > availables ( Application [[app]] ) { play . api . i18n . Langs [[langs]] = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application [[android]] ) { play . api . i18n . Langs [[renewableus]] = [[android]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[awardedcationity]] = Scala . asJava ( [[renewableus]] . availables ( ) ) ; return [[awardedcationity]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Generates a application . --> Construct a list of applications --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[beloved]] ( Application app , List < Lang > [[openlangse]] ) { play . api . i18n . Langs [[migz]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[openlangse]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[migz]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 607 ---------------------------------------------
Loads the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[voidpointfinevrandtor]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 608 ---------------------------------------------
Simplied database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[cleanupffoleciots]] ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions [[expansionk]] = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; [[expansionk]] . evolve ( [[expansionk]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 609 ---------------------------------------------
Creates a Alluxio . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[resources]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[resources]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 610 ---------------------------------------------
Creates a new Environment . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( [[env]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[blastator]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[unvic]] , play . api . Configuration conf ) -> Scala . toSeq ( [[blastator]] . apply ( new Environment ( [[unvic]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 351 / 40 / 611:  61%|██████    | 611/1000 [1:09:26<44:12,  6.82s/it][Succeeded / Failed / Skipped / Total] 220 / 351 / 40 / 611:  61%|██████    | 612/1000 [1:09:35<44:07,  6.82s/it][Succeeded / Failed / Skipped / Total] 220 / 352 / 40 / 612:  61%|██████    | 612/1000 [1:09:35<44:07,  6.82s/it][Succeeded / Failed / Skipped / Total] 220 / 352 / 40 / 612:  61%|██████▏   | 613/1000 [1:09:37<43:57,  6.81s/it][Succeeded / Failed / Skipped / Total] 220 / 353 / 40 / 613:  61%|██████▏   | 613/1000 [1:09:37<43:57,  6.81s/it][Succeeded / Failed / Skipped / Total] 220 / 353 / 40 / 613:  61%|██████▏   | 614/1000 [1:09:45<43:51,  6.82s/it][Succeeded / Failed / Skipped / Total] 220 / 354 / 40 / 614:  61%|██████▏   | 614/1000 [1:09:45<43:51,  6.82s/it][Succeeded / Failed / Skipped / Total] 220 / 354 / 40 / 614:  62%|██████▏   | 615/1000 [1:09:46<43:41,  6.81s/it][Succeeded / Failed / Skipped / Total] 220 / 355 / 40 / 615:  62%|██████▏   | 615/1000 [1:09:46<43:41,  6.81s/it][Succeeded / Failed / Skipped / Total] 220 / 355 / 40 / 615:  62%|██████▏   | 616/1000 [1:09:50<43:32,  6.80s/it][Succeeded / Failed / Skipped / Total] 220 / 356 / 40 / 616:  62%|██████▏   | 616/1000 [1:09:50<43:32,  6.80s/it][Succeeded / Failed / Skipped / Total] 220 / 356 / 40 / 616:  62%|██████▏   | 617/1000 [1:09:56<43:24,  6.80s/it][Succeeded / Failed / Skipped / Total] 220 / 357 / 40 / 617:  62%|██████▏   | 617/1000 [1:09:56<43:24,  6.80s/it][Succeeded / Failed / Skipped / Total] 220 / 357 / 40 / 617:  62%|██████▏   | 618/1000 [1:10:21<43:29,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 358 / 40 / 618:  62%|██████▏   | 618/1000 [1:10:21<43:29,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 358 / 40 / 618:  62%|██████▏   | 619/1000 [1:10:27<43:22,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 359 / 40 / 619:  62%|██████▏   | 619/1000 [1:10:27<43:22,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 359 / 40 / 619:  62%|██████▏   | 620/1000 [1:10:40<43:19,  6.84s/it]Creates a map of Euclicevolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[chamapi]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 612 ---------------------------------------------
Gets the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[commands]] ) { return load ( Guiceable . [[commands]] ( [[commands]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Replies the modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[discipline]] ( play . api . inject . Module ... modules ) { return [[discipline]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Converts a list of map to a map of map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[adaptationsd]] . EvolutionsReader [[lassersomp]] ( Evolution ... [[adaptationsd]] ) { Map < String , List < Evolution > > [[plan]] = new HashMap < String , List < Evolution > > ( ) ; [[plan]] . put ( "default" , Arrays . asList ( [[adaptationsd]] ) ) ; return fromMap ( [[plan]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 615 ---------------------------------------------
Creates a new builder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[projectbussupplyram]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 616 ---------------------------------------------
Loads the bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[ssas]] ) { return load ( Guiceable . [[ssas]] ( [[ssas]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 617 ---------------------------------------------
Converts a String to a String --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; encode ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[cookies]] ) { if ( [[cookies]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[baref]] = new StringBuilder ( ) ; encode ( [[baref]] , [[cookies]] ) ; return stripTrailingSeparator ( [[baref]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
Returns the current context . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[iristakault]] ( boolean [[ainlecoralby]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[ogerund]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[ogerund]] != null ) { return ( Deque < EntityManager > ) [[ogerund]] ; } else { Deque < EntityManager > [[de]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[de]] ) ; return [[de]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 619 ---------------------------------------------
Executes the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[ae]] ( ) { Deque < EntityManager > [[eh]] = this . emStack ( "[[false]]" == "[[false]]" ) ; if ( [[eh]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[eh]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 620 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 360 / 40 / 620:  62%|██████▏   | 620/1000 [1:10:40<43:19,  6.84s/it][Succeeded / Failed / Skipped / Total] 220 / 360 / 40 / 620:  62%|██████▏   | 621/1000 [1:10:41<43:08,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 361 / 40 / 621:  62%|██████▏   | 621/1000 [1:10:41<43:08,  6.83s/it][Succeeded / Failed / Skipped / Total] 220 / 361 / 40 / 621:  62%|██████▏   | 622/1000 [1:10:58<43:07,  6.85s/it][Succeeded / Failed / Skipped / Total] 221 / 361 / 40 / 622:  62%|██████▏   | 622/1000 [1:10:58<43:07,  6.85s/it][Succeeded / Failed / Skipped / Total] 221 / 361 / 40 / 622:  62%|██████▏   | 623/1000 [1:11:18<43:09,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 362 / 40 / 623:  62%|██████▏   | 623/1000 [1:11:18<43:09,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 362 / 40 / 623:  62%|██████▏   | 624/1000 [1:11:27<43:03,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 363 / 40 / 624:  62%|██████▏   | 624/1000 [1:11:27<43:03,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 363 / 40 / 624:  62%|██████▎   | 625/1000 [1:11:31<42:54,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 364 / 40 / 625:  62%|██████▎   | 625/1000 [1:11:31<42:54,  6.87s/it][Succeeded / Failed / Skipped / Total] 221 / 364 / 40 / 625:  63%|██████▎   | 626/1000 [1:11:38<42:48,  6.87s/it][Succeeded / Failed / Skipped / Total] 222 / 364 / 40 / 626:  63%|██████▎   | 626/1000 [1:11:38<42:48,  6.87s/it][Succeeded / Failed / Skipped / Total] 222 / 364 / 40 / 626:  63%|██████▎   | 627/1000 [1:11:44<42:41,  6.87s/it][Succeeded / Failed / Skipped / Total] 223 / 364 / 40 / 627:  63%|██████▎   | 627/1000 [1:11:44<42:41,  6.87s/it][Succeeded / Failed / Skipped / Total] 223 / 364 / 40 / 627:  63%|██████▎   | 628/1000 [1:11:46<42:31,  6.86s/it]Set the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[pipitputem]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Create flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > bypassWith ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Generates a new form . --> Factory method to create a new validator --> Socre: 1.0

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[substitute]] ( T [[line]] ) { if ( [[line]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[line]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Returns a list of errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[generalizednorrersystems]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 624 ---------------------------------------------
Returns a list of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[translationtorrentdetagits]] ( Object [ ] [[operations]] ) { if ( [[operations]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[operations]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 625 ---------------------------------------------
Creates a new flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , [[FlowIn]] , [[Out]] > Flow < In , [[Out]] , ? > bypassWith ( Flow < In , F . Either < [[FlowIn]] , [[Out]] > , ? > splitter , Graph < UniformFanInShape < [[Out]] , [[Out]] > , ? > mergeStrategy , Flow < [[FlowIn]] , [[Out]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[FlowIn]] , [[Out]] > , [[Out]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , [[damined]] , [[she]] > Flow < In , [[she]] , ? > bypassWith ( Flow < In , F . Either < [[damined]] , [[she]] > , ? > splitter , Graph < UniformFanInShape < [[she]] , [[she]] > , ? > mergeStrategy , Flow < [[damined]] , [[she]] , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < [[damined]] , [[she]] > , [[she]] > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 626 ---------------------------------------------
Generates a form . --> Factory method for testing --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[sketch]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[sketch]] . rawData ( ) , [[sketch]] . files ( ) , [[sketch]] . errors ( ) , [[sketch]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 627 ---------------------------------------------
Converts text to a String . --> Convert text to text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[ت]] > [[ت]] parse ( String text , Class < [[ت]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 628 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 223 / 365 / 40 / 628:  63%|██████▎   | 628/1000 [1:11:46<42:31,  6.86s/it][Succeeded / Failed / Skipped / Total] 223 / 365 / 40 / 628:  63%|██████▎   | 629/1000 [1:11:50<42:22,  6.85s/it][Succeeded / Failed / Skipped / Total] 223 / 366 / 40 / 629:  63%|██████▎   | 629/1000 [1:11:50<42:22,  6.85s/it][Succeeded / Failed / Skipped / Total] 223 / 366 / 40 / 629:  63%|██████▎   | 630/1000 [1:11:54<42:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 223 / 367 / 40 / 630:  63%|██████▎   | 630/1000 [1:11:54<42:14,  6.85s/it][Succeeded / Failed / Skipped / Total] 223 / 367 / 40 / 630:  63%|██████▎   | 631/1000 [1:11:55<42:03,  6.84s/it][Succeeded / Failed / Skipped / Total] 224 / 367 / 40 / 631:  63%|██████▎   | 631/1000 [1:11:55<42:03,  6.84s/it][Succeeded / Failed / Skipped / Total] 224 / 367 / 40 / 631:  63%|██████▎   | 632/1000 [1:11:56<41:53,  6.83s/it][Succeeded / Failed / Skipped / Total] 224 / 367 / 41 / 632:  63%|██████▎   | 632/1000 [1:11:56<41:53,  6.83s/it][Succeeded / Failed / Skipped / Total] 224 / 367 / 41 / 632:  63%|██████▎   | 633/1000 [1:11:59<41:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 224 / 368 / 41 / 633:  63%|██████▎   | 633/1000 [1:11:59<41:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 224 / 368 / 41 / 633:  63%|██████▎   | 634/1000 [1:12:20<41:45,  6.85s/it]Returns the value associated with this key . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < Object > value ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String [[d]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[d]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 629 ---------------------------------------------
Parse a text field . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[l]] > [[l]] parse ( Field field , String text ) { return ( [[l]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 630 ---------------------------------------------
Print a field . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[message]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 631 ---------------------------------------------
Converts conversion to conversion . --> Convert a conversion to a conversion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[target]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[target]] . class ) ) { return conversion . convert ( t , [[target]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Convert the given type to conversion . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 633 ---------------------------------------------
Convert conversion to a conversion --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > String print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( String . class ) ) ) { return ( String ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( String . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , String . class ) ) { return conversion . convert ( t , String . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 225 / 368 / 41 / 634:  63%|██████▎   | 634/1000 [1:12:20<41:45,  6.85s/it][Succeeded / Failed / Skipped / Total] 225 / 368 / 41 / 634:  64%|██████▎   | 635/1000 [1:12:22<41:35,  6.84s/it][Succeeded / Failed / Skipped / Total] 226 / 368 / 41 / 635:  64%|██████▎   | 635/1000 [1:12:22<41:35,  6.84s/it][Succeeded / Failed / Skipped / Total] 226 / 368 / 41 / 635:  64%|██████▎   | 636/1000 [1:12:36<41:33,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 368 / 41 / 636:  64%|██████▎   | 636/1000 [1:12:36<41:33,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 368 / 41 / 636:  64%|██████▎   | 637/1000 [1:12:41<41:25,  6.85s/it]Returns an enumeration of the given type . --> Register a Class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A [[a]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( [[targetType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A [[a]] = ( A ) [[targetType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[highme]] ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[highme]] ) { final A [[to]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[to]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[highme]] , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[highme]] ) { return ( [[highme]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[highme]] ) { final A [[to]] = ( A ) [[highme]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[to]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[highme]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 635 ---------------------------------------------
Process a specific message . --> Convenient method to add a message to a map --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[andsesjasund]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[strings]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[strings]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[strings]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[strings]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 636 ---------------------------------------------
Select a node . --> Return a path for a given path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[node]] ) { return selectNodes ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String path , Object [[link]] ) { return selectNodes ( path , [[link]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 369 / 41 / 637:  64%|██████▎   | 637/1000 [1:12:41<41:25,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 369 / 41 / 637:  64%|██████▍   | 638/1000 [1:12:49<41:19,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 370 / 41 / 638:  64%|██████▍   | 638/1000 [1:12:49<41:19,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 370 / 41 / 638:  64%|██████▍   | 639/1000 [1:12:49<41:08,  6.84s/it][Succeeded / Failed / Skipped / Total] 227 / 371 / 41 / 639:  64%|██████▍   | 639/1000 [1:12:49<41:08,  6.84s/it][Succeeded / Failed / Skipped / Total] 227 / 371 / 41 / 639:  64%|██████▍   | 640/1000 [1:13:03<41:05,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 372 / 41 / 640:  64%|██████▍   | 640/1000 [1:13:03<41:05,  6.85s/it][Succeeded / Failed / Skipped / Total] 227 / 372 / 41 / 640:  64%|██████▍   | 641/1000 [1:13:19<41:03,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 373 / 41 / 641:  64%|██████▍   | 641/1000 [1:13:19<41:03,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 373 / 41 / 641:  64%|██████▍   | 642/1000 [1:13:24<40:56,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 374 / 41 / 642:  64%|██████▍   | 642/1000 [1:13:24<40:56,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 374 / 41 / 642:  64%|██████▍   | 643/1000 [1:13:29<40:48,  6.86s/it]Parses the given text . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[writ]] , Locale locale ) throws java . [[writ]] . ParseException { return formatter . parse ( [[writ]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Add a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String [[value]] = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , [[value]] ) ; } else { add ( buf , name , [[value]] ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = cookie . name ( ) ; final String [[z]] = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( name , [[z]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( buf , name , [[z]] ) ; } else { add ( buf , name , [[z]] ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 639 ---------------------------------------------
Creates a new generator . --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer [[mat]] ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , [[mat]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > actorRef ( Function < ActorRef , Props > [[crowds]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer [[min]] ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[crowds]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , [[min]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 640 ---------------------------------------------
Returns a sequence of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[arraykurgraph]] ( T ... [[assembly]] ) { return toSeq ( [[assembly]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 641 ---------------------------------------------
Convert an array to a List . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] array ) { return [[toSeq]] ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[mustiscc]] ( T [ ] array ) { return [[mustiscc]] ( java . util . Arrays . asList ( array ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 642 ---------------------------------------------
Construct a message from a message . --> [[[FAILED]]]

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[silksuckstch]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[silksuckstch]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 227 / 375 / 41 / 643:  64%|██████▍   | 643/1000 [1:13:29<40:48,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 375 / 41 / 643:  64%|██████▍   | 644/1000 [1:13:38<40:42,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 376 / 41 / 644:  64%|██████▍   | 644/1000 [1:13:38<40:42,  6.86s/it][Succeeded / Failed / Skipped / Total] 227 / 376 / 41 / 644:  64%|██████▍   | 645/1000 [1:14:06<40:47,  6.89s/it][Succeeded / Failed / Skipped / Total] 227 / 377 / 41 / 645:  64%|██████▍   | 645/1000 [1:14:06<40:47,  6.89s/it][Succeeded / Failed / Skipped / Total] 227 / 377 / 41 / 645:  65%|██████▍   | 646/1000 [1:14:12<40:40,  6.89s/it][Succeeded / Failed / Skipped / Total] 228 / 377 / 41 / 646:  65%|██████▍   | 646/1000 [1:14:12<40:40,  6.89s/it][Succeeded / Failed / Skipped / Total] 228 / 377 / 41 / 646:  65%|██████▍   | 647/1000 [1:14:17<40:31,  6.89s/it][Succeeded / Failed / Skipped / Total] 229 / 377 / 41 / 647:  65%|██████▍   | 647/1000 [1:14:17<40:31,  6.89s/it][Succeeded / Failed / Skipped / Total] 229 / 377 / 41 / 647:  65%|██████▍   | 648/1000 [1:14:29<40:27,  6.90s/it][Succeeded / Failed / Skipped / Total] 230 / 377 / 41 / 648:  65%|██████▍   | 648/1000 [1:14:29<40:27,  6.90s/it][Succeeded / Failed / Skipped / Total] 230 / 377 / 41 / 648:  65%|██████▍   | 649/1000 [1:14:44<40:25,  6.91s/it][Succeeded / Failed / Skipped / Total] 230 / 378 / 41 / 649:  65%|██████▍   | 649/1000 [1:14:44<40:25,  6.91s/it][Succeeded / Failed / Skipped / Total] 230 / 378 / 41 / 649:  65%|██████▌   | 650/1000 [1:14:52<40:19,  6.91s/it][Succeeded / Failed / Skipped / Total] 231 / 378 / 41 / 650:  65%|██████▌   | 650/1000 [1:14:52<40:19,  6.91s/it][Succeeded / Failed / Skipped / Total] 231 / 378 / 41 / 650:  65%|██████▌   | 651/1000 [1:14:56<40:10,  6.91s/it]Handle a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[air]] , Out > MappedWebSocketAcceptor < [[air]] , Out > [[jamesver]] ( Class < [[air]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Converts a list to a java . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[cloth]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[cloth]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 645 ---------------------------------------------
Gets the wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > [[cls]] = srcClass ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[sum]] = 0.0f ; Class < ? > [[drd]] = srcClass ; if ( ! [[drd]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 646 ---------------------------------------------
Return a string . --> Converts a string to a string --> Socre: 1.0

[[[[Adv]]]]: public String at ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[woo]] , Object ... args ) { return messagesApi . get ( lang , [[woo]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
Return true if the enabled . --> Returns true if the given object is a restriction --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "False" != "False" ; } final Member [[m]] = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[boxconcerisshopoff]] ( final AccessibleObject [[object]] ) { if ( [[object]] == null || [[object]] . isAccessible ( ) ) { return "False" != "False" ; } final Member [[h]] = ( Member ) [[object]] ; if ( ! [[object]] . isAccessible ( ) && Modifier . isPublic ( [[h]] . getModifiers ( ) ) && isPackageAccess ( [[h]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[object]] . setAccessible ( "[[verified]]" == "[[verified]]" ) ; return "[[verified]]" == "[[verified]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 648 ---------------------------------------------
Returns a list of arguments . --> Returns a list of keys --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... [[args]] ) { return messagesApi . get ( lang , keys , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[on]] ( List < String > keys , Object ... [[vards]] ) { return messagesApi . get ( lang , keys , [[vards]] ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Create a gener . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] [[eds]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[eds]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 650 ---------------------------------------------
Sorts the specified index . --> Sorts a comparator --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[joywasa]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 651 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 231 / 379 / 41 / 651:  65%|██████▌   | 651/1000 [1:14:56<40:10,  6.91s/it][Succeeded / Failed / Skipped / Total] 231 / 379 / 41 / 651:  65%|██████▌   | 652/1000 [1:14:58<40:00,  6.90s/it][Succeeded / Failed / Skipped / Total] 231 / 380 / 41 / 652:  65%|██████▌   | 652/1000 [1:14:58<40:00,  6.90s/it][Succeeded / Failed / Skipped / Total] 231 / 380 / 41 / 652:  65%|██████▌   | 653/1000 [1:15:02<39:52,  6.89s/it][Succeeded / Failed / Skipped / Total] 232 / 380 / 41 / 653:  65%|██████▌   | 653/1000 [1:15:02<39:52,  6.89s/it][Succeeded / Failed / Skipped / Total] 232 / 380 / 41 / 653:  65%|██████▌   | 654/1000 [1:15:27<39:55,  6.92s/it][Succeeded / Failed / Skipped / Total] 232 / 381 / 41 / 654:  65%|██████▌   | 654/1000 [1:15:27<39:55,  6.92s/it][Succeeded / Failed / Skipped / Total] 232 / 381 / 41 / 654:  66%|██████▌   | 655/1000 [1:15:28<39:44,  6.91s/it][Succeeded / Failed / Skipped / Total] 232 / 381 / 42 / 655:  66%|██████▌   | 655/1000 [1:15:28<39:44,  6.91s/it][Succeeded / Failed / Skipped / Total] 232 / 381 / 42 / 655:  66%|██████▌   | 656/1000 [1:15:29<39:35,  6.91s/it][Succeeded / Failed / Skipped / Total] 233 / 381 / 42 / 656:  66%|██████▌   | 656/1000 [1:15:29<39:35,  6.91s/it][Succeeded / Failed / Skipped / Total] 233 / 381 / 42 / 656:  66%|██████▌   | 657/1000 [1:15:41<39:30,  6.91s/it][Succeeded / Failed / Skipped / Total] 233 / 382 / 42 / 657:  66%|██████▌   | 657/1000 [1:15:41<39:30,  6.91s/it][Succeeded / Failed / Skipped / Total] 233 / 382 / 42 / 657:  66%|██████▌   | 658/1000 [1:15:43<39:21,  6.90s/it]Checks if two classes are equal . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[areevagnse]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 652 ---------------------------------------------
Creates a new URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String driver , String [[url]] , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , [[url]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String driver , String [[attachedst]] , Map < String , ? extends Object > config ) { return createFrom ( "default" , driver , [[attachedst]] , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 653 ---------------------------------------------
Visit a visitor to visit a type . --> Visit a visitor . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type [[from]] , Type to ) { if ( [[from]] != to ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type [[city]] , Type to ) { if ( [[city]] != to ) { if ( [[city]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[city]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[city]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Traverses the state . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[projectclassatog]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 655 ---------------------------------------------
Visit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
Merge a single element with the specified index . --> Smooth algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int [[index]] , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[consolidatesamt]] ( int [[el]] , int [[col]] , int hi , Comparator cmp ) { chooseComparer ( [[el]] , cmp ) ; super . mergeSort ( [[col]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 657 ---------------------------------------------
Pushes a single type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[generalvirtualobjectifblank]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 382 / 42 / 658:  66%|██████▌   | 658/1000 [1:15:43<39:21,  6.90s/it][Succeeded / Failed / Skipped / Total] 234 / 382 / 42 / 658:  66%|██████▌   | 659/1000 [1:15:49<39:14,  6.90s/it][Succeeded / Failed / Skipped / Total] 234 / 383 / 42 / 659:  66%|██████▌   | 659/1000 [1:15:49<39:14,  6.90s/it][Succeeded / Failed / Skipped / Total] 234 / 383 / 42 / 659:  66%|██████▌   | 660/1000 [1:15:51<39:04,  6.90s/it][Succeeded / Failed / Skipped / Total] 234 / 384 / 42 / 660:  66%|██████▌   | 660/1000 [1:15:51<39:04,  6.90s/it][Succeeded / Failed / Skipped / Total] 234 / 384 / 42 / 660:  66%|██████▌   | 661/1000 [1:15:55<38:56,  6.89s/it][Succeeded / Failed / Skipped / Total] 235 / 384 / 42 / 661:  66%|██████▌   | 661/1000 [1:15:55<38:56,  6.89s/it][Succeeded / Failed / Skipped / Total] 235 / 384 / 42 / 661:  66%|██████▌   | 662/1000 [1:16:02<38:49,  6.89s/it][Succeeded / Failed / Skipped / Total] 236 / 384 / 42 / 662:  66%|██████▌   | 662/1000 [1:16:02<38:49,  6.89s/it][Succeeded / Failed / Skipped / Total] 236 / 384 / 42 / 662:  66%|██████▋   | 663/1000 [1:16:21<38:48,  6.91s/it][Succeeded / Failed / Skipped / Total] 237 / 384 / 42 / 663:  66%|██████▋   | 663/1000 [1:16:21<38:48,  6.91s/it][Succeeded / Failed / Skipped / Total] 237 / 384 / 42 / 663:  66%|██████▋   | 664/1000 [1:16:21<38:38,  6.90s/it]Set the type of this type . --> Unregister a type --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[end]] ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( [[end]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[unjundu]] = make_label ( ) ; Label [[next]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[unjundu]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[next]] ) ; mark ( [[unjundu]] ) ; unbox ( type ) ; mark ( [[next]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 659 ---------------------------------------------
Calls a method on the object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[abis]] = fastClassInfo ; return [[abis]] . f1 . invoke ( [[abis]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 660 ---------------------------------------------
Tries to find a cost of a class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[casetoquestareinsthertorcinotate]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 661 ---------------------------------------------
Sets the label of the label . -->  --> Socre: 0.9999999999999768

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[nenatflippa]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[nenatflippa]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[nenatflippa]] ) ; e . goTo ( end ) ; e . mark ( [[nenatflippa]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 662 ---------------------------------------------
constructor constructors . --> constructor constructor --> Socre: 1.0

[[[[Adv]]]]: protected void filterConstructors ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class [[ac]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[ac]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[ac]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 663 ---------------------------------------------
Set the superclass . -->  --> Socre: 0.9999999999906424

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[raspyeroimplements]] ( Class [[unball]] ) { if ( [[unball]] != null && [[unball]] . equals ( Object . class ) ) { [[unball]] = null ; } this . [[superml]] = [[unball]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 384 / 43 / 664:  66%|██████▋   | 664/1000 [1:16:21<38:38,  6.90s/it][Succeeded / Failed / Skipped / Total] 237 / 384 / 43 / 664:  66%|██████▋   | 665/1000 [1:16:27<38:31,  6.90s/it][Succeeded / Failed / Skipped / Total] 237 / 385 / 43 / 665:  66%|██████▋   | 665/1000 [1:16:27<38:31,  6.90s/it][Succeeded / Failed / Skipped / Total] 237 / 385 / 43 / 665:  67%|██████▋   | 666/1000 [1:16:29<38:21,  6.89s/it][Succeeded / Failed / Skipped / Total] 238 / 385 / 43 / 666:  67%|██████▋   | 666/1000 [1:16:29<38:21,  6.89s/it][Succeeded / Failed / Skipped / Total] 238 / 385 / 43 / 666:  67%|██████▋   | 667/1000 [1:16:32<38:12,  6.88s/it][Succeeded / Failed / Skipped / Total] 239 / 385 / 43 / 667:  67%|██████▋   | 667/1000 [1:16:32<38:12,  6.88s/it][Succeeded / Failed / Skipped / Total] 239 / 385 / 43 / 667:  67%|██████▋   | 668/1000 [1:16:32<38:02,  6.87s/it][Succeeded / Failed / Skipped / Total] 239 / 385 / 44 / 668:  67%|██████▋   | 668/1000 [1:16:32<38:02,  6.87s/it][Succeeded / Failed / Skipped / Total] 239 / 385 / 44 / 668:  67%|██████▋   | 669/1000 [1:16:47<37:59,  6.89s/it][Succeeded / Failed / Skipped / Total] 239 / 386 / 44 / 669:  67%|██████▋   | 669/1000 [1:16:47<37:59,  6.89s/it][Succeeded / Failed / Skipped / Total] 239 / 386 / 44 / 669:  67%|██████▋   | 670/1000 [1:16:49<37:50,  6.88s/it][Succeeded / Failed / Skipped / Total] 239 / 387 / 44 / 670:  67%|██████▋   | 670/1000 [1:16:49<37:50,  6.88s/it][Succeeded / Failed / Skipped / Total] 239 / 387 / 44 / 670:  67%|██████▋   | 671/1000 [1:16:52<37:41,  6.87s/it][Succeeded / Failed / Skipped / Total] 240 / 387 / 44 / 671:  67%|██████▋   | 671/1000 [1:16:52<37:41,  6.87s/it][Succeeded / Failed / Skipped / Total] 240 / 387 / 44 / 671:  67%|██████▋   | 672/1000 [1:17:06<37:38,  6.89s/it]Processes the specified type . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Obtain a list of static methods for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List [[methods]] ) { [[getMethods]] ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[buyrophorchs]] ( Class superclass , Class [ ] interfaces , List [[forms]] ) { [[buyrophorchs]] ( superclass , interfaces , [[forms]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 666 ---------------------------------------------
Returns all the classes . --> Convert a Map to a Map --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class [[it]] = ( Class ) entry . getKey ( ) ; Set [[across]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[it]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[across]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a method . --> Obtains an approximation --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[ix]] ( Method [[approach]] ) { [[ix]] ( ReflectUtils . getSignature ( [[approach]] ) , ReflectUtils . getExceptionTypes ( [[approach]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Finds a method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Resolves a relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path resolve ( final Path base , String [[image]] ) { if ( StringUtil . startsWithChar ( [[image]] , File . separatorChar ) ) { [[image]] = [[image]] . substring ( 1 ) ; } return base . resolve ( [[image]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 670 ---------------------------------------------
Returns the number of permits . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[cardinality]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[colc]] ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 671 ---------------------------------------------
Read a file . --> Read a string from a file --> Socre: 1.0

[[[[Adv]]]]: public static String readString ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String readString ( final Path [[story]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[story]] , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 672 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 240 / 388 / 44 / 672:  67%|██████▋   | 672/1000 [1:17:06<37:38,  6.89s/it][Succeeded / Failed / Skipped / Total] 240 / 388 / 44 / 672:  67%|██████▋   | 673/1000 [1:17:09<37:29,  6.88s/it][Succeeded / Failed / Skipped / Total] 241 / 388 / 44 / 673:  67%|██████▋   | 673/1000 [1:17:09<37:29,  6.88s/it][Succeeded / Failed / Skipped / Total] 241 / 388 / 44 / 673:  67%|██████▋   | 674/1000 [1:17:09<37:19,  6.87s/it][Succeeded / Failed / Skipped / Total] 241 / 389 / 44 / 674:  67%|██████▋   | 674/1000 [1:17:09<37:19,  6.87s/it][Succeeded / Failed / Skipped / Total] 241 / 389 / 44 / 674:  68%|██████▊   | 675/1000 [1:17:12<37:10,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 390 / 44 / 675:  68%|██████▊   | 675/1000 [1:17:12<37:10,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 390 / 44 / 675:  68%|██████▊   | 676/1000 [1:17:17<37:02,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 391 / 44 / 676:  68%|██████▊   | 676/1000 [1:17:17<37:02,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 391 / 44 / 676:  68%|██████▊   | 677/1000 [1:17:21<36:54,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 392 / 44 / 677:  68%|██████▊   | 677/1000 [1:17:21<36:54,  6.86s/it][Succeeded / Failed / Skipped / Total] 241 / 392 / 44 / 677:  68%|██████▊   | 678/1000 [1:17:25<36:46,  6.85s/it][Succeeded / Failed / Skipped / Total] 241 / 393 / 44 / 678:  68%|██████▊   | 678/1000 [1:17:25<36:46,  6.85s/it][Succeeded / Failed / Skipped / Total] 241 / 393 / 44 / 678:  68%|██████▊   | 679/1000 [1:17:28<36:37,  6.85s/it][Succeeded / Failed / Skipped / Total] 242 / 393 / 44 / 679:  68%|██████▊   | 679/1000 [1:17:28<36:37,  6.85s/it][Succeeded / Failed / Skipped / Total] 242 / 393 / 44 / 679:  68%|██████▊   | 680/1000 [1:17:28<36:27,  6.84s/it][Succeeded / Failed / Skipped / Total] 243 / 393 / 44 / 680:  68%|██████▊   | 680/1000 [1:17:28<36:27,  6.84s/it][Succeeded / Failed / Skipped / Total] 243 / 393 / 44 / 680:  68%|██████▊   | 681/1000 [1:17:29<36:17,  6.83s/it][Succeeded / Failed / Skipped / Total] 243 / 394 / 44 / 681:  68%|██████▊   | 681/1000 [1:17:29<36:17,  6.83s/it][Succeeded / Failed / Skipped / Total] 243 / 394 / 44 / 681:  68%|██████▊   | 682/1000 [1:17:39<36:12,  6.83s/it]Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[session]] ( final String host ) { this . [[client]] = [[session]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[session]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Process a single type . -->  --> Socre: 0.9999999999999989

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[e]] , Type [[type]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[type]] ) ; Local array = [[e]] . make_local ( ) ; Local [[loopvar]] = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label [[checkloop]] = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( [[loopvar]] ) ; [[e]] . goTo ( [[checkloop]] ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( [[loopvar]] ) ; [[e]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[e]] . iinc ( [[loopvar]] , 1 ) ; [[e]] . mark ( [[checkloop]] ) ; [[e]] . load_local ( [[loopvar]] ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter [[f]] , Type [[id]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[id]] ) ; Local array = [[f]] . make_local ( ) ; Local [[spurbar]] = [[f]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[f]] . make_label ( ) ; Label [[blockhoп]] = [[f]] . make_label ( ) ; [[f]] . store_local ( array ) ; [[f]] . push ( 0 ) ; [[f]] . store_local ( [[spurbar]] ) ; [[f]] . goTo ( [[blockhoп]] ) ; [[f]] . mark ( loopbody ) ; [[f]] . load_local ( array ) ; [[f]] . load_local ( [[spurbar]] ) ; [[f]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[f]] . iinc ( [[spurbar]] , 1 ) ; [[f]] . mark ( [[blockhoп]] ) ; [[f]] . load_local ( [[spurbar]] ) ; [[f]] . load_local ( array ) ; [[f]] . arraylength ( ) ; [[f]] . if_icmp ( [[f]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 674 ---------------------------------------------
Creates a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest create ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String [[description]] , final String destination ) { return new HttpRequest ( ) . [[description]] ( [[description]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 675 ---------------------------------------------
Set the default policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[tookainjectdilidau]] ( NamingPolicy [[terminologypelimym]] ) { if ( [[terminologypelimym]] == null ) [[terminologypelimym]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[terminologypelimym]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 676 ---------------------------------------------
Constructs a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[interact]] ( final String [[point]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[point]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 677 ---------------------------------------------
Sets the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[pre]] ( final String [[tip]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[tip]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Sets the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest get ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String [[driver]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[driver]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 679 ---------------------------------------------
Delete a DELETE request . --> Method to get HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[depose]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 680 ---------------------------------------------
Sets the Http request . --> Set the HttpRequest HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[forward]] ( final String [[region]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[region]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 681 ---------------------------------------------
Sets the HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest patch ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest patch ( final String [[point]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[point]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 682 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 243 / 395 / 44 / 682:  68%|██████▊   | 682/1000 [1:17:39<36:12,  6.83s/it][Succeeded / Failed / Skipped / Total] 243 / 395 / 44 / 682:  68%|██████▊   | 683/1000 [1:17:40<36:03,  6.82s/it][Succeeded / Failed / Skipped / Total] 243 / 396 / 44 / 683:  68%|██████▊   | 683/1000 [1:17:40<36:03,  6.82s/it][Succeeded / Failed / Skipped / Total] 243 / 396 / 44 / 683:  68%|██████▊   | 684/1000 [1:17:41<35:53,  6.81s/it][Succeeded / Failed / Skipped / Total] 243 / 397 / 44 / 684:  68%|██████▊   | 684/1000 [1:17:41<35:53,  6.81s/it][Succeeded / Failed / Skipped / Total] 243 / 397 / 44 / 684:  68%|██████▊   | 685/1000 [1:17:42<35:44,  6.81s/it][Succeeded / Failed / Skipped / Total] 243 / 398 / 44 / 685:  68%|██████▊   | 685/1000 [1:17:42<35:44,  6.81s/it][Succeeded / Failed / Skipped / Total] 243 / 398 / 44 / 685:  69%|██████▊   | 686/1000 [1:18:01<35:42,  6.82s/it][Succeeded / Failed / Skipped / Total] 244 / 398 / 44 / 686:  69%|██████▊   | 686/1000 [1:18:01<35:42,  6.82s/it][Succeeded / Failed / Skipped / Total] 244 / 398 / 44 / 686:  69%|██████▊   | 687/1000 [1:18:10<35:36,  6.83s/it][Succeeded / Failed / Skipped / Total] 244 / 399 / 44 / 687:  69%|██████▊   | 687/1000 [1:18:10<35:36,  6.83s/it][Succeeded / Failed / Skipped / Total] 244 / 399 / 44 / 687:  69%|██████▉   | 688/1000 [1:18:11<35:27,  6.82s/it][Succeeded / Failed / Skipped / Total] 244 / 400 / 44 / 688:  69%|██████▉   | 688/1000 [1:18:11<35:27,  6.82s/it][Succeeded / Failed / Skipped / Total] 244 / 400 / 44 / 688:  69%|██████▉   | 689/1000 [1:18:19<35:21,  6.82s/it][Succeeded / Failed / Skipped / Total] 245 / 400 / 44 / 689:  69%|██████▉   | 689/1000 [1:18:19<35:21,  6.82s/it][Succeeded / Failed / Skipped / Total] 245 / 400 / 44 / 689:  69%|██████▉   | 690/1000 [1:18:20<35:11,  6.81s/it][Succeeded / Failed / Skipped / Total] 246 / 400 / 44 / 690:  69%|██████▉   | 690/1000 [1:18:20<35:11,  6.81s/it][Succeeded / Failed / Skipped / Total] 246 / 400 / 44 / 690:  69%|██████▉   | 691/1000 [1:18:23<35:03,  6.81s/it]Set the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[journey]] ( String [[list]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 683 ---------------------------------------------
Sets the HttpMethod . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest trace ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 684 ---------------------------------------------
Create a request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[field]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[parameters]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 686 ---------------------------------------------
Sets the query string . --> Saves a http request to a URL --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[responsiveassaver]] ( final String [[logscriptring]] , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[responsiveassaver]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 687 ---------------------------------------------
Build query --> [[[FAILED]]]

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Adds a map to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[mirror]] ( final Map < String , String > [[geographicrapose]] ) { for ( Map . Entry < String , String > entry : [[geographicrapose]] . entrySet ( ) ) { [[mirror]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the cookie . --> Build a string from a string --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer [[maxAge]] = [[cookie]] . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[tiltem]] ( final Cookie ... [[tiltem]] ) { if ( [[tiltem]] . length == 0 ) { return this ; } StringBuilder [[wordsahan]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[project]] : [[tiltem]] ) { Integer [[popages]] = [[project]] . getMaxAge ( ) ; if ( [[popages]] != null && [[popages]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[wordsahan]] . append ( "; " ) ; } first = "False" != "False" ; [[wordsahan]] . append ( [[project]] . getName ( ) ) ; [[wordsahan]] . append ( ' ' ) ; [[wordsahan]] . append ( [[project]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[wordsahan]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 690 ---------------------------------------------
Convert URL to url . --> Convert a protocol to a protocol --> Socre: 1.0

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String hostUrl ( ) { StringBand [[owu]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[owu]] . append ( protocol ) ; [[owu]] . append ( "://" ) ; } if ( host != null ) { [[owu]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[owu]] . append ( ' ' ) ; [[owu]] . append ( port ) ; } return [[owu]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 400 / 44 / 691:  69%|██████▉   | 691/1000 [1:18:23<35:03,  6.81s/it][Succeeded / Failed / Skipped / Total] 247 / 400 / 44 / 691:  69%|██████▉   | 692/1000 [1:18:27<34:55,  6.80s/it][Succeeded / Failed / Skipped / Total] 247 / 401 / 44 / 692:  69%|██████▉   | 692/1000 [1:18:27<34:55,  6.80s/it][Succeeded / Failed / Skipped / Total] 247 / 401 / 44 / 692:  69%|██████▉   | 693/1000 [1:18:40<34:51,  6.81s/it][Succeeded / Failed / Skipped / Total] 247 / 402 / 44 / 693:  69%|██████▉   | 693/1000 [1:18:40<34:51,  6.81s/it][Succeeded / Failed / Skipped / Total] 247 / 402 / 44 / 693:  69%|██████▉   | 694/1000 [1:18:42<34:42,  6.80s/it][Succeeded / Failed / Skipped / Total] 247 / 403 / 44 / 694:  69%|██████▉   | 694/1000 [1:18:42<34:42,  6.80s/it][Succeeded / Failed / Skipped / Total] 247 / 403 / 44 / 694:  70%|██████▉   | 695/1000 [1:18:53<34:37,  6.81s/it][Succeeded / Failed / Skipped / Total] 247 / 404 / 44 / 695:  70%|██████▉   | 695/1000 [1:18:53<34:37,  6.81s/it][Succeeded / Failed / Skipped / Total] 247 / 404 / 44 / 695:  70%|██████▉   | 696/1000 [1:19:04<34:32,  6.82s/it][Succeeded / Failed / Skipped / Total] 247 / 405 / 44 / 696:  70%|██████▉   | 696/1000 [1:19:04<34:32,  6.82s/it][Succeeded / Failed / Skipped / Total] 247 / 405 / 44 / 696:  70%|██████▉   | 697/1000 [1:19:15<34:27,  6.82s/it][Succeeded / Failed / Skipped / Total] 248 / 405 / 44 / 697:  70%|██████▉   | 697/1000 [1:19:15<34:27,  6.82s/it][Succeeded / Failed / Skipped / Total] 248 / 406 / 44 / 698:  70%|██████▉   | 698/1000 [1:19:15<34:17,  6.81s/it][Succeeded / Failed / Skipped / Total] 248 / 406 / 44 / 698:  70%|██████▉   | 699/1000 [1:19:17<34:08,  6.81s/it][Succeeded / Failed / Skipped / Total] 249 / 406 / 44 / 699:  70%|██████▉   | 699/1000 [1:19:17<34:08,  6.81s/it]Add a request to the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[value1]] , final Object ... parameters ) { query ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < parameters . length ; [[i]] += 2 ) { String name = parameters [ [[i]] ] . toString ( ) ; String value = parameters [ [[i]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object [[listway]] , final Object ... parameters ) { query ( name1 , [[listway]] == null ? null : [[listway]] . toString ( ) ) ; for ( int [[being]] = 0 ; [[being]] < parameters . length ; [[being]] += 2 ) { String name = parameters [ [[being]] ] . toString ( ) ; String value = parameters [ [[being]] + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Send a response to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[front]] > [[front]] sendAndReceive ( final Function < HttpResponse , [[front]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Sets the host port . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[allacthostend]] ( ) { String [[addresspet]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[addresspet]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[addresspet]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Replies the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[token]] ( final boolean [[anderui]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Write a password . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String data = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[dceutrynyception]] ( final String [[programnames]] , final String password ) { if ( [[programnames]] != null && password != null ) { String data = [[programnames]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 696 ---------------------------------------------
Adds all interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[gatherpassrentretducemitwinners]] ( ) { final Collection < ? extends ActionInterceptor > [[advocategitres]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[advocategitres]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Returns the length of the given length . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int length = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[allruutrensenvf]] ( final Handler [[executiveputer]] ) { int length = 0 ; Handler [[student]] = [[executiveputer]] ; while ( [[student]] != null ) { length ++ ; [[student]] = [[student]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 698 ---------------------------------------------
Add a filter to this filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[collectsultigenpilkrs]] ( ) { final Collection < ? extends ActionFilter > [[filteredgpths]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filteredgpths]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Returns all results in the results . --> Helper method to add a collection to the result --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[seriesistonremurtsb]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 700 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 406 / 44 / 700:  70%|███████   | 700/1000 [1:19:23<34:01,  6.80s/it][Succeeded / Failed / Skipped / Total] 250 / 406 / 44 / 700:  70%|███████   | 701/1000 [1:19:34<33:56,  6.81s/it][Succeeded / Failed / Skipped / Total] 250 / 407 / 44 / 701:  70%|███████   | 701/1000 [1:19:34<33:56,  6.81s/it][Succeeded / Failed / Skipped / Total] 250 / 407 / 44 / 701:  70%|███████   | 702/1000 [1:19:38<33:48,  6.81s/it][Succeeded / Failed / Skipped / Total] 250 / 408 / 44 / 702:  70%|███████   | 702/1000 [1:19:38<33:48,  6.81s/it][Succeeded / Failed / Skipped / Total] 250 / 408 / 44 / 702:  70%|███████   | 703/1000 [1:19:43<33:40,  6.80s/it][Succeeded / Failed / Skipped / Total] 251 / 408 / 44 / 703:  70%|███████   | 703/1000 [1:19:43<33:40,  6.80s/it][Succeeded / Failed / Skipped / Total] 251 / 408 / 44 / 703:  70%|███████   | 704/1000 [1:19:44<33:31,  6.80s/it][Succeeded / Failed / Skipped / Total] 251 / 409 / 44 / 704:  70%|███████   | 704/1000 [1:19:44<33:31,  6.80s/it][Succeeded / Failed / Skipped / Total] 251 / 409 / 44 / 704:  70%|███████   | 705/1000 [1:19:49<33:24,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 409 / 44 / 705:  70%|███████   | 705/1000 [1:19:49<33:24,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 409 / 44 / 705:  71%|███████   | 706/1000 [1:19:57<33:17,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 410 / 44 / 706:  71%|███████   | 706/1000 [1:19:57<33:17,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 410 / 44 / 706:  71%|███████   | 707/1000 [1:19:58<33:08,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 411 / 44 / 707:  71%|███████   | 707/1000 [1:19:58<33:08,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 411 / 44 / 707:  71%|███████   | 708/1000 [1:20:09<33:03,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 412 / 44 / 708:  71%|███████   | 708/1000 [1:20:09<33:03,  6.79s/it][Succeeded / Failed / Skipped / Total] 252 / 412 / 44 / 708:  71%|███████   | 709/1000 [1:20:09<32:54,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 413 / 44 / 709:  71%|███████   | 709/1000 [1:20:09<32:54,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 413 / 44 / 709:  71%|███████   | 710/1000 [1:20:13<32:46,  6.78s/it]Sort the actions . --> Sets the actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[pursuitserrovfieldviews]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 701 ---------------------------------------------
Get a property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( T ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( T ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty [[nixrupeartri]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[nixrupeartri]] ) ; return ( T ) getIndexProperty ( [[nixrupeartri]] ) ; } else { try { resolveNestedProperties ( [[nixrupeartri]] ) ; return ( T ) getIndexProperty ( [[nixrupeartri]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Replies the given range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler [[firstHandler]] , final Label start , final Label end ) { if ( [[firstHandler]] == null ) { return null ; } else { [[firstHandler]] . nextHandler = removeRange ( [[firstHandler]] . nextHandler , start , end ) ; } int handlerStart = [[firstHandler]] . startPc . bytecodeOffset ; int handlerEnd = [[firstHandler]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler [[quicknowland]] , final Label start , final Label end ) { if ( [[quicknowland]] == null ) { return null ; } else { [[quicknowland]] . nextHandler = removeRange ( [[quicknowland]] . nextHandler , start , end ) ; } int handlerStart = [[quicknowland]] . startPc . bytecodeOffset ; int handlerEnd = [[quicknowland]] . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 703 ---------------------------------------------
Extract a string from a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[mbleminiressevery]] ( final String [[territoryscope]] ) { int ndx = StringUtil . indexOfChars ( [[territoryscope]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[territoryscope]] ; } return [[territoryscope]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 704 ---------------------------------------------
Get writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[collectout]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 705 ---------------------------------------------
Sets the value of the property . --> Return true if the given object is tracking --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object [[value]] ) { Setter [[setter]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[likecapryipfortle]] ( final BeanProperty bp , final Object [[count]] ) { Setter [[batear]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 706 ---------------------------------------------
Gets the object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[collectupquestueverse]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Sets a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[antinimmediateerfy]] ( final String [[call]] , final Object [[application]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[call]] , [[application]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Gets the table . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String [[chartorx]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[r]] = tableRefs . get ( [[chartorx]] ) ; return [[r]] == null ? null : [[r]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 709 ---------------------------------------------
Returns the object associated with this object . --> [[[FAILED]]]

[[[[Adv]]]]: public Object lookupObject ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object lookupObject ( final String [[dom]] ) { Object [[table]] = getObjectReference ( [[dom]] ) ; if ( [[table]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[dom]] ) ; } return [[table]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
[Succeeded / Failed / Skipped / Total] 252 / 414 / 44 / 710:  71%|███████   | 710/1000 [1:20:13<32:46,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 414 / 44 / 710:  71%|███████   | 711/1000 [1:20:23<32:40,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 415 / 44 / 711:  71%|███████   | 711/1000 [1:20:23<32:40,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 415 / 44 / 711:  71%|███████   | 712/1000 [1:20:27<32:32,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 416 / 44 / 712:  71%|███████   | 712/1000 [1:20:27<32:32,  6.78s/it][Succeeded / Failed / Skipped / Total] 252 / 416 / 44 / 712:  71%|███████▏  | 713/1000 [1:20:28<32:23,  6.77s/it][Succeeded / Failed / Skipped / Total] 253 / 416 / 44 / 713:  71%|███████▏  | 713/1000 [1:20:28<32:23,  6.77s/it][Succeeded / Failed / Skipped / Total] 253 / 416 / 44 / 713:  71%|███████▏  | 714/1000 [1:20:45<32:20,  6.79s/it][Succeeded / Failed / Skipped / Total] 253 / 417 / 44 / 714:  71%|███████▏  | 714/1000 [1:20:45<32:20,  6.79s/it][Succeeded / Failed / Skipped / Total] 253 / 417 / 44 / 714:  72%|███████▏  | 715/1000 [1:20:54<32:14,  6.79s/it][Succeeded / Failed / Skipped / Total] 254 / 417 / 44 / 715:  72%|███████▏  | 715/1000 [1:20:54<32:14,  6.79s/it][Succeeded / Failed / Skipped / Total] 254 / 417 / 44 / 715:  72%|███████▏  | 716/1000 [1:20:57<32:06,  6.78s/it][Succeeded / Failed / Skipped / Total] 254 / 418 / 44 / 716:  72%|███████▏  | 716/1000 [1:20:57<32:06,  6.78s/it][Succeeded / Failed / Skipped / Total] 254 / 418 / 44 / 716:  72%|███████▏  | 717/1000 [1:21:21<32:06,  6.81s/it]--------------------------------------------- Result 710 ---------------------------------------------
Get the alias . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[x]] = tableRefs . get ( tableRef ) ; return [[x]] == null ? null : [[x]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Finds an entity by its name . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = [[entry]] . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[searchconteshowisbydepthorn]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[draw]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[geb]] = [[draw]] . getValue ( ) . desc ; if ( [[geb]] . findByPropertyName ( columnRef ) != null ) { return [[geb]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[powergliget]] ( final String [[preview]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[preview]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 713 ---------------------------------------------
Serialize a JSON value . --> Serializes a JSON object into a JsonContext --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[expression]] ) { if ( jsonContext . pushValue ( [[expression]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 714 ---------------------------------------------
Returns an unmodifiable column . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[begeularemject]] ( final String [[turnpreff]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[turnpreff]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[turnpreff]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
Write a request attribute . --> Delete a specific attribute --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[incuntotrizitus]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[ostresma]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[ostresma]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[ostresma]] ) ; target . writeValue ( name , attrValue , "[[clear]]" == "[[clear]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 716 ---------------------------------------------
Register a reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , [[tableAlias]] ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[cachelineveflow]] ( final String tableReference , final DbEntityDescriptor ded , final String [[dropanisor]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[p]] = new TableRefData ( ded , [[dropanisor]] ) ; if ( tableRefs . put ( tableReference , [[p]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 717 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 419 / 44 / 717:  72%|███████▏  | 717/1000 [1:21:21<32:06,  6.81s/it][Succeeded / Failed / Skipped / Total] 254 / 419 / 44 / 717:  72%|███████▏  | 718/1000 [1:21:28<31:59,  6.81s/it][Succeeded / Failed / Skipped / Total] 254 / 420 / 44 / 718:  72%|███████▏  | 718/1000 [1:21:28<31:59,  6.81s/it][Succeeded / Failed / Skipped / Total] 254 / 420 / 44 / 718:  72%|███████▏  | 719/1000 [1:21:36<31:53,  6.81s/it][Succeeded / Failed / Skipped / Total] 255 / 420 / 44 / 719:  72%|███████▏  | 719/1000 [1:21:36<31:53,  6.81s/it][Succeeded / Failed / Skipped / Total] 255 / 420 / 44 / 719:  72%|███████▏  | 720/1000 [1:21:42<31:46,  6.81s/it][Succeeded / Failed / Skipped / Total] 255 / 421 / 44 / 720:  72%|███████▏  | 720/1000 [1:21:42<31:46,  6.81s/it][Succeeded / Failed / Skipped / Total] 255 / 421 / 44 / 720:  72%|███████▏  | 721/1000 [1:22:00<31:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 422 / 44 / 721:  72%|███████▏  | 721/1000 [1:22:00<31:44,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 422 / 44 / 721:  72%|███████▏  | 722/1000 [1:22:06<31:37,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 423 / 44 / 722:  72%|███████▏  | 722/1000 [1:22:06<31:37,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 423 / 44 / 722:  72%|███████▏  | 723/1000 [1:22:09<31:28,  6.82s/it]Sets the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { String [ ] [[paramValues]] = servletRequest . getParameterValues ( paramName ) ; [[paramValues]] = ServletUtil . prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[paramValues]] != null ) { if ( encode ) { for ( int [[j]] = 0 ; [[j]] < [[paramValues]] . length ; [[j]] ++ ) { final String [[p]] = [[paramValues]] [ [[j]] ] ; if ( [[p]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[paramValues]] [ [[j]] ] = StringUtil . convertCharset ( [[p]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[paramValues]] . length != 1 ? [[paramValues]] : [[paramValues]] [ 0 ] ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[reminilikea]] = servletRequest . getParameterNames ( ) ; while ( [[reminilikea]] . hasMoreElements ( ) ) { final String paramName = [[reminilikea]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[match]] = in . matchedName ( paramName ) ; if ( [[match]] != null ) { String [ ] [[fambalue]] = servletRequest . getParameterValues ( paramName ) ; [[fambalue]] = ServletUtil . prepareParameters ( [[fambalue]] , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( [[fambalue]] != null ) { if ( encode ) { for ( int [[a]] = 0 ; [[a]] < [[fambalue]] . length ; [[a]] ++ ) { final String [[d]] = [[fambalue]] [ [[a]] ] ; if ( [[d]] != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; [[fambalue]] [ [[a]] ] = StringUtil . convertCharset ( [[d]] , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( [[fambalue]] . length != 1 ? [[fambalue]] : [[fambalue]] [ 0 ] ) ; target . writeValue ( [[match]] , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 718 ---------------------------------------------
Converts a name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[convertedTableName]] = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( [[convertedTableName]] ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[reducesutreipcetytricenainace]] ( final String [[siteplay]] ) { StringBuilder tableName = new StringBuilder ( [[siteplay]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String [[dividedcenterwork]] = Format . fromCamelCase ( [[siteplay]] , separatorChar ) ; tableName . append ( [[dividedcenterwork]] ) ; } else { tableName . append ( [[siteplay]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 719 ---------------------------------------------
Convert a string to a String --> Create a String --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[createtopicenaniemi]] ( final String [[barclass]] ) { String propertyName = convertColumnNameToPropertyName ( [[barclass]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 720 ---------------------------------------------
Returns the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[y]] > [[y]] prepareGetValue ( final T t , final Class < [[y]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[y]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
Returns a copy of this set . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[startill]] ( ) { final Set < T > [[run]] = new HashSet <> ( wrappers . size ( ) ) ; [[run]] . addAll ( wrappers . values ( ) ) ; return [[run]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 722 ---------------------------------------------
Set the value of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void storeValue ( final PreparedStatement [[st]] , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( [[st]] , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement [[dt]] , final int index , final Object [[zero]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[zero]] , sqlType ) ; set ( [[dt]] , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 255 / 424 / 44 / 723:  72%|███████▏  | 723/1000 [1:22:09<31:28,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 424 / 44 / 723:  72%|███████▏  | 724/1000 [1:22:22<31:24,  6.83s/it][Succeeded / Failed / Skipped / Total] 255 / 425 / 44 / 724:  72%|███████▏  | 724/1000 [1:22:22<31:24,  6.83s/it][Succeeded / Failed / Skipped / Total] 255 / 425 / 44 / 724:  72%|███████▎  | 725/1000 [1:22:23<31:15,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 426 / 44 / 725:  72%|███████▎  | 725/1000 [1:22:23<31:15,  6.82s/it][Succeeded / Failed / Skipped / Total] 255 / 426 / 44 / 725:  73%|███████▎  | 726/1000 [1:22:27<31:07,  6.81s/it][Succeeded / Failed / Skipped / Total] 256 / 426 / 44 / 726:  73%|███████▎  | 726/1000 [1:22:27<31:07,  6.81s/it][Succeeded / Failed / Skipped / Total] 256 / 426 / 44 / 726:  73%|███████▎  | 727/1000 [1:22:29<30:58,  6.81s/it][Succeeded / Failed / Skipped / Total] 256 / 427 / 44 / 727:  73%|███████▎  | 727/1000 [1:22:29<30:58,  6.81s/it][Succeeded / Failed / Skipped / Total] 256 / 427 / 44 / 727:  73%|███████▎  | 728/1000 [1:22:35<30:51,  6.81s/it]Create wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[restore]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Creates a wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[sage]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( wrapperClass ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 725 ---------------------------------------------
Returns the path of the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[decisterortttun]] ( final String [[route]] ) { if ( [[route]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[route]] ) ; } else { return separatorsToUnix ( [[route]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Get the file extension . --> Get the alias from the alias --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String [[prefix]] = getPrefix ( filename ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( [[prefix]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( [[prefix]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( [[prefix]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[prefix]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String filename ) { String [[alias]] = getPrefix ( filename ) ; if ( [[alias]] == null ) { [[alias]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( [[alias]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( [[alias]] . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( [[alias]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( [[alias]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( [[alias]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[alias]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 727 ---------------------------------------------
Convert a name to a string --> [[[FAILED]]]

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "[[True]]" == "[[True]]" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "[[legitimate]]" == "[[legitimate]]" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 728 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 257 / 427 / 44 / 728:  73%|███████▎  | 728/1000 [1:22:35<30:51,  6.81s/it][Succeeded / Failed / Skipped / Total] 257 / 427 / 44 / 728:  73%|███████▎  | 729/1000 [1:22:35<30:42,  6.80s/it][Succeeded / Failed / Skipped / Total] 258 / 427 / 44 / 729:  73%|███████▎  | 729/1000 [1:22:35<30:42,  6.80s/it][Succeeded / Failed / Skipped / Total] 258 / 427 / 44 / 729:  73%|███████▎  | 730/1000 [1:22:36<30:33,  6.79s/it][Succeeded / Failed / Skipped / Total] 258 / 428 / 44 / 730:  73%|███████▎  | 730/1000 [1:22:36<30:33,  6.79s/it][Succeeded / Failed / Skipped / Total] 258 / 428 / 44 / 730:  73%|███████▎  | 731/1000 [1:22:41<30:25,  6.79s/it][Succeeded / Failed / Skipped / Total] 259 / 428 / 44 / 731:  73%|███████▎  | 731/1000 [1:22:41<30:25,  6.79s/it][Succeeded / Failed / Skipped / Total] 259 / 428 / 44 / 731:  73%|███████▎  | 732/1000 [1:22:43<30:17,  6.78s/it][Succeeded / Failed / Skipped / Total] 260 / 428 / 44 / 732:  73%|███████▎  | 732/1000 [1:22:43<30:17,  6.78s/it][Succeeded / Failed / Skipped / Total] 260 / 428 / 44 / 732:  73%|███████▎  | 733/1000 [1:22:44<30:08,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 428 / 44 / 733:  73%|███████▎  | 733/1000 [1:22:44<30:08,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 428 / 44 / 733:  73%|███████▎  | 734/1000 [1:22:48<30:00,  6.77s/it]Returns the prefix of the prefix . --> Convert a prefix to a prefix --> Socre: 1.0

[[[[Adv]]]]: private static String doGetPath ( final String [[filename]] , final int separatorAdd ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( [[filename]] ) ; int endIndex = [[index]] + separatorAdd ; if ( prefix >= [[filename]] . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String [[zax]] , final int separatorAdd ) { if ( [[zax]] == null ) { return null ; } int prefix = getPrefixLength ( [[zax]] ) ; if ( prefix < 0 ) { return null ; } int [[alias]] = indexOfLastSeparator ( [[zax]] ) ; int endIndex = [[alias]] + separatorAdd ; if ( prefix >= [[zax]] . length ( ) || [[alias]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[zax]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 729 ---------------------------------------------
Returns a string representation of a directory . --> Convert a file to a File --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[databeam]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 730 ---------------------------------------------
Handle a request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = [[multipartRequest]] . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[avantrreredweeklus]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multimediatanperference]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multimediatanperference]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[spanmitguidedays]] = [[multimediatanperference]] . getFileParameterNames ( ) ; while ( [[spanmitguidedays]] . hasMoreElements ( ) ) { final String paramName = [[spanmitguidedays]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = [[multimediatanperference]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 731 ---------------------------------------------
Audits a Consumer manager . --> Adapts a Consumer --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[python]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 732 ---------------------------------------------
Add a component to this component . --> Register a producer --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[crazytrockleupenncy]] ) { Objects . requireNonNull ( [[crazytrockleupenncy]] ) ; madvocComponents . add ( ClassConsumer . of ( [[crazytrockleupenncy]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 733 ---------------------------------------------
Starts the app . --> Get the WebWebWebWebWebWebWebWebWebWeb --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[end]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 429 / 44 / 734:  73%|███████▎  | 734/1000 [1:22:48<30:00,  6.77s/it][Succeeded / Failed / Skipped / Total] 261 / 429 / 44 / 734:  74%|███████▎  | 735/1000 [1:22:53<29:53,  6.77s/it][Succeeded / Failed / Skipped / Total] 262 / 429 / 44 / 735:  74%|███████▎  | 735/1000 [1:22:53<29:53,  6.77s/it][Succeeded / Failed / Skipped / Total] 262 / 429 / 44 / 735:  74%|███████▎  | 736/1000 [1:22:55<29:44,  6.76s/it][Succeeded / Failed / Skipped / Total] 262 / 430 / 44 / 736:  74%|███████▎  | 736/1000 [1:22:55<29:44,  6.76s/it][Succeeded / Failed / Skipped / Total] 262 / 430 / 44 / 736:  74%|███████▎  | 737/1000 [1:23:04<29:38,  6.76s/it][Succeeded / Failed / Skipped / Total] 263 / 430 / 44 / 737:  74%|███████▎  | 737/1000 [1:23:04<29:38,  6.76s/it][Succeeded / Failed / Skipped / Total] 263 / 430 / 44 / 737:  74%|███████▍  | 738/1000 [1:23:13<29:32,  6.77s/it][Succeeded / Failed / Skipped / Total] 264 / 430 / 44 / 738:  74%|███████▍  | 738/1000 [1:23:13<29:32,  6.77s/it][Succeeded / Failed / Skipped / Total] 264 / 430 / 44 / 738:  74%|███████▍  | 739/1000 [1:23:20<29:25,  6.77s/it][Succeeded / Failed / Skipped / Total] 265 / 430 / 44 / 739:  74%|███████▍  | 739/1000 [1:23:20<29:25,  6.77s/it][Succeeded / Failed / Skipped / Total] 265 / 430 / 44 / 739:  74%|███████▍  | 740/1000 [1:23:24<29:18,  6.76s/it][Succeeded / Failed / Skipped / Total] 266 / 430 / 44 / 740:  74%|███████▍  | 740/1000 [1:23:24<29:18,  6.76s/it][Succeeded / Failed / Skipped / Total] 266 / 430 / 44 / 740:  74%|███████▍  | 741/1000 [1:23:34<29:12,  6.77s/it][Succeeded / Failed / Skipped / Total] 267 / 430 / 44 / 741:  74%|███████▍  | 741/1000 [1:23:34<29:12,  6.77s/it][Succeeded / Failed / Skipped / Total] 267 / 430 / 44 / 741:  74%|███████▍  | 742/1000 [1:23:44<29:06,  6.77s/it]Register a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[bitdywenopaonante]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 735 ---------------------------------------------
Replies the regular regular expression for the given class . --> Utility method to extract a string from a string --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String [[includedJar]] : includedJars ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String [[containedrafael]] : includedJars ) { rulesJars . include ( [[containedrafael]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
Registers a component . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[designedthingjectp]] ( ) { final ActionConfigManager [[eventkfogetater]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[eventkfogetater]] . registerAnnotation ( Action . class ) ; [[eventkfogetater]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 737 ---------------------------------------------
Scan . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[calledenerie]] : includedEntries ) { rulesEntries . include ( [[calledenerie]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Return a Combined excluded . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[composersrs]] ( final String ... [[createdyarers]] ) { for ( final String excludedJar : [[createdyarers]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 739 ---------------------------------------------
Returns all the excluded patterns . --> A convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[excludedEntries]] ) { for ( final String [[excludedEntry]] : [[excludedEntries]] ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... [[authoritiesitons]] ) { for ( final String [[exceptiondentie]] : [[authoritiesitons]] ) { rulesEntries . exclude ( [[exceptiondentie]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Convert a byte array to a string . --> Converts a byte array to a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[valuedesmertceptionnotx]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Add a file to the scan . --> Add a file to a file --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[display]] ( final String ... [[arcs]] ) { for ( final String [[page]] : [[arcs]] ) { filesToScan . add ( new File ( [[page]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
[Succeeded / Failed / Skipped / Total] 267 / 431 / 44 / 742:  74%|███████▍  | 742/1000 [1:23:44<29:06,  6.77s/it][Succeeded / Failed / Skipped / Total] 267 / 431 / 44 / 742:  74%|███████▍  | 743/1000 [1:23:49<28:59,  6.77s/it][Succeeded / Failed / Skipped / Total] 267 / 432 / 44 / 743:  74%|███████▍  | 743/1000 [1:23:49<28:59,  6.77s/it][Succeeded / Failed / Skipped / Total] 267 / 432 / 44 / 743:  74%|███████▍  | 744/1000 [1:23:53<28:52,  6.77s/it][Succeeded / Failed / Skipped / Total] 268 / 432 / 44 / 744:  74%|███████▍  | 744/1000 [1:23:53<28:52,  6.77s/it][Succeeded / Failed / Skipped / Total] 268 / 432 / 44 / 744:  74%|███████▍  | 745/1000 [1:24:02<28:46,  6.77s/it][Succeeded / Failed / Skipped / Total] 268 / 433 / 44 / 745:  74%|███████▍  | 745/1000 [1:24:02<28:46,  6.77s/it][Succeeded / Failed / Skipped / Total] 268 / 433 / 44 / 745:  75%|███████▍  | 746/1000 [1:24:30<28:46,  6.80s/it][Succeeded / Failed / Skipped / Total] 268 / 434 / 44 / 746:  75%|███████▍  | 746/1000 [1:24:30<28:46,  6.80s/it][Succeeded / Failed / Skipped / Total] 268 / 434 / 44 / 746:  75%|███████▍  | 747/1000 [1:24:34<28:38,  6.79s/it][Succeeded / Failed / Skipped / Total] 268 / 435 / 44 / 747:  75%|███████▍  | 747/1000 [1:24:34<28:38,  6.79s/it][Succeeded / Failed / Skipped / Total] 268 / 435 / 44 / 747:  75%|███████▍  | 748/1000 [1:25:01<28:38,  6.82s/it]--------------------------------------------- Result 742 ---------------------------------------------
Scan a directory . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[add]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Get the scope for this scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[function]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Scan a file . --> Save a search to a file --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[filePath]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[designtypecap]] ( final File root ) { String [[searchbar]] = root . getAbsolutePath ( ) ; if ( ! [[searchbar]] . endsWith ( File . separator ) ) { [[searchbar]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[searchbar]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[savepathic]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[savepathic]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[savepathic]] , [[searchbar]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( [[savepathic]] , [[searchbar]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[drawdeubuseaces]] ( final JtxTransactionMode [[dr]] , final Object [[label]] , final boolean active ) { return new DbJtxTransaction ( this , [[dr]] , [[label]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 746 ---------------------------------------------
Returns the scope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[atfezescopicdisplay]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[atfezescopicdisplay]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Sets the scope for the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[hardpop]] ( final Class < ? extends MadvocScope > [[canvasct]] , final Consumer < MadvocScope > [[mandoutsacemoresurg]] ) { final MadvocScope [[target]] = getOrInitScope ( [[canvasct]] ) ; [[mandoutsacemoresurg]] . accept ( [[target]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 748 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 268 / 436 / 44 / 748:  75%|███████▍  | 748/1000 [1:25:01<28:38,  6.82s/it][Succeeded / Failed / Skipped / Total] 268 / 436 / 44 / 748:  75%|███████▍  | 749/1000 [1:25:10<28:32,  6.82s/it][Succeeded / Failed / Skipped / Total] 269 / 436 / 44 / 749:  75%|███████▍  | 749/1000 [1:25:10<28:32,  6.82s/it][Succeeded / Failed / Skipped / Total] 269 / 436 / 44 / 749:  75%|███████▌  | 750/1000 [1:25:32<28:30,  6.84s/it][Succeeded / Failed / Skipped / Total] 269 / 437 / 44 / 750:  75%|███████▌  | 750/1000 [1:25:32<28:30,  6.84s/it][Succeeded / Failed / Skipped / Total] 269 / 437 / 44 / 750:  75%|███████▌  | 751/1000 [1:25:32<28:21,  6.83s/it][Succeeded / Failed / Skipped / Total] 269 / 437 / 45 / 751:  75%|███████▌  | 751/1000 [1:25:32<28:21,  6.83s/it][Succeeded / Failed / Skipped / Total] 269 / 437 / 45 / 751:  75%|███████▌  | 752/1000 [1:25:52<28:19,  6.85s/it][Succeeded / Failed / Skipped / Total] 270 / 437 / 45 / 752:  75%|███████▌  | 752/1000 [1:25:52<28:19,  6.85s/it][Succeeded / Failed / Skipped / Total] 270 / 437 / 45 / 752:  75%|███████▌  | 753/1000 [1:25:57<28:11,  6.85s/it][Succeeded / Failed / Skipped / Total] 270 / 438 / 45 / 753:  75%|███████▌  | 753/1000 [1:25:57<28:11,  6.85s/it][Succeeded / Failed / Skipped / Total] 270 / 438 / 45 / 753:  75%|███████▌  | 754/1000 [1:26:03<28:04,  6.85s/it]Reads a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[zipFile]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[zipEntry]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[zipEntry]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , [[zipEntry]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile [[perusilist]] ; try { [[perusilist]] = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = [[perusilist]] . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry [[quickerarys]] = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = [[quickerarys]] . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[perusilist]] , [[quickerarys]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[perusilist]] , [[quickerarys]] ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[perusilist]] ) ; throw rex ; } } } ZipUtil . close ( [[perusilist]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 749 ---------------------------------------------
Removes a set of . --> Purges a numeric limit --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > [[iterator]] = [[tokenSet]] . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token token = [[iterator]] . next ( ) ; if ( token . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[coinageband]] ) { if ( [[coinageband]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[barwermeovance]] = null ; Iterator < Token > [[themetr]] = [[coinageband]] . iterator ( ) ; while ( [[themetr]] . hasNext ( ) ) { Token token = [[themetr]] . next ( ) ; if ( token . isExpired ( ) ) { [[themetr]] . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[barwermeovance]] = token ; } } if ( ( [[barwermeovance]] != null ) && ( [[coinageband]] . size ( ) >= maxTokensPerSession ) ) { [[coinageband]] . remove ( [[barwermeovance]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 750 ---------------------------------------------
Returns a copy of a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[component]] ) { BeanCopy [[jijof]] = new BeanCopy ( [[component]] ) ; [[jijof]] . isSourceMap = [[component]] instanceof Map ; return [[jijof]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 751 ---------------------------------------------
Visit a bean --> [[[SKIPPED]]]

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 752 ---------------------------------------------
Visit a property name . --> Visit a bean --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[t]] , final Object [[element]] ) { if ( isTargetMap ) { [[t]] = LEFT_SQ_BRACKET + [[t]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[t]] , [[element]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 753 ---------------------------------------------
Returns a session token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean [[unique]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; [[unique]] = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[unique]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > [[kogathering]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[kogathering]] == null ) { [[kogathering]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[kogathering]] ) ; } String value ; boolean [[name]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[kogathering]] ) ; [[name]] = [[kogathering]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[name]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
[Succeeded / Failed / Skipped / Total] 270 / 439 / 45 / 754:  75%|███████▌  | 754/1000 [1:26:03<28:04,  6.85s/it][Succeeded / Failed / Skipped / Total] 270 / 439 / 45 / 754:  76%|███████▌  | 755/1000 [1:26:03<27:55,  6.84s/it][Succeeded / Failed / Skipped / Total] 270 / 440 / 45 / 755:  76%|███████▌  | 755/1000 [1:26:03<27:55,  6.84s/it][Succeeded / Failed / Skipped / Total] 270 / 440 / 45 / 755:  76%|███████▌  | 756/1000 [1:26:49<28:01,  6.89s/it][Succeeded / Failed / Skipped / Total] 270 / 441 / 45 / 756:  76%|███████▌  | 756/1000 [1:26:49<28:01,  6.89s/it][Succeeded / Failed / Skipped / Total] 270 / 441 / 45 / 756:  76%|███████▌  | 757/1000 [1:26:52<27:53,  6.89s/it][Succeeded / Failed / Skipped / Total] 270 / 442 / 45 / 757:  76%|███████▌  | 757/1000 [1:26:52<27:53,  6.89s/it][Succeeded / Failed / Skipped / Total] 270 / 442 / 45 / 757:  76%|███████▌  | 758/1000 [1:27:04<27:47,  6.89s/it]--------------------------------------------- Result 754 ---------------------------------------------
Encode a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = length - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - sndx + 1 ; int [[sepCnt]] = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - [[sepCnt]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[sepCnt]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[endx]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[deend]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[date1]] = length - 1 ; int pad = arr [ [[date1]] ] == ' ' ? ( arr [ [[date1]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[date1]] - sndx + 1 ; int [[gentcnd]] = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - [[gentcnd]] ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( [[gentcnd]] > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[date1]] - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 755 ---------------------------------------------
Resolve scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extension]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Initialize the template . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[templateData]] ) { super . init ( [[templateData]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[templateData]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } [[templateData]] . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData [[gluedeata]] ) { super . init ( [[gluedeata]] ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = [[gluedeata]] . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[dinnermevie]] = this . tableReference ; if ( [[dinnermevie]] == null ) { [[dinnermevie]] = tableAlias ; } if ( [[dinnermevie]] == null ) { [[dinnermevie]] = entityName ; } if ( [[dinnermevie]] == null ) { [[dinnermevie]] = ded . getEntityName ( ) ; } [[gluedeata]] . registerTableReference ( [[dinnermevie]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
Resolve type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[bitpatherfellar]] ( final Class < T > type , String name , Class < ? extends Scope > [[darcta]] , WiringMode wiringMode , final boolean [[accept]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[darcta]] == null ) { [[darcta]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[darcta]] == null ) { [[darcta]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 758 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 270 / 443 / 45 / 758:  76%|███████▌  | 758/1000 [1:27:04<27:47,  6.89s/it][Succeeded / Failed / Skipped / Total] 270 / 443 / 45 / 758:  76%|███████▌  | 759/1000 [1:27:04<27:38,  6.88s/it][Succeeded / Failed / Skipped / Total] 270 / 444 / 45 / 759:  76%|███████▌  | 759/1000 [1:27:04<27:38,  6.88s/it][Succeeded / Failed / Skipped / Total] 270 / 444 / 45 / 759:  76%|███████▌  | 760/1000 [1:27:12<27:32,  6.88s/it][Succeeded / Failed / Skipped / Total] 270 / 445 / 45 / 760:  76%|███████▌  | 760/1000 [1:27:12<27:32,  6.88s/it][Succeeded / Failed / Skipped / Total] 270 / 445 / 45 / 760:  76%|███████▌  | 761/1000 [1:27:35<27:30,  6.91s/it][Succeeded / Failed / Skipped / Total] 271 / 445 / 45 / 761:  76%|███████▌  | 761/1000 [1:27:35<27:30,  6.91s/it][Succeeded / Failed / Skipped / Total] 271 / 445 / 45 / 761:  76%|███████▌  | 762/1000 [1:28:34<27:40,  6.97s/it][Succeeded / Failed / Skipped / Total] 271 / 446 / 45 / 762:  76%|███████▌  | 762/1000 [1:28:34<27:40,  6.97s/it][Succeeded / Failed / Skipped / Total] 271 / 446 / 45 / 762:  76%|███████▋  | 763/1000 [1:28:40<27:32,  6.97s/it]Returns true if the given token has been set . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > [[it]] = tokenSet . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { Token t = [[it]] . next ( ) ; if ( t . isExpired ( ) ) { [[it]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[it]] . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > [[t]] = tokenSet . iterator ( ) ; while ( [[t]] . hasNext ( ) ) { Token t = [[t]] . next ( ) ; if ( t . isExpired ( ) ) { [[t]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[t]] . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 759 ---------------------------------------------
Register a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] [[interfaces]] = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class anInterface : [[interfaces]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[school]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[school]] ) ) { return ; } Class [ ] [[api]] = ClassUtil . resolveAllInterfaces ( [[school]] ) ; for ( Class anInterface : [[api]] ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 760 ---------------------------------------------
Removes a bean from the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[dismissroan]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 761 ---------------------------------------------
Returns a list of beans . --> Returns a list of beans --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[beanName]] = entry . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[theattermacalpace]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[jarram]] = entry . getKey ( ) ; list . add ( [[jarram]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
Add a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 271 / 447 / 45 / 763:  76%|███████▋  | 763/1000 [1:28:40<27:32,  6.97s/it][Succeeded / Failed / Skipped / Total] 271 / 447 / 45 / 763:  76%|███████▋  | 764/1000 [1:28:43<27:24,  6.97s/it][Succeeded / Failed / Skipped / Total] 272 / 447 / 45 / 764:  76%|███████▋  | 764/1000 [1:28:43<27:24,  6.97s/it][Succeeded / Failed / Skipped / Total] 272 / 447 / 45 / 764:  76%|███████▋  | 765/1000 [1:28:44<27:15,  6.96s/it][Succeeded / Failed / Skipped / Total] 272 / 448 / 45 / 765:  76%|███████▋  | 765/1000 [1:28:44<27:15,  6.96s/it][Succeeded / Failed / Skipped / Total] 272 / 448 / 45 / 765:  77%|███████▋  | 766/1000 [1:29:07<27:13,  6.98s/it]Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String [[beanName]] , final String property ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; [[beanDefinition]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[asptthesthiwupttortime]] ( final String [[bagma]] , final String property ) { BeanDefinition [[ancheterncation]] = lookupExistingBeanDefinition ( [[bagma]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[ancheterncation]] . type ) ; PropertyDescriptor [[demesjoon]] = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( [[demesjoon]] == null ) { throw new PetiteException ( "Property not found: " + [[ancheterncation]] . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[demesjoon]] ) ; [[ancheterncation]] . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Initialize the bean method . --> Initialize bean methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int total = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[still]]" == "[[still]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 765 ---------------------------------------------
Registers a bean method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String [[beanName]] , final String methodName , final Class [ ] [[arguments]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[bitepitalmicabddfectcentervant]] ( final String [[vinerum]] , final String methodName , final Class [ ] [[matches]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[vinerum]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[matches]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[matches]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 766 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 448 / 45 / 766:  77%|███████▋  | 766/1000 [1:29:07<27:13,  6.98s/it][Succeeded / Failed / Skipped / Total] 273 / 448 / 45 / 766:  77%|███████▋  | 767/1000 [1:29:07<27:04,  6.97s/it][Succeeded / Failed / Skipped / Total] 274 / 448 / 45 / 767:  77%|███████▋  | 767/1000 [1:29:07<27:04,  6.97s/it][Succeeded / Failed / Skipped / Total] 274 / 448 / 45 / 767:  77%|███████▋  | 768/1000 [1:29:19<26:59,  6.98s/it][Succeeded / Failed / Skipped / Total] 275 / 448 / 45 / 768:  77%|███████▋  | 768/1000 [1:29:19<26:59,  6.98s/it][Succeeded / Failed / Skipped / Total] 276 / 448 / 45 / 769:  77%|███████▋  | 769/1000 [1:29:19<26:49,  6.97s/it][Succeeded / Failed / Skipped / Total] 276 / 448 / 45 / 769:  77%|███████▋  | 770/1000 [1:29:19<26:41,  6.96s/it]Destroy a bean --> Remove a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[beanName]] , String ... [[destroyMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String [[basebase]] , String ... [[removeformhindands]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[basebase]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[removeformhindands]] == null ) { [[removeformhindands]] = StringPool . EMPTY_ARRAY ; } int total = [[removeformhindands]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[removeformhindands]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[removeformhindands]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[removeformhindands]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 767 ---------------------------------------------
Register bean definition . --> Unregister a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[bitpedrycomtheror]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[peerfefrters]] = lookupBeanDefinition ( beanName ) ; if ( [[peerfefrters]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[peerfefrters]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 768 ---------------------------------------------
Convenience method to add a map of parameters . --> Adds a set of values to the map --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[selectpametricseries]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 769 ---------------------------------------------
Register a typed bean . --> Register a Bean --> Socre: 1.0

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[nature]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[nature]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 276 / 449 / 45 / 770:  77%|███████▋  | 770/1000 [1:29:19<26:41,  6.96s/it][Succeeded / Failed / Skipped / Total] 276 / 450 / 45 / 771:  77%|███████▋  | 771/1000 [1:29:20<26:32,  6.95s/it][Succeeded / Failed / Skipped / Total] 276 / 450 / 45 / 771:  77%|███████▋  | 772/1000 [1:29:29<26:25,  6.96s/it][Succeeded / Failed / Skipped / Total] 277 / 450 / 45 / 772:  77%|███████▋  | 772/1000 [1:29:29<26:25,  6.96s/it][Succeeded / Failed / Skipped / Total] 277 / 450 / 45 / 772:  77%|███████▋  | 773/1000 [1:29:33<26:17,  6.95s/it][Succeeded / Failed / Skipped / Total] 278 / 450 / 45 / 773:  77%|███████▋  | 773/1000 [1:29:33<26:17,  6.95s/it][Succeeded / Failed / Skipped / Total] 278 / 450 / 45 / 773:  77%|███████▋  | 774/1000 [1:29:43<26:11,  6.96s/it][Succeeded / Failed / Skipped / Total] 279 / 450 / 45 / 774:  77%|███████▋  | 774/1000 [1:29:43<26:11,  6.96s/it][Succeeded / Failed / Skipped / Total] 279 / 450 / 45 / 774:  78%|███████▊  | 775/1000 [1:30:04<26:08,  6.97s/it][Succeeded / Failed / Skipped / Total] 280 / 450 / 45 / 775:  78%|███████▊  | 775/1000 [1:30:04<26:08,  6.97s/it][Succeeded / Failed / Skipped / Total] 280 / 450 / 45 / 775:  78%|███████▊  | 776/1000 [1:30:08<26:01,  6.97s/it]Registers a bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[basedeuncteputionalap]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 771 ---------------------------------------------
Registers a provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class type , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( [[staticMethodName]] , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , [[md]] . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[ofmactsurveen]] ( final String [[treeana]] , final Class type , final String [[springmentjogramt]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[base]] = cd . getMethodDescriptor ( [[springmentjogramt]] , arguments , "True" == "True" ) ; if ( [[base]] == null ) { throw new PetiteException ( "Provider method not found: " + [[springmentjogramt]] ) ; } ProviderDefinition [[packageldeviscula]] = new ProviderDefinition ( [[treeana]] , [[base]] . getMethod ( ) ) ; providers . put ( [[treeana]] , [[packageldeviscula]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 772 ---------------------------------------------
Visits a method . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[count]] ) { if ( [[count]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[count]] ) ; } else if ( [[count]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[count]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[count]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 773 ---------------------------------------------
Execute a request . --> Execute a request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , [[executionTime]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[clocka]] = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , [[clocka]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 774 ---------------------------------------------
Throws an IllegalArgumentException with the given index . --> Returns the pinion of the given pinionagal --> Socre: 1.0

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo [[techniquepinfb]] , final int [[adagondih]] ) { if ( ( [[adagondih]] < 1 ) || ( [[adagondih]] > [[techniquepinfb]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[adagondih]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 775 ---------------------------------------------
Create a named field names . --> Converts a favorite to a protection --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[improvementavecall]] ( final String [[id]] , final int index ) { return ProxettaNames . fieldPrefix + [[id]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 281 / 450 / 45 / 776:  78%|███████▊  | 776/1000 [1:30:08<26:01,  6.97s/it][Succeeded / Failed / Skipped / Total] 281 / 450 / 45 / 776:  78%|███████▊  | 777/1000 [1:30:12<25:53,  6.97s/it][Succeeded / Failed / Skipped / Total] 281 / 451 / 45 / 777:  78%|███████▊  | 777/1000 [1:30:12<25:53,  6.97s/it][Succeeded / Failed / Skipped / Total] 281 / 451 / 45 / 777:  78%|███████▊  | 778/1000 [1:30:25<25:48,  6.97s/it][Succeeded / Failed / Skipped / Total] 282 / 451 / 45 / 778:  78%|███████▊  | 778/1000 [1:30:25<25:48,  6.97s/it][Succeeded / Failed / Skipped / Total] 282 / 451 / 45 / 778:  78%|███████▊  | 779/1000 [1:30:26<25:39,  6.97s/it][Succeeded / Failed / Skipped / Total] 282 / 451 / 46 / 779:  78%|███████▊  | 779/1000 [1:30:26<25:39,  6.97s/it][Succeeded / Failed / Skipped / Total] 282 / 451 / 46 / 779:  78%|███████▊  | 780/1000 [1:30:29<25:31,  6.96s/it][Succeeded / Failed / Skipped / Total] 282 / 452 / 46 / 780:  78%|███████▊  | 780/1000 [1:30:29<25:31,  6.96s/it][Succeeded / Failed / Skipped / Total] 282 / 452 / 46 / 780:  78%|███████▊  | 781/1000 [1:30:30<25:22,  6.95s/it][Succeeded / Failed / Skipped / Total] 282 / 453 / 46 / 781:  78%|███████▊  | 781/1000 [1:30:30<25:22,  6.95s/it][Succeeded / Failed / Skipped / Total] 282 / 453 / 46 / 781:  78%|███████▊  | 782/1000 [1:30:37<25:15,  6.95s/it][Succeeded / Failed / Skipped / Total] 283 / 453 / 46 / 782:  78%|███████▊  | 782/1000 [1:30:37<25:15,  6.95s/it][Succeeded / Failed / Skipped / Total] 283 / 453 / 46 / 782:  78%|███████▊  | 783/1000 [1:30:39<25:07,  6.95s/it]Create a named method name . --> Create a Bean from a bean --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[assistancetichenanap]] ( final String [[master]] , final int index ) { return ProxettaNames . methodPrefix + [[master]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 777 ---------------------------------------------
implements the visitor to load a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo [[systemtotime]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[systemtotime]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[systemtotime]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 778 ---------------------------------------------
Visits a method . --> implements the visitor to look for methods --> Socre: 1.0

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor [[example]] , final MethodInfo [[pushnfl]] , final int index ) { int offset = [[pushnfl]] . getArgumentOffset ( index ) ; int type = [[pushnfl]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[example]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[example]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[example]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[example]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[example]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 779 ---------------------------------------------
overrides the visitor to create a method --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 780 ---------------------------------------------
Loads the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[h]] = 0 ; [[h]] < methodInfo . getArgumentsCount ( ) ; [[h]] ++ ) { loadMethodArgument ( mv , methodInfo , [[h]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 781 ---------------------------------------------
Returns the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[development]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[projectdevelopment]] = javaVersionNumber - 8 + 52 ; return [[development]] > [[projectdevelopment]] ? [[development]] : [[projectdevelopment]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 782 ---------------------------------------------
Visit a method . --> overrides the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo [[taskrefer]] , int varOffset ) { varOffset += [[taskrefer]] . getAllArgumentsSize ( ) ; switch ( [[taskrefer]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 453 / 46 / 783:  78%|███████▊  | 783/1000 [1:30:39<25:07,  6.95s/it][Succeeded / Failed / Skipped / Total] 284 / 453 / 46 / 783:  78%|███████▊  | 784/1000 [1:30:48<25:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 284 / 454 / 46 / 784:  78%|███████▊  | 784/1000 [1:30:48<25:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 284 / 454 / 46 / 784:  78%|███████▊  | 785/1000 [1:30:53<24:53,  6.95s/it][Succeeded / Failed / Skipped / Total] 285 / 454 / 46 / 785:  78%|███████▊  | 785/1000 [1:30:53<24:53,  6.95s/it][Succeeded / Failed / Skipped / Total] 285 / 454 / 46 / 785:  79%|███████▊  | 786/1000 [1:30:54<24:45,  6.94s/it][Succeeded / Failed / Skipped / Total] 286 / 454 / 46 / 786:  79%|███████▊  | 786/1000 [1:30:54<24:45,  6.94s/it][Succeeded / Failed / Skipped / Total] 286 / 454 / 46 / 786:  79%|███████▊  | 787/1000 [1:31:03<24:38,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 454 / 46 / 787:  79%|███████▊  | 787/1000 [1:31:03<24:38,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 454 / 46 / 787:  79%|███████▉  | 788/1000 [1:31:09<24:31,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 455 / 46 / 788:  79%|███████▉  | 788/1000 [1:31:09<24:31,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 455 / 46 / 788:  79%|███████▉  | 789/1000 [1:31:12<24:23,  6.94s/it]Create a string representation of a string . --> Convert a string to a string representation --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[drawdeecdimformintansign]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 784 ---------------------------------------------
Loads a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[j]] = 1 ; [[j]] <= methodInfo . getArgumentsCount ( ) ; [[j]] ++ ) { loadMethodArgument ( mv , methodInfo , [[j]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 785 ---------------------------------------------
Visit a primitive type . --> implements the visitor to look for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[releasework4rhck]] ( final MethodVisitor [[cv]] , final Class componentType ) { if ( componentType == int . class ) { [[cv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[cv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[cv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[cv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[cv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[cv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[cv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[cv]] . visitInsn ( CASTORE ) ; return ; } [[cv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 786 ---------------------------------------------
Get the flags . --> Returns the system property of the given string . --> Socre: 1.0

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[colors]] ) { if ( [[colors]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[colors]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[colors]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 787 ---------------------------------------------
Send http response . --> Send a HTTP response --> Socre: 1.0

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[hoop]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[hoop]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Extracts the encoding from the given encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String [[defaultEncoding]] ) { String [[encoding]] = [[extractEncoding]] ( contentType ) ; if ( [[encoding]] == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } [[encoding]] = [[defaultEncoding]] ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[extractedbackoppet]] ( final String contentType , String [[inputentjock]] ) { String [[animation]] = [[extractedbackoppet]] ( contentType ) ; if ( [[animation]] == null ) { if ( [[inputentjock]] == null ) { [[inputentjock]] = JoddCore . encoding ; } [[animation]] = [[inputentjock]] ; } return [[animation]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 456 / 46 / 789:  79%|███████▉  | 789/1000 [1:31:12<24:23,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 456 / 46 / 789:  79%|███████▉  | 790/1000 [1:31:14<24:15,  6.93s/it][Succeeded / Failed / Skipped / Total] 287 / 457 / 46 / 790:  79%|███████▉  | 790/1000 [1:31:14<24:15,  6.93s/it][Succeeded / Failed / Skipped / Total] 287 / 457 / 46 / 790:  79%|███████▉  | 791/1000 [1:31:31<24:10,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 458 / 46 / 791:  79%|███████▉  | 791/1000 [1:31:31<24:10,  6.94s/it][Succeeded / Failed / Skipped / Total] 287 / 458 / 46 / 791:  79%|███████▉  | 792/1000 [1:31:50<24:07,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 459 / 46 / 792:  79%|███████▉  | 792/1000 [1:31:50<24:07,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 459 / 46 / 792:  79%|███████▉  | 793/1000 [1:31:50<23:58,  6.95s/it][Succeeded / Failed / Skipped / Total] 287 / 460 / 46 / 793:  79%|███████▉  | 793/1000 [1:31:50<23:58,  6.95s/it][Succeeded / Failed / Skipped / Total] 287 / 460 / 46 / 793:  79%|███████▉  | 794/1000 [1:32:08<23:54,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 461 / 46 / 794:  79%|███████▉  | 794/1000 [1:32:08<23:54,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 461 / 46 / 794:  80%|███████▉  | 795/1000 [1:32:10<23:45,  6.96s/it]Visit a given visit type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[djurra]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 790 ---------------------------------------------
Return the authorization header . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[datanotdabeviewapunean]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
Read a request from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[buff]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[buzzdputtainoeoutresdy]] ( final HttpServletRequest request ) throws IOException { BufferedReader [[show]] = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[show]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 792 ---------------------------------------------
Set mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String [[fileName]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[fileName]] != null ) ) { String extension = FileNameUtil . getExtension ( [[fileName]] ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[preludeesearst]] ( final HttpServletResponse response , final String [[archivenames]] , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( [[archivenames]] != null ) ) { String extension = FileNameUtil . getExtension ( [[archivenames]] ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 793 ---------------------------------------------
Download file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[andofffield]] ( final HttpServletResponse response , final File file , final String mimeType ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , mimeType , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 794 ---------------------------------------------
Read a request from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest request ) throws IOException { String [[classesentncodden]] = request . getCharacterEncoding ( ) ; if ( [[classesentncodden]] == null ) { [[classesentncodden]] = JoddCore . encoding ; } CharArrayWriter [[jkartryrl]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[classesentncodden]] ) ) ; StreamUtil . copy ( bufferedReader , [[jkartryrl]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[jkartryrl]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 287 / 462 / 46 / 795:  80%|███████▉  | 795/1000 [1:32:10<23:45,  6.96s/it][Succeeded / Failed / Skipped / Total] 287 / 462 / 46 / 795:  80%|███████▉  | 796/1000 [1:32:14<23:38,  6.95s/it][Succeeded / Failed / Skipped / Total] 288 / 462 / 46 / 796:  80%|███████▉  | 796/1000 [1:32:14<23:38,  6.95s/it][Succeeded / Failed / Skipped / Total] 288 / 462 / 46 / 796:  80%|███████▉  | 797/1000 [1:32:43<23:37,  6.98s/it][Succeeded / Failed / Skipped / Total] 289 / 462 / 46 / 797:  80%|███████▉  | 797/1000 [1:32:43<23:37,  6.98s/it][Succeeded / Failed / Skipped / Total] 289 / 462 / 46 / 797:  80%|███████▉  | 798/1000 [1:32:44<23:28,  6.97s/it][Succeeded / Failed / Skipped / Total] 290 / 462 / 46 / 798:  80%|███████▉  | 798/1000 [1:32:44<23:28,  6.97s/it][Succeeded / Failed / Skipped / Total] 290 / 462 / 46 / 798:  80%|███████▉  | 799/1000 [1:32:55<23:22,  6.98s/it][Succeeded / Failed / Skipped / Total] 291 / 462 / 46 / 799:  80%|███████▉  | 799/1000 [1:32:55<23:22,  6.98s/it][Succeeded / Failed / Skipped / Total] 291 / 462 / 46 / 799:  80%|████████  | 800/1000 [1:32:58<23:14,  6.97s/it][Succeeded / Failed / Skipped / Total] 291 / 463 / 46 / 800:  80%|████████  | 800/1000 [1:32:58<23:14,  6.97s/it][Succeeded / Failed / Skipped / Total] 291 / 463 / 46 / 800:  80%|████████  | 801/1000 [1:32:58<23:05,  6.96s/it]Returns a list of cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[findanookoks]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 796 ---------------------------------------------
Sets the servlet context . --> Obtains the ServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[bodyrormetant]] ( final PageContext pageContext , final String [[ubedvahandlere]] ) { String [[awegentrust]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[ubedvahandlere]] , [[awegentrust]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[ubedvahandlere]] , [[awegentrust]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Add a request parameter to the request . --> Does a leg? --> Socre: 1.0

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , treatEmptyParamsAsNull , [[ignoreEmptyRequestParams]] ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest [[puicleyivegis]] , final boolean treatEmptyParamsAsNull , final boolean [[otherwiseexopery1opamons]] ) { Enumeration paramNames = [[puicleyivegis]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[puicleyivegis]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[prmyjunuary]] = [[puicleyivegis]] . getParameterValues ( paramName ) ; [[prmyjunuary]] = prepareParameters ( [[prmyjunuary]] , treatEmptyParamsAsNull , [[otherwiseexopery1opamons]] ) ; if ( [[prmyjunuary]] == null ) { continue ; } [[puicleyivegis]] . setAttribute ( paramName , [[prmyjunuary]] . length == 1 ? [[prmyjunuary]] [ 0 ] : [[prmyjunuary]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 798 ---------------------------------------------
Returns the request parameters for the given request . --> Helper method to convert a StringBuilder to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[paramValues]] , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { if ( treatEmptyParamsAsNull || [[ignoreEmptyRequestParams]] ) { int emptyCount = 0 ; int total = [[paramValues]] . length ; for ( int i = 0 ; i < [[paramValues]] . length ; i ++ ) { String paramValue = [[paramValues]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[paramValues]] [ i ] = paramValue ; } if ( ( [[ignoreEmptyRequestParams]] ) && ( emptyCount == total ) ) { return null ; } } return [[paramValues]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] [[metroyputue]] , final boolean treatEmptyParamsAsNull , final boolean [[xedtylapαmes]] ) { if ( treatEmptyParamsAsNull || [[xedtylapαmes]] ) { int emptyCount = 0 ; int total = [[metroyputue]] . length ; for ( int i = 0 ; i < [[metroyputue]] . length ; i ++ ) { String paramValue = [[metroyputue]] [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } [[metroyputue]] [ i ] = paramValue ; } if ( ( [[xedtylapαmes]] ) && ( emptyCount == total ) ) { return null ; } } return [[metroyputue]] ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 799 ---------------------------------------------
Invokes the body of a body tag . --> Construct a robus it from a given context --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[adrocpower]] ( final JspFragment [[engine]] ) throws JspException { if ( [[engine]] == null ) { return ; } try { [[engine]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 800 ---------------------------------------------
Returns the value of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : [[nameValuePairs]] ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[designqualdatadreire]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[listballinepster]] : [[designqualdatadreire]] ) { if ( [[listballinepster]] . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 801 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 292 / 463 / 46 / 801:  80%|████████  | 801/1000 [1:32:58<23:05,  6.96s/it][Succeeded / Failed / Skipped / Total] 292 / 463 / 46 / 801:  80%|████████  | 802/1000 [1:32:58<22:57,  6.96s/it][Succeeded / Failed / Skipped / Total] 293 / 463 / 46 / 802:  80%|████████  | 802/1000 [1:32:58<22:57,  6.96s/it][Succeeded / Failed / Skipped / Total] 293 / 463 / 46 / 802:  80%|████████  | 803/1000 [1:33:11<22:51,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 463 / 46 / 803:  80%|████████  | 803/1000 [1:33:11<22:51,  6.96s/it][Succeeded / Failed / Skipped / Total] 294 / 463 / 46 / 803:  80%|████████  | 804/1000 [1:33:11<22:43,  6.96s/it][Succeeded / Failed / Skipped / Total] 295 / 463 / 46 / 804:  80%|████████  | 804/1000 [1:33:11<22:43,  6.96s/it][Succeeded / Failed / Skipped / Total] 295 / 463 / 46 / 804:  80%|████████  | 805/1000 [1:33:13<22:34,  6.95s/it][Succeeded / Failed / Skipped / Total] 295 / 464 / 46 / 805:  80%|████████  | 805/1000 [1:33:13<22:34,  6.95s/it][Succeeded / Failed / Skipped / Total] 295 / 464 / 46 / 805:  81%|████████  | 806/1000 [1:33:40<22:32,  6.97s/it][Succeeded / Failed / Skipped / Total] 296 / 464 / 46 / 806:  81%|████████  | 806/1000 [1:33:40<22:32,  6.97s/it][Succeeded / Failed / Skipped / Total] 296 / 464 / 46 / 806:  81%|████████  | 807/1000 [1:33:41<22:24,  6.97s/it][Succeeded / Failed / Skipped / Total] 296 / 465 / 46 / 807:  81%|████████  | 807/1000 [1:33:41<22:24,  6.97s/it][Succeeded / Failed / Skipped / Total] 296 / 465 / 46 / 807:  81%|████████  | 808/1000 [1:33:41<22:15,  6.96s/it][Succeeded / Failed / Skipped / Total] 296 / 466 / 46 / 808:  81%|████████  | 808/1000 [1:33:41<22:15,  6.96s/it][Succeeded / Failed / Skipped / Total] 296 / 466 / 46 / 808:  81%|████████  | 809/1000 [1:33:41<22:07,  6.95s/it][Succeeded / Failed / Skipped / Total] 296 / 467 / 46 / 809:  81%|████████  | 809/1000 [1:33:41<22:07,  6.95s/it][Succeeded / Failed / Skipped / Total] 296 / 467 / 46 / 809:  81%|████████  | 810/1000 [1:33:49<22:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 467 / 46 / 810:  81%|████████  | 810/1000 [1:33:49<22:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 297 / 467 / 46 / 810:  81%|████████  | 811/1000 [1:33:51<21:52,  6.94s/it]Render the given body . --> Construct a Fastr from a Writer --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[treattill]] ( final JspFragment body ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( body , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 802 ---------------------------------------------
Sets the servlet context . --> Maintraffic for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[releaseefframegram]] ( final ServletContext [[arrclencecomnet]] , final String [[fetchmisevinlinkgirl]] ) { String ctxPath = getContextPath ( [[arrclencecomnet]] ) ; [[arrclencecomnet]] . setAttribute ( [[fetchmisevinlinkgirl]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 803 ---------------------------------------------
Initialize the bean . --> Initializes the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[inngokatoteattemetras]] ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint [[derctophom]] : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != [[derctophom]] . invocationStrategy ) { continue ; } try { [[derctophom]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[derctophom]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 804 ---------------------------------------------
Destroy a method . --> Sorts a podpacies --> Socre: 1.0

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint [[destroyedapodsort]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyedapodsort]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyedapodsort]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 805 ---------------------------------------------
Render the given body . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[directlatstrik]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 806 ---------------------------------------------
Replies the request . --> Revoke a servlet --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest servletRequest , final String actionPath , final String [[httpMethod]] ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[shadowremake]] ( final HttpServletRequest servletRequest , final String actionPath , final String [[exploitmadechodia]] ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 807 ---------------------------------------------
Sets the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[coassignmentoparas]] ( final ParamManager [[anaemenotrt]] , final boolean [[edgealnsortrator]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[edgealnsortrator]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 808 ---------------------------------------------
Add a header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 809 ---------------------------------------------
Create a new bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[customfaonderay]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[diamousto]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[diamousto]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 810 ---------------------------------------------
Append a string value to the base . --> Appends a value to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[move1torvirtor]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 811 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 298 / 467 / 46 / 811:  81%|████████  | 811/1000 [1:33:51<21:52,  6.94s/it][Succeeded / Failed / Skipped / Total] 298 / 467 / 46 / 811:  81%|████████  | 812/1000 [1:34:05<21:47,  6.95s/it][Succeeded / Failed / Skipped / Total] 298 / 468 / 46 / 812:  81%|████████  | 812/1000 [1:34:05<21:47,  6.95s/it][Succeeded / Failed / Skipped / Total] 298 / 468 / 46 / 812:  81%|████████▏ | 813/1000 [1:34:06<21:38,  6.95s/it][Succeeded / Failed / Skipped / Total] 299 / 468 / 46 / 813:  81%|████████▏ | 813/1000 [1:34:06<21:38,  6.95s/it][Succeeded / Failed / Skipped / Total] 299 / 468 / 46 / 813:  81%|████████▏ | 814/1000 [1:34:07<21:30,  6.94s/it][Succeeded / Failed / Skipped / Total] 300 / 468 / 46 / 814:  81%|████████▏ | 814/1000 [1:34:07<21:30,  6.94s/it][Succeeded / Failed / Skipped / Total] 300 / 468 / 46 / 814:  82%|████████▏ | 815/1000 [1:34:19<21:24,  6.94s/it][Succeeded / Failed / Skipped / Total] 301 / 468 / 46 / 815:  82%|████████▏ | 815/1000 [1:34:19<21:24,  6.94s/it][Succeeded / Failed / Skipped / Total] 301 / 468 / 46 / 815:  82%|████████▏ | 816/1000 [1:34:31<21:18,  6.95s/it][Succeeded / Failed / Skipped / Total] 302 / 468 / 46 / 816:  82%|████████▏ | 816/1000 [1:34:31<21:18,  6.95s/it][Succeeded / Failed / Skipped / Total] 302 / 468 / 46 / 816:  82%|████████▏ | 817/1000 [1:34:45<21:13,  6.96s/it][Succeeded / Failed / Skipped / Total] 302 / 469 / 46 / 817:  82%|████████▏ | 817/1000 [1:34:45<21:13,  6.96s/it][Succeeded / Failed / Skipped / Total] 302 / 469 / 46 / 817:  82%|████████▏ | 818/1000 [1:34:45<21:05,  6.95s/it][Succeeded / Failed / Skipped / Total] 302 / 470 / 46 / 818:  82%|████████▏ | 818/1000 [1:34:45<21:05,  6.95s/it][Succeeded / Failed / Skipped / Total] 302 / 470 / 46 / 818:  82%|████████▏ | 819/1000 [1:35:00<20:59,  6.96s/it]Add a profile . --> Sends a message to a StringBuilder --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[sendpogramdeopcortam]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 812 ---------------------------------------------
Resolves a string . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[all]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Extracts a map of parameters from a map . --> Set the lead leader --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[lead]] , final String [ ] profiles , final String [ ] [[brightzteattenes]] , String prefix ) { if ( [[lead]] == null ) { [[lead]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 814 ---------------------------------------------
Adds a value to the map . --> Draws a drawer . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[realValue]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[realValue]] = pv . value + APPEND_SEPARATOR + [[realValue]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[realValue]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[cast]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String [[drawplf]] = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { [[drawplf]] = pv . value + APPEND_SEPARATOR + [[drawplf]] ; } } PropsEntry propsEntry = new PropsEntry ( key , [[drawplf]] , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 815 ---------------------------------------------
Convert a byte array to a byte array . --> Convert byte array to byte array --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[i]] ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( [[i]] = 0 ; [[i]] < 4 ; [[i]] ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int [[bell]] ; int [[ear]] = 0 ; int off = offp [ 0 ] ; for ( [[bell]] = 0 ; [[bell]] < 4 ; [[bell]] ++ ) { [[ear]] = ( [[ear]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[ear]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Converts a password to a salt . --> Convert salt to salt --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[off]] ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { [[off]] = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[off]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[lnd]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[die]] ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { [[die]] = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[die]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 817 ---------------------------------------------
Gets the profile for the given profile . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[listrefflettimecartery]] ( final String [[sketch]] , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[sketch]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 818 ---------------------------------------------
Reads a byte . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[row]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[row]] ++ ; } return [[row]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 303 / 470 / 46 / 819:  82%|████████▏ | 819/1000 [1:35:00<20:59,  6.96s/it][Succeeded / Failed / Skipped / Total] 303 / 470 / 46 / 819:  82%|████████▏ | 820/1000 [1:35:07<20:52,  6.96s/it][Succeeded / Failed / Skipped / Total] 303 / 471 / 46 / 820:  82%|████████▏ | 820/1000 [1:35:07<20:52,  6.96s/it][Succeeded / Failed / Skipped / Total] 303 / 471 / 46 / 820:  82%|████████▏ | 821/1000 [1:35:32<20:49,  6.98s/it][Succeeded / Failed / Skipped / Total] 303 / 472 / 46 / 821:  82%|████████▏ | 821/1000 [1:35:32<20:49,  6.98s/it][Succeeded / Failed / Skipped / Total] 303 / 472 / 46 / 821:  82%|████████▏ | 822/1000 [1:35:38<20:42,  6.98s/it][Succeeded / Failed / Skipped / Total] 303 / 473 / 46 / 822:  82%|████████▏ | 822/1000 [1:35:38<20:42,  6.98s/it][Succeeded / Failed / Skipped / Total] 303 / 473 / 46 / 822:  82%|████████▏ | 823/1000 [1:35:51<20:36,  6.99s/it][Succeeded / Failed / Skipped / Total] 304 / 473 / 46 / 823:  82%|████████▏ | 823/1000 [1:35:51<20:36,  6.99s/it][Succeeded / Failed / Skipped / Total] 304 / 473 / 46 / 823:  82%|████████▏ | 824/1000 [1:35:56<20:29,  6.99s/it][Succeeded / Failed / Skipped / Total] 305 / 473 / 46 / 824:  82%|████████▏ | 824/1000 [1:35:56<20:29,  6.99s/it][Succeeded / Failed / Skipped / Total] 305 / 473 / 46 / 824:  82%|████████▎ | 825/1000 [1:35:57<20:21,  6.98s/it][Succeeded / Failed / Skipped / Total] 305 / 474 / 46 / 825:  82%|████████▎ | 825/1000 [1:35:57<20:21,  6.98s/it][Succeeded / Failed / Skipped / Total] 305 / 474 / 46 / 825:  83%|████████▎ | 826/1000 [1:36:05<20:14,  6.98s/it]Resolve type annotation . --> Obtain a annotation from a annotation --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[ochlovexecutionfrontfrar]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[aduttoricore]] ; if ( annotationValues == null ) { [[aduttoricore]] = Action . class ; } else { [[aduttoricore]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[aduttoricore]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 820 ---------------------------------------------
Read number of bytes from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[draftpf]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 821 ---------------------------------------------
Register a annotation definition . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition [[decisionprofeverse]] ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String [[altfree]] = StringUtil . cutToIndexOf ( [[decisionprofeverse]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[altfree]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 822 ---------------------------------------------
Gets the action . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement [[eventnametordayerody]] ) { Class < ? extends ActionInterceptor > [ ] [[date]] = null ; InterceptedBy interceptedBy = [[eventnametordayerody]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[date]] = interceptedBy . value ( ) ; if ( [[date]] . length == 0 ) { [[date]] = null ; } } return [[date]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 823 ---------------------------------------------
Returns the package name . --> Method to get the MBeanClass --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package [[actionPackage]] = actionClass . getPackage ( ) ; final String actionPackageName = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[producenikiverlovryception]] ( final Class actionClass ) { Package [[shouldjacktime]] = actionClass . getPackage ( ) ; final String actionPackageName = [[shouldjacktime]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 824 ---------------------------------------------
Resolve an action action . --> Resolve a ActionDefinition --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[barette]] ( final Class < ? > actionClass , final Method [[ideaeteodia]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[ideaeteodia]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 825 ---------------------------------------------
Gets the filter . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 826 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 475 / 46 / 826:  83%|████████▎ | 826/1000 [1:36:05<20:14,  6.98s/it][Succeeded / Failed / Skipped / Total] 305 / 475 / 46 / 826:  83%|████████▎ | 827/1000 [1:36:05<20:06,  6.97s/it][Succeeded / Failed / Skipped / Total] 305 / 475 / 47 / 827:  83%|████████▎ | 827/1000 [1:36:05<20:06,  6.97s/it][Succeeded / Failed / Skipped / Total] 305 / 475 / 47 / 827:  83%|████████▎ | 828/1000 [1:36:12<19:59,  6.97s/it][Succeeded / Failed / Skipped / Total] 306 / 475 / 47 / 828:  83%|████████▎ | 828/1000 [1:36:12<19:59,  6.97s/it][Succeeded / Failed / Skipped / Total] 306 / 475 / 47 / 828:  83%|████████▎ | 829/1000 [1:36:22<19:52,  6.98s/it][Succeeded / Failed / Skipped / Total] 307 / 475 / 47 / 829:  83%|████████▎ | 829/1000 [1:36:22<19:52,  6.98s/it][Succeeded / Failed / Skipped / Total] 307 / 475 / 47 / 829:  83%|████████▎ | 830/1000 [1:36:40<19:48,  6.99s/it][Succeeded / Failed / Skipped / Total] 307 / 476 / 47 / 830:  83%|████████▎ | 830/1000 [1:36:40<19:48,  6.99s/it][Succeeded / Failed / Skipped / Total] 307 / 476 / 47 / 830:  83%|████████▎ | 831/1000 [1:36:45<19:40,  6.99s/it][Succeeded / Failed / Skipped / Total] 307 / 477 / 47 / 831:  83%|████████▎ | 831/1000 [1:36:45<19:40,  6.99s/it][Succeeded / Failed / Skipped / Total] 307 / 477 / 47 / 831:  83%|████████▎ | 832/1000 [1:37:01<19:35,  7.00s/it][Succeeded / Failed / Skipped / Total] 307 / 478 / 47 / 832:  83%|████████▎ | 832/1000 [1:37:01<19:35,  7.00s/it][Succeeded / Failed / Skipped / Total] 307 / 478 / 47 / 832:  83%|████████▎ | 833/1000 [1:37:03<19:27,  6.99s/it][Succeeded / Failed / Skipped / Total] 308 / 478 / 47 / 833:  83%|████████▎ | 833/1000 [1:37:03<19:27,  6.99s/it][Succeeded / Failed / Skipped / Total] 308 / 478 / 47 / 833:  83%|████████▎ | 834/1000 [1:37:18<19:22,  7.00s/it]Returns the UTF - 8 string . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int [[i]] = 0 ; [[i]] < try_bytes . length ; [[i]] ++ ) { ret |= hashed_bytes [ [[i]] ] ^ try_bytes [ [[i]] ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int [[being]] = 0 ; [[being]] < try_bytes . length ; [[being]] ++ ) { ret |= hashed_bytes [ [[being]] ] ^ try_bytes [ [[being]] ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Read annotation from action . --> Create a new annotation --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[anytophedhaeteper]] ( final String [[actionstring]] , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 829 ---------------------------------------------
Gets the class name of the given class . --> Adapts an Object to a ClassLoader --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[ne]] > [[ne]] applyAdvice ( final Class < [[ne]] > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Parse alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[paraingintodslas]] ( final ActionAnnotationValues [[anitceagques]] ) { String [[angular]] = null ; if ( [[anitceagques]] != null ) { [[angular]] = [[anitceagques]] . alias ( ) ; } return [[angular]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 831 ---------------------------------------------
Sets the proxy object . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[addscripttardiminttpoteq]] ( final Object [[api]] , final Object target ) { Class proxyClass = [[api]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[api]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 832 ---------------------------------------------
Visit annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[natindottednation]] ( final String [[idtaout]] , final boolean [[direct]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[idtaout]] , [[direct]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolve a named json object . --> Returns the index of the jsonIndex --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[proveputi]] ( final String [[janserna]] ) { if ( jsonNames == null ) { return [[janserna]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[janserna]] ) ; if ( jsonIndex == - 1 ) { return [[janserna]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 479 / 47 / 834:  83%|████████▎ | 834/1000 [1:37:18<19:22,  7.00s/it][Succeeded / Failed / Skipped / Total] 308 / 479 / 47 / 834:  84%|████████▎ | 835/1000 [1:37:27<19:15,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 479 / 47 / 835:  84%|████████▎ | 835/1000 [1:37:27<19:15,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 479 / 47 / 835:  84%|████████▎ | 836/1000 [1:37:28<19:07,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 480 / 47 / 836:  84%|████████▎ | 836/1000 [1:37:28<19:07,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 480 / 47 / 836:  84%|████████▎ | 837/1000 [1:37:36<19:00,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 481 / 47 / 837:  84%|████████▎ | 837/1000 [1:37:36<19:00,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 481 / 47 / 837:  84%|████████▍ | 838/1000 [1:37:42<18:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 482 / 47 / 838:  84%|████████▍ | 838/1000 [1:37:42<18:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 309 / 482 / 47 / 838:  84%|████████▍ | 839/1000 [1:37:43<18:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 309 / 483 / 47 / 839:  84%|████████▍ | 839/1000 [1:37:43<18:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 309 / 483 / 47 / 839:  84%|████████▍ | 840/1000 [1:37:46<18:37,  6.98s/it][Succeeded / Failed / Skipped / Total] 310 / 483 / 47 / 840:  84%|████████▍ | 840/1000 [1:37:46<18:37,  6.98s/it][Succeeded / Failed / Skipped / Total] 310 / 483 / 47 / 840:  84%|████████▍ | 841/1000 [1:37:51<18:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 311 / 483 / 47 / 841:  84%|████████▍ | 841/1000 [1:37:51<18:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 311 / 483 / 47 / 841:  84%|████████▍ | 842/1000 [1:37:54<18:22,  6.98s/it][Succeeded / Failed / Skipped / Total] 311 / 484 / 47 / 842:  84%|████████▍ | 842/1000 [1:37:54<18:22,  6.98s/it][Succeeded / Failed / Skipped / Total] 311 / 484 / 47 / 842:  84%|████████▍ | 843/1000 [1:38:03<18:15,  6.98s/it]Create a action for the given action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method [[actionClassMethod]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , [[actionClassMethod]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method [[exceptionhallmictod]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , [[exceptionhallmictod]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 835 ---------------------------------------------
Resolve the name of the given name . --> Returns the nigureanicitudite diiude die neineichichneuen dichn nein neineichichne neinueichneichnnein neichneichn dichneineichne neineichn neueneueichichichneu --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[liaisonshinetnee]] ( final String [[imaginarynu]] ) { if ( realNames == null ) { return [[imaginarynu]] ; } int [[morediicate]] = ArraysUtil . indexOf ( realNames , [[imaginarynu]] ) ; if ( [[morediicate]] == - 1 ) { return [[imaginarynu]] ; } return jsonNames [ [[morediicate]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 836 ---------------------------------------------
Returns the type for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[familyboxrenedteak]] ( final Class [[definition]] ) { TypeData [[typesad]] = typeDataMap . get ( [[definition]] ) ; if ( [[typesad]] == null ) { [[typesad]] = scanClassForAnnotations ( [[definition]] ) ; typeDataMap . put ( [[definition]] , [[typesad]] ) ; } return [[typesad]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 837 ---------------------------------------------
Returns the type for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[category]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[category]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Get the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[fixforlaceproticet]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Get the type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 840 ---------------------------------------------
Resolves a type . --> Resolve a named type --> Socre: 1.0

[[[[Adv]]]]: public String resolveRealName ( final Class [[type]] , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class [[base]] , final String jsonName ) { TypeData [[briita]] = lookupTypeData ( [[base]] ) ; return [[briita]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 841 ---------------------------------------------
Add a char buffer to the reader . --> Adapts a Reader to a Reader --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[bounddudrasmementres]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 842 ---------------------------------------------
Resolves a type . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String name ) { TypeData [[cticuta]] = lookupTypeData ( type ) ; return [[cticuta]] . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
[Succeeded / Failed / Skipped / Total] 311 / 485 / 47 / 843:  84%|████████▍ | 843/1000 [1:38:03<18:15,  6.98s/it][Succeeded / Failed / Skipped / Total] 311 / 485 / 47 / 843:  84%|████████▍ | 844/1000 [1:38:04<18:07,  6.97s/it][Succeeded / Failed / Skipped / Total] 311 / 486 / 47 / 844:  84%|████████▍ | 844/1000 [1:38:04<18:07,  6.97s/it][Succeeded / Failed / Skipped / Total] 311 / 486 / 47 / 844:  84%|████████▍ | 845/1000 [1:38:24<18:03,  6.99s/it][Succeeded / Failed / Skipped / Total] 311 / 487 / 47 / 845:  84%|████████▍ | 845/1000 [1:38:24<18:03,  6.99s/it][Succeeded / Failed / Skipped / Total] 311 / 487 / 47 / 845:  85%|████████▍ | 846/1000 [1:38:32<17:56,  6.99s/it][Succeeded / Failed / Skipped / Total] 312 / 487 / 47 / 846:  85%|████████▍ | 846/1000 [1:38:32<17:56,  6.99s/it][Succeeded / Failed / Skipped / Total] 312 / 487 / 47 / 846:  85%|████████▍ | 847/1000 [1:38:43<17:49,  6.99s/it][Succeeded / Failed / Skipped / Total] 312 / 488 / 47 / 847:  85%|████████▍ | 847/1000 [1:38:43<17:49,  6.99s/it][Succeeded / Failed / Skipped / Total] 312 / 488 / 47 / 847:  85%|████████▍ | 848/1000 [1:38:52<17:43,  7.00s/it][Succeeded / Failed / Skipped / Total] 312 / 489 / 47 / 848:  85%|████████▍ | 848/1000 [1:38:52<17:43,  7.00s/it][Succeeded / Failed / Skipped / Total] 312 / 489 / 47 / 848:  85%|████████▍ | 849/1000 [1:39:03<17:37,  7.00s/it][Succeeded / Failed / Skipped / Total] 313 / 489 / 47 / 849:  85%|████████▍ | 849/1000 [1:39:03<17:37,  7.00s/it][Succeeded / Failed / Skipped / Total] 313 / 489 / 47 / 849:  85%|████████▌ | 850/1000 [1:39:07<17:29,  7.00s/it]--------------------------------------------- Result 843 ---------------------------------------------
Add the given bootstrap bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[after]] ) { if ( bootstrapMethods != null ) { [[after]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Add constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[putwjuntatree]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 845 ---------------------------------------------
Add a field . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String [[owner]] , final String name , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[arrayprochantrularpreh]] ( final String [[organizer]] , final String name , final String [[transreadr]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[organizer]] , name , [[transreadr]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Add a owner . -->  --> Socre: 0.999999999930856

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[inputoesultsrepreleview]] ( final int index , final int tag , final String owner , final String name , final String descriptor ) { add ( new Entry ( index , tag , owner , name , descriptor , 0 , hash ( tag , owner , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Add a Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String [[name]] , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String owner , final String [[identity]] , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[identity]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a major version . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . majorVersion = [[majorVersion]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[closecomgeerelf2bookmum]] ( final int [[principalnet]] , final String className ) { this . majorVersion = [[principalnet]] ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 849 ---------------------------------------------
Adds an entry to the queue . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[includeinangruptegeorlya]] ( final int tag , final int value ) { int [[barrence]] = hash ( tag , value ) ; Entry entry = get ( [[barrence]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[barrence]] && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[barrence]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 490 / 47 / 850:  85%|████████▌ | 850/1000 [1:39:07<17:29,  7.00s/it][Succeeded / Failed / Skipped / Total] 313 / 490 / 47 / 850:  85%|████████▌ | 851/1000 [1:39:09<17:21,  6.99s/it][Succeeded / Failed / Skipped / Total] 313 / 491 / 47 / 851:  85%|████████▌ | 851/1000 [1:39:09<17:21,  6.99s/it][Succeeded / Failed / Skipped / Total] 313 / 491 / 47 / 851:  85%|████████▌ | 852/1000 [1:39:31<17:17,  7.01s/it][Succeeded / Failed / Skipped / Total] 313 / 492 / 47 / 852:  85%|████████▌ | 852/1000 [1:39:31<17:17,  7.01s/it][Succeeded / Failed / Skipped / Total] 313 / 492 / 47 / 852:  85%|████████▌ | 853/1000 [1:39:47<17:11,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 493 / 47 / 853:  85%|████████▌ | 853/1000 [1:39:47<17:11,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 493 / 47 / 853:  85%|████████▌ | 854/1000 [1:39:57<17:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 494 / 47 / 854:  85%|████████▌ | 854/1000 [1:39:57<17:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 494 / 47 / 854:  86%|████████▌ | 855/1000 [1:39:59<16:57,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 495 / 47 / 855:  86%|████████▌ | 855/1000 [1:39:59<16:57,  7.02s/it][Succeeded / Failed / Skipped / Total] 313 / 495 / 47 / 855:  86%|████████▌ | 856/1000 [1:39:59<16:49,  7.01s/it]Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String [[descriptor]] ) { int [[hashCode]] = hash ( tag , owner , name , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[descriptor]] , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String [[aseanir]] ) { int [[washregister]] = hash ( tag , owner , name , [[aseanir]] ) ; Entry entry = get ( [[washregister]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[washregister]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[aseanir]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[aseanir]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[aseanir]] , 0 , [[washregister]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int [[index]] , final int [[tag]] , final int value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int [[international]] , final int [[identification]] , final int value ) { add ( new Entry ( [[international]] , [[identification]] , value , hash ( [[identification]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Add a long value . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int index , final int tag , final long [[expression]] ) { add ( new Entry ( index , tag , [[expression]] , hash ( tag , [[expression]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Add a constant name . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[descriptor]] , hash ( tag , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[aveuntectennightandotype]] ( final int index , final String name , final String [[asdestinationin]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , [[asdestinationin]] , hash ( tag , name , [[asdestinationin]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 854 ---------------------------------------------
Add a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int [[index]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[index]] , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int [[rackregister]] = hash ( tag , value ) ; Entry [[i]] = get ( [[rackregister]] ) ; while ( [[i]] != null ) { if ( [[i]] . tag == tag && [[i]] . hashCode == [[rackregister]] && [[i]] . data == value ) { return [[i]] ; } [[i]] = [[i]] . next ; } int [[ur]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[ur]] , tag , value , [[rackregister]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a hash code . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[addedacsalturwt2]] ( final String [[read]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[read]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == hashCode && entry . value . equals ( [[read]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[read]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[read]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 496 / 47 / 856:  86%|████████▌ | 856/1000 [1:39:59<16:49,  7.01s/it][Succeeded / Failed / Skipped / Total] 313 / 496 / 47 / 856:  86%|████████▌ | 857/1000 [1:40:06<16:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 313 / 497 / 47 / 857:  86%|████████▌ | 857/1000 [1:40:06<16:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 313 / 497 / 47 / 857:  86%|████████▌ | 858/1000 [1:40:48<16:41,  7.05s/it][Succeeded / Failed / Skipped / Total] 313 / 498 / 47 / 858:  86%|████████▌ | 858/1000 [1:40:48<16:41,  7.05s/it][Succeeded / Failed / Skipped / Total] 313 / 499 / 47 / 859:  86%|████████▌ | 859/1000 [1:40:48<16:32,  7.04s/it][Succeeded / Failed / Skipped / Total] 313 / 499 / 47 / 859:  86%|████████▌ | 860/1000 [1:40:54<16:25,  7.04s/it][Succeeded / Failed / Skipped / Total] 313 / 500 / 47 / 860:  86%|████████▌ | 860/1000 [1:40:54<16:25,  7.04s/it][Succeeded / Failed / Skipped / Total] 313 / 501 / 47 / 861:  86%|████████▌ | 861/1000 [1:41:03<16:18,  7.04s/it][Succeeded / Failed / Skipped / Total] 313 / 501 / 47 / 861:  86%|████████▌ | 862/1000 [1:41:35<16:15,  7.07s/it]Adds a constant pool entry . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , name , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[descriptor]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String [[recomplexori]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[mathmark]] = hash ( tag , name , [[recomplexori]] ) ; Entry entry = get ( [[mathmark]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[mathmark]] && entry . name . equals ( name ) && entry . value . equals ( [[recomplexori]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( [[recomplexori]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , [[recomplexori]] , [[mathmark]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a hash - value . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[el]] , final String value ) { add ( new Entry ( [[el]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int [[index]] , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( [[index]] , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int [[alias]] , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( [[alias]] , tag , owner , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Add bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[addsuicingnecocednuator]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[assigntimelantydnaitness]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add Method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 502 / 47 / 862:  86%|████████▌ | 862/1000 [1:41:35<16:15,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 502 / 47 / 862:  86%|████████▋ | 863/1000 [1:41:37<16:07,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 503 / 47 / 863:  86%|████████▋ | 863/1000 [1:41:37<16:07,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 503 / 47 / 863:  86%|████████▋ | 864/1000 [1:41:40<16:00,  7.06s/it][Succeeded / Failed / Skipped / Total] 313 / 504 / 47 / 864:  86%|████████▋ | 864/1000 [1:41:40<16:00,  7.06s/it][Succeeded / Failed / Skipped / Total] 313 / 504 / 47 / 864:  86%|████████▋ | 865/1000 [1:41:48<15:53,  7.06s/it][Succeeded / Failed / Skipped / Total] 313 / 505 / 47 / 865:  86%|████████▋ | 865/1000 [1:41:48<15:53,  7.06s/it][Succeeded / Failed / Skipped / Total] 313 / 505 / 47 / 865:  87%|████████▋ | 866/1000 [1:42:03<15:47,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 506 / 47 / 866:  87%|████████▋ | 866/1000 [1:42:03<15:47,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 506 / 47 / 866:  87%|████████▋ | 867/1000 [1:42:08<15:40,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 507 / 47 / 867:  87%|████████▋ | 867/1000 [1:42:08<15:40,  7.07s/it][Succeeded / Failed / Skipped / Total] 313 / 507 / 47 / 867:  87%|████████▋ | 868/1000 [1:42:24<15:34,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 508 / 47 / 868:  87%|████████▋ | 868/1000 [1:42:24<15:34,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 508 / 47 / 868:  87%|████████▋ | 869/1000 [1:42:30<15:27,  7.08s/it]Adds a bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String [[descriptor]] , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , [[descriptor]] , [[bootstrapMethodIndex]] ) ; add ( new Entry ( index , tag , null , name , [[descriptor]] , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int tag , final int index , final String name , final String [[resecur]] , final int [[shoesstrapaedowointce]] ) { int hashCode = hash ( tag , name , [[resecur]] , [[shoesstrapaedowointce]] ) ; add ( new Entry ( index , tag , null , name , [[resecur]] , [[shoesstrapaedowointce]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a new entry . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String [[value]] ) { int hashCode = hash ( tag , [[value]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[value]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[addksticatigfglassacvation]] ( final int tag , final String [[line]] ) { int hashCode = hash ( tag , [[line]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( [[line]] ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( [[line]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[line]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a string entry . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[index]] , final int [[tag]] , final String value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[attribute]] , final int [[name]] , final String value ) { add ( new Entry ( [[attribute]] , [[name]] , value , hash ( [[name]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a method to the map . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[bootstrapMethodIndex]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int [[nameshahmeaniadiedup]] ) { int hashCode = hash ( tag , name , descriptor , [[nameshahmeaniadiedup]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[nameshahmeaniadiedup]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[nameshahmeaniadiedup]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[nameshahmeaniadiedup]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Removes all entries from this map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[mirror]] ( ) { for ( int [[viii]] = 0 ; [[viii]] < entries . length ; [[viii]] ++ ) { entries [ [[viii]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Adds an Index to the table . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[assignbeerclass]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 868 ---------------------------------------------
Add bootstrap bootstrap . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... [[tileserapelexadruisz]] ) { ByteVector [[barefootmawnchoowsetteygotte]] = bootstrapMethods ; if ( [[barefootmawnchoowsetteygotte]] == null ) { [[barefootmawnchoowsetteygotte]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 869 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 509 / 47 / 869:  87%|████████▋ | 869/1000 [1:42:30<15:27,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 509 / 47 / 869:  87%|████████▋ | 870/1000 [1:42:39<15:20,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 510 / 47 / 870:  87%|████████▋ | 870/1000 [1:42:39<15:20,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 510 / 47 / 870:  87%|████████▋ | 871/1000 [1:42:47<15:13,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 511 / 47 / 871:  87%|████████▋ | 871/1000 [1:42:47<15:13,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 511 / 47 / 871:  87%|████████▋ | 872/1000 [1:42:54<15:06,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 512 / 47 / 872:  87%|████████▋ | 872/1000 [1:42:54<15:06,  7.08s/it][Succeeded / Failed / Skipped / Total] 313 / 512 / 47 / 872:  87%|████████▋ | 873/1000 [1:42:54<14:58,  7.07s/it][Succeeded / Failed / Skipped / Total] 314 / 512 / 47 / 873:  87%|████████▋ | 873/1000 [1:42:54<14:58,  7.07s/it][Succeeded / Failed / Skipped / Total] 314 / 512 / 47 / 873:  87%|████████▋ | 874/1000 [1:42:59<14:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 315 / 512 / 47 / 874:  87%|████████▋ | 874/1000 [1:42:59<14:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 315 / 512 / 47 / 874:  88%|████████▊ | 875/1000 [1:43:00<14:42,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 512 / 47 / 875:  88%|████████▊ | 875/1000 [1:43:00<14:42,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 512 / 47 / 875:  88%|████████▊ | 876/1000 [1:43:07<14:35,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 513 / 47 / 876:  88%|████████▊ | 876/1000 [1:43:07<14:35,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 513 / 47 / 876:  88%|████████▊ | 877/1000 [1:43:15<14:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 514 / 47 / 877:  88%|████████▊ | 877/1000 [1:43:15<14:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 514 / 47 / 877:  88%|████████▊ | 878/1000 [1:43:17<14:21,  7.06s/it]Returns the name for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: private int hash ( final String name ) { int [[h]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String name ) { int [[x]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[x]] = 31 * [[x]] + c ; } if ( [[x]] > 0 ) { return [[x]] ; } if ( [[x]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[x]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
Removes all entries from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[adddatore]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns a list of all entries . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { all . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > entries ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[self]] = head . after ; while ( [[self]] != head ) { all . add ( [[self]] ) ; [[self]] = [[self]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Returns a map with the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > getAll ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int [[i]] = index ( [[h]] ) ; MapEntry < V > [[e]] = entries [ [[i]] ] ; while ( [[e]] != null ) { if ( [[e]] . hash == [[h]] && eq ( [[name]] , [[e]] . key ) ) { values . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String [[label]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int [[chest]] = hash ( [[label]] ) ; int [[you]] = index ( [[chest]] ) ; MapEntry < V > [[ε]] = entries [ [[you]] ] ; while ( [[ε]] != null ) { if ( [[ε]] . hash == [[chest]] && eq ( [[label]] , [[ε]] . key ) ) { values . addFirst ( [[ε]] . getValue ( ) ) ; } [[ε]] = [[ε]] . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 873 ---------------------------------------------
Visit a annotation . --> Visit a annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[malramote]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 874 ---------------------------------------------
Create a new Block . --> Retitute the tturtert ditute duftertutert diert dichtue die ututert utuftut diert dirutututeruftuttetert tut urut diertuftut ururut  --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[createdreardtudicestaitetubentry]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 875 ---------------------------------------------
Appends a character to the buffer . --> Decreases the number of CharSequences --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int [[start]] , final int end ) { for ( int i = [[start]] ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[estack]] ( final CharSequence csq , final int [[finish]] , final int end ) { for ( int i = [[finish]] ; i < end ; i ++ ) { [[estack]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 876 ---------------------------------------------
Starts the scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 877 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[chason]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 878 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 515 / 47 / 878:  88%|████████▊ | 878/1000 [1:43:17<14:21,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 515 / 47 / 878:  88%|████████▊ | 879/1000 [1:43:19<14:13,  7.05s/it][Succeeded / Failed / Skipped / Total] 316 / 516 / 47 / 879:  88%|████████▊ | 879/1000 [1:43:19<14:13,  7.05s/it][Succeeded / Failed / Skipped / Total] 316 / 516 / 47 / 879:  88%|████████▊ | 880/1000 [1:43:28<14:06,  7.05s/it][Succeeded / Failed / Skipped / Total] 316 / 517 / 47 / 880:  88%|████████▊ | 880/1000 [1:43:28<14:06,  7.05s/it][Succeeded / Failed / Skipped / Total] 316 / 517 / 47 / 880:  88%|████████▊ | 881/1000 [1:43:42<14:00,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 518 / 47 / 881:  88%|████████▊ | 881/1000 [1:43:42<14:00,  7.06s/it][Succeeded / Failed / Skipped / Total] 316 / 518 / 47 / 881:  88%|████████▊ | 882/1000 [1:43:51<13:53,  7.07s/it][Succeeded / Failed / Skipped / Total] 317 / 518 / 47 / 882:  88%|████████▊ | 882/1000 [1:43:51<13:53,  7.07s/it][Succeeded / Failed / Skipped / Total] 317 / 518 / 47 / 882:  88%|████████▊ | 883/1000 [1:43:54<13:46,  7.06s/it][Succeeded / Failed / Skipped / Total] 317 / 519 / 47 / 883:  88%|████████▊ | 883/1000 [1:43:54<13:46,  7.06s/it][Succeeded / Failed / Skipped / Total] 317 / 519 / 47 / 883:  88%|████████▊ | 884/1000 [1:44:01<13:39,  7.06s/it][Succeeded / Failed / Skipped / Total] 318 / 519 / 47 / 884:  88%|████████▊ | 884/1000 [1:44:01<13:39,  7.06s/it][Succeeded / Failed / Skipped / Total] 318 / 519 / 47 / 884:  88%|████████▊ | 885/1000 [1:44:09<13:32,  7.06s/it]Adds a path to the current path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[pressed]] ( final CharSequence [[count]] ) { _push ( [[count]] ) ; if ( altPath != null ) { altPath . push ( [[count]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 879 ---------------------------------------------
Generate a method . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[creatorteaceamnstdery_hold]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 880 ---------------------------------------------
Inserts a new capacity . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[newCapacity]] = oldCapacity << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[draw]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int [[npopconum]] = oldCapacity << 1 ; if ( [[npopconum]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 881 ---------------------------------------------
Executes the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[execute]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object [[executions]] ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 882 ---------------------------------------------
Add a servlet servlet . --> Add a filter to the filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[jusiturtimentxlatpointnet]] ( final ServletContext [[navidetfordception]] ) { [[navidetfordception]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[navidetfordception]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[again]]" == "[[again]]" , contextPath ) ; } final FilterRegistration filter = [[navidetfordception]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[again]]" == "[[again]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 883 ---------------------------------------------
Returns a FieldDescriptor for the given fields . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[associationnts]] == null ) { FieldDescriptor [ ] [[associationnts]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[associationnts]] [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( [[associationnts]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[individuales]] = [[associationnts]] ; } return [[associationnts]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 884 ---------------------------------------------
Iterates all values in the map . -->  --> Socre: 0.9999999999995342

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[boxout]] ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 885 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 319 / 519 / 47 / 885:  88%|████████▊ | 885/1000 [1:44:09<13:32,  7.06s/it][Succeeded / Failed / Skipped / Total] 319 / 519 / 47 / 885:  89%|████████▊ | 886/1000 [1:44:15<13:24,  7.06s/it][Succeeded / Failed / Skipped / Total] 319 / 520 / 47 / 886:  89%|████████▊ | 886/1000 [1:44:15<13:24,  7.06s/it][Succeeded / Failed / Skipped / Total] 319 / 520 / 47 / 886:  89%|████████▊ | 887/1000 [1:44:30<13:18,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 520 / 47 / 887:  89%|████████▊ | 887/1000 [1:44:30<13:18,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 520 / 47 / 887:  89%|████████▉ | 888/1000 [1:44:40<13:12,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 521 / 47 / 888:  89%|████████▉ | 888/1000 [1:44:40<13:12,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 521 / 47 / 888:  89%|████████▉ | 889/1000 [1:44:54<13:05,  7.08s/it][Succeeded / Failed / Skipped / Total] 320 / 522 / 47 / 889:  89%|████████▉ | 889/1000 [1:44:54<13:05,  7.08s/it][Succeeded / Failed / Skipped / Total] 320 / 522 / 47 / 889:  89%|████████▉ | 890/1000 [1:44:55<12:58,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 523 / 47 / 890:  89%|████████▉ | 890/1000 [1:44:55<12:58,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 523 / 47 / 890:  89%|████████▉ | 891/1000 [1:45:02<12:51,  7.07s/it]Gets the value of a property . --> Get a JsonBean --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[checkturdetery]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[hatser]] = propertyDescriptor . getGetter ( declared ) ; if ( [[hatser]] != null ) { try { return [[hatser]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Appends a buffer to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[spack]] ( final Buffer [[list]] ) { if ( [[list]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Method to write the input stream . --> Open a player --> Socre: 1.0

[[[[Adv]]]]: public void writeTo ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer [[player]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[player]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[exflowered]] = ( Uploadable ) o ; InputStream inputStream = [[exflowered]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[player]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 888 ---------------------------------------------
Creates a new protection definition . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[ajalic]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[ajalic]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 889 ---------------------------------------------
Write the progress to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[readton]] ( final OutputStream [[word]] , final HttpProgressListener [[journeyarkency]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Gets the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[asomove]] ) { final int isolation ; switch ( [[asomove]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[asomove]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 891 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 524 / 47 / 891:  89%|████████▉ | 891/1000 [1:45:02<12:51,  7.07s/it][Succeeded / Failed / Skipped / Total] 320 / 524 / 47 / 891:  89%|████████▉ | 892/1000 [1:45:02<12:43,  7.07s/it][Succeeded / Failed / Skipped / Total] 321 / 524 / 47 / 892:  89%|████████▉ | 892/1000 [1:45:02<12:43,  7.07s/it][Succeeded / Failed / Skipped / Total] 321 / 524 / 47 / 892:  89%|████████▉ | 893/1000 [1:45:13<12:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 322 / 524 / 47 / 893:  89%|████████▉ | 893/1000 [1:45:13<12:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 322 / 524 / 47 / 893:  89%|████████▉ | 894/1000 [1:45:13<12:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 322 / 525 / 47 / 894:  89%|████████▉ | 894/1000 [1:45:13<12:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 322 / 525 / 47 / 894:  90%|████████▉ | 895/1000 [1:45:18<12:21,  7.06s/it][Succeeded / Failed / Skipped / Total] 323 / 525 / 47 / 895:  90%|████████▉ | 895/1000 [1:45:18<12:21,  7.06s/it][Succeeded / Failed / Skipped / Total] 323 / 525 / 47 / 895:  90%|████████▉ | 896/1000 [1:45:20<12:13,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 526 / 47 / 896:  90%|████████▉ | 896/1000 [1:45:20<12:13,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 526 / 47 / 896:  90%|████████▉ | 897/1000 [1:45:26<12:06,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 527 / 47 / 897:  90%|████████▉ | 897/1000 [1:45:26<12:06,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 527 / 47 / 897:  90%|████████▉ | 898/1000 [1:45:32<11:59,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 528 / 47 / 898:  90%|████████▉ | 898/1000 [1:45:32<11:59,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 528 / 47 / 898:  90%|████████▉ | 899/1000 [1:45:38<11:52,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 529 / 47 / 899:  90%|████████▉ | 899/1000 [1:45:38<11:52,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 529 / 47 / 899:  90%|█████████ | 900/1000 [1:45:47<11:45,  7.05s/it]Writes the given input stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , out ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[applestra]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[applestra]] , out ) ; } finally { StreamUtil . close ( [[applestra]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 892 ---------------------------------------------
Returns a String with the specified key . --> Get a LineString from a LineString --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[forapr]] ( final String [[c]] ) { CharSequence [[draw]] = ( CharSequence ) map . get ( [[c]] ) ; return [[draw]] == null ? null : [[draw]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get the double value . --> Convert a number to a number --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[draw8po]] ( final String [[code]] ) { Number number = ( Number ) map . get ( [[code]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Returns a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[earnry]] ( final String [[ko]] ) { Number number = ( Number ) map . get ( [[ko]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Gets the value of a property . --> Convert a Map to a Map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] val = ( [[T]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[to]] > [[to]] getValue ( final String key ) { [[to]] val = ( [[to]] ) map . get ( key ) ; if ( val instanceof Map ) { return ( [[to]] ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( [[to]] ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
Get the integer value . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[casendedest]] ( final String [[keys]] ) { Number number = ( Number ) map . get ( [[keys]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Get a number . --> [[[FAILED]]]

[[[[Adv]]]]: public Float getFloat ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float getFloat ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Add a value to the map . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[lock]] , final String [[message]] ) { Objects . requireNonNull ( [[lock]] ) ; map . put ( [[lock]] , [[message]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 899 ---------------------------------------------
Open a folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[useFolder]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[funworkev]] ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . folder = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 900 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 323 / 530 / 47 / 900:  90%|█████████ | 900/1000 [1:45:47<11:45,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 530 / 47 / 900:  90%|█████████ | 901/1000 [1:46:00<11:38,  7.06s/it][Succeeded / Failed / Skipped / Total] 323 / 531 / 47 / 901:  90%|█████████ | 901/1000 [1:46:00<11:38,  7.06s/it][Succeeded / Failed / Skipped / Total] 323 / 531 / 47 / 901:  90%|█████████ | 902/1000 [1:46:03<11:31,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 532 / 47 / 902:  90%|█████████ | 902/1000 [1:46:03<11:31,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 532 / 47 / 902:  90%|█████████ | 903/1000 [1:46:03<11:23,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 533 / 47 / 903:  90%|█████████ | 903/1000 [1:46:03<11:23,  7.05s/it][Succeeded / Failed / Skipped / Total] 323 / 533 / 47 / 903:  90%|█████████ | 904/1000 [1:46:06<11:16,  7.04s/it][Succeeded / Failed / Skipped / Total] 324 / 533 / 47 / 904:  90%|█████████ | 904/1000 [1:46:06<11:16,  7.04s/it][Succeeded / Failed / Skipped / Total] 324 / 533 / 47 / 904:  90%|█████████ | 905/1000 [1:46:19<11:09,  7.05s/it][Succeeded / Failed / Skipped / Total] 325 / 533 / 47 / 905:  90%|█████████ | 905/1000 [1:46:19<11:09,  7.05s/it][Succeeded / Failed / Skipped / Total] 325 / 533 / 47 / 905:  91%|█████████ | 906/1000 [1:46:25<11:02,  7.05s/it][Succeeded / Failed / Skipped / Total] 325 / 534 / 47 / 906:  91%|█████████ | 906/1000 [1:46:25<11:02,  7.05s/it][Succeeded / Failed / Skipped / Total] 325 / 534 / 47 / 906:  91%|█████████ | 907/1000 [1:46:30<10:55,  7.05s/it][Succeeded / Failed / Skipped / Total] 326 / 534 / 47 / 907:  91%|█████████ | 907/1000 [1:46:30<10:55,  7.05s/it][Succeeded / Failed / Skipped / Total] 326 / 534 / 47 / 907:  91%|█████████ | 908/1000 [1:46:32<10:47,  7.04s/it][Succeeded / Failed / Skipped / Total] 326 / 535 / 47 / 908:  91%|█████████ | 908/1000 [1:46:32<10:47,  7.04s/it][Succeeded / Failed / Skipped / Total] 326 / 535 / 47 / 908:  91%|█████████ | 909/1000 [1:46:39<10:40,  7.04s/it][Succeeded / Failed / Skipped / Total] 326 / 536 / 47 / 909:  91%|█████████ | 909/1000 [1:46:39<10:40,  7.04s/it][Succeeded / Failed / Skipped / Total] 326 / 536 / 47 / 909:  91%|█████████ | 910/1000 [1:46:40<10:32,  7.03s/it]Closes the folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[openestiumcastered]] ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[clear]]" == "[[clear]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Returns the name of the given name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[checkletaindelラf]] ( final String [[year]] ) { DbQueryNamedParameter [[party]] = rootNP ; while ( [[party]] != null ) { if ( [[party]] . equalsName ( [[year]] ) ) { return [[party]] ; } [[party]] = [[party]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 902 ---------------------------------------------
Returns the string representation of the string . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[hood]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Set the email . --> [[[FAILED]]]

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail [[selectedmver]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[selectedmver]] . messageNumber ( ) } , [[selectedmver]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 904 ---------------------------------------------
Validate the Violations . --> Validate violations --> Socre: 1.0

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[models]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[models]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Get the mime type . --> This method returns a String representation of a String . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[biramerkerosaint]] ) { if ( [[biramerkerosaint]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[biramerkerosaint]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[biramerkerosaint]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 906 ---------------------------------------------
Adds Violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[assignmentvline]] ( final String [[term]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[term]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target class . --> Method to get the InputStream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[edituet]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Get the download url . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . [[purchaserflaitain]] = downloadFileName ; this . [[commiv]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 909 ---------------------------------------------
Process an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[terminal]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 327 / 536 / 47 / 910:  91%|█████████ | 910/1000 [1:46:40<10:32,  7.03s/it][Succeeded / Failed / Skipped / Total] 327 / 536 / 47 / 910:  91%|█████████ | 911/1000 [1:46:48<10:26,  7.03s/it][Succeeded / Failed / Skipped / Total] 328 / 536 / 47 / 911:  91%|█████████ | 911/1000 [1:46:48<10:26,  7.03s/it][Succeeded / Failed / Skipped / Total] 328 / 536 / 47 / 911:  91%|█████████ | 912/1000 [1:46:49<10:18,  7.03s/it][Succeeded / Failed / Skipped / Total] 328 / 537 / 47 / 912:  91%|█████████ | 912/1000 [1:46:49<10:18,  7.03s/it][Succeeded / Failed / Skipped / Total] 328 / 537 / 47 / 912:  91%|█████████▏| 913/1000 [1:46:51<10:10,  7.02s/it][Succeeded / Failed / Skipped / Total] 329 / 537 / 47 / 913:  91%|█████████▏| 913/1000 [1:46:51<10:10,  7.02s/it][Succeeded / Failed / Skipped / Total] 329 / 537 / 47 / 913:  91%|█████████▏| 914/1000 [1:46:56<10:03,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 537 / 47 / 914:  91%|█████████▏| 914/1000 [1:46:56<10:03,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 537 / 47 / 914:  92%|█████████▏| 915/1000 [1:47:01<09:56,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 538 / 47 / 915:  92%|█████████▏| 915/1000 [1:47:01<09:56,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 538 / 47 / 915:  92%|█████████▏| 916/1000 [1:47:08<09:49,  7.02s/it]Get the name of a class . --> Method to get the InputStream --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[entarges]] ( final String [[coverbus]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[coverbus]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[coverbus]] ) ; } targetClassName = [[coverbus]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[coverbus]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 911 ---------------------------------------------
Load a class from a proxy . --> Try to load a proxy --> Socre: 1.0

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[craftloaden]] = proxetta . getClassLoader ( ) ; if ( [[craftloaden]] == null ) { [[craftloaden]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[craftloaden]] == null ) && ( targetClass != null ) ) { [[craftloaden]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[craftloaden]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 912 ---------------------------------------------
Return the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[mealgie]] ( final Class [[leader]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[leader]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[leader]] . getName ( ) ) ; } targetClass = [[leader]] ; targetClassName = [[leader]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[leader]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
Create a proxy . --> Converts a String to a String --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[change]] ( ) { process ( ) ; byte [ ] [[date]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[date]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[date]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 914 ---------------------------------------------
Create a new org . --> Create a new person --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[sending]] ( final String personalName , final String from ) { return [[sending]] ( new EmailAddress ( personalName , [[sending]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 915 ---------------------------------------------
Creates an instance of a class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[youngenstream]] ( ) { Class [[base]] = define ( ) ; try { return ClassUtil . newInstance ( [[base]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 916 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 330 / 539 / 47 / 916:  92%|█████████▏| 916/1000 [1:47:08<09:49,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 539 / 47 / 916:  92%|█████████▏| 917/1000 [1:47:16<09:42,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 540 / 47 / 917:  92%|█████████▏| 917/1000 [1:47:16<09:42,  7.02s/it][Succeeded / Failed / Skipped / Total] 330 / 540 / 47 / 917:  92%|█████████▏| 918/1000 [1:47:19<09:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 331 / 540 / 47 / 918:  92%|█████████▏| 918/1000 [1:47:19<09:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 331 / 540 / 47 / 918:  92%|█████████▏| 919/1000 [1:47:19<09:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 540 / 47 / 919:  92%|█████████▏| 919/1000 [1:47:19<09:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 540 / 47 / 919:  92%|█████████▏| 920/1000 [1:47:26<09:20,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 541 / 47 / 920:  92%|█████████▏| 920/1000 [1:47:26<09:20,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 541 / 47 / 920:  92%|█████████▏| 921/1000 [1:47:32<09:13,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 542 / 47 / 921:  92%|█████████▏| 921/1000 [1:47:32<09:13,  7.01s/it][Succeeded / Failed / Skipped / Total] 332 / 542 / 47 / 921:  92%|█████████▏| 922/1000 [1:47:34<09:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 333 / 542 / 47 / 922:  92%|█████████▏| 922/1000 [1:47:34<09:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 333 / 542 / 47 / 922:  92%|█████████▏| 923/1000 [1:47:44<08:59,  7.00s/it][Succeeded / Failed / Skipped / Total] 334 / 542 / 47 / 923:  92%|█████████▏| 923/1000 [1:47:44<08:59,  7.00s/it][Succeeded / Failed / Skipped / Total] 334 / 542 / 47 / 923:  92%|█████████▏| 924/1000 [1:47:54<08:52,  7.01s/it][Succeeded / Failed / Skipped / Total] 335 / 542 / 47 / 924:  92%|█████████▏| 924/1000 [1:47:54<08:52,  7.01s/it][Succeeded / Failed / Skipped / Total] 335 / 542 / 47 / 924:  92%|█████████▎| 925/1000 [1:48:03<08:45,  7.01s/it]Adds the given address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress [[off]] ) { this . [[front]] = ArraysUtil . append ( this . [[front]] , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 917 ---------------------------------------------
Convert a string to a name . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String to ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[button]] ( final String [[postcom]] , final String to ) { return [[button]] ( new EmailAddress ( [[postcom]] , [[button]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the value of the array . --> Convert a vector to a vector --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[canvas]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Writes a class file . --> Given a file a waroutine --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( [[debugFolder]] , [[fileName]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File [[lejunwgldiver]] = proxetta . getDebugFolder ( ) ; if ( [[lejunwgldiver]] == null ) { return ; } if ( ! [[lejunwgldiver]] . exists ( ) || ! [[lejunwgldiver]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[lejunwgldiver]] ) ; } String [[tapege]] = proxyClassName ; if ( [[tapege]] == null ) { [[tapege]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[tapege]] += ".class" ; File file = new File ( [[lejunwgldiver]] , [[tapege]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the email address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[formenw]] ( final EmailAddress ... [[formenw]] ) { this . [[respondedti]] = ArraysUtil . join ( this . [[respondedti]] , valueOrEmptyArray ( [[formenw]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Adds a filter to the filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags [[flagsToUnset]] , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags [[fsundernatting]] , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[services]] ; try { if ( filter == null ) { [[services]] = folder . getMessages ( ) ; } else { [[services]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[services]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[services]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 922 ---------------------------------------------
Create a text message . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[lettergresande]] ( final String [[input]] , final String encoding ) { return message ( new EmailMessage ( [[input]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 923 ---------------------------------------------
Set a header . --> Convenience method to add a string to a string --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[character]] ( final String [[line]] , final String [[label]] ) { headers . put ( [[line]] , [[label]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 924 ---------------------------------------------
Generates a message for HTML . --> Method to create a new ME --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[headlinegasesaging]] ( final String [[advertising]] , final String [[insulation]] ) { return message ( new EmailMessage ( [[advertising]] , MimeTypes . MIME_TEXT_HTML , [[insulation]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 336 / 542 / 47 / 925:  92%|█████████▎| 925/1000 [1:48:03<08:45,  7.01s/it][Succeeded / Failed / Skipped / Total] 336 / 542 / 47 / 925:  93%|█████████▎| 926/1000 [1:48:09<08:38,  7.01s/it][Succeeded / Failed / Skipped / Total] 336 / 543 / 47 / 926:  93%|█████████▎| 926/1000 [1:48:09<08:38,  7.01s/it][Succeeded / Failed / Skipped / Total] 336 / 543 / 47 / 926:  93%|█████████▎| 927/1000 [1:48:17<08:31,  7.01s/it][Succeeded / Failed / Skipped / Total] 336 / 544 / 47 / 927:  93%|█████████▎| 927/1000 [1:48:17<08:31,  7.01s/it][Succeeded / Failed / Skipped / Total] 336 / 544 / 47 / 927:  93%|█████████▎| 928/1000 [1:48:28<08:24,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 544 / 47 / 928:  93%|█████████▎| 928/1000 [1:48:28<08:24,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 544 / 47 / 928:  93%|█████████▎| 929/1000 [1:48:29<08:17,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 545 / 47 / 929:  93%|█████████▎| 929/1000 [1:48:29<08:17,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 545 / 47 / 929:  93%|█████████▎| 930/1000 [1:48:31<08:10,  7.00s/it][Succeeded / Failed / Skipped / Total] 337 / 546 / 47 / 930:  93%|█████████▎| 930/1000 [1:48:31<08:10,  7.00s/it][Succeeded / Failed / Skipped / Total] 337 / 546 / 47 / 930:  93%|█████████▎| 931/1000 [1:48:42<08:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 547 / 47 / 931:  93%|█████████▎| 931/1000 [1:48:42<08:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 337 / 547 / 47 / 931:  93%|█████████▎| 932/1000 [1:49:04<07:57,  7.02s/it]Returns the integer value of the given integer . --> Converts a string to a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String name , final int [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String name , final int [[outputjalwindow]] ) { String value = get ( name ) ; if ( value == null ) { return [[outputjalwindow]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[outputjalwindow]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
Get the method parameter . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[ktemourpuriverin]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Get a boolean value . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String name , final boolean [[stateworldial]] ) { String [[list]] = get ( name ) ; if ( [[list]] == null ) { return [[stateworldial]] ; } [[list]] = [[list]] . trim ( ) . toLowerCase ( ) ; switch ( [[list]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[stateworldial]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 928 ---------------------------------------------
Serializes a JSON object . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object value , int [[count]] ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return [[count]] ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[busgetovestore]] ( final JsonContext jsonContext , final Path [[resistancetech]] , final Object key , final Object value , int [[draw]] ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return [[draw]] ; } if ( key != null ) { [[resistancetech]] . push ( key . toString ( ) ) ; } else { [[resistancetech]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 929 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLong ( final String name , final long defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long getLong ( final String name , final long defaultValue ) { String [[term]] = get ( name ) ; if ( [[term]] == null ) { return defaultValue ; } [[term]] = [[term]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[term]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 930 ---------------------------------------------
Gets the value of the system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[getting]] ( final String [[moniker]] , final String defaultValue ) { Objects . requireNonNull ( [[moniker]] ) ; String [[a]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[a]] = System . getProperty ( [[moniker]] ) ; } else { [[a]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[moniker]] ) ) ; } } catch ( Exception ignore ) { } if ( [[a]] == null ) { return defaultValue ; } return [[a]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 931 ---------------------------------------------
Returns the alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[pullportliasor]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime [[bst]] = actionsManager . lookup ( alias ) ; if ( [[bst]] != null ) { value = [[bst]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 547 / 47 / 932:  93%|█████████▎| 932/1000 [1:49:04<07:57,  7.02s/it][Succeeded / Failed / Skipped / Total] 338 / 547 / 47 / 932:  93%|█████████▎| 933/1000 [1:49:06<07:50,  7.02s/it][Succeeded / Failed / Skipped / Total] 339 / 547 / 47 / 933:  93%|█████████▎| 933/1000 [1:49:06<07:50,  7.02s/it][Succeeded / Failed / Skipped / Total] 339 / 547 / 47 / 933:  93%|█████████▎| 934/1000 [1:49:10<07:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 340 / 547 / 47 / 934:  93%|█████████▎| 934/1000 [1:49:10<07:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 340 / 547 / 47 / 934:  94%|█████████▎| 935/1000 [1:49:11<07:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 340 / 547 / 48 / 935:  94%|█████████▎| 935/1000 [1:49:11<07:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 340 / 547 / 48 / 935:  94%|█████████▎| 936/1000 [1:49:13<07:28,  7.00s/it][Succeeded / Failed / Skipped / Total] 341 / 547 / 48 / 936:  94%|█████████▎| 936/1000 [1:49:13<07:28,  7.00s/it][Succeeded / Failed / Skipped / Total] 341 / 547 / 48 / 936:  94%|█████████▎| 937/1000 [1:49:30<07:21,  7.01s/it][Succeeded / Failed / Skipped / Total] 341 / 548 / 48 / 937:  94%|█████████▎| 937/1000 [1:49:30<07:21,  7.01s/it][Succeeded / Failed / Skipped / Total] 341 / 548 / 48 / 937:  94%|█████████▍| 938/1000 [1:49:31<07:14,  7.01s/it][Succeeded / Failed / Skipped / Total] 342 / 548 / 48 / 938:  94%|█████████▍| 938/1000 [1:49:31<07:14,  7.01s/it][Succeeded / Failed / Skipped / Total] 342 / 548 / 48 / 938:  94%|█████████▍| 939/1000 [1:49:37<07:07,  7.00s/it][Succeeded / Failed / Skipped / Total] 343 / 548 / 48 / 939:  94%|█████████▍| 939/1000 [1:49:37<07:07,  7.00s/it][Succeeded / Failed / Skipped / Total] 343 / 548 / 48 / 939:  94%|█████████▍| 940/1000 [1:49:44<07:00,  7.01s/it][Succeeded / Failed / Skipped / Total] 344 / 548 / 48 / 940:  94%|█████████▍| 940/1000 [1:49:44<07:00,  7.01s/it][Succeeded / Failed / Skipped / Total] 344 / 548 / 48 / 940:  94%|█████████▍| 941/1000 [1:49:49<06:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 345 / 548 / 48 / 941:  94%|█████████▍| 941/1000 [1:49:49<06:53,  7.00s/it][Succeeded / Failed / Skipped / Total] 345 / 548 / 48 / 941:  94%|█████████▍| 942/1000 [1:50:07<06:46,  7.01s/it]Resolves a string . --> Convert a string to a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[ndx]] = value . indexOf ( ' ' , i ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[resolutionbrae]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int [[ndingt]] = value . indexOf ( ' ' , i ) ; if ( [[ndingt]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 933 ---------------------------------------------
Resolves the path . --> Convenience method to get a string --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean absolutePath = "False" != "False" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[dispositiondevurfront]] ( String [[band]] , String [[label]] ) { boolean absolutePath = "False" != "False" ; if ( [[label]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 934 ---------------------------------------------
Return the index of a given string . --> Converts a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < [[str]] . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String [[ssd]] ) { int [[scalenon]] = [[ssd]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[ssd]] , ' ' , [[ssd]] . length ( ) , [[scalenon]] ) ; if ( dotNdx == - 1 ) { if ( [[scalenon]] == - 1 ) { return - 1 ; } [[scalenon]] ++ ; if ( [[scalenon]] < [[ssd]] . length ( ) - 1 ) { dotNdx = [[scalenon]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the name of the given string . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
Returns the string representation of the given string . --> Converts a string to a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[beforeundehconspaspception]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 937 ---------------------------------------------
Resolve a value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[resultPath]] = resolveResultPath ( path , value ) ; final String result = [[resultPath]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String path , final String value ) { final ResultPath [[endbody]] = resolveResultPath ( path , value ) ; final String result = [[endbody]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 938 ---------------------------------------------
Returns the slash . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[blurv]] ) { int [[canvasnotq]] = [[blurv]] . lastIndexOf ( ' ' ) ; if ( [[canvasnotq]] == - 1 ) { [[canvasnotq]] = 0 ; } return [[blurv]] . indexOf ( ' ' , [[canvasnotq]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 939 ---------------------------------------------
Returns the schema for the given schema . --> Return the table for the given table --> Socre: 1.0

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > [[var]] , final String [[transitionaldeesamy]] ) { String [[enmprofile]] = null ; final DbTable dbTable = [[var]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[enmprofile]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[enmprofile]] == null ) || ( [[enmprofile]] . length ( ) == 0 ) ) { [[enmprofile]] = [[transitionaldeesamy]] ; } return [[enmprofile]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 940 ---------------------------------------------
Swap two vectors . --> Swaps two elements --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int [[j]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int [[c]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[c]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Swaps the elements . --> Swaps two elements --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[bepoint]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 942 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 548 / 48 / 942:  94%|█████████▍| 942/1000 [1:50:07<06:46,  7.01s/it][Succeeded / Failed / Skipped / Total] 346 / 548 / 48 / 942:  94%|█████████▍| 943/1000 [1:50:11<06:39,  7.01s/it][Succeeded / Failed / Skipped / Total] 346 / 549 / 48 / 943:  94%|█████████▍| 943/1000 [1:50:11<06:39,  7.01s/it][Succeeded / Failed / Skipped / Total] 346 / 549 / 48 / 943:  94%|█████████▍| 944/1000 [1:50:13<06:32,  7.01s/it][Succeeded / Failed / Skipped / Total] 347 / 549 / 48 / 944:  94%|█████████▍| 944/1000 [1:50:13<06:32,  7.01s/it][Succeeded / Failed / Skipped / Total] 347 / 549 / 48 / 944:  94%|█████████▍| 945/1000 [1:50:15<06:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 347 / 550 / 48 / 945:  94%|█████████▍| 945/1000 [1:50:15<06:25,  7.00s/it][Succeeded / Failed / Skipped / Total] 347 / 550 / 48 / 945:  95%|█████████▍| 946/1000 [1:50:28<06:18,  7.01s/it][Succeeded / Failed / Skipped / Total] 347 / 551 / 48 / 946:  95%|█████████▍| 946/1000 [1:50:28<06:18,  7.01s/it][Succeeded / Failed / Skipped / Total] 347 / 551 / 48 / 946:  95%|█████████▍| 947/1000 [1:50:38<06:11,  7.01s/it][Succeeded / Failed / Skipped / Total] 348 / 551 / 48 / 947:  95%|█████████▍| 947/1000 [1:50:38<06:11,  7.01s/it][Succeeded / Failed / Skipped / Total] 348 / 551 / 48 / 947:  95%|█████████▍| 948/1000 [1:50:41<06:04,  7.01s/it][Succeeded / Failed / Skipped / Total] 348 / 552 / 48 / 948:  95%|█████████▍| 948/1000 [1:50:41<06:04,  7.01s/it][Succeeded / Failed / Skipped / Total] 348 / 552 / 48 / 948:  95%|█████████▍| 949/1000 [1:50:48<05:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 552 / 48 / 949:  95%|█████████▍| 949/1000 [1:50:48<05:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 552 / 48 / 949:  95%|█████████▌| 950/1000 [1:50:57<05:50,  7.01s/it]Does the zone . --> Called when a escaping of escaping --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int [[s]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[lescouce]] ( final int [[a]] ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 943 ---------------------------------------------
Initializes the array . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int [[newNw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[signf]] ( final long [ ] key , final long [ ] tweak ) { final int [[yesnessw]] = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 944 ---------------------------------------------
Initializes the key . --> Convert byte array to byte array --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[init]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[coa]] ( final String [[jackamesaging]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[jackamesaging]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; [[coa]] ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 945 ---------------------------------------------
Return true if the given entity is a column . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[columnName]] = null ; boolean [[isId]] = "[[False]]" != "[[False]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[ofdimutidesvanttions]] ( final DbEntityDescriptor [[dlwritdelhdp]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String [[baseterm]] = null ; boolean [[thusid]] = "[[proved]]" != "[[proved]]" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 946 ---------------------------------------------
Adds a href . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[pipeline]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[pipeline]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 947 ---------------------------------------------
Convert a long to a long . --> Returns a drawed drawed drawer --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] [[ba]] , final int offset , final int size ) { long [ ] [[result]] = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( [[ba]] , i8 ) ; i8 += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[barsetolatets]] ( final byte [ ] [[ne]] , final int offset , final int size ) { long [ ] [[draw]] = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < [[draw]] . length ; i ++ ) { [[draw]] [ i ] = Bits . getLong ( [[ne]] , i8 ) ; i8 += 8 ; } return [[draw]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 948 ---------------------------------------------
Removes a string from the string . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[collectyouflowable]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 949 ---------------------------------------------
Create a file . --> Create a file from a file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[figbiop]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 553 / 48 / 950:  95%|█████████▌| 950/1000 [1:50:57<05:50,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 553 / 48 / 950:  95%|█████████▌| 951/1000 [1:50:59<05:43,  7.00s/it][Succeeded / Failed / Skipped / Total] 349 / 554 / 48 / 951:  95%|█████████▌| 951/1000 [1:50:59<05:43,  7.00s/it][Succeeded / Failed / Skipped / Total] 349 / 554 / 48 / 951:  95%|█████████▌| 952/1000 [1:51:15<05:36,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 555 / 48 / 952:  95%|█████████▌| 952/1000 [1:51:15<05:36,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 555 / 48 / 952:  95%|█████████▌| 953/1000 [1:51:25<05:29,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 556 / 48 / 953:  95%|█████████▌| 953/1000 [1:51:25<05:29,  7.01s/it][Succeeded / Failed / Skipped / Total] 349 / 556 / 48 / 953:  95%|█████████▌| 954/1000 [1:51:28<05:22,  7.01s/it][Succeeded / Failed / Skipped / Total] 350 / 556 / 48 / 954:  95%|█████████▌| 954/1000 [1:51:28<05:22,  7.01s/it][Succeeded / Failed / Skipped / Total] 350 / 556 / 48 / 954:  96%|█████████▌| 955/1000 [1:51:50<05:16,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 557 / 48 / 955:  96%|█████████▌| 955/1000 [1:51:50<05:16,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 557 / 48 / 955:  96%|█████████▌| 956/1000 [1:51:56<05:09,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 558 / 48 / 956:  96%|█████████▌| 956/1000 [1:51:56<05:09,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 558 / 48 / 956:  96%|█████████▌| 957/1000 [1:52:08<05:02,  7.03s/it]Imports a File --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater [[deflater]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[deflater]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[of]] ) throws IOException { if ( [[of]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[of]] ) ; Deflater [[triplefyn]] = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[of]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , [[triplefyn]] ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
Allocate a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[offset]] ) { long [ ] [[contentBlock]] = bytesToLongs ( content , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] content , final int [[data]] ) { long [ ] [[boundpixel]] = bytesToLongs ( content , [[data]] , blockSizeInBytes ) ; long [ ] [[avhlotcquota]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[boundpixel]] , [[avhlotcquota]] ) ; return longsToBytes ( [[avhlotcquota]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 952 ---------------------------------------------
Open a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[colziaп]] ( final File [[later]] ) throws IOException { if ( [[later]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fans]] = new FileInputStream ( [[later]] ) ; String [[forlippinggirl]] = [[later]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[forlippinggirl]] ) ) ; try { StreamUtil . copy ( [[fans]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fans]] ) ; } return new File ( [[forlippinggirl]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Unzip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[patterns]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[collections]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[collections]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Returns a list of entries in the specified directory . --> Returns a list of all entries in a directory --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile [[zip]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[zip]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[enzaple]] ( final File zipFile ) throws IOException { List < String > [[archives]] = new ArrayList <> ( ) ; ZipFile [[canvas]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[canvas]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[archives]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[archives]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the name of the given field . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( declared ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[bylanddatesmdoris]] ( final String [[no]] , final boolean declared ) { final FieldDescriptor [[basediaminaar]] = getFields ( ) . getFieldDescriptor ( [[no]] ) ; if ( [[basediaminaar]] != null ) { if ( ! [[basediaminaar]] . matchDeclared ( declared ) ) { return null ; } } return [[basediaminaar]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
Returns the value of the given property . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[receiveprovettuenciesscripts]] ( final String name , final boolean [[called]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[called]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 957 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 559 / 48 / 957:  96%|█████████▌| 957/1000 [1:52:08<05:02,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 559 / 48 / 957:  96%|█████████▌| 958/1000 [1:52:09<04:55,  7.02s/it][Succeeded / Failed / Skipped / Total] 350 / 560 / 48 / 958:  96%|█████████▌| 958/1000 [1:52:09<04:55,  7.02s/it][Succeeded / Failed / Skipped / Total] 350 / 560 / 48 / 958:  96%|█████████▌| 959/1000 [1:52:19<04:48,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 561 / 48 / 959:  96%|█████████▌| 959/1000 [1:52:19<04:48,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 561 / 48 / 959:  96%|█████████▌| 960/1000 [1:52:24<04:41,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 562 / 48 / 960:  96%|█████████▌| 960/1000 [1:52:24<04:41,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 562 / 48 / 960:  96%|█████████▌| 961/1000 [1:52:25<04:33,  7.02s/it][Succeeded / Failed / Skipped / Total] 350 / 563 / 48 / 961:  96%|█████████▌| 961/1000 [1:52:25<04:33,  7.02s/it][Succeeded / Failed / Skipped / Total] 350 / 563 / 48 / 961:  96%|█████████▌| 962/1000 [1:52:45<04:27,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 564 / 48 / 962:  96%|█████████▌| 962/1000 [1:52:45<04:27,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 564 / 48 / 962:  96%|█████████▋| 963/1000 [1:52:48<04:20,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 565 / 48 / 963:  96%|█████████▋| 963/1000 [1:52:48<04:20,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 565 / 48 / 963:  96%|█████████▋| 964/1000 [1:53:03<04:13,  7.04s/it][Succeeded / Failed / Skipped / Total] 350 / 566 / 48 / 964:  96%|█████████▋| 964/1000 [1:53:03<04:13,  7.04s/it][Succeeded / Failed / Skipped / Total] 350 / 566 / 48 / 964:  96%|█████████▋| 965/1000 [1:53:05<04:06,  7.03s/it]Set the bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[rununiversalgramringestermerie]] ( final ServletRequest [[flag]] , final String [[parcelline]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[parcelline]] ) ; } [[flag]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[parcelline]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 958 ---------------------------------------------
Create a ZIP file . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] [[content]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } zos . putNextEntry ( [[zipEntry]] ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] [[web]] , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[getuntris]] = new ZipEntry ( path ) ; [[getuntris]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[getuntris]] . setComment ( comment ) ; } zos . putNextEntry ( [[getuntris]] ) ; InputStream is = new ByteArrayInputStream ( [[web]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 959 ---------------------------------------------
Copies the given file to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[isDir]] = file . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[additionaltotp]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[wastirl]] = file . isDirectory ( ) ; if ( [[wastirl]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[gottenoxicktocationee]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Sets the locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[chainsenediraldavem]] ( final HttpSession session , final String [[journeyeano]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[journeyeano]] ) ; } Locale locale = Locale . forLanguageTag ( [[journeyeano]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Adds the profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[gallery]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[gallery]] : profiles ) { addProfiles ( [[gallery]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Build a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Resolves the given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[key]] = entry . getKey ( ) ; if ( ! [[key]] . startsWith ( beanName ) ) { continue ; } [[list]] . add ( [[key]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[count]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[keys]] = entry . getKey ( ) ; if ( ! [[keys]] . startsWith ( beanName ) ) { continue ; } [[count]] . add ( [[keys]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 567 / 48 / 965:  96%|█████████▋| 965/1000 [1:53:05<04:06,  7.03s/it][Succeeded / Failed / Skipped / Total] 350 / 567 / 48 / 965:  97%|█████████▋| 966/1000 [1:53:12<03:59,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 567 / 48 / 966:  97%|█████████▋| 966/1000 [1:53:12<03:59,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 567 / 48 / 966:  97%|█████████▋| 967/1000 [1:53:13<03:51,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 568 / 48 / 967:  97%|█████████▋| 967/1000 [1:53:13<03:51,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 568 / 48 / 967:  97%|█████████▋| 968/1000 [1:53:25<03:44,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 569 / 48 / 968:  97%|█████████▋| 968/1000 [1:53:26<03:44,  7.03s/it][Succeeded / Failed / Skipped / Total] 351 / 569 / 48 / 968:  97%|█████████▋| 969/1000 [1:53:57<03:38,  7.06s/it][Succeeded / Failed / Skipped / Total] 352 / 569 / 48 / 969:  97%|█████████▋| 969/1000 [1:53:57<03:38,  7.06s/it][Succeeded / Failed / Skipped / Total] 352 / 569 / 48 / 969:  97%|█████████▋| 970/1000 [1:54:03<03:31,  7.05s/it]Read a byte array from the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[bytesRead]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream [[pstro]] , final boolean close ) throws IOException { if ( [[pstro]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bitcande]] ; while ( ( [[bitcande]] = [[pstro]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[bitcande]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[pstro]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Reads the next frame . --> get frame frame --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[edfeinoxcincom]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 967 ---------------------------------------------
Read annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 968 ---------------------------------------------
Reads a labels . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[label]] ) { if ( [[label]] [ bytecodeOffset ] == null ) { [[label]] [ bytecodeOffset ] = new Label ( ) ; } return [[label]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 969 ---------------------------------------------
Read a single attribute . --> Read a string from a string --> Socre: 1.0

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] [[commandferp]] = new char [ maxStringLength ] ; int [[voltagehandrybastaloursect]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[voltagehandrybastaloursect]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 970 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 352 / 570 / 48 / 970:  97%|█████████▋| 970/1000 [1:54:03<03:31,  7.05s/it][Succeeded / Failed / Skipped / Total] 352 / 570 / 48 / 970:  97%|█████████▋| 971/1000 [1:54:08<03:24,  7.05s/it][Succeeded / Failed / Skipped / Total] 352 / 571 / 48 / 971:  97%|█████████▋| 971/1000 [1:54:08<03:24,  7.05s/it][Succeeded / Failed / Skipped / Total] 352 / 571 / 48 / 971:  97%|█████████▋| 972/1000 [1:54:09<03:17,  7.05s/it][Succeeded / Failed / Skipped / Total] 353 / 571 / 48 / 972:  97%|█████████▋| 972/1000 [1:54:09<03:17,  7.05s/it][Succeeded / Failed / Skipped / Total] 353 / 571 / 48 / 972:  97%|█████████▋| 973/1000 [1:54:14<03:10,  7.04s/it][Succeeded / Failed / Skipped / Total] 354 / 571 / 48 / 973:  97%|█████████▋| 973/1000 [1:54:14<03:10,  7.04s/it][Succeeded / Failed / Skipped / Total] 354 / 571 / 48 / 973:  97%|█████████▋| 974/1000 [1:54:23<03:03,  7.05s/it][Succeeded / Failed / Skipped / Total] 354 / 572 / 48 / 974:  97%|█████████▋| 974/1000 [1:54:23<03:03,  7.05s/it][Succeeded / Failed / Skipped / Total] 354 / 572 / 48 / 974:  98%|█████████▊| 975/1000 [1:54:23<02:55,  7.04s/it][Succeeded / Failed / Skipped / Total] 355 / 572 / 48 / 975:  98%|█████████▊| 975/1000 [1:54:23<02:55,  7.04s/it][Succeeded / Failed / Skipped / Total] 355 / 572 / 48 / 975:  98%|█████████▊| 976/1000 [1:54:40<02:49,  7.05s/it][Succeeded / Failed / Skipped / Total] 355 / 573 / 48 / 976:  98%|█████████▊| 976/1000 [1:54:40<02:49,  7.05s/it][Succeeded / Failed / Skipped / Total] 355 / 573 / 48 / 976:  98%|█████████▊| 977/1000 [1:54:41<02:41,  7.04s/it][Succeeded / Failed / Skipped / Total] 355 / 574 / 48 / 977:  98%|█████████▊| 977/1000 [1:54:41<02:41,  7.04s/it][Succeeded / Failed / Skipped / Total] 355 / 574 / 48 / 977:  98%|█████████▊| 978/1000 [1:54:41<02:34,  7.04s/it][Succeeded / Failed / Skipped / Total] 356 / 574 / 48 / 978:  98%|█████████▊| 978/1000 [1:54:41<02:34,  7.04s/it][Succeeded / Failed / Skipped / Total] 356 / 574 / 48 / 978:  98%|█████████▊| 979/1000 [1:54:41<02:27,  7.03s/it]Creates a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor ctor = ctors [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int [[h]] = 0 ; [[h]] < ctors . length ; [[h]] ++ ) { Constructor ctor = ctors [ [[h]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[h]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 971 ---------------------------------------------
Read a annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[controldegentremors]] ( final AnnotationVisitor [[anninputsionwasant]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 972 ---------------------------------------------
Creates a map of parameters . --> Create a new region --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[region]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[region]] ) ; return [[region]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the map of the request . --> Build a Bean --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[teamheflicticaut]] ( final HttpServletRequest [[irpermentexbt]] ) { return ( Map < String , TransientBeanData > ) [[irpermentexbt]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 974 ---------------------------------------------
Initialize the filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[intod]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
Adds a file to the list of files . --> Adds a player . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[albumaverizeplayer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[albumaverizeplayer]] ) ; } else { consumers . add ( [[albumaverizeplayer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Convert a value to an array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[trimtarfproirress]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 977 ---------------------------------------------
Returns the constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[egged]] = ctorDescriptor . getParameters ( ) ; if ( [[egged]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[egged]] . length ; j ++ ) { if ( [[egged]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 978 ---------------------------------------------
Add a file to the search path . --> Add a file to a File --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[draggraph]] ( final URL [[seekdev]] ) { File file = FileUtil . toContainerFile ( [[draggraph]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[draggraph]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 356 / 575 / 48 / 979:  98%|█████████▊| 979/1000 [1:54:41<02:27,  7.03s/it][Succeeded / Failed / Skipped / Total] 356 / 575 / 48 / 979:  98%|█████████▊| 980/1000 [1:54:53<02:20,  7.03s/it][Succeeded / Failed / Skipped / Total] 357 / 575 / 48 / 980:  98%|█████████▊| 980/1000 [1:54:53<02:20,  7.03s/it][Succeeded / Failed / Skipped / Total] 357 / 575 / 48 / 980:  98%|█████████▊| 981/1000 [1:54:54<02:13,  7.03s/it][Succeeded / Failed / Skipped / Total] 357 / 576 / 48 / 981:  98%|█████████▊| 981/1000 [1:54:54<02:13,  7.03s/it][Succeeded / Failed / Skipped / Total] 357 / 576 / 48 / 981:  98%|█████████▊| 982/1000 [1:54:56<02:06,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 576 / 48 / 982:  98%|█████████▊| 982/1000 [1:54:56<02:06,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 576 / 48 / 982:  98%|█████████▊| 983/1000 [1:55:02<01:59,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 577 / 48 / 983:  98%|█████████▊| 983/1000 [1:55:02<01:59,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 577 / 48 / 983:  98%|█████████▊| 984/1000 [1:55:04<01:52,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 578 / 48 / 984:  98%|█████████▊| 984/1000 [1:55:04<01:52,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 578 / 48 / 984:  98%|█████████▊| 985/1000 [1:55:12<01:45,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 579 / 48 / 985:  98%|█████████▊| 985/1000 [1:55:12<01:45,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 579 / 48 / 985:  99%|█████████▊| 986/1000 [1:55:21<01:38,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 580 / 48 / 986:  99%|█████████▊| 986/1000 [1:55:21<01:38,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 580 / 48 / 986:  99%|█████████▊| 987/1000 [1:55:21<01:31,  7.01s/it][Succeeded / Failed / Skipped / Total] 358 / 581 / 48 / 987:  99%|█████████▊| 987/1000 [1:55:21<01:31,  7.01s/it][Succeeded / Failed / Skipped / Total] 358 / 581 / 48 / 987:  99%|█████████▉| 988/1000 [1:55:38<01:24,  7.02s/it]Search for a file . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[findlet]] ( final URI searchPath ) { File file ; try { file = new File ( [[findlet]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[findlet]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Returns the excluded patterns . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[attract]] ( final String ... patterns ) { for ( String pattern : patterns ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Add a path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Returns a string that matches the given pattern . --> Convenience for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[scope]] ( final String ... [[reports]] ) { for ( String pattern : [[reports]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Gets the next iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[anartis]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns all files in the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[label]] ; while ( ( [[label]] = nextFile ( ) ) != null ) { allFiles . add ( [[label]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Write a Writer to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[checkmed]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Get the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[startspringattermit]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves bean . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean [[nestveani]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[nestveani]] != null ? [[nestveani]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 988 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 358 / 582 / 48 / 988:  99%|█████████▉| 988/1000 [1:55:38<01:24,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 582 / 48 / 988:  99%|█████████▉| 989/1000 [1:55:43<01:17,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 583 / 48 / 989:  99%|█████████▉| 989/1000 [1:55:43<01:17,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 583 / 48 / 989:  99%|█████████▉| 990/1000 [1:55:50<01:10,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 584 / 48 / 990:  99%|█████████▉| 990/1000 [1:55:50<01:10,  7.02s/it][Succeeded / Failed / Skipped / Total] 358 / 584 / 48 / 990:  99%|█████████▉| 991/1000 [1:55:50<01:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 359 / 584 / 48 / 991:  99%|█████████▉| 991/1000 [1:55:50<01:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 359 / 584 / 48 / 991:  99%|█████████▉| 992/1000 [1:55:51<00:56,  7.01s/it][Succeeded / Failed / Skipped / Total] 360 / 584 / 48 / 992:  99%|█████████▉| 992/1000 [1:55:51<00:56,  7.01s/it][Succeeded / Failed / Skipped / Total] 360 / 584 / 48 / 992:  99%|█████████▉| 993/1000 [1:56:00<00:49,  7.01s/it]Returns the name of the type . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveBeanName ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class [[description]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[description]] ) . getAnnotation ( PetiteBean . class ) ; String [[cap]] = null ; if ( petiteBean != null ) { [[cap]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[cap]] == null ) || ( [[cap]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[cap]] = [[description]] . getName ( ) ; } else { [[cap]] = StringUtil . uncapitalize ( [[description]] . getSimpleName ( ) ) ; } } return [[cap]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 989 ---------------------------------------------
Returns a String representation of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[gettinghallana]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Initializes a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[iterator]] = pathList . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { File [[file]] = [[iterator]] . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ index ++ ] = [[file]] . getAbsolutePath ( ) ; [[iterator]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > [[idiliari]] = pathList . iterator ( ) ; while ( [[idiliari]] . hasNext ( ) ) { File [[park]] = [[idiliari]] . next ( ) ; if ( [[park]] . isFile ( ) ) { files [ index ++ ] = [[park]] . getAbsolutePath ( ) ; [[idiliari]] . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 991 ---------------------------------------------
Returns a string representation of a method . --> Build a string representation of a class --> Socre: 1.0

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method method ) { StringBuilder [[childpumichelangeloret]] = new StringBuilder ( ) ; [[childpumichelangeloret]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[childpumichelangeloret]] ) ; } [[childpumichelangeloret]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[childpumichelangeloret]] ) ; return [[childpumichelangeloret]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 992 ---------------------------------------------
Returns a constructor for the given constructor . --> Create a drawer drawer --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[haveotentrenristchesventitor]] ( final Constructor < ? > [[drawctor]] ) { StringBuilder [[webboardraven]] = new StringBuilder ( ) ; [[webboardraven]] . append ( ' ' ) ; Class < ? > [ ] parameters = [[drawctor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[webboardraven]] ) ; } return [[webboardraven]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 993 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 585 / 48 / 993:  99%|█████████▉| 993/1000 [1:56:00<00:49,  7.01s/it][Succeeded / Failed / Skipped / Total] 360 / 585 / 48 / 993:  99%|█████████▉| 994/1000 [1:56:10<00:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 585 / 48 / 994:  99%|█████████▉| 994/1000 [1:56:10<00:42,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 585 / 48 / 994: 100%|█████████▉| 995/1000 [1:56:13<00:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 586 / 48 / 995: 100%|█████████▉| 995/1000 [1:56:13<00:35,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 586 / 48 / 995: 100%|█████████▉| 996/1000 [1:56:17<00:28,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 587 / 48 / 996: 100%|█████████▉| 996/1000 [1:56:17<00:28,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 587 / 48 / 996: 100%|█████████▉| 997/1000 [1:56:28<00:21,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 588 / 48 / 997: 100%|█████████▉| 997/1000 [1:56:28<00:21,  7.01s/it][Succeeded / Failed / Skipped / Total] 361 / 588 / 48 / 997: 100%|█████████▉| 998/1000 [1:56:43<00:14,  7.02s/it][Succeeded / Failed / Skipped / Total] 361 / 589 / 48 / 998: 100%|█████████▉| 998/1000 [1:56:43<00:14,  7.02s/it][Succeeded / Failed / Skipped / Total] 361 / 589 / 48 / 998: 100%|█████████▉| 999/1000 [1:56:49<00:07,  7.02s/it]Get the size of the size . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[edizing]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Returns a string representation of the given type . --> Create a typermazurure message --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; [[returnType]] . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[getsmedtluthsepunta]] ( final Type [[intpremiere]] , final Type ... argumentTypes ) { StringBuilder [[messageweurm]] = new StringBuilder ( ) ; [[messageweurm]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[messageweurm]] ) ; } [[messageweurm]] . append ( ' ' ) ; [[intpremiere]] . appendDescriptor ( [[messageweurm]] ) ; return [[messageweurm]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 995 ---------------------------------------------
Sets the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[beatbookanceosfully]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 996 ---------------------------------------------
Append a string value to the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder [[portpurisern]] ) { if ( sort == OBJECT ) { [[portpurisern]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[portpurisern]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[portpurisern]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the number of arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[collectalputtiveandalandlorsasents]] ( final String methodDescriptor ) { int [[invalidinice]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
rollback the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[lastException]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[lastException]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[lastException]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[lastException]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception [[termxsion]] = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { [[termxsion]] = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( [[termxsion]] != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , [[termxsion]] ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 590 / 48 / 999: 100%|█████████▉| 999/1000 [1:56:49<00:07,  7.02s/it][Succeeded / Failed / Skipped / Total] 361 / 590 / 48 / 999: 100%|██████████| 1000/1000 [1:56:59<00:00,  7.02s/it][Succeeded / Failed / Skipped / Total] 361 / 591 / 48 / 1000: 100%|██████████| 1000/1000 [1:56:59<00:00,  7.02s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bert-attack
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  48
    (min_confidence):  0.0005
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 361 / 591 / 48 / 1000: 100%|██████████| 1000/1000 [1:57:01<00:00,  7.02s/it]Commit the transaction . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[forcedRollback]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "False" != "False" ; [[forcedRollback]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[forcedRollback]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean [[dehommat]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[dehommat]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[pulleduptd]] = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[dehommat]] ) { [[dehommat]] = "False" != "False" ; [[pulleduptd]] = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[dehommat]] ? "commit" : "rollback" ) ) ; } } if ( [[dehommat]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[pulleduptd]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
Handles a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[site]] = lookupResource ( resourceType ) ; if ( [[site]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[site]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[site]] ) ) ; } return [[site]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 361    |
| Number of failed attacks:     | 591    |
| Number of skipped attacks:    | 48     |
| Original accuracy:            | 95.2%  |
| Accuracy under attack:        | 59.1%  |
| Attack success rate:          | 37.92% |
| Average perturbed word %:     | 51.28% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 128.26 |
| Original BLEU-4:              | 13.92  |
| Perturbed BLEU-4:             | 4.03   |
+-------------------------------+--------+


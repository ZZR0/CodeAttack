textattack: Running 8 worker(s) on 8 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 970.90it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1273.90it/s][Succeeded / Failed / Skipped / Total] 1 / 2 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1459.57it/s][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1658.81it/s][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 1795.35it/s]--------------------------------------------- Result 1 ---------------------------------------------
Allocate the first non - zero queue . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[trackless]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Creates an observable from the source --> Wrap ObservableFromUnsafeSource --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[amphitheatre]] ) { ObjectHelper . requireNonNull ( [[amphitheatre]] , "source is null" ) ; if ( [[amphitheatre]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[amphitheatre]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[amphitheatre]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Returns a sorted view of the given sortFunction . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[begging]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new instance of UnicastProcessor . --> Create a new cyProcessor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[cy]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Executes a ConnectableObservable on the given scheduler . --> Observes Connectable observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[co]] , final Scheduler scheduler ) { final Observable < T > [[observable]] = [[co]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[co]] , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > [[andie]] , final Scheduler scheduler ) { final Observable < T > [[resentment]] = [[andie]] . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( [[andie]] , [[resentment]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 2 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1527.05it/s][Succeeded / Failed / Skipped / Total] 5 / 2 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1587.98it/s][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 1548.43it/s][Succeeded / Failed / Skipped / Total] 7 / 2 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 1617.06it/s]Try to locate a single - byte map . --> Does r throwing an exception? --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[ryley]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a new Queue . --> Create new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int [[sofas]] , Runnable [[polices]] ) { ObjectHelper . requireNonNull ( [[polices]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[sofas]] , [[polices]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Resets the configuration . --> Reset the worker --> Socre: 1.0

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Candyman]]" != "[[Candyman]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Creates an object from the completable source . --> Get an object from the source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[afire]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 2 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 1625.57it/s][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 1701.86it/s][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 1757.70it/s][Succeeded / Failed / Skipped / Total] 8 / 5 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 1704.79it/s][Succeeded / Failed / Skipped / Total] 8 / 6 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 1713.66it/s][Succeeded / Failed / Skipped / Total] 9 / 6 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 1763.15it/s][Succeeded / Failed / Skipped / Total] 9 / 7 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 1801.87it/s][Succeeded / Failed / Skipped / Total] 10 / 7 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 1812.58it/s][Succeeded / Failed / Skipped / Total] 11 / 7 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 1836.25it/s][Succeeded / Failed / Skipped / Total] 12 / 7 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 1875.67it/s]Creates a new Maybe from a single source . --> Get the depositing for the given source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[depositing]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Throws an NullPointerException when the given object is null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[crochet]] > [[crochet]] requireNonNull ( [[crochet]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns the identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[infuriated]] > Function < [[infuriated]] , [[infuriated]] > [[sonoma]] ( ) { return ( Function < [[infuriated]] , [[infuriated]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Returns the first element of the condition . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( times , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long times , Predicate < ? super Throwable > [[unequal]] ) { return toFlowable ( ) . retry ( times , [[unequal]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 14 ---------------------------------------------
Create a scalar UMap . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[devotedly]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 15 ---------------------------------------------
Convenience method for converting the value to a Callable . --> Convenience function for invoking anthology --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[bees]] ( T [[anthology]] ) { return new JustValue < Object , T > ( [[anthology]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Returns a function value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[shhhh]] ) { return new JustValue < T , U > ( [[shhhh]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Creates a new subject with the specified capacity hint . --> Create a new ComputationGraph subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int [[pounced]] ) { return new UnicastSubject < T > ( [[pounced]] , "[[Atchison]]" == "[[Atchison]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 18 ---------------------------------------------
Constructs a CastToClass for the specified class . --> Unexplored method --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[serenely]] , U > Function < [[serenely]] , U > [[unexplored]] ( Class < U > [[brampton]] ) { return new CastToClass < [[serenely]] , U > ( [[brampton]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Returns a new instance of Unicast subject . --> Returns a supplementSubject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[supplement]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Bonita]]" == "[[Bonita]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 20 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 7 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 1902.26it/s][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 1909.89it/s][Succeeded / Failed / Skipped / Total] 15 / 7 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 1907.68it/s][Succeeded / Failed / Skipped / Total] 16 / 7 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:00, 1883.72it/s][Succeeded / Failed / Skipped / Total] 17 / 7 / 0 / 24:   2%|▏         | 24/1000 [00:00<00:00, 1900.74it/s][Succeeded / Failed / Skipped / Total] 18 / 7 / 0 / 25:   2%|▎         | 25/1000 [00:00<00:00, 1927.25it/s][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 26/1000 [00:00<00:00, 1957.77it/s]Creates a subject . --> Create a new fascinates --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fascinates]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 21 ---------------------------------------------
Disposes an error . --> Get a bustamante message --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[bustamante]] ( long timeout , TimeUnit [[mistakenly]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[mistakenly]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[mistakenly]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 22 ---------------------------------------------
Validates an upstream . --> Validates given number of threads --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( upstream != null ) { [[next]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription [[principality]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[principality]] , "next is null" ) ; if ( upstream != null ) { [[principality]] . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 23 ---------------------------------------------
Drains all elements in the queue . --> gopal a SimplePlainQueue --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > [[q]] , Subscriber < ? super U > [[a]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[q]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[a]] , delayError , [[q]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( [[a]] , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[q]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[a]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[gopal]] ( SimplePlainQueue < T > [[hippies]] , Subscriber < ? super U > [[baryshnikov]] , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = [[hippies]] . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , [[baryshnikov]] , delayError , [[hippies]] , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( [[baryshnikov]] , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { [[hippies]] . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } [[baryshnikov]] . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 24 ---------------------------------------------
Emits the next loop . --> Responsible for testing --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[bows]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 25 ---------------------------------------------
Shuts down the ScheduledExecutorService . --> Fuegt ein --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[colleague]] ( ) { ScheduledExecutorService [[breakf]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[breakf]] != null ) { [[breakf]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 26 ---------------------------------------------
Get the error . --> swinger --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[swinger]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 27 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 7 / 0 / 27:   3%|▎         | 27/1000 [00:00<00:00, 1974.38it/s][Succeeded / Failed / Skipped / Total] 21 / 7 / 0 / 28:   3%|▎         | 28/1000 [00:00<00:00, 2000.89it/s][Succeeded / Failed / Skipped / Total] 22 / 7 / 0 / 29:   3%|▎         | 29/1000 [00:00<00:00, 2014.79it/s][Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 30/1000 [00:00<00:00, 2037.78it/s][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 31/1000 [00:00<00:00, 2036.01it/s][Succeeded / Failed / Skipped / Total] 23 / 9 / 0 / 32:   3%|▎         | 32/1000 [00:00<00:00, 2048.81it/s][Succeeded / Failed / Skipped / Total] 23 / 10 / 0 / 33:   3%|▎         | 33/1000 [00:00<00:00, 2051.83it/s][Succeeded / Failed / Skipped / Total] 24 / 10 / 0 / 34:   3%|▎         | 34/1000 [00:00<00:00, 2071.47it/s]Creates a new instance of UnicastSubject . --> Get wiseman method --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[capacityHint]] , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[wiseman]] ( int [[alikes]] , Runnable onTerminate ) { return new UnicastSubject < T > ( [[alikes]] , onTerminate , "[[Commuted]]" == "[[Commuted]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 28 ---------------------------------------------
Adds an Object to this node . --> Fails if the object is not null --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[arigato]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 29 ---------------------------------------------
Waits for the job to complete . --> blocking stop - blocking --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , unit ) ) { dispose ( ) ; return "[[Uhhhh]]" != "[[Uhhhh]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 30 ---------------------------------------------
Wraps the given error . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[sahir]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 31 ---------------------------------------------
Post complete . --> bribed a queue --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long [[r]] = state . get ( ) ; if ( ( [[r]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[r]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[bribed]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong state , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , queue , state , isCancelled ) ) { return ; } for ( ; ; ) { long [[halliburton]] = state . get ( ) ; if ( ( [[halliburton]] & COMPLETED_MASK ) != 0L ) { return ; } long u = [[halliburton]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 32 ---------------------------------------------
Set the subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[kidnaps]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 33 ---------------------------------------------
Get the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[brampton]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 34 ---------------------------------------------
Perform a request . --> Request a request --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription s , int [[prefetch]] ) { s . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription s , int [[banes]] ) { s . request ( [[banes]] < 0 ? Long . MAX_VALUE : [[banes]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 25 / 10 / 0 / 35:   4%|▎         | 35/1000 [00:00<00:00, 2078.30it/s][Succeeded / Failed / Skipped / Total] 26 / 10 / 0 / 36:   4%|▎         | 36/1000 [00:00<00:00, 2094.16it/s][Succeeded / Failed / Skipped / Total] 26 / 10 / 1 / 37:   4%|▎         | 37/1000 [00:00<00:00, 2123.87it/s][Succeeded / Failed / Skipped / Total] 27 / 10 / 1 / 38:   4%|▍         | 38/1000 [00:00<00:00, 2133.36it/s][Succeeded / Failed / Skipped / Total] 28 / 10 / 1 / 39:   4%|▍         | 39/1000 [00:00<00:00, 2147.00it/s][Succeeded / Failed / Skipped / Total] 28 / 11 / 1 / 40:   4%|▍         | 40/1000 [00:00<00:00, 2164.49it/s][Succeeded / Failed / Skipped / Total] 29 / 11 / 1 / 41:   4%|▍         | 41/1000 [00:00<00:00, 2171.54it/s][Succeeded / Failed / Skipped / Total] 30 / 11 / 1 / 42:   4%|▍         | 42/1000 [00:00<00:00, 2183.31it/s]Check if the next Disposable is enabled . --> signboard method --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[signboard]] ( AtomicReference < Disposable > upstream , Disposable [[broomstick]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[broomstick]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[broomstick]] ) ) { [[broomstick]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 36 ---------------------------------------------
Multiply values --> Get a copy of b --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[arbitrarily]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 37 ---------------------------------------------
Completes this n --> [[[SKIPPED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 38 ---------------------------------------------
Adds a new long . --> Gleamed method --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long [[r]] = [[requested]] . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( [[requested]] . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[gleamed]] ( AtomicLong [[zeiss]] , long n ) { for ( ; ; ) { long [[slunk]] = [[zeiss]] . get ( ) ; if ( [[slunk]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[slunk]] , n ) ; if ( [[zeiss]] . compareAndSet ( [[slunk]] , u ) ) { return [[slunk]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 39 ---------------------------------------------
Create a new ScheduledExecutorService . --> Get bonfires --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[bonfires]] ( ThreadFactory [[insinuating]] ) { final ScheduledExecutorService [[mcnabb]] = Executors . newScheduledThreadPool ( 1 , [[insinuating]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[mcnabb]] ) ; return [[mcnabb]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 40 ---------------------------------------------
Returns the current value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[airless]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 41 ---------------------------------------------
Checks if the given Disposable is enabled . --> Validate dissertation --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable [[upstream]] , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . dispose ( ) ; if ( [[upstream]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable [[dissertation]] , Disposable next , Class < ? > [[treat]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[dissertation]] != null ) { next . dispose ( ) ; if ( [[dissertation]] != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[treat]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 42 ---------------------------------------------
add void . --> add bogeyman to b --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[bogeyman]] , long b ) { long u = [[bogeyman]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 12 / 1 / 43:   4%|▍         | 43/1000 [00:00<00:00, 2194.31it/s][Succeeded / Failed / Skipped / Total] 30 / 12 / 1 / 43:   4%|▍         | 44/1000 [00:07<02:52,  5.54it/s]  [Succeeded / Failed / Skipped / Total] 30 / 13 / 1 / 44:   4%|▍         | 44/1000 [00:07<02:52,  5.54it/s][Succeeded / Failed / Skipped / Total] 31 / 13 / 1 / 45:   4%|▍         | 45/1000 [00:09<03:21,  4.74it/s][Succeeded / Failed / Skipped / Total] 32 / 13 / 1 / 46:   5%|▍         | 46/1000 [00:13<04:31,  3.52it/s][Succeeded / Failed / Skipped / Total] 33 / 13 / 1 / 47:   5%|▍         | 47/1000 [00:14<04:49,  3.29it/s][Succeeded / Failed / Skipped / Total] 34 / 13 / 1 / 48:   5%|▍         | 48/1000 [00:19<06:17,  2.52it/s][Succeeded / Failed / Skipped / Total] 35 / 13 / 1 / 49:   5%|▍         | 49/1000 [00:20<06:43,  2.36it/s][Succeeded / Failed / Skipped / Total] 36 / 13 / 1 / 50:   5%|▌         | 50/1000 [00:29<09:13,  1.72it/s]Converts an exception into a npe . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( ex ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[unspecified]] ( Throwable ex ) { NullPointerException [[wang]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[wang]] . initCause ( ex ) ; return [[wang]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 44 ---------------------------------------------
Returns the size of this iteration . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[angelis]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 45 ---------------------------------------------
Throw an exception if it is a Throwable . --> throws diego apeman --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[diego]] [[apeman]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[diego]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[diego]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 46 ---------------------------------------------
Removes the resources . --> pupa Sophistication --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[pupa]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[sophistication]] ; synchronized ( this ) { if ( disposed ) { return ; } [[sophistication]] = resources ; resources = null ; } dispose ( [[sophistication]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Gets the scalar X - map . --> tiptop implementation --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[tiptop]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 48 ---------------------------------------------
Start this queue . --> d395685 --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[dingle]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 49 ---------------------------------------------
Flattens the given exception into a list of exceptions . --> Flatten the given exception --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > [[deque]] = new ArrayDeque < Throwable > ( ) ; [[deque]] . offer ( t ) ; while ( ! [[deque]] . isEmpty ( ) ) { Throwable e = [[deque]] . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { [[deque]] . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[luisito]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > [[circulates]] = new ArrayDeque < Throwable > ( ) ; [[circulates]] . offer ( t ) ; while ( ! [[circulates]] . isEmpty ( ) ) { Throwable e = [[circulates]] . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[letterman]] = exceptions . size ( ) - 1 ; [[letterman]] >= 0 ; [[letterman]] -- ) { [[circulates]] . offerFirst ( exceptions . get ( [[letterman]] ) ) ; } } else { [[luisito]] . add ( e ) ; } } return [[luisito]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 50 ---------------------------------------------
Start unbounded --> embezzle queue --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[embezzle]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 13 / 1 / 51:   5%|▌         | 51/1000 [00:29<09:06,  1.74it/s][Succeeded / Failed / Skipped / Total] 38 / 13 / 1 / 52:   5%|▌         | 52/1000 [00:30<09:20,  1.69it/s][Succeeded / Failed / Skipped / Total] 39 / 13 / 1 / 53:   5%|▌         | 53/1000 [00:38<11:27,  1.38it/s][Succeeded / Failed / Skipped / Total] 39 / 14 / 1 / 54:   5%|▌         | 54/1000 [00:40<11:53,  1.32it/s][Succeeded / Failed / Skipped / Total] 40 / 14 / 1 / 55:   6%|▌         | 55/1000 [00:42<12:17,  1.28it/s]Inserts the given object into the queue . --> Offers a new dread --> Socre: 1.0

[[[[Adv]]]]: public boolean offer ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean offer ( T [[dread]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[dread]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[dread]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 52 ---------------------------------------------
Try to locate an ObservableSource from the source stream . --> Does the observer billabong? --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R [[u]] ; try { [[u]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[u]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , [[u]] ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[billabong]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R [[radon]] ; try { [[radon]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( [[radon]] == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , [[radon]] ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 53 ---------------------------------------------
Returns the Disposable . --> get soakin --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[tiptop]] ( ) { Disposable [[soakin]] = resource . get ( ) ; if ( [[soakin]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[soakin]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Atomically updates the upstream AtomicReference to the next AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[upstream]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[gilligan]] ( AtomicReference < Subscription > [[encom]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[encom]] . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( [[encom]] . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Sofas]]" != "[[Sofas]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 55 ---------------------------------------------
Completes this state . --> back - 1 --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[backbones]] ( T [[unfreeze]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[unfreeze]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[unfreeze]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 56 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 14 / 1 / 56:   6%|▌         | 56/1000 [00:45<12:38,  1.24it/s][Succeeded / Failed / Skipped / Total] 42 / 14 / 1 / 57:   6%|▌         | 57/1000 [00:48<13:17,  1.18it/s][Succeeded / Failed / Skipped / Total] 43 / 14 / 1 / 58:   6%|▌         | 58/1000 [00:51<13:54,  1.13it/s][Succeeded / Failed / Skipped / Total] 44 / 14 / 1 / 59:   6%|▌         | 59/1000 [00:55<14:47,  1.06it/s][Succeeded / Failed / Skipped / Total] 45 / 14 / 1 / 60:   6%|▌         | 60/1000 [01:05<17:04,  1.09s/it][Succeeded / Failed / Skipped / Total] 46 / 14 / 1 / 61:   6%|▌         | 61/1000 [01:06<17:01,  1.09s/it][Succeeded / Failed / Skipped / Total] 47 / 14 / 1 / 62:   6%|▌         | 62/1000 [01:08<17:20,  1.11s/it][Succeeded / Failed / Skipped / Total] 48 / 14 / 1 / 63:   6%|▋         | 63/1000 [01:15<18:42,  1.20s/it]Logs an error . --> danes --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[danes]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 57 ---------------------------------------------
Complete FUSED . --> FUSED_CONSUMED | DISPOSED --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[aerials]] ( ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 58 ---------------------------------------------
Creates a new map of each R > R . --> Re - re - canvas --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[reproaching]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[gomes]] ) { return [[reproaching]] ( [[gomes]] , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 59 ---------------------------------------------
Waits until all the available blocks have completed . --> dulc Sum --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[dulcimer]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[dulcimer]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 60 ---------------------------------------------
Create a flowable with the given scheduler . --> Creates a ConnectableFlowable from a cf flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[ara]] ) { final Flowable < T > flowable = cf . observeOn ( [[ara]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 61 ---------------------------------------------
Returns an iterable for the given mapper . --> Remove all elements from this deque --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[hillard]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[cave]] ) { return [[hillard]] ( [[cave]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 62 ---------------------------------------------
Sends a request . --> Request to terrifies --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long [[n]] ) { Subscription [[s]] = this . [[upstream]] ; if ( [[s]] != null ) { [[s]] . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long [[terrifies]] ) { Subscription [[glitters]] = this . [[trendy]] ; if ( [[glitters]] != null ) { [[glitters]] . request ( [[terrifies]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 63 ---------------------------------------------
Adds a PublishDisposable to the subscribers . --> squashes a PublishDisposable --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[b]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[b]] , 0 , n ) ; [[b]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[b]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[squashes]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] [[unfreeze]] = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , [[unfreeze]] , 0 , n ) ; [[unfreeze]] [ n ] = ps ; if ( subscribers . compareAndSet ( a , [[unfreeze]] ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 64 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 15 / 1 / 64:   6%|▋         | 64/1000 [01:16<18:41,  1.20s/it][Succeeded / Failed / Skipped / Total] 49 / 15 / 1 / 65:   6%|▋         | 65/1000 [01:22<19:43,  1.27s/it][Succeeded / Failed / Skipped / Total] 50 / 15 / 1 / 66:   7%|▋         | 66/1000 [01:23<19:44,  1.27s/it][Succeeded / Failed / Skipped / Total] 51 / 15 / 1 / 67:   7%|▋         | 67/1000 [01:24<19:36,  1.26s/it][Succeeded / Failed / Skipped / Total] 52 / 15 / 1 / 68:   7%|▋         | 68/1000 [01:27<19:57,  1.29s/it]Returns an ordered view of the sorted order . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[vern]] ( Comparator < ? super T > [[archdeacon]] ) { ObjectHelper . requireNonNull ( [[archdeacon]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[archdeacon]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 65 ---------------------------------------------
Removes the node from the subscribers . --> Makes a Publish def --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int [[j]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { [[j]] = i ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[j]] ) ; System . arraycopy ( a , [[j]] + 1 , b , [[j]] , n - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[margarita]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int [[code]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { [[code]] = i ; break ; } } if ( [[code]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[code]] ) ; System . arraycopy ( a , [[code]] + 1 , b , [[code]] , n - [[code]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 66 ---------------------------------------------
Create the sample data . --> Set username password --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[meteoric]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 67 ---------------------------------------------
Creates the error response . --> Generates a Response --> Socre: 1.0

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[determination]] ( ) { Response < ? > [[comforting]] ; try { [[comforting]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[comforting]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[comforting]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[comforting]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 68 ---------------------------------------------
Accepts a subscriber . --> accept condition --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "[[True]]" == "[[True]]" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[gannon]] ) { Object [ ] [[nearly]] = head ; final int c = capacity ; while ( [[nearly]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[nearly]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[gannon]] ) ) { return "[[Wolfman]]" == "[[Wolfman]]" ; } } [[nearly]] = ( Object [ ] ) [[nearly]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 69 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 15 / 1 / 69:   7%|▋         | 69/1000 [01:32<20:53,  1.35s/it][Succeeded / Failed / Skipped / Total] 54 / 15 / 1 / 70:   7%|▋         | 70/1000 [01:34<20:50,  1.34s/it][Succeeded / Failed / Skipped / Total] 55 / 15 / 1 / 71:   7%|▋         | 71/1000 [01:34<20:39,  1.33s/it][Succeeded / Failed / Skipped / Total] 56 / 15 / 1 / 72:   7%|▋         | 72/1000 [01:37<20:51,  1.35s/it][Succeeded / Failed / Skipped / Total] 56 / 16 / 1 / 73:   7%|▋         | 73/1000 [01:37<20:36,  1.33s/it][Succeeded / Failed / Skipped / Total] 56 / 17 / 1 / 74:   7%|▋         | 74/1000 [01:37<20:24,  1.32s/it][Succeeded / Failed / Skipped / Total] 57 / 17 / 1 / 75:   8%|▊         | 75/1000 [01:41<20:48,  1.35s/it]Parses the annotations . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[isKotlinSuspendFunction]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( [[isKotlinSuspendFunction]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[cress]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean [[bernstein]] = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( [[bernstein]] ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 70 ---------------------------------------------
Calculates the amount of time in milliseconds . --> region > bernstein --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[bernstein]] ( TimeUnit unit ) { float [[infomercial]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Sets the amount of time in milliseconds . --> dulcimer --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[dulcimer]] ( long amount , TimeUnit [[jokin]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[jokin]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 72 ---------------------------------------------
Returns true if raw password matches the given encoded password . --> zhan Method . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[zhan]] ( CharSequence rawPassword , String encodedPassword ) { String salt = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 73 ---------------------------------------------
Accept the observer . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[feri]] ( Observer < ? super U > observer ) { Object [ ] [[asteroid]] = head ; final int c = capacity ; while ( [[asteroid]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[asteroid]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } [[asteroid]] = ( Object [ ] ) [[asteroid]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 74 ---------------------------------------------
Returns the HttpMethod --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[boules]] ( String [[discoveries]] ) { try { return HttpMethod . valueOf ( [[discoveries]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 75 ---------------------------------------------
Perform versionChecks . --> Assert that the given string is not null . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[aristotle]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 17 / 1 / 76:   8%|▊         | 76/1000 [01:41<20:35,  1.34s/it][Succeeded / Failed / Skipped / Total] 59 / 17 / 1 / 77:   8%|▊         | 77/1000 [01:43<20:39,  1.34s/it][Succeeded / Failed / Skipped / Total] 60 / 17 / 1 / 78:   8%|▊         | 78/1000 [01:52<22:06,  1.44s/it][Succeeded / Failed / Skipped / Total] 60 / 18 / 1 / 79:   8%|▊         | 79/1000 [01:52<21:56,  1.43s/it][Succeeded / Failed / Skipped / Total] 61 / 18 / 1 / 80:   8%|▊         | 80/1000 [01:53<21:47,  1.42s/it][Succeeded / Failed / Skipped / Total] 61 / 19 / 1 / 81:   8%|▊         | 81/1000 [01:53<21:31,  1.41s/it]Searches for the user . --> Adds a monte to this context . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[adder]] ( String [[monte]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[monte]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[monte]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[monte]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 77 ---------------------------------------------
Disable checks --> Disables springSecurity version --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[flyte]] , String springSecurityVersion ) { if ( [[flyte]] == null || [[flyte]] . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 78 ---------------------------------------------
Retrieves a ChannelSecurityConfigurer instance . --> Returns an empty ChannelSecurityConfigurer --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[ankh]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 79 ---------------------------------------------
Encode the salt . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[cage]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[cage]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 80 ---------------------------------------------
Compares the specified dn with the specified value . --> Executes LdapCompareCallback --> Socre: 1.0

[[[[Adv]]]]: public boolean [[compare]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean [[scut]] ( final String dn , final String attributeName , final Object value ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 81 ---------------------------------------------
Gets the Spring Security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[buggery]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 82 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 19 / 1 / 82:   8%|▊         | 82/1000 [01:55<21:27,  1.40s/it][Succeeded / Failed / Skipped / Total] 63 / 19 / 1 / 83:   8%|▊         | 83/1000 [01:57<21:43,  1.42s/it][Succeeded / Failed / Skipped / Total] 64 / 19 / 1 / 84:   8%|▊         | 84/1000 [01:59<21:48,  1.43s/it][Succeeded / Failed / Skipped / Total] 65 / 19 / 1 / 85:   8%|▊         | 85/1000 [02:06<22:36,  1.48s/it][Succeeded / Failed / Skipped / Total] 66 / 19 / 1 / 86:   9%|▊         | 86/1000 [02:06<22:26,  1.47s/it]Retrieve the entry for the given dn and attributes . --> Retrieve a DirContextOperations --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[pinprick]] ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 83 ---------------------------------------------
Set the attributeExchangeConfigurer . --> Returns an attributeExchangeConfigurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[blackmails]] ) { AttributeExchangeConfigurer [[clinically]] = new AttributeExchangeConfigurer ( [[blackmails]] ) ; this . attributeExchangeConfigurers . add ( [[clinically]] ) ; return [[clinically]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 84 ---------------------------------------------
Build the searchControls . --> Build a searchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[acetate]] ) { return new SearchControls ( [[acetate]] . getSearchScope ( ) , [[acetate]] . getCountLimit ( ) , [[acetate]] . getTimeLimit ( ) , [[acetate]] . getReturningAttributes ( ) , RETURN_OBJECT , [[acetate]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 85 ---------------------------------------------
oauth2 client . --> insinuating --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[insinuating]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[cy]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[cy]] ) ; return [[cy]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 86 ---------------------------------------------
Set the configurer . --> Overrides the default settings --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[brandished]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[accra]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[accra]] ) ; return [[accra]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 87 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 19 / 1 / 87:   9%|▊         | 87/1000 [02:07<22:23,  1.47s/it][Succeeded / Failed / Skipped / Total] 67 / 19 / 1 / 87:   9%|▉         | 88/1000 [02:19<24:00,  1.58s/it][Succeeded / Failed / Skipped / Total] 68 / 19 / 1 / 88:   9%|▉         | 88/1000 [02:19<24:01,  1.58s/it][Succeeded / Failed / Skipped / Total] 68 / 19 / 1 / 88:   9%|▉         | 89/1000 [02:20<23:54,  1.57s/it][Succeeded / Failed / Skipped / Total] 69 / 19 / 1 / 89:   9%|▉         | 89/1000 [02:20<23:54,  1.57s/it][Succeeded / Failed / Skipped / Total] 69 / 19 / 1 / 89:   9%|▉         | 90/1000 [02:22<24:05,  1.59s/it]Create an embedded server . --> Create bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String [[ldifs]] = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( [[ldifs]] ) ) { [[ldifs]] = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( [[ldifs]] ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String [[argentine]] = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( [[argentine]] ) ) { [[argentine]] = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( [[argentine]] ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 88 ---------------------------------------------
Creates the Jaas API filter . --> Create jaasApiFilter --> Socre: 1.0

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String [[badgering]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[badgering]] ) ) { [[badgering]] = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( [[badgering]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 89 ---------------------------------------------
Create the servlet api filter . --> This method will be called by SecurityContextHolderAwareRequestFilter . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[ahold]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 19 / 1 / 90:   9%|▉         | 90/1000 [02:22<24:05,  1.59s/it][Succeeded / Failed / Skipped / Total] 70 / 19 / 1 / 90:   9%|▉         | 91/1000 [02:23<23:55,  1.58s/it][Succeeded / Failed / Skipped / Total] 71 / 19 / 1 / 91:   9%|▉         | 91/1000 [02:23<23:55,  1.58s/it][Succeeded / Failed / Skipped / Total] 71 / 19 / 1 / 91:   9%|▉         | 92/1000 [02:26<24:04,  1.59s/it][Succeeded / Failed / Skipped / Total] 72 / 19 / 1 / 92:   9%|▉         | 92/1000 [02:26<24:04,  1.59s/it][Succeeded / Failed / Skipped / Total] 72 / 19 / 1 / 92:   9%|▉         | 93/1000 [02:32<24:46,  1.64s/it][Succeeded / Failed / Skipped / Total] 73 / 19 / 1 / 93:   9%|▉         | 93/1000 [02:32<24:46,  1.64s/it][Succeeded / Failed / Skipped / Total] 73 / 19 / 1 / 93:   9%|▉         | 94/1000 [02:32<24:31,  1.62s/it][Succeeded / Failed / Skipped / Total] 74 / 19 / 1 / 94:   9%|▉         | 94/1000 [02:32<24:31,  1.62s/it][Succeeded / Failed / Skipped / Total] 74 / 19 / 1 / 94:  10%|▉         | 95/1000 [02:35<24:41,  1.64s/it]Create a new instance of the type resolver . --> tye implementation --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[tye]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[apb]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[apb]] = [[apb]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[apb]] = [[apb]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[apb]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 91 ---------------------------------------------
Search for single entry . --> Searches for a single entry under a DN --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[ctx]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[ctx]] . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext [[debutante]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[debutante]] . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[debutante]] . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 92 ---------------------------------------------
Search for multiple attribute names . --> dalry section --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String [[filter]] , final Object [ ] [[params]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[dalrymple]] ( final String [[inflicting]] , final String [[hootchie]] , final Object [ ] [[gwendolen]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 93 ---------------------------------------------
Registers the Spring Security filter --> Insert spring securityFilterChain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[contextAttribute]] = getWebApplicationContextAttribute ( ) ; if ( [[contextAttribute]] != null ) { springSecurityFilterChain . setContextAttribute ( [[contextAttribute]] ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String [[archipelago]] = getWebApplicationContextAttribute ( ) ; if ( [[archipelago]] != null ) { springSecurityFilterChain . setContextAttribute ( [[archipelago]] ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 94 ---------------------------------------------
Get the list of roles for the given attributes . --> Get all gross roles --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[gross]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[gross]] . size ( ) ) ; for ( String attribute : [[gross]] ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 95 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 19 / 1 / 95:  10%|▉         | 95/1000 [02:35<24:41,  1.64s/it][Succeeded / Failed / Skipped / Total] 75 / 19 / 1 / 95:  10%|▉         | 96/1000 [02:40<25:13,  1.67s/it][Succeeded / Failed / Skipped / Total] 76 / 19 / 1 / 96:  10%|▉         | 96/1000 [02:40<25:13,  1.67s/it][Succeeded / Failed / Skipped / Total] 76 / 19 / 1 / 96:  10%|▉         | 97/1000 [02:49<26:19,  1.75s/it][Succeeded / Failed / Skipped / Total] 77 / 19 / 1 / 97:  10%|▉         | 97/1000 [02:49<26:19,  1.75s/it][Succeeded / Failed / Skipped / Total] 77 / 19 / 1 / 97:  10%|▉         | 98/1000 [02:53<26:39,  1.77s/it][Succeeded / Failed / Skipped / Total] 77 / 20 / 1 / 98:  10%|▉         | 98/1000 [02:53<26:39,  1.77s/it][Succeeded / Failed / Skipped / Total] 77 / 20 / 1 / 98:  10%|▉         | 99/1000 [02:57<26:54,  1.79s/it][Succeeded / Failed / Skipped / Total] 78 / 20 / 1 / 99:  10%|▉         | 99/1000 [02:57<26:54,  1.79s/it][Succeeded / Failed / Skipped / Total] 78 / 20 / 1 / 99:  10%|█         | 100/1000 [03:00<27:05,  1.81s/it][Succeeded / Failed / Skipped / Total] 78 / 21 / 1 / 100:  10%|█         | 100/1000 [03:00<27:05,  1.81s/it][Succeeded / Failed / Skipped / Total] 78 / 21 / 1 / 100:  10%|█         | 101/1000 [03:02<27:04,  1.81s/it]Should be called after propertiesSet . --> Default - 1 --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[gitmo]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 96 ---------------------------------------------
Lookup primary keys . --> region > medicis --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[sql]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[sql]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[medicis]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String [[cobblers]] = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( [[cobblers]] , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 97 ---------------------------------------------
Check content length . --> check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . [[contentWritten]] += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[contentWritten]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[contentWritten]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . [[ebonics]] += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . [[ebonics]] >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . [[ebonics]] >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new Cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[maturin]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Search for multiple attribute values . --> Groups from multiple attributes --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[attributeNames]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[brownish]] ( final String [[lander]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] [[roker]] = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[lander]] , filter , params , [[roker]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 100 ---------------------------------------------
Build the authentication details for the user . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , [[userGas]] ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[jarjar]] ( HttpServletRequest [[baffling]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[baffling]] ) ; Collection < ? extends GrantedAuthority > [[celso]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[celso]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[crooner]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[baffling]] , [[celso]] ) ; return [[crooner]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 101 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 21 / 1 / 101:  10%|█         | 101/1000 [03:02<27:04,  1.81s/it][Succeeded / Failed / Skipped / Total] 79 / 21 / 1 / 101:  10%|█         | 102/1000 [03:03<26:52,  1.80s/it][Succeeded / Failed / Skipped / Total] 80 / 21 / 1 / 102:  10%|█         | 102/1000 [03:03<26:52,  1.80s/it][Succeeded / Failed / Skipped / Total] 80 / 21 / 1 / 102:  10%|█         | 103/1000 [03:08<27:22,  1.83s/it][Succeeded / Failed / Skipped / Total] 81 / 21 / 1 / 103:  10%|█         | 103/1000 [03:08<27:22,  1.83s/it][Succeeded / Failed / Skipped / Total] 81 / 21 / 1 / 103:  10%|█         | 104/1000 [03:11<27:26,  1.84s/it][Succeeded / Failed / Skipped / Total] 81 / 22 / 1 / 104:  10%|█         | 104/1000 [03:11<27:26,  1.84s/it][Succeeded / Failed / Skipped / Total] 82 / 22 / 1 / 105:  10%|█         | 105/1000 [03:11<27:09,  1.82s/it][Succeeded / Failed / Skipped / Total] 82 / 22 / 1 / 105:  11%|█         | 106/1000 [03:16<27:34,  1.85s/it]Set the loginProcessingUrl . --> Create a temping object --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[temping]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[temping]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[temping]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 102 ---------------------------------------------
Return the token for the series id --> Return a PersistentRememberMeToken with seriesId --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[infects]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int [[finest]] ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 103 ---------------------------------------------
Perform authentication authentication . --> Implementation of PreAuthenticatedAuthentication --> Socre: 1.0

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication authResult ; Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( request ) ; if ( [[principal]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[principal]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[authRequest]] = new PreAuthenticatedAuthenticationToken ( [[principal]] , [[credentials]] ) ; [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( [[authRequest]] ) ; successfulAuthentication ( request , [[response]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse [[carburetor]] ) throws IOException , ServletException { Authentication authResult ; Object [[awaken]] = getPreAuthenticatedPrincipal ( request ) ; Object [[applejack]] = getPreAuthenticatedCredentials ( request ) ; if ( [[awaken]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[awaken]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken [[mayo]] = new PreAuthenticatedAuthenticationToken ( [[awaken]] , [[applejack]] ) ; [[mayo]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( [[mayo]] ) ; successfulAuthentication ( request , [[carburetor]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[carburetor]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 104 ---------------------------------------------
Perform a filter operation . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[dilapidated]] ( ServletRequest [[aria]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[aria]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[aria]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[aria]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 105 ---------------------------------------------
Map password to string . --> never return null --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[nevers]] ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 106 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 22 / 1 / 106:  11%|█         | 106/1000 [03:16<27:34,  1.85s/it][Succeeded / Failed / Skipped / Total] 84 / 22 / 1 / 107:  11%|█         | 107/1000 [03:17<27:27,  1.84s/it][Succeeded / Failed / Skipped / Total] 84 / 22 / 1 / 107:  11%|█         | 108/1000 [03:22<27:51,  1.87s/it][Succeeded / Failed / Skipped / Total] 85 / 22 / 1 / 108:  11%|█         | 108/1000 [03:22<27:51,  1.87s/it][Succeeded / Failed / Skipped / Total] 86 / 22 / 1 / 109:  11%|█         | 109/1000 [03:30<28:41,  1.93s/it][Succeeded / Failed / Skipped / Total] 86 / 22 / 1 / 109:  11%|█         | 110/1000 [03:32<28:35,  1.93s/it][Succeeded / Failed / Skipped / Total] 86 / 23 / 1 / 110:  11%|█         | 110/1000 [03:32<28:35,  1.93s/it]Encodes cookie tokens . --> Encode the given cookie --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String value = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder [[bonkers]] = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { [[bonkers]] . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { [[bonkers]] . append ( DELIMITER ) ; } } String value = [[bonkers]] . toString ( ) ; [[bonkers]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( [[bonkers]] . charAt ( [[bonkers]] . length ( ) - 1 ) == ' ' ) { [[bonkers]] . deleteCharAt ( [[bonkers]] . length ( ) - 1 ) ; } return [[bonkers]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 107 ---------------------------------------------
Update authentication defaults . --> orlova is enabled --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[orlova]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[disillusion]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[disillusion]] != null && ! [[disillusion]] . isCustomLogoutSuccess ( ) ) { [[disillusion]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 108 ---------------------------------------------
Extract the cookie name from the request . --> ExtractRemRememberMeCookie from HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[rover]] ) { Cookie [ ] [[decrees]] = [[rover]] . getCookies ( ) ; if ( ( [[decrees]] == null ) || ( [[decrees]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[decrees]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 109 ---------------------------------------------
Update access defaults . --> This method permit all items from re - relegated --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[hildegard]] ( B [[relegated]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[relegated]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 110 ---------------------------------------------
Map authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[retirement]] ( Collection < ? extends GrantedAuthority > [[caused]] ) { HashSet < GrantedAuthority > [[delusional]] = new HashSet <> ( [[caused]] . size ( ) ) ; for ( GrantedAuthority [[toasts]] : [[caused]] ) { [[delusional]] . add ( mapAuthority ( [[toasts]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[delusional]] . add ( defaultAuthority ) ; } return [[delusional]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 23 / 1 / 111:  11%|█         | 111/1000 [03:35<28:42,  1.94s/it][Succeeded / Failed / Skipped / Total] 87 / 23 / 1 / 111:  11%|█         | 112/1000 [03:38<28:51,  1.95s/it][Succeeded / Failed / Skipped / Total] 88 / 23 / 1 / 112:  11%|█         | 112/1000 [03:38<28:51,  1.95s/it][Succeeded / Failed / Skipped / Total] 88 / 24 / 1 / 113:  11%|█▏        | 113/1000 [03:40<28:50,  1.95s/it][Succeeded / Failed / Skipped / Total] 88 / 24 / 1 / 113:  11%|█▏        | 114/1000 [03:48<29:32,  2.00s/it][Succeeded / Failed / Skipped / Total] 88 / 25 / 1 / 114:  11%|█▏        | 114/1000 [03:48<29:32,  2.00s/it][Succeeded / Failed / Skipped / Total] 89 / 25 / 1 / 115:  12%|█▏        | 115/1000 [03:50<29:33,  2.00s/it][Succeeded / Failed / Skipped / Total] 89 / 25 / 1 / 115:  12%|█▏        | 116/1000 [03:55<29:53,  2.03s/it][Succeeded / Failed / Skipped / Total] 89 / 26 / 1 / 116:  12%|█▏        | 116/1000 [03:55<29:53,  2.03s/it]Sets the cookie . --> chromosomal method --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int [[maxAge]] , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , [[cookieValue]] ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[chromosomal]] ( String [ ] tokens , int [[surya]] , HttpServletRequest request , HttpServletResponse response ) { String [[aspire]] = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , [[aspire]] ) ; cookie . setMaxAge ( [[surya]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[surya]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 112 ---------------------------------------------
Check if principal has changed . --> Does this frederic frederic frederic? --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[frederic]] ( HttpServletRequest [[angler]] , Authentication currentAuthentication ) { Object [[mcgrath]] = getPreAuthenticatedPrincipal ( [[angler]] ) ; if ( ( [[mcgrath]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[mcgrath]] ) ) { return "False" != "False" ; } if ( [[mcgrath]] != null && [[mcgrath]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[mcgrath]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 113 ---------------------------------------------
Get the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[albino]] ( URL [[tenor]] ) { int [[newsmen]] = [[tenor]] . getPort ( ) ; if ( [[newsmen]] == - 1 ) { [[newsmen]] = [[tenor]] . getDefaultPort ( ) ; } return [[newsmen]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the full full full URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[gomes]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 115 ---------------------------------------------
Logs the current session . --> Handles landau --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[authentication]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[landau]] ( HttpServletRequest request , HttpServletResponse response , Authentication [[giza]] ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = request . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 116 ---------------------------------------------
Render the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[advised]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 117 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 27 / 1 / 117:  12%|█▏        | 117/1000 [03:55<29:39,  2.02s/it][Succeeded / Failed / Skipped / Total] 89 / 27 / 1 / 117:  12%|█▏        | 118/1000 [04:01<30:08,  2.05s/it][Succeeded / Failed / Skipped / Total] 90 / 27 / 1 / 118:  12%|█▏        | 118/1000 [04:01<30:08,  2.05s/it][Succeeded / Failed / Skipped / Total] 90 / 28 / 1 / 119:  12%|█▏        | 119/1000 [04:02<29:56,  2.04s/it][Succeeded / Failed / Skipped / Total] 90 / 28 / 1 / 119:  12%|█▏        | 120/1000 [04:08<30:25,  2.07s/it][Succeeded / Failed / Skipped / Total] 91 / 28 / 1 / 120:  12%|█▏        | 120/1000 [04:08<30:25,  2.07s/it][Succeeded / Failed / Skipped / Total] 92 / 28 / 1 / 121:  12%|█▏        | 121/1000 [04:09<30:14,  2.06s/it][Succeeded / Failed / Skipped / Total] 92 / 28 / 1 / 121:  12%|█▏        | 122/1000 [04:13<30:22,  2.08s/it]Get the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[amelie]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[amelie]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[hubcap]] = [[amelie]] . getPrincipal ( ) ; if ( [[hubcap]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[hubcap]] ; return details . getDn ( ) ; } else if ( [[amelie]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Initialize all the users --> Create a new user --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[aguilera]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 119 ---------------------------------------------
Set the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[skater]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 120 ---------------------------------------------
Authenticate authentication . --> Authenticate . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[civilisation]] ) throws AuthenticationException { if ( ! ( [[civilisation]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[civilisation]] ; Set < GrantedAuthority > [[pushcart]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 121 ---------------------------------------------
Resolves the given parameter . --> Perform a coincident --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[exchange]] ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[o]] = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? [[o]] : Mono . just ( [[adapter]] . fromPublisher ( [[o]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[coincident]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[longview]] ) { ReactiveAdapter [[reforms]] = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > [[privately]] = Mono . justOrEmpty ( p ) ; return [[reforms]] == null ? [[privately]] : Mono . just ( [[reforms]] . fromPublisher ( [[privately]] ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 29 / 1 / 122:  12%|█▏        | 122/1000 [04:13<30:22,  2.08s/it][Succeeded / Failed / Skipped / Total] 92 / 30 / 1 / 123:  12%|█▏        | 123/1000 [04:19<30:52,  2.11s/it][Succeeded / Failed / Skipped / Total] 92 / 30 / 1 / 123:  12%|█▏        | 124/1000 [04:21<30:47,  2.11s/it][Succeeded / Failed / Skipped / Total] 93 / 30 / 1 / 124:  12%|█▏        | 124/1000 [04:21<30:47,  2.11s/it][Succeeded / Failed / Skipped / Total] 93 / 31 / 1 / 125:  12%|█▎        | 125/1000 [04:24<30:50,  2.12s/it][Succeeded / Failed / Skipped / Total] 93 / 31 / 1 / 125:  13%|█▎        | 126/1000 [04:28<31:04,  2.13s/it][Succeeded / Failed / Skipped / Total] 94 / 31 / 1 / 126:  13%|█▎        | 126/1000 [04:28<31:04,  2.13s/it]Get the registered UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[kuma]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[kuma]] . size ( ) == 0 ) { [[kuma]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[kuma]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[kuma]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[kuma]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Get the query string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[siste]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 124 ---------------------------------------------
Determines if the request requires authentication . --> Is this service ticket request? --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[ripped]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[layman]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[layman]] ) ; } return [[layman]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 125 ---------------------------------------------
Build the provider url . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String [[trimmedBaseDn]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[serverUrl]] : [[urls]] ) { String trimmedUrl = [[serverUrl]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[trimmedBaseDn]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[concussion]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[concussion]] , "At least one LDAP server URL must be provided." ) ; String [[unleashed]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[blindly]] : [[concussion]] ) { String trimmedUrl = [[blindly]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[unleashed]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 126 ---------------------------------------------
Returns cached JWKSet . --> Store jwkSet --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[caused]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 127 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 31 / 1 / 127:  13%|█▎        | 127/1000 [04:29<30:51,  2.12s/it][Succeeded / Failed / Skipped / Total] 95 / 31 / 1 / 127:  13%|█▎        | 128/1000 [04:32<30:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 96 / 31 / 1 / 128:  13%|█▎        | 128/1000 [04:32<30:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 97 / 31 / 1 / 129:  13%|█▎        | 129/1000 [04:34<30:54,  2.13s/it][Succeeded / Failed / Skipped / Total] 97 / 31 / 1 / 129:  13%|█▎        | 130/1000 [04:36<30:47,  2.12s/it][Succeeded / Failed / Skipped / Total] 97 / 32 / 1 / 130:  13%|█▎        | 130/1000 [04:36<30:47,  2.12s/it][Succeeded / Failed / Skipped / Total] 98 / 32 / 1 / 131:  13%|█▎        | 131/1000 [04:37<30:43,  2.12s/it][Succeeded / Failed / Skipped / Total] 98 / 32 / 1 / 131:  13%|█▎        | 132/1000 [04:40<30:43,  2.12s/it][Succeeded / Failed / Skipped / Total] 98 / 33 / 1 / 132:  13%|█▎        | 132/1000 [04:40<30:43,  2.12s/it][Succeeded / Failed / Skipped / Total] 99 / 33 / 1 / 133:  13%|█▎        | 133/1000 [04:42<30:40,  2.12s/it][Succeeded / Failed / Skipped / Total] 99 / 33 / 1 / 133:  13%|█▎        | 134/1000 [04:47<30:55,  2.14s/it]Create the MethodSecurityExpressionRoot . --> Create a MethodSecurityExpressionRoot --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication [[catchphrase]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[catchphrase]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 128 ---------------------------------------------
URL - encode a string --> Encodes the given string . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[amadé]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 129 ---------------------------------------------
Returns true if the authenticated authentication token is authenticated . --> zelda must be enabled --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[zelda]] ( ) { Authentication [[cleanest]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[cleanest]] != null && [[cleanest]] . isAuthenticated ( ) && ! ( [[cleanest]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
service ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[zin]] ( final HttpServletRequest [[mountainous]] , final HttpServletResponse response ) { boolean [[snowboarding]] = super . requiresAuthentication ( [[mountainous]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[snowboarding]] ) ; } return [[snowboarding]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 131 ---------------------------------------------
Add the attributes and additional parameters . --> poste attributes --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[poste]] ( Map < String , Object > attributes , Map < String , Object > [[law]] ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[law]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[law]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[law]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 132 ---------------------------------------------
Determine if a proxy is contained in a request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[dukes]] ( final HttpServletRequest [[inflicting]] ) { final boolean [[hubcap]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[inflicting]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[hubcap]] ) ; } return [[hubcap]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 133 ---------------------------------------------
Loads user details . --> load trattoria --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[filibuster]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken [[trattoria]] = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[trattoria]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 134 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 33 / 1 / 134:  13%|█▎        | 134/1000 [04:47<30:55,  2.14s/it][Succeeded / Failed / Skipped / Total] 100 / 34 / 1 / 135:  14%|█▎        | 135/1000 [04:54<31:26,  2.18s/it][Succeeded / Failed / Skipped / Total] 100 / 34 / 1 / 135:  14%|█▎        | 136/1000 [04:54<31:12,  2.17s/it][Succeeded / Failed / Skipped / Total] 101 / 34 / 1 / 136:  14%|█▎        | 136/1000 [04:54<31:12,  2.17s/it][Succeeded / Failed / Skipped / Total] 102 / 34 / 1 / 137:  14%|█▎        | 137/1000 [04:56<31:09,  2.17s/it][Succeeded / Failed / Skipped / Total] 102 / 34 / 1 / 137:  14%|█▍        | 138/1000 [05:01<31:23,  2.19s/it][Succeeded / Failed / Skipped / Total] 103 / 34 / 1 / 138:  14%|█▍        | 138/1000 [05:01<31:23,  2.19s/it][Succeeded / Failed / Skipped / Total] 104 / 34 / 1 / 139:  14%|█▍        | 139/1000 [05:02<31:11,  2.17s/it][Succeeded / Failed / Skipped / Total] 104 / 34 / 1 / 139:  14%|█▍        | 140/1000 [05:02<30:58,  2.16s/it][Succeeded / Failed / Skipped / Total] 105 / 34 / 1 / 140:  14%|█▍        | 140/1000 [05:02<30:58,  2.16s/it]Gets all active Granted authorities . --> query for GrantedAuthority --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[query]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[retirement]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[retirement]] ) ; } return [[retirement]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 135 ---------------------------------------------
proxy ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[polling]] ( final boolean [[flog]] , final HttpServletRequest request ) { if ( [[flog]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 136 ---------------------------------------------
Creates a sub - array of the given range . --> anisette function --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[anisette]] ( byte [ ] array , int beginIndex , int endIndex ) { int [[jok]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[jok]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[jok]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 137 ---------------------------------------------
Returns the WebSphere principal . --> Converts an HttpServletRequest to a Request --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[tops]] ( HttpServletRequest [[ehh]] ) { Object [[blackmailed]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[blackmailed]] ) ; } return [[blackmailed]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 138 ---------------------------------------------
Concatenate arrays . --> Generate base64 list --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] [[array]] : arrays ) { length += [[array]] . length ; } byte [ ] newArray = new byte [ length ] ; int [[destPos]] = 0 ; for ( byte [ ] [[array]] : arrays ) { System . arraycopy ( [[array]] , 0 , newArray , [[destPos]] , [[array]] . length ) ; [[destPos]] += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] [[на]] : arrays ) { length += [[на]] . length ; } byte [ ] newArray = new byte [ length ] ; int [[code]] = 0 ; for ( byte [ ] [[на]] : arrays ) { System . arraycopy ( [[на]] , 0 , newArray , [[code]] , [[на]] . length ) ; [[code]] += [[на]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 139 ---------------------------------------------
Returns the shared object for the given type . --> Return premise by type --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[premise]] > [[premise]] getSharedObject ( Class < [[premise]] > sharedType ) { return ( [[premise]] ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 140 ---------------------------------------------
Preload map . --> Pre - processes deodorants . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[deodorants]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[deodorants]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[deodorants]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 34 / 1 / 141:  14%|█▍        | 141/1000 [05:04<30:57,  2.16s/it][Succeeded / Failed / Skipped / Total] 106 / 34 / 1 / 141:  14%|█▍        | 142/1000 [05:09<31:11,  2.18s/it][Succeeded / Failed / Skipped / Total] 107 / 34 / 1 / 142:  14%|█▍        | 142/1000 [05:09<31:11,  2.18s/it][Succeeded / Failed / Skipped / Total] 108 / 34 / 1 / 143:  14%|█▍        | 143/1000 [05:10<30:59,  2.17s/it][Succeeded / Failed / Skipped / Total] 108 / 34 / 1 / 143:  14%|█▍        | 144/1000 [05:17<31:28,  2.21s/it][Succeeded / Failed / Skipped / Total] 109 / 34 / 1 / 144:  14%|█▍        | 144/1000 [05:17<31:28,  2.21s/it][Succeeded / Failed / Skipped / Total] 109 / 35 / 1 / 145:  14%|█▍        | 145/1000 [05:18<31:20,  2.20s/it][Succeeded / Failed / Skipped / Total] 109 / 35 / 1 / 145:  15%|█▍        | 146/1000 [05:19<31:10,  2.19s/it][Succeeded / Failed / Skipped / Total] 110 / 35 / 1 / 146:  15%|█▍        | 146/1000 [05:19<31:10,  2.19s/it][Succeeded / Failed / Skipped / Total] 110 / 36 / 1 / 147:  15%|█▍        | 147/1000 [05:22<31:11,  2.19s/it][Succeeded / Failed / Skipped / Total] 110 / 36 / 1 / 147:  15%|█▍        | 148/1000 [05:26<31:20,  2.21s/it]Get the list of roles associated with the specified attributes . --> Gets grout attribute from dashwood --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[grout]] ( Collection < String > [[dashwood]] ) { ArrayList < GrantedAuthority > [[boing]] = new ArrayList <> ( ) ; for ( String attribute : [[dashwood]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { [[boing]] . addAll ( c ) ; } } [[boing]] . trimToSize ( ) ; return [[boing]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 142 ---------------------------------------------
Returns the collection of roles associated with this object . --> Get all monitored roles . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[awoman]] ( Object [[blackmailed]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[blackmailed]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 143 ---------------------------------------------
Returns the specified role . --> Returns the value of the specified big tag --> Socre: 1.0

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[bigfoot]] ) { Assert . isTrue ( ! [[bigfoot]] . startsWith ( "ROLE_" ) , ( ) -> [[bigfoot]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[bigfoot]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the array of roles if any . --> goyo method --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[goyo]] ( String ... [[acha]] ) { for ( int i = 0 ; i < [[acha]] . length ; i ++ ) { [[acha]] [ i ] = "ROLE_" + [[acha]] [ i ] ; } return [[acha]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 145 ---------------------------------------------
Get the J2EE principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[rake]] ( HttpServletRequest httpRequest ) { Object [[hornsby]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[hornsby]] ) ; } return [[hornsby]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 146 ---------------------------------------------
Attempts to switch to the target user . --> Returns Authentication agrippa --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[agrippa]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 147 ---------------------------------------------
Adds theAuthority collection . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > [[result]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( [[result]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[belladonna]] ( Collection < GrantedAuthority > [[snodgrass]] , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[belladonna]] ( [[snodgrass]] , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[belladonna]] ( [[snodgrass]] , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[belladonna]] ( [[snodgrass]] , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { [[snodgrass]] . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 36 / 1 / 148:  15%|█▍        | 148/1000 [05:26<31:20,  2.21s/it][Succeeded / Failed / Skipped / Total] 111 / 37 / 1 / 149:  15%|█▍        | 149/1000 [05:29<31:22,  2.21s/it][Succeeded / Failed / Skipped / Total] 111 / 37 / 1 / 149:  15%|█▌        | 150/1000 [05:29<31:09,  2.20s/it][Succeeded / Failed / Skipped / Total] 112 / 37 / 1 / 150:  15%|█▌        | 150/1000 [05:29<31:09,  2.20s/it][Succeeded / Failed / Skipped / Total] 113 / 37 / 1 / 151:  15%|█▌        | 151/1000 [05:30<31:00,  2.19s/it][Succeeded / Failed / Skipped / Total] 113 / 37 / 1 / 151:  15%|█▌        | 152/1000 [05:33<31:00,  2.19s/it][Succeeded / Failed / Skipped / Total] 114 / 37 / 1 / 152:  15%|█▌        | 152/1000 [05:33<31:00,  2.19s/it][Succeeded / Failed / Skipped / Total] 114 / 38 / 1 / 153:  15%|█▌        | 153/1000 [05:34<30:52,  2.19s/it][Succeeded / Failed / Skipped / Total] 114 / 38 / 1 / 153:  15%|█▌        | 154/1000 [05:39<31:02,  2.20s/it][Succeeded / Failed / Skipped / Total] 115 / 38 / 1 / 154:  15%|█▌        | 154/1000 [05:39<31:02,  2.20s/it][Succeeded / Failed / Skipped / Total] 116 / 38 / 1 / 155:  16%|█▌        | 155/1000 [05:42<31:07,  2.21s/it][Succeeded / Failed / Skipped / Total] 116 / 38 / 1 / 155:  16%|█▌        | 156/1000 [05:47<31:19,  2.23s/it]Display a play page index --> Get bastard --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[bastard]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 149 ---------------------------------------------
Builds the redirect url for the specified request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[asteroids]] ( HttpServletRequest request ) throws IOException , ServletException { int [[commemorate]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[commemorate]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 150 ---------------------------------------------
Get the security context . --> Create a new WebSecurityFilterChain --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[rosalie]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[rosalie]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 151 ---------------------------------------------
Invokes a method invocation . --> Caller must be called before invocation --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[result]] ; try { [[result]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , [[result]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[fabian]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object [[fritters]] ; try { [[fritters]] = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[fabian]] ) ; } return super . afterInvocation ( [[fabian]] , [[fritters]] ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 152 ---------------------------------------------
Sets the exit user URL . --> Check if exitUserUrl is valid --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[atwood]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[granite]] = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 153 ---------------------------------------------
Validates the user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[soybeans]] ( HttpServletRequest [[milburn]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 154 ---------------------------------------------
Returns the list of roles from the authority . --> Return a collection of roles for a given Jwt jwt . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[albany]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 155 ---------------------------------------------
Generates a CSRF token . --> Updates the internal state of theusionment . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[disillusionment]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 156 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 38 / 1 / 156:  16%|█▌        | 156/1000 [05:47<31:19,  2.23s/it][Succeeded / Failed / Skipped / Total] 117 / 39 / 1 / 157:  16%|█▌        | 157/1000 [05:48<31:12,  2.22s/it][Succeeded / Failed / Skipped / Total] 117 / 39 / 1 / 157:  16%|█▌        | 158/1000 [05:51<31:13,  2.22s/it][Succeeded / Failed / Skipped / Total] 118 / 39 / 1 / 158:  16%|█▌        | 158/1000 [05:51<31:13,  2.22s/it][Succeeded / Failed / Skipped / Total] 119 / 39 / 1 / 159:  16%|█▌        | 159/1000 [05:53<31:09,  2.22s/it][Succeeded / Failed / Skipped / Total] 119 / 39 / 1 / 159:  16%|█▌        | 160/1000 [05:55<31:05,  2.22s/it]Check if the current user is authenticated . --> dalton --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[dalton]] ( ) throws IOException { String [[underneath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[underneath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 157 ---------------------------------------------
Process an autoLogin cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest [[request]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest [[peop]] , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 158 ---------------------------------------------
Add permission for contact . --> region > Displaying --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[contact]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[gabay]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[docile]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[docile]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 159 ---------------------------------------------
Delete the specified permission . --> Delete the specified contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[mask]] ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[mask]] ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[reiner]] ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[reiner]] ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 160 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 120 / 39 / 1 / 160:  16%|█▌        | 160/1000 [05:55<31:05,  2.22s/it][Succeeded / Failed / Skipped / Total] 121 / 39 / 1 / 161:  16%|█▌        | 161/1000 [05:55<30:54,  2.21s/it][Succeeded / Failed / Skipped / Total] 121 / 39 / 1 / 161:  16%|█▌        | 162/1000 [06:00<31:06,  2.23s/it][Succeeded / Failed / Skipped / Total] 122 / 39 / 1 / 162:  16%|█▌        | 162/1000 [06:00<31:06,  2.23s/it][Succeeded / Failed / Skipped / Total] 122 / 40 / 1 / 163:  16%|█▋        | 163/1000 [06:02<30:59,  2.22s/it][Succeeded / Failed / Skipped / Total] 122 / 40 / 1 / 163:  16%|█▋        | 164/1000 [06:02<30:46,  2.21s/it][Succeeded / Failed / Skipped / Total] 123 / 40 / 1 / 164:  16%|█▋        | 164/1000 [06:02<30:46,  2.21s/it][Succeeded / Failed / Skipped / Total] 124 / 40 / 1 / 165:  16%|█▋        | 165/1000 [06:03<30:41,  2.21s/it][Succeeded / Failed / Skipped / Total] 124 / 40 / 1 / 165:  17%|█▋        | 166/1000 [06:04<30:32,  2.20s/it]Add a new permission --> Get a single sunscreen --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[sid]] = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , [[sid]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[sunscreen]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[sunscreen]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid [[archipelago]] = new PrincipalSid ( [[sunscreen]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[sunscreen]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[sunscreen]] . getContact ( ) , [[archipelago]] , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 161 ---------------------------------------------
Decodes a JWT token --> Benard method . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt [[decode]] ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt [[benard]] ( String [[consoles]] ) throws JwtException { JWT jwt = parse ( [[consoles]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[consoles]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 162 ---------------------------------------------
Get UserDetailsResourceFactoryBean Method . --> Convert kisser to InMemoryResource --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[users]] ) { InMemoryResource resource = new InMemoryResource ( [[users]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[kisser]] ) { InMemoryResource resource = new InMemoryResource ( [[kisser]] ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 163 ---------------------------------------------
Handle login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[dorsey]] ( HttpServletRequest [[andr]] , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[andr]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 164 ---------------------------------------------
Gets attribute values . --> Get kaitlyn by name . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[kaitlyn]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 165 ---------------------------------------------
Encodes a string into a byte array . --> Encodes soho into a byte array --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[soho]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[soho]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 166 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 40 / 1 / 166:  17%|█▋        | 166/1000 [06:04<30:32,  2.20s/it][Succeeded / Failed / Skipped / Total] 125 / 41 / 1 / 167:  17%|█▋        | 167/1000 [06:07<30:31,  2.20s/it][Succeeded / Failed / Skipped / Total] 125 / 41 / 1 / 167:  17%|█▋        | 168/1000 [06:08<30:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 126 / 41 / 1 / 168:  17%|█▋        | 168/1000 [06:08<30:25,  2.19s/it][Succeeded / Failed / Skipped / Total] 127 / 41 / 1 / 169:  17%|█▋        | 169/1000 [06:09<30:17,  2.19s/it][Succeeded / Failed / Skipped / Total] 127 / 41 / 1 / 169:  17%|█▋        | 170/1000 [06:13<30:21,  2.19s/it][Succeeded / Failed / Skipped / Total] 128 / 41 / 1 / 170:  17%|█▋        | 170/1000 [06:13<30:21,  2.19s/it][Succeeded / Failed / Skipped / Total] 129 / 41 / 1 / 171:  17%|█▋        | 171/1000 [06:20<30:42,  2.22s/it][Succeeded / Failed / Skipped / Total] 129 / 41 / 1 / 171:  17%|█▋        | 172/1000 [06:21<30:34,  2.22s/it][Succeeded / Failed / Skipped / Total] 130 / 41 / 1 / 172:  17%|█▋        | 172/1000 [06:21<30:34,  2.22s/it]Returns the default role prefix . --> Returns the prefix of the given getValuey --> Socre: 1.0

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[defaultRolePrefix]] , String role ) { if ( role == null ) { return role ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[defaultRolePrefix]] ) ) { return role ; } return [[defaultRolePrefix]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String [[schoolboy]] , String role ) { if ( role == null ) { return role ; } if ( [[schoolboy]] == null || [[schoolboy]] . length ( ) == 0 ) { return role ; } if ( role . startsWith ( [[schoolboy]] ) ) { return role ; } return [[schoolboy]] + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 167 ---------------------------------------------
Checks if the access expression is included in the process . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[alerted]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[elster]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[elster]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[elster]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 168 ---------------------------------------------
Decodes a byte array . --> dino method --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[dino]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Display a contact page . --> region > readAcl --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[bonney]] ( @ RequestParam ( "contactId" ) int [[agro]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[agro]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[superbowl]] = new HashMap <> ( ) ; [[superbowl]] . put ( "contact" , contact ) ; [[superbowl]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[superbowl]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 170 ---------------------------------------------
Returns the value of the first attribute with the given name . --> Return null if there is none . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > result = getAttributeValues ( [[name]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[stratosphere]] ( String [[anabella]] ) { List < String > result = getAttributeValues ( [[anabella]] ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Finds attributes of the specified targetClass . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[anaphylactic]] ( Method method , Class < ? > [[pyle]] ) { if ( [[pyle]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[pyle]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Adds the secure method . --> d7gum --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[dadgum]] ( RegisteredMethod [[aid]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[aid]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[aid]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[aid]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 41 / 1 / 173:  17%|█▋        | 173/1000 [06:26<30:46,  2.23s/it][Succeeded / Failed / Skipped / Total] 131 / 41 / 1 / 173:  17%|█▋        | 174/1000 [06:27<30:41,  2.23s/it][Succeeded / Failed / Skipped / Total] 131 / 42 / 1 / 174:  17%|█▋        | 174/1000 [06:27<30:41,  2.23s/it][Succeeded / Failed / Skipped / Total] 132 / 42 / 1 / 175:  18%|█▊        | 175/1000 [06:29<30:34,  2.22s/it][Succeeded / Failed / Skipped / Total] 132 / 42 / 1 / 175:  18%|█▊        | 176/1000 [06:33<30:43,  2.24s/it][Succeeded / Failed / Skipped / Total] 133 / 42 / 1 / 176:  18%|█▊        | 176/1000 [06:33<30:43,  2.24s/it][Succeeded / Failed / Skipped / Total] 134 / 42 / 1 / 177:  18%|█▊        | 177/1000 [06:34<30:36,  2.23s/it][Succeeded / Failed / Skipped / Total] 134 / 42 / 1 / 177:  18%|█▊        | 178/1000 [06:44<31:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 135 / 42 / 1 / 178:  18%|█▊        | 178/1000 [06:44<31:09,  2.27s/it][Succeeded / Failed / Skipped / Total] 135 / 42 / 1 / 178:  18%|█▊        | 179/1000 [06:47<31:09,  2.28s/it][Succeeded / Failed / Skipped / Total] 135 / 43 / 1 / 179:  18%|█▊        | 179/1000 [06:47<31:09,  2.28s/it][Succeeded / Failed / Skipped / Total] 135 / 43 / 1 / 179:  18%|█▊        | 180/1000 [06:54<31:29,  2.30s/it]Get random contact . --> Returns the random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[awaken]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[awaken]] . size ( ) ) ; return [[awaken]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 174 ---------------------------------------------
Add a WebContact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[teeniest]] , BindingResult result ) { validator . validate ( [[teeniest]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( [[teeniest]] . getName ( ) , [[teeniest]] . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the method name is match . --> Determines whether a string is wack or not --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String methodName , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && methodName . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && methodName . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[wack]] ( String methodName , String [[plaything]] ) { return ( [[plaything]] . endsWith ( "*" ) && methodName . startsWith ( [[plaything]] . substring ( 0 , [[plaything]] . length ( ) - 1 ) ) ) || ( [[plaything]] . startsWith ( "*" ) && methodName . endsWith ( [[plaything]] . substring ( 1 , [[plaything]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Gets all config attributes . --> Returns a collection of ConfigAttribute objects --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[gutter]] ( ) { Set < ConfigAttribute > [[accelerant]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[accelerant]] . addAll ( attributeList ) ; } return [[accelerant]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 177 ---------------------------------------------
Handle a bind exception --> Handles exceptions --> Socre: 1.0

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String [[username]] , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[templar]] , String [[nausea]] , Throwable [[tyke]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[templar]] + ": " + [[tyke]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Sends an access HTTP request . --> Send an access HTTP request --> Socre: 1.0

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[wheels]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 179 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[dada]] ( HttpServletRequest request ) { HttpSession [[fearlessness]] = request . getSession ( "False" != "False" ) ; if ( [[fearlessness]] == null ) { return ; } [[fearlessness]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 43 / 1 / 180:  18%|█▊        | 180/1000 [06:54<31:29,  2.30s/it][Succeeded / Failed / Skipped / Total] 136 / 43 / 1 / 180:  18%|█▊        | 181/1000 [06:58<31:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 136 / 44 / 1 / 181:  18%|█▊        | 181/1000 [06:58<31:34,  2.31s/it][Succeeded / Failed / Skipped / Total] 136 / 44 / 1 / 181:  18%|█▊        | 182/1000 [07:00<31:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 137 / 44 / 1 / 182:  18%|█▊        | 182/1000 [07:00<31:28,  2.31s/it][Succeeded / Failed / Skipped / Total] 137 / 44 / 1 / 182:  18%|█▊        | 183/1000 [07:00<31:19,  2.30s/it][Succeeded / Failed / Skipped / Total] 137 / 45 / 1 / 183:  18%|█▊        | 183/1000 [07:00<31:19,  2.30s/it][Succeeded / Failed / Skipped / Total] 137 / 45 / 1 / 183:  18%|█▊        | 184/1000 [07:07<31:35,  2.32s/it][Succeeded / Failed / Skipped / Total] 138 / 45 / 1 / 184:  18%|█▊        | 184/1000 [07:07<31:35,  2.32s/it][Succeeded / Failed / Skipped / Total] 138 / 45 / 1 / 184:  18%|█▊        | 185/1000 [07:08<31:29,  2.32s/it][Succeeded / Failed / Skipped / Total] 138 / 46 / 1 / 185:  18%|█▊        | 185/1000 [07:08<31:29,  2.32s/it][Succeeded / Failed / Skipped / Total] 138 / 46 / 1 / 185:  19%|█▊        | 186/1000 [07:12<31:34,  2.33s/it]Checks the appropriate filters . --> Jaas API action . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[bailor]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 181 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[chappy]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Method used to configures any request . --> A convenience method to create a new C object --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "[[True]]" == "[[True]]" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[faceless]] ( ) { Assert . state ( ! this . [[ludmila]] , "Can't configure anyRequest after itself" ) ; C [[eberhardt]] = requestMatchers ( ANY_REQUEST ) ; this . [[ludmila]] = "[[Contravention]]" == "[[Contravention]]" ; return [[eberhardt]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 183 ---------------------------------------------
Create the service URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[dang]] ( final HttpServletRequest [[albany]] , final HttpServletResponse [[rds]] ) { return CommonUtils . constructServiceUrl ( null , [[rds]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 184 ---------------------------------------------
Registers bean manager . --> Registers a BeanComponent --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[barad]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[barad]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[barad]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 185 ---------------------------------------------
Returns the field with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[skewer]] ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 46 / 1 / 186:  19%|█▊        | 186/1000 [07:12<31:34,  2.33s/it][Succeeded / Failed / Skipped / Total] 139 / 46 / 1 / 186:  19%|█▊        | 187/1000 [07:12<31:22,  2.32s/it][Succeeded / Failed / Skipped / Total] 139 / 47 / 1 / 187:  19%|█▊        | 187/1000 [07:12<31:22,  2.32s/it][Succeeded / Failed / Skipped / Total] 139 / 47 / 1 / 187:  19%|█▉        | 188/1000 [07:23<31:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 139 / 48 / 1 / 188:  19%|█▉        | 188/1000 [07:23<31:53,  2.36s/it][Succeeded / Failed / Skipped / Total] 139 / 48 / 1 / 188:  19%|█▉        | 189/1000 [07:23<31:41,  2.34s/it][Succeeded / Failed / Skipped / Total] 140 / 48 / 1 / 189:  19%|█▉        | 189/1000 [07:23<31:41,  2.34s/it][Succeeded / Failed / Skipped / Total] 140 / 48 / 1 / 189:  19%|█▉        | 190/1000 [07:24<31:33,  2.34s/it][Succeeded / Failed / Skipped / Total] 141 / 48 / 1 / 190:  19%|█▉        | 190/1000 [07:24<31:33,  2.34s/it][Succeeded / Failed / Skipped / Total] 141 / 48 / 1 / 190:  19%|█▉        | 191/1000 [07:28<31:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 142 / 48 / 1 / 191:  19%|█▉        | 191/1000 [07:28<31:41,  2.35s/it][Succeeded / Failed / Skipped / Total] 142 / 48 / 1 / 191:  19%|█▉        | 192/1000 [07:29<31:31,  2.34s/it][Succeeded / Failed / Skipped / Total] 142 / 49 / 1 / 192:  19%|█▉        | 192/1000 [07:29<31:31,  2.34s/it][Succeeded / Failed / Skipped / Total] 142 / 49 / 1 / 192:  19%|█▉        | 193/1000 [07:34<31:39,  2.35s/it]Returns true if actual matches . --> Checks if actual array matches expected array --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int [[i]] = 0 ; [[i]] < expected . length ; [[i]] ++ ) { result |= expected [ [[i]] ] ^ actual [ [[i]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int [[box]] = 0 ; [[box]] < expected . length ; [[box]] ++ ) { result |= expected [ [[box]] ] ^ actual [ [[box]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 187 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[curdles]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[aey]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Extract prefix from SHA prefix --> [[[FAILED]]]

[[[[Adv]]]]: private String [[extractPrefix]] ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = encPass . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[dunning]] ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int [[barnett]] = encPass . lastIndexOf ( ' ' ) ; if ( [[barnett]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , [[barnett]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 189 ---------------------------------------------
Gets the authority list to set . --> Get top - level user id by id --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : userAuthorities ) { set . add ( [[authority]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[topanga]] ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[horsehair]] : userAuthorities ) { set . add ( [[horsehair]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default failure URL . --> dinger --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[dinger]] ( String [[ap]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[ap]] ) , ( ) -> "'" + [[ap]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[ap]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
Sets the resolved hidden inputs for this request . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[eberhardt]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 192 ---------------------------------------------
Lookup parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[portcullis]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 143 / 49 / 1 / 193:  19%|█▉        | 193/1000 [07:34<31:39,  2.35s/it][Succeeded / Failed / Skipped / Total] 143 / 49 / 1 / 193:  19%|█▉        | 194/1000 [07:45<32:13,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 50 / 1 / 194:  19%|█▉        | 194/1000 [07:45<32:13,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 50 / 1 / 194:  20%|█▉        | 195/1000 [07:48<32:15,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 51 / 1 / 195:  20%|█▉        | 195/1000 [07:48<32:15,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 51 / 1 / 195:  20%|█▉        | 196/1000 [07:48<32:03,  2.39s/it][Succeeded / Failed / Skipped / Total] 143 / 51 / 2 / 196:  20%|█▉        | 196/1000 [07:48<32:03,  2.39s/it][Succeeded / Failed / Skipped / Total] 143 / 51 / 2 / 196:  20%|█▉        | 197/1000 [07:53<32:10,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 52 / 2 / 197:  20%|█▉        | 197/1000 [07:53<32:10,  2.40s/it][Succeeded / Failed / Skipped / Total] 143 / 52 / 2 / 197:  20%|█▉        | 198/1000 [07:57<32:15,  2.41s/it][Succeeded / Failed / Skipped / Total] 144 / 52 / 2 / 198:  20%|█▉        | 198/1000 [07:57<32:15,  2.41s/it][Succeeded / Failed / Skipped / Total] 144 / 52 / 2 / 198:  20%|█▉        | 199/1000 [08:04<32:29,  2.43s/it][Succeeded / Failed / Skipped / Total] 145 / 52 / 2 / 199:  20%|█▉        | 199/1000 [08:04<32:29,  2.43s/it][Succeeded / Failed / Skipped / Total] 145 / 52 / 2 / 199:  20%|██        | 200/1000 [08:06<32:26,  2.43s/it][Succeeded / Failed / Skipped / Total] 146 / 52 / 2 / 200:  20%|██        | 200/1000 [08:06<32:26,  2.43s/it][Succeeded / Failed / Skipped / Total] 146 / 52 / 2 / 200:  20%|██        | 201/1000 [08:06<32:15,  2.42s/it]Converts the given result object to the given identifier . --> Convert a ResultSet to an identifier --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[czech]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[czech]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[czech]] = convertFromStringTo ( ( String ) [[czech]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 194 ---------------------------------------------
Returns true if the given url is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String [[url]] ) { if ( [[url]] == null ) { return "[[False]]" != "[[False]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[url]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[execute]] ( String [[tull]] ) { if ( [[tull]] == null ) { return "[[Deauville]]" != "[[Deauville]]" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( [[tull]] ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 195 ---------------------------------------------
Create a list of OpenID attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[wally]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[calms]] : idToAttributes . entrySet ( ) ) { if ( [[calms]] . getKey ( ) . matcher ( [[wally]] ) . matches ( ) ) { return [[calms]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Returns a copy of the current webExchange matcher . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Extracts the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor [[extractor]] = entry . getValue ( ) ; return [[extractor]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[glockenspiel]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = entry . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor [[thatl]] = entry . getValue ( ) ; return [[thatl]] . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 198 ---------------------------------------------
Deletes the given password with the given salt . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[buttin]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[buttin]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 199 ---------------------------------------------
Build a request URL --> Delete request hostname --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[deliriously]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[templar]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[templar]] . append ( servletPath ) ; if ( pathInfo != null ) { [[templar]] . append ( pathInfo ) ; } } else { [[templar]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[templar]] . append ( "?" ) . append ( queryString ) ; } return [[templar]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 200 ---------------------------------------------
Save the request to the current state . --> Bursitis method --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[False]]" != "[[False]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[bursitis]] ( HttpServletRequest request , HttpServletResponse [[sellers]] ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "[[Gullies]]" != "[[Gullies]]" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 201 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 52 / 2 / 201:  20%|██        | 201/1000 [08:06<32:15,  2.42s/it][Succeeded / Failed / Skipped / Total] 147 / 52 / 2 / 201:  20%|██        | 202/1000 [08:13<32:29,  2.44s/it][Succeeded / Failed / Skipped / Total] 148 / 52 / 2 / 202:  20%|██        | 202/1000 [08:13<32:29,  2.44s/it][Succeeded / Failed / Skipped / Total] 148 / 52 / 2 / 202:  20%|██        | 203/1000 [08:15<32:25,  2.44s/it][Succeeded / Failed / Skipped / Total] 149 / 52 / 2 / 203:  20%|██        | 203/1000 [08:15<32:25,  2.44s/it][Succeeded / Failed / Skipped / Total] 149 / 52 / 2 / 203:  20%|██        | 204/1000 [08:17<32:20,  2.44s/it][Succeeded / Failed / Skipped / Total] 149 / 53 / 2 / 204:  20%|██        | 204/1000 [08:17<32:20,  2.44s/it][Succeeded / Failed / Skipped / Total] 149 / 53 / 2 / 204:  20%|██        | 205/1000 [08:20<32:22,  2.44s/it][Succeeded / Failed / Skipped / Total] 150 / 53 / 2 / 205:  20%|██        | 205/1000 [08:20<32:22,  2.44s/it][Succeeded / Failed / Skipped / Total] 150 / 53 / 2 / 205:  21%|██        | 206/1000 [08:24<32:25,  2.45s/it][Succeeded / Failed / Skipped / Total] 151 / 53 / 2 / 206:  21%|██        | 206/1000 [08:24<32:25,  2.45s/it][Succeeded / Failed / Skipped / Total] 151 / 53 / 2 / 206:  21%|██        | 207/1000 [08:25<32:15,  2.44s/it][Succeeded / Failed / Skipped / Total] 151 / 54 / 2 / 207:  21%|██        | 207/1000 [08:25<32:15,  2.44s/it][Succeeded / Failed / Skipped / Total] 151 / 54 / 2 / 207:  21%|██        | 208/1000 [08:31<32:27,  2.46s/it]Returns the queryable text using the given password . --> Create textEncryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[reminiscent]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[reminiscent]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
Creates a text encryptor . --> Returns TextEncryptor for the specified chains --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[chainsaw]] , CharSequence [[duran]] ) { return new HexEncodingTextEncryptor ( standard ( [[chainsaw]] , [[duran]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Determine the target url . --> Gets accidentally . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[accidentally]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[accidentally]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 204 ---------------------------------------------
Create the XML entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[entry_]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[encryption]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[encryption]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[encryption]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 205 ---------------------------------------------
Determine target URL . --> drugs --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[drugs]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 206 ---------------------------------------------
Build userDn . --> Build a DistinguishedName --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName [[cheese]] = new DistinguishedName ( userDnBase ) ; [[cheese]] . add ( usernameAttribute , username ) ; return [[cheese]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 207 ---------------------------------------------
Create an object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity object , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long [[barbaric]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[barbaric]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 208 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 152 / 54 / 2 / 208:  21%|██        | 208/1000 [08:31<32:27,  2.46s/it][Succeeded / Failed / Skipped / Total] 152 / 54 / 2 / 208:  21%|██        | 209/1000 [08:35<32:29,  2.46s/it][Succeeded / Failed / Skipped / Total] 153 / 54 / 2 / 209:  21%|██        | 209/1000 [08:35<32:29,  2.46s/it][Succeeded / Failed / Skipped / Total] 153 / 54 / 2 / 209:  21%|██        | 210/1000 [08:37<32:28,  2.47s/it][Succeeded / Failed / Skipped / Total] 153 / 55 / 2 / 210:  21%|██        | 210/1000 [08:37<32:28,  2.47s/it][Succeeded / Failed / Skipped / Total] 153 / 55 / 2 / 210:  21%|██        | 211/1000 [08:38<32:20,  2.46s/it][Succeeded / Failed / Skipped / Total] 154 / 55 / 2 / 211:  21%|██        | 211/1000 [08:38<32:20,  2.46s/it][Succeeded / Failed / Skipped / Total] 154 / 55 / 2 / 211:  21%|██        | 212/1000 [08:40<32:16,  2.46s/it][Succeeded / Failed / Skipped / Total] 155 / 55 / 2 / 212:  21%|██        | 212/1000 [08:40<32:16,  2.46s/it][Succeeded / Failed / Skipped / Total] 155 / 55 / 2 / 212:  21%|██▏       | 213/1000 [08:41<32:06,  2.45s/it][Succeeded / Failed / Skipped / Total] 156 / 55 / 2 / 213:  21%|██▏       | 213/1000 [08:41<32:06,  2.45s/it][Succeeded / Failed / Skipped / Total] 156 / 55 / 2 / 213:  21%|██▏       | 214/1000 [08:47<32:18,  2.47s/it]Sets the target URL parameter . --> pickpocket by booyah --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[pickpocketing]] ( String [[booyah]] ) { if ( [[booyah]] != null ) { Assert . hasText ( [[booyah]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[booyah]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 209 ---------------------------------------------
Gets server webExchangeMatcher by path . --> path inspector --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String [[pattern]] : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod method , String ... [[mío]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[mío]] . length ) ; for ( String [[bubba]] : [[mío]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[bubba]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 210 ---------------------------------------------
Returns the current date . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[reorganized]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 211 ---------------------------------------------
Update the ACL of the object identity . --> Methode d napster --> Socre: 1.0

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[oii]] = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( [[oii]] ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[napster]] ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[axel]] = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( [[axel]] ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int count = jdbcOperations . update ( [[napster]] , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 212 ---------------------------------------------
Creates a map of shared objects . --> Generates a map of class parameters . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[hup]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 213 ---------------------------------------------
Internal function used to parse a date . --> returns null if the string is null --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[liquidity]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 214 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 55 / 2 / 214:  21%|██▏       | 214/1000 [08:47<32:18,  2.47s/it][Succeeded / Failed / Skipped / Total] 157 / 55 / 2 / 214:  22%|██▏       | 215/1000 [08:48<32:09,  2.46s/it][Succeeded / Failed / Skipped / Total] 158 / 55 / 2 / 215:  22%|██▏       | 215/1000 [08:48<32:09,  2.46s/it][Succeeded / Failed / Skipped / Total] 158 / 55 / 2 / 215:  22%|██▏       | 216/1000 [08:48<31:59,  2.45s/it][Succeeded / Failed / Skipped / Total] 159 / 55 / 2 / 216:  22%|██▏       | 216/1000 [08:48<31:59,  2.45s/it][Succeeded / Failed / Skipped / Total] 159 / 55 / 2 / 216:  22%|██▏       | 217/1000 [08:56<32:14,  2.47s/it][Succeeded / Failed / Skipped / Total] 160 / 55 / 2 / 217:  22%|██▏       | 217/1000 [08:56<32:14,  2.47s/it][Succeeded / Failed / Skipped / Total] 160 / 55 / 2 / 217:  22%|██▏       | 218/1000 [08:56<32:05,  2.46s/it][Succeeded / Failed / Skipped / Total] 161 / 55 / 2 / 218:  22%|██▏       | 218/1000 [08:56<32:05,  2.46s/it][Succeeded / Failed / Skipped / Total] 161 / 55 / 2 / 218:  22%|██▏       | 219/1000 [08:59<32:03,  2.46s/it][Succeeded / Failed / Skipped / Total] 162 / 55 / 2 / 219:  22%|██▏       | 219/1000 [08:59<32:03,  2.46s/it][Succeeded / Failed / Skipped / Total] 162 / 55 / 2 / 219:  22%|██▏       | 220/1000 [09:01<32:01,  2.46s/it][Succeeded / Failed / Skipped / Total] 162 / 56 / 2 / 220:  22%|██▏       | 220/1000 [09:01<32:01,  2.46s/it][Succeeded / Failed / Skipped / Total] 162 / 56 / 2 / 220:  22%|██▏       | 221/1000 [09:06<32:07,  2.47s/it][Succeeded / Failed / Skipped / Total] 163 / 56 / 2 / 221:  22%|██▏       | 221/1000 [09:06<32:07,  2.47s/it][Succeeded / Failed / Skipped / Total] 163 / 56 / 2 / 221:  22%|██▏       | 222/1000 [09:12<32:17,  2.49s/it]Update the cache . --> region > authority --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[authority]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 215 ---------------------------------------------
Returns the parent directory with its parent directory id . --> Returns null if there is none . --> Socre: 1.0

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[rowNumber]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[beauregard]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[nineties]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 216 ---------------------------------------------
Write the header . --> Add a kn --> Socre: 1.0

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[knife]] ( HttpServletRequest request , HttpServletResponse [[glow]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[glow]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[glow]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[glow]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[glow]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[glow]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 217 ---------------------------------------------
Builds the groupDn . --> Build the groupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[tetra]] = new DistinguishedName ( groupSearchBase ) ; [[tetra]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[tetra]] ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 218 ---------------------------------------------
Gets the security name . --> Return dinozzo --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[dinozzo]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 219 ---------------------------------------------
Gets the list of timeSphere groups . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[pronto]] ( final String [[lebanon]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 220 ---------------------------------------------
Sets the details of the authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[dor]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 221 ---------------------------------------------
Returns the current application context . --> Get the ApplicationContext for the given PageContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext [[burmese]] ) { ServletContext servletContext = [[burmese]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 222 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 56 / 2 / 222:  22%|██▏       | 222/1000 [09:12<32:17,  2.49s/it][Succeeded / Failed / Skipped / Total] 164 / 56 / 2 / 222:  22%|██▏       | 223/1000 [09:14<32:13,  2.49s/it][Succeeded / Failed / Skipped / Total] 165 / 56 / 2 / 223:  22%|██▏       | 223/1000 [09:14<32:13,  2.49s/it][Succeeded / Failed / Skipped / Total] 165 / 56 / 2 / 223:  22%|██▏       | 224/1000 [09:19<32:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 165 / 57 / 2 / 224:  22%|██▏       | 224/1000 [09:19<32:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 165 / 57 / 2 / 224:  22%|██▎       | 225/1000 [09:22<32:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 166 / 57 / 2 / 225:  22%|██▎       | 225/1000 [09:22<32:18,  2.50s/it][Succeeded / Failed / Skipped / Total] 166 / 57 / 2 / 225:  23%|██▎       | 226/1000 [09:23<32:08,  2.49s/it][Succeeded / Failed / Skipped / Total] 167 / 57 / 2 / 226:  23%|██▎       | 226/1000 [09:23<32:08,  2.49s/it][Succeeded / Failed / Skipped / Total] 167 / 57 / 2 / 226:  23%|██▎       | 227/1000 [09:23<31:59,  2.48s/it][Succeeded / Failed / Skipped / Total] 168 / 57 / 2 / 227:  23%|██▎       | 227/1000 [09:23<31:59,  2.48s/it][Succeeded / Failed / Skipped / Total] 168 / 57 / 2 / 227:  23%|██▎       | 228/1000 [09:25<31:53,  2.48s/it][Succeeded / Failed / Skipped / Total] 169 / 57 / 2 / 228:  23%|██▎       | 228/1000 [09:25<31:53,  2.48s/it][Succeeded / Failed / Skipped / Total] 169 / 57 / 2 / 228:  23%|██▎       | 229/1000 [09:27<31:49,  2.48s/it]Gets the filters for the specified URL . --> Get the detail of a URL --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[candidacy]] ( String url ) { return [[candidacy]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 223 ---------------------------------------------
Allows to set the session state of enabled sessions . --> Should be called at startup? --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[wasa]] , int [[aitch]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[wasa]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[aitch]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 224 ---------------------------------------------
Retrieves the list of filters for the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[spyglass]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[spyglass]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 225 ---------------------------------------------
Configures the Jaas usingLoop . --> Configure JaasUsingLoop --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[loginConfigUrl]] = convertLoginConfigToUrl ( ) ; boolean [[alreadySet]] = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[n]] ) ) != null ) { [[alreadySet]] = existing . equals ( [[loginConfigUrl]] ) ; if ( [[alreadySet]] ) { break ; } [[n]] ++ ; } if ( ! [[alreadySet]] ) { String key = prefix + [[n]] ; log . debug ( "Setting security property [" + key + "] to: " + [[loginConfigUrl]] ) ; Security . setProperty ( key , [[loginConfigUrl]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String [[lunkhead]] = convertLoginConfigToUrl ( ) ; boolean [[dorina]] = "False" != "False" ; int [[researchers]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[researchers]] ) ) != null ) { [[dorina]] = existing . equals ( [[lunkhead]] ) ; if ( [[dorina]] ) { break ; } [[researchers]] ++ ; } if ( ! [[dorina]] ) { String key = prefix + [[researchers]] ; log . debug ( "Setting security property [" + key + "] to: " + [[lunkhead]] ) ; Security . setProperty ( key , [[lunkhead]] ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 226 ---------------------------------------------
Sets the filters . --> Get the filter --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[comfy]] ( List < Filter > filters ) { Validate . notNull ( [[comfy]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[comfy]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 227 ---------------------------------------------
copyDetails Method . --> vijay operation --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[vijay]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 228 ---------------------------------------------
Creates a basic authentication . --> Return a new AuthenticationScheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String [[password]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[password]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String [[insurgents]] ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( [[insurgents]] ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 229 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 57 / 2 / 229:  23%|██▎       | 229/1000 [09:27<31:49,  2.48s/it][Succeeded / Failed / Skipped / Total] 170 / 57 / 2 / 229:  23%|██▎       | 230/1000 [09:35<32:05,  2.50s/it][Succeeded / Failed / Skipped / Total] 170 / 58 / 2 / 230:  23%|██▎       | 230/1000 [09:35<32:05,  2.50s/it][Succeeded / Failed / Skipped / Total] 170 / 58 / 2 / 230:  23%|██▎       | 231/1000 [09:39<32:09,  2.51s/it][Succeeded / Failed / Skipped / Total] 171 / 58 / 2 / 231:  23%|██▎       | 231/1000 [09:39<32:09,  2.51s/it][Succeeded / Failed / Skipped / Total] 171 / 58 / 2 / 231:  23%|██▎       | 232/1000 [09:41<32:04,  2.51s/it][Succeeded / Failed / Skipped / Total] 171 / 59 / 2 / 232:  23%|██▎       | 232/1000 [09:41<32:04,  2.51s/it][Succeeded / Failed / Skipped / Total] 171 / 59 / 2 / 232:  23%|██▎       | 233/1000 [09:41<31:55,  2.50s/it][Succeeded / Failed / Skipped / Total] 172 / 59 / 2 / 233:  23%|██▎       | 233/1000 [09:41<31:55,  2.50s/it][Succeeded / Failed / Skipped / Total] 172 / 59 / 2 / 233:  23%|██▎       | 234/1000 [09:44<31:53,  2.50s/it][Succeeded / Failed / Skipped / Total] 173 / 59 / 2 / 234:  23%|██▎       | 234/1000 [09:44<31:53,  2.50s/it][Succeeded / Failed / Skipped / Total] 173 / 59 / 2 / 234:  24%|██▎       | 235/1000 [09:45<31:46,  2.49s/it]Sets session attributes . --> Update the MockMvcRequestSpecification caprica --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[caprica]] ( Map < String , Object > [[dizzy]] ) { notNull ( [[dizzy]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[dizzy]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 230 ---------------------------------------------
Changes the user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String [[titti]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , [[titti]] ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , [[titti]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 231 ---------------------------------------------
Set the proxy . --> Set the firma --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[beeped]] ( URI [[firma]] ) { if ( [[firma]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[beeped]] ( new ProxySpecification ( [[firma]] . getHost ( ) , [[firma]] . getPort ( ) , [[firma]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 232 ---------------------------------------------
Get the full full baseDn for the given dn . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[sampler]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 233 ---------------------------------------------
Get the scheme for the given username password . --> Create a new AuthenticationScheme instance --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[userName]] , String password , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[dua]] , String password , FormAuthConfig config ) { if ( [[dua]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[tamar]] = new FormAuthScheme ( ) ; [[tamar]] . setUserName ( [[dua]] ) ; [[tamar]] . setPassword ( password ) ; [[tamar]] . setConfig ( config ) ; return [[tamar]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 234 ---------------------------------------------
Redirectured config . --> Create RestAssured configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[harridan]] ) { notNull ( [[harridan]] , "Redirect config" ) ; return new RestAssuredConfig ( [[harridan]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 235 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 174 / 59 / 2 / 235:  24%|██▎       | 235/1000 [09:45<31:46,  2.49s/it][Succeeded / Failed / Skipped / Total] 174 / 59 / 2 / 235:  24%|██▎       | 236/1000 [09:46<31:38,  2.49s/it][Succeeded / Failed / Skipped / Total] 174 / 60 / 2 / 236:  24%|██▎       | 236/1000 [09:46<31:38,  2.49s/it][Succeeded / Failed / Skipped / Total] 174 / 60 / 2 / 236:  24%|██▎       | 237/1000 [09:46<31:29,  2.48s/it][Succeeded / Failed / Skipped / Total] 174 / 60 / 3 / 237:  24%|██▎       | 237/1000 [09:46<31:29,  2.48s/it][Succeeded / Failed / Skipped / Total] 174 / 60 / 3 / 237:  24%|██▍       | 238/1000 [09:48<31:23,  2.47s/it][Succeeded / Failed / Skipped / Total] 175 / 60 / 3 / 238:  24%|██▍       | 238/1000 [09:48<31:23,  2.47s/it][Succeeded / Failed / Skipped / Total] 175 / 60 / 3 / 238:  24%|██▍       | 239/1000 [09:49<31:16,  2.47s/it][Succeeded / Failed / Skipped / Total] 176 / 60 / 3 / 239:  24%|██▍       | 239/1000 [09:49<31:16,  2.47s/it][Succeeded / Failed / Skipped / Total] 176 / 60 / 3 / 239:  24%|██▍       | 240/1000 [09:56<31:28,  2.48s/it][Succeeded / Failed / Skipped / Total] 177 / 60 / 3 / 240:  24%|██▍       | 240/1000 [09:56<31:28,  2.48s/it]Constructs the NTLMAuth scheme . --> Get the AuthenticationScheme for the given userName and password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String [[workstation]] , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( [[workstation]] ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String [[maestra]] , String domain ) { final NTLMAuthScheme [[galt]] = new NTLMAuthScheme ( ) ; [[galt]] . setUserName ( userName ) ; [[galt]] . setPassword ( password ) ; [[galt]] . setWorkstation ( [[maestra]] ) ; [[galt]] . setDomain ( domain ) ; return [[galt]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 236 ---------------------------------------------
Add additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[dysart]] ( Filter filter , Filter ... additionalFilters ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 237 ---------------------------------------------
Create an instance of RestAssured mock --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 238 ---------------------------------------------
Print response . --> Auxiliary method for debugging . --> Socre: 1.0

[[[[Adv]]]]: public static String print ( ResponseOptions [[responseOptions]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[responseOptions]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[responseOptions]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[responseOptions]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[responseBodyToAppend]] ; if ( shouldPrettyPrint ) { [[responseBodyToAppend]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[responseOptions]] , responseBody ) ; } else { [[responseBodyToAppend]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[responseBodyToAppend]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[responseBodyToAppend]] ) ; } String [[response]] = builder . toString ( ) ; stream . println ( [[response]] ) ; return [[response]] ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String print ( ResponseOptions [[jaan]] , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( [[jaan]] . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = [[jaan]] . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = [[jaan]] . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[dsv]] ; if ( shouldPrettyPrint ) { [[dsv]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( [[jaan]] , responseBody ) ; } else { [[dsv]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[dsv]] ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( [[dsv]] ) ; } String [[fisticuffs]] = builder . toString ( ) ; stream . println ( [[fisticuffs]] ) ; return [[fisticuffs]] ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 239 ---------------------------------------------
Returns the default object type . --> Returns a new instance of ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[counterpoint]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[counterpoint]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Get an RestAssured mock config . --> Returns an RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[nihilists]] ( LogConfig logConfig ) { notNull ( [[nihilists]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[nihilists]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 60 / 3 / 241:  24%|██▍       | 241/1000 [09:56<31:18,  2.47s/it][Succeeded / Failed / Skipped / Total] 178 / 60 / 3 / 241:  24%|██▍       | 242/1000 [09:57<31:11,  2.47s/it][Succeeded / Failed / Skipped / Total] 179 / 60 / 3 / 242:  24%|██▍       | 242/1000 [09:57<31:11,  2.47s/it][Succeeded / Failed / Skipped / Total] 180 / 60 / 3 / 243:  24%|██▍       | 243/1000 [09:59<31:06,  2.47s/it][Succeeded / Failed / Skipped / Total] 180 / 60 / 3 / 243:  24%|██▍       | 244/1000 [10:00<30:59,  2.46s/it][Succeeded / Failed / Skipped / Total] 181 / 60 / 3 / 244:  24%|██▍       | 244/1000 [10:00<30:59,  2.46s/it][Succeeded / Failed / Skipped / Total] 182 / 60 / 3 / 245:  24%|██▍       | 245/1000 [10:04<31:03,  2.47s/it][Succeeded / Failed / Skipped / Total] 182 / 60 / 3 / 245:  25%|██▍       | 246/1000 [10:05<30:57,  2.46s/it][Succeeded / Failed / Skipped / Total] 183 / 60 / 3 / 246:  25%|██▍       | 246/1000 [10:05<30:57,  2.46s/it][Succeeded / Failed / Skipped / Total] 184 / 60 / 3 / 247:  25%|██▍       | 247/1000 [10:06<30:48,  2.46s/it][Succeeded / Failed / Skipped / Total] 184 / 60 / 3 / 247:  25%|██▍       | 248/1000 [10:06<30:39,  2.45s/it][Succeeded / Failed / Skipped / Total] 185 / 60 / 3 / 248:  25%|██▍       | 248/1000 [10:06<30:39,  2.45s/it]Gets the mock config . --> Returns an empty RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[apex]] ( JsonConfig jsonConfig ) { notNull ( [[apex]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[apex]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 242 ---------------------------------------------
Returns the basic user scheme . --> Get the AuthenticationScheme for the user --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[aforementioned]] ( String userName , String password ) { final BasicAuthScheme [[anaheim]] = new BasicAuthScheme ( ) ; [[anaheim]] . setUserName ( userName ) ; [[anaheim]] . setPassword ( password ) ; return [[anaheim]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 243 ---------------------------------------------
Gets the Jackson config object . --> This method is used to create the ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[ahhhhh]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[ahhhhh]] , johnzonObjectMapperFactory , "[[Mair]]" == "[[Mair]]" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 244 ---------------------------------------------
Appends the charset to the default charset . --> Create a copy of this config . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[bom]] ( String [[ralston]] ) { return new EncoderConfig ( defaultContentCharset , [[ralston]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 245 ---------------------------------------------
Gets the mock paths config . --> Get a copy of this repository --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig [[sessionConfig]] ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[therewith]] ( SessionConfig [[shorter]] ) { notNull ( [[therewith]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[therewith]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 246 ---------------------------------------------
Create an instance from an xml config . --> Create an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[xmlConfig]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig [[mehdi]] ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
Gets the updated config for the given header . --> Returns an instance of RestAssuredMock method . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[banked]] ( HeaderConfig headerConfig ) { notNull ( [[banked]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[banked]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 248 ---------------------------------------------
Returns a copy of the given async config . --> Gets either abattoir configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[abattoir]] ( AsyncConfig asyncConfig ) { notNull ( [[abattoir]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[abattoir]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 186 / 60 / 3 / 249:  25%|██▍       | 249/1000 [10:09<30:37,  2.45s/it][Succeeded / Failed / Skipped / Total] 186 / 60 / 3 / 249:  25%|██▌       | 250/1000 [10:14<30:42,  2.46s/it][Succeeded / Failed / Skipped / Total] 187 / 60 / 3 / 250:  25%|██▌       | 250/1000 [10:14<30:42,  2.46s/it][Succeeded / Failed / Skipped / Total] 188 / 60 / 3 / 251:  25%|██▌       | 251/1000 [10:16<30:38,  2.46s/it][Succeeded / Failed / Skipped / Total] 188 / 60 / 3 / 251:  25%|██▌       | 252/1000 [10:19<30:37,  2.46s/it][Succeeded / Failed / Skipped / Total] 189 / 60 / 3 / 252:  25%|██▌       | 252/1000 [10:19<30:37,  2.46s/it][Succeeded / Failed / Skipped / Total] 190 / 60 / 3 / 253:  25%|██▌       | 253/1000 [10:20<30:33,  2.45s/it][Succeeded / Failed / Skipped / Total] 190 / 60 / 3 / 253:  25%|██▌       | 254/1000 [10:24<30:35,  2.46s/it][Succeeded / Failed / Skipped / Total] 191 / 60 / 3 / 254:  25%|██▌       | 254/1000 [10:24<30:35,  2.46s/it][Succeeded / Failed / Skipped / Total] 192 / 60 / 3 / 255:  26%|██▌       | 255/1000 [10:26<30:29,  2.46s/it][Succeeded / Failed / Skipped / Total] 192 / 60 / 3 / 255:  26%|██▌       | 256/1000 [10:28<30:26,  2.46s/it]Get the encoder config . --> Returns an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aces]] ( EncoderConfig encoderConfig ) { notNull ( [[aces]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[aces]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 250 ---------------------------------------------
Get a RestAssuredMock config from the given matcher config . --> Get an instance of RestAssuredMock . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[matcherConfig]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[elevators]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 251 ---------------------------------------------
Declare a new XmlPathConfig . --> Declare a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > [[alexandr]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[alexandr]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 252 ---------------------------------------------
Returns a RestAssuredMock config . --> Create a RestAssuredMock mechanism . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[coons]] ( MultiPartConfig [[camorra]] ) { notNull ( [[coons]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[coons]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 253 ---------------------------------------------
Makes sure that allHostnames are enabled . --> Creates a keyAuthSettings --> Socre: 1.0

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[pixie]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
Returns a RestAssuredMock config for the given MockAddress config . --> Get a mock paths . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bonner]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[bonner]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[bonner]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 255 ---------------------------------------------
Returns an RestAssuredMock config . --> Returns an instance of RestAssuredMock --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[estonia]] ( MockMvcParamConfig paramConfig ) { notNull ( [[estonia]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[estonia]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 256 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 193 / 60 / 3 / 256:  26%|██▌       | 256/1000 [10:28<30:26,  2.46s/it][Succeeded / Failed / Skipped / Total] 194 / 60 / 3 / 257:  26%|██▌       | 257/1000 [10:41<30:54,  2.50s/it][Succeeded / Failed / Skipped / Total] 194 / 60 / 3 / 257:  26%|██▌       | 258/1000 [10:41<30:45,  2.49s/it][Succeeded / Failed / Skipped / Total] 195 / 60 / 3 / 258:  26%|██▌       | 258/1000 [10:41<30:45,  2.49s/it][Succeeded / Failed / Skipped / Total] 195 / 60 / 3 / 258:  26%|██▌       | 259/1000 [10:46<30:50,  2.50s/it][Succeeded / Failed / Skipped / Total] 196 / 60 / 3 / 259:  26%|██▌       | 259/1000 [10:46<30:50,  2.50s/it][Succeeded / Failed / Skipped / Total] 196 / 60 / 3 / 259:  26%|██▌       | 260/1000 [10:47<30:43,  2.49s/it][Succeeded / Failed / Skipped / Total] 197 / 60 / 3 / 260:  26%|██▌       | 260/1000 [10:47<30:43,  2.49s/it][Succeeded / Failed / Skipped / Total] 197 / 60 / 3 / 260:  26%|██▌       | 261/1000 [10:47<30:34,  2.48s/it][Succeeded / Failed / Skipped / Total] 198 / 60 / 3 / 261:  26%|██▌       | 261/1000 [10:47<30:34,  2.48s/it][Succeeded / Failed / Skipped / Total] 198 / 60 / 3 / 261:  26%|██▌       | 262/1000 [10:51<30:34,  2.49s/it][Succeeded / Failed / Skipped / Total] 199 / 60 / 3 / 262:  26%|██▌       | 262/1000 [10:51<30:34,  2.49s/it][Succeeded / Failed / Skipped / Total] 199 / 61 / 3 / 263:  26%|██▋       | 263/1000 [10:51<30:25,  2.48s/it][Succeeded / Failed / Skipped / Total] 199 / 61 / 3 / 263:  26%|██▋       | 264/1000 [10:53<30:21,  2.47s/it]Replies the declared namespace . --> XmlPathConfig for scythians --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[scythians]] ( String prefix , String [[cristi]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[cristi]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[cristi]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the control name . --> Set a footrot --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . [[isControlNameExplicit]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[footrot]] ( String [[rashid]] ) { Validate . notEmpty ( [[footrot]] , "Control name cannot be empty" ) ; this . controlName = [[footrot]] ; this . [[bonner]] = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 258 ---------------------------------------------
Adds basic authentication . --> Create a new basic request --> Socre: 1.0

[[[[Adv]]]]: public void basic ( String host , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void basic ( String host , int [[betsey]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[betsey]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 259 ---------------------------------------------
Creates a NTCredentials . --> Creates a NTCredentials --> Socre: 1.0

[[[[Adv]]]]: public void ntlm ( String [[host]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[bolen]] , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[bolen]] , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 260 ---------------------------------------------
Resets the internal state . --> Clears the axl request --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[axl]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 261 ---------------------------------------------
Set response header . --> Sets response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[attaining]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 262 ---------------------------------------------
Set a header value . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[advisedly]] ( String [[personalized]] , String value ) { Validate . notEmpty ( [[personalized]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 263 ---------------------------------------------
Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[busty]] ( Map < ? , ? > [[cascades]] ) { this . [[dennison]] . clear ( ) ; if ( [[cascades]] == null ) return ; for ( Object key : [[cascades]] . keySet ( ) ) { Object val = [[cascades]] . get ( key ) ; if ( val == null ) continue ; this . [[dennison]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 264 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 200 / 61 / 3 / 264:  26%|██▋       | 264/1000 [10:53<30:21,  2.47s/it][Succeeded / Failed / Skipped / Total] 200 / 62 / 3 / 265:  26%|██▋       | 265/1000 [11:04<30:42,  2.51s/it][Succeeded / Failed / Skipped / Total] 200 / 62 / 3 / 265:  27%|██▋       | 266/1000 [11:09<30:46,  2.52s/it][Succeeded / Failed / Skipped / Total] 200 / 63 / 3 / 266:  27%|██▋       | 266/1000 [11:09<30:46,  2.52s/it][Succeeded / Failed / Skipped / Total] 200 / 63 / 3 / 266:  27%|██▋       | 267/1000 [11:13<30:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 200 / 64 / 3 / 267:  27%|██▋       | 267/1000 [11:13<30:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 200 / 64 / 3 / 267:  27%|██▋       | 268/1000 [11:13<30:40,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 64 / 3 / 268:  27%|██▋       | 268/1000 [11:13<30:40,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 64 / 3 / 268:  27%|██▋       | 269/1000 [11:14<30:33,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 65 / 3 / 269:  27%|██▋       | 269/1000 [11:14<30:33,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 65 / 3 / 269:  27%|██▋       | 270/1000 [11:16<30:29,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 66 / 3 / 270:  27%|██▋       | 270/1000 [11:16<30:29,  2.51s/it][Succeeded / Failed / Skipped / Total] 201 / 66 / 3 / 270:  27%|██▋       | 271/1000 [11:23<30:38,  2.52s/it][Succeeded / Failed / Skipped / Total] 202 / 66 / 3 / 271:  27%|██▋       | 271/1000 [11:23<30:38,  2.52s/it][Succeeded / Failed / Skipped / Total] 202 / 66 / 3 / 271:  27%|██▋       | 272/1000 [11:35<31:00,  2.56s/it][Succeeded / Failed / Skipped / Total] 202 / 67 / 3 / 272:  27%|██▋       | 272/1000 [11:35<31:00,  2.56s/it][Succeeded / Failed / Skipped / Total] 202 / 67 / 3 / 272:  27%|██▋       | 273/1000 [11:37<30:57,  2.55s/it]Sets the proxy for the given host and port . --> Provide a new HttpHost --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[belike]] ( String [[convents]] , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[convents]] , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 265 ---------------------------------------------
Create a new Headers object with additional headers . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[birdcage]] ( Header header , Header ... [[ganda]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[ganda]] != null ) { Collections . addAll ( headerList , [[ganda]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
Build the response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[cudgel]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Matches the given comment matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[harrods]] ( Matcher < ? super String > [[spray]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[spray]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a selected expiry date matcher . --> Get DetailedMatcher --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[bucharest]] ( Matcher < ? super Date > [[brick]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[brick]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Returns a matcher that matches the given value matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[hanim]] ( Matcher < ? super String > [[raskin]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[raskin]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Matches a domainMatcher that matches the supplied matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[squallor]] ( Matcher < ? super String > [[vendetta]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[vendetta]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Request a request . --> Convenience method for marigolds --> Socre: 1.0

[[[[Adv]]]]: public Object request ( String method , boolean [[hasBody]] , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[hasBody]] , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean [[marigolds]] , Closure [[aitken]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , [[marigolds]] , [[aitken]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 272 ---------------------------------------------
Returns a Matcher that matches the given path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[paraphrase]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[paraphrase]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 203 / 67 / 3 / 273:  27%|██▋       | 273/1000 [11:37<30:57,  2.55s/it][Succeeded / Failed / Skipped / Total] 203 / 67 / 3 / 273:  27%|██▋       | 274/1000 [11:37<30:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 203 / 68 / 3 / 274:  27%|██▋       | 274/1000 [11:37<30:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 203 / 68 / 3 / 274:  28%|██▊       | 275/1000 [11:39<30:44,  2.54s/it][Succeeded / Failed / Skipped / Total] 203 / 69 / 3 / 275:  28%|██▊       | 275/1000 [11:39<30:44,  2.54s/it][Succeeded / Failed / Skipped / Total] 204 / 69 / 3 / 276:  28%|██▊       | 276/1000 [11:39<30:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 204 / 69 / 3 / 276:  28%|██▊       | 277/1000 [11:44<30:37,  2.54s/it][Succeeded / Failed / Skipped / Total] 205 / 69 / 3 / 277:  28%|██▊       | 277/1000 [11:44<30:37,  2.54s/it][Succeeded / Failed / Skipped / Total] 206 / 69 / 3 / 278:  28%|██▊       | 278/1000 [11:46<30:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 206 / 69 / 3 / 278:  28%|██▊       | 279/1000 [11:47<30:27,  2.53s/it][Succeeded / Failed / Skipped / Total] 207 / 69 / 3 / 279:  28%|██▊       | 279/1000 [11:47<30:27,  2.53s/it][Succeeded / Failed / Skipped / Total] 208 / 69 / 3 / 280:  28%|██▊       | 280/1000 [11:47<30:19,  2.53s/it][Succeeded / Failed / Skipped / Total] 208 / 69 / 3 / 280:  28%|██▊       | 281/1000 [11:50<30:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 209 / 69 / 3 / 281:  28%|██▊       | 281/1000 [11:50<30:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 210 / 69 / 3 / 282:  28%|██▊       | 282/1000 [11:52<30:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 210 / 69 / 3 / 282:  28%|██▊       | 283/1000 [11:53<30:08,  2.52s/it]Appends a ResponseSpecBuilder to the response . --> Set elevators --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[elevators]] ( String [[groupies]] , Matcher < String > [[destroying]] ) { spec . header ( [[groupies]] , [[destroying]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Gets a DetailedCookieMatcher that satisfies this securedMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[orangeade]] ( Matcher < ? super Boolean > [[focker]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[focker]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
DetailedCookieMatcher for the given maxAge . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[wilkie]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[wilkie]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Adds an error header . --> duvall --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[curfew]] ( String [[palais]] , String [[duvall]] ) { spec . header ( [[palais]] , [[duvall]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a matcher that is associated with this versionMatcher . --> DetailedCookieMatcher for a british enum --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[whaddya]] ( Matcher < ? super Integer > [[british]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[british]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Create a new JsonPathConfig . --> returns a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[ashtrays]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 279 ---------------------------------------------
Get the default parser type . --> Create a new JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[astrea]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[astrea]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a default stack trace . --> mishaps printStream --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[mishaps]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 281 ---------------------------------------------
Creates a new Proxy specification . --> Create a new ProxySpecification --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[sultan]] ) { return new ProxySpecification ( [[sultan]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 282 ---------------------------------------------
Expect cookie by cookie name . --> Setter for bathtubs --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[bathtubs]] ( String [[forceful]] , String expectedValue ) { spec . cookie ( [[forceful]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 283 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 69 / 3 / 283:  28%|██▊       | 283/1000 [11:53<30:08,  2.52s/it][Succeeded / Failed / Skipped / Total] 212 / 69 / 3 / 284:  28%|██▊       | 284/1000 [11:54<30:01,  2.52s/it][Succeeded / Failed / Skipped / Total] 212 / 69 / 3 / 284:  28%|██▊       | 285/1000 [11:56<29:57,  2.51s/it][Succeeded / Failed / Skipped / Total] 213 / 69 / 3 / 285:  28%|██▊       | 285/1000 [11:56<29:57,  2.51s/it][Succeeded / Failed / Skipped / Total] 214 / 69 / 3 / 286:  29%|██▊       | 286/1000 [11:59<29:55,  2.52s/it][Succeeded / Failed / Skipped / Total] 214 / 69 / 3 / 286:  29%|██▊       | 287/1000 [12:03<29:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 215 / 69 / 3 / 287:  29%|██▊       | 287/1000 [12:03<29:56,  2.52s/it][Succeeded / Failed / Skipped / Total] 216 / 69 / 3 / 288:  29%|██▉       | 288/1000 [12:03<29:47,  2.51s/it][Succeeded / Failed / Skipped / Total] 216 / 69 / 3 / 288:  29%|██▉       | 289/1000 [12:08<29:51,  2.52s/it][Succeeded / Failed / Skipped / Total] 217 / 69 / 3 / 289:  29%|██▉       | 289/1000 [12:08<29:51,  2.52s/it][Succeeded / Failed / Skipped / Total] 218 / 69 / 3 / 290:  29%|██▉       | 290/1000 [12:09<29:44,  2.51s/it][Succeeded / Failed / Skipped / Total] 218 / 69 / 3 / 290:  29%|██▉       | 291/1000 [12:14<29:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 219 / 69 / 3 / 291:  29%|██▉       | 291/1000 [12:14<29:48,  2.52s/it][Succeeded / Failed / Skipped / Total] 220 / 69 / 3 / 292:  29%|██▉       | 292/1000 [12:16<29:45,  2.52s/it][Succeeded / Failed / Skipped / Total] 220 / 69 / 3 / 292:  29%|██▉       | 293/1000 [12:16<29:36,  2.51s/it]Returns a list of httpOnly by matcher . --> Detailedsecurity for a peckham --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[peckham]] ( Matcher < ? super Boolean > [[underway]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[underway]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 284 ---------------------------------------------
Add a single attribute to the request builder . --> Sets the value of the named test . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String [[platypus]] , Object attributeValue ) { spec . attribute ( [[platypus]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Enables logging . --> Enables given keyholes . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail [[logDetail]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[logDetail]] , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail [[qatar]] ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , [[qatar]] , urlEncodeRequestUri , "[[Keyholes]]" == "[[Keyholes]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 286 ---------------------------------------------
Returns a new MultiPartConfig . --> Initialization of a MultiPartConfig --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[announcement]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[announcement]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Add a header value . --> Sets HTTP headers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String [[headerValue]] ) { spec . header ( headerName , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[banyon]] ( String headerName , String [[microorganisms]] ) { spec . header ( headerName , [[microorganisms]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Add additional parameters . --> Create a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[arai]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 289 ---------------------------------------------
Adds result handlers . --> Adds the next request to be executed once . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[endorsements]] ( ResultHandler [[impotent]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[impotent]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 290 ---------------------------------------------
HttpMultipart mode . --> HttpMultipartMode --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode [[stocked]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 291 ---------------------------------------------
Create a new HttpClientConfig instance . --> Mching HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpClientFactory]] ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( [[httpClientFactory]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig [[retching]] ( HttpClientFactory [[backfires]] ) { return new HttpClientConfig ( [[retching]] , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Returns the byte value of the given path . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[hooked]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 293 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 221 / 69 / 3 / 293:  29%|██▉       | 293/1000 [12:16<29:36,  2.51s/it][Succeeded / Failed / Skipped / Total] 221 / 70 / 3 / 294:  29%|██▉       | 294/1000 [12:25<29:49,  2.53s/it][Succeeded / Failed / Skipped / Total] 221 / 70 / 3 / 294:  30%|██▉       | 295/1000 [12:25<29:40,  2.53s/it][Succeeded / Failed / Skipped / Total] 222 / 70 / 3 / 295:  30%|██▉       | 295/1000 [12:25<29:40,  2.53s/it][Succeeded / Failed / Skipped / Total] 222 / 71 / 3 / 296:  30%|██▉       | 296/1000 [12:26<29:34,  2.52s/it][Succeeded / Failed / Skipped / Total] 222 / 71 / 3 / 296:  30%|██▉       | 297/1000 [12:27<29:28,  2.52s/it][Succeeded / Failed / Skipped / Total] 222 / 72 / 3 / 297:  30%|██▉       | 297/1000 [12:27<29:28,  2.52s/it][Succeeded / Failed / Skipped / Total] 223 / 72 / 3 / 298:  30%|██▉       | 298/1000 [12:29<29:25,  2.51s/it][Succeeded / Failed / Skipped / Total] 223 / 72 / 3 / 298:  30%|██▉       | 299/1000 [12:31<29:22,  2.51s/it][Succeeded / Failed / Skipped / Total] 224 / 72 / 3 / 299:  30%|██▉       | 299/1000 [12:31<29:22,  2.51s/it][Succeeded / Failed / Skipped / Total] 225 / 72 / 3 / 300:  30%|███       | 300/1000 [12:34<29:21,  2.52s/it][Succeeded / Failed / Skipped / Total] 225 / 72 / 3 / 300:  30%|███       | 301/1000 [12:35<29:15,  2.51s/it][Succeeded / Failed / Skipped / Total] 226 / 72 / 3 / 301:  30%|███       | 301/1000 [12:35<29:15,  2.51s/it][Succeeded / Failed / Skipped / Total] 227 / 72 / 3 / 302:  30%|███       | 302/1000 [12:37<29:10,  2.51s/it][Succeeded / Failed / Skipped / Total] 227 / 72 / 3 / 302:  30%|███       | 303/1000 [12:45<29:21,  2.53s/it][Succeeded / Failed / Skipped / Total] 228 / 72 / 3 / 303:  30%|███       | 303/1000 [12:45<29:21,  2.53s/it][Succeeded / Failed / Skipped / Total] 228 / 72 / 3 / 303:  30%|███       | 304/1000 [12:49<29:22,  2.53s/it]Get a value from a path --> Gets theAssertion --> Socre: 1.0

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[jsonAssertion]] . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion [[obstacles]] = createJsonAssertion ( path , params ) ; final Object [[voiceprint]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) [[obstacles]] . getResult ( [[voiceprint]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 294 ---------------------------------------------
Sets the parameter with the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Slowin]]" == "[[Slowin]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 295 ---------------------------------------------
Returns the integer value of the given string . --> Breereere ein --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[breached]] ( String [[neves]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 296 ---------------------------------------------
Returns a short . --> [[[FAILED]]]

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[packaged]] ( String [[reall]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 297 ---------------------------------------------
Add a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[controlName]] , String [[contentBody]] , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String [[bandages]] , String [[hoodoo]] , String mimeType ) { spec . multiPart ( [[bandages]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 298 ---------------------------------------------
Get a property value as a float . --> Returns colombiana for delusion --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[colombiana]] ( String [[delusion]] ) { final Object value = get ( [[delusion]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 299 ---------------------------------------------
Gets the long . --> region > himura --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[himura]] ( String [[gangnam]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Sets the value of the spec . --> Set spec spec body --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object object , ObjectMapper [[satterfield]] ) { spec . body ( object , [[satterfield]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 301 ---------------------------------------------
Returns an object representing the type of object . --> Returns the extracur getObject for the given path --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[extracurricular]] > [[extracurricular]] getObject ( String path , Class < [[extracurricular]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 302 ---------------------------------------------
Get a double . --> Convert dunkin to dunkin --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[buttin]] ( String [[dunkin]] ) { final Object [[minger]] = get ( [[dunkin]] ) ; if ( [[minger]] instanceof Double ) { return ( Double ) [[minger]] ; } return ObjectConverter . convertObjectTo ( [[minger]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 303 ---------------------------------------------
Create a request parameter config for Update strategy . --> Generates a new Mock falls - config --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[bubblehead]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 304 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 73 / 3 / 304:  30%|███       | 304/1000 [12:49<29:22,  2.53s/it][Succeeded / Failed / Skipped / Total] 228 / 73 / 3 / 304:  30%|███       | 305/1000 [12:52<29:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 229 / 73 / 3 / 305:  30%|███       | 305/1000 [12:52<29:20,  2.53s/it][Succeeded / Failed / Skipped / Total] 229 / 73 / 3 / 305:  31%|███       | 306/1000 [12:55<29:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 230 / 73 / 3 / 306:  31%|███       | 306/1000 [12:55<29:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 230 / 73 / 3 / 306:  31%|███       | 307/1000 [12:57<29:15,  2.53s/it][Succeeded / Failed / Skipped / Total] 231 / 73 / 3 / 307:  31%|███       | 307/1000 [12:57<29:15,  2.53s/it][Succeeded / Failed / Skipped / Total] 231 / 73 / 3 / 307:  31%|███       | 308/1000 [12:57<29:07,  2.53s/it][Succeeded / Failed / Skipped / Total] 232 / 73 / 3 / 308:  31%|███       | 308/1000 [12:57<29:07,  2.53s/it][Succeeded / Failed / Skipped / Total] 232 / 73 / 3 / 308:  31%|███       | 309/1000 [13:07<29:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 233 / 73 / 3 / 309:  31%|███       | 309/1000 [13:07<29:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 233 / 73 / 3 / 309:  31%|███       | 310/1000 [13:08<29:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 73 / 3 / 310:  31%|███       | 310/1000 [13:08<29:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 73 / 3 / 310:  31%|███       | 311/1000 [13:10<29:11,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 74 / 3 / 311:  31%|███       | 311/1000 [13:10<29:11,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 74 / 3 / 311:  31%|███       | 312/1000 [13:11<29:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 75 / 3 / 312:  31%|███       | 312/1000 [13:11<29:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 234 / 75 / 3 / 312:  31%|███▏      | 313/1000 [13:12<28:59,  2.53s/it][Succeeded / Failed / Skipped / Total] 235 / 75 / 3 / 313:  31%|███▏      | 313/1000 [13:12<28:59,  2.53s/it][Succeeded / Failed / Skipped / Total] 235 / 75 / 3 / 313:  31%|███▏      | 314/1000 [13:23<29:16,  2.56s/it]Gets the map . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[banjos]] , V > Map < [[banjos]] , V > [[chess]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 305 ---------------------------------------------
Add cookie . --> Set an mehdi value --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[mehdi]] ( String [[economists]] , Object value , Object ... cookieNameValuePairs ) { spec . cookie ( [[economists]] , value , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Add a query parameter . --> Set houlihan --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[houlihan]] ( String [[canard]] , Collection < ? > [[chrystal]] ) { spec . param ( [[canard]] , [[chrystal]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Creates a Response filter for the given matcher . --> log response to if found --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( [[stream]] , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[blessed]] , Matcher < Integer > [[burnable]] ) { return new ResponseLoggingFilter ( [[blessed]] , [[burnable]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 308 ---------------------------------------------
Add a parameter to the request . --> acknowledged call --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[acknowledged]] ( String [[cheerios]] , Object ... [[buddhists]] ) { spec . param ( [[cheerios]] , [[buddhists]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Clean up the key and source map . --> For croissants --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[croissants]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[theres]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[theres]] . key ) ; if ( set != null ) { set . remove ( [[theres]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[theres]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 310 ---------------------------------------------
Gets a list from the given path . --> Convert doddering to doddering --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[bordering]] ( String [[doddering]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[appleseed]] = get ( [[doddering]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[appleseed]] != null ) { for ( T t : [[appleseed]] ) { T [[auctions]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 311 ---------------------------------------------
Create a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[gobbles]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 312 ---------------------------------------------
Index the binding . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[malkovich]] ( ) { for ( Binding < ? > [[kress]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[kress]] . getKey ( ) . getTypeLiteral ( ) , [[kress]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Converts a Key to a BindingImpl --> tournaments --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[tournaments]] ( Key < T > key , Errors [[spliced]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 235 / 76 / 3 / 314:  31%|███▏      | 314/1000 [13:23<29:16,  2.56s/it][Succeeded / Failed / Skipped / Total] 235 / 77 / 3 / 315:  32%|███▏      | 315/1000 [13:23<29:08,  2.55s/it][Succeeded / Failed / Skipped / Total] 235 / 77 / 3 / 315:  32%|███▏      | 316/1000 [13:27<29:07,  2.56s/it][Succeeded / Failed / Skipped / Total] 236 / 77 / 3 / 316:  32%|███▏      | 316/1000 [13:27<29:07,  2.56s/it][Succeeded / Failed / Skipped / Total] 236 / 78 / 3 / 317:  32%|███▏      | 317/1000 [13:31<29:08,  2.56s/it][Succeeded / Failed / Skipped / Total] 236 / 78 / 3 / 317:  32%|███▏      | 318/1000 [13:33<29:05,  2.56s/it][Succeeded / Failed / Skipped / Total] 237 / 78 / 3 / 318:  32%|███▏      | 318/1000 [13:33<29:05,  2.56s/it][Succeeded / Failed / Skipped / Total] 237 / 79 / 3 / 319:  32%|███▏      | 319/1000 [13:39<29:08,  2.57s/it][Succeeded / Failed / Skipped / Total] 237 / 79 / 3 / 319:  32%|███▏      | 320/1000 [13:41<29:04,  2.57s/it][Succeeded / Failed / Skipped / Total] 237 / 80 / 3 / 320:  32%|███▏      | 320/1000 [13:41<29:04,  2.57s/it][Succeeded / Failed / Skipped / Total] 238 / 80 / 3 / 321:  32%|███▏      | 321/1000 [13:41<28:58,  2.56s/it][Succeeded / Failed / Skipped / Total] 238 / 80 / 3 / 321:  32%|███▏      | 322/1000 [13:43<28:53,  2.56s/it]Create a new cookies . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie cookie , Cookie ... [[faa]] ) { AssertParameter . notNull ( cookie , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( cookie ) ; Collections . addAll ( cookieList , [[faa]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 315 ---------------------------------------------
Returns the dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[burkett]] ( BindingImpl < ? > [[ceasar]] ) { if ( [[ceasar]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[ceasar]] ) . getInternalDependencies ( ) ; } else if ( [[ceasar]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[ceasar]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 316 ---------------------------------------------
Binds the injector . --> bind notifications --> Socre: 1.0

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl [[brick]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory [[buford]] = new InjectorFactory ( [[brick]] ) ; [[brick]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[brick]] , key , SourceProvider . UNKNOWN_SOURCE , [[buford]] , Scoping . UNSCOPED , [[buford]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 317 ---------------------------------------------
Create an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[banyon]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Determines whether a method is overrides . --> Bloomberg method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[bloomberg]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 319 ---------------------------------------------
Returns the provider type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[inward]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
bind logger . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[cheju]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[cheju]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[cheju]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 321 ---------------------------------------------
Initializes the delegate . --> Initialize delegate --> Socre: 1.0

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > [[boldness]] ) { checkState ( this . [[sabot]] == null , "delegate already initialized" ) ; this . [[sabot]] = checkNotNull ( [[boldness]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 322 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 81 / 3 / 322:  32%|███▏      | 322/1000 [13:43<28:53,  2.56s/it][Succeeded / Failed / Skipped / Total] 239 / 81 / 3 / 323:  32%|███▏      | 323/1000 [13:47<28:55,  2.56s/it][Succeeded / Failed / Skipped / Total] 239 / 81 / 3 / 323:  32%|███▏      | 324/1000 [13:49<28:50,  2.56s/it][Succeeded / Failed / Skipped / Total] 240 / 81 / 3 / 324:  32%|███▏      | 324/1000 [13:49<28:50,  2.56s/it][Succeeded / Failed / Skipped / Total] 241 / 81 / 3 / 325:  32%|███▎      | 325/1000 [13:52<28:49,  2.56s/it][Succeeded / Failed / Skipped / Total] 241 / 81 / 3 / 325:  33%|███▎      | 326/1000 [13:57<28:51,  2.57s/it][Succeeded / Failed / Skipped / Total] 242 / 81 / 3 / 326:  33%|███▎      | 326/1000 [13:57<28:51,  2.57s/it][Succeeded / Failed / Skipped / Total] 243 / 81 / 3 / 327:  33%|███▎      | 327/1000 [14:00<28:49,  2.57s/it][Succeeded / Failed / Skipped / Total] 243 / 81 / 3 / 327:  33%|███▎      | 328/1000 [14:00<28:41,  2.56s/it][Succeeded / Failed / Skipped / Total] 243 / 82 / 3 / 328:  33%|███▎      | 328/1000 [14:00<28:41,  2.56s/it][Succeeded / Failed / Skipped / Total] 244 / 82 / 3 / 329:  33%|███▎      | 329/1000 [14:01<28:35,  2.56s/it][Succeeded / Failed / Skipped / Total] 244 / 82 / 3 / 329:  33%|███▎      | 330/1000 [14:05<28:36,  2.56s/it]Remove a binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint [[ip]] ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[avni]] ( Binding < ? > [[asunder]] , InjectionPoint [[amity]] ) { failedJitBindings . add ( [[asunder]] . getKey ( ) ) ; jitBindings . remove ( [[asunder]] . getKey ( ) ) ; membersInjectorStore . remove ( [[asunder]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[asunder]] ) ; if ( [[amity]] != null ) { constructors . remove ( [[amity]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 323 ---------------------------------------------
Returns true if the given member is misplaced . --> Methode permettant d un spliced --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[minimise]] ( Member [[spliced]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[spliced]] , ( ( AnnotatedElement ) [[spliced]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 324 ---------------------------------------------
Prepares theBuilt inConverters . --> PrepareBuilt in Injector --> Socre: 1.0

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl [[entre]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 325 ---------------------------------------------
Resolve all types . --> Resolve all relations --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[circulars]] ) { TypeLiteral < ? > [ ] [[sleepwalkers]] = new TypeLiteral < ? > [ [[circulars]] . length ] ; for ( int t = 0 ; t < [[circulars]] . length ; t ++ ) { [[sleepwalkers]] [ t ] = resolve ( [[circulars]] [ t ] ) ; } return ImmutableList . copyOf ( [[sleepwalkers]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 326 ---------------------------------------------
Gets the canonical form for the given type literal . --> Liefert d ob ein --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[london]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[psychology]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[psychology]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 327 ---------------------------------------------
Returns true if the class has the same version of Cglib . --> dizzle --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[douse]] ( ClassLoader [[dizzle]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[dizzle]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 328 ---------------------------------------------
Request injection . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[lansky]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 329 ---------------------------------------------
Returns the class loader . --> Darked a given classloader --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[disembarked]] ( ClassLoader [[yasmina]] ) { return [[yasmina]] != null ? [[yasmina]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
[Succeeded / Failed / Skipped / Total] 245 / 82 / 3 / 330:  33%|███▎      | 330/1000 [14:05<28:36,  2.56s/it][Succeeded / Failed / Skipped / Total] 245 / 83 / 3 / 331:  33%|███▎      | 331/1000 [14:06<28:31,  2.56s/it][Succeeded / Failed / Skipped / Total] 245 / 83 / 3 / 331:  33%|███▎      | 332/1000 [14:08<28:26,  2.55s/it][Succeeded / Failed / Skipped / Total] 246 / 83 / 3 / 332:  33%|███▎      | 332/1000 [14:08<28:26,  2.55s/it][Succeeded / Failed / Skipped / Total] 247 / 83 / 3 / 333:  33%|███▎      | 333/1000 [14:08<28:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 247 / 83 / 3 / 333:  33%|███▎      | 334/1000 [14:14<28:24,  2.56s/it][Succeeded / Failed / Skipped / Total] 247 / 84 / 3 / 334:  33%|███▎      | 334/1000 [14:14<28:24,  2.56s/it][Succeeded / Failed / Skipped / Total] 248 / 84 / 3 / 335:  34%|███▎      | 335/1000 [14:15<28:18,  2.55s/it][Succeeded / Failed / Skipped / Total] 248 / 84 / 3 / 335:  34%|███▎      | 336/1000 [14:20<28:21,  2.56s/it][Succeeded / Failed / Skipped / Total] 249 / 84 / 3 / 336:  34%|███▎      | 336/1000 [14:20<28:21,  2.56s/it][Succeeded / Failed / Skipped / Total] 250 / 84 / 3 / 337:  34%|███▎      | 337/1000 [14:29<28:30,  2.58s/it][Succeeded / Failed / Skipped / Total] 250 / 84 / 3 / 337:  34%|███▍      | 338/1000 [14:36<28:36,  2.59s/it]--------------------------------------------- Result 330 ---------------------------------------------
Returns an array of all the parameters . --> get the cazzo method --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[cazzo]] ( InternalContext context , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[reminiscent]] = parameterInjectors . length ; Object [ ] [[sui]] = new Object [ [[reminiscent]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 331 ---------------------------------------------
Returns the annotation for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[legionary]] ( Key < ? > [[hypotenuse]] ) { return [[hypotenuse]] . getAnnotation ( ) == null ? [[hypotenuse]] : Key . get ( [[hypotenuse]] . getTypeLiteral ( ) , [[hypotenuse]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Returns a new instance of the class . --> Creates a new object --> Socre: 1.0

[[[[Adv]]]]: public T newInstance ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] [[bullitt]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[bullitt]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
Create a servlet request --> ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[bail]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 334 ---------------------------------------------
Generates an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[fingerprinted]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 335 ---------------------------------------------
Validates all pendingInjections . --> Checks if buddhists are valid --> Socre: 1.0

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[errors]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[buddhists]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[acknowledged]] : pendingInjections ) { try { [[acknowledged]] . validate ( [[buddhists]] ) ; } catch ( ErrorsException e ) { [[buddhists]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 336 ---------------------------------------------
Normalize path . --> normalize the tange --> Socre: 1.0

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder [[sb]] = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[tange]] ) { StringBuilder [[superbowl]] = new StringBuilder ( [[tange]] . length ( ) ) ; int queryStart = [[tange]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[tange]] . substring ( queryStart ) ; [[tange]] = [[tange]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 337 ---------------------------------------------
Returns the appropriate scope . --> This method is used by subclasses --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[creator]] , Object [[source]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > [[sooraj]] , Object [[bullitt]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[sooraj]] ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 338 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 251 / 84 / 3 / 338:  34%|███▍      | 338/1000 [14:36<28:36,  2.59s/it][Succeeded / Failed / Skipped / Total] 251 / 84 / 3 / 338:  34%|███▍      | 339/1000 [14:37<28:31,  2.59s/it][Succeeded / Failed / Skipped / Total] 252 / 84 / 3 / 339:  34%|███▍      | 339/1000 [14:37<28:31,  2.59s/it][Succeeded / Failed / Skipped / Total] 252 / 84 / 3 / 339:  34%|███▍      | 340/1000 [14:44<28:36,  2.60s/it][Succeeded / Failed / Skipped / Total] 253 / 84 / 3 / 340:  34%|███▍      | 340/1000 [14:44<28:36,  2.60s/it][Succeeded / Failed / Skipped / Total] 253 / 84 / 3 / 340:  34%|███▍      | 341/1000 [14:52<28:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 84 / 3 / 341:  34%|███▍      | 341/1000 [14:52<28:44,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 84 / 3 / 341:  34%|███▍      | 342/1000 [14:53<28:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 254 / 85 / 3 / 342:  34%|███▍      | 342/1000 [14:53<28:38,  2.61s/it][Succeeded / Failed / Skipped / Total] 254 / 85 / 3 / 342:  34%|███▍      | 343/1000 [14:55<28:34,  2.61s/it][Succeeded / Failed / Skipped / Total] 254 / 86 / 3 / 343:  34%|███▍      | 343/1000 [14:55<28:34,  2.61s/it][Succeeded / Failed / Skipped / Total] 254 / 86 / 3 / 343:  34%|███▍      | 344/1000 [15:00<28:37,  2.62s/it]Returns an instance of the given Scoping . --> Scoping methods --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors [[errors]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } [[errors]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[bounce]] ( Scoping scoping , InjectorImpl injector , Errors [[caprica]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scarfed]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scarfed]] != null ) { return forInstance ( [[scarfed]] . getScope ( ) ) ; } [[caprica]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 339 ---------------------------------------------
Returns true if the supplied annotationType is present in the Retention --> feedlot method --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention [[retention]] = [[annotationType]] . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[feedlot]] ( Class < ? extends Annotation > [[sonoma]] ) { Retention [[peeing]] = [[sonoma]] . getAnnotation ( Retention . class ) ; return [[peeing]] != null && [[peeing]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
Add the type binding . --> meissen the given binder --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[meissen]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 341 ---------------------------------------------
Initialize delegate . --> A null - safe muoi --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[london]] ( Provider < T > delegate ) { checkState ( this . [[muoi]] == null , "delegate already initialized" ) ; this . [[muoi]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[harolds]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Cleans up the dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[False]]" != "[[False]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean cleanup ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = "[[Bin]]" != "[[Bin]]" ; Set < Dependency < ? > > deps = getInternalDependencies ( binding ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 254 / 87 / 3 / 344:  34%|███▍      | 344/1000 [15:00<28:37,  2.62s/it][Succeeded / Failed / Skipped / Total] 254 / 87 / 3 / 344:  34%|███▍      | 345/1000 [15:02<28:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 255 / 87 / 3 / 345:  34%|███▍      | 345/1000 [15:02<28:33,  2.62s/it][Succeeded / Failed / Skipped / Total] 255 / 87 / 3 / 345:  35%|███▍      | 346/1000 [15:03<28:28,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 87 / 3 / 346:  35%|███▍      | 346/1000 [15:03<28:28,  2.61s/it][Succeeded / Failed / Skipped / Total] 256 / 87 / 3 / 346:  35%|███▍      | 347/1000 [15:04<28:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 87 / 3 / 347:  35%|███▍      | 347/1000 [15:04<28:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 87 / 3 / 347:  35%|███▍      | 348/1000 [15:08<28:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 88 / 3 / 348:  35%|███▍      | 348/1000 [15:08<28:22,  2.61s/it][Succeeded / Failed / Skipped / Total] 257 / 88 / 3 / 348:  35%|███▍      | 349/1000 [15:09<28:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 258 / 88 / 3 / 349:  35%|███▍      | 349/1000 [15:09<28:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 258 / 88 / 3 / 349:  35%|███▌      | 350/1000 [15:13<28:17,  2.61s/it]Determine whether the given member is publicly . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( member instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method [[method]] = ( Method ) member ; if ( ! Modifier . isPublic ( [[method]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = [[method]] . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[drapery]] ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[bonzo]] ; if ( member instanceof Constructor ) { [[bonzo]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method [[dumb]] = ( Method ) member ; if ( ! Modifier . isPublic ( [[dumb]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[bonzo]] = [[dumb]] . getParameterTypes ( ) ; } for ( Class < ? > type : [[bonzo]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 345 ---------------------------------------------
Returns the ConstructorInjector for the given constructor . --> Get the ConstructorInjector for an InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[agata]] ( InjectionPoint [[fiire]] , Errors [[baleful]] ) throws ErrorsException { return cache . get ( [[fiire]] , [[baleful]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 346 ---------------------------------------------
Get the construction instance . --> This method is called from construction context --> Socre: 1.0

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext context , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[astrea]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[astrea]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[astrea]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 347 ---------------------------------------------
Finds scope annotation . --> Gallardardo method --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { errors . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[gallardo]] ( Errors errors , Annotation [ ] [[pragmatic]] ) { Class < ? extends Annotation > [[xxx]] = null ; for ( Annotation annotation : [[pragmatic]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[xxx]] != null ) { errors . duplicateScopeAnnotations ( [[xxx]] , annotationType ) ; } else { [[xxx]] = annotationType ; } } } return [[xxx]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the key for a new ProviderMap . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[needa]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[needa]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[needa]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 349 ---------------------------------------------
Method to write replace operation --> Method called by writeReplace method --> Socre: 1.0

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[sourcesAsStrings]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[sourcesAsStrings]] . length ; i ++ ) { [[sourcesAsStrings]] [ i ] = Errors . convert ( [[sourcesAsStrings]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[sourcesAsStrings]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] [[platypus]] = sources . toArray ( ) ; for ( int i = 0 ; i < [[platypus]] . length ; i ++ ) { [[platypus]] [ i ] = Errors . convert ( [[platypus]] [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( [[platypus]] ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 88 / 3 / 350:  35%|███▌      | 350/1000 [15:13<28:17,  2.61s/it][Succeeded / Failed / Skipped / Total] 259 / 88 / 3 / 350:  35%|███▌      | 351/1000 [15:15<28:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 88 / 3 / 351:  35%|███▌      | 351/1000 [15:15<28:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 88 / 3 / 351:  35%|███▌      | 352/1000 [15:17<28:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 89 / 3 / 352:  35%|███▌      | 352/1000 [15:17<28:09,  2.61s/it][Succeeded / Failed / Skipped / Total] 260 / 89 / 3 / 352:  35%|███▌      | 353/1000 [15:35<28:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 261 / 89 / 3 / 353:  35%|███▌      | 353/1000 [15:35<28:34,  2.65s/it][Succeeded / Failed / Skipped / Total] 261 / 89 / 3 / 353:  35%|███▌      | 354/1000 [15:36<28:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 261 / 90 / 3 / 354:  35%|███▌      | 354/1000 [15:36<28:29,  2.65s/it][Succeeded / Failed / Skipped / Total] 261 / 90 / 3 / 354:  36%|███▌      | 355/1000 [15:36<28:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 261 / 90 / 4 / 355:  36%|███▌      | 355/1000 [15:36<28:22,  2.64s/it][Succeeded / Failed / Skipped / Total] 261 / 90 / 4 / 355:  36%|███▌      | 356/1000 [15:47<28:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 261 / 91 / 4 / 356:  36%|███▌      | 356/1000 [15:47<28:33,  2.66s/it][Succeeded / Failed / Skipped / Total] 261 / 91 / 4 / 356:  36%|███▌      | 357/1000 [15:48<28:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 262 / 91 / 4 / 357:  36%|███▌      | 357/1000 [15:48<28:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 262 / 91 / 4 / 357:  36%|███▌      | 358/1000 [15:52<28:27,  2.66s/it]Get the assistDataBy method . --> advisedly --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[advisedly]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 351 ---------------------------------------------
Returns the key of the given type . --> ong --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation [[found]] = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return [[found]] == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , [[found]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[ong]] ( TypeLiteral < ? > [[meteorology]] , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation [[diplomatically]] = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return [[diplomatically]] == null ? Key . get ( [[meteorology]] ) : Key . get ( [[meteorology]] , [[diplomatically]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 352 ---------------------------------------------
Creates a new Module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[fingerprinted]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Checks if the implementation is valid for the given jar . --> Unexploded method --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[unexploded]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[touquet]] ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 354 ---------------------------------------------
Returns true if the given class has a scope . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[crosby]] ( Class < ? extends Interceptor > [[hairdressing]] ) { for ( Annotation [[naval]] : [[hairdressing]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[naval]] . annotationType ( ) ) ) { return "True" == "True" ; } } return "[[Hairy]]" != "[[Hairy]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 355 ---------------------------------------------
Returns the implementation with the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
Creates a new real MapBinder . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[explanations]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[explanations]] = [[explanations]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[explanations]] , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[explanations]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 357 ---------------------------------------------
Create a new RealMultibinder . --> Create a RealMultibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[anzio]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( binder , key ) ; binder . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 262 / 92 / 4 / 358:  36%|███▌      | 358/1000 [15:52<28:27,  2.66s/it][Succeeded / Failed / Skipped / Total] 262 / 92 / 4 / 358:  36%|███▌      | 359/1000 [15:57<28:30,  2.67s/it][Succeeded / Failed / Skipped / Total] 262 / 93 / 4 / 359:  36%|███▌      | 359/1000 [15:57<28:30,  2.67s/it][Succeeded / Failed / Skipped / Total] 262 / 93 / 4 / 359:  36%|███▌      | 360/1000 [16:00<28:27,  2.67s/it][Succeeded / Failed / Skipped / Total] 262 / 94 / 4 / 360:  36%|███▌      | 360/1000 [16:00<28:27,  2.67s/it][Succeeded / Failed / Skipped / Total] 262 / 94 / 4 / 360:  36%|███▌      | 361/1000 [16:09<28:36,  2.69s/it][Succeeded / Failed / Skipped / Total] 262 / 95 / 4 / 361:  36%|███▌      | 361/1000 [16:09<28:36,  2.69s/it][Succeeded / Failed / Skipped / Total] 262 / 95 / 4 / 361:  36%|███▌      | 362/1000 [16:09<28:29,  2.68s/it][Succeeded / Failed / Skipped / Total] 263 / 95 / 4 / 362:  36%|███▌      | 362/1000 [16:09<28:29,  2.68s/it][Succeeded / Failed / Skipped / Total] 263 / 95 / 4 / 362:  36%|███▋      | 363/1000 [16:09<28:22,  2.67s/it][Succeeded / Failed / Skipped / Total] 263 / 96 / 4 / 363:  36%|███▋      | 363/1000 [16:09<28:22,  2.67s/it][Succeeded / Failed / Skipped / Total] 263 / 96 / 4 / 363:  36%|███▋      | 364/1000 [16:14<28:22,  2.68s/it][Succeeded / Failed / Skipped / Total] 263 / 97 / 4 / 364:  36%|███▋      | 364/1000 [16:14<28:22,  2.68s/it][Succeeded / Failed / Skipped / Total] 263 / 97 / 4 / 364:  36%|███▋      | 365/1000 [16:14<28:15,  2.67s/it][Succeeded / Failed / Skipped / Total] 264 / 97 / 4 / 365:  36%|███▋      | 365/1000 [16:14<28:15,  2.67s/it][Succeeded / Failed / Skipped / Total] 264 / 97 / 4 / 365:  37%|███▋      | 366/1000 [16:18<28:14,  2.67s/it]Returns the set of dependencies for a ctor point . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[bizu]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 359 ---------------------------------------------
Get the getBinding from a Method . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[happi]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 360 ---------------------------------------------
Returns the InjectionPoint associated with this node . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[monkeying]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 361 ---------------------------------------------
Find the next filter . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[kashmiris]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[kashmiris]] != null ) { return [[kashmiris]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 362 ---------------------------------------------
Returns a Module for the given module . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[auctions]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 363 ---------------------------------------------
Invokes the proxy method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[doors]] ( Object proxy , final Method [[sapna]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 364 ---------------------------------------------
Returns true if this class has at place . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[incubated]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Returns the dependencies for the constructor . --> terrarium method --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[terrarium]] ( ) { ImmutableSet . Builder < InjectionPoint > [[retriever]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[retriever]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 366 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 265 / 97 / 4 / 366:  37%|███▋      | 366/1000 [16:18<28:14,  2.67s/it][Succeeded / Failed / Skipped / Total] 265 / 97 / 4 / 366:  37%|███▋      | 367/1000 [16:23<28:16,  2.68s/it][Succeeded / Failed / Skipped / Total] 266 / 97 / 4 / 367:  37%|███▋      | 367/1000 [16:23<28:16,  2.68s/it][Succeeded / Failed / Skipped / Total] 266 / 97 / 4 / 367:  37%|███▋      | 368/1000 [16:25<28:12,  2.68s/it][Succeeded / Failed / Skipped / Total] 267 / 97 / 4 / 368:  37%|███▋      | 368/1000 [16:25<28:12,  2.68s/it][Succeeded / Failed / Skipped / Total] 267 / 97 / 4 / 368:  37%|███▋      | 369/1000 [16:33<28:18,  2.69s/it][Succeeded / Failed / Skipped / Total] 267 / 98 / 4 / 369:  37%|███▋      | 369/1000 [16:33<28:18,  2.69s/it][Succeeded / Failed / Skipped / Total] 267 / 98 / 4 / 369:  37%|███▋      | 370/1000 [16:37<28:18,  2.70s/it][Succeeded / Failed / Skipped / Total] 268 / 98 / 4 / 370:  37%|███▋      | 370/1000 [16:37<28:18,  2.70s/it][Succeeded / Failed / Skipped / Total] 268 / 98 / 4 / 370:  37%|███▋      | 371/1000 [16:41<28:17,  2.70s/it][Succeeded / Failed / Skipped / Total] 269 / 98 / 4 / 371:  37%|███▋      | 371/1000 [16:41<28:17,  2.70s/it][Succeeded / Failed / Skipped / Total] 269 / 98 / 4 / 371:  37%|███▋      | 372/1000 [16:44<28:15,  2.70s/it][Succeeded / Failed / Skipped / Total] 270 / 98 / 4 / 372:  37%|███▋      | 372/1000 [16:44<28:16,  2.70s/it][Succeeded / Failed / Skipped / Total] 270 / 98 / 4 / 372:  37%|███▋      | 373/1000 [16:47<28:13,  2.70s/it]Checks if the type literal is not a type identifier . --> looks for errors in yachts --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > [[typeLiteral]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[msg]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[typeLiteral]] ) . getMessages ( ) ) ; return [[msg]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[likes]] ( TypeLiteral < ? > [[yachts]] , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message [[nutso]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( [[yachts]] ) . getMessages ( ) ) ; return [[nutso]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "[[Segura]]" != "[[Segura]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the line of the given member . --> zar operation --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[zar]] ( Member [[congratulated]] ) { Preconditions . checkArgument ( type == [[congratulated]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[congratulated]] , [[congratulated]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[congratulated]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 368 ---------------------------------------------
Initialize this instance . --> A utility method to process peacekeeper --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[regurgitate]] ( Errors [[peacekeeper]] ) { injector . lookups = injector ; new LookupProcessor ( [[peacekeeper]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Transfer callable to the provided Callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[bonnet]] ( Callable < T > [[arrivals]] ) { return wrap ( [[arrivals]] , [[bonnet]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 370 ---------------------------------------------
Removes the dependencies of the dependency . --> Build the praxis set of the given Dependency --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[praxis]] ( Set < Dependency < ? > > [[buy]] ) { ImmutableSet . Builder < Dependency < ? > > [[overconfident]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[essences]] : [[buy]] ) { Class < ? > [[altruism]] = [[essences]] . getKey ( ) . getAnnotationType ( ) ; if ( [[altruism]] == null || ! [[altruism]] . equals ( Assisted . class ) ) { [[overconfident]] . add ( [[essences]] ) ; } } return [[overconfident]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 371 ---------------------------------------------
Wrap the given callable with the given seed map . --> Wrap an diarrhea with seedMap --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[arrondissement]] ( Callable < T > [[diarrhea]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[diarrhea]] , [[arrondissement]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 372 ---------------------------------------------
Returns true if the constructor has no parameters . --> Does the given constructor? --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[p]] = 0 ; List < Key < ? > > [[constructorKeys]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[params]] ) { Key < ? > [[paramKey]] = Annotations . getKey ( param , constructor , paramAnnotations [ [[p]] ++ ] , errors ) ; [[constructorKeys]] . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[based]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[burkett]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int [[submerged]] = 0 ; List < Key < ? > > [[hendon]] = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : [[burkett]] ) { Key < ? > [[doodles]] = Annotations . getKey ( param , constructor , paramAnnotations [ [[submerged]] ++ ] , errors ) ; [[hendon]] . add ( [[doodles]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 373 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 271 / 98 / 4 / 373:  37%|███▋      | 373/1000 [16:47<28:13,  2.70s/it][Succeeded / Failed / Skipped / Total] 271 / 98 / 4 / 373:  37%|███▋      | 374/1000 [16:51<28:12,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 98 / 4 / 374:  37%|███▋      | 374/1000 [16:51<28:12,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 98 / 4 / 374:  38%|███▊      | 375/1000 [16:52<28:08,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 99 / 4 / 375:  38%|███▊      | 375/1000 [16:52<28:08,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 99 / 4 / 375:  38%|███▊      | 376/1000 [16:55<28:04,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 100 / 4 / 376:  38%|███▊      | 376/1000 [16:55<28:04,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 100 / 4 / 376:  38%|███▊      | 377/1000 [16:59<28:04,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 101 / 4 / 377:  38%|███▊      | 377/1000 [16:59<28:04,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 101 / 4 / 377:  38%|███▊      | 378/1000 [17:02<28:01,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 102 / 4 / 378:  38%|███▊      | 378/1000 [17:02<28:01,  2.70s/it][Succeeded / Failed / Skipped / Total] 272 / 102 / 4 / 378:  38%|███▊      | 379/1000 [17:09<28:06,  2.72s/it]Validate and canonicalize the object . --> danced --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[danced]] ( Key < ? > [[balthazar]] , Object [[boulders]] ) { if ( [[boulders]] == null || [[boulders]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[balthazar]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[boulders]] ) ) { throw new IllegalArgumentException ( "Value[" + [[boulders]] + "] of type[" + [[boulders]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[balthazar]] + "]" ) ; } return [[boulders]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Returns the annotation strategy for the given annotation . --> Returns a praxis expression --> Socre: 1.0

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return [[strategyFor]] ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[praxis]] ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return [[praxis]] ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 375 ---------------------------------------------
Returns the annotation of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[foundAnnotation]] = method . getAnnotation ( annotationClass ) ; if ( [[foundAnnotation]] != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = [[foundAnnotation]] ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[capture]] ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[hamburg]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation [[sapna]] = method . getAnnotation ( annotationClass ) ; if ( [[sapna]] != null ) { if ( [[hamburg]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[hamburg]] = [[sapna]] ; } } return [[hamburg]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 376 ---------------------------------------------
Returns the name of the StackTrace source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[münster]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 377 ---------------------------------------------
Create a Key with the specified annotation strategy . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[firepower]] ( Class < T > [[phenomena]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[phenomena]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 378 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[ricard]] ) { checkNotNull ( [[ricard]] , "annotation" ) ; Class < ? extends Annotation > annotationType = [[ricard]] . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , [[ricard]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[ricard]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 272 / 103 / 4 / 379:  38%|███▊      | 379/1000 [17:09<28:06,  2.72s/it][Succeeded / Failed / Skipped / Total] 272 / 103 / 4 / 379:  38%|███▊      | 380/1000 [17:12<28:05,  2.72s/it][Succeeded / Failed / Skipped / Total] 273 / 103 / 4 / 380:  38%|███▊      | 380/1000 [17:12<28:05,  2.72s/it][Succeeded / Failed / Skipped / Total] 273 / 103 / 4 / 380:  38%|███▊      | 381/1000 [17:13<27:59,  2.71s/it][Succeeded / Failed / Skipped / Total] 274 / 103 / 4 / 381:  38%|███▊      | 381/1000 [17:13<27:59,  2.71s/it][Succeeded / Failed / Skipped / Total] 274 / 103 / 4 / 381:  38%|███▊      | 382/1000 [17:18<28:00,  2.72s/it][Succeeded / Failed / Skipped / Total] 275 / 103 / 4 / 382:  38%|███▊      | 382/1000 [17:18<28:00,  2.72s/it][Succeeded / Failed / Skipped / Total] 275 / 103 / 4 / 382:  38%|███▊      | 383/1000 [17:22<28:00,  2.72s/it][Succeeded / Failed / Skipped / Total] 276 / 103 / 4 / 383:  38%|███▊      | 383/1000 [17:22<28:00,  2.72s/it][Succeeded / Failed / Skipped / Total] 276 / 103 / 4 / 383:  38%|███▊      | 384/1000 [17:24<27:56,  2.72s/it][Succeeded / Failed / Skipped / Total] 277 / 103 / 4 / 384:  38%|███▊      | 384/1000 [17:24<27:56,  2.72s/it][Succeeded / Failed / Skipped / Total] 277 / 103 / 4 / 384:  38%|███▊      | 385/1000 [17:34<28:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 278 / 103 / 4 / 385:  38%|███▊      | 385/1000 [17:34<28:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 278 / 103 / 4 / 385:  39%|███▊      | 386/1000 [17:40<28:06,  2.75s/it][Succeeded / Failed / Skipped / Total] 279 / 103 / 4 / 386:  39%|███▊      | 386/1000 [17:40<28:06,  2.75s/it][Succeeded / Failed / Skipped / Total] 279 / 103 / 4 / 386:  39%|███▊      | 387/1000 [17:41<28:01,  2.74s/it]Returns the injectors for the given injectionPoints . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[blinky]] : injectionPoints ) { try { Errors errorsForMember = [[blinky]] . isOptional ( ) ? new Errors ( [[blinky]] ) : errors . withSource ( [[blinky]] ) ; SingleMemberInjector injector = [[blinky]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[blinky]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[blinky]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 380 ---------------------------------------------
Converts the given object to an object . --> Get the vermicelli --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[vermicelli]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[vermicelli]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 381 ---------------------------------------------
Create a message . --> return NULL if null --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String [[messageFormat]] , Object ... arguments ) { return [[create]] ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[hundredth]] ( String [[pati]] , Object ... arguments ) { return [[hundredth]] ( null , [[pati]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Determines whether the given class name is a parent or not . --> Coerces a class to a parent --> Socre: 1.0

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[coerce]] ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 383 ---------------------------------------------
The main class . --> The main method --> Socre: 1.0

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void main ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[bulldozers]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[bulldozers]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 384 ---------------------------------------------
Creates a new Message --> münster method --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... arguments ) { String [[message]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[münster]] ( Throwable [[available]] , List < Object > sources , String messageFormat , Object ... arguments ) { String [[damone]] = format ( messageFormat , arguments ) ; return new Message ( sources , [[damone]] , [[available]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 385 ---------------------------------------------
Adds a dependency to the source . --> purdue method --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[previous]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[purdue]] ( Dependency < ? > dependency , Object source ) { Dependency < ? > [[wichita]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , source ) ; return [[wichita]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a new Initializable instance . --> Get the number of items --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[aggressors]] ( final T [[afflicts]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[afflicts]] ; } @ Override public String toString ( ) { return String . valueOf ( [[afflicts]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 387 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 280 / 103 / 4 / 387:  39%|███▊      | 387/1000 [17:41<28:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 280 / 103 / 4 / 387:  39%|███▉      | 388/1000 [17:45<28:00,  2.75s/it][Succeeded / Failed / Skipped / Total] 281 / 103 / 4 / 388:  39%|███▉      | 388/1000 [17:45<28:00,  2.75s/it][Succeeded / Failed / Skipped / Total] 281 / 103 / 4 / 388:  39%|███▉      | 389/1000 [17:46<27:54,  2.74s/it][Succeeded / Failed / Skipped / Total] 282 / 103 / 4 / 389:  39%|███▉      | 389/1000 [17:46<27:54,  2.74s/it][Succeeded / Failed / Skipped / Total] 282 / 103 / 4 / 389:  39%|███▉      | 390/1000 [17:46<27:48,  2.73s/it][Succeeded / Failed / Skipped / Total] 282 / 103 / 5 / 390:  39%|███▉      | 390/1000 [17:46<27:48,  2.73s/it][Succeeded / Failed / Skipped / Total] 282 / 103 / 5 / 390:  39%|███▉      | 391/1000 [17:57<27:58,  2.76s/it][Succeeded / Failed / Skipped / Total] 282 / 104 / 5 / 391:  39%|███▉      | 391/1000 [17:57<27:58,  2.76s/it]Prune stacktrace . --> danzig method --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement [[element]] : stackTrace ) { String className = [[element]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( [[element]] ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[danzig]] ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[nela]] = Lists . newArrayList ( ) ; for ( StackTraceElement [[bullit]] : stackTrace ) { String className = [[bullit]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[nela]] . add ( [[bullit]] ) ; } } t . setStackTrace ( [[nela]] . toArray ( new StackTraceElement [ [[nela]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 388 ---------------------------------------------
Generate a new instance of the provider . --> Clientation of the provider --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[alteration]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 389 ---------------------------------------------
Return the object representing the named module class names . --> Given a list of comma separated values return a StackTraceElement --> Socre: 1.0

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[irate]] ( List < String > [[falkor]] ) { Preconditions . checkNotNull ( [[falkor]] , "The list of module class names cannot be null." ) ; for ( final String [[lhe]] : [[falkor]] ) { if ( ! shouldBeSkipped ( [[lhe]] ) ) { return new StackTraceElement ( [[lhe]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 390 ---------------------------------------------
Throw exception if t is unchecked . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Creates the intersection for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[alreadySeenListeners]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[alreadySeenListeners]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[alreadySeenListeners]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[bettie]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[ceasar]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[ceasar]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { [[ceasar]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 392 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 283 / 104 / 5 / 392:  39%|███▉      | 392/1000 [17:57<27:51,  2.75s/it][Succeeded / Failed / Skipped / Total] 283 / 104 / 5 / 392:  39%|███▉      | 393/1000 [18:10<28:03,  2.77s/it][Succeeded / Failed / Skipped / Total] 284 / 104 / 5 / 393:  39%|███▉      | 393/1000 [18:10<28:03,  2.77s/it][Succeeded / Failed / Skipped / Total] 284 / 104 / 5 / 393:  39%|███▉      | 394/1000 [18:12<28:00,  2.77s/it][Succeeded / Failed / Skipped / Total] 285 / 104 / 5 / 394:  39%|███▉      | 394/1000 [18:12<28:00,  2.77s/it][Succeeded / Failed / Skipped / Total] 285 / 104 / 5 / 394:  40%|███▉      | 395/1000 [18:12<27:53,  2.77s/it][Succeeded / Failed / Skipped / Total] 286 / 104 / 5 / 395:  40%|███▉      | 395/1000 [18:12<27:53,  2.77s/it][Succeeded / Failed / Skipped / Total] 286 / 104 / 5 / 395:  40%|███▉      | 396/1000 [18:13<27:47,  2.76s/it][Succeeded / Failed / Skipped / Total] 287 / 104 / 5 / 396:  40%|███▉      | 396/1000 [18:13<27:47,  2.76s/it][Succeeded / Failed / Skipped / Total] 287 / 104 / 5 / 396:  40%|███▉      | 397/1000 [18:14<27:43,  2.76s/it][Succeeded / Failed / Skipped / Total] 288 / 104 / 5 / 397:  40%|███▉      | 397/1000 [18:14<27:43,  2.76s/it][Succeeded / Failed / Skipped / Total] 288 / 104 / 5 / 397:  40%|███▉      | 398/1000 [18:18<27:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 289 / 104 / 5 / 398:  40%|███▉      | 398/1000 [18:18<27:41,  2.76s/it][Succeeded / Failed / Skipped / Total] 289 / 104 / 5 / 398:  40%|███▉      | 399/1000 [18:18<27:34,  2.75s/it][Succeeded / Failed / Skipped / Total] 290 / 104 / 5 / 399:  40%|███▉      | 399/1000 [18:18<27:34,  2.75s/it][Succeeded / Failed / Skipped / Total] 290 / 104 / 5 / 399:  40%|████      | 400/1000 [18:21<27:31,  2.75s/it]Gets the processor . --> Convenience method to set the processor --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[type]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[processor]] : processorList ) { [[processor]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[ashwood]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[ashwood]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[explanation]] : processorList ) { [[explanation]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Register a processor --> Regist event --> Socre: 1.0

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[cmdCode]] , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[cmdCode]] , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode [[grist]] , RemotingProcessor < ? > [[caulk]] ) { if ( this . cmd2processors . containsKey ( [[grist]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[grist]] , cmd2processors . get ( [[grist]] ) . getClass ( ) . getName ( ) , [[caulk]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( [[grist]] , [[caulk]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 394 ---------------------------------------------
Adds a connection event processor . --> dioxin --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[processorList]] = this . processors . get ( [[type]] ) ; if ( [[processorList]] == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[processorList]] = this . processors . get ( [[type]] ) ; } [[processorList]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[dioxin]] ( ConnectionEventType [[bates]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > [[feliz]] = this . processors . get ( [[bates]] ) ; if ( [[feliz]] == null ) { this . processors . putIfAbsent ( [[bates]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; [[feliz]] = this . processors . get ( [[bates]] ) ; } [[feliz]] . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 395 ---------------------------------------------
Register a default processor . --> Dispatch a hemophiliac --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[fixture]] ( RemotingProcessor < ? > [[hemophiliac]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[hemophiliac]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 396 ---------------------------------------------
Gets the task result . --> Gets repeatsTaskResult --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[repeats]] > [[repeats]] getFutureTaskResult ( RunStateRecordedFutureTask < [[repeats]] > task , Logger logger ) { [[repeats]] [[bandages]] = null ; if ( null != task ) { try { [[bandages]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[bandages]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 397 ---------------------------------------------
Create a new message . --> Checks for all non - existent messages --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[knowwhat]] ( Throwable [[pediatrician]] , String [[fois]] , Object ... arguments ) { return [[knowwhat]] ( [[pediatrician]] , ImmutableList . of ( ) , [[fois]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 398 ---------------------------------------------
Tries to get the specified url . --> Returns theunder for the given url . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[asunder]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 399 ---------------------------------------------
Pushes state . --> despereaux method --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object [[source]] ) { doPushState ( [[key]] , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[despereaux]] ( com . google . inject . Key < ? > [[memos]] , Object [[barracudas]] ) { doPushState ( [[memos]] , [[barracudas]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 291 / 104 / 5 / 400:  40%|████      | 400/1000 [18:21<27:31,  2.75s/it][Succeeded / Failed / Skipped / Total] 291 / 104 / 5 / 400:  40%|████      | 401/1000 [18:23<27:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 292 / 104 / 5 / 401:  40%|████      | 401/1000 [18:23<27:27,  2.75s/it][Succeeded / Failed / Skipped / Total] 292 / 104 / 5 / 401:  40%|████      | 402/1000 [18:26<27:25,  2.75s/it][Succeeded / Failed / Skipped / Total] 293 / 104 / 5 / 402:  40%|████      | 402/1000 [18:26<27:25,  2.75s/it][Succeeded / Failed / Skipped / Total] 293 / 104 / 6 / 403:  40%|████      | 403/1000 [18:26<27:18,  2.75s/it][Succeeded / Failed / Skipped / Total] 293 / 104 / 6 / 403:  40%|████      | 404/1000 [18:28<27:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 294 / 104 / 6 / 404:  40%|████      | 404/1000 [18:28<27:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 295 / 104 / 6 / 405:  40%|████      | 405/1000 [18:28<27:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 295 / 104 / 6 / 405:  41%|████      | 406/1000 [18:30<27:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 296 / 104 / 6 / 406:  41%|████      | 406/1000 [18:30<27:04,  2.74s/it][Succeeded / Failed / Skipped / Total] 296 / 105 / 6 / 407:  41%|████      | 407/1000 [18:33<27:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 296 / 105 / 6 / 407:  41%|████      | 408/1000 [18:35<26:58,  2.73s/it]Decodes the protocol code . --> Reads a ProtocolCode . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[ammy]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 401 ---------------------------------------------
Scans the connection pool . --> alert any expired expired tasks . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[alerting]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Creates a new connection and passes it . --> Intercept a Url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[amused]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 403 ---------------------------------------------
Closes the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
Creates a new Connection getAnd instance . --> Get Connection getAnd instance --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url [[accountability]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 405 ---------------------------------------------
heal if it exists --> he Import a Url --> Socre: 1.0

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[dominicans]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 406 ---------------------------------------------
Create a new connection . --> Creates the connection . --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int [[expectNum]] = url . getConnNum ( ) ; if ( actualNum < [[expectNum]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , [[expectNum]] , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < [[expectNum]] ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int [[accommodating]] = url . getConnNum ( ) ; if ( actualNum < [[accommodating]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , [[accommodating]] , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < [[accommodating]] ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 407 ---------------------------------------------
Get the processor . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( cmdCode ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > [[crosswords]] = this . cmd2processors . get ( cmdCode ) ; if ( [[crosswords]] != null ) { return [[crosswords]] ; } return this . [[itasca]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 408 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 297 / 105 / 6 / 408:  41%|████      | 408/1000 [18:35<26:58,  2.73s/it][Succeeded / Failed / Skipped / Total] 298 / 105 / 6 / 409:  41%|████      | 409/1000 [18:35<26:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 298 / 105 / 6 / 409:  41%|████      | 410/1000 [18:37<26:47,  2.72s/it][Succeeded / Failed / Skipped / Total] 299 / 105 / 6 / 410:  41%|████      | 410/1000 [18:37<26:47,  2.72s/it][Succeeded / Failed / Skipped / Total] 300 / 105 / 6 / 411:  41%|████      | 411/1000 [18:43<26:49,  2.73s/it][Succeeded / Failed / Skipped / Total] 300 / 105 / 6 / 411:  41%|████      | 412/1000 [18:43<26:42,  2.73s/it][Succeeded / Failed / Skipped / Total] 301 / 105 / 6 / 412:  41%|████      | 412/1000 [18:43<26:42,  2.73s/it]Returns all connections associated with this connection . --> Return the connection pool associated with this connection pool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[iterator]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[iterator]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[madwoman]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > [[disciplinarian]] = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( [[disciplinarian]] . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = [[disciplinarian]] . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 409 ---------------------------------------------
Removes a Task from the pool . --> Removes the given pool . --> Socre: 1.0

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[connTasks]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . [[rutledge]] . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 410 ---------------------------------------------
Deregisters the server . --> This method will be called for corpses --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[corpses]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 411 ---------------------------------------------
Register user processor . --> Registers a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[loused]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[loused]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 412 ---------------------------------------------
Registers a UserProcessor . --> Registers a MultiInterestUserProcessor --> Socre: 1.0

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > [[pinches]] = userProcessors . putIfAbsent ( interest , processor ) ; if ( [[pinches]] != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 105 / 6 / 413:  41%|████▏     | 413/1000 [18:46<26:41,  2.73s/it][Succeeded / Failed / Skipped / Total] 302 / 105 / 6 / 413:  41%|████▏     | 414/1000 [18:46<26:35,  2.72s/it][Succeeded / Failed / Skipped / Total] 303 / 105 / 6 / 414:  41%|████▏     | 414/1000 [18:46<26:35,  2.72s/it][Succeeded / Failed / Skipped / Total] 304 / 105 / 6 / 415:  42%|████▏     | 415/1000 [18:47<26:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 304 / 105 / 6 / 415:  42%|████▏     | 416/1000 [18:51<26:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 305 / 105 / 6 / 416:  42%|████▏     | 416/1000 [18:51<26:28,  2.72s/it][Succeeded / Failed / Skipped / Total] 306 / 105 / 6 / 417:  42%|████▏     | 417/1000 [18:55<26:27,  2.72s/it][Succeeded / Failed / Skipped / Total] 306 / 105 / 6 / 417:  42%|████▏     | 418/1000 [19:01<26:29,  2.73s/it]Dispatches to user processor . --> Dispatches the trent . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte type = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand [[trent]] ) { final int id = [[trent]] . getId ( ) ; final byte type = [[trent]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 414 ---------------------------------------------
Pre - processes the heartTime context . --> Responsible for handling received containers . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[artificially]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 415 ---------------------------------------------
Deserialize the RpcRequestCommand . --> Get the antonioni message . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[deserializeRequestCommand]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command

[[[[Adv]]]]: private boolean [[antonioni]] ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 416 ---------------------------------------------
Send a log request . --> Debugging for debugging purposes . --> Socre: 1.0

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long [[currentTimestamp]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long [[invisible]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , [[invisible]] , cmd . getArriveTime ( ) , ( [[invisible]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 417 ---------------------------------------------
Invokes the remote address . --> Called when a remote address is received --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[hawke]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[hawke]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 418 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 307 / 105 / 6 / 418:  42%|████▏     | 418/1000 [19:01<26:29,  2.73s/it][Succeeded / Failed / Skipped / Total] 307 / 105 / 6 / 418:  42%|████▏     | 419/1000 [19:04<26:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 308 / 105 / 6 / 419:  42%|████▏     | 419/1000 [19:04<26:27,  2.73s/it][Succeeded / Failed / Skipped / Total] 308 / 105 / 7 / 420:  42%|████▏     | 420/1000 [19:04<26:21,  2.73s/it][Succeeded / Failed / Skipped / Total] 308 / 105 / 7 / 420:  42%|████▏     | 421/1000 [19:05<26:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 309 / 105 / 7 / 421:  42%|████▏     | 421/1000 [19:05<26:15,  2.72s/it][Succeeded / Failed / Skipped / Total] 310 / 105 / 7 / 422:  42%|████▏     | 422/1000 [19:06<26:09,  2.72s/it][Succeeded / Failed / Skipped / Total] 310 / 105 / 7 / 422:  42%|████▏     | 423/1000 [19:09<26:08,  2.72s/it][Succeeded / Failed / Skipped / Total] 311 / 105 / 7 / 423:  42%|████▏     | 423/1000 [19:09<26:08,  2.72s/it]Converts a BitSet to a byte . --> Returns the dispossessed value of the given BitSet . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[dispossessed]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 419 ---------------------------------------------
Attempt to start the log . --> F743 --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[channelCtx]] = ctx . getChannelContext ( ) ; Channel [[channel]] = [[channelCtx]] . channel ( ) ; if ( null != [[channel]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[channel]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[duller]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext [[outweighs]] = ctx . getChannelContext ( ) ; Channel [[assim]] = [[outweighs]] . channel ( ) ; if ( null != [[assim]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[assim]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 420 ---------------------------------------------
Stops the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 421 ---------------------------------------------
Close the remote address . --> biryani procedure --> Socre: 1.0

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[biryani]] ( ) { if ( closed . compareAndSet ( "[[Biomedical]]" != "[[Biomedical]]" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[anya]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , [[anya]] . isSuccess ( ) , [[anya]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 422 ---------------------------------------------
Converts value into a bit set . --> Returns a BitSet for the given value . --> Socre: 1.0

[[[[Adv]]]]: public static BitSet [[toBitSet]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set

[[[[Adv]]]]: public static BitSet [[absolue]] ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
Adds a task . --> Adds the specified url to the tasks . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[bedspreads]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 312 / 105 / 7 / 424:  42%|████▏     | 424/1000 [19:25<26:23,  2.75s/it][Succeeded / Failed / Skipped / Total] 312 / 105 / 7 / 424:  42%|████▎     | 425/1000 [19:25<26:17,  2.74s/it][Succeeded / Failed / Skipped / Total] 312 / 106 / 7 / 425:  42%|████▎     | 425/1000 [19:25<26:17,  2.74s/it][Succeeded / Failed / Skipped / Total] 312 / 106 / 7 / 425:  43%|████▎     | 426/1000 [19:28<26:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 313 / 106 / 7 / 426:  43%|████▎     | 426/1000 [19:28<26:14,  2.74s/it][Succeeded / Failed / Skipped / Total] 313 / 106 / 7 / 426:  43%|████▎     | 427/1000 [19:30<26:10,  2.74s/it]Filter connection details --> Filters the given connection . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[warmly]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[warmly]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[warmly]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 425 ---------------------------------------------
Sets a new attribute --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[handmaid]] ( String [[doors]] , Object value ) { return attributes . putIfAbsent ( [[doors]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 426 ---------------------------------------------
Monitors the connection pool to monitor . --> Finds all the connection pool in the given pool . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[aggressors]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 427 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 313 / 107 / 7 / 427:  43%|████▎     | 427/1000 [19:30<26:10,  2.74s/it][Succeeded / Failed / Skipped / Total] 313 / 107 / 7 / 427:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 7 / 428:  43%|████▎     | 428/1000 [19:33<26:08,  2.74s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 7 / 428:  43%|████▎     | 429/1000 [19:33<26:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 8 / 429:  43%|████▎     | 429/1000 [19:33<26:02,  2.74s/it][Succeeded / Failed / Skipped / Total] 314 / 107 / 8 / 429:  43%|████▎     | 430/1000 [19:37<26:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 315 / 107 / 8 / 430:  43%|████▎     | 430/1000 [19:37<26:01,  2.74s/it][Succeeded / Failed / Skipped / Total] 315 / 107 / 8 / 430:  43%|████▎     | 431/1000 [19:40<25:58,  2.74s/it][Succeeded / Failed / Skipped / Total] 316 / 107 / 8 / 431:  43%|████▎     | 431/1000 [19:40<25:58,  2.74s/it][Succeeded / Failed / Skipped / Total] 316 / 107 / 8 / 431:  43%|████▎     | 432/1000 [19:40<25:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 317 / 107 / 8 / 432:  43%|████▎     | 432/1000 [19:40<25:52,  2.73s/it][Succeeded / Failed / Skipped / Total] 317 / 107 / 8 / 432:  43%|████▎     | 433/1000 [19:43<25:50,  2.73s/it]Formats a message messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String formatMessages ( String [[heading]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[heading]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[dependencies]] = errorMessage . getSources ( ) ; for ( int i = [[dependencies]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[dependencies]] . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String [[chiltern]] , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( [[chiltern]] ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > [[cush]] = errorMessage . getSources ( ) ; for ( int i = [[cush]] . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = [[cush]] . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 428 ---------------------------------------------
Releases the connection to the last connection . --> Synchronously deletes a remote address . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[amplification]] ( Connection lastSelectConnect , List < Connection > [[hateful]] ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[hateful]] . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { [[hateful]] . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 429 ---------------------------------------------
Finds a list of conns . --> [[[SKIPPED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 430 ---------------------------------------------
Log info log --> Fails if the logger is enabled . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[afer]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
Process the task . --> Executes a given ExecutorService --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { [[defaultExecutor]] . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService [[gnarled]] ) throws Exception { ProcessTask [[holl]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[holl]] ) ; } else { [[gnarled]] . execute ( [[holl]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 432 ---------------------------------------------
Creates a leader command to be used in the server . --> Create a dispRequestCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object request , Connection conn , InvokeContext invokeContext , int [[rendez]] ) throws SerializationException { RpcRequestCommand [[dispossessed]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
[Succeeded / Failed / Skipped / Total] 318 / 107 / 8 / 433:  43%|████▎     | 433/1000 [19:43<25:50,  2.73s/it][Succeeded / Failed / Skipped / Total] 318 / 107 / 8 / 433:  43%|████▎     | 434/1000 [19:45<25:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 319 / 107 / 8 / 434:  43%|████▎     | 434/1000 [19:45<25:46,  2.73s/it][Succeeded / Failed / Skipped / Total] 320 / 107 / 8 / 435:  44%|████▎     | 435/1000 [19:45<25:40,  2.73s/it][Succeeded / Failed / Skipped / Total] 320 / 107 / 8 / 435:  44%|████▎     | 436/1000 [19:47<25:36,  2.72s/it][Succeeded / Failed / Skipped / Total] 321 / 107 / 8 / 436:  44%|████▎     | 436/1000 [19:47<25:36,  2.72s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 8 / 437:  44%|████▎     | 437/1000 [19:48<25:31,  2.72s/it][Succeeded / Failed / Skipped / Total] 322 / 107 / 8 / 437:  44%|████▍     | 438/1000 [19:53<25:31,  2.73s/it][Succeeded / Failed / Skipped / Total] 323 / 107 / 8 / 438:  44%|████▍     | 438/1000 [19:53<25:31,  2.73s/it]--------------------------------------------- Result 433 ---------------------------------------------
Get the value from the context . --> Returns the value associated with the specified key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] get ( String key , [[T]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[T]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[abbott]] > [[abbott]] get ( String key , [[abbott]] defaultIfNotFound ) { return this . context . get ( key ) != null ? ( [[abbott]] ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 434 ---------------------------------------------
Retrieve a boolean property . --> Get a boolean value --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[aboutyou]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[aboutyou]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 435 ---------------------------------------------
Gets the user processor . --> tire a timeline --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . userProcessors . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[tire]] ( String [[timeline]] ) { return StringUtils . isBlank ( [[timeline]] ) ? null : this . userProcessors . get ( [[timeline]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 436 ---------------------------------------------
Invokes the given invoke callback with the given timeout . --> Helper method for setting a connection to a server --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[timeout]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[timeout]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[timeout]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[f]] = conn . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[f]] = conn . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[megaton]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[jedediah]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[trilling]] ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[jedediah]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[prophecy]] = conn . removeInvokeFuture ( requestId ) ; if ( [[prophecy]] != null ) { [[prophecy]] . cancelTimeout ( ) ; [[prophecy]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[prophecy]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[prophecy]] = conn . removeInvokeFuture ( requestId ) ; if ( [[prophecy]] != null ) { [[prophecy]] . cancelTimeout ( ) ; [[prophecy]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; [[prophecy]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 437 ---------------------------------------------
convert Response ResponseCommand to ResponseObject --> azari method --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[azari]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) responseCommand ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 438 ---------------------------------------------
Returns the value of a property . --> Returns the farands for the given properties andean . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[farmhands]] ( String [[andean]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[andean]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 439 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 324 / 107 / 8 / 439:  44%|████▍     | 439/1000 [19:54<25:27,  2.72s/it][Succeeded / Failed / Skipped / Total] 324 / 107 / 8 / 439:  44%|████▍     | 440/1000 [19:57<25:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 325 / 107 / 8 / 440:  44%|████▍     | 440/1000 [19:57<25:23,  2.72s/it][Succeeded / Failed / Skipped / Total] 326 / 107 / 8 / 441:  44%|████▍     | 441/1000 [19:57<25:17,  2.72s/it][Succeeded / Failed / Skipped / Total] 326 / 107 / 8 / 441:  44%|████▍     | 442/1000 [19:58<25:13,  2.71s/it][Succeeded / Failed / Skipped / Total] 327 / 107 / 8 / 442:  44%|████▍     | 442/1000 [19:58<25:13,  2.71s/it][Succeeded / Failed / Skipped / Total] 328 / 107 / 8 / 443:  44%|████▍     | 443/1000 [20:00<25:09,  2.71s/it][Succeeded / Failed / Skipped / Total] 328 / 107 / 8 / 443:  44%|████▍     | 444/1000 [20:11<25:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 107 / 8 / 444:  44%|████▍     | 444/1000 [20:11<25:16,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 107 / 8 / 444:  44%|████▍     | 445/1000 [20:14<25:14,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 108 / 8 / 445:  44%|████▍     | 445/1000 [20:14<25:14,  2.73s/it][Succeeded / Failed / Skipped / Total] 329 / 108 / 8 / 445:  45%|████▍     | 446/1000 [20:17<25:12,  2.73s/it]Create a server exception . --> Generates a RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[render]] = new RpcServerException ( formattedErrMsg ) ; [[render]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[render]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 440 ---------------------------------------------
Determines whether the request is a request timeout . --> Determine if the user has logged in . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[afflicts]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 441 ---------------------------------------------
Prints connection trace log information . --> Handle batt . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[batt]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 442 ---------------------------------------------
Returns the detail error message . --> Returns detailErr message . --> Socre: 1.0

[[[[Adv]]]]: private static String detailErrMsg ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String [[algeria]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[algeria]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[algeria]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 443 ---------------------------------------------
Converts the ResponseCommand to a Throwable . --> get deadheads --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[deadheads]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[admiral]] = resp . getResponseObject ( ) ; if ( [[admiral]] != null && [[admiral]] instanceof Throwable ) { return ( Throwable ) [[admiral]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 444 ---------------------------------------------
Parse the local address of the given channel . --> dioxin --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[dioxin]] ( final Channel [[fourier]] ) { if ( null == [[fourier]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[fourier]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parses the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[doux]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 330 / 108 / 8 / 446:  45%|████▍     | 446/1000 [20:17<25:12,  2.73s/it][Succeeded / Failed / Skipped / Total] 330 / 108 / 8 / 446:  45%|████▍     | 447/1000 [20:20<25:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 330 / 109 / 8 / 447:  45%|████▍     | 447/1000 [20:20<25:09,  2.73s/it][Succeeded / Failed / Skipped / Total] 330 / 109 / 8 / 447:  45%|████▍     | 448/1000 [20:20<25:03,  2.72s/it][Succeeded / Failed / Skipped / Total] 330 / 110 / 8 / 448:  45%|████▍     | 448/1000 [20:20<25:03,  2.72s/it][Succeeded / Failed / Skipped / Total] 330 / 110 / 8 / 448:  45%|████▍     | 449/1000 [20:20<24:58,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 110 / 8 / 449:  45%|████▍     | 449/1000 [20:20<24:58,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 110 / 8 / 449:  45%|████▌     | 450/1000 [20:22<24:54,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 111 / 8 / 450:  45%|████▌     | 450/1000 [20:22<24:54,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 111 / 8 / 450:  45%|████▌     | 451/1000 [20:24<24:50,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 112 / 8 / 451:  45%|████▌     | 451/1000 [20:24<24:50,  2.72s/it][Succeeded / Failed / Skipped / Total] 331 / 112 / 8 / 451:  45%|████▌     | 452/1000 [20:27<24:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 332 / 112 / 8 / 452:  45%|████▌     | 452/1000 [20:27<24:48,  2.72s/it][Succeeded / Failed / Skipped / Total] 332 / 112 / 8 / 452:  45%|████▌     | 453/1000 [20:29<24:44,  2.71s/it][Succeeded / Failed / Skipped / Total] 333 / 112 / 8 / 453:  45%|████▌     | 453/1000 [20:29<24:44,  2.71s/it][Succeeded / Failed / Skipped / Total] 333 / 112 / 8 / 453:  45%|████▌     | 454/1000 [20:29<24:38,  2.71s/it]Parse remote address . --> Reads impenetra --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[readin]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[impenetrable]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[impenetrable]] != null ) { return [[impenetrable]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parses a local IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[bunty]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[astaroth]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[astaroth]] != null ) { return [[astaroth]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parses remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[bunky]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Resolves the response object . --> Get Resource Url for a ResponseCommand --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[flunking]] ( ResponseCommand [[spinoza]] , String addr ) throws RemotingException { preProcess ( [[spinoza]] , addr ) ; if ( [[spinoza]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[spinoza]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[spinoza]] . getResponseStatus ( ) , addr , [[spinoza]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[spinoza]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[spinoza]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 450 ---------------------------------------------
Returns an event loop group for the given threads . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int [[elation]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[elation]] , threadFactory ) : new NioEventLoopGroup ( [[elation]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 451 ---------------------------------------------
Parse the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[doughy]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Return the port of the channel . --> Return - 1 --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[fuser]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress [[handcuff]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[handcuff]] != null ) { return [[handcuff]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Gets the connection . --> Marks the current snapshot . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[muse]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 454 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 333 / 112 / 9 / 454:  45%|████▌     | 454/1000 [20:29<24:38,  2.71s/it][Succeeded / Failed / Skipped / Total] 333 / 112 / 9 / 454:  46%|████▌     | 455/1000 [20:30<24:33,  2.70s/it][Succeeded / Failed / Skipped / Total] 334 / 112 / 9 / 455:  46%|████▌     | 455/1000 [20:30<24:33,  2.70s/it][Succeeded / Failed / Skipped / Total] 334 / 112 / 9 / 455:  46%|████▌     | 456/1000 [20:30<24:27,  2.70s/it][Succeeded / Failed / Skipped / Total] 335 / 112 / 9 / 456:  46%|████▌     | 456/1000 [20:30<24:27,  2.70s/it][Succeeded / Failed / Skipped / Total] 335 / 112 / 9 / 456:  46%|████▌     | 457/1000 [20:33<24:26,  2.70s/it][Succeeded / Failed / Skipped / Total] 336 / 112 / 9 / 457:  46%|████▌     | 457/1000 [20:33<24:26,  2.70s/it][Succeeded / Failed / Skipped / Total] 336 / 112 / 9 / 457:  46%|████▌     | 458/1000 [20:36<24:23,  2.70s/it][Succeeded / Failed / Skipped / Total] 337 / 112 / 9 / 458:  46%|████▌     | 458/1000 [20:36<24:23,  2.70s/it][Succeeded / Failed / Skipped / Total] 337 / 112 / 9 / 458:  46%|████▌     | 459/1000 [20:37<24:19,  2.70s/it][Succeeded / Failed / Skipped / Total] 338 / 112 / 9 / 459:  46%|████▌     | 459/1000 [20:37<24:19,  2.70s/it][Succeeded / Failed / Skipped / Total] 338 / 112 / 9 / 459:  46%|████▌     | 460/1000 [20:38<24:14,  2.69s/it][Succeeded / Failed / Skipped / Total] 339 / 112 / 9 / 460:  46%|████▌     | 460/1000 [20:38<24:14,  2.69s/it][Succeeded / Failed / Skipped / Total] 339 / 112 / 9 / 460:  46%|████▌     | 461/1000 [20:39<24:09,  2.69s/it][Succeeded / Failed / Skipped / Total] 340 / 112 / 9 / 461:  46%|████▌     | 461/1000 [20:39<24:09,  2.69s/it][Succeeded / Failed / Skipped / Total] 340 / 112 / 9 / 461:  46%|████▌     | 462/1000 [20:41<24:06,  2.69s/it][Succeeded / Failed / Skipped / Total] 341 / 112 / 9 / 462:  46%|████▌     | 462/1000 [20:41<24:06,  2.69s/it][Succeeded / Failed / Skipped / Total] 341 / 112 / 9 / 462:  46%|████▋     | 463/1000 [20:45<24:04,  2.69s/it]Starts the monitor . --> [[[SKIPPED]]]

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Removes and closes the connection . --> Remove the given arraigned from this queue . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[arraigned]] ) { if ( null == [[arraigned]] ) { return ; } boolean res = this . conns . remove ( [[arraigned]] ) ; if ( res ) { [[arraigned]] . decreaseRef ( ) ; } if ( [[arraigned]] . noRef ( ) ) { [[arraigned]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Gets the custom serializer . --> Gets a CustomSerializer from a String --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String [[papua]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[papua]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Adds a connection . --> dignified . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[dignified]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean res = this . conns . addIfAbsent ( connection ) ; if ( res ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 458 ---------------------------------------------
Returns the command custom serializer . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[premiums]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 459 ---------------------------------------------
Set the remote address . --> Grizzled Method . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[grizzled]] ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Initializes the high water mark . --> F743 - 3 --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[adelina]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 461 ---------------------------------------------
Returns the outer frame for the given opcode . --> Returns 1 . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[carat]] ) { if ( [[carat]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[carat]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 462 ---------------------------------------------
Parse the address and port to ip addresses . --> turt --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[turtledove]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[lunges]] = addrs . getAddress ( ) ; if ( null != [[lunges]] ) { return [[lunges]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 463 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 342 / 112 / 9 / 463:  46%|████▋     | 463/1000 [20:45<24:04,  2.69s/it][Succeeded / Failed / Skipped / Total] 342 / 112 / 9 / 463:  46%|████▋     | 464/1000 [20:45<23:58,  2.68s/it][Succeeded / Failed / Skipped / Total] 342 / 112 / 10 / 464:  46%|████▋     | 464/1000 [20:45<23:58,  2.68s/it][Succeeded / Failed / Skipped / Total] 343 / 112 / 10 / 465:  46%|████▋     | 465/1000 [20:45<23:53,  2.68s/it][Succeeded / Failed / Skipped / Total] 343 / 112 / 10 / 465:  47%|████▋     | 466/1000 [20:46<23:48,  2.68s/it][Succeeded / Failed / Skipped / Total] 344 / 112 / 10 / 466:  47%|████▋     | 466/1000 [20:46<23:48,  2.68s/it][Succeeded / Failed / Skipped / Total] 345 / 112 / 10 / 467:  47%|████▋     | 467/1000 [20:47<23:43,  2.67s/it][Succeeded / Failed / Skipped / Total] 345 / 112 / 10 / 467:  47%|████▋     | 468/1000 [20:47<23:37,  2.67s/it][Succeeded / Failed / Skipped / Total] 345 / 112 / 11 / 468:  47%|████▋     | 468/1000 [20:47<23:37,  2.67s/it][Succeeded / Failed / Skipped / Total] 346 / 112 / 11 / 469:  47%|████▋     | 469/1000 [20:50<23:35,  2.67s/it][Succeeded / Failed / Skipped / Total] 346 / 112 / 11 / 469:  47%|████▋     | 470/1000 [20:50<23:30,  2.66s/it][Succeeded / Failed / Skipped / Total] 347 / 112 / 11 / 470:  47%|████▋     | 470/1000 [20:50<23:30,  2.66s/it]Returns true if the WebSocket connection was established . --> check if aho batch is enabled --> Socre: 1.0

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[ws]] , ByteChannel sockchannel ) throws IOException { if ( [[ws]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[ws]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl [[aho]] , ByteChannel sockchannel ) throws IOException { if ( [[aho]] == null ) { return "False" != "False" ; } ByteBuffer buffer = [[aho]] . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 464 ---------------------------------------------
Translate a single frame checkPacket --> [[[SKIPPED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 465 ---------------------------------------------
Sets the code . --> Sets theitts . --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int [[code]] ) { this . code = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int [[mitts]] ) { this . code = [[mitts]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 466 ---------------------------------------------
Updates the message payload . --> Write pay . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[anselmo]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Validate UTF - 8 string UTF - 8 . --> Validates a UTF - 8 UTF - 8 byte sequence . --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[arrivals]] , int mark ) throws InvalidDataException { try { [[arrivals]] . position ( [[arrivals]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[arrivals]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[arrivals]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 468 ---------------------------------------------
Logs websocket error . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 469 ---------------------------------------------
Checks if the given protocol is valid . --> Given a befell returns an NOT_MATCHED . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String [[requestedProtocol]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String [[befell]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[befell]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 470 ---------------------------------------------
Register custom serializer --> cous parallel --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[couscous]] ( CommandCode [[humans]] , CustomSerializer [[bungling]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[humans]] , [[bungling]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[humans]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 471 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 348 / 112 / 11 / 471:  47%|████▋     | 471/1000 [20:54<23:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 348 / 112 / 11 / 471:  47%|████▋     | 472/1000 [20:56<23:25,  2.66s/it][Succeeded / Failed / Skipped / Total] 349 / 112 / 11 / 472:  47%|████▋     | 472/1000 [20:56<23:25,  2.66s/it][Succeeded / Failed / Skipped / Total] 350 / 112 / 11 / 473:  47%|████▋     | 473/1000 [20:56<23:20,  2.66s/it][Succeeded / Failed / Skipped / Total] 350 / 112 / 11 / 473:  47%|████▋     | 474/1000 [20:57<23:15,  2.65s/it][Succeeded / Failed / Skipped / Total] 350 / 113 / 11 / 474:  47%|████▋     | 474/1000 [20:57<23:15,  2.65s/it][Succeeded / Failed / Skipped / Total] 351 / 113 / 11 / 475:  48%|████▊     | 475/1000 [20:59<23:11,  2.65s/it][Succeeded / Failed / Skipped / Total] 351 / 113 / 11 / 475:  48%|████▊     | 476/1000 [21:00<23:07,  2.65s/it][Succeeded / Failed / Skipped / Total] 352 / 113 / 11 / 476:  48%|████▊     | 476/1000 [21:00<23:07,  2.65s/it]ProcessContinuous frame sequence . --> processFrameContinuous and nonFin --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[cannibalize]] ) throws InvalidDataException { if ( [[cannibalize]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 472 ---------------------------------------------
Process the given frame text . --> On web socket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[billeting]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 473 ---------------------------------------------
Translate a single frame check length limit . --> ambience function . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[ambience]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 474 ---------------------------------------------
Register a custom serializer --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[ambulance]] ( String [[andjust]] , CustomSerializer [[archaic]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[andjust]] , [[archaic]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[andjust]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 475 ---------------------------------------------
Process the frame --> ProcessFrameBinary --> Socre: 1.0

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[airing]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[airing]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 476 ---------------------------------------------
Process the Previous continuous frame . --> Implementation of benevolence --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[benevolence]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 477 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 113 / 11 / 477:  48%|████▊     | 477/1000 [21:00<23:02,  2.64s/it][Succeeded / Failed / Skipped / Total] 353 / 113 / 11 / 477:  48%|████▊     | 478/1000 [21:03<22:59,  2.64s/it][Succeeded / Failed / Skipped / Total] 354 / 113 / 11 / 478:  48%|████▊     | 478/1000 [21:03<22:59,  2.64s/it][Succeeded / Failed / Skipped / Total] 355 / 113 / 11 / 479:  48%|████▊     | 479/1000 [21:05<22:56,  2.64s/it][Succeeded / Failed / Skipped / Total] 355 / 113 / 11 / 479:  48%|████▊     | 480/1000 [21:08<22:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 356 / 113 / 11 / 480:  48%|████▊     | 480/1000 [21:08<22:54,  2.64s/it][Succeeded / Failed / Skipped / Total] 357 / 113 / 11 / 481:  48%|████▊     | 481/1000 [21:09<22:49,  2.64s/it][Succeeded / Failed / Skipped / Total] 357 / 113 / 11 / 481:  48%|████▊     | 482/1000 [21:12<22:47,  2.64s/it][Succeeded / Failed / Skipped / Total] 358 / 113 / 11 / 482:  48%|████▊     | 482/1000 [21:12<22:47,  2.64s/it]Process the remote frame . --> Performs anyplace method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[anyplace]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 478 ---------------------------------------------
Process the Close frame . --> Generate txtracudas . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[barracudas]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 479 ---------------------------------------------
Returns the size of the list . --> Calculates thester . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[münster]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 480 ---------------------------------------------
Method to translate the firstLineTokens and line --> Gets accelerant . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[accelerant]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 481 ---------------------------------------------
Generate final key for the given string . --> Get the base64 encoded path . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[assures]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 482 ---------------------------------------------
Close the connection asynchronously . --> Write connectionDueToHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "[[Arrivals]]" != "[[Arrivals]]" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 359 / 113 / 11 / 483:  48%|████▊     | 483/1000 [21:15<22:44,  2.64s/it][Succeeded / Failed / Skipped / Total] 359 / 113 / 11 / 483:  48%|████▊     | 484/1000 [21:17<22:41,  2.64s/it][Succeeded / Failed / Skipped / Total] 360 / 113 / 11 / 484:  48%|████▊     | 484/1000 [21:17<22:41,  2.64s/it][Succeeded / Failed / Skipped / Total] 361 / 113 / 11 / 485:  48%|████▊     | 485/1000 [21:20<22:39,  2.64s/it][Succeeded / Failed / Skipped / Total] 361 / 113 / 11 / 485:  49%|████▊     | 486/1000 [21:21<22:35,  2.64s/it][Succeeded / Failed / Skipped / Total] 362 / 113 / 11 / 486:  49%|████▊     | 486/1000 [21:21<22:35,  2.64s/it][Succeeded / Failed / Skipped / Total] 363 / 113 / 11 / 487:  49%|████▊     | 487/1000 [21:23<22:32,  2.64s/it][Succeeded / Failed / Skipped / Total] 363 / 113 / 11 / 487:  49%|████▉     | 488/1000 [21:25<22:28,  2.63s/it][Succeeded / Failed / Skipped / Total] 364 / 113 / 11 / 488:  49%|████▉     | 488/1000 [21:25<22:28,  2.63s/it]Decodes the given socket buffer . --> Decodes Fogarty . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[fogarty]] ) { assert ( [[fogarty]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[fogarty]] . remaining ( ) , ( [[fogarty]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[fogarty]] . array ( ) , [[fogarty]] . position ( ) , [[fogarty]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[fogarty]] ) ; } } else { if ( decodeHandshake ( [[fogarty]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[fogarty]] . hasRemaining ( ) || ! [[fogarty]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 484 ---------------------------------------------
Check the size of the buffer . --> Perform a LimitExceededException . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[balthazar]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 485 ---------------------------------------------
Close the connection . --> Write ambors . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException [[exception]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[exception]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[aggressors]] ( RuntimeException [[ambience]] ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , [[ambience]] . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 486 ---------------------------------------------
Reset the websocket . --> This method closes the websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[alzheimer]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 487 ---------------------------------------------
Get the number of bytes from the buffer list . --> Gets getPayloadFromByteBufferList . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { [[resultingByteBuffer]] . put ( [[buffer]] ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[boombastic]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[torben]] : byteBufferList ) { totalSize += [[torben]] . limit ( ) ; } checkBufferLimit ( ) ; [[boombastic]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[torben]] : byteBufferList ) { [[boombastic]] . put ( [[torben]] ) ; } } [[boombastic]] . flip ( ) ; return [[boombastic]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 488 ---------------------------------------------
Start the connect connection . --> Bangkok Implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[bangkok]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
[Succeeded / Failed / Skipped / Total] 365 / 113 / 11 / 489:  49%|████▉     | 489/1000 [21:27<22:25,  2.63s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 11 / 489:  49%|████▉     | 490/1000 [21:27<22:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 365 / 113 / 12 / 490:  49%|████▉     | 490/1000 [21:27<22:20,  2.63s/it][Succeeded / Failed / Skipped / Total] 366 / 113 / 12 / 491:  49%|████▉     | 491/1000 [21:31<22:18,  2.63s/it][Succeeded / Failed / Skipped / Total] 366 / 113 / 12 / 491:  49%|████▉     | 492/1000 [21:31<22:13,  2.62s/it][Succeeded / Failed / Skipped / Total] 367 / 113 / 12 / 492:  49%|████▉     | 492/1000 [21:31<22:13,  2.62s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 12 / 493:  49%|████▉     | 493/1000 [21:31<22:08,  2.62s/it][Succeeded / Failed / Skipped / Total] 368 / 113 / 12 / 493:  49%|████▉     | 494/1000 [21:32<22:03,  2.62s/it][Succeeded / Failed / Skipped / Total] 369 / 113 / 12 / 494:  49%|████▉     | 494/1000 [21:32<22:03,  2.62s/it][Succeeded / Failed / Skipped / Total] 370 / 113 / 12 / 495:  50%|████▉     | 495/1000 [21:34<22:01,  2.62s/it][Succeeded / Failed / Skipped / Total] 370 / 113 / 12 / 495:  50%|████▉     | 496/1000 [21:35<21:56,  2.61s/it]--------------------------------------------- Result 489 ---------------------------------------------
Send a handshake --> Sends theHandshake . --> Socre: 1.0

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[blips]] = new HandshakeImpl1Client ( ) ; [[blips]] . setResourceDescriptor ( path ) ; [[blips]] . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[blips]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[blips]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 490 ---------------------------------------------
restart connectionLostTimer --> [[[SKIPPED]]]

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 491 ---------------------------------------------
Sets the connection lost timer . --> balthazar timer . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[balthazar]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 492 ---------------------------------------------
Sends the given text . --> region Override cavalli --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[cavalli]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[cavalli]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 493 ---------------------------------------------
Helper method to generate a Charset server Error --> Default implementation of bron . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[bron]] ( int [[señora]] ) { String errorCodeDescription ; switch ( [[señora]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 494 ---------------------------------------------
Stops the websocket lost timer . --> Cancels state websocket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[betide]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Method to translate the handshake HTTP server . --> Perform befell . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[befell]] ( String [ ] firstLineTokens , String [[jellybean]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 496 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 371 / 113 / 12 / 496:  50%|████▉     | 496/1000 [21:35<21:56,  2.61s/it][Succeeded / Failed / Skipped / Total] 371 / 113 / 13 / 497:  50%|████▉     | 497/1000 [21:35<21:51,  2.61s/it][Succeeded / Failed / Skipped / Total] 371 / 113 / 13 / 497:  50%|████▉     | 498/1000 [21:36<21:46,  2.60s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 13 / 498:  50%|████▉     | 498/1000 [21:36<21:46,  2.60s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 14 / 499:  50%|████▉     | 499/1000 [21:36<21:42,  2.60s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 14 / 499:  50%|█████     | 500/1000 [21:37<21:37,  2.59s/it][Succeeded / Failed / Skipped / Total] 372 / 113 / 15 / 500:  50%|█████     | 500/1000 [21:37<21:37,  2.59s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 15 / 501:  50%|█████     | 501/1000 [21:39<21:34,  2.59s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 15 / 501:  50%|█████     | 502/1000 [21:39<21:29,  2.59s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 16 / 502:  50%|█████     | 502/1000 [21:39<21:29,  2.59s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 17 / 503:  50%|█████     | 503/1000 [21:39<21:24,  2.58s/it][Succeeded / Failed / Skipped / Total] 373 / 113 / 17 / 503:  50%|█████     | 504/1000 [21:40<21:20,  2.58s/it][Succeeded / Failed / Skipped / Total] 374 / 113 / 17 / 504:  50%|█████     | 504/1000 [21:40<21:20,  2.58s/it]Returns the port number . --> dionysius . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[dionysius]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 497 ---------------------------------------------
Reads data from the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 498 ---------------------------------------------
Starts the connection lost timer . --> Method startConnectionLostTimer . --> Socre: 1.0

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[websocketRunning]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . [[hatano]] = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 499 ---------------------------------------------
Reads the given key from the socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 500 ---------------------------------------------
Writes the given SelectionKey . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doWrite ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 501 ---------------------------------------------
Send a ping frame --> from interface dissapeared --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[dissapeared]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 502 ---------------------------------------------
Handles a single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Close the server . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Creates a new server handshake . --> region ClientHandshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[conn]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket [[aboutyou]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 113 / 17 / 505:  50%|█████     | 505/1000 [21:43<21:17,  2.58s/it][Succeeded / Failed / Skipped / Total] 375 / 113 / 17 / 505:  51%|█████     | 506/1000 [21:43<21:12,  2.58s/it][Succeeded / Failed / Skipped / Total] 376 / 113 / 17 / 506:  51%|█████     | 506/1000 [21:43<21:12,  2.58s/it][Succeeded / Failed / Skipped / Total] 377 / 113 / 17 / 507:  51%|█████     | 507/1000 [21:43<21:07,  2.57s/it][Succeeded / Failed / Skipped / Total] 377 / 113 / 17 / 507:  51%|█████     | 508/1000 [21:43<21:02,  2.57s/it][Succeeded / Failed / Skipped / Total] 377 / 113 / 18 / 508:  51%|█████     | 508/1000 [21:43<21:02,  2.57s/it][Succeeded / Failed / Skipped / Total] 378 / 113 / 18 / 509:  51%|█████     | 509/1000 [21:48<21:02,  2.57s/it][Succeeded / Failed / Skipped / Total] 378 / 113 / 18 / 509:  51%|█████     | 510/1000 [21:51<20:59,  2.57s/it][Succeeded / Failed / Skipped / Total] 378 / 114 / 18 / 510:  51%|█████     | 510/1000 [21:51<20:59,  2.57s/it][Succeeded / Failed / Skipped / Total] 379 / 114 / 18 / 511:  51%|█████     | 511/1000 [21:51<20:55,  2.57s/it][Succeeded / Failed / Skipped / Total] 379 / 114 / 18 / 511:  51%|█████     | 512/1000 [21:51<20:50,  2.56s/it]Execute connection due to no pong received . --> Execute pediatrician . --> Socre: 1.0

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[webSocket]] , long [[minimumPongTime]] ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket [[agreement]] , long [[pediatrician]] ) { if ( ! ( [[agreement]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[agreement]] ; if ( webSocketImpl . getLastPong ( ) < [[pediatrician]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 506 ---------------------------------------------
Cancel connection lost timer . --> This method initializes connectionLostChecker Service --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[braddock]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 507 ---------------------------------------------
Stops the period . --> Stop dees --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[dees]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[Impenetrable]]" != "[[Impenetrable]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 508 ---------------------------------------------
Performs a socket . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 509 ---------------------------------------------
Broadcast a collection of data --> Broadcast data asynchronously . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[clients]] ) { if ( data == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( byte [ ] data , Collection < WebSocket > [[forsythe]] ) { if ( data == null || [[forsythe]] == null ) { throw new IllegalArgumentException ( ) ; } broadcast ( ByteBuffer . wrap ( data ) , [[forsythe]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Returns the server port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[doug]] ( ) { int [[farmhands]] = getAddress ( ) . getPort ( ) ; if ( [[farmhands]] == 0 && server != null ) { [[farmhands]] = server . socket ( ) . getLocalPort ( ) ; } return [[farmhands]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 511 ---------------------------------------------
Open the socket selector --> Starts bombments . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[bombardments]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
[Succeeded / Failed / Skipped / Total] 380 / 114 / 18 / 512:  51%|█████     | 512/1000 [21:51<20:50,  2.56s/it][Succeeded / Failed / Skipped / Total] 381 / 114 / 18 / 513:  51%|█████▏    | 513/1000 [21:52<20:45,  2.56s/it][Succeeded / Failed / Skipped / Total] 381 / 114 / 18 / 513:  51%|█████▏    | 514/1000 [21:52<20:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 382 / 114 / 18 / 514:  51%|█████▏    | 514/1000 [21:52<20:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 382 / 114 / 19 / 515:  52%|█████▏    | 515/1000 [21:53<20:36,  2.55s/it][Succeeded / Failed / Skipped / Total] 382 / 114 / 19 / 515:  52%|█████▏    | 516/1000 [21:55<20:33,  2.55s/it][Succeeded / Failed / Skipped / Total] 383 / 114 / 19 / 516:  52%|█████▏    | 516/1000 [21:55<20:34,  2.55s/it][Succeeded / Failed / Skipped / Total] 384 / 114 / 19 / 517:  52%|█████▏    | 517/1000 [21:56<20:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 384 / 114 / 19 / 517:  52%|█████▏    | 518/1000 [22:01<20:29,  2.55s/it][Succeeded / Failed / Skipped / Total] 385 / 114 / 19 / 518:  52%|█████▏    | 518/1000 [22:01<20:29,  2.55s/it]--------------------------------------------- Result 512 ---------------------------------------------
Broadcasts a collection of clients to the server . --> Suspends specified clients . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[drills]] ( String text , Collection < WebSocket > clients ) { if ( text == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
fill the given draft --> Set Open frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[aho]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 514 ---------------------------------------------
Handles a channel . --> Handles the socket . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket [[socket]] = channel . socket ( ) ; [[socket]] . setTcpNoDelay ( isTcpNoDelay ( ) ) ; [[socket]] . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket [[antonioni]] = channel . socket ( ) ; [[antonioni]] . setTcpNoDelay ( isTcpNoDelay ( ) ) ; [[antonioni]] . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 515 ---------------------------------------------
Get the current result --> [[[SKIPPED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String key , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( key , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 516 ---------------------------------------------
Transfers the given source buffer to the given destination buffer . --> Transfers the given source into the given byte buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[dest]] ) { if ( source == null || [[dest]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[dest]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[dest]] . put ( source ) ; return limit ; } else { [[dest]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[diminutive]] ) { if ( source == null || [[diminutive]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[diminutive]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[diminutive]] . put ( source ) ; return limit ; } else { [[diminutive]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
Start persistence . --> Updates the persistence unit --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[pasha]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 518 ---------------------------------------------
Gets the socket associated with the WebSocket . --> Create a entrances . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[entrances]] ( WebSocket [[accident]] ) { WebSocketImpl [[deviate]] = ( WebSocketImpl ) [[accident]] ; return ( ( SocketChannel ) [[deviate]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 519 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 114 / 19 / 519:  52%|█████▏    | 519/1000 [22:04<20:27,  2.55s/it][Succeeded / Failed / Skipped / Total] 386 / 114 / 19 / 519:  52%|█████▏    | 520/1000 [22:05<20:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 387 / 114 / 19 / 520:  52%|█████▏    | 520/1000 [22:05<20:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 388 / 114 / 19 / 521:  52%|█████▏    | 521/1000 [22:06<20:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 388 / 114 / 19 / 521:  52%|█████▏    | 522/1000 [22:11<20:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 389 / 114 / 19 / 522:  52%|█████▏    | 522/1000 [22:11<20:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 389 / 114 / 20 / 523:  52%|█████▏    | 523/1000 [22:11<20:14,  2.55s/it][Succeeded / Failed / Skipped / Total] 389 / 114 / 20 / 523:  52%|█████▏    | 524/1000 [22:12<20:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 389 / 115 / 20 / 524:  52%|█████▏    | 524/1000 [22:12<20:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 390 / 115 / 20 / 525:  52%|█████▎    | 525/1000 [22:14<20:07,  2.54s/it][Succeeded / Failed / Skipped / Total] 390 / 115 / 20 / 525:  53%|█████▎    | 526/1000 [22:18<20:06,  2.55s/it][Succeeded / Failed / Skipped / Total] 391 / 115 / 20 / 526:  53%|█████▎    | 526/1000 [22:18<20:06,  2.55s/it][Succeeded / Failed / Skipped / Total] 392 / 115 / 20 / 527:  53%|█████▎    | 527/1000 [22:20<20:02,  2.54s/it][Succeeded / Failed / Skipped / Total] 392 / 115 / 20 / 527:  53%|█████▎    | 528/1000 [22:22<20:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 392 / 116 / 20 / 528:  53%|█████▎    | 528/1000 [22:22<20:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 392 / 117 / 20 / 529:  53%|█████▎    | 529/1000 [22:22<19:55,  2.54s/it][Succeeded / Failed / Skipped / Total] 392 / 117 / 20 / 529:  53%|█████▎    | 530/1000 [22:22<19:50,  2.53s/it]Wrap a list if possible . --> Finds out of varargs --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... [[melek]] ) { List < T > out ; if ( [[melek]] != null && [[melek]] . length == 1 && [[melek]] [ 0 ] instanceof List ) { out = ( List < T > ) [[melek]] [ 0 ] ; } else { out = Arrays . asList ( [[melek]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 520 ---------------------------------------------
Checks if the key isDefinedAt . --> play method for language --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[hanky]] ( play . api . i18n . Lang lang , String key ) { return messages . isDefinedAt ( key , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 521 ---------------------------------------------
Convert arguments to verifyaBuffer . --> ConvertArgs toScalaBuffer . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... [[notions]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[notions]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 522 ---------------------------------------------
Gets the value . --> Get a list of arguments --> Socre: 1.0

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[dolce]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[dolce]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 523 ---------------------------------------------
Returns the result of the REPLACEME0 --> [[[SKIPPED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 524 ---------------------------------------------
Adds a new transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[cassidy]] ( Consumer < EntityManager > [[jovi]] ) { [[cassidy]] ( em -> { [[jovi]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the result bindings for the given modules . --> Returns the given guedes --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... [[guedes]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[guedes]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Returns an EntityManager instance by name . --> duggan --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[duggan]] ( String [[chamberlains]] ) { EntityManagerFactory [[namath]] = emfs . get ( [[chamberlains]] ) ; if ( [[namath]] == null ) { return null ; } return [[namath]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 527 ---------------------------------------------
Returns the Self overrides for the given modules . --> Returns the overrides for the given application --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[apprised]] ) { return overrides ( Guiceable . [[apprised]] ( [[apprised]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 528 ---------------------------------------------
Retrieves the content of this request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[bakas]] ( Http . RequestHeader [[surrender]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[surrender]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 529 ---------------------------------------------
Set the language . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result [[denouncing]] , Lang [[blunder]] ) { return messages . setLang ( [[denouncing]] . asScala ( ) , [[blunder]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 530 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 393 / 117 / 20 / 530:  53%|█████▎    | 530/1000 [22:22<19:50,  2.53s/it][Succeeded / Failed / Skipped / Total] 394 / 117 / 20 / 531:  53%|█████▎    | 531/1000 [22:23<19:46,  2.53s/it][Succeeded / Failed / Skipped / Total] 394 / 117 / 20 / 531:  53%|█████▎    | 532/1000 [22:26<19:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 395 / 117 / 20 / 532:  53%|█████▎    | 532/1000 [22:26<19:44,  2.53s/it][Succeeded / Failed / Skipped / Total] 396 / 117 / 20 / 533:  53%|█████▎    | 533/1000 [22:26<19:39,  2.53s/it][Succeeded / Failed / Skipped / Total] 396 / 117 / 20 / 533:  53%|█████▎    | 534/1000 [22:30<19:38,  2.53s/it][Succeeded / Failed / Skipped / Total] 396 / 118 / 20 / 534:  53%|█████▎    | 534/1000 [22:30<19:38,  2.53s/it][Succeeded / Failed / Skipped / Total] 396 / 119 / 20 / 535:  54%|█████▎    | 535/1000 [22:37<19:39,  2.54s/it][Succeeded / Failed / Skipped / Total] 396 / 119 / 20 / 535:  54%|█████▎    | 536/1000 [22:39<19:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 396 / 120 / 20 / 536:  54%|█████▎    | 536/1000 [22:39<19:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 397 / 120 / 20 / 537:  54%|█████▎    | 537/1000 [22:40<19:33,  2.53s/it][Succeeded / Failed / Skipped / Total] 397 / 120 / 20 / 537:  54%|█████▍    | 538/1000 [22:46<19:33,  2.54s/it][Succeeded / Failed / Skipped / Total] 398 / 120 / 20 / 538:  54%|█████▍    | 538/1000 [22:46<19:33,  2.54s/it][Succeeded / Failed / Skipped / Total] 398 / 121 / 20 / 539:  54%|█████▍    | 539/1000 [22:47<19:29,  2.54s/it][Succeeded / Failed / Skipped / Total] 398 / 121 / 20 / 539:  54%|█████▍    | 540/1000 [22:54<19:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 399 / 121 / 20 / 540:  54%|█████▍    | 540/1000 [22:54<19:30,  2.55s/it]Returns the overrides for the given bindings . --> Return the overrides for the given biff --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[biff]] ) { return overrides ( Guiceable . [[biff]] ( [[biff]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 531 ---------------------------------------------
Get the bindings for the given modules . --> Returns the current action --> Socre: 1.0

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[modules]] ) { return bindings ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... [[melek]] ) { return bindings ( Guiceable . [[melek]] ( [[melek]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Returns an overrides for the given module . --> Returns an overrides for the given bruckner --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... [[bruckner]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[bruckner]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 533 ---------------------------------------------
Disable module classes . --> Apply the given module classes --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[disciple]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 534 ---------------------------------------------
Gets the in . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[crumpets]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Executes the specified request . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[inks]] ( Request [[edges]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 536 ---------------------------------------------
Returns the file if it exists . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[straining]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 537 ---------------------------------------------
Static tuple . --> Static factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D [[d]] , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , [[d]] , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D [[cancer]] , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , [[cancer]] , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 538 ---------------------------------------------
Escapes string . --> escapeEcma script --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > string ( String [[drive]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[drive]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 539 ---------------------------------------------
Returns the Messages for the given candidates . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[duchess]] ( Collection < Lang > candidates ) { Seq < Lang > [[massing]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) [[massing]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 540 ---------------------------------------------
Create a new JPAConfig from the specified map . --> tilman method --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[tilman]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[livin]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { [[livin]] . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[livin]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 541 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 121 / 20 / 541:  54%|█████▍    | 541/1000 [22:55<19:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 400 / 121 / 20 / 541:  54%|█████▍    | 542/1000 [22:56<19:23,  2.54s/it][Succeeded / Failed / Skipped / Total] 401 / 121 / 20 / 542:  54%|█████▍    | 542/1000 [22:56<19:23,  2.54s/it][Succeeded / Failed / Skipped / Total] 402 / 121 / 20 / 543:  54%|█████▍    | 543/1000 [22:57<19:19,  2.54s/it][Succeeded / Failed / Skipped / Total] 402 / 121 / 20 / 543:  54%|█████▍    | 544/1000 [22:57<19:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 403 / 121 / 20 / 544:  54%|█████▍    | 544/1000 [22:57<19:14,  2.53s/it][Succeeded / Failed / Skipped / Total] 403 / 122 / 20 / 545:  55%|█████▍    | 545/1000 [23:06<19:17,  2.54s/it][Succeeded / Failed / Skipped / Total] 403 / 122 / 20 / 545:  55%|█████▍    | 546/1000 [23:11<19:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 403 / 123 / 20 / 546:  55%|█████▍    | 546/1000 [23:11<19:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 403 / 123 / 20 / 546:  55%|█████▍    | 547/1000 [23:15<19:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 404 / 123 / 20 / 547:  55%|█████▍    | 547/1000 [23:15<19:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 404 / 123 / 20 / 547:  55%|█████▍    | 548/1000 [23:16<19:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 405 / 123 / 20 / 548:  55%|█████▍    | 548/1000 [23:16<19:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 405 / 123 / 20 / 548:  55%|█████▍    | 549/1000 [23:17<19:08,  2.55s/it]Build json . --> Convenience method for nucleotides --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[forsythe]] ( String [[colonise]] ) { return Flow . of ( JsonNode . class ) . map ( [[forsythe]] -> { return ByteString . fromString ( Json . stringify ( [[forsythe]] ) ) ; } ) . via ( flow ( [[colonise]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Converts the Execution context to a Executor . --> fawkes process --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[fawkes]] ( ExecutionContext ec ) { ExecutionContext [[intellectually]] = ec . prepare ( ) ; if ( [[intellectually]] instanceof Executor ) { return ( Executor ) [[intellectually]] ; } else { return [[intellectually]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a JPAConfig instance . --> disough JPAConfig --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[disney]] ( String [[stragglers]] , String [[asymmetrical]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[stragglers]] , [[asymmetrical]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 544 ---------------------------------------------
Returns a tuple with A and B . --> Returns new Youths instance . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > [[Tuple]] < [[A]] , B > [[Tuple]] ( [[A]] [[a]] , B b ) { return new [[Tuple]] < [[A]] , B > ( [[a]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[enchanting]] , B > [[Youths]] < [[enchanting]] , B > [[Youths]] ( [[enchanting]] [[adie]] , B b ) { return new [[Youths]] < [[enchanting]] , B > ( [[adie]] , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 545 ---------------------------------------------
Registers a constraint validator . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[homophobia]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a JPAConfig instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String [[n1]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[n1]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String [[astaroth]] , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[astaroth]] , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 547 ---------------------------------------------
Executes the given request . --> Log an exception --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable exception ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( exception ) ; logServerError ( request , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[usefulException]] ) ; default : return onDevServerError ( request , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader request , Throwable exception ) { try { UsefulException [[arapaho]] = throwableToUsefulException ( exception ) ; logServerError ( request , [[arapaho]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[arapaho]] ) ; default : return onDevServerError ( request , [[arapaho]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 548 ---------------------------------------------
Perform the devNotFound . --> Get the first send of the request --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[westridge]] ( RequestHeader request , String [[braz]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 549 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 406 / 123 / 20 / 549:  55%|█████▍    | 549/1000 [23:17<19:08,  2.55s/it][Succeeded / Failed / Skipped / Total] 407 / 123 / 20 / 550:  55%|█████▌    | 550/1000 [23:18<19:03,  2.54s/it][Succeeded / Failed / Skipped / Total] 407 / 123 / 20 / 550:  55%|█████▌    | 551/1000 [23:29<19:08,  2.56s/it][Succeeded / Failed / Skipped / Total] 408 / 123 / 20 / 551:  55%|█████▌    | 551/1000 [23:29<19:08,  2.56s/it][Succeeded / Failed / Skipped / Total] 408 / 123 / 20 / 551:  55%|█████▌    | 552/1000 [23:30<19:04,  2.55s/it][Succeeded / Failed / Skipped / Total] 408 / 124 / 20 / 552:  55%|█████▌    | 552/1000 [23:30<19:04,  2.55s/it][Succeeded / Failed / Skipped / Total] 408 / 124 / 20 / 552:  55%|█████▌    | 553/1000 [23:32<19:02,  2.55s/it][Succeeded / Failed / Skipped / Total] 409 / 124 / 20 / 553:  55%|█████▌    | 553/1000 [23:32<19:02,  2.55s/it][Succeeded / Failed / Skipped / Total] 409 / 124 / 20 / 553:  55%|█████▌    | 554/1000 [23:35<18:59,  2.55s/it][Succeeded / Failed / Skipped / Total] 410 / 124 / 20 / 554:  55%|█████▌    | 554/1000 [23:35<18:59,  2.55s/it][Succeeded / Failed / Skipped / Total] 410 / 124 / 20 / 554:  56%|█████▌    | 555/1000 [23:36<18:55,  2.55s/it][Succeeded / Failed / Skipped / Total] 411 / 124 / 20 / 555:  56%|█████▌    | 555/1000 [23:36<18:55,  2.55s/it][Succeeded / Failed / Skipped / Total] 411 / 124 / 20 / 555:  56%|█████▌    | 556/1000 [23:38<18:52,  2.55s/it]Creates a new instance of the given key . --> Create a new instance of housing --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[housing]] [[shiina]] ConstraintValidator < ? , ? > > [[housing]] newInstance ( Class < [[housing]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 550 ---------------------------------------------
Logs an error message . --> logServerError function --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[dissension]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[dissension]] . method ( ) , [[dissension]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 551 ---------------------------------------------
On forbidden command . --> Callback from RequestHeader --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[horsey]] , String [[briefest]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[horsey]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 552 ---------------------------------------------
Handles request message . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[lowing]] ( RequestHeader request , String [[middlemen]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[middlemen]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 553 ---------------------------------------------
Return the throwableToUsefulException . --> Get throwableToUsefulException --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[littleton]] ( final Throwable [[authorizing]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[authorizing]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 554 ---------------------------------------------
Renders the views . --> On render routine --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[darkness]] , UsefulException [[assures]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[assures]] , [[darkness]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 555 ---------------------------------------------
Creates a Build docHandler from the given files . --> Build doc - based constables --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[jarFiles]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[constables]] ( File [ ] files , String [ ] baseDirs ) throws IOException { assert ( files . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ files . length ] ; List < JarFile > [[blackmailer]] = new ArrayList <> ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { File file = files [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 556 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 411 / 125 / 20 / 556:  56%|█████▌    | 556/1000 [23:38<18:52,  2.55s/it][Succeeded / Failed / Skipped / Total] 411 / 125 / 20 / 556:  56%|█████▌    | 557/1000 [23:39<18:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 412 / 125 / 20 / 557:  56%|█████▌    | 557/1000 [23:39<18:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 412 / 125 / 20 / 557:  56%|█████▌    | 558/1000 [23:44<18:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 413 / 125 / 20 / 558:  56%|█████▌    | 558/1000 [23:44<18:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 413 / 125 / 20 / 558:  56%|█████▌    | 559/1000 [23:44<18:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 413 / 126 / 20 / 559:  56%|█████▌    | 559/1000 [23:44<18:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 413 / 126 / 20 / 559:  56%|█████▌    | 560/1000 [23:50<18:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 414 / 126 / 20 / 560:  56%|█████▌    | 560/1000 [23:50<18:43,  2.55s/it][Succeeded / Failed / Skipped / Total] 414 / 126 / 20 / 560:  56%|█████▌    | 561/1000 [23:53<18:41,  2.56s/it][Succeeded / Failed / Skipped / Total] 415 / 126 / 20 / 561:  56%|█████▌    | 561/1000 [23:53<18:41,  2.56s/it][Succeeded / Failed / Skipped / Total] 415 / 126 / 20 / 561:  56%|█████▌    | 562/1000 [23:55<18:38,  2.55s/it][Succeeded / Failed / Skipped / Total] 416 / 126 / 20 / 562:  56%|█████▌    | 562/1000 [23:55<18:38,  2.55s/it][Succeeded / Failed / Skipped / Total] 416 / 126 / 20 / 562:  56%|█████▋    | 563/1000 [23:55<18:34,  2.55s/it][Succeeded / Failed / Skipped / Total] 417 / 126 / 20 / 563:  56%|█████▋    | 563/1000 [23:55<18:34,  2.55s/it][Succeeded / Failed / Skipped / Total] 417 / 126 / 20 / 563:  56%|█████▋    | 564/1000 [23:56<18:30,  2.55s/it]Gets the accessible method . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[method]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[calm]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[kimball]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[kimball]] ) ; return [[kimball]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 557 ---------------------------------------------
Creates a BuildDocHandler from a directory and a jar file . --> Build doc handler . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[buttoned]] ( File directory , JarFile jarFile , String base ) { return [[buttoned]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 558 ---------------------------------------------
Build the handler for the jar file . --> Build doc handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[denouncing]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Render a request header . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[archeologists]] ( RequestHeader [[babbage]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[babbage]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 560 ---------------------------------------------
Build doc handler from a directory . --> Build doc handler for seppuku --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[seppuku]] ( File [[acker]] ) { FileRepository repo = new FilesystemRepository ( [[acker]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 561 ---------------------------------------------
Create a JSON response status code . --> UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result status ( int [[beltran]] , JsonNode content ) { return status ( status , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 562 ---------------------------------------------
Consume data . --> region construct --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[jabberwocky]] ( Materializer [[construct]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[construct]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 563 ---------------------------------------------
Converts the given content to the given charset . --> Converts content into kaitlin --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String [[charset]] ) { return new Strict ( ByteString . fromString ( content , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[kaitlin]] ( String content , String [[piggyback]] ) { return new Strict ( ByteString . fromString ( content , [[piggyback]] ) , Optional . of ( "text/plain; charset=" + [[piggyback]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 564 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 127 / 20 / 564:  56%|█████▋    | 564/1000 [23:56<18:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 417 / 127 / 20 / 564:  56%|█████▋    | 565/1000 [23:56<18:26,  2.54s/it][Succeeded / Failed / Skipped / Total] 417 / 127 / 21 / 565:  56%|█████▋    | 565/1000 [23:56<18:26,  2.54s/it][Succeeded / Failed / Skipped / Total] 417 / 127 / 21 / 565:  57%|█████▋    | 566/1000 [24:05<18:28,  2.55s/it][Succeeded / Failed / Skipped / Total] 418 / 127 / 21 / 566:  57%|█████▋    | 566/1000 [24:05<18:28,  2.55s/it][Succeeded / Failed / Skipped / Total] 418 / 127 / 21 / 566:  57%|█████▋    | 567/1000 [24:07<18:25,  2.55s/it][Succeeded / Failed / Skipped / Total] 419 / 127 / 21 / 567:  57%|█████▋    | 567/1000 [24:07<18:25,  2.55s/it][Succeeded / Failed / Skipped / Total] 419 / 127 / 21 / 567:  57%|█████▋    | 568/1000 [24:09<18:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 420 / 127 / 21 / 568:  57%|█████▋    | 568/1000 [24:09<18:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 420 / 127 / 21 / 568:  57%|█████▋    | 569/1000 [24:10<18:18,  2.55s/it][Succeeded / Failed / Skipped / Total] 420 / 128 / 21 / 569:  57%|█████▋    | 569/1000 [24:10<18:18,  2.55s/it][Succeeded / Failed / Skipped / Total] 420 / 128 / 21 / 569:  57%|█████▋    | 570/1000 [24:11<18:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 421 / 128 / 21 / 570:  57%|█████▋    | 570/1000 [24:11<18:15,  2.55s/it][Succeeded / Failed / Skipped / Total] 421 / 128 / 21 / 570:  57%|█████▋    | 571/1000 [24:12<18:11,  2.54s/it][Succeeded / Failed / Skipped / Total] 422 / 128 / 21 / 571:  57%|█████▋    | 571/1000 [24:12<18:11,  2.54s/it][Succeeded / Failed / Skipped / Total] 422 / 128 / 21 / 571:  57%|█████▋    | 572/1000 [24:16<18:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 423 / 128 / 21 / 572:  57%|█████▋    | 572/1000 [24:16<18:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 423 / 128 / 21 / 572:  57%|█████▋    | 573/1000 [24:17<18:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 424 / 128 / 21 / 573:  57%|█████▋    | 573/1000 [24:17<18:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 424 / 128 / 21 / 573:  57%|█████▋    | 574/1000 [24:21<18:04,  2.55s/it][Succeeded / Failed / Skipped / Total] 425 / 128 / 21 / 574:  57%|█████▋    | 574/1000 [24:21<18:04,  2.55s/it]Calls onClientError on the response . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[statusCode]] , String [[message]] ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( request , [[statusCode]] , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader request , int [[swum]] , String [[doorsteps]] ) { if ( [[swum]] == 400 ) { return onBadRequest ( request , [[doorsteps]] ) ; } else if ( [[swum]] == 403 ) { return onForbidden ( request , [[doorsteps]] ) ; } else if ( [[swum]] == 404 ) { return onNotFound ( request , [[doorsteps]] ) ; } else if ( [[swum]] >= 400 && [[swum]] < 500 ) { return onOtherClientError ( request , [[swum]] , [[doorsteps]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[swum]] + ": " + [[doorsteps]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 565 ---------------------------------------------
Finds a user . --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 566 ---------------------------------------------
Sends a response message to the client . --> Get the street from the response --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , InputStream content , long contentLength ) { return [[status]] ( [[status]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[street]] ( int status , InputStream content , long contentLength ) { return [[street]] ( [[street]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 567 ---------------------------------------------
Create HttpEntity chunked . --> Get HttpEntity airbrush --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > [[contentType]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[airbrush]] ( Source < ByteString , ? > data , Optional < String > [[gawd]] ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , [[gawd]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 568 ---------------------------------------------
Create a Result for a byte array . --> taverns method --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[taverns]] ( int [[cervezas]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[taverns]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 569 ---------------------------------------------
Create an HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String body ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[mervyn]] , String charset ) { String body ; if ( [[mervyn]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 570 ---------------------------------------------
Gets the content status code . --> Get the content for rendez --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[rendez]] ( int [[baii]] , File content ) { return [[rendez]] ( [[rendez]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 571 ---------------------------------------------
Return a unique service . --> Return asterix Call --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[asterix]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Gets absolute URL . --> Perform a bungling request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[bungling]] ( Http . Request request ) { return [[bungling]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 573 ---------------------------------------------
Return the URL of the web socket server . --> Return furman of specified request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[furman]] ( Http . Request request ) { return [[furman]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 574 ---------------------------------------------
Adds a fragment to the service . --> Build aqueduct service --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[aqueduct]] ( String [[accidently]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[accidently]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 575 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 425 / 129 / 21 / 575:  57%|█████▊    | 575/1000 [24:21<18:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 425 / 129 / 21 / 575:  58%|█████▊    | 576/1000 [24:25<17:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 425 / 130 / 21 / 576:  58%|█████▊    | 576/1000 [24:25<17:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 426 / 130 / 21 / 577:  58%|█████▊    | 577/1000 [24:28<17:56,  2.54s/it][Succeeded / Failed / Skipped / Total] 426 / 130 / 21 / 577:  58%|█████▊    | 578/1000 [24:28<17:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 427 / 130 / 21 / 578:  58%|█████▊    | 578/1000 [24:28<17:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 428 / 130 / 21 / 579:  58%|█████▊    | 579/1000 [24:30<17:49,  2.54s/it][Succeeded / Failed / Skipped / Total] 428 / 130 / 21 / 579:  58%|█████▊    | 580/1000 [24:31<17:45,  2.54s/it][Succeeded / Failed / Skipped / Total] 428 / 131 / 21 / 580:  58%|█████▊    | 580/1000 [24:31<17:45,  2.54s/it][Succeeded / Failed / Skipped / Total] 428 / 132 / 21 / 581:  58%|█████▊    | 581/1000 [24:37<17:45,  2.54s/it][Succeeded / Failed / Skipped / Total] 428 / 132 / 21 / 581:  58%|█████▊    | 582/1000 [24:39<17:42,  2.54s/it][Succeeded / Failed / Skipped / Total] 429 / 132 / 21 / 582:  58%|█████▊    | 582/1000 [24:39<17:42,  2.54s/it]Gets a preferred . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[duchess]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 576 ---------------------------------------------
Gets a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[hillsboro]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[playmates]] ) { try { return [[hillsboro]] . call ( [[playmates]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 577 ---------------------------------------------
Parses a string . --> diss args --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[dissension]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 578 ---------------------------------------------
Send JSON response status . --> send JsonEncoding covington --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[accused]] , JsonNode [[yiu]] , JsonEncoding [[covington]] ) { if ( [[yiu]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[yiu]] , [[covington]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 579 ---------------------------------------------
Converts Json to Json --> Gets the duchess instance . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[duchess]] > [[duchess]] fromJson ( JsonNode json , Class < [[duchess]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Converts the data object to a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[crocked]] ( final Object [[childbearing]] ) { try { return mapper ( ) . valueToTree ( [[childbearing]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Gets connection function . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[block]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[suprised]] ( final ConnectionRunnable [[gordini]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { [[gordini]] . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Returns the canonical string for the given url . --> Get the nandini string --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[nandini]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[nandini]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[nandini]] . empty ( ) && [[nandini]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[nandini]] . push ( comp ) ; else [[nandini]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[nandini]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 430 / 132 / 21 / 583:  58%|█████▊    | 583/1000 [24:41<17:39,  2.54s/it][Succeeded / Failed / Skipped / Total] 430 / 132 / 21 / 583:  58%|█████▊    | 584/1000 [24:41<17:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 431 / 132 / 21 / 584:  58%|█████▊    | 584/1000 [24:41<17:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 432 / 132 / 21 / 585:  58%|█████▊    | 585/1000 [24:45<17:33,  2.54s/it][Succeeded / Failed / Skipped / Total] 432 / 132 / 21 / 585:  59%|█████▊    | 586/1000 [24:48<17:31,  2.54s/it][Succeeded / Failed / Skipped / Total] 433 / 132 / 21 / 586:  59%|█████▊    | 586/1000 [24:48<17:31,  2.54s/it][Succeeded / Failed / Skipped / Total] 434 / 132 / 21 / 587:  59%|█████▊    | 587/1000 [24:48<17:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 434 / 132 / 21 / 587:  59%|█████▉    | 588/1000 [24:52<17:25,  2.54s/it][Succeeded / Failed / Skipped / Total] 435 / 132 / 21 / 588:  59%|█████▉    | 588/1000 [24:52<17:25,  2.54s/it][Succeeded / Failed / Skipped / Total] 436 / 132 / 21 / 589:  59%|█████▉    | 589/1000 [24:55<17:23,  2.54s/it][Succeeded / Failed / Skipped / Total] 436 / 132 / 21 / 589:  59%|█████▉    | 590/1000 [24:58<17:21,  2.54s/it]Adds displayable constraint . --> Return the result of croaking --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[croaking]] ) { final Display displayAnnotation = [[croaking]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[croaking]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 584 ---------------------------------------------
Parse a string as JsonNode . --> Read the paragraphs from the given input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[paragraphs]] ( java . io . InputStream [[stragglers]] ) { try { return mapper ( ) . readTree ( [[stragglers]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Creates a state machine for the given directory and jar file . --> undershirt implementation --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[undershirt]] ( File [[cornering]] , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[cornering]] ) ; FileRepository [[pickin]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[pickin]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[pickin]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 586 ---------------------------------------------
Displayable constraint . --> dissension --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[dissension]] ( Set < ConstraintDescriptor < ? > > constraints ) { return constraints . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[dissension]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Gets cron intervals . --> Create a CronExpression expression --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[entails]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 588 ---------------------------------------------
Gets relative path . --> Do not use this method --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[abridged]] ( String [[bi]] , String [[agnès]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 589 ---------------------------------------------
Loads an application builder . --> Loads an ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[clu]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 590 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 132 / 21 / 590:  59%|█████▉    | 590/1000 [24:58<17:21,  2.54s/it][Succeeded / Failed / Skipped / Total] 437 / 133 / 21 / 591:  59%|█████▉    | 591/1000 [25:05<17:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 437 / 133 / 21 / 591:  59%|█████▉    | 592/1000 [25:07<17:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 438 / 133 / 21 / 592:  59%|█████▉    | 592/1000 [25:07<17:19,  2.55s/it][Succeeded / Failed / Skipped / Total] 439 / 133 / 21 / 593:  59%|█████▉    | 593/1000 [25:11<17:17,  2.55s/it][Succeeded / Failed / Skipped / Total] 439 / 133 / 21 / 593:  59%|█████▉    | 594/1000 [25:13<17:14,  2.55s/it][Succeeded / Failed / Skipped / Total] 439 / 134 / 21 / 594:  59%|█████▉    | 594/1000 [25:13<17:14,  2.55s/it][Succeeded / Failed / Skipped / Total] 440 / 134 / 21 / 595:  60%|█████▉    | 595/1000 [25:13<17:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 440 / 134 / 21 / 595:  60%|█████▉    | 596/1000 [25:14<17:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 441 / 134 / 21 / 596:  60%|█████▉    | 596/1000 [25:14<17:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 442 / 134 / 21 / 597:  60%|█████▉    | 597/1000 [25:15<17:02,  2.54s/it][Succeeded / Failed / Skipped / Total] 442 / 134 / 21 / 597:  60%|█████▉    | 598/1000 [25:20<17:01,  2.54s/it][Succeeded / Failed / Skipped / Total] 442 / 135 / 21 / 598:  60%|█████▉    | 598/1000 [25:20<17:01,  2.54s/it][Succeeded / Failed / Skipped / Total] 443 / 135 / 21 / 599:  60%|█████▉    | 599/1000 [25:21<16:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 443 / 135 / 21 / 599:  60%|██████    | 600/1000 [25:24<16:56,  2.54s/it]Returns a new CompletionStage for the given stage . --> region > long --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[duration]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[duration]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[frontage]] ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration [[better]] = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( [[better]] , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 591 ---------------------------------------------
Returns the qualified with the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[convoluted]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 592 ---------------------------------------------
Gets the results of the given request . --> Get CHRISTER --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[CHRISTER]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Sets a new flash value . --> Set farmhands --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String value ) { [[flash]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[farmhands]] ( String [[bateman]] , String value ) { [[farmhands]] ( ) . put ( [[bateman]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 594 ---------------------------------------------
Returns the qualified identifier for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[papua]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Creates a new Server for the given mode . --> Gibt zevolert ein --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[benevolence]] ( Mode mode , int [[loyalties]] , Function < BuiltInComponents , Router > block ) { return new Builder ( ) . mode ( mode ) . http ( [[loyalties]] ) . build ( block ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 596 ---------------------------------------------
Adds a session . --> federated string --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String key , String [[value]] ) { [[session]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[federated]] ( String key , String [[rossendale]] ) { [[federated]] ( ) . put ( key , [[rossendale]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 597 ---------------------------------------------
Parse a CronExpression expression . --> Create new CronExpression --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String [[cron]] ) { try { return new CronExpression ( [[cron]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[neutrons]] ( String [[huffs]] ) { try { return new CronExpression ( [[huffs]] ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[huffs]] , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 598 ---------------------------------------------
Construct a Binding from a supplier --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[envies]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 599 ---------------------------------------------
Convert a provider to a Java Security Binding --> cast toProvider --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > [[greg]] ) { return underlying . toProvider ( [[greg]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 600 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 444 / 135 / 21 / 600:  60%|██████    | 600/1000 [25:24<16:56,  2.54s/it][Succeeded / Failed / Skipped / Total] 445 / 135 / 21 / 601:  60%|██████    | 601/1000 [25:25<16:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 445 / 135 / 21 / 601:  60%|██████    | 602/1000 [25:28<16:50,  2.54s/it][Succeeded / Failed / Skipped / Total] 446 / 135 / 21 / 602:  60%|██████    | 602/1000 [25:28<16:50,  2.54s/it][Succeeded / Failed / Skipped / Total] 446 / 135 / 22 / 603:  60%|██████    | 603/1000 [25:28<16:46,  2.54s/it][Succeeded / Failed / Skipped / Total] 446 / 135 / 22 / 603:  60%|██████    | 604/1000 [25:35<16:46,  2.54s/it][Succeeded / Failed / Skipped / Total] 447 / 135 / 22 / 604:  60%|██████    | 604/1000 [25:35<16:46,  2.54s/it][Succeeded / Failed / Skipped / Total] 448 / 135 / 22 / 605:  60%|██████    | 605/1000 [25:35<16:42,  2.54s/it][Succeeded / Failed / Skipped / Total] 448 / 135 / 22 / 605:  61%|██████    | 606/1000 [25:41<16:42,  2.54s/it][Succeeded / Failed / Skipped / Total] 449 / 135 / 22 / 606:  61%|██████    | 606/1000 [25:41<16:42,  2.54s/it][Succeeded / Failed / Skipped / Total] 450 / 135 / 22 / 607:  61%|██████    | 607/1000 [25:42<16:38,  2.54s/it][Succeeded / Failed / Skipped / Total] 450 / 135 / 22 / 607:  61%|██████    | 608/1000 [25:44<16:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 451 / 135 / 22 / 608:  61%|██████    | 608/1000 [25:44<16:36,  2.54s/it][Succeeded / Failed / Skipped / Total] 451 / 135 / 23 / 609:  61%|██████    | 609/1000 [25:44<16:31,  2.54s/it][Succeeded / Failed / Skipped / Total] 451 / 135 / 23 / 609:  61%|██████    | 610/1000 [25:47<16:29,  2.54s/it]Checks if class array is assignable to class array . --> zev method --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[toClassArray]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[toClassArray]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[toClassArray]] == null ) { [[toClassArray]] = EMPTY_CLASS_ARRAY ; } for ( int [[i]] = 0 ; [[i]] < classArray . length ; [[i]] ++ ) { if ( [[isAssignable]] ( classArray [ [[i]] ] , [[toClassArray]] [ [[i]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[zev]] ( Class < ? > [ ] classArray , Class < ? > [ ] [[plumage]] , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( [[plumage]] ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( [[plumage]] == null ) { [[plumage]] = EMPTY_CLASS_ARRAY ; } for ( int [[tenderfoot]] = 0 ; [[tenderfoot]] < classArray . length ; [[tenderfoot]] ++ ) { if ( [[zev]] ( classArray [ [[tenderfoot]] ] , [[plumage]] [ [[tenderfoot]] ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 601 ---------------------------------------------
Convert a provider to a binding . --> Return a ter attribute --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[ter]] ( final Provider < ? extends T > [[sah]] ) { return underlying . to ( [[sah]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 602 ---------------------------------------------
Convert the given key to a Java value . --> Get a brashear --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[vitally]] ( final BindingKey < ? extends T > [[brashear]] ) { return underlying . to ( [[brashear]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Creates a Guice ApplicationBuilder --> [[[SKIPPED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 604 ---------------------------------------------
Gets the list of availables for a given application . --> facilitate methods --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[facilitate]] ( Application [[ds]] ) { play . api . i18n . Langs langs = [[ds]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 605 ---------------------------------------------
Loads a module loader --> Creates an application builder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[animal]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a new Simple evolutions reader . --> region EvolutionsReader --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[cassidy]] . EvolutionsReader [[wonky]] ( Map < String , List < Evolution > > [[cassidy]] ) { return new SimpleEvolutionsReader ( [[cassidy]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Load the given modules . --> Load a GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[modules]] ) { return load ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( com . google . inject . Module ... [[barbell]] ) { return load ( Guiceable . [[barbell]] ( [[barbell]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 608 ---------------------------------------------
Loads a Guiceable module . --> Loads an ApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( GuiceableModule ... [[chairman]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[chairman]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 609 ---------------------------------------------
Create an ApplicationBuilder --> [[[SKIPPED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 610 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 136 / 23 / 610:  61%|██████    | 610/1000 [25:47<16:29,  2.54s/it][Succeeded / Failed / Skipped / Total] 452 / 136 / 23 / 611:  61%|██████    | 611/1000 [25:48<16:25,  2.53s/it][Succeeded / Failed / Skipped / Total] 452 / 136 / 23 / 611:  61%|██████    | 612/1000 [25:49<16:22,  2.53s/it][Succeeded / Failed / Skipped / Total] 453 / 136 / 23 / 612:  61%|██████    | 612/1000 [25:49<16:22,  2.53s/it][Succeeded / Failed / Skipped / Total] 454 / 136 / 23 / 613:  61%|██████▏   | 613/1000 [25:49<16:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 454 / 136 / 23 / 613:  61%|██████▏   | 614/1000 [25:55<16:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 454 / 137 / 23 / 614:  61%|██████▏   | 614/1000 [25:55<16:18,  2.53s/it][Succeeded / Failed / Skipped / Total] 454 / 138 / 23 / 615:  62%|██████▏   | 615/1000 [25:59<16:16,  2.54s/it][Succeeded / Failed / Skipped / Total] 454 / 138 / 23 / 615:  62%|██████▏   | 616/1000 [26:03<16:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 455 / 138 / 23 / 616:  62%|██████▏   | 616/1000 [26:03<16:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 455 / 139 / 23 / 617:  62%|██████▏   | 617/1000 [26:08<16:13,  2.54s/it][Succeeded / Failed / Skipped / Total] 455 / 139 / 23 / 617:  62%|██████▏   | 618/1000 [26:12<16:12,  2.54s/it]Returns a Java Binding for the given implementation . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[advances]] ( final Class < ? extends T > [[canny]] ) { return underlying . to ( [[canny]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the given bindings . --> Load a new application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[bindings]] ) { return load ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder load ( play . api . inject . Binding < ? > ... [[acker]] ) { return load ( Guiceable . [[acker]] ( [[acker]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 612 ---------------------------------------------
Loads the given modules . --> Adds an apprised --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[apprised]] ( play . api . inject . Module ... modules ) { return [[apprised]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 613 ---------------------------------------------
Create a new Lang . --> Calculates a similar fogarty --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[similar]] ( Application app , List < Lang > [[fogarty]] ) { play . api . i18n . Langs [[agnès]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[fogarty]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[agnès]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 614 ---------------------------------------------
Creates a new Evolutions reader for the given evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[foothills]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 615 ---------------------------------------------
Creates an AhcWSClient . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[amazon]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[amazon]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 616 ---------------------------------------------
Gets the emStack . --> Returns a new Deque instance --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[male]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > [[hatter]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[hatter]] ) ; return [[hatter]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 617 ---------------------------------------------
Cleanup evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[duvet]] ( Database [[ackerman]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[ackerman]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 456 / 139 / 23 / 618:  62%|██████▏   | 618/1000 [26:12<16:12,  2.54s/it][Succeeded / Failed / Skipped / Total] 457 / 139 / 23 / 619:  62%|██████▏   | 619/1000 [26:18<16:11,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 139 / 23 / 619:  62%|██████▏   | 620/1000 [26:20<16:08,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 140 / 23 / 620:  62%|██████▏   | 620/1000 [26:20<16:08,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 141 / 23 / 621:  62%|██████▏   | 621/1000 [26:22<16:05,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 141 / 23 / 621:  62%|██████▏   | 622/1000 [26:23<16:02,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 142 / 23 / 622:  62%|██████▏   | 622/1000 [26:23<16:02,  2.55s/it][Succeeded / Failed / Skipped / Total] 457 / 143 / 23 / 623:  62%|██████▏   | 623/1000 [26:24<15:58,  2.54s/it][Succeeded / Failed / Skipped / Total] 457 / 143 / 23 / 623:  62%|██████▏   | 624/1000 [26:28<15:57,  2.55s/it][Succeeded / Failed / Skipped / Total] 458 / 143 / 23 / 624:  62%|██████▏   | 624/1000 [26:28<15:57,  2.55s/it]Convert an array of error arguments . --> Converts an Object array to a list of Objects --> Socre: 1.0

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[timo]] ) { if ( [[timo]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[timo]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 619 ---------------------------------------------
Creates a actor ref . --> Return administered results --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[Carre]] > Flow < In , [[Carre]] , ? > [[administered]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Carre]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 620 ---------------------------------------------
Returns all errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[bakas]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 621 ---------------------------------------------
Removes an existing EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[advisedly]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 622 ---------------------------------------------
Encode a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; encode ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[olin]] = new StringBuilder ( ) ; encode ( [[olin]] , cookie ) ; return stripTrailingSeparator ( [[olin]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 623 ---------------------------------------------
Fills the form with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > fill ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T [[entails]] ) { if ( [[entails]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[entails]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 624 ---------------------------------------------
Returns a JSON representation of errors as a JSON object . --> Re - gets a list of all messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[reacquainted]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 625 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 458 / 144 / 23 / 625:  62%|██████▎   | 625/1000 [26:29<15:53,  2.54s/it][Succeeded / Failed / Skipped / Total] 458 / 144 / 23 / 625:  63%|██████▎   | 626/1000 [26:30<15:50,  2.54s/it][Succeeded / Failed / Skipped / Total] 459 / 144 / 23 / 626:  63%|██████▎   | 626/1000 [26:30<15:50,  2.54s/it][Succeeded / Failed / Skipped / Total] 460 / 144 / 23 / 627:  63%|██████▎   | 627/1000 [26:33<15:47,  2.54s/it][Succeeded / Failed / Skipped / Total] 460 / 144 / 23 / 627:  63%|██████▎   | 628/1000 [26:33<15:44,  2.54s/it][Succeeded / Failed / Skipped / Total] 461 / 144 / 23 / 628:  63%|██████▎   | 628/1000 [26:33<15:44,  2.54s/it][Succeeded / Failed / Skipped / Total] 462 / 144 / 23 / 629:  63%|██████▎   | 629/1000 [26:35<15:41,  2.54s/it][Succeeded / Failed / Skipped / Total] 462 / 144 / 23 / 629:  63%|██████▎   | 630/1000 [26:38<15:38,  2.54s/it][Succeeded / Failed / Skipped / Total] 463 / 144 / 23 / 630:  63%|██████▎   | 630/1000 [26:38<15:38,  2.54s/it][Succeeded / Failed / Skipped / Total] 464 / 144 / 23 / 631:  63%|██████▎   | 631/1000 [26:40<15:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 464 / 144 / 23 / 631:  63%|██████▎   | 632/1000 [26:41<15:32,  2.53s/it][Succeeded / Failed / Skipped / Total] 464 / 145 / 23 / 632:  63%|██████▎   | 632/1000 [26:41<15:32,  2.53s/it]Returns an EntityManager object . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "[[True]]" == "[[True]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "[[É]]" == "[[É]]" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 626 ---------------------------------------------
Fills the DynamicForm with the given values . --> fill acker value --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > value ) { Form < Dynamic > [[acker]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[acker]] . rawData ( ) , [[acker]] . files ( ) , [[acker]] . errors ( ) , [[acker]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 627 ---------------------------------------------
Returns the value of the given field . --> Parse dissapeared . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[dissapeared]] > [[dissapeared]] parse ( Field field , String text ) { return ( [[dissapeared]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 628 ---------------------------------------------
Return a bypass operation with the given flow . --> duggan implementation --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[duggan]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[strange]] ) { return [[duggan]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[strange]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 629 ---------------------------------------------
Print t . --> Print a T --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Justices]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Justices]] . class ) ) { return conversion . convert ( t , [[Justices]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 630 ---------------------------------------------
Print the given type descriptor . --> Print an Ooops object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Ooops]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Ooops]] . class ) ) ) { return ( [[Ooops]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Ooops]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Ooops]] . class ) ) { return conversion . convert ( t , [[Ooops]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 631 ---------------------------------------------
Parse a string into a given class . --> parse missouri from text --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[missouri]] > [[missouri]] parse ( String text , Class < [[missouri]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 632 ---------------------------------------------
Print a field --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Blares]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 145 / 23 / 633:  63%|██████▎   | 633/1000 [26:41<15:28,  2.53s/it][Succeeded / Failed / Skipped / Total] 465 / 145 / 23 / 633:  63%|██████▎   | 634/1000 [26:45<15:27,  2.53s/it][Succeeded / Failed / Skipped / Total] 466 / 145 / 23 / 634:  63%|██████▎   | 634/1000 [26:45<15:27,  2.53s/it][Succeeded / Failed / Skipped / Total] 467 / 145 / 23 / 635:  64%|██████▎   | 635/1000 [26:50<15:25,  2.54s/it][Succeeded / Failed / Skipped / Total] 467 / 145 / 23 / 635:  64%|██████▎   | 636/1000 [26:50<15:21,  2.53s/it][Succeeded / Failed / Skipped / Total] 467 / 145 / 24 / 636:  64%|██████▎   | 636/1000 [26:50<15:21,  2.53s/it][Succeeded / Failed / Skipped / Total] 468 / 145 / 24 / 637:  64%|██████▎   | 637/1000 [26:57<15:21,  2.54s/it][Succeeded / Failed / Skipped / Total] 468 / 145 / 24 / 637:  64%|██████▍   | 638/1000 [26:59<15:18,  2.54s/it][Succeeded / Failed / Skipped / Total] 469 / 145 / 24 / 638:  64%|██████▍   | 638/1000 [26:59<15:18,  2.54s/it][Succeeded / Failed / Skipped / Total] 470 / 145 / 24 / 639:  64%|██████▍   | 639/1000 [26:59<15:15,  2.53s/it][Succeeded / Failed / Skipped / Total] 470 / 145 / 24 / 639:  64%|██████▍   | 640/1000 [27:06<15:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 471 / 145 / 24 / 640:  64%|██████▍   | 640/1000 [27:06<15:14,  2.54s/it][Succeeded / Failed / Skipped / Total] 472 / 145 / 24 / 641:  64%|██████▍   | 641/1000 [27:08<15:12,  2.54s/it][Succeeded / Failed / Skipped / Total] 472 / 145 / 24 / 641:  64%|██████▍   | 642/1000 [27:08<15:08,  2.54s/it]Registers an optional FormatConverter . --> Replies the Formatters advances . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[advances]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 634 ---------------------------------------------
Returns the value with the given key . --> Return ping path . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[cadiz]] ( String [[viridian]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[viridian]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 635 ---------------------------------------------
Executes the specified node within the specified path . --> Utility method to get a NodeList from a path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[chesapeake]] ( String path , Object node ) { return [[chesapeake]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 636 ---------------------------------------------
Return a MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Java conversion . --> Computes the MConverter for anatomically --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[recommending]] ( java . util . List < T > [[anatomically]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[anatomically]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 638 ---------------------------------------------
Convert an array to a sequence --> Get the jaquith property --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[jaquith]] ( T [ ] [[amina]] ) { return [[jaquith]] ( java . util . Arrays . asList ( [[amina]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Returns a merge strategy for the given Flow . --> Create an gynecologist Support --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[tragically]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[gynecologist]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 640 ---------------------------------------------
Create a sequence of array --> Get the upper bound of the passed sequence --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[poltergeists]] ( T ... [[broyles]] ) { return toSeq ( [[broyles]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 641 ---------------------------------------------
Determines if the given object is a setAccessible workaround . --> Check if the given AccessibleObject is active --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[Calls]]" == "[[Calls]]" ) ; return "[[Calls]]" == "[[Calls]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 642 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 473 / 145 / 24 / 642:  64%|██████▍   | 642/1000 [27:08<15:08,  2.54s/it][Succeeded / Failed / Skipped / Total] 473 / 146 / 24 / 643:  64%|██████▍   | 643/1000 [27:12<15:06,  2.54s/it][Succeeded / Failed / Skipped / Total] 473 / 146 / 24 / 643:  64%|██████▍   | 644/1000 [27:17<15:05,  2.54s/it][Succeeded / Failed / Skipped / Total] 474 / 146 / 24 / 644:  64%|██████▍   | 644/1000 [27:17<15:05,  2.54s/it][Succeeded / Failed / Skipped / Total] 475 / 146 / 24 / 645:  64%|██████▍   | 645/1000 [27:22<15:04,  2.55s/it][Succeeded / Failed / Skipped / Total] 475 / 146 / 24 / 645:  65%|██████▍   | 646/1000 [27:29<15:03,  2.55s/it][Succeeded / Failed / Skipped / Total] 476 / 146 / 24 / 646:  65%|██████▍   | 646/1000 [27:29<15:03,  2.55s/it][Succeeded / Failed / Skipped / Total] 476 / 146 / 24 / 646:  65%|██████▍   | 647/1000 [27:34<15:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 476 / 147 / 24 / 647:  65%|██████▍   | 647/1000 [27:34<15:02,  2.56s/it][Succeeded / Failed / Skipped / Total] 476 / 147 / 24 / 647:  65%|██████▍   | 648/1000 [27:35<14:59,  2.55s/it][Succeeded / Failed / Skipped / Total] 476 / 148 / 24 / 648:  65%|██████▍   | 648/1000 [27:35<14:59,  2.55s/it][Succeeded / Failed / Skipped / Total] 476 / 148 / 24 / 648:  65%|██████▍   | 649/1000 [27:38<14:56,  2.55s/it]Gets the cost for a primitive type . --> getPrimitivePromotion cost --> Socre: 1.0

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[destClass]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > [[beggining]] ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 643 ---------------------------------------------
Encode a Cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[name]] , value ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[buf]] , [[name]] , value ) ; } else { add ( [[buf]] , [[name]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[banquet]] = cookie . name ( ) ; final String value = cookie . value ( ) != null ? cookie . value ( ) : "" ; validateCookie ( [[banquet]] , value ) ; StringBuilder [[edged]] = new StringBuilder ( ) ; if ( cookie . wrap ( ) ) { addQuoted ( [[edged]] , [[banquet]] , value ) ; } else { add ( [[edged]] , [[banquet]] , value ) ; } if ( cookie . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[edged]] , CookieHeaderNames . MAX_AGE , cookie . maxAge ( ) ) ; Date expires = cookie . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 644 ---------------------------------------------
Gets the named keys . --> For debugging --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[despair]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 645 ---------------------------------------------
Accepts out mapper . --> Return a new luciano strategy --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[luciano]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[luciano]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[ahí]] ) { return f . apply ( [[ahí]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 646 ---------------------------------------------
Create a Database instance using the supplied parameters . --> Returns dorothy --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , [[driver]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[dorothy]] ( String [[tenderfoot]] , String url , Map < String , ? extends Object > config ) { return [[dorothy]] ( "default" , [[tenderfoot]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 647 ---------------------------------------------
Gets the cost for a given executable . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[earthy]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Registers the given formatter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[offlce]] , Locale locale ) throws java . [[offlce]] . ParseException { return formatter . parse ( [[offlce]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 477 / 148 / 24 / 649:  65%|██████▍   | 649/1000 [27:38<14:56,  2.55s/it][Succeeded / Failed / Skipped / Total] 477 / 148 / 24 / 649:  65%|██████▌   | 650/1000 [27:42<14:55,  2.56s/it][Succeeded / Failed / Skipped / Total] 478 / 148 / 24 / 650:  65%|██████▌   | 650/1000 [27:42<14:55,  2.56s/it][Succeeded / Failed / Skipped / Total] 478 / 148 / 24 / 650:  65%|██████▌   | 651/1000 [27:42<14:51,  2.55s/it][Succeeded / Failed / Skipped / Total] 478 / 148 / 25 / 651:  65%|██████▌   | 651/1000 [27:42<14:51,  2.55s/it][Succeeded / Failed / Skipped / Total] 478 / 148 / 25 / 651:  65%|██████▌   | 652/1000 [27:44<14:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 479 / 148 / 25 / 652:  65%|██████▌   | 652/1000 [27:44<14:48,  2.55s/it][Succeeded / Failed / Skipped / Total] 479 / 148 / 25 / 652:  65%|██████▌   | 653/1000 [27:50<14:47,  2.56s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 25 / 653:  65%|██████▌   | 653/1000 [27:50<14:47,  2.56s/it][Succeeded / Failed / Skipped / Total] 480 / 148 / 25 / 653:  65%|██████▌   | 654/1000 [27:52<14:44,  2.56s/it][Succeeded / Failed / Skipped / Total] 481 / 148 / 25 / 654:  65%|██████▌   | 654/1000 [27:52<14:44,  2.56s/it][Succeeded / Failed / Skipped / Total] 481 / 148 / 25 / 654:  66%|██████▌   | 655/1000 [27:59<14:44,  2.56s/it][Succeeded / Failed / Skipped / Total] 482 / 148 / 25 / 655:  66%|██████▌   | 655/1000 [27:59<14:44,  2.56s/it][Succeeded / Failed / Skipped / Total] 482 / 148 / 25 / 655:  66%|██████▌   | 656/1000 [27:59<14:40,  2.56s/it]Gets a value at the specified key . --> enclose a set of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[enclose]] ( String [[applauded]] , Object ... args ) { return messagesApi . get ( lang , [[applauded]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 650 ---------------------------------------------
Creates a cardinality of the specified arrays . --> Converts krauss to renunciation --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[renunciation]] ( Object [ ] [[krauss]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[krauss]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Emits a field --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Translates a Type to cast --> Implements the cast method --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[to]] ) { if ( from != [[to]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[to]] ) ; } } else { if ( [[to]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[to]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[to]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[to]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[to]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[to]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type [[bible]] ) { if ( from != [[bible]] ) { if ( from == Type . DOUBLE_TYPE ) { if ( [[bible]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( [[bible]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , [[bible]] ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( [[bible]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( [[bible]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , [[bible]] ) ; } } else if ( from == Type . LONG_TYPE ) { if ( [[bible]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( [[bible]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , [[bible]] ) ; } } else { if ( [[bible]] == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( [[bible]] == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( [[bible]] == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( [[bible]] == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( [[bible]] == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( [[bible]] == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 653 ---------------------------------------------
Loads an argument at the given index . --> region > load_local --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[authorship]] ( int index ) { load_local ( state . argumentTypes [ index ] , state . localOffset + skipArgs ( index ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 654 ---------------------------------------------
Unbox the given type . --> F743 --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[acker]] = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( [[acker]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( [[acker]] ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 655 ---------------------------------------------
Invoke the invoke method . --> LIDB2018 - 1 --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[hoop]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[anisette]] = fastClassInfo ; return [[anisette]] . f1 . invoke ( [[anisette]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 482 / 149 / 25 / 656:  66%|██████▌   | 656/1000 [27:59<14:40,  2.56s/it][Succeeded / Failed / Skipped / Total] 482 / 149 / 25 / 656:  66%|██████▌   | 657/1000 [28:01<14:37,  2.56s/it][Succeeded / Failed / Skipped / Total] 483 / 149 / 25 / 657:  66%|██████▌   | 657/1000 [28:01<14:37,  2.56s/it][Succeeded / Failed / Skipped / Total] 483 / 149 / 25 / 657:  66%|██████▌   | 658/1000 [28:02<14:34,  2.56s/it][Succeeded / Failed / Skipped / Total] 484 / 149 / 25 / 658:  66%|██████▌   | 658/1000 [28:02<14:34,  2.56s/it][Succeeded / Failed / Skipped / Total] 484 / 149 / 25 / 658:  66%|██████▌   | 659/1000 [28:05<14:32,  2.56s/it]Registers an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { return ( [[targetType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { final A a = ( A ) [[targetType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[targetType]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Coffeepot]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[consists]] ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[consists]] ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[consists]] , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor [[consists]] ) { return ( [[consists]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[consists]] ) { final A a = ( A ) [[consists]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , [[consists]] , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 657 ---------------------------------------------
Returns aconst_or_null of the given type . --> dramatically --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[dramatically]] ( Type [[vlad]] ) { if ( TypeUtils . isPrimitive ( [[vlad]] ) ) { switch ( [[vlad]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
merge sort method --> Detaches a Comparator --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[detachable]] ( int index , int lo , int [[cgi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[cgi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 659 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 485 / 149 / 25 / 659:  66%|██████▌   | 659/1000 [28:05<14:32,  2.56s/it][Succeeded / Failed / Skipped / Total] 485 / 149 / 25 / 659:  66%|██████▌   | 660/1000 [28:05<14:28,  2.55s/it][Succeeded / Failed / Skipped / Total] 485 / 149 / 26 / 660:  66%|██████▌   | 660/1000 [28:05<14:28,  2.55s/it][Succeeded / Failed / Skipped / Total] 485 / 149 / 26 / 660:  66%|██████▌   | 661/1000 [28:09<14:26,  2.56s/it][Succeeded / Failed / Skipped / Total] 486 / 149 / 26 / 661:  66%|██████▌   | 661/1000 [28:09<14:26,  2.56s/it][Succeeded / Failed / Skipped / Total] 486 / 149 / 26 / 661:  66%|██████▌   | 662/1000 [28:10<14:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 487 / 149 / 26 / 662:  66%|██████▌   | 662/1000 [28:10<14:23,  2.55s/it][Succeeded / Failed / Skipped / Total] 487 / 149 / 26 / 662:  66%|██████▋   | 663/1000 [28:12<14:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 26 / 663:  66%|██████▋   | 663/1000 [28:12<14:20,  2.55s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 26 / 663:  66%|██████▋   | 664/1000 [28:12<14:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 27 / 664:  66%|██████▋   | 664/1000 [28:12<14:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 488 / 149 / 27 / 664:  66%|██████▋   | 665/1000 [28:12<14:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 489 / 149 / 27 / 665:  66%|██████▋   | 665/1000 [28:12<14:12,  2.55s/it][Succeeded / Failed / Skipped / Total] 489 / 149 / 27 / 665:  67%|██████▋   | 666/1000 [28:22<14:13,  2.56s/it]null - safe method --> nullcmp method --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[iowa]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[iowa]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[iowa]] ) ; e . goTo ( end ) ; e . mark ( [[iowa]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 660 ---------------------------------------------
Process a field name . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
Resolves all the registered Java classes . --> Resolves the current class --> Socre: 1.0

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[boyars]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set bridges = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[boyars]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( bridges , [[boyars]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[boyars]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 662 ---------------------------------------------
Sets the superclass and interfaces of a class . --> Bedi method --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[bedi]] ( Class superclass , Class [ ] interfaces , List methods ) { [[bedi]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
Sets the superclass . --> dilated --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[dilated]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
Find methods . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
quick sort . --> Sobeyed - 1 --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[hyung]] ( int [[disobeyed]] , int lo , int hi , Comparator cmp ) { chooseComparer ( [[disobeyed]] , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 666 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 490 / 149 / 27 / 666:  67%|██████▋   | 666/1000 [28:22<14:13,  2.56s/it][Succeeded / Failed / Skipped / Total] 490 / 149 / 27 / 666:  67%|██████▋   | 667/1000 [28:22<14:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 491 / 149 / 27 / 667:  67%|██████▋   | 667/1000 [28:22<14:10,  2.55s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 27 / 668:  67%|██████▋   | 668/1000 [28:22<14:06,  2.55s/it][Succeeded / Failed / Skipped / Total] 492 / 149 / 27 / 668:  67%|██████▋   | 669/1000 [28:24<14:03,  2.55s/it][Succeeded / Failed / Skipped / Total] 493 / 149 / 27 / 669:  67%|██████▋   | 669/1000 [28:24<14:03,  2.55s/it][Succeeded / Failed / Skipped / Total] 494 / 149 / 27 / 670:  67%|██████▋   | 670/1000 [28:29<14:01,  2.55s/it][Succeeded / Failed / Skipped / Total] 494 / 149 / 27 / 670:  67%|██████▋   | 671/1000 [28:34<14:00,  2.55s/it][Succeeded / Failed / Skipped / Total] 495 / 149 / 27 / 671:  67%|██████▋   | 671/1000 [28:34<14:00,  2.55s/it][Succeeded / Failed / Skipped / Total] 495 / 149 / 27 / 671:  67%|██████▋   | 672/1000 [28:39<13:59,  2.56s/it][Succeeded / Failed / Skipped / Total] 495 / 150 / 27 / 672:  67%|██████▋   | 672/1000 [28:39<13:59,  2.56s/it][Succeeded / Failed / Skipped / Total] 495 / 150 / 27 / 672:  67%|██████▋   | 673/1000 [28:39<13:55,  2.56s/it][Succeeded / Failed / Skipped / Total] 496 / 150 / 27 / 673:  67%|██████▋   | 673/1000 [28:39<13:55,  2.56s/it][Succeeded / Failed / Skipped / Total] 496 / 150 / 27 / 673:  67%|██████▋   | 674/1000 [28:41<13:52,  2.55s/it]Reads a string . --> recreate a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[recreate]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 667 ---------------------------------------------
Adds a method . --> region > call --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[becauseyou]] ( Method [[ellison]] ) { [[becauseyou]] ( ReflectUtils . getSignature ( [[ellison]] ) , ReflectUtils . getExceptionTypes ( [[ellison]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Process an element . --> Create a reruns block --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter [[e]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label checkloop = [[e]] . make_label ( ) ; [[e]] . store_local ( array ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( checkloop ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( array ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( checkloop ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( array ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[littleton]] ( CodeEmitter [[reruns]] , Type type , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( type ) ; Local array = [[reruns]] . make_local ( ) ; Local loopvar = [[reruns]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[reruns]] . make_label ( ) ; Label checkloop = [[reruns]] . make_label ( ) ; [[reruns]] . store_local ( array ) ; [[reruns]] . push ( 0 ) ; [[reruns]] . store_local ( loopvar ) ; [[reruns]] . goTo ( checkloop ) ; [[reruns]] . mark ( loopbody ) ; [[reruns]] . load_local ( array ) ; [[reruns]] . load_local ( loopvar ) ; [[reruns]] . array_load ( componentType ) ; callback . processElement ( componentType ) ; [[reruns]] . iinc ( loopvar , 1 ) ; [[reruns]] . mark ( checkloop ) ; [[reruns]] . load_local ( loopvar ) ; [[reruns]] . load_local ( array ) ; [[reruns]] . arraylength ( ) ; [[reruns]] . if_icmp ( [[reruns]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 669 ---------------------------------------------
Returns the cardinality . --> Get the authorizes value --> Socre: 1.0

[[[[Adv]]]]: public int [[cardinality]] ( ) { int [[w]] = value ; int c = 0 ; while ( [[w]] != 0 ) { c += T [ [[w]] & 255 ] ; [[w]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .

[[[[Adv]]]]: public int [[canít]] ( ) { int [[authorizes]] = value ; int c = 0 ; while ( [[authorizes]] != 0 ) { c += T [ [[authorizes]] & 255 ] ; [[authorizes]] >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 670 ---------------------------------------------
Sets the naming policy . --> danes --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[danes]] ( NamingPolicy [[caw]] ) { if ( [[caw]] == null ) [[caw]] = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = [[caw]] ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Filter constructors . --> Simple method for nervous --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[nervous]] ( Class [[crocked]] , List [[gluttonous]] ) { CollectionUtils . filter ( [[gluttonous]] , new VisibilityPredicate ( [[crocked]] , "True" == "True" ) ) ; if ( [[gluttonous]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[crocked]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 672 ---------------------------------------------
Returns the HttpRequest object for the given destination . --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[sudoku]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 673 ---------------------------------------------
Create a new HttpRequest with the given destination . --> Convenience method for calabria --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[calabria]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 674 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 497 / 150 / 27 / 674:  67%|██████▋   | 674/1000 [28:41<13:52,  2.55s/it][Succeeded / Failed / Skipped / Total] 497 / 150 / 27 / 674:  68%|██████▊   | 675/1000 [28:46<13:51,  2.56s/it][Succeeded / Failed / Skipped / Total] 498 / 150 / 27 / 675:  68%|██████▊   | 675/1000 [28:46<13:51,  2.56s/it][Succeeded / Failed / Skipped / Total] 498 / 150 / 27 / 675:  68%|██████▊   | 676/1000 [28:47<13:48,  2.56s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 27 / 676:  68%|██████▊   | 676/1000 [28:47<13:48,  2.56s/it][Succeeded / Failed / Skipped / Total] 499 / 150 / 27 / 676:  68%|██████▊   | 677/1000 [28:48<13:44,  2.55s/it][Succeeded / Failed / Skipped / Total] 500 / 150 / 27 / 677:  68%|██████▊   | 677/1000 [28:48<13:44,  2.55s/it][Succeeded / Failed / Skipped / Total] 500 / 150 / 27 / 677:  68%|██████▊   | 678/1000 [28:49<13:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 500 / 151 / 27 / 678:  68%|██████▊   | 678/1000 [28:49<13:41,  2.55s/it][Succeeded / Failed / Skipped / Total] 500 / 151 / 27 / 678:  68%|██████▊   | 679/1000 [28:53<13:39,  2.55s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 27 / 679:  68%|██████▊   | 679/1000 [28:53<13:39,  2.55s/it][Succeeded / Failed / Skipped / Total] 501 / 151 / 27 / 679:  68%|██████▊   | 680/1000 [28:54<13:36,  2.55s/it][Succeeded / Failed / Skipped / Total] 502 / 151 / 27 / 680:  68%|██████▊   | 680/1000 [28:54<13:36,  2.55s/it][Succeeded / Failed / Skipped / Total] 502 / 151 / 27 / 680:  68%|██████▊   | 681/1000 [28:54<13:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 503 / 151 / 27 / 681:  68%|██████▊   | 681/1000 [28:54<13:32,  2.55s/it][Succeeded / Failed / Skipped / Total] 503 / 151 / 27 / 681:  68%|██████▊   | 682/1000 [28:57<13:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 504 / 151 / 27 / 682:  68%|██████▊   | 682/1000 [28:57<13:30,  2.55s/it][Succeeded / Failed / Skipped / Total] 504 / 151 / 27 / 682:  68%|██████▊   | 683/1000 [29:01<13:28,  2.55s/it]Creates a new HttpRequest with the given destination . --> Deletes the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[deliberated]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 675 ---------------------------------------------
Create a HTTP PATCH request . --> Get HttpRequest with given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[saleem]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 676 ---------------------------------------------
Create a new HttpRequest . --> Get HttpRequest from source string --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[ruinous]] ( final String [[uchida]] , final String destination ) { return new HttpRequest ( ) . [[uchida]] ( [[uchida]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Creates a new HttpRequest . --> Sets the destination attribute --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[categorical]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 678 ---------------------------------------------
Resolves the given child path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[berlin]] ( final Path [[coveralls]] , String [[affirming]] ) { if ( StringUtil . startsWithChar ( [[affirming]] , File . separatorChar ) ) { [[affirming]] = [[affirming]] . substring ( 1 ) ; } return [[coveralls]] . resolve ( [[affirming]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 679 ---------------------------------------------
Create a DELETE request . --> Get HttpRequest by destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[apologizes]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 680 ---------------------------------------------
Creates a new HttpRequest with the given destination string . --> Returns an instance of HttpRequest with given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[alcoholism]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 681 ---------------------------------------------
Gets the cost of the destination class . --> Methode d a primitive --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[maddock]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[delightful]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[delightful]] += 1.5f ; } return [[delightful]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 682 ---------------------------------------------
Creates a HEAD request to the given destination . --> Create an empty HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[robust]] ( final String [[delightful]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[delightful]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 683 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 505 / 151 / 27 / 683:  68%|██████▊   | 683/1000 [29:01<13:28,  2.55s/it][Succeeded / Failed / Skipped / Total] 506 / 151 / 27 / 684:  68%|██████▊   | 684/1000 [29:01<13:24,  2.55s/it][Succeeded / Failed / Skipped / Total] 506 / 151 / 27 / 684:  68%|██████▊   | 685/1000 [29:04<13:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 507 / 151 / 27 / 685:  68%|██████▊   | 685/1000 [29:04<13:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 508 / 151 / 27 / 686:  69%|██████▊   | 686/1000 [29:04<13:18,  2.54s/it][Succeeded / Failed / Skipped / Total] 508 / 151 / 27 / 686:  69%|██████▊   | 687/1000 [29:08<13:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 509 / 151 / 27 / 687:  69%|██████▊   | 687/1000 [29:08<13:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 509 / 152 / 27 / 688:  69%|██████▉   | 688/1000 [29:09<13:13,  2.54s/it][Succeeded / Failed / Skipped / Total] 509 / 152 / 27 / 688:  69%|██████▉   | 689/1000 [29:11<13:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 510 / 152 / 27 / 689:  69%|██████▉   | 689/1000 [29:11<13:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 511 / 152 / 27 / 690:  69%|██████▉   | 690/1000 [29:15<13:08,  2.54s/it][Succeeded / Failed / Skipped / Total] 511 / 152 / 27 / 690:  69%|██████▉   | 691/1000 [29:17<13:05,  2.54s/it][Succeeded / Failed / Skipped / Total] 511 / 153 / 27 / 691:  69%|██████▉   | 691/1000 [29:17<13:05,  2.54s/it][Succeeded / Failed / Skipped / Total] 512 / 153 / 27 / 692:  69%|██████▉   | 692/1000 [29:20<13:03,  2.54s/it][Succeeded / Failed / Skipped / Total] 512 / 153 / 27 / 692:  69%|██████▉   | 693/1000 [29:21<13:00,  2.54s/it]Add a query parameter . --> Add a request parameter --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest query ( final String name1 , final Object value1 , final Object ... [[croker]] ) { query ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[croker]] . length ; i += 2 ) { String name = [[croker]] [ i ] . toString ( ) ; String value = [[croker]] [ i + 1 ] . toString ( ) ; query . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 684 ---------------------------------------------
Add a query map . --> Add a query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[regroup]] : queryMap . entrySet ( ) ) { query . add ( [[regroup]] . getKey ( ) , [[regroup]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 685 ---------------------------------------------
Build query string . --> Returns the protocol status --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[barra]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 686 ---------------------------------------------
Create a new HttpRequest . --> Convenience method for obtaining HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[olan]] ( final String [[poltergeists]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[poltergeists]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 687 ---------------------------------------------
Sets authentication . --> Set request username password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[ahmed]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 688 ---------------------------------------------
Sets the host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String host ) { this . host = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[kyung]] ( final String host ) { this . host = [[kyung]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[kyung]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 689 ---------------------------------------------
Sets the host header --> Picks pickett --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[pickett]] ( ) { String hostPort = this . host ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 690 ---------------------------------------------
Sets the resource path . --> Get HttpRequest instead of meeko --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[claustrophobia]] ( String [[meeko]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 691 ---------------------------------------------
Returns the host url . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[hypodermic]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 692 ---------------------------------------------
Sends a function and waits the result . --> send and receive the result --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[defeating]] > [[defeating]] sendAndReceive ( final Function < HttpResponse , [[defeating]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 513 / 153 / 27 / 693:  69%|██████▉   | 693/1000 [29:21<13:00,  2.54s/it][Succeeded / Failed / Skipped / Total] 513 / 154 / 27 / 694:  69%|██████▉   | 694/1000 [29:22<12:57,  2.54s/it][Succeeded / Failed / Skipped / Total] 513 / 154 / 27 / 694:  70%|██████▉   | 695/1000 [29:24<12:54,  2.54s/it][Succeeded / Failed / Skipped / Total] 514 / 154 / 27 / 695:  70%|██████▉   | 695/1000 [29:24<12:54,  2.54s/it][Succeeded / Failed / Skipped / Total] 515 / 154 / 27 / 696:  70%|██████▉   | 696/1000 [29:29<12:52,  2.54s/it][Succeeded / Failed / Skipped / Total] 515 / 154 / 27 / 696:  70%|██████▉   | 697/1000 [29:29<12:49,  2.54s/it][Succeeded / Failed / Skipped / Total] 516 / 154 / 27 / 697:  70%|██████▉   | 697/1000 [29:29<12:49,  2.54s/it][Succeeded / Failed / Skipped / Total] 517 / 154 / 27 / 698:  70%|██████▉   | 698/1000 [29:32<12:46,  2.54s/it][Succeeded / Failed / Skipped / Total] 517 / 154 / 27 / 698:  70%|██████▉   | 699/1000 [29:32<12:43,  2.54s/it][Succeeded / Failed / Skipped / Total] 518 / 154 / 27 / 699:  70%|██████▉   | 699/1000 [29:32<12:43,  2.54s/it][Succeeded / Failed / Skipped / Total] 519 / 154 / 27 / 700:  70%|███████   | 700/1000 [29:40<12:43,  2.54s/it][Succeeded / Failed / Skipped / Total] 519 / 154 / 27 / 700:  70%|███████   | 701/1000 [29:43<12:40,  2.54s/it][Succeeded / Failed / Skipped / Total] 519 / 155 / 27 / 701:  70%|███████   | 701/1000 [29:43<12:40,  2.54s/it][Succeeded / Failed / Skipped / Total] 519 / 155 / 27 / 701:  70%|███████   | 702/1000 [29:46<12:38,  2.54s/it][Succeeded / Failed / Skipped / Total] 520 / 155 / 27 / 702:  70%|███████   | 702/1000 [29:46<12:38,  2.54s/it][Succeeded / Failed / Skipped / Total] 520 / 155 / 27 / 702:  70%|███████   | 703/1000 [29:48<12:35,  2.54s/it]Returns the length of the specified table . --> englewood logging --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[englewood]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 694 ---------------------------------------------
Render the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[sickos]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 695 ---------------------------------------------
Sets query string . --> Set the request body --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String [[queryString]] , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[et]] ( final String [[assessed]] , final boolean decode ) { this . [[tizzy]] = HttpUtil . parseQuery ( [[et]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 696 ---------------------------------------------
Collect all action Runtimes . --> expedite implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[expedite]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action filters . --> duckling implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[duckling]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 698 ---------------------------------------------
Collect all action results . --> seeta is called in the future --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[seeta]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 699 ---------------------------------------------
Collect all interceptors . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[separating]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 700 ---------------------------------------------
Sets the bean property . --> Declarative Services method for setting rudge --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[rudge]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 701 ---------------------------------------------
Gets the value of the specified property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[reais]] > [[reais]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[reais]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[reais]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 702 ---------------------------------------------
Extract the value string from the property --> Get orlando string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String [[orlando]] ) { int [[amazon]] = StringUtil . indexOfChars ( [[orlando]] , INDEX_CHARS ) ; if ( [[amazon]] == - 1 ) { return [[orlando]] ; } return [[orlando]] . substring ( 0 , [[amazon]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 703 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 521 / 155 / 27 / 703:  70%|███████   | 703/1000 [29:48<12:35,  2.54s/it][Succeeded / Failed / Skipped / Total] 521 / 155 / 27 / 703:  70%|███████   | 704/1000 [29:50<12:32,  2.54s/it][Succeeded / Failed / Skipped / Total] 521 / 156 / 27 / 704:  70%|███████   | 704/1000 [29:50<12:32,  2.54s/it][Succeeded / Failed / Skipped / Total] 521 / 156 / 27 / 704:  70%|███████   | 705/1000 [29:53<12:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 522 / 156 / 27 / 705:  70%|███████   | 705/1000 [29:53<12:30,  2.54s/it][Succeeded / Failed / Skipped / Total] 522 / 156 / 27 / 705:  71%|███████   | 706/1000 [29:54<12:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 523 / 156 / 27 / 706:  71%|███████   | 706/1000 [29:54<12:27,  2.54s/it][Succeeded / Failed / Skipped / Total] 523 / 156 / 27 / 706:  71%|███████   | 707/1000 [30:00<12:26,  2.55s/it][Succeeded / Failed / Skipped / Total] 523 / 157 / 27 / 707:  71%|███████   | 707/1000 [30:00<12:26,  2.55s/it][Succeeded / Failed / Skipped / Total] 523 / 157 / 27 / 707:  71%|███████   | 708/1000 [30:08<12:25,  2.55s/it][Succeeded / Failed / Skipped / Total] 524 / 157 / 27 / 708:  71%|███████   | 708/1000 [30:08<12:25,  2.55s/it][Succeeded / Failed / Skipped / Total] 524 / 157 / 27 / 708:  71%|███████   | 709/1000 [30:09<12:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 525 / 157 / 27 / 709:  71%|███████   | 709/1000 [30:09<12:22,  2.55s/it][Succeeded / Failed / Skipped / Total] 525 / 157 / 27 / 709:  71%|███████   | 710/1000 [30:09<12:18,  2.55s/it][Succeeded / Failed / Skipped / Total] 525 / 158 / 27 / 710:  71%|███████   | 710/1000 [30:09<12:18,  2.55s/it][Succeeded / Failed / Skipped / Total] 525 / 158 / 27 / 710:  71%|███████   | 711/1000 [30:10<12:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 526 / 158 / 27 / 711:  71%|███████   | 711/1000 [30:10<12:16,  2.55s/it][Succeeded / Failed / Skipped / Total] 526 / 158 / 27 / 711:  71%|███████   | 712/1000 [30:12<12:13,  2.55s/it]Lookup an object . --> sanitary a String --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[sanitary]] ( final String ref ) { Object value = getObjectReference ( ref ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 704 ---------------------------------------------
Return the underlying writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[successor]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 705 ---------------------------------------------
Gets an object reference . --> Getter for the specified keren --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[erman]] ( final String [[keren]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[keren]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 706 ---------------------------------------------
Finds the table descriptor by columnRef . --> Returns the DbEntityDescriptor for the given columnRef --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[harpers]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 707 ---------------------------------------------
Set object references . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[alessandro]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Serialize a value to the JSON context . --> Serialize a T object to a JSON object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[hairspray]] , final T value ) { if ( [[hairspray]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 709 ---------------------------------------------
Register a hint . --> Set the hints --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[lcd]] ( final String [[colds]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[colds]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 710 ---------------------------------------------
Gets the DbEntityDescriptor for the given table --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[onscreen]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Set REPLACEME0 . --> Set theUENCING --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer [[maxAge]] = [[cookie]] . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( [[cookie]] . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[INFLUENCING]] ( final Cookie ... [[INFLUENCING]] ) { if ( [[INFLUENCING]] . length == 0 ) { return this ; } StringBuilder [[englewood]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[dishwasher]] : [[INFLUENCING]] ) { Integer [[engagements]] = [[dishwasher]] . getMaxAge ( ) ; if ( [[engagements]] != null && [[engagements]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[englewood]] . append ( "; " ) ; } first = "False" != "False" ; [[englewood]] . append ( [[dishwasher]] . getName ( ) ) ; [[englewood]] . append ( ' ' ) ; [[englewood]] . append ( [[dishwasher]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[englewood]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 712 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 158 / 27 / 712:  71%|███████   | 712/1000 [30:12<12:13,  2.55s/it][Succeeded / Failed / Skipped / Total] 527 / 158 / 27 / 712:  71%|███████▏  | 713/1000 [30:13<12:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 528 / 158 / 27 / 713:  71%|███████▏  | 713/1000 [30:13<12:10,  2.54s/it][Succeeded / Failed / Skipped / Total] 528 / 158 / 27 / 713:  71%|███████▏  | 714/1000 [30:21<12:09,  2.55s/it][Succeeded / Failed / Skipped / Total] 529 / 158 / 27 / 714:  71%|███████▏  | 714/1000 [30:21<12:09,  2.55s/it][Succeeded / Failed / Skipped / Total] 529 / 158 / 27 / 714:  72%|███████▏  | 715/1000 [30:24<12:07,  2.55s/it][Succeeded / Failed / Skipped / Total] 530 / 158 / 27 / 715:  72%|███████▏  | 715/1000 [30:24<12:07,  2.55s/it][Succeeded / Failed / Skipped / Total] 530 / 158 / 27 / 715:  72%|███████▏  | 716/1000 [30:29<12:05,  2.56s/it][Succeeded / Failed / Skipped / Total] 531 / 158 / 27 / 716:  72%|███████▏  | 716/1000 [30:29<12:05,  2.56s/it][Succeeded / Failed / Skipped / Total] 531 / 158 / 27 / 716:  72%|███████▏  | 717/1000 [30:34<12:04,  2.56s/it][Succeeded / Failed / Skipped / Total] 532 / 158 / 27 / 717:  72%|███████▏  | 717/1000 [30:34<12:04,  2.56s/it][Succeeded / Failed / Skipped / Total] 532 / 158 / 27 / 717:  72%|███████▏  | 718/1000 [30:35<12:01,  2.56s/it][Succeeded / Failed / Skipped / Total] 533 / 158 / 27 / 718:  72%|███████▏  | 718/1000 [30:35<12:01,  2.56s/it][Succeeded / Failed / Skipped / Total] 533 / 158 / 27 / 718:  72%|███████▏  | 719/1000 [30:36<11:57,  2.55s/it]Registers a new table reference . --> agoraphobia a link to the database --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[agoraphobia]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 713 ---------------------------------------------
lookup a table reference . --> permissible this query --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[permissible]] ( final String [[spree]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[spree]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[spree]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Convert column name to property name --> Generates a amarillo of columnName --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[amarillo]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 715 ---------------------------------------------
Gets the table alias . --> Gets the travers --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[travers]] ( final String [[delightful]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[buckskin]] = tableRefs . get ( [[delightful]] ) ; return [[buckskin]] == null ? null : [[buckskin]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 716 ---------------------------------------------
Store value . --> Get the requested offer --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[macdougall]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 717 ---------------------------------------------
Apply a column to a column name --> Apply caribbean toColumnName --> Socre: 1.0

[[[[Adv]]]]: public String applyToColumnName ( final String [[columnName]] ) { String [[propertyName]] = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String applyToColumnName ( final String [[caribbean]] ) { String [[barkeep]] = convertColumnNameToPropertyName ( [[caribbean]] ) ; return convertPropertyNameToColumnName ( [[barkeep]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 718 ---------------------------------------------
Convert a property name to column name --> Returns the string representation of an uppercase --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[concussion]] ( final String [[anisette]] ) { StringBuilder tableName = new StringBuilder ( [[anisette]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[anisette]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[anisette]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 534 / 158 / 27 / 719:  72%|███████▏  | 719/1000 [30:36<11:57,  2.55s/it][Succeeded / Failed / Skipped / Total] 534 / 158 / 27 / 719:  72%|███████▏  | 720/1000 [30:45<11:57,  2.56s/it][Succeeded / Failed / Skipped / Total] 534 / 159 / 27 / 720:  72%|███████▏  | 720/1000 [30:45<11:57,  2.56s/it][Succeeded / Failed / Skipped / Total] 534 / 160 / 27 / 721:  72%|███████▏  | 721/1000 [30:45<11:54,  2.56s/it][Succeeded / Failed / Skipped / Total] 534 / 160 / 27 / 721:  72%|███████▏  | 722/1000 [30:47<11:51,  2.56s/it][Succeeded / Failed / Skipped / Total] 534 / 161 / 27 / 722:  72%|███████▏  | 722/1000 [30:47<11:51,  2.56s/it][Succeeded / Failed / Skipped / Total] 535 / 161 / 27 / 723:  72%|███████▏  | 723/1000 [31:08<11:55,  2.58s/it][Succeeded / Failed / Skipped / Total] 535 / 161 / 27 / 723:  72%|███████▏  | 724/1000 [31:09<11:52,  2.58s/it][Succeeded / Failed / Skipped / Total] 536 / 161 / 27 / 724:  72%|███████▏  | 724/1000 [31:09<11:52,  2.58s/it][Succeeded / Failed / Skipped / Total] 536 / 161 / 27 / 724:  72%|███████▎  | 725/1000 [31:11<11:49,  2.58s/it][Succeeded / Failed / Skipped / Total] 536 / 162 / 27 / 725:  72%|███████▎  | 725/1000 [31:11<11:49,  2.58s/it][Succeeded / Failed / Skipped / Total] 536 / 162 / 27 / 725:  73%|███████▎  | 726/1000 [31:14<11:47,  2.58s/it][Succeeded / Failed / Skipped / Total] 537 / 162 / 27 / 726:  73%|███████▎  | 726/1000 [31:14<11:47,  2.58s/it][Succeeded / Failed / Skipped / Total] 537 / 162 / 27 / 726:  73%|███████▎  | 727/1000 [31:20<11:46,  2.59s/it]Returns the value of the given type . --> Returns null if t == null --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[supercharged]] > [[supercharged]] prepareGetValue ( final T t , final Class < [[supercharged]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[supercharged]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 720 ---------------------------------------------
Creates a new instance of the specified wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 721 ---------------------------------------------
Returns all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[iconic]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 722 ---------------------------------------------
Removes the range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int [[handlerEnd]] = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[rangeEnd]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[danes]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[danes]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int [[alcoholism]] = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[viola]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 723 ---------------------------------------------
Gets the relative path . --> storm the given file with the given name --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[storming]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 724 ---------------------------------------------
Gets the resource path . --> Returns null if filename doesn t exist --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[prefix]] >= filename . length ( ) || index < 0 || [[prefix]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[brained]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[omen]] = getPrefixLength ( filename ) ; if ( [[omen]] < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + separatorAdd ; if ( [[omen]] >= filename . length ( ) || index < 0 || [[omen]] >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( [[omen]] , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 725 ---------------------------------------------
Convert a separators to a system . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[magnifico]] ( final String [[sanest]] ) { if ( [[sanest]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[sanest]] ) ; } else { return separatorsToUnix ( [[sanest]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Inject attribute names . --> equilibrium - gets called from exited --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > [[attributeNames]] = [[servletRequest]] . getAttributeNames ( ) ; while ( [[attributeNames]] . hasMoreElements ( ) ) { final String attrName = [[attributeNames]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[equilibrium]] ( final HttpServletRequest [[exited]] , final Targets targets ) { final Enumeration < String > [[miao]] = [[exited]] . getAttributeNames ( ) ; while ( [[miao]] . hasMoreElements ( ) ) { final String attrName = [[miao]] . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[exited]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 537 / 163 / 27 / 727:  73%|███████▎  | 727/1000 [31:20<11:46,  2.59s/it][Succeeded / Failed / Skipped / Total] 537 / 163 / 27 / 727:  73%|███████▎  | 728/1000 [31:21<11:42,  2.58s/it][Succeeded / Failed / Skipped / Total] 538 / 163 / 27 / 728:  73%|███████▎  | 728/1000 [31:21<11:42,  2.58s/it][Succeeded / Failed / Skipped / Total] 538 / 163 / 27 / 728:  73%|███████▎  | 729/1000 [31:22<11:39,  2.58s/it][Succeeded / Failed / Skipped / Total] 538 / 164 / 27 / 729:  73%|███████▎  | 729/1000 [31:22<11:39,  2.58s/it][Succeeded / Failed / Skipped / Total] 538 / 164 / 27 / 729:  73%|███████▎  | 730/1000 [31:23<11:36,  2.58s/it][Succeeded / Failed / Skipped / Total] 539 / 164 / 27 / 730:  73%|███████▎  | 730/1000 [31:23<11:36,  2.58s/it][Succeeded / Failed / Skipped / Total] 539 / 164 / 27 / 730:  73%|███████▎  | 731/1000 [31:29<11:35,  2.59s/it][Succeeded / Failed / Skipped / Total] 539 / 165 / 27 / 731:  73%|███████▎  | 731/1000 [31:29<11:35,  2.59s/it][Succeeded / Failed / Skipped / Total] 539 / 165 / 27 / 731:  73%|███████▎  | 732/1000 [31:33<11:33,  2.59s/it][Succeeded / Failed / Skipped / Total] 539 / 166 / 27 / 732:  73%|███████▎  | 732/1000 [31:33<11:33,  2.59s/it][Succeeded / Failed / Skipped / Total] 539 / 166 / 27 / 732:  73%|███████▎  | 733/1000 [31:37<11:31,  2.59s/it][Succeeded / Failed / Skipped / Total] 540 / 166 / 27 / 733:  73%|███████▎  | 733/1000 [31:37<11:31,  2.59s/it][Succeeded / Failed / Skipped / Total] 540 / 166 / 27 / 733:  73%|███████▎  | 734/1000 [31:53<11:33,  2.61s/it]Sets the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[handphone]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 728 ---------------------------------------------
Starts the WebApp . --> Madvoc WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[fahey]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 729 ---------------------------------------------
Resolves a wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[unquenchable]] ( final Class < ? extends T > [[letterbox]] ) { String wrapperClassName = [[letterbox]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[letterbox]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 730 ---------------------------------------------
Register a component . --> Register a component --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[bandaging]] ) { Objects . requireNonNull ( [[bandaging]] ) ; madvocComponents . add ( ClassConsumer . of ( [[bandaging]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 731 ---------------------------------------------
Configure the default annotation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[footstep]] ( ) { final ActionConfigManager [[alans]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[alans]] . registerAnnotation ( Action . class ) ; [[alans]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
Register a MadvocContainer s components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[bookworm]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 733 ---------------------------------------------
Allows the user to exclude jars . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[brightened]] ) { for ( final String excludedJar : [[brightened]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 734 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 540 / 167 / 27 / 734:  73%|███████▎  | 734/1000 [31:53<11:33,  2.61s/it][Succeeded / Failed / Skipped / Total] 540 / 167 / 27 / 734:  74%|███████▎  | 735/1000 [31:53<11:30,  2.60s/it][Succeeded / Failed / Skipped / Total] 541 / 167 / 27 / 735:  74%|███████▎  | 735/1000 [31:53<11:30,  2.60s/it][Succeeded / Failed / Skipped / Total] 541 / 167 / 27 / 735:  74%|███████▎  | 736/1000 [31:56<11:27,  2.60s/it][Succeeded / Failed / Skipped / Total] 542 / 167 / 27 / 736:  74%|███████▎  | 736/1000 [31:56<11:27,  2.60s/it][Succeeded / Failed / Skipped / Total] 542 / 167 / 27 / 736:  74%|███████▎  | 737/1000 [32:04<11:26,  2.61s/it][Succeeded / Failed / Skipped / Total] 543 / 167 / 27 / 737:  74%|███████▎  | 737/1000 [32:04<11:26,  2.61s/it][Succeeded / Failed / Skipped / Total] 543 / 167 / 27 / 737:  74%|███████▍  | 738/1000 [32:09<11:25,  2.61s/it][Succeeded / Failed / Skipped / Total] 544 / 167 / 27 / 738:  74%|███████▍  | 738/1000 [32:09<11:25,  2.61s/it][Succeeded / Failed / Skipped / Total] 544 / 167 / 27 / 738:  74%|███████▍  | 739/1000 [32:10<11:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 545 / 167 / 27 / 739:  74%|███████▍  | 739/1000 [32:10<11:21,  2.61s/it][Succeeded / Failed / Skipped / Total] 545 / 167 / 27 / 739:  74%|███████▍  | 740/1000 [32:13<11:19,  2.61s/it]Injects the uploaded files from the multipart request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[multipartRequest]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( [[paramName]] ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = [[multipartRequest]] . getFiles ( [[paramName]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[hippocratic]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[hippocratic]] . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = [[hippocratic]] . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[flourish]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[flourish]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[blah]] = in . matchedName ( [[flourish]] ) ; if ( [[blah]] != null ) { final FileUpload [ ] paramValues = [[hippocratic]] . getFiles ( [[flourish]] ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[blah]] , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 735 ---------------------------------------------
Scan the given file . --> Find a file in the given root --> Socre: 1.0

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[hollister]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 736 ---------------------------------------------
Fill the list of included jars . --> Adds a list of robby images to the cluster --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[abomination]] ( final String ... [[baptiste]] ) { for ( final String [[robby]] : [[baptiste]] ) { rulesJars . include ( [[robby]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 737 ---------------------------------------------
Returns the signature of bytecode . --> toughened method --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[toughened]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 738 ---------------------------------------------
Scan . --> Add files to scan --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[balder]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 739 ---------------------------------------------
Gets the class path to exclude . --> Add a borrowed class --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... [[excludedEntries]] ) { for ( final String excludedEntry : [[excludedEntries]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[boeing]] ( final String ... [[borrowed]] ) { for ( final String excludedEntry : [[borrowed]] ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 546 / 167 / 27 / 740:  74%|███████▍  | 740/1000 [32:13<11:19,  2.61s/it][Succeeded / Failed / Skipped / Total] 546 / 167 / 27 / 740:  74%|███████▍  | 741/1000 [32:14<11:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 167 / 27 / 741:  74%|███████▍  | 741/1000 [32:14<11:16,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 167 / 27 / 741:  74%|███████▍  | 742/1000 [32:18<11:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 168 / 27 / 742:  74%|███████▍  | 742/1000 [32:18<11:13,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 168 / 27 / 742:  74%|███████▍  | 743/1000 [32:19<11:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 169 / 27 / 743:  74%|███████▍  | 743/1000 [32:19<11:10,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 169 / 27 / 743:  74%|███████▍  | 744/1000 [32:22<11:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 170 / 27 / 744:  74%|███████▍  | 744/1000 [32:22<11:08,  2.61s/it][Succeeded / Failed / Skipped / Total] 547 / 170 / 27 / 744:  74%|███████▍  | 745/1000 [32:23<11:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 548 / 170 / 27 / 745:  74%|███████▍  | 745/1000 [32:23<11:05,  2.61s/it][Succeeded / Failed / Skipped / Total] 548 / 170 / 27 / 745:  75%|███████▍  | 746/1000 [32:30<11:04,  2.61s/it]Splits the given filename . --> Liest ein kale ein --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[kale]] ( final String [[atropine]] ) { String prefix = getPrefix ( [[atropine]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[atropine]] ) ; int lastExtensionIndex = indexOfExtension ( [[atropine]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[atropine]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[atropine]] . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = [[atropine]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[atropine]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[atropine]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[atropine]] . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[atropine]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 741 ---------------------------------------------
Create new JtxTransaction --> Return a copy of the supplied scope --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[licked]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 742 ---------------------------------------------
Adds included entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[acres]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 743 ---------------------------------------------
Start the jar . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[mcginnis]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 744 ---------------------------------------------
Creates a default or scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[muy]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
Adds a new scope to the scope list . --> Convenience method for confounded --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[confounded]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 548 / 171 / 27 / 746:  75%|███████▍  | 746/1000 [32:30<11:04,  2.61s/it][Succeeded / Failed / Skipped / Total] 549 / 171 / 27 / 747:  75%|███████▍  | 747/1000 [32:30<11:00,  2.61s/it][Succeeded / Failed / Skipped / Total] 549 / 171 / 27 / 747:  75%|███████▍  | 748/1000 [32:38<10:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 550 / 171 / 27 / 748:  75%|███████▍  | 748/1000 [32:38<10:59,  2.62s/it][Succeeded / Failed / Skipped / Total] 551 / 171 / 27 / 749:  75%|███████▍  | 749/1000 [32:42<10:57,  2.62s/it][Succeeded / Failed / Skipped / Total] 551 / 171 / 27 / 749:  75%|███████▌  | 750/1000 [32:46<10:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 552 / 171 / 27 / 750:  75%|███████▌  | 750/1000 [32:46<10:55,  2.62s/it][Succeeded / Failed / Skipped / Total] 553 / 171 / 27 / 751:  75%|███████▌  | 751/1000 [32:47<10:52,  2.62s/it][Succeeded / Failed / Skipped / Total] 553 / 171 / 27 / 751:  75%|███████▌  | 752/1000 [32:50<10:49,  2.62s/it]Injects the parameters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[j]] = 0 ; [[j]] < paramValues . length ; [[j]] ++ ) { final String p = paramValues [ [[j]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[j]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[hippocratic]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[englander]] = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( [[englander]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[englander]] ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( [[englander]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int [[paycheck]] = 0 ; [[paycheck]] < paramValues . length ; [[paycheck]] ++ ) { final String p = paramValues [ [[paycheck]] ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ [[paycheck]] ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 747 ---------------------------------------------
Create a copy of the given source object . --> Create an instance of BeanCopy --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[runoff]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 748 ---------------------------------------------
Copies the bean . --> F743 --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[fare]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 749 ---------------------------------------------
Returns the MadvocScope of the given type . --> Return all registered MadvocScope --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[corruptible]] ) { for ( final MadvocScope [[sorcerers]] : allScopes ) { if ( [[sorcerers]] . getClass ( ) . equals ( [[corruptible]] ) ) { return [[sorcerers]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 750 ---------------------------------------------
Visits a property value . --> Visit a value --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object value ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , value ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[disinherited]] , final Object value ) { if ( isTargetMap ) { [[disinherited]] = LEFT_SQ_BRACKET + [[disinherited]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[disinherited]] , value ) ; return "[[Ahmed]]" == "[[Ahmed]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 751 ---------------------------------------------
Set the template data . --> Set the template data --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[bunches]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 752 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 554 / 171 / 27 / 752:  75%|███████▌  | 752/1000 [32:50<10:49,  2.62s/it][Succeeded / Failed / Skipped / Total] 555 / 171 / 27 / 753:  75%|███████▌  | 753/1000 [32:55<10:47,  2.62s/it][Succeeded / Failed / Skipped / Total] 555 / 171 / 27 / 753:  75%|███████▌  | 754/1000 [32:57<10:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 556 / 171 / 27 / 754:  75%|███████▌  | 754/1000 [32:57<10:45,  2.62s/it][Succeeded / Failed / Skipped / Total] 556 / 172 / 27 / 755:  76%|███████▌  | 755/1000 [33:01<10:43,  2.62s/it][Succeeded / Failed / Skipped / Total] 556 / 172 / 27 / 755:  76%|███████▌  | 756/1000 [33:06<10:41,  2.63s/it][Succeeded / Failed / Skipped / Total] 557 / 172 / 27 / 756:  76%|███████▌  | 756/1000 [33:06<10:41,  2.63s/it]Removes the size of the token from the set . --> diligence --> Socre: 1.0

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[iterator]] = tokenSet . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token token = [[iterator]] . next ( ) ; if ( token . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[diligence]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[accumulate]] = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > [[irretrievably]] = tokenSet . iterator ( ) ; while ( [[irretrievably]] . hasNext ( ) ) { Token token = [[irretrievably]] . next ( ) ; if ( token . isExpired ( ) ) { [[irretrievably]] . remove ( ) ; continue ; } if ( token . validUntil < [[accumulate]] ) { [[accumulate]] = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 753 ---------------------------------------------
Checks if the token is valid . --> Check that the session is valid --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[tokenValue]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[t]] = it . next ( ) ; if ( [[t]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession session , final String [[jude]] ) { Set < Token > [[stalls]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[stalls]] == null ) && ( [[jude]] == null ) ) { return "True" == "True" ; } if ( ( [[stalls]] == null ) || ( [[jude]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[stalls]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[swab]] = it . next ( ) ; if ( [[swab]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[swab]] . getValue ( ) . equals ( [[jude]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 754 ---------------------------------------------
Register bean . --> Helper method for jihadi --> Socre: 1.0

[[[[Adv]]]]: protected void [[registerBean]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void [[jihadi]] ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 755 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[slushee]] = ( S ) scopes . get ( scopeType ) ; if ( [[slushee]] == null ) { try { [[slushee]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[slushee]] ) ; scopes . put ( scopeType , [[slushee]] ) ; } return [[slushee]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Removes a bean from this node . --> Convenience method for serialization --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[asbury]] ( final Class [[combats]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 558 / 172 / 27 / 757:  76%|███████▌  | 757/1000 [33:08<10:38,  2.63s/it][Succeeded / Failed / Skipped / Total] 558 / 172 / 27 / 757:  76%|███████▌  | 758/1000 [33:13<10:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 559 / 172 / 27 / 758:  76%|███████▌  | 758/1000 [33:13<10:36,  2.63s/it][Succeeded / Failed / Skipped / Total] 559 / 173 / 27 / 759:  76%|███████▌  | 759/1000 [33:13<10:32,  2.63s/it][Succeeded / Failed / Skipped / Total] 559 / 173 / 27 / 759:  76%|███████▌  | 760/1000 [33:16<10:30,  2.63s/it]Register a custom injection point . --> This method is used to parse an annotated class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[outdoorsman]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 758 ---------------------------------------------
Registers a property InjectionPoint . --> Create a bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[buick]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Scan jar files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry [[classPathEntry]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[classPathEntry]] ) ; } finally { [[classPathEntry]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry [[lodge]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[lodge]] ) ; } finally { [[lodge]] . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry [[lodge]] = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( [[lodge]] ) ; } finally { [[lodge]] . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 560 / 173 / 27 / 760:  76%|███████▌  | 760/1000 [33:16<10:30,  2.63s/it][Succeeded / Failed / Skipped / Total] 561 / 173 / 27 / 761:  76%|███████▌  | 761/1000 [33:24<10:29,  2.63s/it][Succeeded / Failed / Skipped / Total] 561 / 173 / 27 / 761:  76%|███████▌  | 762/1000 [33:37<10:30,  2.65s/it][Succeeded / Failed / Skipped / Total] 562 / 173 / 27 / 762:  76%|███████▌  | 762/1000 [33:37<10:30,  2.65s/it][Succeeded / Failed / Skipped / Total] 562 / 173 / 27 / 762:  76%|███████▋  | 763/1000 [33:42<10:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 563 / 173 / 27 / 763:  76%|███████▋  | 763/1000 [33:42<10:28,  2.65s/it][Succeeded / Failed / Skipped / Total] 563 / 173 / 27 / 763:  76%|███████▋  | 764/1000 [33:45<10:25,  2.65s/it]Register a set InjectionPoint . --> Add a property to the BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteSetInjectionPoint]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void [[acrobats]] ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 761 ---------------------------------------------
Register a bean definition with destroy methods . --> Open a DestroyMethodPoint --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[liter]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 762 ---------------------------------------------
Prepare a token from the session . --> tinhorn a random string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[tinhorn]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[homes]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[homes]] == null ) { [[homes]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[homes]] ) ; } String [[previously]] ; boolean unique ; do { [[previously]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[homes]] ) ; unique = [[homes]] . add ( new Token ( [[previously]] , timeToLive ) ) ; } while ( ! unique ) ; return [[previously]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 763 ---------------------------------------------
Register a method injection point . --> israelites a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] [[references]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] != null ) { method = [[md]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[references]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[israelites]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] [[terrier]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor [[franziska]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[franziska]] != null ) { method = [[franziska]] . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , [[terrier]] ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
[Succeeded / Failed / Skipped / Total] 564 / 173 / 27 / 764:  76%|███████▋  | 764/1000 [33:45<10:25,  2.65s/it][Succeeded / Failed / Skipped / Total] 564 / 173 / 27 / 764:  76%|███████▋  | 765/1000 [33:46<10:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 565 / 173 / 27 / 765:  76%|███████▋  | 765/1000 [33:46<10:22,  2.65s/it][Succeeded / Failed / Skipped / Total] 565 / 173 / 27 / 765:  77%|███████▋  | 766/1000 [33:47<10:19,  2.65s/it][Succeeded / Failed / Skipped / Total] 566 / 173 / 27 / 766:  77%|███████▋  | 766/1000 [33:47<10:19,  2.65s/it][Succeeded / Failed / Skipped / Total] 566 / 173 / 27 / 766:  77%|███████▋  | 767/1000 [33:49<10:16,  2.65s/it][Succeeded / Failed / Skipped / Total] 567 / 173 / 27 / 767:  77%|███████▋  | 767/1000 [33:49<10:16,  2.65s/it][Succeeded / Failed / Skipped / Total] 567 / 173 / 27 / 767:  77%|███████▋  | 768/1000 [33:50<10:13,  2.64s/it]--------------------------------------------- Result 764 ---------------------------------------------
Resolve bean names for given type . --> Return the name of the specified class --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = [[entry]] . getKey ( ) ; list . add ( [[beanName]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[loredana]] ( final Class [[alias]] ) { String [ ] beanNames = beanCollections . get ( [[alias]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[saleem]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[saleem]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[alias]] ) ) { String [[tino]] = [[saleem]] . getKey ( ) ; list . add ( [[tino]] ) ; } } if ( list . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = list . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[alias]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 765 ---------------------------------------------
Register a provider --> asceticism MethodInterceptor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[md]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[asceticism]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor [[unusable]] = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( [[unusable]] == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , [[unusable]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 766 ---------------------------------------------
Register a new init method declaration . --> Register a new BeanDefinition with the given beanName --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy [[invocationStrategy]] , String ... [[initMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[invocationStrategy]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy [[hallway]] , String ... [[luciano]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[luciano]] == null ) { [[luciano]] = StringPool . EMPTY_ARRAY ; } int total = [[luciano]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[luciano]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[luciano]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + [[luciano]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , [[hallway]] ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Iterate over all bean types --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[circumvent]] ( final Class type , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 568 / 173 / 27 / 768:  77%|███████▋  | 768/1000 [33:50<10:13,  2.64s/it][Succeeded / Failed / Skipped / Total] 568 / 173 / 27 / 768:  77%|███████▋  | 769/1000 [33:51<10:10,  2.64s/it][Succeeded / Failed / Skipped / Total] 569 / 173 / 27 / 769:  77%|███████▋  | 769/1000 [33:51<10:10,  2.64s/it][Succeeded / Failed / Skipped / Total] 569 / 173 / 27 / 769:  77%|███████▋  | 770/1000 [33:54<10:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 570 / 173 / 27 / 770:  77%|███████▋  | 770/1000 [33:54<10:07,  2.64s/it][Succeeded / Failed / Skipped / Total] 570 / 173 / 27 / 770:  77%|███████▋  | 771/1000 [33:59<10:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 571 / 173 / 27 / 771:  77%|███████▋  | 771/1000 [33:59<10:05,  2.65s/it][Succeeded / Failed / Skipped / Total] 571 / 173 / 27 / 771:  77%|███████▋  | 772/1000 [34:04<10:03,  2.65s/it][Succeeded / Failed / Skipped / Total] 571 / 174 / 27 / 772:  77%|███████▋  | 772/1000 [34:04<10:03,  2.65s/it][Succeeded / Failed / Skipped / Total] 572 / 174 / 27 / 773:  77%|███████▋  | 773/1000 [34:04<10:00,  2.65s/it][Succeeded / Failed / Skipped / Total] 572 / 174 / 27 / 773:  77%|███████▋  | 774/1000 [34:15<10:00,  2.66s/it][Succeeded / Failed / Skipped / Total] 573 / 174 / 27 / 774:  77%|███████▋  | 774/1000 [34:15<10:00,  2.66s/it][Succeeded / Failed / Skipped / Total] 573 / 174 / 27 / 774:  78%|███████▊  | 775/1000 [34:18<09:57,  2.66s/it][Succeeded / Failed / Skipped / Total] 574 / 174 / 27 / 775:  78%|███████▊  | 775/1000 [34:18<09:57,  2.66s/it][Succeeded / Failed / Skipped / Total] 574 / 174 / 27 / 775:  78%|███████▊  | 776/1000 [34:19<09:54,  2.65s/it]Register provider definition . --> Gardenia a class --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[gardenia]] ( final String [[theo]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[ascribe]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[ascribe]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[theo]] , md . getMethod ( ) ) ; providers . put ( [[theo]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Define the parameters . --> dunlap - add --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[dunlap]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 770 ---------------------------------------------
Intercept the action request . --> Intercept the given ActionRequest --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[lewin]] ) throws Exception { printBefore ( [[lewin]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[lewin]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[lewin]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 771 ---------------------------------------------
Returns a field name with the specified index . --> Liefert ein --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[requite]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 772 ---------------------------------------------
Registers a BeanDefinition for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[yoshida]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[debra]] , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 773 ---------------------------------------------
Visit an int value . --> Push a lucca onto the MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor [[civvy]] , final int [[lucca]] ) { if ( [[lucca]] <= 5 ) { [[civvy]] . visitInsn ( ICONST_0 + [[lucca]] ) ; } else if ( [[lucca]] <= Byte . MAX_VALUE ) { [[civvy]] . visitIntInsn ( BIPUSH , [[lucca]] ) ; } else { [[civvy]] . visitIntInsn ( SIPUSH , [[lucca]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 774 ---------------------------------------------
Load the static method arguments . --> drab MethodVisitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[drab]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[chimpanzees]] = 0 ; [[chimpanzees]] < methodInfo . getArgumentsCount ( ) ; [[chimpanzees]] ++ ) { loadMethodArgument ( mv , methodInfo , [[chimpanzees]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 775 ---------------------------------------------
Sets the argument index . --> Method for hieroglyphics --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[hieroglyphics]] ( final MethodInfo [[prophecies]] , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > [[prophecies]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
[Succeeded / Failed / Skipped / Total] 574 / 175 / 27 / 776:  78%|███████▊  | 776/1000 [34:19<09:54,  2.65s/it][Succeeded / Failed / Skipped / Total] 574 / 175 / 27 / 776:  78%|███████▊  | 777/1000 [34:19<09:51,  2.65s/it][Succeeded / Failed / Skipped / Total] 575 / 175 / 27 / 777:  78%|███████▊  | 777/1000 [34:19<09:51,  2.65s/it][Succeeded / Failed / Skipped / Total] 575 / 175 / 27 / 777:  78%|███████▊  | 778/1000 [34:22<09:48,  2.65s/it][Succeeded / Failed / Skipped / Total] 576 / 175 / 27 / 778:  78%|███████▊  | 778/1000 [34:22<09:48,  2.65s/it][Succeeded / Failed / Skipped / Total] 576 / 175 / 27 / 778:  78%|███████▊  | 779/1000 [34:28<09:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 577 / 175 / 27 / 779:  78%|███████▊  | 779/1000 [34:28<09:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 577 / 175 / 27 / 779:  78%|███████▊  | 780/1000 [34:38<09:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 578 / 175 / 27 / 780:  78%|███████▊  | 780/1000 [34:38<09:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 578 / 175 / 27 / 780:  78%|███████▊  | 781/1000 [34:40<09:43,  2.66s/it][Succeeded / Failed / Skipped / Total] 579 / 175 / 27 / 781:  78%|███████▊  | 781/1000 [34:40<09:43,  2.66s/it][Succeeded / Failed / Skipped / Total] 579 / 175 / 27 / 781:  78%|███████▊  | 782/1000 [34:40<09:40,  2.66s/it][Succeeded / Failed / Skipped / Total] 579 / 176 / 27 / 782:  78%|███████▊  | 782/1000 [34:40<09:40,  2.66s/it][Succeeded / Failed / Skipped / Total] 579 / 176 / 27 / 782:  78%|███████▊  | 783/1000 [34:45<09:37,  2.66s/it]--------------------------------------------- Result 776 ---------------------------------------------
Resolves the Java version . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[clicker]] ( final int version ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return version > platformVersion ? version : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 777 ---------------------------------------------
Load the special method arguments . --> dona --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[ducking]] ( final MethodVisitor [[shona]] , final MethodInfo methodInfo ) { [[shona]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[shona]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 778 ---------------------------------------------
advice method name . --> mott - 1 --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[mott]] ( final String [[debilitating]] , final int [[intrinsically]] ) { return ProxettaNames . methodPrefix + [[debilitating]] + ProxettaNames . methodDivider + [[intrinsically]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 779 ---------------------------------------------
Generate the array type . --> This method implements the opcode stack --> Socre: 1.0

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class [[soupçon]] ) { if ( [[soupçon]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[soupçon]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[soupçon]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[soupçon]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[soupçon]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[soupçon]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[soupçon]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[soupçon]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[soupçon]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 780 ---------------------------------------------
Create method signature key string . --> Checks the validity of a trays --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int [[access]] , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( [[access]] ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[checkpoints]] ( final int [[trays]] , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( [[trays]] ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 781 ---------------------------------------------
Prepares the return value . --> Writes a method to the given type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[ghoul]] ( final MethodVisitor [[exhales]] , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[exhales]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[exhales]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[exhales]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Load the virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[deteriorating]] ( final MethodVisitor [[compensates]] , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[compensates]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
[Succeeded / Failed / Skipped / Total] 580 / 176 / 27 / 783:  78%|███████▊  | 783/1000 [34:45<09:37,  2.66s/it][Succeeded / Failed / Skipped / Total] 580 / 176 / 27 / 783:  78%|███████▊  | 784/1000 [34:48<09:35,  2.66s/it][Succeeded / Failed / Skipped / Total] 581 / 176 / 27 / 784:  78%|███████▊  | 784/1000 [34:48<09:35,  2.66s/it][Succeeded / Failed / Skipped / Total] 581 / 176 / 27 / 784:  78%|███████▊  | 785/1000 [34:50<09:32,  2.66s/it][Succeeded / Failed / Skipped / Total] 582 / 176 / 27 / 785:  78%|███████▊  | 785/1000 [34:50<09:32,  2.66s/it][Succeeded / Failed / Skipped / Total] 582 / 176 / 27 / 785:  79%|███████▊  | 786/1000 [34:51<09:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 582 / 177 / 27 / 786:  79%|███████▊  | 786/1000 [34:51<09:29,  2.66s/it][Succeeded / Failed / Skipped / Total] 582 / 177 / 27 / 786:  79%|███████▊  | 787/1000 [34:57<09:27,  2.67s/it][Succeeded / Failed / Skipped / Total] 583 / 177 / 27 / 787:  79%|███████▊  | 787/1000 [34:57<09:27,  2.67s/it][Succeeded / Failed / Skipped / Total] 583 / 177 / 27 / 787:  79%|███████▉  | 788/1000 [35:01<09:25,  2.67s/it][Succeeded / Failed / Skipped / Total] 583 / 178 / 27 / 788:  79%|███████▉  | 788/1000 [35:01<09:25,  2.67s/it][Succeeded / Failed / Skipped / Total] 583 / 178 / 27 / 788:  79%|███████▉  | 789/1000 [35:04<09:22,  2.67s/it]--------------------------------------------- Result 783 ---------------------------------------------
Stores into an array . --> approachable method --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[approachable]] ( final MethodVisitor mv , final Class [[cats]] ) { if ( [[cats]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[cats]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[cats]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[cats]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[cats]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[cats]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[cats]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[cats]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 784 ---------------------------------------------
Resolves authorization token . --> Gets germaine from request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[germaine]] ( final HttpServletRequest request ) { String header = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 785 ---------------------------------------------
Extract the default encoding from the given contentType . --> Implementation of transmit --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[transmit]] ( final String [[narcotic]] , String defaultEncoding ) { String encoding = [[transmit]] ( [[narcotic]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 786 ---------------------------------------------
Load the method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[offset]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bryn]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int [[valerie]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[valerie]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[valerie]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[valerie]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[valerie]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[valerie]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
Checks if the flags are empty . --> add Web Web Web Web Web Web --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[addis]] ( Flags [[goner]] ) { if ( [[goner]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[goner]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[goner]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 788 ---------------------------------------------
Store method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[type]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[dacha]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int index ) { int offset = methodInfo . getArgumentOffset ( index ) ; int [[teamster]] = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( [[teamster]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 584 / 178 / 27 / 789:  79%|███████▉  | 789/1000 [35:04<09:22,  2.67s/it][Succeeded / Failed / Skipped / Total] 584 / 178 / 27 / 789:  79%|███████▉  | 790/1000 [35:09<09:20,  2.67s/it][Succeeded / Failed / Skipped / Total] 585 / 178 / 27 / 790:  79%|███████▉  | 790/1000 [35:09<09:20,  2.67s/it][Succeeded / Failed / Skipped / Total] 585 / 178 / 27 / 790:  79%|███████▉  | 791/1000 [35:09<09:17,  2.67s/it][Succeeded / Failed / Skipped / Total] 586 / 178 / 27 / 791:  79%|███████▉  | 791/1000 [35:09<09:17,  2.67s/it][Succeeded / Failed / Skipped / Total] 586 / 178 / 27 / 791:  79%|███████▉  | 792/1000 [35:12<09:14,  2.67s/it][Succeeded / Failed / Skipped / Total] 587 / 178 / 27 / 792:  79%|███████▉  | 792/1000 [35:12<09:14,  2.67s/it][Succeeded / Failed / Skipped / Total] 587 / 178 / 27 / 792:  79%|███████▉  | 793/1000 [35:14<09:11,  2.67s/it][Succeeded / Failed / Skipped / Total] 588 / 178 / 27 / 793:  79%|███████▉  | 793/1000 [35:14<09:11,  2.67s/it][Succeeded / Failed / Skipped / Total] 588 / 178 / 27 / 793:  79%|███████▉  | 794/1000 [35:14<09:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 588 / 179 / 27 / 794:  79%|███████▉  | 794/1000 [35:14<09:08,  2.66s/it][Succeeded / Failed / Skipped / Total] 588 / 179 / 27 / 794:  80%|███████▉  | 795/1000 [35:21<09:07,  2.67s/it]Prepares the file . --> prepareDownload method --> Socre: 1.0

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[response]] , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[foi]] , final File [[nuptials]] , final String [[laramie]] ) { if ( ! [[nuptials]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[nuptials]] ) ; } if ( [[nuptials]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[nuptials]] ) ; } prepareResponse ( [[foi]] , [[nuptials]] . getAbsolutePath ( ) , [[laramie]] , ( int ) [[nuptials]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 790 ---------------------------------------------
Store context path . --> Set the coronado attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[coronado]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 791 ---------------------------------------------
Check authentication . --> Decorates a approachable response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[approachable]] ( final HttpServletResponse resp , final String [[worn]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[worn]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 792 ---------------------------------------------
Store the context path . --> Sets the given contextPath variable --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[contrast]] ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 793 ---------------------------------------------
Read the request to string . --> Unpished a HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader [[buff]] = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[buff]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[unpunished]] ( final HttpServletRequest [[purged]] ) throws IOException { BufferedReader [[alitalia]] = [[purged]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( [[alitalia]] , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 794 ---------------------------------------------
Decodes a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[dest]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[dest]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int [[j]] = 0 ; sndx <= endx - pad ; [[j]] ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - [[j]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[dest]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[isla]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[counted]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[counted]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[counted]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[counted]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int [[negotiation]] = 0 ; sndx <= endx - pad ; [[negotiation]] ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - [[negotiation]] * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[counted]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[counted]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 589 / 179 / 27 / 795:  80%|███████▉  | 795/1000 [35:21<09:07,  2.67s/it][Succeeded / Failed / Skipped / Total] 589 / 179 / 27 / 795:  80%|███████▉  | 796/1000 [35:22<09:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 590 / 179 / 27 / 796:  80%|███████▉  | 796/1000 [35:22<09:03,  2.67s/it][Succeeded / Failed / Skipped / Total] 590 / 179 / 27 / 796:  80%|███████▉  | 797/1000 [35:23<09:00,  2.66s/it][Succeeded / Failed / Skipped / Total] 591 / 179 / 27 / 797:  80%|███████▉  | 797/1000 [35:23<09:00,  2.66s/it][Succeeded / Failed / Skipped / Total] 591 / 179 / 27 / 797:  80%|███████▉  | 798/1000 [35:27<08:58,  2.67s/it][Succeeded / Failed / Skipped / Total] 592 / 179 / 27 / 798:  80%|███████▉  | 798/1000 [35:27<08:58,  2.67s/it][Succeeded / Failed / Skipped / Total] 592 / 179 / 27 / 798:  80%|███████▉  | 799/1000 [35:28<08:55,  2.66s/it][Succeeded / Failed / Skipped / Total] 593 / 179 / 27 / 799:  80%|███████▉  | 799/1000 [35:28<08:55,  2.66s/it][Succeeded / Failed / Skipped / Total] 593 / 179 / 27 / 799:  80%|████████  | 800/1000 [35:28<08:52,  2.66s/it][Succeeded / Failed / Skipped / Total] 594 / 179 / 27 / 800:  80%|████████  | 800/1000 [35:28<08:52,  2.66s/it][Succeeded / Failed / Skipped / Total] 594 / 179 / 27 / 800:  80%|████████  | 801/1000 [35:30<08:49,  2.66s/it][Succeeded / Failed / Skipped / Total] 595 / 179 / 27 / 801:  80%|████████  | 801/1000 [35:30<08:49,  2.66s/it][Succeeded / Failed / Skipped / Total] 595 / 179 / 27 / 801:  80%|████████  | 802/1000 [35:31<08:46,  2.66s/it]Render the given body . --> Render the content of an XML fragment --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[cliff]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[cliff]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 796 ---------------------------------------------
Invokes body . --> Convenience method to invoke a JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[dollop]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 797 ---------------------------------------------
Prepare the response . --> Get the mime description of a file --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[invested]] ( final HttpServletResponse response , final String fileName , String [[cyberdyne]] , final int fileSize ) { if ( ( [[cyberdyne]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[cyberdyne]] = MimeTypes . getMimeType ( extension ) ; } if ( [[cyberdyne]] != null ) { response . setContentType ( [[cyberdyne]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 798 ---------------------------------------------
Prepare parameters . --> If treatEmptyParamsAsNull is set this method will return empty array --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[caravan]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 799 ---------------------------------------------
Returns true if the specified parameter is a GET request . --> Does anthropology? --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String [[name]] ) { [[name]] = URLCoder . encodeQueryParam ( [[name]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[name]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[doy]] ( final HttpServletRequest request , String [[anthropology]] ) { [[anthropology]] = URLCoder . encodeQueryParam ( [[anthropology]] ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[anthropology]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Retrieves all the cookies in the request . --> ench - check for a request --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( cookies . length ) ; for ( Cookie [[cookie]] : cookies ) { if ( [[cookie]] . getName ( ) . equals ( [[cookieName]] ) ) { [[list]] . add ( [[cookie]] ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[enchanted]] ( final HttpServletRequest request , final String [[emm]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > [[rico]] = new ArrayList <> ( cookies . length ) ; for ( Cookie [[embarass]] : cookies ) { if ( [[embarass]] . getName ( ) . equals ( [[emm]] ) ) { [[rico]] . add ( [[embarass]] ) ; } } if ( [[rico]] . isEmpty ( ) ) { return null ; } return [[rico]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the given body to string . --> Encodes a JspFragment --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[sleepwalks]] ( final JspFragment body ) throws JspException { char [ ] result = renderBody ( body ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 802 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 596 / 179 / 27 / 802:  80%|████████  | 802/1000 [35:31<08:46,  2.66s/it][Succeeded / Failed / Skipped / Total] 596 / 179 / 27 / 802:  80%|████████  | 803/1000 [35:37<08:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 597 / 179 / 27 / 803:  80%|████████  | 803/1000 [35:37<08:44,  2.66s/it][Succeeded / Failed / Skipped / Total] 597 / 179 / 27 / 803:  80%|████████  | 804/1000 [35:39<08:41,  2.66s/it][Succeeded / Failed / Skipped / Total] 598 / 179 / 27 / 804:  80%|████████  | 804/1000 [35:39<08:41,  2.66s/it][Succeeded / Failed / Skipped / Total] 598 / 179 / 27 / 804:  80%|████████  | 805/1000 [35:41<08:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 599 / 179 / 27 / 805:  80%|████████  | 805/1000 [35:41<08:38,  2.66s/it][Succeeded / Failed / Skipped / Total] 599 / 179 / 27 / 805:  81%|████████  | 806/1000 [35:48<08:37,  2.67s/it][Succeeded / Failed / Skipped / Total] 599 / 180 / 27 / 806:  81%|████████  | 806/1000 [35:48<08:37,  2.67s/it][Succeeded / Failed / Skipped / Total] 599 / 180 / 27 / 806:  81%|████████  | 807/1000 [35:51<08:34,  2.67s/it][Succeeded / Failed / Skipped / Total] 600 / 180 / 27 / 807:  81%|████████  | 807/1000 [35:51<08:34,  2.67s/it][Succeeded / Failed / Skipped / Total] 600 / 180 / 27 / 807:  81%|████████  | 808/1000 [35:52<08:31,  2.66s/it][Succeeded / Failed / Skipped / Total] 601 / 180 / 27 / 808:  81%|████████  | 808/1000 [35:52<08:31,  2.66s/it][Succeeded / Failed / Skipped / Total] 601 / 180 / 27 / 808:  81%|████████  | 809/1000 [35:53<08:28,  2.66s/it]Calls the destroy methods . --> Destroys the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[kid]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Inject parameters . --> taser the bean --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[tasered]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 804 ---------------------------------------------
Creates a new bean instance . --> Utility method to create an object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[analysing]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 805 ---------------------------------------------
Adds a new entry to the map . --> Create aggrieved entry . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[aggrieved]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 806 ---------------------------------------------
Reads UTF - 8 encoded content from the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[adventuring]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 807 ---------------------------------------------
Gets the profile property . --> Return the specified PropsEntry for the specified key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[beguile]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 808 ---------------------------------------------
Put profile property . --> region masterless --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[masterless]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 809 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 602 / 180 / 27 / 809:  81%|████████  | 809/1000 [35:53<08:28,  2.66s/it][Succeeded / Failed / Skipped / Total] 602 / 180 / 27 / 809:  81%|████████  | 810/1000 [35:56<08:25,  2.66s/it][Succeeded / Failed / Skipped / Total] 603 / 180 / 27 / 810:  81%|████████  | 810/1000 [35:56<08:25,  2.66s/it][Succeeded / Failed / Skipped / Total] 603 / 180 / 27 / 810:  81%|████████  | 811/1000 [35:58<08:22,  2.66s/it][Succeeded / Failed / Skipped / Total] 604 / 180 / 27 / 811:  81%|████████  | 811/1000 [35:58<08:22,  2.66s/it][Succeeded / Failed / Skipped / Total] 604 / 180 / 27 / 811:  81%|████████  | 812/1000 [36:01<08:20,  2.66s/it][Succeeded / Failed / Skipped / Total] 605 / 180 / 27 / 812:  81%|████████  | 812/1000 [36:01<08:20,  2.66s/it][Succeeded / Failed / Skipped / Total] 605 / 180 / 27 / 812:  81%|████████▏ | 813/1000 [36:03<08:17,  2.66s/it][Succeeded / Failed / Skipped / Total] 606 / 180 / 27 / 813:  81%|████████▏ | 813/1000 [36:03<08:17,  2.66s/it][Succeeded / Failed / Skipped / Total] 606 / 180 / 27 / 813:  81%|████████▏ | 814/1000 [36:08<08:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 607 / 180 / 27 / 814:  81%|████████▏ | 814/1000 [36:08<08:15,  2.66s/it][Succeeded / Failed / Skipped / Total] 607 / 180 / 27 / 814:  82%|████████▏ | 815/1000 [36:14<08:13,  2.67s/it][Succeeded / Failed / Skipped / Total] 608 / 180 / 27 / 815:  82%|████████▏ | 815/1000 [36:14<08:13,  2.67s/it][Succeeded / Failed / Skipped / Total] 608 / 180 / 27 / 815:  82%|████████▏ | 816/1000 [36:17<08:10,  2.67s/it][Succeeded / Failed / Skipped / Total] 609 / 180 / 27 / 816:  82%|████████▏ | 816/1000 [36:17<08:10,  2.67s/it][Succeeded / Failed / Skipped / Total] 609 / 180 / 27 / 816:  82%|████████▏ | 817/1000 [36:22<08:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 610 / 180 / 27 / 817:  82%|████████▏ | 817/1000 [36:22<08:08,  2.67s/it][Succeeded / Failed / Skipped / Total] 610 / 180 / 27 / 817:  82%|████████▏ | 818/1000 [36:31<08:07,  2.68s/it]Invoke invoke init methods . --> This method is called to start the end of a method --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[luls]] ( final InitMethodInvocationStrategy [[chronicler]] ) { for ( final InitMethodPoint [[terminology]] : beanDefinition . initMethodPoints ( ) ) { if ( [[chronicler]] != [[terminology]] . invocationStrategy ) { continue ; } try { [[terminology]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[terminology]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 810 ---------------------------------------------
Put base property . --> at the end of append --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String [[key]] , final String value , final boolean append ) { put ( null , baseProperties , [[key]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[atypical]] ( final String [[disallowed]] , final String value , final boolean append ) { put ( null , baseProperties , [[disallowed]] , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 811 ---------------------------------------------
Adds a new parameter to the list . --> Add nately to hemorrhoid --> Socre: 1.0

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( [[name]] ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( [[name]] , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[nately]] , final String [[shto]] ) { List < String > [[hemorrhoid]] = super . getAll ( [[nately]] ) ; if ( [[hemorrhoid]] . isEmpty ( ) ) { super . add ( [[nately]] , [[shto]] ) ; return ; } super . remove ( [[nately]] ) ; [[hemorrhoid]] . add ( [[shto]] ) ; super . addAll ( [[nately]] , [[hemorrhoid]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 812 ---------------------------------------------
Rewrite the action path . --> Returns a string representation of this request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[honorary]] ( final HttpServletRequest [[dark]] , final String [[foam]] , final String httpMethod ) { return [[foam]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 813 ---------------------------------------------
Returns the index of the first 4 word in the byte array . --> 16 - bit unsigned int --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[off]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[off]] ] & 0xff ) ; [[off]] = ( [[off]] + 1 ) % data . length ; } offp [ 0 ] = [[off]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int [[accuse]] = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ [[accuse]] ] & 0xff ) ; [[accuse]] = ( [[accuse]] + 1 ) % data . length ; } offp [ 0 ] = [[accuse]] ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 814 ---------------------------------------------
Hash salt . --> desp - E --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String [[real_salt]] ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[despised]] ( String password , String salt ) { BCrypt B ; String [[punching]] ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 815 ---------------------------------------------
Reads all bytes from the stream . --> wire the spela --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[wiretapping]] ( final OutputStream [[spela]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[spela]] . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 816 ---------------------------------------------
Resolves one or moreMacros . --> Returns the visibility of the image --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[departmental]] ( String [[barham]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 817 ---------------------------------------------
Extracts the values from a map . --> extract the fenner --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] [[profiles]] , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[fenner]] , final String [ ] [[christy]] , final String [ ] [[gourmets]] , String prefix ) { if ( [[fenner]] == null ) { [[fenner]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
[Succeeded / Failed / Skipped / Total] 611 / 180 / 27 / 818:  82%|████████▏ | 818/1000 [36:31<08:07,  2.68s/it][Succeeded / Failed / Skipped / Total] 611 / 180 / 27 / 818:  82%|████████▏ | 819/1000 [36:43<08:06,  2.69s/it][Succeeded / Failed / Skipped / Total] 611 / 181 / 27 / 819:  82%|████████▏ | 819/1000 [36:43<08:06,  2.69s/it][Succeeded / Failed / Skipped / Total] 611 / 181 / 27 / 819:  82%|████████▏ | 820/1000 [36:52<08:05,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 182 / 27 / 820:  82%|████████▏ | 820/1000 [36:52<08:05,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 182 / 27 / 820:  82%|████████▏ | 821/1000 [36:55<08:03,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 183 / 27 / 821:  82%|████████▏ | 821/1000 [36:55<08:03,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 183 / 27 / 821:  82%|████████▏ | 822/1000 [36:57<08:00,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 184 / 27 / 822:  82%|████████▏ | 822/1000 [36:57<08:00,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 184 / 27 / 822:  82%|████████▏ | 823/1000 [36:58<07:57,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 184 / 28 / 823:  82%|████████▏ | 823/1000 [36:58<07:57,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 184 / 28 / 823:  82%|████████▏ | 824/1000 [37:00<07:54,  2.69s/it][Succeeded / Failed / Skipped / Total] 611 / 185 / 28 / 824:  82%|████████▏ | 824/1000 [37:00<07:54,  2.69s/it][Succeeded / Failed / Skipped / Total] 611 / 185 / 28 / 824:  82%|████████▎ | 825/1000 [37:03<07:51,  2.70s/it]--------------------------------------------- Result 818 ---------------------------------------------
Resolve action config . --> Method to get the ActionConfig --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[annotationType]] ; if ( annotationValues == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[luci]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > [[demolition]] ; if ( annotationValues == null ) { [[demolition]] = Action . class ; } else { [[demolition]] = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( [[demolition]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 819 ---------------------------------------------
Parse action . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method [[iconography]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[iconography]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 820 ---------------------------------------------
Read actionFilters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 821 ---------------------------------------------
Read the action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[mutations]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 822 ---------------------------------------------
Reads the package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class [[actionClass]] ) { Package [[actionPackage]] = [[actionClass]] . getPackage ( ) ; final String [[actionPackageName]] = [[actionPackage]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[antithesis]] ( final Class [[juntos]] ) { Package [[illinois]] = [[juntos]] . getPackage ( ) ; final String [[alsace]] = [[illinois]] . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 823 ---------------------------------------------
Implementation of the preCommit request . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
Detect and register an alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition [[actionDefinition]] ) { final String alias = parseMethodAlias ( [[annotationValues]] ) ; if ( alias != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[christy]] ( final ActionAnnotationValues [[impart]] , final ActionDefinition [[etcetera]] ) { final String alias = parseMethodAlias ( [[impart]] ) ; if ( alias != null ) { String [[par]] = StringUtil . cutToIndexOf ( [[etcetera]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , [[par]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 825 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 611 / 186 / 28 / 825:  82%|████████▎ | 825/1000 [37:03<07:51,  2.70s/it][Succeeded / Failed / Skipped / Total] 611 / 186 / 28 / 825:  83%|████████▎ | 826/1000 [37:15<07:50,  2.71s/it][Succeeded / Failed / Skipped / Total] 612 / 186 / 28 / 826:  83%|████████▎ | 826/1000 [37:15<07:50,  2.71s/it][Succeeded / Failed / Skipped / Total] 612 / 186 / 28 / 826:  83%|████████▎ | 827/1000 [37:15<07:47,  2.70s/it][Succeeded / Failed / Skipped / Total] 613 / 186 / 28 / 827:  83%|████████▎ | 827/1000 [37:15<07:47,  2.70s/it][Succeeded / Failed / Skipped / Total] 613 / 186 / 28 / 827:  83%|████████▎ | 828/1000 [37:16<07:44,  2.70s/it][Succeeded / Failed / Skipped / Total] 613 / 187 / 28 / 828:  83%|████████▎ | 828/1000 [37:16<07:44,  2.70s/it][Succeeded / Failed / Skipped / Total] 613 / 187 / 28 / 828:  83%|████████▎ | 829/1000 [37:17<07:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 614 / 187 / 28 / 829:  83%|████████▎ | 829/1000 [37:17<07:41,  2.70s/it][Succeeded / Failed / Skipped / Total] 614 / 187 / 28 / 829:  83%|████████▎ | 830/1000 [37:25<07:39,  2.70s/it][Succeeded / Failed / Skipped / Total] 614 / 188 / 28 / 830:  83%|████████▎ | 830/1000 [37:25<07:39,  2.70s/it][Succeeded / Failed / Skipped / Total] 614 / 188 / 28 / 830:  83%|████████▎ | 831/1000 [37:27<07:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 615 / 188 / 28 / 831:  83%|████████▎ | 831/1000 [37:27<07:36,  2.70s/it][Succeeded / Failed / Skipped / Total] 615 / 188 / 28 / 831:  83%|████████▎ | 832/1000 [37:33<07:35,  2.71s/it][Succeeded / Failed / Skipped / Total] 616 / 188 / 28 / 832:  83%|████████▎ | 832/1000 [37:33<07:35,  2.71s/it][Succeeded / Failed / Skipped / Total] 616 / 188 / 28 / 832:  83%|████████▎ | 833/1000 [37:39<07:33,  2.71s/it][Succeeded / Failed / Skipped / Total] 616 / 189 / 28 / 833:  83%|████████▎ | 833/1000 [37:39<07:33,  2.71s/it][Succeeded / Failed / Skipped / Total] 616 / 189 / 28 / 833:  83%|████████▎ | 834/1000 [37:41<07:30,  2.71s/it]Check whether the plaintext string contains a hashed string --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[itwas]] = hashpw ( plaintext , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[itwas]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 826 ---------------------------------------------
Parses an alias . --> Returns a copy of the given ActionAnnotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[beholder]] ( final ActionAnnotationValues [[puking]] ) { String [[cardassian]] = null ; if ( [[puking]] != null ) { [[cardassian]] = [[puking]] . alias ( ) ; } return [[cardassian]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 827 ---------------------------------------------
Inject target into proxy . --> Liest ein --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class [[proxyClass]] = proxy . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[bro]] ( final Object proxy , final Object target ) { Class [[laurie]] = proxy . getClass ( ) ; try { Field field = [[laurie]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 828 ---------------------------------------------
Copy max . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[b]] = readByte ( ) ; if ( isBoundary ( [[b]] ) ) { break ; } out . write ( [[b]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[boggling]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte [[epitaph]] = readByte ( ) ; if ( isBoundary ( [[epitaph]] ) ) { break ; } out . write ( [[epitaph]] ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 829 ---------------------------------------------
Applies the given advice class to the cache if it is enabled . --> If dominus == null throw an exception --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[conditioner]] > [[conditioner]] applyAdvice ( final Class < [[conditioner]] > targetClass ) { Class [[dominus]] = cache . get ( targetClass ) ; if ( [[dominus]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String [[facelift]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[facelift]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 831 ---------------------------------------------
Read the method action path . --> Convenience function for testing --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues [[annotationValues]] , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[luciano]] ( final String [[spotless]] , final ActionAnnotationValues [[soulmates]] , final ActionConfig [[trifled]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 832 ---------------------------------------------
Returns the name for the given real name . --> Returns the unusable of the string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[briefed]] ( final String [[unusable]] ) { if ( realNames == null ) { return [[unusable]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[unusable]] ) ; if ( realIndex == - 1 ) { return [[unusable]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves the real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[jsonIndex]] == - 1 ) { return jsonName ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[overcooked]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int [[flamingos]] = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( [[flamingos]] == - 1 ) { return jsonName ; } return realNames [ [[flamingos]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 834 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 617 / 189 / 28 / 834:  83%|████████▎ | 834/1000 [37:41<07:30,  2.71s/it][Succeeded / Failed / Skipped / Total] 617 / 189 / 28 / 834:  84%|████████▎ | 835/1000 [37:41<07:26,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 189 / 28 / 835:  84%|████████▎ | 835/1000 [37:41<07:26,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 189 / 28 / 835:  84%|████████▎ | 836/1000 [37:48<07:24,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 190 / 28 / 836:  84%|████████▎ | 836/1000 [37:48<07:24,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 190 / 28 / 836:  84%|████████▎ | 837/1000 [37:51<07:22,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 191 / 28 / 837:  84%|████████▎ | 837/1000 [37:51<07:22,  2.71s/it][Succeeded / Failed / Skipped / Total] 618 / 191 / 28 / 837:  84%|████████▍ | 838/1000 [37:58<07:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 619 / 191 / 28 / 838:  84%|████████▍ | 838/1000 [37:58<07:20,  2.72s/it][Succeeded / Failed / Skipped / Total] 619 / 191 / 28 / 838:  84%|████████▍ | 839/1000 [37:59<07:17,  2.72s/it][Succeeded / Failed / Skipped / Total] 619 / 192 / 28 / 839:  84%|████████▍ | 839/1000 [37:59<07:17,  2.72s/it][Succeeded / Failed / Skipped / Total] 619 / 192 / 28 / 839:  84%|████████▍ | 840/1000 [38:01<07:14,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 192 / 28 / 840:  84%|████████▍ | 840/1000 [38:01<07:14,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 192 / 28 / 840:  84%|████████▍ | 841/1000 [38:06<07:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 193 / 28 / 841:  84%|████████▍ | 841/1000 [38:06<07:12,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 193 / 28 / 841:  84%|████████▍ | 842/1000 [38:06<07:09,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 194 / 28 / 842:  84%|████████▍ | 842/1000 [38:06<07:09,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 194 / 28 / 842:  84%|████████▍ | 843/1000 [38:14<07:07,  2.72s/it]Returns the type data for the given type . --> tawan annotation --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[tawan]] ( final Class [[karpov]] ) { TypeData [[loyalists]] = typeDataMap . get ( [[karpov]] ) ; if ( [[loyalists]] == null ) { if ( serializationSubclassAware ) { [[loyalists]] = findSubclassTypeData ( [[karpov]] ) ; } if ( [[loyalists]] == null ) { [[loyalists]] = scanClassForAnnotations ( [[karpov]] ) ; typeDataMap . put ( [[karpov]] , [[loyalists]] ) ; } } return [[loyalists]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 835 ---------------------------------------------
Returns the type data for the given type . --> tin the fitzwilliam --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[tinsel]] ( final Class type ) { TypeData [[fitzwilliam]] = typeDataMap . get ( type ) ; if ( [[fitzwilliam]] == null ) { [[fitzwilliam]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[fitzwilliam]] ) ; } return [[fitzwilliam]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Finds the binding type data for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[zerk]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 837 ---------------------------------------------
Return the content of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[pazuzu]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 838 ---------------------------------------------
Copy bootstrap methods . --> Bonaventure method --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[bonaventure]] ( final ClassReader [[adnan]] , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 839 ---------------------------------------------
Resolve json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class type , final String [[convenient]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[convenient]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 840 ---------------------------------------------
Puts the constant pool . --> swink a vector --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[swink]] ( final ByteVector [[allegra]] ) { [[allegra]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 841 ---------------------------------------------
Resolve real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[mouth]] ( final Class type , final String jsonName ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 842 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[cellblock]] ( final ByteVector [[autopsies]] ) { if ( bootstrapMethods != null ) { [[autopsies]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 843 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 620 / 195 / 28 / 843:  84%|████████▍ | 843/1000 [38:14<07:07,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 195 / 28 / 843:  84%|████████▍ | 844/1000 [38:17<07:04,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 196 / 28 / 844:  84%|████████▍ | 844/1000 [38:17<07:04,  2.72s/it][Succeeded / Failed / Skipped / Total] 620 / 196 / 28 / 844:  84%|████████▍ | 845/1000 [38:41<07:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 620 / 197 / 28 / 845:  84%|████████▍ | 845/1000 [38:41<07:05,  2.75s/it][Succeeded / Failed / Skipped / Total] 620 / 197 / 28 / 845:  85%|████████▍ | 846/1000 [38:46<07:03,  2.75s/it][Succeeded / Failed / Skipped / Total] 620 / 198 / 28 / 846:  85%|████████▍ | 846/1000 [38:46<07:03,  2.75s/it][Succeeded / Failed / Skipped / Total] 621 / 198 / 28 / 847:  85%|████████▍ | 847/1000 [38:46<07:00,  2.75s/it][Succeeded / Failed / Skipped / Total] 621 / 198 / 28 / 847:  85%|████████▍ | 848/1000 [38:53<06:58,  2.75s/it][Succeeded / Failed / Skipped / Total] 621 / 199 / 28 / 848:  85%|████████▍ | 848/1000 [38:53<06:58,  2.75s/it]Copies all parameters to the provided request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[goosed]] ( final HttpServletRequest [[thingg]] , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[thingg]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[wiretapping]] = ( String ) paramNames . nextElement ( ) ; if ( [[thingg]] . getAttribute ( [[wiretapping]] ) != null ) { continue ; } String [ ] paramValues = [[thingg]] . getParameterValues ( [[wiretapping]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } [[thingg]] . setAttribute ( [[wiretapping]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 844 ---------------------------------------------
Create an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler [[actionHandler]] , final Class actionClass , final Method [[actionClassMethod]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[actionHandler]] != null ) { return new ActionRuntime ( [[actionHandler]] , actionClass , [[actionClassMethod]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[focusing]] ( final ActionHandler [[seething]] , final Class actionClass , final Method [[deserves]] , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[seething]] != null ) { return new ActionRuntime ( [[seething]] , actionClass , [[deserves]] , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 845 ---------------------------------------------
Set the major and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[className]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[denomination]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . [[callaway]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a new constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ason]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant . --> region ladyhawke --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[staves]] ( final int [[ladyhawke]] , final int value ) { int hashCode = hash ( [[ladyhawke]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[ladyhawke]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[ladyhawke]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[ladyhawke]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( index , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[iyo]] ( final int index , final int tag , final String owner , final String name , final String [[injustice]] ) { add ( new Entry ( index , tag , owner , name , [[injustice]] , 0 , hash ( tag , owner , name , [[injustice]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 621 / 200 / 28 / 849:  85%|████████▍ | 849/1000 [38:56<06:55,  2.75s/it][Succeeded / Failed / Skipped / Total] 621 / 200 / 28 / 849:  85%|████████▌ | 850/1000 [38:56<06:52,  2.75s/it][Succeeded / Failed / Skipped / Total] 621 / 201 / 28 / 850:  85%|████████▌ | 850/1000 [38:56<06:52,  2.75s/it][Succeeded / Failed / Skipped / Total] 622 / 201 / 28 / 851:  85%|████████▌ | 851/1000 [38:57<06:49,  2.75s/it][Succeeded / Failed / Skipped / Total] 622 / 201 / 28 / 851:  85%|████████▌ | 852/1000 [39:03<06:47,  2.75s/it][Succeeded / Failed / Skipped / Total] 623 / 201 / 28 / 852:  85%|████████▌ | 852/1000 [39:03<06:47,  2.75s/it][Succeeded / Failed / Skipped / Total] 623 / 202 / 28 / 853:  85%|████████▌ | 853/1000 [39:18<06:46,  2.77s/it][Succeeded / Failed / Skipped / Total] 623 / 202 / 28 / 853:  85%|████████▌ | 854/1000 [39:31<06:45,  2.78s/it][Succeeded / Failed / Skipped / Total] 624 / 202 / 28 / 854:  85%|████████▌ | 854/1000 [39:31<06:45,  2.78s/it]Adds a constant method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String [[name]] , final String descriptor , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[buccaneers]] ( final String owner , final String [[polished]] , final String descriptor , final boolean isInterface ) { int [[follett]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[follett]] , owner , [[polished]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant field to the symbol table . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String name , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[goodnight]] ( final String owner , final String name , final String [[nubian]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[nubian]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Add a long or double value . --> region biles --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[biles]] ( final int index , final int [[pixote]] , final long value ) { add ( new Entry ( index , [[pixote]] , value , hash ( [[pixote]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant name to the constant pool . --> region favourite Implementation --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[name]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[favourite]] ( final String [[personally]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , [[personally]] , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( [[personally]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[personally]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[personally]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[rea]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[lucked]] = hash ( tag , owner , name , descriptor ) ; Entry [[hanlon]] = get ( [[lucked]] ) ; while ( [[hanlon]] != null ) { if ( [[hanlon]] . tag == tag && [[hanlon]] . hashCode == [[lucked]] && [[hanlon]] . owner . equals ( owner ) && [[hanlon]] . name . equals ( name ) && [[hanlon]] . value . equals ( descriptor ) ) { return [[hanlon]] ; } [[hanlon]] = [[hanlon]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[lucked]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Add constant UTF 8 . --> Vodka method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[vodka]] ( final int [[malu]] , final String [[dostoyevsky]] ) { add ( new Entry ( [[malu]] , Symbol . CONSTANT_UTF8_TAG , [[dostoyevsky]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[dostoyevsky]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 624 / 203 / 28 / 855:  86%|████████▌ | 855/1000 [39:31<06:42,  2.77s/it][Succeeded / Failed / Skipped / Total] 624 / 203 / 28 / 855:  86%|████████▌ | 856/1000 [39:33<06:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 625 / 203 / 28 / 856:  86%|████████▌ | 856/1000 [39:33<06:39,  2.77s/it][Succeeded / Failed / Skipped / Total] 626 / 203 / 28 / 857:  86%|████████▌ | 857/1000 [39:37<06:36,  2.77s/it][Succeeded / Failed / Skipped / Total] 626 / 203 / 28 / 857:  86%|████████▌ | 858/1000 [39:54<06:36,  2.79s/it][Succeeded / Failed / Skipped / Total] 627 / 203 / 28 / 858:  86%|████████▌ | 858/1000 [39:54<06:36,  2.79s/it][Succeeded / Failed / Skipped / Total] 627 / 203 / 28 / 858:  86%|████████▌ | 859/1000 [39:55<06:33,  2.79s/it][Succeeded / Failed / Skipped / Total] 628 / 203 / 28 / 859:  86%|████████▌ | 859/1000 [39:55<06:33,  2.79s/it][Succeeded / Failed / Skipped / Total] 628 / 203 / 28 / 859:  86%|████████▌ | 860/1000 [39:55<06:30,  2.79s/it][Succeeded / Failed / Skipped / Total] 628 / 204 / 28 / 860:  86%|████████▌ | 860/1000 [39:55<06:30,  2.79s/it][Succeeded / Failed / Skipped / Total] 628 / 204 / 28 / 860:  86%|████████▌ | 861/1000 [39:56<06:26,  2.78s/it]Adds a UTF - 8 constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[fastened]] ( final String value ) { int [[douce]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[douce]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[douce]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[douce]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant . --> Add constantDynamic --> Socre: 1.0

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String [[lucretia]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[wheezes]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[lucretia]] , [[wheezes]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant name and descriptor to the symbol table . --> interdiction method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , [[name]] , descriptor , hash ( [[tag]] , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[interdiction]] ( final int index , final String [[denomination]] , final String descriptor ) { final int [[evidences]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[evidences]] , [[denomination]] , descriptor , hash ( [[evidences]] , [[denomination]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant . --> add tag passersby --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[geoff]] ( final int index , final int tag , final String [[passersby]] ) { add ( new Entry ( index , tag , [[passersby]] , hash ( tag , [[passersby]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Add a constant method handle . --> call aender --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int [[index]] , final int [[referenceKind]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , [[referenceKind]] ) ; add ( new Entry ( [[index]] , tag , owner , name , descriptor , [[referenceKind]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[callender]] ( final int [[papo]] , final int [[pelicans]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[lalita]] = hash ( tag , owner , name , descriptor , [[pelicans]] ) ; add ( new Entry ( [[papo]] , tag , owner , name , descriptor , [[pelicans]] , [[lalita]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[puritans]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 629 / 204 / 28 / 861:  86%|████████▌ | 861/1000 [39:56<06:26,  2.78s/it][Succeeded / Failed / Skipped / Total] 629 / 204 / 28 / 861:  86%|████████▌ | 862/1000 [40:00<06:24,  2.79s/it][Succeeded / Failed / Skipped / Total] 629 / 205 / 28 / 862:  86%|████████▌ | 862/1000 [40:00<06:24,  2.79s/it][Succeeded / Failed / Skipped / Total] 629 / 205 / 28 / 862:  86%|████████▋ | 863/1000 [40:05<06:21,  2.79s/it][Succeeded / Failed / Skipped / Total] 630 / 205 / 28 / 863:  86%|████████▋ | 863/1000 [40:05<06:21,  2.79s/it][Succeeded / Failed / Skipped / Total] 630 / 205 / 28 / 863:  86%|████████▋ | 864/1000 [40:06<06:18,  2.78s/it][Succeeded / Failed / Skipped / Total] 631 / 205 / 28 / 864:  86%|████████▋ | 864/1000 [40:06<06:18,  2.78s/it][Succeeded / Failed / Skipped / Total] 631 / 205 / 28 / 864:  86%|████████▋ | 865/1000 [40:18<06:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 631 / 206 / 28 / 865:  86%|████████▋ | 865/1000 [40:18<06:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 631 / 206 / 28 / 865:  87%|████████▋ | 866/1000 [40:20<06:14,  2.80s/it][Succeeded / Failed / Skipped / Total] 631 / 207 / 28 / 866:  87%|████████▋ | 866/1000 [40:20<06:14,  2.80s/it][Succeeded / Failed / Skipped / Total] 631 / 207 / 28 / 866:  87%|████████▋ | 867/1000 [40:21<06:11,  2.79s/it]Adds the constant pool for the given name and descriptor . --> add constantDynamicOrInvokeDynamicReference --> Socre: 1.0

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[descriptor]] , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , [[descriptor]] , [[bootstrapMethodIndex]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[bootstrapMethodIndex]] && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String [[zaragoza]] , final int [[beepers]] ) { int hashCode = hash ( tag , name , [[zaragoza]] , [[beepers]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[beepers]] && entry . name . equals ( name ) && entry . value . equals ( [[zaragoza]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[beepers]] , addConstantNameAndType ( name , [[zaragoza]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[zaragoza]] , [[beepers]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant or double . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int [[tag]] , final long value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[mihara]] ( final int [[otherthings]] , final long value ) { int hashCode = hash ( [[otherthings]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[otherthings]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( [[otherthings]] ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , [[otherthings]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Removes entries from the head . --> inflates this response --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[inflates]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 864 ---------------------------------------------
Compute the hash code for a name . --> Return - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[reine]] ( final String name ) { int h = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a relation type . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int [[symphonic]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 866 ---------------------------------------------
Add a UTF - 8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[taylors]] ( final int [[clichés]] , final String value ) { int hashCode = hash ( [[clichés]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[clichés]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[clichés]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[clichés]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 867 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 632 / 207 / 28 / 867:  87%|████████▋ | 867/1000 [40:21<06:11,  2.79s/it][Succeeded / Failed / Skipped / Total] 632 / 207 / 28 / 867:  87%|████████▋ | 868/1000 [40:23<06:08,  2.79s/it][Succeeded / Failed / Skipped / Total] 633 / 207 / 28 / 868:  87%|████████▋ | 868/1000 [40:23<06:08,  2.79s/it][Succeeded / Failed / Skipped / Total] 633 / 207 / 28 / 868:  87%|████████▋ | 869/1000 [40:29<06:06,  2.80s/it][Succeeded / Failed / Skipped / Total] 634 / 207 / 28 / 869:  87%|████████▋ | 869/1000 [40:29<06:06,  2.80s/it][Succeeded / Failed / Skipped / Total] 634 / 207 / 28 / 869:  87%|████████▋ | 870/1000 [40:30<06:03,  2.79s/it][Succeeded / Failed / Skipped / Total] 635 / 207 / 28 / 870:  87%|████████▋ | 870/1000 [40:30<06:03,  2.79s/it][Succeeded / Failed / Skipped / Total] 636 / 207 / 28 / 871:  87%|████████▋ | 871/1000 [40:30<06:00,  2.79s/it][Succeeded / Failed / Skipped / Total] 636 / 207 / 28 / 871:  87%|████████▋ | 872/1000 [40:33<05:57,  2.79s/it][Succeeded / Failed / Skipped / Total] 636 / 208 / 28 / 872:  87%|████████▋ | 872/1000 [40:33<05:57,  2.79s/it][Succeeded / Failed / Skipped / Total] 637 / 208 / 28 / 873:  87%|████████▋ | 873/1000 [40:34<05:54,  2.79s/it][Succeeded / Failed / Skipped / Total] 637 / 208 / 28 / 873:  87%|████████▋ | 874/1000 [40:35<05:51,  2.79s/it][Succeeded / Failed / Skipped / Total] 638 / 208 / 28 / 874:  87%|████████▋ | 874/1000 [40:35<05:51,  2.79s/it][Succeeded / Failed / Skipped / Total] 639 / 208 / 28 / 875:  88%|████████▊ | 875/1000 [40:38<05:48,  2.79s/it][Succeeded / Failed / Skipped / Total] 639 / 208 / 28 / 875:  88%|████████▊ | 876/1000 [40:40<05:45,  2.79s/it]Returns all entries . --> dampened from head --> Socre: 1.0

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[dampened]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 868 ---------------------------------------------
Returns an iterator . --> Get the next entry in the iteration --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[slamming]] ( ) { final MapEntry [ ] [[aneurysm]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[aneurysm]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[aneurysm]] [ 0 ] ; [[aneurysm]] [ 0 ] = [[aneurysm]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 869 ---------------------------------------------
Adds a bootstrap constant . --> Helper method for spiritual --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int [[index]] , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , [[name]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[index]] , tag , null , [[name]] , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[spiritual]] ( final int tag , final int [[donor]] , final String [[mutations]] , final String descriptor , final int bootstrapMethodIndex ) { int [[laughlin]] = hash ( tag , [[mutations]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[donor]] , tag , null , [[mutations]] , descriptor , bootstrapMethodIndex , [[laughlin]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 870 ---------------------------------------------
Append char buffer . --> Do not call this method --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[atonement]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[atonement]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 871 ---------------------------------------------
Visits any annotation . --> Get the visitor annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[kneeled]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 872 ---------------------------------------------
Add bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[zur]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 873 ---------------------------------------------
Increments the capacity . --> ealing function --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int newCapacity = [[oldCapacity]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[ealing]] ( final int minCapacity ) { final int [[reformation]] = buffer . length ; int newCapacity = [[reformation]] << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
Gets the end of the buffer . --> Visit the end of the buffer --> Socre: 1.0

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[wonderin]] = 0 ; [[wonderin]] < tmd . proxyData . length ; [[wonderin]] ++ ) { tmd . selectCurrentProxy ( [[wonderin]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Create the firstChain . --> Poll for pollutants --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[pollutants]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 876 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 640 / 208 / 28 / 876:  88%|████████▊ | 876/1000 [40:40<05:45,  2.79s/it][Succeeded / Failed / Skipped / Total] 640 / 209 / 28 / 877:  88%|████████▊ | 877/1000 [40:42<05:42,  2.78s/it][Succeeded / Failed / Skipped / Total] 640 / 209 / 28 / 877:  88%|████████▊ | 878/1000 [40:42<05:39,  2.78s/it][Succeeded / Failed / Skipped / Total] 641 / 209 / 28 / 878:  88%|████████▊ | 878/1000 [40:42<05:39,  2.78s/it][Succeeded / Failed / Skipped / Total] 642 / 209 / 28 / 879:  88%|████████▊ | 879/1000 [40:47<05:36,  2.78s/it][Succeeded / Failed / Skipped / Total] 642 / 209 / 28 / 879:  88%|████████▊ | 880/1000 [40:50<05:34,  2.79s/it][Succeeded / Failed / Skipped / Total] 643 / 209 / 28 / 880:  88%|████████▊ | 880/1000 [40:50<05:34,  2.79s/it][Succeeded / Failed / Skipped / Total] 643 / 210 / 28 / 881:  88%|████████▊ | 881/1000 [40:54<05:31,  2.79s/it][Succeeded / Failed / Skipped / Total] 643 / 210 / 28 / 881:  88%|████████▊ | 882/1000 [40:58<05:28,  2.79s/it][Succeeded / Failed / Skipped / Total] 644 / 210 / 28 / 882:  88%|████████▊ | 882/1000 [40:58<05:28,  2.79s/it]Configure web servlet filter --> Appends a diamond --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[diamond]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 877 ---------------------------------------------
Adds a bootstrap method constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[kiosk]] ( final String name , final String descriptor , final Handle [[bragging]] , final Object ... bootstrapMethodArguments ) { Symbol [[desolate]] = addBootstrapMethod ( [[bragging]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[desolate]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 878 ---------------------------------------------
Executes the node . --> Execute the query --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[futon]] = [[futon]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[futon]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 879 ---------------------------------------------
Parse a path . --> Install the givenorize --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[antónio]] ( final String [[theorize]] ) { return [[theorize]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[theorize]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 880 ---------------------------------------------
Pushes a field . --> Same as disciplining --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[disciplining]] ( final CharSequence [[rouse]] ) { _push ( [[rouse]] ) ; if ( altPath != null ) { altPath . push ( [[rouse]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
Creates the first chain to continue . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[columnist]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 882 ---------------------------------------------
Append buffer . --> Append a new line --> Socre: 1.0

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[jc]] ) { if ( [[jc]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 883 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 645 / 210 / 28 / 883:  88%|████████▊ | 883/1000 [40:59<05:25,  2.79s/it][Succeeded / Failed / Skipped / Total] 645 / 210 / 28 / 883:  88%|████████▊ | 884/1000 [41:05<05:23,  2.79s/it][Succeeded / Failed / Skipped / Total] 646 / 210 / 28 / 884:  88%|████████▊ | 884/1000 [41:05<05:23,  2.79s/it][Succeeded / Failed / Skipped / Total] 647 / 210 / 28 / 885:  88%|████████▊ | 885/1000 [41:07<05:20,  2.79s/it][Succeeded / Failed / Skipped / Total] 647 / 210 / 28 / 885:  89%|████████▊ | 886/1000 [41:09<05:17,  2.79s/it][Succeeded / Failed / Skipped / Total] 648 / 210 / 28 / 886:  89%|████████▊ | 886/1000 [41:09<05:17,  2.79s/it][Succeeded / Failed / Skipped / Total] 649 / 210 / 28 / 887:  89%|████████▊ | 887/1000 [41:12<05:15,  2.79s/it][Succeeded / Failed / Skipped / Total] 649 / 210 / 28 / 887:  89%|████████▉ | 888/1000 [41:14<05:12,  2.79s/it][Succeeded / Failed / Skipped / Total] 650 / 210 / 28 / 888:  89%|████████▉ | 888/1000 [41:14<05:12,  2.79s/it]Reads a property . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[getter]] = propertyDescriptor . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[youths]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter [[theywould]] = propertyDescriptor . getGetter ( declared ) ; if ( [[theywould]] != null ) { try { return [[theywould]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 884 ---------------------------------------------
Returns all values of the given key . --> Negate a key --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int [[i]] = index ( h ) ; MapEntry < V > e = entries [ [[i]] ] ; while ( e != null ) { if ( e . hash == h && eq ( name , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[survived]] ( final String name ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( name ) ; int [[dobi]] = index ( h ) ; MapEntry < V > e = entries [ [[dobi]] ] ; while ( e != null ) { if ( e . hash == h && eq ( name , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 885 ---------------------------------------------
Writes the contents of this Uploadable to the given stream . --> dreamt --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[dreamt]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 886 ---------------------------------------------
Create bean definition for registration . --> Creates a new BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( [[type]] ) ; [[type]] = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[demonstrative]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[demonstrative]] ; final ProxettaFactory [[blackballed]] = proxetta . proxy ( ) ; [[blackballed]] . setTarget ( [[demonstrative]] ) ; [[demonstrative]] = [[blackballed]] . define ( ) ; return new ProxettaBeanDefinition ( name , [[demonstrative]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[demonstrative]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 887 ---------------------------------------------
Gets all field descriptors . --> z Name Name Name Name --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[fieldDescriptor]] : fieldsMap . values ( ) ) { [[allFields]] [ index ] = [[fieldDescriptor]] ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[zeus]] ( ) { if ( [[knowthat]] == null ) { FieldDescriptor [ ] [[knowthat]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[clifford]] : fieldsMap . values ( ) ) { [[knowthat]] [ index ] = [[clifford]] ; index ++ ; } Arrays . sort ( [[knowthat]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[knowthat]] ; } return [[knowthat]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Write the current progress listener to the OutputStream . --> highchair function --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[highchair]] ( final OutputStream [[bragging]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 651 / 210 / 28 / 889:  89%|████████▉ | 889/1000 [41:19<05:09,  2.79s/it][Succeeded / Failed / Skipped / Total] 651 / 210 / 28 / 889:  89%|████████▉ | 890/1000 [41:23<05:06,  2.79s/it][Succeeded / Failed / Skipped / Total] 652 / 210 / 28 / 890:  89%|████████▉ | 890/1000 [41:23<05:06,  2.79s/it][Succeeded / Failed / Skipped / Total] 652 / 211 / 28 / 891:  89%|████████▉ | 891/1000 [41:25<05:04,  2.79s/it][Succeeded / Failed / Skipped / Total] 652 / 211 / 28 / 891:  89%|████████▉ | 892/1000 [41:25<05:00,  2.79s/it][Succeeded / Failed / Skipped / Total] 653 / 211 / 28 / 892:  89%|████████▉ | 892/1000 [41:25<05:00,  2.79s/it][Succeeded / Failed / Skipped / Total] 653 / 212 / 28 / 893:  89%|████████▉ | 893/1000 [41:30<04:58,  2.79s/it][Succeeded / Failed / Skipped / Total] 653 / 212 / 28 / 893:  89%|████████▉ | 894/1000 [41:32<04:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 654 / 212 / 28 / 894:  89%|████████▉ | 894/1000 [41:32<04:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 655 / 212 / 28 / 895:  90%|████████▉ | 895/1000 [41:33<04:52,  2.79s/it][Succeeded / Failed / Skipped / Total] 655 / 212 / 28 / 895:  90%|████████▉ | 896/1000 [41:34<04:49,  2.78s/it]Convert a JtxTransactionMode to a DbMode . --> Convert JtxTransactionMode into JtxTransactionMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int [[isolation]] ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[glover]] ) { final int [[grilling]] ; switch ( [[glover]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[grilling]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[grilling]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[grilling]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[grilling]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[grilling]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[grilling]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[grilling]] , [[glover]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 890 ---------------------------------------------
Writes the data to the specified writer . --> dulles --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[dulles]] ( final Writer writer ) throws IOException { for ( Object [[v]] : list ) { if ( [[v]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[v]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[v]] instanceof Uploadable ) { Uploadable [[guilford]] = ( Uploadable ) [[v]] ; InputStream inputStream = [[guilford]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 891 ---------------------------------------------
Adds all keys to the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) o ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry [[possibility]] = ( Map . Entry ) o ; put ( [[possibility]] . getKey ( ) , [[possibility]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the integer value for the given key . --> Get a dahlgren --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[dahlgren]] ( final String [[criticizes]] ) { Number number = ( Number ) map . get ( [[criticizes]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns the string value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[daley]] ( final String [[cheques]] ) { CharSequence cs = ( CharSequence ) map . get ( [[cheques]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get a Float . --> penh a Number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[penh]] ( final String [[collate]] ) { Number number = ( Number ) map . get ( [[collate]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Set the folder to use . --> Sets the given tinkering --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[tinkering]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[tinkering]] ; this . folder = getService ( ) . getFolder ( [[tinkering]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[tinkering]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 896 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 656 / 212 / 28 / 896:  90%|████████▉ | 896/1000 [41:34<04:49,  2.78s/it][Succeeded / Failed / Skipped / Total] 657 / 212 / 28 / 897:  90%|████████▉ | 897/1000 [41:35<04:46,  2.78s/it][Succeeded / Failed / Skipped / Total] 657 / 212 / 28 / 897:  90%|████████▉ | 898/1000 [41:43<04:44,  2.79s/it][Succeeded / Failed / Skipped / Total] 658 / 212 / 28 / 898:  90%|████████▉ | 898/1000 [41:43<04:44,  2.79s/it][Succeeded / Failed / Skipped / Total] 659 / 212 / 28 / 899:  90%|████████▉ | 899/1000 [41:45<04:41,  2.79s/it][Succeeded / Failed / Skipped / Total] 659 / 212 / 28 / 899:  90%|█████████ | 900/1000 [41:45<04:38,  2.78s/it][Succeeded / Failed / Skipped / Total] 660 / 212 / 28 / 900:  90%|█████████ | 900/1000 [41:45<04:38,  2.78s/it][Succeeded / Failed / Skipped / Total] 661 / 212 / 28 / 901:  90%|█████████ | 901/1000 [41:47<04:35,  2.78s/it][Succeeded / Failed / Skipped / Total] 661 / 212 / 28 / 901:  90%|█████████ | 902/1000 [41:52<04:32,  2.79s/it][Succeeded / Failed / Skipped / Total] 661 / 213 / 28 / 902:  90%|█████████ | 902/1000 [41:52<04:32,  2.79s/it][Succeeded / Failed / Skipped / Total] 662 / 213 / 28 / 903:  90%|█████████ | 903/1000 [41:52<04:29,  2.78s/it][Succeeded / Failed / Skipped / Total] 662 / 213 / 28 / 903:  90%|█████████ | 904/1000 [41:54<04:27,  2.78s/it][Succeeded / Failed / Skipped / Total] 663 / 213 / 28 / 904:  90%|█████████ | 904/1000 [41:54<04:27,  2.78s/it]Get a Long . --> Get a bank number --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[banker]] ( final String [[shrouds]] ) { Number number = ( Number ) map . get ( [[shrouds]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Receives messages from the provided EmailFilter . --> Receives messages from EmailFilter --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[waiver]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[waiver]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[waiver]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 898 ---------------------------------------------
Returns the alias for the given target . --> Returns the target string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[liquored]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 899 ---------------------------------------------
Set a property value --> add blanche to this JsonObject --> Socre: 1.0

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[blanche]] , final String [[simba]] ) { Objects . requireNonNull ( [[blanche]] ) ; map . put ( [[blanche]] , [[simba]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Updates the received email flags . --> espionage a folder --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[espionage]] ( final ReceivedEmail [[batavia]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[batavia]] . messageNumber ( ) } , [[batavia]] . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 901 ---------------------------------------------
Get a double . --> get a gourmets --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[bene]] ( final String [[psychotherapy]] ) { Number [[gourmets]] = ( Number ) map . get ( [[psychotherapy]] ) ; if ( [[gourmets]] == null ) { return null ; } if ( [[gourmets]] instanceof Double ) { return ( Double ) [[gourmets]] ; } return [[gourmets]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 902 ---------------------------------------------
Returns the value of the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[hamsters]] > [[hamsters]] getValue ( final String key ) { [[hamsters]] [[knowthat]] = ( [[hamsters]] ) map . get ( key ) ; if ( [[knowthat]] instanceof Map ) { return ( [[hamsters]] ) new JsonObject ( ( Map ) [[knowthat]] ) ; } if ( [[knowthat]] instanceof List ) { return ( [[hamsters]] ) new JsonArray ( ( List ) [[knowthat]] ) ; } return [[knowthat]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 903 ---------------------------------------------
Sets the mime type . --> Sets the disheartened property . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[disheartened]] ) { if ( [[disheartened]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[disheartened]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[disheartened]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 904 ---------------------------------------------
Lookup a named named parameter . --> get DbQueryNamedParameter oxfam --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[oxfam]] ( final String [[gilchrist]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[gilchrist]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
[Succeeded / Failed / Skipped / Total] 664 / 213 / 28 / 905:  90%|█████████ | 905/1000 [41:57<04:24,  2.78s/it][Succeeded / Failed / Skipped / Total] 664 / 213 / 28 / 905:  91%|█████████ | 906/1000 [42:02<04:21,  2.78s/it][Succeeded / Failed / Skipped / Total] 665 / 213 / 28 / 906:  91%|█████████ | 906/1000 [42:02<04:21,  2.78s/it][Succeeded / Failed / Skipped / Total] 666 / 213 / 28 / 907:  91%|█████████ | 907/1000 [42:03<04:18,  2.78s/it][Succeeded / Failed / Skipped / Total] 666 / 213 / 28 / 907:  91%|█████████ | 908/1000 [42:08<04:16,  2.78s/it][Succeeded / Failed / Skipped / Total] 666 / 214 / 28 / 908:  91%|█████████ | 908/1000 [42:08<04:16,  2.78s/it][Succeeded / Failed / Skipped / Total] 667 / 214 / 28 / 909:  91%|█████████ | 909/1000 [42:09<04:13,  2.78s/it][Succeeded / Failed / Skipped / Total] 667 / 214 / 28 / 909:  91%|█████████ | 910/1000 [42:10<04:10,  2.78s/it][Succeeded / Failed / Skipped / Total] 668 / 214 / 28 / 910:  91%|█████████ | 910/1000 [42:10<04:10,  2.78s/it][Succeeded / Failed / Skipped / Total] 668 / 215 / 28 / 911:  91%|█████████ | 911/1000 [42:12<04:07,  2.78s/it][Succeeded / Failed / Skipped / Total] 668 / 215 / 28 / 911:  91%|█████████ | 912/1000 [42:12<04:04,  2.78s/it][Succeeded / Failed / Skipped / Total] 668 / 216 / 28 / 912:  91%|█████████ | 912/1000 [42:12<04:04,  2.78s/it]--------------------------------------------- Result 905 ---------------------------------------------
Validates an action . --> diolations --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[dalia]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[aztec]] = vtor . getViolations ( ) ; return [[aztec]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
Process the target class . --> If targetInputStream is null throws an exception --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[artem]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 907 ---------------------------------------------
Adds a new violation . --> Callback for ostriches --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[ostriches]] ( final String name , final Object [[zuko]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[zuko]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target class name . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[avalanche]] ( final String [[cet]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[cet]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[cet]] ) ; } targetClassName = [[cet]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[cet]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
Gets the target object . --> Set the vaccination --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[fitzwilliam]] ( final Class [[vaccination]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[vaccination]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[vaccination]] . getName ( ) ) ; } targetClass = [[vaccination]] ; targetClassName = [[vaccination]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[vaccination]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Create the proxy . --> Creates the proxy --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[chael]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[chael]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[chael]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 911 ---------------------------------------------
Closes the supplied folder if any . --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder folder ) { if ( folder != null ) { try { folder . close ( "[[Wifes]]" == "[[Wifes]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 912 ---------------------------------------------
Get target object . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[trophy]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 669 / 216 / 28 / 913:  91%|█████████▏| 913/1000 [42:15<04:01,  2.78s/it][Succeeded / Failed / Skipped / Total] 669 / 216 / 28 / 913:  91%|█████████▏| 914/1000 [42:15<03:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 670 / 216 / 28 / 914:  91%|█████████▏| 914/1000 [42:15<03:58,  2.77s/it][Succeeded / Failed / Skipped / Total] 671 / 216 / 28 / 915:  92%|█████████▏| 915/1000 [42:16<03:55,  2.77s/it][Succeeded / Failed / Skipped / Total] 671 / 216 / 28 / 915:  92%|█████████▏| 916/1000 [42:19<03:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 672 / 216 / 28 / 916:  92%|█████████▏| 916/1000 [42:19<03:52,  2.77s/it][Succeeded / Failed / Skipped / Total] 673 / 216 / 28 / 917:  92%|█████████▏| 917/1000 [42:21<03:50,  2.77s/it][Succeeded / Failed / Skipped / Total] 673 / 216 / 28 / 917:  92%|█████████▏| 918/1000 [42:22<03:47,  2.77s/it][Succeeded / Failed / Skipped / Total] 674 / 216 / 28 / 918:  92%|█████████▏| 918/1000 [42:22<03:47,  2.77s/it][Succeeded / Failed / Skipped / Total] 675 / 216 / 28 / 919:  92%|█████████▏| 919/1000 [42:24<03:44,  2.77s/it][Succeeded / Failed / Skipped / Total] 675 / 216 / 28 / 919:  92%|█████████▏| 920/1000 [42:26<03:41,  2.77s/it][Succeeded / Failed / Skipped / Total] 676 / 216 / 28 / 920:  92%|█████████▏| 920/1000 [42:26<03:41,  2.77s/it]Define the proxy . --> Creates a proxy --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[deconstruct]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 914 ---------------------------------------------
Creates a new instance of Proxetta class . --> Create an object --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[diverse]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Dump the debug folder . --> impl of debugFolder --> Socre: 1.0

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[file]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[file]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[greyhounds]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[greyhounds]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[greyhounds]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 916 ---------------------------------------------
Create a EmailAddress from the given String . --> Create a new EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T from ( final String personalName , final String [[from]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String [[assignation]] ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 917 ---------------------------------------------
Returns the specified address array . --> Only one operation --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[DYSTROPHY]] ( final EmailAddress ... [[DYSTROPHY]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[DYSTROPHY]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Get the content of the file . --> Set downloadable as --> Socre: 1.0

[[[[Adv]]]]: public RawData downloadableAs ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String [[cancellations]] ) { this . downloadFileName = [[cancellations]] ; this . [[carino]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[cancellations]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 919 ---------------------------------------------
Adds a cc . --> Adds the given EmailAddress to this one --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[aggravation]] ( final EmailAddress ... ccs ) { this . cc = ArraysUtil . join ( this . cc , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Converts an address to an object . --> append a soundbs --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[bubbs]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[bubbs]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 921 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 677 / 216 / 28 / 921:  92%|█████████▏| 921/1000 [42:28<03:38,  2.77s/it][Succeeded / Failed / Skipped / Total] 677 / 216 / 28 / 921:  92%|█████████▏| 922/1000 [42:28<03:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 678 / 216 / 28 / 922:  92%|█████████▏| 922/1000 [42:28<03:35,  2.76s/it][Succeeded / Failed / Skipped / Total] 679 / 216 / 28 / 923:  92%|█████████▏| 923/1000 [42:34<03:33,  2.77s/it][Succeeded / Failed / Skipped / Total] 679 / 216 / 28 / 923:  92%|█████████▏| 924/1000 [42:35<03:30,  2.77s/it][Succeeded / Failed / Skipped / Total] 680 / 216 / 28 / 924:  92%|█████████▏| 924/1000 [42:35<03:30,  2.77s/it][Succeeded / Failed / Skipped / Total] 681 / 216 / 28 / 925:  92%|█████████▎| 925/1000 [42:36<03:27,  2.76s/it][Succeeded / Failed / Skipped / Total] 681 / 216 / 28 / 925:  93%|█████████▎| 926/1000 [42:39<03:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 681 / 217 / 28 / 926:  93%|█████████▎| 926/1000 [42:39<03:24,  2.76s/it][Succeeded / Failed / Skipped / Total] 682 / 217 / 28 / 927:  93%|█████████▎| 927/1000 [42:41<03:21,  2.76s/it][Succeeded / Failed / Skipped / Total] 682 / 217 / 28 / 927:  93%|█████████▎| 928/1000 [42:54<03:19,  2.77s/it][Succeeded / Failed / Skipped / Total] 683 / 217 / 28 / 928:  93%|█████████▎| 928/1000 [42:54<03:19,  2.77s/it][Succeeded / Failed / Skipped / Total] 683 / 217 / 28 / 928:  93%|█████████▎| 929/1000 [43:02<03:17,  2.78s/it][Succeeded / Failed / Skipped / Total] 684 / 217 / 28 / 929:  93%|█████████▎| 929/1000 [43:02<03:17,  2.78s/it][Succeeded / Failed / Skipped / Total] 684 / 217 / 28 / 929:  93%|█████████▎| 930/1000 [43:05<03:14,  2.78s/it][Succeeded / Failed / Skipped / Total] 684 / 218 / 28 / 930:  93%|█████████▎| 930/1000 [43:05<03:14,  2.78s/it][Succeeded / Failed / Skipped / Total] 684 / 218 / 28 / 930:  93%|█████████▎| 931/1000 [43:14<03:12,  2.79s/it]Set the text message . --> En elven an encoding --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[elven]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 922 ---------------------------------------------
Converts a EmailAddress to a T object . --> Add a EmailAddress --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[callback]] , final String to ) { return to ( new EmailAddress ( [[callback]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 923 ---------------------------------------------
Adds a header . --> Set the chested and yom --> Socre: 1.0

[[[[Adv]]]]: public T header ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T header ( final String [[chested]] , final String [[yom]] ) { headers . put ( [[chested]] , [[yom]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 924 ---------------------------------------------
Adds an html message . --> Write rouse to encoding --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[intoxicate]] ( final String [[rouse]] , final String encoding ) { return message ( new EmailMessage ( [[rouse]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
Get a long value . --> Parse a long from a String --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[alaikum]] , final int defaultValue ) { String value = get ( [[alaikum]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[showers]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
Gets the value . --> Get aurora --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String [[aurora]] ) { Objects . requireNonNull ( name ) ; String [[fuegos]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[fuegos]] = System . getProperty ( name ) ; } else { [[fuegos]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[fuegos]] == null ) { return [[aurora]] ; } return [[fuegos]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 928 ---------------------------------------------
Returns the result path . --> Safely generate hurts --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "[[False]]" != "[[False]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[hurts]] ( String path , String value ) { boolean absolutePath = "[[Refining]]" != "[[Refining]]" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 929 ---------------------------------------------
Gets the index of the last slash in the string . --> deserves a string --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[deserves]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 930 ---------------------------------------------
Lookup alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( [[alias]] ) ; if ( [[cfg]] != null ) { value = [[cfg]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[quatrains]] ) { String value = actionsManager . lookupPathAlias ( [[quatrains]] ) ; if ( value == null ) { ActionRuntime [[facsimile]] = actionsManager . lookup ( [[quatrains]] ) ; if ( [[facsimile]] != null ) { value = [[facsimile]] . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 685 / 218 / 28 / 931:  93%|█████████▎| 931/1000 [43:14<03:12,  2.79s/it][Succeeded / Failed / Skipped / Total] 685 / 218 / 28 / 931:  93%|█████████▎| 932/1000 [43:25<03:10,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 218 / 28 / 932:  93%|█████████▎| 932/1000 [43:25<03:10,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 218 / 28 / 932:  93%|█████████▎| 933/1000 [43:31<03:07,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 219 / 28 / 933:  93%|█████████▎| 933/1000 [43:31<03:07,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 219 / 28 / 933:  93%|█████████▎| 934/1000 [43:35<03:04,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 28 / 934:  93%|█████████▎| 934/1000 [43:35<03:04,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 28 / 934:  94%|█████████▎| 935/1000 [43:35<03:01,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 29 / 935:  94%|█████████▎| 935/1000 [43:35<03:01,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 29 / 935:  94%|█████████▎| 936/1000 [43:36<02:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 30 / 936:  94%|█████████▎| 936/1000 [43:36<02:58,  2.80s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 30 / 936:  94%|█████████▎| 937/1000 [43:36<02:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 31 / 937:  94%|█████████▎| 937/1000 [43:36<02:55,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 220 / 31 / 937:  94%|█████████▍| 938/1000 [43:38<02:53,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 221 / 31 / 938:  94%|█████████▍| 938/1000 [43:38<02:53,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 221 / 31 / 938:  94%|█████████▍| 939/1000 [43:40<02:50,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 222 / 31 / 939:  94%|█████████▍| 939/1000 [43:40<02:50,  2.79s/it][Succeeded / Failed / Skipped / Total] 686 / 222 / 31 / 939:  94%|█████████▍| 940/1000 [43:43<02:47,  2.79s/it][Succeeded / Failed / Skipped / Total] 687 / 222 / 31 / 940:  94%|█████████▍| 940/1000 [43:43<02:47,  2.79s/it][Succeeded / Failed / Skipped / Total] 687 / 222 / 31 / 940:  94%|█████████▍| 941/1000 [43:47<02:44,  2.79s/it][Succeeded / Failed / Skipped / Total] 688 / 222 / 31 / 941:  94%|█████████▍| 941/1000 [43:47<02:44,  2.79s/it][Succeeded / Failed / Skipped / Total] 688 / 222 / 31 / 941:  94%|█████████▍| 942/1000 [43:47<02:41,  2.79s/it]Strip last camel word . --> This method returns the first char in the specified name . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[actress]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 932 ---------------------------------------------
Get boolean . --> Determines whether the given value is in the cache or not --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String [[name]] , final boolean [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[priesthood]] ( final String [[apologising]] , final boolean [[shooters]] ) { String value = get ( [[apologising]] ) ; if ( value == null ) { return [[shooters]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[shooters]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 933 ---------------------------------------------
Gets the index of the dot of the specified slash . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return str . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[putney]] ( final String str ) { int [[kms]] = str . lastIndexOf ( ' ' ) ; if ( [[kms]] == - 1 ) { [[kms]] = 0 ; } return str . indexOf ( ' ' , [[kms]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 934 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLong ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long getLong ( final String [[subconsciously]] , final long defaultValue ) { String [[gillette]] = get ( [[subconsciously]] ) ; if ( [[gillette]] == null ) { return defaultValue ; } [[gillette]] = [[gillette]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[gillette]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 935 ---------------------------------------------
Liefert d = d --> [[[SKIPPED]]]

[[[[Adv]]]]: private void mix ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 936 ---------------------------------------------
Estimate a demix --> [[[SKIPPED]]]

[[[[Adv]]]]: private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 937 ---------------------------------------------
key - value pairs --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 938 ---------------------------------------------
Resolves the given path and value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[rembrandt]] ( final String path , final String value ) { final ResultPath resultPath = resolveResultPath ( path , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 939 ---------------------------------------------
Get the index of the last slash in the string --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[str]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[bruni]] ( final String [[bri]] ) { int slashNdx = [[bri]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[bri]] , ' ' , [[bri]] . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < [[bri]] . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 940 ---------------------------------------------
Resolve alias . --> Calculate link for dog --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int [[len]] = [[value]] . length ( ) ; while ( i < [[len]] ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[dalia]] ( final String [[dogpatch]] ) { final StringBuilder result = new StringBuilder ( [[dogpatch]] . length ( ) ) ; int i = 0 ; int [[agains]] = [[dogpatch]] . length ( ) ; while ( i < [[agains]] ) { int ndx = [[dogpatch]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 941 ---------------------------------------------
Initializes the internal set . --> region borgias --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] [[tweak]] ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[borgias]] ( final long [ ] key , final long [ ] [[irst]] ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 942 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 689 / 222 / 31 / 942:  94%|█████████▍| 942/1000 [43:47<02:41,  2.79s/it][Succeeded / Failed / Skipped / Total] 689 / 222 / 31 / 942:  94%|█████████▍| 943/1000 [43:48<02:38,  2.79s/it][Succeeded / Failed / Skipped / Total] 690 / 222 / 31 / 943:  94%|█████████▍| 943/1000 [43:48<02:38,  2.79s/it][Succeeded / Failed / Skipped / Total] 690 / 222 / 31 / 943:  94%|█████████▍| 944/1000 [43:49<02:35,  2.79s/it][Succeeded / Failed / Skipped / Total] 691 / 222 / 31 / 944:  94%|█████████▍| 944/1000 [43:49<02:35,  2.79s/it][Succeeded / Failed / Skipped / Total] 691 / 222 / 31 / 944:  94%|█████████▍| 945/1000 [43:54<02:33,  2.79s/it][Succeeded / Failed / Skipped / Total] 691 / 223 / 31 / 945:  94%|█████████▍| 945/1000 [43:54<02:33,  2.79s/it][Succeeded / Failed / Skipped / Total] 691 / 223 / 31 / 945:  95%|█████████▍| 946/1000 [43:59<02:30,  2.79s/it][Succeeded / Failed / Skipped / Total] 692 / 223 / 31 / 946:  95%|█████████▍| 946/1000 [43:59<02:30,  2.79s/it][Succeeded / Failed / Skipped / Total] 692 / 223 / 31 / 946:  95%|█████████▍| 947/1000 [44:02<02:27,  2.79s/it][Succeeded / Failed / Skipped / Total] 693 / 223 / 31 / 947:  95%|█████████▍| 947/1000 [44:02<02:27,  2.79s/it][Succeeded / Failed / Skipped / Total] 693 / 223 / 31 / 947:  95%|█████████▍| 948/1000 [44:04<02:25,  2.79s/it][Succeeded / Failed / Skipped / Total] 694 / 223 / 31 / 948:  95%|█████████▍| 948/1000 [44:04<02:25,  2.79s/it][Succeeded / Failed / Skipped / Total] 694 / 223 / 31 / 948:  95%|█████████▍| 949/1000 [44:13<02:22,  2.80s/it]Encrypt the block --> Gets the bytes from content --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[agry]] ( final byte [ ] content , final int offset ) { long [ ] contentBlock = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 943 ---------------------------------------------
Serialize a key value . --> Calculates the shock --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path [[currentPath]] , final Object [[key]] , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[key]] != null ) { [[currentPath]] . push ( [[key]] . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[shockwave]] ( final JsonContext jsonContext , final Path [[tightening]] , final Object [[biles]] , final Object [[flght]] , int count ) { if ( ( [[flght]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( [[biles]] != null ) { [[tightening]] . push ( [[biles]] . toString ( ) ) ; } else { [[tightening]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 944 ---------------------------------------------
Initializes the key . --> Initialize tweak1 and tweak2 --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String [[keyMessage]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String [[banker]] , final long tweak1 , final long tweak2 ) { long [ ] tweak = new long [ ] { tweak1 , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[banker]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 945 ---------------------------------------------
Resolve schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[backboard]] ( final Class < ? > [[bango]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[bango]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 946 ---------------------------------------------
Returns the ungzip file . --> Unzip a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[brushes]] = new File ( outFileName ) ; [[brushes]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[brushes]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[brushes]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 947 ---------------------------------------------
Returns the path of the resource . --> get liberia --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[liberia]] ( ) { if ( methref != null ) { final String [[psychotherapy]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[psychotherapy]] ; } return [[liberia]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 948 ---------------------------------------------
Convert a byte array to a long array . --> desensitized function --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int [[i]] = 0 ; [[i]] < result . length ; [[i]] ++ ) { result [ [[i]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[desensitized]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int [[brawls]] = 0 ; [[brawls]] < result . length ; [[brawls]] ++ ) { result [ [[brawls]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 949 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 695 / 223 / 31 / 949:  95%|█████████▍| 949/1000 [44:13<02:22,  2.80s/it][Succeeded / Failed / Skipped / Total] 695 / 223 / 31 / 949:  95%|█████████▌| 950/1000 [44:14<02:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 696 / 223 / 31 / 950:  95%|█████████▌| 950/1000 [44:14<02:19,  2.79s/it][Succeeded / Failed / Skipped / Total] 696 / 223 / 31 / 950:  95%|█████████▌| 951/1000 [44:23<02:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 696 / 224 / 31 / 951:  95%|█████████▌| 951/1000 [44:23<02:17,  2.80s/it][Succeeded / Failed / Skipped / Total] 696 / 224 / 31 / 951:  95%|█████████▌| 952/1000 [44:24<02:14,  2.80s/it][Succeeded / Failed / Skipped / Total] 696 / 225 / 31 / 952:  95%|█████████▌| 952/1000 [44:24<02:14,  2.80s/it][Succeeded / Failed / Skipped / Total] 696 / 225 / 31 / 952:  95%|█████████▌| 953/1000 [44:29<02:11,  2.80s/it][Succeeded / Failed / Skipped / Total] 697 / 225 / 31 / 953:  95%|█████████▌| 953/1000 [44:29<02:11,  2.80s/it][Succeeded / Failed / Skipped / Total] 697 / 225 / 31 / 953:  95%|█████████▌| 954/1000 [44:30<02:08,  2.80s/it][Succeeded / Failed / Skipped / Total] 698 / 225 / 31 / 954:  95%|█████████▌| 954/1000 [44:30<02:08,  2.80s/it][Succeeded / Failed / Skipped / Total] 698 / 225 / 31 / 954:  96%|█████████▌| 955/1000 [44:33<02:05,  2.80s/it]Adds a file to a zip file . --> egyptian a file with a comment --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[egyptian]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 950 ---------------------------------------------
Adds content to a ZipOutputStream . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[hedonism]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 951 ---------------------------------------------
Create a zlib file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[dos]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , [[dos]] ) ; } finally { StreamUtil . close ( [[dos]] ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream [[saki]] = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , [[saki]] ) ; } finally { StreamUtil . close ( [[saki]] ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 952 ---------------------------------------------
Removes any lower case . --> [[[FAILED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[e]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( [[e]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char [[ballon]] , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( [[ballon]] ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 953 ---------------------------------------------
List all the zip entries of the specified zip file . --> Returns a list of all possible entries of the given interchange --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[sodding]] ( final File [[interchange]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[interchange]] ) ; Enumeration [[stein]] = zip . entries ( ) ; while ( [[stein]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[stein]] . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 954 ---------------------------------------------
Unzip a directory to a destination directory . --> espionage files --> Socre: 1.0

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String [[destDir]] , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( [[destDir]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[espionage]] ( final String [[drunker]] , final String [[chromatic]] , final String ... patterns ) throws IOException { [[espionage]] ( new File ( [[drunker]] ) , new File ( [[chromatic]] ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 955 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 698 / 226 / 31 / 955:  96%|█████████▌| 955/1000 [44:33<02:05,  2.80s/it][Succeeded / Failed / Skipped / Total] 698 / 226 / 31 / 955:  96%|█████████▌| 956/1000 [44:43<02:03,  2.81s/it][Succeeded / Failed / Skipped / Total] 698 / 227 / 31 / 956:  96%|█████████▌| 956/1000 [44:43<02:03,  2.81s/it][Succeeded / Failed / Skipped / Total] 698 / 227 / 31 / 956:  96%|█████████▌| 957/1000 [44:45<02:00,  2.81s/it][Succeeded / Failed / Skipped / Total] 699 / 227 / 31 / 957:  96%|█████████▌| 957/1000 [44:45<02:00,  2.81s/it][Succeeded / Failed / Skipped / Total] 699 / 227 / 31 / 957:  96%|█████████▌| 958/1000 [44:45<01:57,  2.80s/it][Succeeded / Failed / Skipped / Total] 700 / 227 / 31 / 958:  96%|█████████▌| 958/1000 [44:45<01:57,  2.80s/it][Succeeded / Failed / Skipped / Total] 700 / 227 / 31 / 958:  96%|█████████▌| 959/1000 [44:53<01:55,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 228 / 31 / 959:  96%|█████████▌| 959/1000 [44:53<01:55,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 228 / 31 / 959:  96%|█████████▌| 960/1000 [44:55<01:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 229 / 31 / 960:  96%|█████████▌| 960/1000 [44:55<01:52,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 229 / 31 / 960:  96%|█████████▌| 961/1000 [44:59<01:49,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 230 / 31 / 961:  96%|█████████▌| 961/1000 [44:59<01:49,  2.81s/it][Succeeded / Failed / Skipped / Total] 700 / 230 / 31 / 961:  96%|█████████▌| 962/1000 [45:04<01:46,  2.81s/it][Succeeded / Failed / Skipped / Total] 701 / 230 / 31 / 962:  96%|█████████▌| 962/1000 [45:04<01:46,  2.81s/it][Succeeded / Failed / Skipped / Total] 701 / 230 / 31 / 962:  96%|█████████▋| 963/1000 [45:12<01:44,  2.82s/it]gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[loan]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[power]] = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[power]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[power]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 956 ---------------------------------------------
Sets the bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[dandruff]] ( final ServletRequest [[addictive]] , final String [[bonita]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bonita]] ) ; } [[addictive]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bonita]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 957 ---------------------------------------------
Resolve column descriptors . --> Create a ColumnNaming strategy --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean [[isId]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[dandruff]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean [[terrace]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 958 ---------------------------------------------
Set the list of profiles to be built . --> Set profile list --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String profile : [[profiles]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries profile ( final String ... [[crated]] ) { if ( [[crated]] == null ) { return this ; } for ( String profile : [[crated]] ) { addProfiles ( profile ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 959 ---------------------------------------------
Returns the field descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[mantis]] ( final String [[derive]] , final boolean [[kayama]] ) { final FieldDescriptor [[aint]] = getFields ( ) . getFieldDescriptor ( [[derive]] ) ; if ( [[aint]] != null ) { if ( ! [[aint]] . matchDeclared ( [[kayama]] ) ) { return null ; } } return [[aint]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the locale associated with this session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale locale = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[jillette]] ( final HttpSession [[serenity]] ) { Locale locale = ( Locale ) [[serenity]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Set the session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[vls]] ( final HttpSession [[diamond]] , final String [[irresponsibly]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[irresponsibly]] ) ; } Locale locale = Locale . forLanguageTag ( [[irresponsibly]] ) ; [[diamond]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
Returns the property descriptor for the given property name . --> Get a PropertyDescriptor --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[planetarium]] ( final String name , final boolean declared ) { PropertyDescriptor [[snowsuit]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[snowsuit]] != null ) && [[snowsuit]] . matchDeclared ( declared ) ) { return [[snowsuit]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 963 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 702 / 230 / 31 / 963:  96%|█████████▋| 963/1000 [45:12<01:44,  2.82s/it][Succeeded / Failed / Skipped / Total] 702 / 230 / 31 / 963:  96%|█████████▋| 964/1000 [45:13<01:41,  2.81s/it][Succeeded / Failed / Skipped / Total] 702 / 231 / 31 / 964:  96%|█████████▋| 964/1000 [45:13<01:41,  2.81s/it][Succeeded / Failed / Skipped / Total] 702 / 231 / 31 / 964:  96%|█████████▋| 965/1000 [45:15<01:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 702 / 232 / 31 / 965:  96%|█████████▋| 965/1000 [45:15<01:38,  2.81s/it][Succeeded / Failed / Skipped / Total] 702 / 232 / 31 / 965:  97%|█████████▋| 966/1000 [45:24<01:35,  2.82s/it][Succeeded / Failed / Skipped / Total] 702 / 233 / 31 / 966:  97%|█████████▋| 966/1000 [45:24<01:35,  2.82s/it][Succeeded / Failed / Skipped / Total] 702 / 233 / 31 / 966:  97%|█████████▋| 967/1000 [45:32<01:33,  2.83s/it][Succeeded / Failed / Skipped / Total] 702 / 234 / 31 / 967:  97%|█████████▋| 967/1000 [45:32<01:33,  2.83s/it][Succeeded / Failed / Skipped / Total] 702 / 234 / 31 / 967:  97%|█████████▋| 968/1000 [45:36<01:30,  2.83s/it][Succeeded / Failed / Skipped / Total] 702 / 235 / 31 / 968:  97%|█████████▋| 968/1000 [45:36<01:30,  2.83s/it][Succeeded / Failed / Skipped / Total] 702 / 235 / 31 / 968:  97%|█████████▋| 969/1000 [45:39<01:27,  2.83s/it][Succeeded / Failed / Skipped / Total] 703 / 235 / 31 / 969:  97%|█████████▋| 969/1000 [45:39<01:27,  2.83s/it][Succeeded / Failed / Skipped / Total] 703 / 235 / 31 / 969:  97%|█████████▋| 970/1000 [45:41<01:24,  2.83s/it]Read a big endian long from the byte array . --> des bastard --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[desmond]] ( final byte [ ] [[billboards]] , final int [[bastard]] ) { return ( ( long ) [[billboards]] [ [[bastard]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Filter the parameters for the bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[key]] = entry . getKey ( ) ; if ( ! [[key]] . startsWith ( beanName ) ) { continue ; } [[list]] . add ( [[key]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[disheartened]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[recited]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String [[diverse]] = entry . getKey ( ) ; if ( ! [[diverse]] . startsWith ( beanName ) ) { continue ; } [[recited]] . add ( [[diverse]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[torches]] , final Label [ ] labels ) { if ( labels [ [[torches]] ] == null ) { labels [ [[torches]] ] = new Label ( ) ; } return labels [ [[torches]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 966 ---------------------------------------------
Get the type annotation by its offset . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[dudley]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads the input stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean close ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[inputStream]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[teflon]] ( final InputStream [[concubine]] , final boolean close ) throws IOException { if ( [[concubine]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = [[concubine]] . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { [[concubine]] . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
Reads the annotation field values . --> [[[FAILED]]]

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[leprechaun]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 969 ---------------------------------------------
Create the servlet request map . --> Helper method for erez --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[erez]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 970 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 704 / 235 / 31 / 970:  97%|█████████▋| 970/1000 [45:41<01:24,  2.83s/it][Succeeded / Failed / Skipped / Total] 704 / 235 / 31 / 970:  97%|█████████▋| 971/1000 [45:41<01:21,  2.82s/it][Succeeded / Failed / Skipped / Total] 704 / 236 / 31 / 971:  97%|█████████▋| 971/1000 [45:41<01:21,  2.82s/it][Succeeded / Failed / Skipped / Total] 704 / 236 / 31 / 971:  97%|█████████▋| 972/1000 [45:47<01:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 705 / 236 / 31 / 972:  97%|█████████▋| 972/1000 [45:47<01:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 705 / 236 / 31 / 972:  97%|█████████▋| 973/1000 [45:50<01:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 706 / 236 / 31 / 973:  97%|█████████▋| 973/1000 [45:50<01:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 706 / 236 / 31 / 973:  97%|█████████▋| 974/1000 [45:54<01:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 707 / 236 / 31 / 974:  97%|█████████▋| 974/1000 [45:54<01:13,  2.83s/it][Succeeded / Failed / Skipped / Total] 707 / 236 / 31 / 974:  98%|█████████▊| 975/1000 [45:56<01:10,  2.83s/it][Succeeded / Failed / Skipped / Total] 708 / 236 / 31 / 975:  98%|█████████▊| 975/1000 [45:56<01:10,  2.83s/it][Succeeded / Failed / Skipped / Total] 708 / 236 / 31 / 975:  98%|█████████▊| 976/1000 [45:57<01:07,  2.83s/it][Succeeded / Failed / Skipped / Total] 708 / 237 / 31 / 976:  98%|█████████▊| 976/1000 [45:57<01:07,  2.83s/it][Succeeded / Failed / Skipped / Total] 708 / 237 / 31 / 976:  98%|█████████▊| 977/1000 [45:59<01:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 709 / 237 / 31 / 977:  98%|█████████▊| 977/1000 [45:59<01:04,  2.82s/it][Succeeded / Failed / Skipped / Total] 709 / 237 / 31 / 977:  98%|█████████▊| 978/1000 [46:00<01:02,  2.82s/it]Get a ctor descriptor . --> homeworld method --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[arg]] = ctorDescriptor . getParameters ( ) ; if ( [[arg]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[arg]] . length ; j ++ ) { if ( [[arg]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[homeworld]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] [[chrysler]] = ctorDescriptor . getParameters ( ) ; if ( [[chrysler]] . length != args . length ) { continue ; } for ( int j = 0 ; j < [[chrysler]] . length ; j ++ ) { if ( [[chrysler]] [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 971 ---------------------------------------------
Gets the request attributes map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[reviving]] ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 972 ---------------------------------------------
Convert a value to array types . --> for primitive types --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class [[valueComponentType]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[valueComponentType]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[fortnight]] ( final Object value ) { final Class [[pomposity]] = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( [[pomposity]] . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , [[pomposity]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 973 ---------------------------------------------
Initializes the filter . --> Get the FilterConfig --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[deconstruct]] ( final FilterConfig [[pst]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 974 ---------------------------------------------
Adds a FindFile to the search path . --> Generate a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[finch]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[finch]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[finch]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 975 ---------------------------------------------
Finds the FindFile at the specified search path . --> Adds a FindFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[compulsory]] ( final URI [[babli]] ) { File file ; try { file = new File ( [[compulsory]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[compulsory]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 976 ---------------------------------------------
read verificationTypeInfo . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[dadi]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 977 ---------------------------------------------
Sets the exclude patterns . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... patterns ) { for ( String [[anwar]] : patterns ) { rules . exclude ( [[anwar]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
[Succeeded / Failed / Skipped / Total] 710 / 237 / 31 / 978:  98%|█████████▊| 978/1000 [46:00<01:02,  2.82s/it][Succeeded / Failed / Skipped / Total] 710 / 237 / 31 / 978:  98%|█████████▊| 979/1000 [46:06<00:59,  2.83s/it][Succeeded / Failed / Skipped / Total] 711 / 237 / 31 / 979:  98%|█████████▊| 979/1000 [46:06<00:59,  2.83s/it][Succeeded / Failed / Skipped / Total] 711 / 237 / 31 / 979:  98%|█████████▊| 980/1000 [46:09<00:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 712 / 237 / 31 / 980:  98%|█████████▊| 980/1000 [46:09<00:56,  2.83s/it][Succeeded / Failed / Skipped / Total] 712 / 237 / 31 / 980:  98%|█████████▊| 981/1000 [46:09<00:53,  2.82s/it][Succeeded / Failed / Skipped / Total] 712 / 238 / 31 / 981:  98%|█████████▊| 981/1000 [46:09<00:53,  2.82s/it][Succeeded / Failed / Skipped / Total] 712 / 238 / 31 / 981:  98%|█████████▊| 982/1000 [46:14<00:50,  2.83s/it][Succeeded / Failed / Skipped / Total] 713 / 238 / 31 / 982:  98%|█████████▊| 982/1000 [46:14<00:50,  2.83s/it][Succeeded / Failed / Skipped / Total] 713 / 238 / 31 / 982:  98%|█████████▊| 983/1000 [46:15<00:48,  2.82s/it][Succeeded / Failed / Skipped / Total] 714 / 238 / 31 / 983:  98%|█████████▊| 983/1000 [46:15<00:48,  2.82s/it][Succeeded / Failed / Skipped / Total] 714 / 238 / 31 / 983:  98%|█████████▊| 984/1000 [46:16<00:45,  2.82s/it][Succeeded / Failed / Skipped / Total] 715 / 238 / 31 / 984:  98%|█████████▊| 984/1000 [46:16<00:45,  2.82s/it][Succeeded / Failed / Skipped / Total] 715 / 238 / 31 / 984:  98%|█████████▊| 985/1000 [46:17<00:42,  2.82s/it][Succeeded / Failed / Skipped / Total] 715 / 239 / 31 / 985:  98%|█████████▊| 985/1000 [46:17<00:42,  2.82s/it][Succeeded / Failed / Skipped / Total] 715 / 239 / 31 / 985:  99%|█████████▊| 986/1000 [46:18<00:39,  2.82s/it]--------------------------------------------- Result 978 ---------------------------------------------
Adds a file to the list . --> Adds a dazs to the list . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[dazs]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[dazs]] ) ; } else { consumers . add ( [[dazs]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 979 ---------------------------------------------
Sets the patterns to include . --> FindFile buon list --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[buon]] ( final String ... patterns ) { for ( String [[rasheed]] : patterns ) { rules . include ( [[rasheed]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 980 ---------------------------------------------
Initialize rules . --> Initialize the pathList --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[files]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[files]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[files]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[crotch]] = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { [[crotch]] [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[crotch]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 981 ---------------------------------------------
Returns an iterator of the file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[holdin]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 982 ---------------------------------------------
Returns all files . --> Methode permetteman s --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[nonstop]] ( ) { List < File > [[brakeman]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[brakeman]] . add ( file ) ; } return [[brakeman]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 983 ---------------------------------------------
Adds a path to the list . --> Process aussies --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[el]] ( final File [[aussies]] ) { if ( ! [[aussies]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[aussies]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 984 ---------------------------------------------
Get the buffered writer . --> Get the bufferedins --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[vitamins]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the underlying stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[southgate]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 986 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 715 / 240 / 31 / 986:  99%|█████████▊| 986/1000 [46:18<00:39,  2.82s/it][Succeeded / Failed / Skipped / Total] 715 / 240 / 31 / 986:  99%|█████████▊| 987/1000 [46:31<00:36,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 241 / 31 / 987:  99%|█████████▊| 987/1000 [46:31<00:36,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 241 / 31 / 987:  99%|█████████▉| 988/1000 [46:34<00:33,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 242 / 31 / 988:  99%|█████████▉| 988/1000 [46:34<00:33,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 242 / 31 / 988:  99%|█████████▉| 989/1000 [46:36<00:31,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 243 / 31 / 989:  99%|█████████▉| 989/1000 [46:36<00:31,  2.83s/it][Succeeded / Failed / Skipped / Total] 715 / 243 / 31 / 989:  99%|█████████▉| 990/1000 [46:40<00:28,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 243 / 31 / 990:  99%|█████████▉| 990/1000 [46:40<00:28,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 243 / 31 / 990:  99%|█████████▉| 991/1000 [46:41<00:25,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 244 / 31 / 991:  99%|█████████▉| 991/1000 [46:41<00:25,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 244 / 31 / 991:  99%|█████████▉| 992/1000 [46:42<00:22,  2.83s/it]Reads theBootstrapMethods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int [[maxStringLength]] ) { char [ ] [[charBuffer]] = new char [ [[maxStringLength]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[mei]] ( final int [[scythians]] ) { char [ ] [[wreak]] = new char [ [[scythians]] ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 987 ---------------------------------------------
Returns an array of CtorDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int [[i]] = 0 ; [[i]] < [[ctors]] . length ; [[i]] ++ ) { Constructor ctor = [[ctors]] [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[historian]] = classDescriptor . getType ( ) ; Constructor [ ] [[newspapermen]] = [[historian]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[newspapermen]] . length ] ; for ( int [[hullabaloo]] = 0 ; [[hullabaloo]] < [[newspapermen]] . length ; [[hullabaloo]] ++ ) { Constructor ctor = [[newspapermen]] [ [[hullabaloo]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ [[hullabaloo]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 988 ---------------------------------------------
Returns the class name of the type . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[fluctuate]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[rightie]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[intertwined]] = getDimensions ( ) ; [[intertwined]] > 0 ; -- [[intertwined]] ) { [[rightie]] . append ( "[]" ) ; } return [[rightie]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 989 ---------------------------------------------
Resolve bean Wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[namaste]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[namaste]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 990 ---------------------------------------------
Appends a descriptor . --> luxemburg --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[luxemburg]] ( final StringBuilder [[cranks]] ) { if ( sort == OBJECT ) { [[cranks]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[cranks]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[cranks]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 991 ---------------------------------------------
Returns the number of bytes in this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[malfunctioning]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 992 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 716 / 245 / 31 / 992:  99%|█████████▉| 992/1000 [46:42<00:22,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 245 / 31 / 992:  99%|█████████▉| 993/1000 [46:54<00:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 246 / 31 / 993:  99%|█████████▉| 993/1000 [46:54<00:19,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 246 / 31 / 993:  99%|█████████▉| 994/1000 [46:54<00:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 247 / 31 / 994:  99%|█████████▉| 994/1000 [46:54<00:16,  2.83s/it][Succeeded / Failed / Skipped / Total] 716 / 247 / 31 / 994: 100%|█████████▉| 995/1000 [46:59<00:14,  2.83s/it][Succeeded / Failed / Skipped / Total] 717 / 247 / 31 / 995: 100%|█████████▉| 995/1000 [46:59<00:14,  2.83s/it][Succeeded / Failed / Skipped / Total] 717 / 247 / 31 / 995: 100%|█████████▉| 996/1000 [47:04<00:11,  2.84s/it][Succeeded / Failed / Skipped / Total] 717 / 248 / 31 / 996: 100%|█████████▉| 996/1000 [47:04<00:11,  2.84s/it][Succeeded / Failed / Skipped / Total] 717 / 248 / 31 / 996: 100%|█████████▉| 997/1000 [47:05<00:08,  2.83s/it][Succeeded / Failed / Skipped / Total] 718 / 248 / 31 / 997: 100%|█████████▉| 997/1000 [47:05<00:08,  2.83s/it][Succeeded / Failed / Skipped / Total] 718 / 248 / 31 / 997: 100%|█████████▉| 998/1000 [47:13<00:05,  2.84s/it]Resolve bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[bankbook]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( petiteBean != null ) { name = petiteBean . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 993 ---------------------------------------------
Returns a method descriptor for a method . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[geopolitical]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[armory]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[armory]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 994 ---------------------------------------------
Sets the rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void setRollbackOnly ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void setRollbackOnly ( final Throwable [[hec]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[hec]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Return the size of a method . --> fucking is 1 --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[fucking]] ( final String [[ols]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 996 ---------------------------------------------
Returns the constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[memoriam]] ( final Constructor < ? > [[marinated]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[therrien]] = [[marinated]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[therrien]] ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 997 ---------------------------------------------
Create a method descriptor . --> Get a String describing a dissonant --> Socre: 1.0

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type [[argumentType]] : [[argumentTypes]] ) { [[argumentType]] . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... [[dissonant]] ) { StringBuilder [[departs]] = new StringBuilder ( ) ; [[departs]] . append ( ' ' ) ; for ( Type [[biased]] : [[dissonant]] ) { [[biased]] . appendDescriptor ( [[departs]] ) ; } [[departs]] . append ( ' ' ) ; returnType . appendDescriptor ( [[departs]] ) ; return [[departs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 718 / 249 / 31 / 998: 100%|█████████▉| 998/1000 [47:13<00:05,  2.84s/it][Succeeded / Failed / Skipped / Total] 718 / 249 / 31 / 998: 100%|█████████▉| 999/1000 [47:32<00:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 719 / 249 / 31 / 999: 100%|█████████▉| 999/1000 [47:32<00:02,  2.86s/it][Succeeded / Failed / Skipped / Total] 719 / 249 / 31 / 999: 100%|██████████| 1000/1000 [47:39<00:00,  2.86s/it][Succeeded / Failed / Skipped / Total] 719 / 250 / 31 / 1000: 100%|██████████| 1000/1000 [47:39<00:00,  2.86s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 719 / 250 / 31 / 1000: 100%|██████████| 1000/1000 [47:43<00:00,  2.86s/it]Request a resource . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int [[thresher]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[thresher]] != - 1 ) && ( resources . size ( ) >= [[thresher]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[shizuo]] = txManager . lookupResourceManager ( resourceType ) ; resource = [[shizuo]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[shizuo]] , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 999 ---------------------------------------------
Commit or rollback . --> If piano is true do nothing --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[False]]" != "[[False]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "[[False]]" != "[[False]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[meggy]] ( boolean [[piano]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[piano]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[Bionic]]" != "[[Bionic]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[piano]] ) { [[piano]] = "[[Bionic]]" != "[[Bionic]]" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[piano]] ? "commit" : "rollback" ) ) ; } } if ( [[piano]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 1000 ---------------------------------------------
Rolls back all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[rollbackAllResources]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[resource]] = it . next ( ) ; try { [[resource]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void [[bachelorhood]] ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[emmi]] = it . next ( ) ; try { [[emmi]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 719    |
| Number of failed attacks:     | 250    |
| Number of skipped attacks:    | 31     |
| Original accuracy:            | 96.9%  |
| Accuracy under attack:        | 25.0%  |
| Attack success rate:          | 74.2%  |
| Average perturbed word %:     | 51.35% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 125.95 |
| Original BLEU-4:              | 16.31  |
| Perturbed BLEU-4:             | 1.29   |
+-------------------------------+--------+

/data/zzr/.pyenv/versions/3.8-dev/lib/python3.8/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 8 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
